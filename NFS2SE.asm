[BITS 32]

global binaryGameVersion

global start
global sub_41B250

global dword_5637CC
global dword_5637D8
global dword_4DB1B0
global dword_4DDA70
global dword_5637A0
global mousePositionX
global mousePositionY

extern SDL_NumJoysticks_wrap
extern SDL_GetTicks_wrap
extern SDL_Delay_wrap

extern iSNDdirectsetfunctions_wrap
extern iSNDdllversion_
extern iSNDdirectcaps_
extern iSNDdirectstart_
extern iSNDdirectserve_
extern iSNDdirectstop_

extern grAlphaBlendFunction
extern grAlphaCombine
extern grAlphaTestFunction
extern grAlphaTestReferenceValue
extern grBufferClear
extern grBufferSwap
extern grChromakeyMode
extern grChromakeyValue
extern grClipWindow
extern grColorCombine
extern grCullMode
extern grDepthBiasLevel
extern grDepthBufferFunction
extern grDepthBufferMode
extern grDepthMask
extern grDitherMode
extern grDrawLine
extern grDrawTriangle
extern grFogColorValue
extern grFogMode
extern grFogTable
extern grGammaCorrectionValue
extern grGlideInit
extern grGlideShutdown
extern grLfbLock
extern grLfbUnlock
extern grRenderBuffer
extern grSstIdle
extern grSstIsBusy
extern grSstQueryHardware
extern grSstSelect
extern grSstStatus
extern grSstWinClose
extern grSstWinOpen
extern grTexCalcMemRequired
extern grTexClampMode
extern grTexCombine
extern grTexCombineFunction
extern grTexDownloadMipMap
extern grTexDownloadTable
extern grTexFilterMode
extern grTexMaxAddress
extern grTexMinAddress
extern grTexMipMapMode
extern grTexSource
extern guFogGenerateExp

extern WrapperStartInThread
extern WrapperCreateWindow
extern fetchTrackRecords
extern WrapperAtExit
extern WrapperInit
extern startTimer
extern stopTimer

extern vsprintf_wrap
extern fscanf_wrap
extern fclose_wrap
extern calloc_wrap
extern malloc_wrap
extern fopen_wrap
extern free_wrap
extern time_wrap

extern DefWindowProcA_wrap
extern DestroyWindow_wrap
extern DispatchMessageA_wrap
extern GetKeyboardType_wrap
extern GetMessageA_wrap
extern MessageBoxA_wrap
extern PostMessageA_wrap

extern CloseHandle_wrap
extern CreateEventA_wrap
extern CreateFileA_wrap
extern CreateFileMappingA_wrap
extern CreateThread_wrap
extern DeleteCriticalSection_wrap
extern DeleteFileA_wrap
extern DuplicateHandle_wrap
extern EnterCriticalSection_wrap
extern ExitProcess_wrap
extern FindClose_wrap
extern FindFirstFileA_wrap
extern FindNextFileA_wrap
extern FlushFileBuffers_wrap
extern GetCommState_wrap
extern GetCurrentDirectoryA_wrap
extern GetCurrentProcess_wrap
extern GetCurrentThreadId_wrap
extern GetCurrentThread_wrap
extern GetFileSize_wrap
extern GetLastError_wrap
extern GetModuleHandleA_wrap
extern GetOverlappedResult_wrap
extern GetSystemInfo_wrap
extern GlobalMemoryStatus_wrap
extern InitializeCriticalSection_wrap
extern LeaveCriticalSection_wrap
extern MapViewOfFile_wrap
extern PurgeComm_wrap
extern ReadFile_wrap
extern ResumeThread_wrap
extern SetCommState_wrap
extern SetCommTimeouts_wrap
extern SetCurrentDirectoryA_wrap
extern SetEndOfFile_wrap
extern SetEvent_wrap
extern SetFilePointer_wrap
extern SetThreadPriority_wrap
extern TerminateThread_wrap
extern UnmapViewOfFile_wrap
extern WaitForMultipleObjects_wrap
extern WriteFile_wrap

extern timeBeginPeriod_wrap
extern timeEndPeriod_wrap
extern timeGetDevCaps_wrap

extern DirectInputCreateA_wrap

extern inet_addr_wrap
extern listen_wrap
extern inet_ntoa_wrap
extern gethostbyname_wrap
extern gethostname_wrap
extern connect_wrap
extern accept_wrap
extern WSAFDIsSet_wrap
extern select_wrap
extern send_wrap
extern recv_wrap
extern sendto_wrap
extern getsockname_wrap
extern bind_wrap
extern htons_wrap
extern ioctlsocket_wrap
extern setsockopt_wrap
extern WSAGetLastError_wrap
extern closesocket_wrap
extern socket_wrap
extern WSACleanup_wrap
extern WSAStartup_wrap
extern recvfrom_wrap

section .text

dword_401010: times 0Ch dd 0
	times 2 db 0
word_401042: dw 0
	times 0Ch dd 0
dword_401074: dd 534F4A59h
	db 53h, 4Ah
word_40107A: dw 6A79h
	dd 6A73736Fh

sub_401080: ;SUBROUTINE
	mov dword [dword_4D1FEC], 15Eh
	ret
;sub_401080 endp

sub_401090: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 78h
	mov edi, eax
	mov ecx, edx
	mov ebx, 1
	xor edx, edx
	xor esi, esi
	xor eax, eax
	mov [esp+3Ch], dx
	mov [esp+40h], ebx
	mov [esp+44h], edx
	mov [esp+64h], esi
	mov dword [dword_4D2310], eax
	xor edx, edx
	mov [esp+4], edx
	mov [esp+8], edx
	mov edx, 0FFFFFFFFh
	xor eax, eax

loc_4010D3:
	mov [esp+5Ch], dx
	movsx edx, ax
	cmp dword [edi+edx*4], 0
	jnz loc_401847
	test cx, cx
	jbe loc_401852
	cmp cx, 1
	jnz loc_4010F9
	mov ebp, aMemc ; "memc"

loc_4010F9:
	mov eax, dword [dword_4D40B8]
	mov edx, ebp
	call sub_482EB4
	mov cx, [eax+4]
	mov eax, [eax+0Ch]
	shl eax, 14h
	xor ebx, ebx
	sar eax, 14h
	mov edx, 1E0h
	mov [esp+54h], ax
	movsx eax, cx
	call sub_482474
	mov edx, eax
	mov [esp+0Ch], eax
	call sub_428A20
	call sub_405C70
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	xor ebx, ebx
	mov eax, [esp+52h]
	mov edx, [edx+20h]
	sar eax, 10h
	mov [esp+10h], edx
	mov edx, eax
	mov eax, [esp+10h]
	mov [esp+38h], cx
	call sub_4850B0
	call sub_4824BC
	test cx, cx
	jl loc_401239
	add ecx, 1E8h
	mov [esp+28h], ecx

loc_401173:
	call sub_428A20
	mov ebx, [esp+52h]
	mov eax, [esp+0Ch]
	mov edx, 0C00h
	xor ecx, ecx
	sar ebx, 10h
	mov eax, [eax+20h]
	call sub_405B60
	mov ebx, [esp+36h]
	mov edx, 2C00h
	mov eax, aBsld ; "bsld"
	xor ecx, ecx
	sar ebx, 10h
	call sub_405B30
	xor eax, eax
	mov ecx, 62h
	mov [esp+68h], ax
	mov eax, [esp+28h]
	mov [esp+18h], cx
	mov [esp+70h], ax

loc_4011C4:
	mov edx, [esp+66h]
	movsx eax, si
	sar edx, 10h
	add eax, edx
	shl eax, 2
	add eax, edi
	cmp dword [eax], 0
	jz loc_401214
	push 0
	mov ebx, [esp+1Ah]
	mov edx, [esp+72h]
	mov ecx, 12h
	mov eax, [eax]
	push 0
	sar ebx, 10h
	sar edx, 10h
	call sub_4054E0
	mov edx, [esp+18h]
	mov ebx, [esp+68h]
	add edx, 16h
	inc ebx
	mov [esp+18h], dx
	mov [esp+68h], bx
	cmp bx, 8
	jl loc_4011C4

loc_401214:
	call sub_405C70
	mov ebx, [esp+28h]
	mov ecx, [esp+38h]
	sub ebx, 8
	sub ecx, 8
	mov [esp+28h], ebx
	mov [esp+38h], cx
	test cx, cx
	jge loc_401173

loc_401239:
	mov ebx, 294h
	mov edx, 28h
	mov [esp+74h], bx
	mov [esp+2Ch], dx

loc_40124D:
	call sub_428A20
	mov ebx, [esp+52h]
	mov eax, [esp+0Ch]
	mov edx, 0C00h
	xor ecx, ecx
	sar ebx, 10h
	mov eax, [eax+20h]
	call sub_405B60
	mov edx, 2800h
	mov eax, ebp
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, 62h
	xor edx, edx
	mov [esp+30h], ax
	mov [esp+20h], dx

loc_40128D:
	mov eax, [esp+1Eh]
	movsx edx, si
	sar eax, 10h
	add eax, edx
	shl eax, 2
	add eax, edi
	mov ecx, [eax]
	test ecx, ecx
	jz loc_4012DC
	push 0
	mov ebx, [esp+32h]
	mov edx, 1E8h
	mov eax, ecx
	push 0
	mov ecx, 12h
	sar ebx, 10h
	call sub_4054E0
	mov ebx, [esp+30h]
	mov ecx, [esp+20h]
	add ebx, 16h
	inc ecx
	mov [esp+30h], bx
	mov [esp+20h], cx
	cmp cx, 8
	jl loc_40128D

loc_4012DC:
	mov eax, [esp+2Ah]
	mov edx, 2C00h
	sar eax, 10h
	xor ecx, ecx
	mov [esp+14h], eax
	mov ebx, eax
	mov eax, aTsld ; "tsld"
	call sub_405B30
	push 0
	mov edx, [esp+76h]
	mov ecx, 12h
	xor eax, eax
	push 0
	mov al, byte [byte_512DFB]
	sar edx, 10h
	mov ebx, dword (dword_4D1FEC+2)[eax*2]
	mov eax, 77h
	sar ebx, 10h
	call sub_41B710
	call sub_4053A0
	test si, si
	jz loc_401347
	mov ebx, [esp+14h]
	mov edx, 2C00h
	mov eax, aUppd ; "uppd"
	xor ecx, ecx
	add ebx, 2
	call sub_405B30

loc_401347:
	mov edx, [esp+5Ah]
	movsx eax, si
	sar edx, 10h
	add eax, 7
	cmp eax, edx
	jge loc_401373
	mov ebx, [esp+2Ah]
	mov edx, 2C00h
	mov eax, aDwnd ; "dwnd"
	sar ebx, 10h
	xor ecx, ecx
	add ebx, 2
	call sub_405B30

loc_401373:
	call sub_405C70
	mov edx, [esp+74h]
	mov ebx, [esp+2Ch]
	sub edx, 4
	sub ebx, 4
	mov [esp+74h], dx
	mov [esp+2Ch], bx
	test bx, bx
	jge loc_40124D
	call sub_4833C7
	mov eax, [esp+5Ah]
	mov ebx, 1
	sar eax, 10h
	mov dword [dword_4D2310], ebx
	cmp eax, 0FFFFFFFFh
	jnz loc_40185C
	mov eax, 0FFFFFFFFh
	mov edx, 104h
	mov [esp+3Ch], ax
	mov eax, 262h

loc_4013CD:
	call sub_4242C0
	mov ecx, 127h
	mov ebx, 280h
	mov edx, 55h
	mov eax, 1C2h
	call sub_4222C0
	cmp word [esp+44h], 0
	jnz loc_40169F

loc_4013F7:
	xor eax, eax
	mov ebx, [esp+8]
	call sub_403550
	call sub_4833C7
	add ebx, eax
	mov edx, [esp+40h]
	mov [esp+8], ebx
	test dx, dx
	jz loc_401885

loc_40141A:
	call sub_428A20
	mov eax, [esp+0Ch]
	mov edx, 0C00h
	xor ebx, ebx
	xor ecx, ecx
	mov [esp+40h], ebx
	mov ebx, [esp+52h]
	mov eax, [eax+20h]
	sar ebx, 10h
	call sub_405B60
	mov edx, 2800h
	mov eax, ebp
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov ecx, 62h
	xor eax, eax
	mov [esp+4Ch], cx
	mov [esp+1Ch], ax

loc_401460:
	mov edx, [esp+1Ah]
	movsx eax, si
	sar edx, 10h
	add edx, eax
	lea eax, 0[edx*4]
	add eax, edi
	mov ecx, [eax]
	test ecx, ecx
	jz loc_4014C2
	mov ebx, [esp+3Ah]
	sar ebx, 10h
	cmp edx, ebx
	jnz loc_401897
	push 2

loc_40148C:
	mov ebx, [esp+4Eh]
	mov edx, 1E8h
	mov eax, ecx
	push 0
	mov ecx, 12h
	sar ebx, 10h
	call sub_4054E0
	mov ebx, [esp+1Ch]
	mov edx, [esp+4Ch]
	inc ebx
	add edx, 16h
	mov [esp+1Ch], bx
	mov [esp+4Ch], dx
	cmp bx, 8
	jl loc_401460

loc_4014C2:
	mov edx, 2800h
	mov eax, aTsld ; "tsld"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jnz loc_40189E
	mov eax, 2

loc_4014EA:
	cwde
	push eax
	xor eax, eax
	mov ecx, 12h
	mov al, byte [byte_512DFB]
	mov edx, 26Ch
	push 0
	mov ebx, dword (dword_4D1FEC+2)[eax*2]
	mov eax, 77h
	sar ebx, 10h
	call sub_41B710
	call sub_4053A0
	test si, si
	jz loc_401533
	mov ebx, 2
	mov edx, 2C00h
	mov eax, aUppd ; "uppd"
	xor ecx, ecx
	call sub_405B30

loc_401533:
	mov edx, [esp+5Ah]
	movsx eax, si
	sar edx, 10h
	add eax, 7
	cmp eax, edx
	jge loc_40155A
	mov ebx, 2
	mov edx, 2C00h
	mov eax, aDwnd ; "dwnd"
	xor ecx, ecx
	call sub_405B30

loc_40155A:
	call sub_405C70

loc_401564:
	call sub_423B90
	call sub_405960
	xor edx, edx
	mov [esp+48h], eax
	mov [esp+60h], edx
	test ax, ax
	jnz loc_40194D
	mov ecx, 1E0h
	mov ebx, 28h
	mov eax, 258h
	xor edx, edx
	call sub_423DC0
	test eax, eax
	jz loc_4018A5
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_4015D5
	mov eax, [esp+3Ch]
	mov ecx, 0FFFFFFFFh
	mov [esp+64h], eax
	mov eax, 1
	mov edx, 7Fh
	mov [esp+40h], eax
	mov eax, 1
	mov [esp+3Ch], cx

loc_4015D0:
	call sub_4423F0

loc_4015D5:
	mov ebx, 1

loc_4015DA:
	cmp word [esp+48h], 0
	jz loc_401683
	mov eax, [esp+8]
	cmp eax, [esp+4]
	jle loc_401683
	add eax, 0Fh
	mov ecx, 1
	mov [esp+4], eax
	mov eax, [esp+48h]
	mov [esp+40h], ecx
	cmp ax, 4800h
	jnb loc_401954
	cmp ax, 0Dh
	jnb loc_4019CB
	cmp ax, 9
	jnz loc_40165F

loc_401622:
	mov eax, [esp+5Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jle loc_40165F
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jle loc_401A04
	mov ecx, 0FFFFFFFFh
	mov eax, [esp+3Ch]
	mov [esp+3Ch], cx
	mov [esp+64h], eax

loc_401650:
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0

loc_40165F:
	test bx, bx
	jnz loc_401683
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jnz loc_401ABE
	mov edx, 104h
	mov eax, 262h

loc_40167E:
	call sub_4242C0

loc_401683:
	mov edx, [esp+8]
	call sub_4833C7
	add edx, eax
	mov ebx, [esp+44h]
	mov [esp+8], edx
	test bx, bx
	jz loc_4013F7

loc_40169F:
	xor ecx, ecx
	mov eax, 1E8h
	mov dword [dword_4D2310], ecx
	xor ecx, ecx
	mov [esp+50h], eax
	mov [esp+34h], cx

loc_4016B7:
	call sub_428A20
	mov ebx, [esp+52h]
	mov eax, [esp+0Ch]
	mov edx, 0C00h
	xor ecx, ecx
	sar ebx, 10h
	mov eax, [eax+20h]
	call sub_405B60
	mov ebx, [esp+32h]
	mov edx, 2C00h
	mov eax, ebp
	xor ecx, ecx
	sar ebx, 10h
	call sub_405B30
	mov eax, 62h
	xor edx, edx
	mov [esp+24h], ax
	mov eax, [esp+50h]
	mov [esp+58h], dx
	mov [esp+6Ch], ax

loc_401705:
	mov edx, [esp+56h]
	movsx eax, si
	sar edx, 10h
	add eax, edx
	shl eax, 2
	add eax, edi
	cmp dword [eax], 0
	jz loc_401755
	push 0
	mov ebx, [esp+26h]
	mov edx, [esp+6Eh]
	mov ecx, 12h
	mov eax, [eax]
	push 0
	sar ebx, 10h
	sar edx, 10h
	call sub_4054E0
	mov ebx, [esp+24h]
	mov ecx, [esp+58h]
	add ebx, 16h
	inc ecx
	mov [esp+24h], bx
	mov [esp+58h], cx
	cmp cx, 8
	jl loc_401705

loc_401755:
	mov eax, [esp+32h]
	mov edx, 2C00h
	sar eax, 10h
	xor ecx, ecx
	mov [esp], eax
	mov ebx, eax
	mov eax, aTsld ; "tsld"
	call sub_405B30
	test si, si
	jz loc_40178E
	mov ebx, [esp]
	mov edx, 2C00h
	mov eax, aUppd ; "uppd"
	xor ecx, ecx
	add ebx, 2
	call sub_405B30

loc_40178E:
	mov edx, [esp+5Ah]
	movsx eax, si
	sar edx, 10h
	add eax, 7
	cmp eax, edx
	jge loc_4017BA
	mov ebx, [esp+32h]
	mov edx, 2C00h
	mov eax, aDwnd ; "dwnd"
	sar ebx, 10h
	xor ecx, ecx
	add ebx, 2
	call sub_405B30

loc_4017BA:
	call sub_405C70
	mov edx, [esp+50h]
	mov ebx, [esp+34h]
	add edx, 0Ch
	add ebx, 0Ch
	mov [esp+50h], edx
	mov [esp+34h], bx
	cmp bx, 0D2h
	jle loc_4016B7
	mov esi, 1
	mov ecx, 1E0h
	mov ebx, 280h
	xor edx, edx
	xor eax, eax
	mov dword [dword_4D2310], esi
	call sub_4222C0
	mov eax, [esp+0Ch]
	mov esi, [esp+3Ch]
	call sub_482DA0
	test si, si
	jl loc_40181E
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp dword [edi+eax*4], 0
	jnz loc_401825

loc_40181E:
	mov word [esp+3Ch], 0FFFFh

loc_401825:
	cmp word [esp+48h], 1Bh
	jz loc_401839
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jnz loc_40183E

loc_401839:
	mov eax, 0FFFFFFFFh

loc_40183E:
	add esp, 78h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_401847:
	mov edx, [esp+5Ch]
	inc edx
	inc eax
	jmp loc_4010D3

loc_401852:
	mov ebp, aBsld ; "bsld"
	jmp loc_4010F9

loc_40185C:
	mov edx, [esp+3Ah]
	movsx eax, si
	sar edx, 10h
	sub edx, eax
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	sub eax, edx
	add eax, eax
	lea edx, [eax+6Dh]
	mov eax, 226h
	jmp loc_4013CD

loc_401885:
	cmp dword [dword_4D2094], 0
	jnz loc_40141A
	jmp loc_401564

loc_401897:
	push 0
	jmp loc_40148C

loc_40189E:
	xor eax, eax
	jmp loc_4014EA

loc_4018A5:
	mov edx, 16h
	mov eax, 62h
	call sub_423DF0
	test ax, ax
	jl loc_4018FF
	cmp ax, 7
	jg loc_401926
	mov ebx, [esp+3Ah]
	add eax, esi
	sar ebx, 10h
	movsx edx, ax
	cmp ebx, edx
	jz loc_4015D5
	mov ebx, [esp+5Ah]
	sar ebx, 10h
	cmp edx, ebx
	jg loc_4015D5
	mov [esp+3Ch], ax
	mov eax, 1
	mov edx, 7Fh
	mov [esp+40h], eax
	mov eax, 1
	jmp loc_4015D0

loc_4018FF:
	mov eax, [esp+5Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_4015D5
	mov ebx, 1
	mov edx, 4800h
	mov [esp+60h], ebx
	mov [esp+48h], edx
	jmp loc_4015D5

loc_401926:
	mov eax, [esp+5Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_4015D5
	mov ecx, 5000h
	mov ebx, 1
	mov [esp+48h], ecx
	mov [esp+60h], ebx
	jmp loc_4015D5

loc_40194D:
	xor ebx, ebx
	jmp loc_4015DA

loc_401954:
	ja loc_401980
	mov eax, [esp+5Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_40165F
	mov edx, [esp+3Ah]
	sar edx, 10h
	cmp edx, 0FFFFFFFFh
	jnz loc_401A68
	mov [esp+3Ch], si
	jmp loc_40165F

loc_401980:
	cmp ax, 4D00h
	jnb loc_401995
	cmp ax, 4B00h
	jz loc_401622
	jmp loc_40165F

loc_401995:
	jbe loc_401622
	cmp ax, 5000h
	jnz loc_40165F
	mov edx, [esp+5Ah]
	sar edx, 10h
	cmp edx, 0FFFFFFFFh
	jz loc_40165F
	mov eax, [esp+3Ah]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jnz loc_401A12
	mov [esp+3Ch], si
	jmp loc_40165F

loc_4019CB:
	jbe loc_4019EF
	cmp ax, 1Bh
	jnz loc_40165F
	mov edx, 7Fh
	mov eax, 3
	call sub_4423F0
	mov [esp+44h], ecx
	jmp loc_40165F

loc_4019EF:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov [esp+44h], ecx
	jmp loc_40165F

loc_401A04:
	mov eax, [esp+64h]
	mov [esp+3Ch], ax
	jmp loc_401650

loc_401A12:
	cmp dword [edi+eax*4+4], 0
	jnz loc_401A39
	cmp word [esp+60h], 0
	jz loc_40165F
	cmp edx, 0FFFFFFFFh
	jz loc_40165F
	xor eax, eax
	mov [esp+40h], eax
	jmp loc_40165F

loc_401A39:
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0
	inc word [esp+3Ch]
	mov edx, [esp+3Ah]
	movsx eax, si
	sar edx, 10h
	sub edx, eax
	cmp edx, 7
	jle loc_40165F
	inc esi
	jmp loc_40165F

loc_401A68:
	mov edx, [esp+3Ch]
	test dx, dx
	jnz loc_401A8F
	cmp word [esp+60h], 0
	jz loc_40165F
	cmp eax, 0FFFFFFFFh
	jz loc_40165F
	mov [esp+40h], edx
	jmp loc_40165F

loc_401A8F:
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0
	sub [esp+3Ch], cx
	mov edx, [esp+3Ah]
	movsx eax, si
	sar edx, 10h
	sub edx, eax
	test edx, edx
	jge loc_40165F
	sub esi, ecx
	jmp loc_40165F

loc_401ABE:
	movsx edx, si
	sub eax, edx
	imul edx, eax, 16h
	mov eax, 226h
	add edx, 6Dh
	jmp loc_40167E
;sub_401090 endp

sub_401AE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov edx, 1
	lea edi, [esp+8]
	mov eax, 2FAh
	mov ecx, 348h
	mov esi, dword_401074
	xor ebx, ebx
	mov [esp+28h], edx
	mov [esp+30h], bx
	movsd
	movsw
	mov [esp+24h], edx
	mov edi, esp
	mov esi, word_40107A
	mov edx, aCNfs2seFront_1 ; "c:\\nfs2se\\frontend\\common\\Dialog.c"
	mov ebx, 20h
	movsd
	movsw
	call sub_41B710
	call sub_482424
	mov edi, eax
	mov eax, 2FAh
	lea esi, [esp+54h]
	call sub_41B710
	call sub_482424
	mov dword [dword_4DB1D8], edx
	mov edx, [esp+50h]
	mov ebp, eax
	shl edx, 2
	mov eax, aDialogargv ; "DialogArgv"
	add edx, 4
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ebx, [esp+50h]
	mov [esp+14h], eax
	xor edx, edx
	test ebx, ebx
	jle loc_401B90
	mov ecx, eax

loc_401B78:
	mov eax, [esi]
	add esi, 4
	call sub_41B710
	mov [ecx], eax
	inc edx
	mov eax, [esp+50h]
	add ecx, 4
	cmp edx, eax
	jl loc_401B78

loc_401B90:
	mov eax, [esp+50h]
	mov edx, [esp+14h]
	shl eax, 2
	add eax, edx
	xor ebx, ebx
	mov dword [eax], dword_4C8014
	mov edx, dword [dword_4DAB80]
	mov eax, dword [dword_4DAB7C]
	call sub_482474
	mov [esp+18h], eax
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	xor ecx, ecx
	call sub_483470
	call sub_4824BC

loc_401BD7:
	call sub_405910
	test eax, eax
	jz loc_401BE9
	mov eax, ecx
	call sub_403550
	jmp loc_401BD7

loc_401BE9:
	mov edx, ebp
	mov eax, ebp
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, 168h
	sub edx, eax
	mov [esp+1Ch], edx
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, 118h
	sub edx, eax
	mov [esp+10h], edx

loc_401C15:
	cmp word [esp+24h], 0
	jnz loc_401C72
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	mov eax, [esp+18h]
	mov eax, [eax+20h]
	call sub_4834C4
	call sub_428A20
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	call sub_405C70
	mov eax, [esp+18h]
	call sub_482DA0
	mov eax, [esp+14h]
	call sub_4848FC
	mov eax, [esp+2Eh]
	sar eax, 10h
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_401C72:
	xor eax, eax
	call sub_403550
	cmp word [esp+28h], 0
	jz loc_401E30
	call sub_428A20
	mov eax, [esp+18h]
	xor edx, edx
	mov eax, [eax+20h]
	mov [esp+28h], edx
	call sub_483470
	mov eax, [esp+50h]
	mov edx, [esp+14h]
	inc eax
	mov ebx, [esp+30h]
	call sub_402E80
	mov [esp+20h], eax
	test bx, bx
	jz loc_401E03
	push 2
	mov esi, [esp+22h]
	mov eax, 2FAh
	mov ecx, 12h
	push 2
	sar esi, 10h
	mov edx, 118h
	mov ebx, esi
	call sub_41B710
	call sub_4054E0
	push 1

loc_401CE3:
	mov eax, 2FBh
	mov ecx, 12h
	push 2
	mov edx, 168h
	mov ebx, esi
	call sub_41B710
	call sub_4054E0
	call sub_405C70

loc_401D0A:
	mov ecx, 1Ch
	mov edx, [esp+20h]
	mov eax, [esp+10h]
	mov ebx, edi
	call sub_423DC0
	test eax, eax
	jz loc_401D47
	cmp word [esp+30h], 1
	jz loc_401D39
	mov edx, 2Dh
	mov eax, 1
	call sub_4423F0

loc_401D39:
	mov esi, 1
	mov [esp+28h], esi
	mov [esp+30h], si

loc_401D47:
	mov ecx, 1Ch
	mov edx, [esp+20h]
	mov eax, [esp+1Ch]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_401D86
	cmp word [esp+30h], 0
	jz loc_401D76
	mov edx, 2Dh
	mov eax, 1
	call sub_4423F0

loc_401D76:
	mov ecx, 1
	xor ebx, ebx
	mov [esp+28h], ecx
	mov [esp+30h], bx

loc_401D86:
	cmp word [esp+2Ch], 0
	jz loc_401E3A
	call sub_405910
	mov ebx, eax
	test ax, ax
	jz loc_401DA4
	xor edx, edx
	mov [esp+2Ch], edx

loc_401DA4:
	test bx, bx
	jz loc_401C15
	cmp bx, 4Eh
	jnb loc_401E56
	cmp bx, 0Dh
	jnb loc_401ECB

loc_401DC1:
	xor eax, eax
	xor ecx, ecx
	mov al, byte [byte_512DFB]
	movsx edx, bx
	mov cl, [esp+eax+8]
	cmp ecx, edx
	jnz loc_401F1F

loc_401DD9:
	mov edx, 7Fh
	xor eax, eax
	mov ebx, 1
	call sub_4423F0
	xor esi, esi
	mov [esp+30h], bx
	mov [esp+28h], ebx
	mov [esp+24h], esi
	call sub_4833C7
	jmp loc_401C15

loc_401E03:
	push 1
	mov esi, [esp+22h]
	mov eax, 2FAh
	mov ecx, 12h
	push 2
	sar esi, 10h
	mov edx, 118h
	mov ebx, esi
	call sub_41B710
	call sub_4054E0
	push 2
	jmp loc_401CE3

loc_401E30:
	call sub_423B90
	jmp loc_401D0A

loc_401E3A:
	call sub_405910
	xor ebx, ebx
	test eax, eax
	jnz loc_401DA4
	mov dword [esp+2Ch], 1
	jmp loc_401DA4

loc_401E56:
	jbe loc_401E69
	cmp bx, 4B00h
	jnb loc_401E8E
	cmp bx, 6Eh
	jnz loc_401DC1

loc_401E69:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor eax, eax
	mov edx, 1
	mov [esp+30h], ax
	mov [esp+28h], edx
	mov [esp+24h], eax
	jmp loc_401DC1

loc_401E8E:
	jbe loc_401E9B
	cmp bx, 4D00h
	jnz loc_401DC1

loc_401E9B:
	mov edx, 7Fh
	mov eax, 1
	mov ecx, [esp+30h]
	call sub_4423F0
	test cx, cx
	jnz loc_401F0A
	mov eax, 1
	mov esi, 1
	mov [esp+30h], ax
	mov [esp+28h], esi
	jmp loc_401DC1

loc_401ECB:
	jbe loc_401EF3
	cmp bx, 1Bh
	jnz loc_401DC1
	mov edx, 7Fh
	xor eax, eax
	xor esi, esi
	call sub_4423F0
	mov [esp+30h], si
	mov [esp+24h], esi
	jmp loc_401DC1

loc_401EF3:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor edx, edx
	mov [esp+24h], edx
	jmp loc_401DC1

loc_401F0A:
	xor eax, eax
	mov esi, 1
	mov [esp+30h], ax
	mov [esp+28h], esi
	jmp loc_401DC1

loc_401F1F:
	mov al, [esp+eax]
	and eax, 0FFh
	cmp eax, edx
	jz loc_401DD9
	call sub_4833C7
	jmp loc_401C15
;sub_401AE0 endp

sub_401F40: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 94h
	mov ebp, eax
	mov [esp+74h], bx
	mov ebx, 1
	mov edi, 0FFFFFFFFh
	mov esi, word_401042
	xor ecx, ecx
	mov [esp+68h], edx
	mov [esp+7Ch], ecx
	mov [esp+78h], cx
	mov [esp+88h], di
	mov ecx, 0Ch
	mov edi, esp
	mov edx, dword_4C8014
	mov [esp+8Ch], ebx
	rep movsd
	movsw
	mov [esp+6Ch], edx
	mov edi, ebp
	xor ecx, ecx
	mov esi, ebp
	mov dword [dword_4D2310], ecx
	call sub_402A00
	mov [esp+80h], eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edi, esp
	xor ebx, ebx
	push edi

loc_401FB8:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_401FD0
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_401FB8

loc_401FD0:
	pop edi
	mov edx, dword [dword_4DAB80]
	mov eax, dword [dword_4DAB7C]
	call sub_482474
	mov [esp+70h], eax
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov [esp+84h], cx
	mov eax, [eax+20h]
	xor edx, edx
	call sub_483470
	call sub_4824BC

loc_402006:
	call sub_405910
	test eax, eax
	jnz loc_402077

loc_40200F:
	mov esi, [esp+86h]
	sar esi, 10h
	cmp esi, 0FFFFFFFFh
	jz loc_402080
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	mov eax, [esp+70h]
	mov eax, [eax+20h]
	call sub_4834C4
	push 1
	call sub_497680
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	call sub_4824BC
	mov eax, [esp+70h]
	mov ebx, 1
	call sub_482DA0
	mov eax, ebp
	mov dword [dword_4D2310], ebx
	call sub_402960
	mov eax, esi
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_402077:
	mov eax, edx
	call sub_403550
	jmp loc_402006

loc_402080:

	call sub_403550
	cmp word [esp+8Ch], 0
	jz loc_40215A
	mov esi, esp
	lea edi, [esp+34h]
	mov ebx, [esp+78h]
	xor edx, edx
	push edi

loc_4020AA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4020C2
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4020AA

loc_4020C2:
	pop edi
	mov [esp+8Ch], edx
	test bx, bx
	jz loc_4020FA
	mov esi, a_ ; "_"
	lea edi, [esp+34h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4020E1:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4020F9
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4020E1

loc_4020F9:
	pop edi

loc_4020FA:
	call sub_4287C0
	mov eax, [esp+70h]
	mov eax, [eax+20h]
	lea edx, [esp+68h]
	call sub_483470
	mov eax, 2
	call sub_402E80
	push 2
	push 0
	movsx ebx, ax
	lea eax, [esp+8]
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	mov eax, dword [dword_4DAB7C]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub eax, esi
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+3Ch]
	call sub_4054E0
	call sub_405C70

loc_40215A:
	cmp word [esp+90h], 0
	jz loc_402210
	call sub_405910
	mov edx, eax
	test ax, ax
	jz loc_40217E
	xor edi, edi
	mov [esp+90h], edi

loc_40217E:
	test dx, dx
	jz loc_4021D5
	cmp dx, 0Dh
	jnz loc_40222F
	mov esi, esp
	mov edi, ebp
	push edi

loc_402192:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4021AA
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402192

loc_4021AA:
	pop edi
	mov word [esp+88h], 1

loc_4021B5:
	mov eax, [esp+82h]
	mov edi, 1
	xor dl, dl
	sar eax, 10h
	mov [esp+8Ch], edi
	mov [esp+eax], dl
	call sub_4833C7

loc_4021D5:
	mov edx, [esp+7Ch]
	call sub_4833C7
	add edx, eax
	mov [esp+7Ch], edx
	cmp dx, 0Fh
	jl loc_40200F
	mov dh, [esp+78h]
	mov ecx, 1
	xor esi, esi
	xor dh, 1
	mov [esp+8Ch], ecx
	mov [esp+7Ch], esi
	mov [esp+78h], dh
	jmp loc_40200F

loc_402210:
	call sub_405910
	xor edx, edx
	test eax, eax
	jnz loc_40217E
	mov dword [esp+90h], 1
	jmp loc_40217E

loc_40222F:
	cmp dx, 1Bh
	jnz loc_402244
	xor ecx, ecx
	mov [esp+88h], cx
	jmp loc_4021B5

loc_402244:
	movsx eax, dx
	call sub_402AE0
	test eax, eax
	jz loc_4021B5
	cmp dx, 8
	jnz loc_402295
	mov eax, [esp+84h]
	test ax, ax
	jle loc_402295
	cmp word [esp+80h], 0
	jz loc_402287
	xor edx, edx
	mov [esp+84h], dx
	mov [esp+80h], edx
	jmp loc_4021B5

loc_402287:
	dec eax
	mov [esp+84h], ax
	jmp loc_4021B5

loc_402295:
	mov eax, [esp+72h]
	mov ebx, [esp+82h]
	sar eax, 10h
	sar ebx, 10h
	cmp ebx, eax
	jge loc_4022F5
	cmp dx, 1Fh
	jle loc_4022F5
	cmp dx, 0FFh
	jge loc_4022F5
	cmp word [esp+80h], 0
	jz loc_4022D3
	xor ebx, ebx
	mov [esp+84h], bx
	mov [esp+80h], ebx

loc_4022D3:
	mov esi, [esp+84h]
	mov eax, [esp+82h]
	inc esi
	sar eax, 10h
	mov [esp+84h], si
	mov [esp+eax], dl
	jmp loc_4021B5

loc_4022F5:
	cmp word [esp+80h], 0
	jz loc_4021B5
	xor ecx, ecx
	mov [esp+84h], cx
	mov [esp+80h], ecx
	cmp dx, 1Fh
	jle loc_4021B5
	cmp dx, 0FFh
	jge loc_4021B5
	mov edi, 1
	mov [esp], dl
	mov [esp+84h], di
	jmp loc_4021B5
;sub_401F40 endp

sub_402340: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov esi, edx
	xor edx, edx

loc_402349:
	mov eax, dword [dword_4E5010]
	add eax, 96h
	cmp eax, dword [dword_5637F4]
	jle loc_402364
	mov eax, edx
	call sub_483EB0
	jmp loc_402349

loc_402364:
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	mov eax, [ebx+20h]
	call sub_4834C4
	push 1
	call sub_497680
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	call sub_4824BC
	mov eax, ebx
	call sub_482DA0
	test esi, esi
	jnz loc_4023A9
	mov dword [dword_4D2310], 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_4023A9:
	mov eax, 303h
	call sub_402CD0
	mov eax, 100h
	call sub_4833E7
	mov dword [dword_4D2310], 1
	pop esi
	pop ecx
	pop ebx
	ret
;sub_402340 endp

sub_4023D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 8
	mov edi, eax
	mov esi, edx
	mov eax, dword [dword_4DAB7C]
	xor edx, edx
	xor ebx, ebx
	mov dword [dword_4D2310], edx
	mov edx, dword [dword_4DAB80]
	call sub_482474
	mov ecx, eax
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_483470
	call sub_4824BC
	mov eax, edi
	call sub_41B710
	mov [esp], eax
	mov eax, esi
	mov edx, esp
	call sub_41B710
	mov [esp+4], eax
	call sub_428A20
	mov eax, 2
	call sub_402E80
	call sub_405C70
	mov eax, dword [dword_5637F4]
	mov dword [dword_4E5010], eax
	mov eax, ecx
	add esp, 8
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4023D0 endp

sub_402460: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 98h
	mov ebp, eax
	mov [esp+90h], bx
	mov [esp+94h], ecx
	mov edi, 0FFFFFFFFh
	xor ecx, ecx
	mov esi, dword_401010
	mov [esp+80h], ecx
	mov [esp+74h], cx
	mov [esp+78h], di
	mov ecx, 0Ch
	mov edi, esp
	movsx eax, dx
	mov edx, dword_4C8014
	rep movsd
	movsw
	call sub_41B710
	mov [esp+68h], eax
	mov [esp+70h], edx
	lea eax, [esp+34h]
	xor ecx, ecx
	mov [esp+6Ch], eax
	mov eax, ebp
	mov dword [dword_4D2310], ecx
	call sub_402A00
	mov [esp+88h], eax
	mov eax, 2FCh
	mov ebx, 1
	call sub_41B710
	mov edx, eax
	mov eax, ebp
	mov [esp+84h], ebx
	call strcmp_
	test eax, eax
	jnz loc_4024FF
	mov [esp+88h], ebx

loc_4024FF:
	mov edi, ebp
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov esi, ebp
	mov edi, esp
	xor ebx, ebx
	push edi

loc_402512:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40252A
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402512

loc_40252A:
	pop edi
	mov edx, dword [dword_4DAB80]
	mov eax, dword [dword_4DAB7C]
	call sub_482474
	mov [esp+70h], eax
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov [esp+8Ch], cx
	mov eax, [eax+20h]
	xor edx, edx
	call sub_483470
	call sub_4824BC

loc_402560:
	call sub_405910
	test eax, eax
	jz loc_402572
	mov eax, edx
	call sub_403550
	jmp loc_402560

loc_402572:
	mov eax, [esp+76h]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jnz loc_4028E6
	xor eax, eax
	mov ebx, [esp+84h]
	call sub_403550
	test bx, bx
	jz loc_40262C
	mov esi, esp
	lea edi, [esp+34h]
	push edi

loc_4025A0:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4025B8
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4025A0

loc_4025B8:
	pop edi
	call sub_428A20
	mov eax, [esp+70h]
	lea edx, [esp+68h]
	xor ecx, ecx
	mov eax, [eax+20h]
	mov esi, [esp+74h]
	call sub_483470
	mov eax, 2
	mov [esp+84h], ecx
	call sub_402E80
	test si, si
	jz loc_402627
	push 2
	push 0
	movsx ebx, ax
	lea eax, [esp+8]
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	mov eax, dword [dword_4DAB7C]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add eax, esi
	mov ecx, 12h
	movsx edx, ax
	mov eax, a_ ; "_"
	call sub_4054E0

loc_402627:
	call sub_405C70

loc_40262C:
	cmp word [esp+7Ch], 0
	jz loc_4026E1
	call sub_405910
	mov edx, eax
	test ax, ax
	jz loc_40264A
	xor ebx, ebx
	mov [esp+7Ch], ebx

loc_40264A:
	test dx, dx
	jz loc_40269D
	cmp dx, 0Dh
	jnz loc_4026FD
	mov esi, esp
	mov edi, ebp
	push edi

loc_40265E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402676
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40265E

loc_402676:
	pop edi
	mov word [esp+78h], 1

loc_40267E:
	mov eax, [esp+8Ah]
	sar eax, 10h
	xor dl, dl
	mov [esp+eax], dl
	mov dword [esp+84h], 1
	call sub_4833C7

loc_40269D:
	mov edx, [esp+80h]
	call sub_4833C7
	add edx, eax
	mov [esp+80h], edx
	cmp dx, 0Fh
	jl loc_402572
	mov dh, [esp+74h]
	mov ecx, 1
	xor esi, esi
	xor dh, 1
	mov [esp+84h], ecx
	mov [esp+80h], esi
	mov [esp+74h], dh
	jmp loc_402572

loc_4026E1:
	call sub_405910
	xor edx, edx
	test eax, eax
	jnz loc_40264A
	mov dword [esp+7Ch], 1
	jmp loc_40264A

loc_4026FD:
	cmp dx, 1Bh
	jnz loc_40270F
	xor esi, esi
	mov [esp+78h], si
	jmp loc_40267E

loc_40270F:
	cmp word [esp+94h], 2
	jz loc_40272A
	movsx eax, dx
	call sub_402AE0
	test eax, eax
	jz loc_40267E

loc_40272A:
	cmp word [esp+94h], 2
	jnz loc_4027A3
	cmp dx, 20h
	jz loc_40267E
	cmp dx, 2Ah
	jz loc_40267E
	cmp dx, 2Fh
	jz loc_40267E
	cmp dx, 3Fh
	jz loc_40267E
	cmp dx, 3Ch
	jz loc_40267E
	cmp dx, 3Eh
	jz loc_40267E
	cmp dx, 22h
	jz loc_40267E
	cmp dx, 3Ah
	jz loc_40267E
	cmp dx, 5Ch
	jz loc_40267E
	cmp dx, 7Ch
	jz loc_40267E
	cmp dx, 2Eh
	jz loc_40267E

loc_4027A3:
	cmp dx, 8
	jnz loc_4027E6
	mov edi, [esp+8Ch]
	test di, di
	jle loc_4027E6
	cmp word [esp+88h], 0
	jz loc_4027D6
	xor ebx, ebx
	mov [esp+8Ch], bx
	mov [esp+88h], ebx
	jmp loc_40267E

loc_4027D6:
	mov edx, edi
	dec edx
	mov [esp+8Ch], dx
	jmp loc_40267E

loc_4027E6:
	cmp word [esp+94h], 0
	jnz loc_402839
	cmp dx, 30h
	jle loc_40267E
	cmp dx, 39h
	jge loc_40267E
	mov ebx, [esp+8Eh]
	mov eax, [esp+8Ah]
	sar ebx, 10h
	sar eax, 10h
	cmp eax, ebx
	jge loc_40267E
	mov edi, [esp+8Ch]
	inc edi
	mov [esp+eax], dl
	mov [esp+8Ch], di
	jmp loc_40267E

loc_402839:
	mov eax, [esp+8Eh]
	mov ebx, [esp+8Ah]
	sar eax, 10h
	sar ebx, 10h
	cmp ebx, eax
	jge loc_40289C
	cmp dx, 1Fh
	jle loc_40289C
	cmp dx, 0FFh
	jge loc_40289C
	cmp word [esp+88h], 0
	jz loc_40287A
	xor ebx, ebx
	mov [esp+8Ch], bx
	mov [esp+88h], ebx

loc_40287A:
	mov esi, [esp+8Ch]
	mov eax, [esp+8Ah]
	inc esi
	sar eax, 10h
	mov [esp+8Ch], si
	mov [esp+eax], dl
	jmp loc_40267E

loc_40289C:
	cmp word [esp+88h], 0
	jz loc_40267E
	xor ecx, ecx
	mov [esp+8Ch], cx
	mov [esp+88h], ecx
	cmp dx, 1Fh
	jle loc_40267E
	cmp dx, 0FFh
	jge loc_40267E
	mov edi, 1
	mov [esp], dl
	mov [esp+8Ch], di
	jmp loc_40267E

loc_4028E6:
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	mov eax, [esp+70h]
	mov eax, [eax+20h]
	call sub_4834C4
	push 1
	call sub_497680
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	call sub_4824BC
	mov eax, [esp+70h]
	mov edi, ebp
	call sub_482DA0
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	test ecx, ecx
	jz loc_40294B

loc_40292F:
	mov eax, [esp+76h]
	mov ebx, 1
	sar eax, 10h
	mov dword [dword_4D2310], ebx
	add esp, 98h
	pop ebp
	pop edi
	pop esi
	ret

loc_40294B:
	xor edx, edx
	mov [esp+78h], dx
	jmp loc_40292F
;sub_402460 endp

sub_402960: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov edi, eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edx, ecx
	mov esi, ecx
	test ecx, ecx
	jz loc_40299F
	mov ecx, 1
	xor eax, eax
	test edx, edx
	jle loc_402995
	mov edx, ebp

loc_402988:
	cmp byte [edx], 20h
	jz loc_40298F
	xor ecx, ecx

loc_40298F:
	inc eax
	inc edx
	cmp eax, esi
	jl loc_402988

loc_402995:
	test ecx, ecx
	jnz loc_40299F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_40299F:
	mov eax, 2A1h
	call sub_41B710
	mov edi, ebp
	mov esi, eax
	push edi

loc_4029AE:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4029C6
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4029AE

loc_4029C6:
	pop edi
	mov esi, a1 ; "1"
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4029D5:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4029ED
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4029D5

loc_4029ED:
	pop edi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_402960 endp

sub_402A00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 14h
	mov ebx, eax
	mov eax, 2A1h
	mov edi, esp
	call sub_41B710
	mov esi, eax
	push edi

loc_402A19:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402A31
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402A19

loc_402A31:
	pop edi
	mov esi, a1 ; "1"
	mov edi, esp
	mov edx, ebx
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_402A44:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402A5C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402A44

loc_402A5C:
	pop edi
	mov eax, esp
	call strcmp_
	test eax, eax
	jnz loc_402A76

loc_402A68:
	mov eax, 1
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_402A76:
	mov eax, 2A1h
	mov edi, esp
	call sub_41B710
	mov esi, eax
	push edi

loc_402A85:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402A9D
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402A85

loc_402A9D:
	pop edi
	mov esi, a2 ; "2"
	mov edi, esp
	mov edx, ebx
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_402AB0:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402AC8
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402AB0

loc_402AC8:
	pop edi
	mov eax, esp
	call strcmp_
	test eax, eax
	jz loc_402A68
	xor eax, eax
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_402A00 endp

sub_402AE0: ;SUBROUTINE
	cmp eax, 8
	jz loc_402C37
	cmp eax, 5300h
	jz loc_402C37
	cmp eax, 20h
	jl loc_402B02
	cmp eax, 22h
	jle loc_402C37

loc_402B02:
	cmp eax, 26h
	jl loc_402B10
	cmp eax, 3Ah
	jle loc_402C37

loc_402B10:
	cmp eax, 3Bh
	jz loc_402C37
	cmp eax, 3Fh
	jz loc_402C37
	cmp eax, 41h
	jl loc_402B30
	cmp eax, 5Dh
	jle loc_402C37

loc_402B30:
	cmp eax, 5Fh
	jl loc_402B3E
	cmp eax, 7Dh
	jle loc_402C37

loc_402B3E:
	cmp eax, 91h
	jz loc_402C37
	cmp eax, 92h
	jz loc_402C37
	cmp eax, 0A1h
	jz loc_402C37
	cmp eax, 0B0h
	jz loc_402C37
	cmp eax, 0BFh
	jz loc_402C37
	cmp eax, 0C1h
	jz loc_402C37
	cmp eax, 0E1h
	jz loc_402C37
	cmp eax, 0C4h
	jz loc_402C37
	cmp eax, 0E4h
	jz loc_402C37
	cmp eax, 0C5h
	jz loc_402C37
	cmp eax, 0E5h
	jz loc_402C37
	cmp eax, 0C7h
	jz loc_402C37
	cmp eax, 0E7h
	jz loc_402C37
	cmp eax, 0C9h
	jz loc_402C37
	cmp eax, 0E9h
	jz loc_402C37
	cmp eax, 0CDh
	jz loc_402C37
	cmp eax, 0EDh
	jz loc_402C37
	cmp eax, 0D1h
	jz loc_402C37
	cmp eax, 0F1h
	jz loc_402C37
	cmp eax, 0D3h
	jz loc_402C37
	cmp eax, 0F3h
	jz loc_402C37
	cmp eax, 0D6h
	jz loc_402C37
	cmp eax, 0F6h
	jz loc_402C37
	cmp eax, 0DAh
	jz loc_402C37
	cmp eax, 0FAh
	jz loc_402C37
	cmp eax, 0DCh
	jz loc_402C37
	cmp eax, 0FCh
	jnz loc_402C3D

loc_402C37:
	mov eax, 1
	ret

loc_402C3D:
	xor eax, eax
	ret
;sub_402AE0 endp

sub_402C40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 50h
	mov esi, dword_512F4C
	mov edi, esp
	mov ecx, 1
	mov ebx, 8
	mov edx, 2E7h
	push edi

loc_402C5F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402C77
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402C5F

loc_402C77:
	pop edi
	mov eax, esp
	call sub_402460
	test eax, eax
	jnz loc_402C8C
	add esp, 50h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_402C8C:
	mov eax, esp
	mov esi, esp
	mov edi, dword_512F4C
	call sub_402960
	push edi

loc_402C9B:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_402CB3
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_402C9B

loc_402CB3:
	pop edi
	mov eax, 1
	add esp, 50h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_402C40 endp

sub_402CD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, 2
	mov edx, dword_4C8014
	xor ecx, ecx
	mov [esp], edx
	call sub_41B710
	mov [esp+4], eax
	cmp esi, 30Ch
	jz loc_402D55

loc_402CFB:
	mov edx, dword [dword_4DAB80]
	mov eax, dword [dword_4DAB7C]
	xor ebp, ebp
	xor ebx, ebx
	mov dword [dword_4D2310], ebp
	call sub_482474
	mov ebx, eax
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	mov edx, esp
	call sub_483470
	call sub_4824BC
	mov eax, edi
	call sub_402E80
	call sub_405C70
	xor edx, edx

loc_402D43:
	call sub_405910
	test eax, eax
	jz loc_402D78
	mov eax, edx
	call sub_403550
	jmp loc_402D43

loc_402D55:
	mov eax, 30Dh
	call sub_41B710
	mov ebx, dword [dword_4D1FEC]
	mov edi, 3
	add ebx, ebx
	mov [esp+8], eax
	mov dword [dword_4D1FEC], ebx
	jmp loc_402CFB

loc_402D78:
	call sub_4833C7
	xor edx, edx

loc_402D7F:
	call sub_405910
	test eax, eax
	jnz loc_402DA0
	cmp ecx, dword [dword_4D1FEC]
	jge loc_402DA0
	call sub_4833C7
	add ecx, eax
	mov eax, edx
	call sub_403550
	jmp loc_402D7F

loc_402DA0:
	cmp esi, 30Ch
	jnz loc_402DBB
	mov eax, dword [dword_4D1FEC]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov dword [dword_4D1FEC], eax

loc_402DBB:
	mov edx, 1
	mov eax, dword [dword_4D4D24]
	mov dword [dword_4D2310], edx
	call sub_4825A8
	mov eax, [ebx+20h]
	call sub_4834C4
	push edx
	call sub_497680
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	call sub_4824BC
	mov eax, ebx
	call sub_482DA0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_402CD0 endp

sub_402E10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 0Ch
	mov edx, eax
	mov ebx, dword_4C8014
	mov ecx, 2
	mov [esp], ebx
	call sub_41B710
	mov [esp+4], eax
	cmp edx, 30Ch
	jz loc_402E46
	mov edx, esp
	mov eax, ecx
	call sub_402E80
	add esp, 0Ch
	pop edx
	pop ecx
	pop ebx
	ret

loc_402E46:
	push esi
	mov eax, 30Dh
	call sub_41B710
	mov esi, dword [dword_4D1FEC]
	mov ecx, 3
	add esi, esi
	mov [esp+0Ch], eax
	mov dword [dword_4D1FEC], esi
	pop esi
	mov edx, esp
	mov eax, ecx
	call sub_402E80
	add esp, 0Ch
	pop edx
	pop ecx
	pop ebx
	ret
;sub_402E10 endp

sub_402E80: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov ebp, eax
	mov [esp], edx
	mov eax, 12h
	call sub_4056F0
	xor edi, edi
	xor esi, esi
	test ebp, ebp
	jle loc_402EBF
	mov ebx, edx

loc_402EA1:
	mov eax, [ebx]
	call sub_482424
	mov edx, eax
	test esi, esi
	jnz loc_402EB1
	lea edx, [eax+3Ch]

loc_402EB1:
	cmp edx, edi
	jle loc_402EB7
	mov edi, edx

loc_402EB7:
	inc esi
	add ebx, 4
	cmp esi, ebp
	jl loc_402EA1

loc_402EBF:
	add edi, 1Eh
	cmp ebp, 1
	jg loc_403061
	xor esi, esi

loc_402ECD:
	mov edx, dword [dword_4DAB7C]
	sub edx, edi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4DAB80]
	sub edx, esi
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	xor ebx, ebx
	mov [esp+8], eax
	call sub_428A20
	mov edx, esi
	mov eax, edi
	mov ecx, 0B4h
	call sub_482474
	mov ebx, [esp+8]
	mov esi, eax
	call sub_4825A8
	mov eax, 0FF080808h
	mov edx, [esp+4]
	call sub_48266C
	call sub_482740
	call sub_428A20
	mov eax, [esi+20h]
	call sub_482C78
	mov eax, esi
	call sub_482DA0
	xor edx, edx
	mov eax, [esp+4]
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	add eax, 14h
	mov esi, [esp+4]
	call sub_482E00
	sub esi, 13Bh
	mov edx, aDbar ; "dbar"
	mov eax, dword [dword_4D4C78]
	mov ebx, [esp+8]
	call sub_482EA8
	add esi, edi
	sub ebx, 1Fh
	mov edx, esi
	call sub_48330C
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	xor edx, edx
	xor eax, eax
	call sub_482E00
	mov ebx, [esp+8]
	mov edx, aDlog ; "dlog"
	mov eax, dword [dword_4D4C78]
	mov ecx, [esp+4]
	call sub_482EA8
	sub ecx, 0A4h
	sub ebx, 8Eh
	mov edx, ecx
	xor esi, esi
	call sub_4833A0
	test ebp, ebp
	jle loc_403051
	mov eax, [esp+8]
	sub eax, 19h
	lea edx, [edi-3Ch]
	mov [esp+18h], ax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+4]
	add edx, 3Ch
	add edx, eax
	mov [esp+10h], edx
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+4]
	add edx, eax
	imul eax, esi, 1Eh
	mov ebx, [esp+8]
	add ebx, 0Fh
	sub eax, 1Eh
	mov edi, [esp]
	add eax, ebx
	mov [esp+0Ch], edx
	mov [esp+14h], ax

loc_40301B:
	mov eax, [edi]
	test esi, esi
	jz loc_403075
	push 2
	mov ebx, [esp+16h]
	mov edx, [esp+10h]

loc_40302B:
	mov ecx, 12h
	push 2
	sar ebx, 10h
	movsx edx, dx
	call sub_4054E0
	mov edx, [esp+14h]
	add edi, 4
	add edx, 1Eh
	inc esi
	mov [esp+14h], dx
	cmp esi, ebp
	jl loc_40301B

loc_403051:
	mov eax, [esp+8]
	add eax, 0Fh
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_403061:
	lea eax, [ebp-1]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	lea esi, [eax+1Eh]
	jmp loc_402ECD

loc_403075:
	mov ebx, [esp+16h]
	push esi
	mov edx, [esp+14h]
	jmp loc_40302B
;sub_402E80 endp

sub_403080: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4E5098]
	test edx, edx
	jnz loc_40308D
	pop edx
	ret

loc_40308D:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4E5098], ecx
	pop ecx
	pop edx
	ret
;sub_403080 endp

sub_4030A0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov esi, a000 ; "000"
	mov edi, dword_4E5074
	mov ebx, 1
	xor edx, edx
	push edi

loc_4030B8:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4030D0
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4030B8

loc_4030D0:
	pop edi
	mov dword [dword_4E507C], edx
	mov dword [dword_4E5078], ebx
	mov dword [dword_4E5080], edx
	mov dword [dword_4E5088], edx
	mov dword [dword_4E508C], edx
	mov dword [dword_4E5090], edx
	xor ah, ah
	mov dword [dword_4E5094], edx
	mov byte [byte_4E5084], ah
	mov byte [byte_4E5085], ah
	mov byte [byte_4E5086], ah
	cmp ecx, 5
	jnz loc_403116
	xor ecx, ecx

loc_403116:
	mov ebx, dword off_4D2004[ecx*4]
	push ebx
	push ebx
	mov edi, dword [dword_5134CC]
	push edi
	push aSSS_viv ; "%s%s\\%s.viv"
	push dword_4E504C
	call sprintf_
	add esp, 14h
	mov eax, dword_4E504C
	call sub_403150
	mov dword [dword_4E5098], eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4030A0 endp

sub_403150: ;SUBROUTINE
	push ebx
	push ecx
	push edx

; 	sub esp, 10h ;Below code prevents crash with languages without voice (uninitialized memory, game BUG?)
	push 1
	push 0
	push 0
	push 0

	call sub_485930
	mov ebx, 10h
	mov edx, esp
	xor eax, eax
	call sub_485AA4
	mov edx, eax
	test eax, eax
	jz loc_403263
	xor ecx, ecx

loc_403175:
	mov eax, ecx
	call sub_483EB0
	mov eax, edx
	call sub_485BDC
	test eax, eax
	jz loc_403175
	mov edx, [esp]
	mov eax, [esp]
	and edx, 0FFh
	and eax, 0FF00h
	shl edx, 18h
	shl eax, 8
	or eax, edx
	mov edx, [esp]
	and edx, 0FF0000h
	shr edx, 8
	or edx, eax
	mov eax, [esp]
	and eax, 0FF000000h
	shr eax, 18h
	or edx, eax
	mov eax, [esp+0Ch]
	mov [esp], edx
	mov edx, [esp+0Ch]
	and eax, 0FF00h
	and edx, 0FFh
	shl eax, 8
	shl edx, 18h
	or edx, eax
	mov eax, [esp+0Ch]
	and eax, 0FF0000h
	shr eax, 8
	or edx, eax
	mov eax, [esp+0Ch]
	and eax, 0FF000000h
	shr eax, 18h
	or edx, eax
	mov eax, [esp+8]
	mov [esp+0Ch], edx
	mov edx, [esp+8]
	and eax, 0FF00h
	and edx, 0FFh
	shl eax, 8
	shl edx, 18h
	or edx, eax
	mov eax, [esp+8]
	and eax, 0FF0000h
	shr eax, 8
	or edx, eax
	mov eax, [esp+8]
	and eax, 0FF000000h
	shr eax, 18h
	or edx, eax
	mov ecx, 199h
	mov [esp+8], edx
	mov edx, aCNfs2seFronten ; "c:\\nfs2se\\frontend\\common\\Feaudio.c"
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, [esp+0Ch]
	mov eax, aLumpyhead ; "lumpyhead"
	add edx, 20h
	mov dword [dword_4DB1DC], ecx
	call sub_4844B0
	mov ecx, eax
	test eax, eax
	jnz loc_40326A

loc_403263:
	add esp, 10h
	pop edx
	pop ecx
	pop ebx
	ret

loc_40326A:
	mov ebx, [esp+0Ch]
	mov edx, eax
	add ebx, 20h
	xor eax, eax
	call sub_485AA4
	mov edx, eax
	test eax, eax
	jz loc_403263
	xor ebx, ebx

loc_403282:
	mov eax, ebx
	call sub_483EB0
	mov eax, edx
	call sub_485BDC
	test eax, eax
	jz loc_403282
	mov edx, [ecx]
	mov eax, [ecx]
	and edx, 0FFh
	and eax, 0FF00h
	shl edx, 18h
	shl eax, 8
	or edx, eax
	mov eax, [ecx]
	and eax, 0FF0000h
	shr eax, 8
	or eax, edx
	mov edx, [ecx]
	and edx, 0FF000000h
	shr edx, 18h
	or eax, edx
	mov [ecx], eax
	mov edx, [ecx+0Ch]
	mov eax, [ecx+0Ch]
	and edx, 0FFh
	and eax, 0FF00h
	shl edx, 18h
	shl eax, 8
	or edx, eax
	mov eax, [ecx+0Ch]
	and eax, 0FF0000h
	shr eax, 8
	or edx, eax
	mov eax, [ecx+0Ch]
	and eax, 0FF000000h
	shr eax, 18h
	or edx, eax
	mov [ecx+0Ch], edx
	mov eax, [ecx+8]
	mov edx, [ecx+8]
	and eax, 0FF00h
	and edx, 0FFh
	shl eax, 8
	shl edx, 18h
	or edx, eax
	mov eax, [ecx+8]
	and eax, 0FF0000h
	shr eax, 8
	or eax, edx
	mov edx, [ecx+8]
	and edx, 0FF000000h
	shr edx, 18h
	or eax, edx
	mov [ecx+8], eax
	mov eax, ecx
	add esp, 10h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_403150 endp

sub_403340: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov edi, edx
	mov [esp+4], ebx
	mov [esp], ecx
	mov eax, [esp+4]
	xor ebx, ebx
	mov [eax], ebx
	mov [ecx], ebx
	test ebp, ebp
	jz loc_40336C
	lea esi, [ebp+10h]

loc_403362:
	mov eax, ebx
	mov edx, [ebp+8]
	inc ebx
	cmp eax, edx
	jb loc_403373

loc_40336C:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_403373:
	lea ecx, [esi+8]
	mov eax, edi
	mov edx, ecx
	call strcmp_
	test eax, eax
	jz loc_403398
	mov dl, [ecx]
	mov eax, ecx
	test dl, dl
	jz loc_403393

loc_40338B:
	mov dh, [eax+1]
	inc eax
	test dh, dh
	jnz loc_40338B

loc_403393:
	lea esi, [eax+1]
	jmp loc_403362

loc_403398:
	mov ecx, [esi]
	mov eax, [esi]
	and ecx, 0FFh
	and eax, 0FF00h
	shl ecx, 18h
	shl eax, 8
	or eax, ecx
	mov ecx, [esi]
	and ecx, 0FF0000h
	shr ecx, 8
	or ecx, eax
	mov eax, [esi]
	and eax, 0FF000000h
	shr eax, 18h
	or ecx, eax
	mov eax, [esp+4]
	mov [eax], ecx
	mov ecx, [esi+4]
	mov eax, [esi+4]
	and ecx, 0FFh
	and eax, 0FF00h
	shl ecx, 18h
	shl eax, 8
	or eax, ecx
	mov ecx, [esi+4]
	and ecx, 0FF0000h
	shr ecx, 8
	or ecx, eax
	mov eax, [esi+4]
	and eax, 0FF000000h
	shr eax, 18h
	or ecx, eax
	mov eax, [esp]
	mov [eax], ecx
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_403340 endp

sub_403410: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov ebp, edx
	mov esi, ebx
	mov [esp], ecx
	test ebx, ebx
	jnz loc_40342E
	xor ecx, ecx

loc_403425:
	mov eax, ecx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret

loc_40342E:
	mov edx, aCNfs2seFronten ; "c:\\nfs2se\\frontend\\common\\Feaudio.c"
	mov ecx, 14Fh
	mov eax, aStreambuffer ; "streamBuffer"
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, esi
	mov dword [dword_4DB1DC], ecx
	call sub_4844B0
	mov ecx, eax
	test eax, eax
	jz loc_403425
	mov eax, edi
	call sub_485930
	mov ebx, esi
	mov edx, ecx
	mov eax, ebp
	mov esi, [esp]
	call sub_485AA4
	mov [esi], eax
	mov eax, ecx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret
;sub_403410 endp

sub_403480: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov ecx, eax
	call sub_403920
	mov eax, dword [dword_4D5A30]
	mov dword [dword_4E509C], eax
	cmp eax, 7Fh
	jle loc_4034A5
	mov dword [dword_4E509C], 7Fh

loc_4034A5:
	mov ebx, 4
	mov eax, dword_4E5074
	mov edx, ecx
	xor esi, esi
	call strncpy_
	mov dword [dword_4E507C], esi
	mov ah, [ecx]
	mov dword [dword_4E5080], esi
	cmp ah, 63h
	jz loc_40354C
	mov eax, 1

loc_4034D4:
	mov dword [dword_4E5078], eax
	xor dl, dl
	xor ebp, ebp
	mov eax, dword_4E5074
	mov byte [byte_4E5084], dl
	mov byte [byte_4E5085], dl
	mov byte [byte_4E5086], dl
	mov dword [dword_4E5088], ebp
	mov dword [dword_4E508C], ebp
	mov dword [dword_4E5090], ebp
	mov dword [dword_4E5094], ebp
	call sub_403860
	test eax, eax
	jz loc_40353C
	cmp dword [dword_4D5A30], 0
	jz loc_40353C
	mov eax, dword [dword_4D5A28]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	mov eax, 0Ah
	call sub_4864A0

loc_40353C:
	call sub_4038F0
	mov eax, 1
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40354C:
	xor eax, eax
	jmp loc_4034D4
;sub_403480 endp

sub_403550: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	xor eax, eax
	call sub_483EB0
	call sub_403920
	cmp byte [byte_4E5084], 0
	jnz loc_4035AB

loc_40356B:
	cmp byte [byte_4E5085], 0
	jnz loc_4035CA

loc_403574:
	cmp dword [dword_4D1FFC], 0
	jz loc_403737

loc_403581:
	cmp byte [byte_4E5084], 0
	jz loc_40368F
	xor edx, edx

loc_403590:
	mov eax, dword [dword_4E5094]
	call sub_485BDC
	test eax, eax
	jnz loc_40368F
	mov eax, edx
	call sub_483EB0
	jmp loc_403590

loc_4035AB:
	mov eax, dword [dword_4E5094]
	call sub_485BDC
	test eax, eax
	jz loc_40356B
	xor dl, dl
	mov byte [byte_4E5084], dl
	mov byte [byte_4E5086], 1
	jmp loc_40356B

loc_4035CA:
	mov eax, dword [dword_4E5080]
	call sub_486040
	test eax, eax
	jz loc_403574
	mov ebx, 0FFFFFFFFh
	mov eax, dword [dword_4E5080]
	xor edx, edx
	call sub_486080
	mov eax, dword [dword_4E507C]
	call sub_486404
	mov edx, dword [dword_4E5090]
	test edx, edx
	jz loc_40360C
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4E5090], ecx

loc_40360C:
	mov ebx, dword [dword_4E5088]
	test ebx, ebx
	jz loc_403625
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4E5088], esi

loc_403625:
	cmp byte [byte_4E5084], 0
	jz loc_403656
	xor edx, edx

loc_403630:
	mov eax, dword [dword_4E5094]
	call sub_485BDC
	test eax, eax
	jnz loc_403647
	mov eax, edx
	call sub_483EB0
	jmp loc_403630

loc_403647:
	xor cl, cl
	mov byte [byte_4E5084], cl
	mov byte [byte_4E5086], 1

loc_403656:
	xor al, al
	xor edi, edi
	mov byte [byte_4E5085], al
	mov ah, byte [byte_4E5084]
	mov dword [dword_4E507C], edi
	test ah, ah
	jnz loc_403574
	cmp byte [byte_4E5086], 0
	jnz loc_403574
	mov dword [dword_4D1FFC], 1
	jmp loc_403581

loc_40368F:
	cmp byte [byte_4E5085], 0
	jz loc_4036B3
	mov ebx, 0FFFFFFFFh
	mov eax, dword [dword_4E5080]
	xor edx, edx
	call sub_486080
	mov eax, dword [dword_4E507C]
	call sub_486404

loc_4036B3:
	mov eax, 64h
	mov edx, dword [dword_4D5A28]
	call sub_4864A0
	mov edx, dword [dword_4E508C]
	test edx, edx
	jz loc_4036DC
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4E508C], ecx

loc_4036DC:
	mov ebx, dword [dword_4E5090]
	test ebx, ebx
	jz loc_4036F5
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4E5090], esi

loc_4036F5:
	mov edi, dword [dword_4E5088]
	test edi, edi
	jz loc_40370E
	mov eax, edi
	xor ebp, ebp
	call sub_4848FC
	mov dword [dword_4E5088], ebp

loc_40370E:
	xor ah, ah
	xor dh, dh
	mov byte [byte_4E5086], ah
	mov byte [byte_4E5085], ah
	xor eax, eax
	mov byte [byte_4E5084], dh
	mov dword [dword_4D1FFC], eax

loc_40372B:
	call sub_4038F0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_403737:
	cmp byte [byte_4E5086], 0
	jz loc_40372B
	mov bl, byte [byte_4E5085]
	test bl, bl
	jnz loc_40372B
	cmp byte [byte_4E5084], 0
	jnz loc_40372B
	mov eax, dword_4E5074
	call sub_403770
	mov byte [byte_4E5086], bl
	call sub_4038F0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_403550 endp

sub_403770: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov edx, [eax+18h]
	test edx, edx
	jnz loc_40378C

loc_403782:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40378C:
	add eax, 8
	call sub_485364
	cmp eax, 7
	jnz loc_403838
	mov ebx, aCNfs2seFronten ; "c:\\nfs2se\\frontend\\common\\Feaudio.c"
	mov esi, 81h
	mov eax, [ecx+8]
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_485160
	mov edx, eax
	xor ebx, ebx
	mov eax, aComheader ; "comHeader"
	call sub_484498
	mov edx, [ecx+8]
	mov [ecx+14h], eax
	call sub_485218
	mov edi, [ecx+18h]
	test edi, edi
	jz loc_4037E9
	mov eax, edi
	call sub_4848FC
	mov dword [ecx+18h], 0

loc_4037E9:
	mov eax, esp
	call sub_485380
	mov al, [ecx+8]
	mov [esp+4], al
	mov al, byte [dword_4E509C]
	xor ebp, ebp
	mov [esp+8], al
	mov eax, esp
	mov [esp], ebp
	call sub_4853C0
	mov [ecx+0Ch], eax
	mov eax, [ecx+4]
	mov byte [ecx+11h], 1
	test eax, eax
	jz loc_403782
	mov ah, [ecx+2]
	cmp ah, 39h
	jb loc_403847
	mov byte [ecx+12h], 0
	mov byte [ecx+10h], 0
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_403838:
	mov eax, [ecx+18h]
	mov dword [ecx+18h], 0
	mov [ecx+1Ch], eax
	jmp loc_4037E9

loc_403847:
	mov dl, ah
	inc dl
	mov eax, ecx
	mov [ecx+2], dl
	call sub_403860
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_403770 endp

sub_403860: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 8
	mov esi, eax
	mov ecx, esp
	lea ebx, [esp+4]
	mov eax, dword [dword_4E5098]
	mov edx, esi
	call sub_403340
	cmp dword [esp+4], 0
	jz loc_4038C8
	cmp dword [esp], 0
	jz loc_4038C8
	mov ebx, [esi+18h]
	test ebx, ebx
	jz loc_40389E
	mov eax, ebx
	call sub_4848FC
	mov dword [esi+18h], 0

loc_40389E:
	mov ebx, [esp]
	mov edx, [esp+4]
	mov eax, dword_4E504C
	lea ecx, [esi+20h]
	call sub_403410
	mov edi, [esi+20h]
	mov [esi+18h], eax
	test edi, edi
	jnz loc_4038D3
	test eax, eax
	jz loc_4038C8
	call sub_4848FC
	mov [esi+18h], edi

loc_4038C8:
	xor eax, eax
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4038D3:
	mov byte [esi+12h], 0
	mov eax, 1
	mov byte [esi+10h], 1
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_403860 endp

sub_4038F0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_4D2000]
	test edx, edx
	jz loc_403909
	lea ecx, [edx-1]
	mov dword [dword_4D2000], ecx
	test ecx, ecx
	jz loc_40390C

loc_403909:
	pop edx
	pop ecx
	ret

loc_40390C:
	mov eax, dword_4E5014
	call sub_4825A8
	pop edx
	pop ecx
	ret
;sub_4038F0 endp

sub_403920: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_4D2000]
	test edx, edx
	jnz loc_403962
	pop edx
	pop ecx
	ret
loc_403962:
	lea ecx, [edx+1]
	mov dword [dword_4D2000], ecx
	pop edx
	pop ecx
	ret
;sub_403920 endp

sub_403970: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, 1
	xor edx, edx
	xor eax, eax
	xor ebp, ebp
	mov al, byte [byte_512DA8]
	mov [esp+4], edx
	mov [esp+8], eax
	mov eax, esi
	mov [esp], edx
	call sub_410E80

loc_40399D:
	call sub_4833C7
	add ebp, eax
	xor edx, edx
	mov eax, esi
	call sub_40BBE0
	test eax, eax
	jz loc_403ADC

loc_4039B5:
	call sub_40EB20
	call sub_428A20
	mov edx, 400h
	mov eax, [esi+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, esi
	call sub_40FA90
	cmp byte [byte_512DFB], 2
	jnz loc_403AEA
	mov ecx, 1
	mov ebx, 4Dh
	mov edx, 12Ch

loc_403A13:
	mov eax, 137h
	call sub_405580
	call sub_405C70

loc_403A27:
	call sub_423B90
	mov ecx, 1E0h
	mov eax, esi
	mov ebx, 87h
	call sub_423CA0
	xor edx, edx
	mov edi, eax
	mov eax, 1F9h
	call sub_423DC0
	mov byte [byte_512DA8], al
	mov ebx, [esp+8]
	and eax, 0FFh
	cmp eax, ebx
	jz loc_403A75
	mov edx, 2Dh
	mov [esp+8], eax
	mov eax, 1
	mov edi, 1
	call sub_4423F0

loc_403A75:
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_403AC4
	cmp ebp, [esp]
	jle loc_403AC4
	mov edi, 1
	lea ecx, [ebp+0Fh]
	mov bx, [esi+0Ah]
	mov [esp], ecx
	cmp bx, 0Ah
	jge loc_403B04
	cmp ax, 4B00h
	jnz loc_403AFE

loc_403AA1:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	cmp byte [byte_512DA8], 0
	jnz loc_403B14
	mov al, 1

loc_403AB8:
	mov byte [byte_512DA8], al
	mov eax, esi
	call sub_423E10

loc_403AC4:
	mov ebx, [esp+4]
	test ebx, ebx
	jz loc_40399D
	mov eax, ebx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_403ADC:
	test di, di
	jnz loc_4039B5
	jmp loc_403A27

loc_403AEA:
	mov ecx, 1
	mov ebx, 4Dh
	mov edx, 16Bh
	jmp loc_403A13

loc_403AFE:
	cmp ax, 4D00h
	jz loc_403AA1

loc_403B04:
	movsx edx, dx
	mov eax, esi
	call sub_410414
	mov [esp+4], eax
	jmp loc_403AC4

loc_403B14:
	xor al, al
	jmp loc_403AB8
;sub_403970 endp

sub_403B20: ;SUBROUTINE
	push ecx
	mov ah, 1
	mov ch, byte [byte_512DA9]
	mov byte [byte_512DD9], ah
	mov byte [byte_512DD6], ah
	mov byte [byte_512DF3], ah
	mov byte [byte_512DF4], ah
	mov byte [byte_512DF2], ah
	mov byte [byte_512DD8], ah
	cmp ch, ah
	jnz loc_403BAD
	mov eax, dword [dword_512E34]
	call sub_403BE0
	mov byte [byte_512DD6], al
	mov eax, dword [dword_512E44]
	call sub_403BE0
	mov byte [byte_512DD8], al
	mov eax, dword [dword_512E4C]
	call sub_403BE0
	mov byte [byte_512DD9], al
	mov eax, dword [dword_512E38]
	call sub_403BE0
	mov byte [byte_512DF2], al
	mov eax, dword [dword_512E48]
	call sub_403BE0
	mov byte [byte_512DF3], al
	mov eax, dword [dword_512E50]
	call sub_403BE0
	mov byte [byte_512DF4], al
	pop ecx
	ret

loc_403BAD:
	mov eax, dword [dword_512E0C]
	call sub_403BE0
	mov byte [byte_512DD6], al
	mov eax, dword [dword_512E14]
	call sub_403BE0
	mov byte [byte_512DD8], al
	mov eax, dword [dword_512E18]
	call sub_403BE0
	mov byte [byte_512DD9], al
	pop ecx
	ret
;sub_403B20 endp

sub_403BE0: ;SUBROUTINE
	push ebx
	push edx
	mov edx, eax
	and edx, 0FFh
	cmp edx, 1
	jz loc_403BF7

loc_403BEF:
	mov eax, 1
	pop edx
	pop ebx
	ret

loc_403BF7:
	sar eax, 1Ch
	xor ebx, ebx
	xor edx, edx
	movsx eax, al
	call sub_421BD0
	test eax, eax
	jz loc_403BEF
	test byte [eax+8], 4
	jnz loc_403BEF
	xor eax, eax
	pop edx
	pop ebx
	ret
;sub_403BE0 endp

sub_403C20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 84h
	mov [esp+64h], eax
	xor edx, edx
	call sub_410E80
	mov [esp+74h], edx
	mov edx, 1
	mov eax, 140h
	mov [esp+80h], edx
	mov edx, 0C8h
	call sub_4242C0

loc_403C56:
	call sub_405960
	test eax, eax
	jnz loc_403C56
	mov [esp+78h], eax
	xor esi, esi
	mov ebp, 0Ch

loc_403C6A:
	mov ebx, [esp+78h]
	mov edx, esi
	xor ecx, ecx
	shl ebx, 2

loc_403C75:
	mov word (dword_512ED4+2)[edx], 0FFh
	xor edi, edi
	mov [esp+ebx], ecx
	mov word (dword_512F1C+2)[edx], di
	mov edi, [esp+78h]
	mov [esp+ebx+30h], eax
	cmp ebp, edi
	jg loc_403DB7

loc_403C9A:
	inc ecx
	add edx, 2
	cmp ecx, 6
	jl loc_403C75
	inc eax
	add esi, 0Ch
	cmp eax, 2
	jl loc_403C6A
	mov eax, [esp+78h]
	shl eax, 2
	mov [esp+60h], eax
	mov [esp+70h], eax

loc_403CBB:
	cmp dword [esp+74h], 0
	jz loc_403DC4

loc_403CC6:
	xor ebp, ebp
	xor edi, edi

loc_403CCA:
	mov ebx, ebp
	xor esi, esi

loc_403CCE:
	mov edx, esi
	mov eax, edi
	call sub_477BA0
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, dword dword_512ED4[ebx]
	lea ecx, [eax+eax*8]
	sar edx, 10h
	add edx, ecx
	mov dword [esp+7Ch], 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv dword [esp+7Ch]
	mov edx, dword dword_512F1C[ebx]
	sar edx, 10h
	mov word (dword_512EEC+2)[ebx], ax
	add edx, ecx
	mov ecx, 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	add ebx, 2
	inc esi
	mov word dword_512F04[ebx], ax
	cmp esi, 6
	jl loc_403CCE
	inc edi
	add ebp, 0Ch
	cmp edi, 2
	jl loc_403CCA
	mov ebp, 0FFh
	xor eax, eax

loc_403D41:
	mov edx, dword off_4D206C[eax*4]
	mov edx, [edx]
	mov ecx, edx
	and ecx, ebp
	cmp ecx, 1
	jnz loc_403DA0
	mov ecx, edx
	sar ecx, 1Ch
	imul edi, ecx, 0Ch
	mov eax, edx
	mov esi, edx
	mov ebx, edx
	sar eax, 18h
	sar esi, 10h
	sar ebx, 8
	and eax, 0Fh
	and esi, ebp
	mov edx, eax
	and ebx, ebp
	shl edx, 10h
	add eax, eax
	shl ecx, 14h
	add eax, edi
	add edx, ecx
	cmp esi, ebx
	jge loc_403FAC
	mov ecx, dword dword_512F04[eax]
	sar ecx, 10h
	mov eax, dword dword_512F1C[eax]

loc_403D96:
	shl ecx, 8
	sar eax, 10h
	add edx, ecx
	add eax, edx

loc_403DA0:
	inc eax
	cmp eax, 0Ah
	jl loc_403D41
	mov eax, [esp+74h]
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_403DB7:
	inc edi
	add ebx, 4
	mov [esp+78h], edi
	jmp loc_403C9A

loc_403DC4:
	call sub_4833C7
	mov eax, [esp+64h]
	xor edx, edx
	call sub_40BBE0
	test eax, eax
	jz loc_403F82

loc_403DDC:
	call sub_40EB20
	call sub_428A20
	mov eax, [esp+64h]
	xor edx, edx
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+80h], edx
	mov eax, [eax+4]
	mov edx, 400h
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, [esp+64h]
	call sub_40FA90
	cmp dword [esp+78h], 0
	jle loc_403EB7
	mov ebp, [esp+60h]
	xor ebx, ebx

loc_403E3E:
	mov edi, [esp+ebx]
	mov esi, [esp+ebx+30h]
	mov edx, edi
	mov eax, esi
	call sub_477BA0
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul edx, esi, 0Ch
	mov ecx, eax
	lea eax, [edi+edi]
	add edx, eax
	mov eax, dword dword_512ED4[edx]
	sar eax, 10h
	cmp ecx, eax
	jge loc_403E84
	mov eax, ecx
	mov word (dword_512ED4+2)[edx], cx
	test ax, ax
	jl loc_403F93

loc_403E84:
	imul esi, 0Ch
	lea edx, [edi+edi]
	add edx, esi
	mov eax, dword dword_512F1C[edx]
	sar eax, 10h
	cmp ecx, eax
	jle loc_403EB0
	mov word (dword_512F1C+2)[edx], cx
	cmp cx, 100h
	jle loc_403EB0
	mov word (dword_512F1C+2)[edx], 100h

loc_403EB0:
	add ebx, 4
	cmp ebx, ebp
	jl loc_403E3E

loc_403EB7:
	cmp dword [esp+78h], 0
	jle loc_403F65
	mov ebp, 0F0h
	mov eax, [esp+70h]
	mov esi, 0F4h
	xor edi, edi
	mov [esp+68h], eax

loc_403ED6:
	mov ebx, 118h
	mov eax, [esp+edi+30h]
	mov edx, 3000h
	mov [esp+6Ch], eax
	mov eax, [esp+edi]
	mov ecx, ebp
	mov [esp+7Ch], eax
	mov eax, aCali ; "cali"
	call sub_405B30
	imul edx, [esp+6Ch], 0Ch
	mov eax, [esp+7Ch]
	add eax, eax
	add edx, eax
	mov ecx, esi
	mov eax, aCtab ; "ctab"
	mov ebx, dword dword_512ED4[edx]
	mov [esp+6Ch], edx
	sar ebx, 10h
	mov edx, 3000h
	add ebx, 145h
	call sub_405B30
	mov ebx, [esp+6Ch]
	add edi, 4
	mov edx, 3000h
	mov ebx, dword dword_512F1C[ebx]
	mov eax, aCtab ; "ctab"
	sar ebx, 10h
	mov ecx, esi
	add ebx, 145h
	add ebp, 2Dh
	call sub_405B30
	mov ebx, [esp+68h]
	add esi, 2Dh
	cmp edi, ebx
	jl loc_403ED6

loc_403F65:
	call sub_405C70

loc_403F6A:
	call sub_405960
	cmp ax, 1Bh
	jnz loc_403FA1

loc_403F75:
	mov dword [esp+74h], 0FFFFFFFFh
	jmp loc_403CC6

loc_403F82:
	cmp word [esp+80h], 0
	jnz loc_403DDC
	jmp loc_403F6A

loc_403F93:
	xor eax, eax
	mov word (dword_512ED4+2)[edx], ax
	jmp loc_403E84

loc_403FA1:
	cmp ax, 0Dh
	jz loc_403F75
	jmp loc_403CBB

loc_403FAC:
	mov ecx, dword dword_512EEC[eax]
	sar ecx, 10h
	mov eax, dword dword_512ED4[eax]
	jmp loc_403D96
;sub_403C20 endp

sub_403FC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov [esp+2Ch], eax
	mov [esp+34h], edx
	mov ebx, 1
	xor edx, edx
	mov eax, [esp+34h]
	mov [esp+38h], edx
	mov [esp+18h], edx
	mov [esp+20h], edx
	mov dl, [eax+9]
	mov [esp+28h], ebx
	cmp dl, 0Dh
	jz loc_404154

loc_403FF7:
	mov eax, [esp+18h]
	mov edx, [esp+34h]
	shl eax, 2
	mov edx, [edx+0Ch]
	add eax, edx
	mov edx, [eax]
	mov [esp+24h], edx
	mov dword [eax], 0
	mov edi, 1
	xor esi, esi

loc_40401A:
	mov edx, esi
	mov ecx, esi
	mov ebx, esi

loc_404020:
	cmp si, word (dword_512F34+2)[ecx]
	jz loc_404036
	mov eax, edx
	call sub_477B70
	test eax, eax
	jz loc_404036
	mov ebx, edi

loc_404036:
	inc edx
	add ecx, 2
	cmp edx, 2
	jl loc_404020
	test ebx, ebx
	jnz loc_40401A
	mov eax, dword_4E50A0
	mov ebp, 1
	mov [esp+3Ch], ebx
	mov [esp+1Ch], ebx
	mov [esp+30h], eax

loc_404059:
	mov eax, [esp+3Ch]
	cmp word (dword_512F34+2)[eax], 0
	jz loc_404111
	mov esi, [esp+3Ch]
	mov ebx, [esp+30h]
	xor eax, eax
	mov esi, dword byte_512F38[esi]
	xor edx, edx
	sar esi, 10h

loc_404080:
	mov edi, 1
	mov cl, al
	shl edi, cl
	test esi, edi
	jz loc_40416A
	lea ecx, [edx+ebx]

loc_404094:
	mov [esp+edx], ecx
	inc eax
	add edx, 4
	cmp eax, 6
	jl loc_404080
	push 0
	mov ebx, [esp+18h]
	mov esi, [esp+14h]
	push ebx
	mov edi, [esp+14h]
	mov eax, [esp+10h]
	push esi
	mov ecx, [esp+10h]
	xor edx, edx
	push edi
	mov ebx, [esp+10h]
	xor esi, esi
	push eax
	mov eax, [esp+30h]
	mov edi, [esp+50h]
	call sub_477C10
	xor ebx, ebx

loc_4040D1:
	mov cl, bl
	mov eax, dword byte_512F38[edi]
	mov edx, ebp
	sar eax, 10h
	shl edx, cl
	test eax, edx
	jz loc_404108
	mov ecx, [esp+esi]
	mov eax, [ecx]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx], eax
	mov eax, [esp+esi]
	mov edx, [eax]
	test edx, edx
	jl loc_404171
	mov eax, edx

loc_404103:
	mov edx, [esp+esi]
	mov [edx], eax

loc_404108:
	inc ebx
	add esi, 4
	cmp ebx, 6
	jl loc_4040D1

loc_404111:
	mov ebx, [esp+3Ch]
	mov esi, [esp+1Ch]
	mov ecx, [esp+30h]
	add ebx, 2
	inc esi
	add ecx, 18h
	mov [esp+3Ch], ebx
	mov [esp+1Ch], esi
	mov [esp+30h], ecx
	cmp esi, 2
	jl loc_404059
	mov ecx, 1Ch
	xor edx, edx

loc_404140:
	mov eax, ecx
	call sub_486550
	test eax, eax
	jz loc_404175

loc_40414B:
	mov eax, edx
	call sub_403550
	jmp loc_404140

loc_404154:
	cmp byte [byte_512DA8], 0
	jz loc_403FF7
	mov [esp+18h], ebx
	jmp loc_403FF7

loc_40416A:
	xor ecx, ecx
	jmp loc_404094

loc_404171:
	xor eax, eax
	jmp loc_404103

loc_404175:
	call sub_424240
	test eax, eax
	jnz loc_40414B
	mov esi, [esp+18h]
	shl esi, 2
	mov ebp, 135h
	xor edi, edi

loc_40418C:
	cmp edi, [esp+28h]
	jnz loc_40419F
	mov eax, [esp+20h]
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_40419F:
	call sub_428A20
	mov eax, [esp+2Ch]
	mov edx, 400h
	mov ecx, edi
	mov ebx, edi
	mov eax, [eax+4]
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	mov ecx, edi
	mov ebx, edi
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, [esp+2Ch]
	call sub_40FA90
	mov eax, [esp+34h]
	mov eax, [eax]
	sar eax, 10h
	call sub_41B670
	mov eax, 120h
	call sub_41B710
	call sub_482424
	mov eax, [esp+34h]
	cmp byte [eax+9], 0Dh
	jnz loc_4042D1
	mov ecx, 1
	mov ebx, 4Dh
	mov edx, 16Bh

loc_40421C:
	mov eax, ebp
	call sub_405580
	call sub_405C70
	mov eax, edi
	call sub_403550
	call sub_482030
	mov edx, eax
	sar edx, 10h
	cmp edx, 3Bh
	jge loc_404304

loc_404247:
	cmp edx, 0FFFFFFFFh
	jz loc_40426C
	and eax, 0FFFFh
	cmp eax, 1Bh
	jnz loc_404312
	mov eax, [esp+34h]
	mov eax, [eax+0Ch]
	mov edx, [esp+24h]
	mov [esp+28h], edi
	mov [esi+eax], edx

loc_40426C:
	cmp edi, [esp+38h]
	jnz loc_40427B
	call sub_404360
	mov [esp+38h], eax

loc_40427B:
	mov ecx, [esp+38h]
	cmp edi, ecx
	jz loc_40418C
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov edx, [esp+2Ch]
	mov eax, ecx
	call sub_404590
	mov edx, [esp+18h]
	mov eax, [esp+34h]
	shl edx, 2
	mov eax, [eax+0Ch]
	add eax, edx
	mov [eax], ecx
	call sub_404540
	test eax, eax
	jnz loc_40433E
	or byte [byte_4D3468], 1
	mov eax, [esp+20h]
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4042D1:
	mov eax, ebp
	call sub_41B650
	movsx ebx, ax
	mov eax, ebp
	call sub_41B710
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, 19Ah
	sub edx, eax
	mov ecx, 1
	movsx edx, dx
	jmp loc_40421C

loc_404304:
	cmp edx, 44h
	jg loc_404247
	jmp loc_40426C

loc_404312:
	test eax, eax
	jz loc_40426C
	cmp eax, 0Dh
	jz loc_40426C
	call toupper_
	shl eax, 10h
	add edx, eax
	shl edx, 8
	xor dl, dl
	add edx, 4
	mov [esp+38h], edx
	jmp loc_40426C

loc_40433E:
	and byte [byte_4D3468], 0FEh
	mov eax, [esp+20h]
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_403FC0 endp

sub_404360: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	xor esi, esi
	mov [esp+18h], esi
	mov [esp+0Ch], esi
	mov [esp], esi
	mov [esp+4], esi
	mov [esp+8], esi
	mov [esp+10h], esi

loc_404382:
	mov eax, [esp]
	cmp word (dword_512F34+2)[eax], 0
	jnz loc_4043E2

loc_40438F:
	mov ecx, [esp]
	mov ebx, [esp+6]
	mov edi, [esp+10h]
	mov ebp, [esp+18h]
	mov ah, [esp+0Fh]
	add ecx, 2
	add ebx, 10h
	add edi, 18h
	inc ebp
	inc ah
	mov [esp], ecx
	mov [esp+6], bx
	mov [esp+10h], edi
	mov ebx, [esp+8]
	mov [esp+18h], ebp
	add ebx, 0Ch
	mov [esp+0Fh], ah
	mov [esp+8], ebx
	cmp ebp, 2
	jge loc_4043D6
	test esi, esi
	jz loc_404382

loc_4043D6:
	mov eax, esi
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4043E2:
	mov eax, [esp+18h]
	call sub_477B70
	mov ebp, eax
	test eax, eax
	jz loc_404443
	mov edi, [esp]
	mov edx, [esp+0Ch]
	mov ecx, 1
	xor eax, eax

loc_4043FF:
	mov ebx, dword dword_512F34[edi]
	sar ebx, 10h
	cmp eax, ebx
	jl loc_404424

loc_40440C:
	xor edx, edx

loc_40440E:
	mov eax, [esp+18h]
	call sub_477B70
	test eax, eax
	jz loc_404443
	mov eax, edx
	call sub_483EB0
	jmp loc_40440E

loc_404424:
	test esi, esi
	jnz loc_40440C
	test ebp, ecx
	jz loc_40443F
	mov esi, edx
	and si, 0FF00h
	add esi, 2

loc_404436:
	inc eax
	add edx, 100h
	jmp loc_4043FF

loc_40443F:
	add ecx, ecx
	jmp loc_404436

loc_404443:
	mov edx, 1
	xor ebp, ebp
	mov [esp+1Ch], edx
	test esi, esi
	jnz loc_40438F
	mov eax, [esp]
	mov ebx, [esp+8]
	mov ecx, [esp+4]
	mov edi, [esp+10h]
	mov [esp+14h], eax

loc_404469:
	mov eax, [esp+14h]
	mov eax, dword byte_512F38[eax]
	sar eax, 10h
	mov edx, [esp+1Ch]
	test eax, edx
	jnz loc_40449D

loc_40447E:
	add ecx, 10000h
	add edi, 4
	inc ebp
	add ebx, 2
	cmp ebp, 6
	jge loc_40438F
	test esi, esi
	jz loc_404469
	jmp loc_40438F

loc_40449D:
	mov eax, [esp+18h]
	mov edx, ebp
	call sub_477BA0
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	test eax, eax
	jl loc_4044E5

loc_4044B9:
	mov edx, dword dword_4E50A0[edi]
	sub eax, edx
	cmp eax, 40h
	jle loc_404505
	cmp edx, 40h
	jge loc_4044E9
	lea eax, [ecx+14ECh]

loc_4044D1:
	shl eax, 8
	xor al, al
	lea esi, [eax+1]

loc_4044D9:
	mov edx, [esp+1Ch]
	add edx, edx
	mov [esp+1Ch], edx
	jmp loc_40447E

loc_4044E5:
	xor eax, eax
	jmp loc_4044B9

loc_4044E9:
	mov eax, dword dword_512F04[ebx]
	sar eax, 10h
	shl eax, 8
	lea edx, [ecx+eax]
	mov eax, dword dword_512F1C[ebx]
	sar eax, 10h
	add eax, edx
	jmp loc_4044D1

loc_404505:
	cmp eax, 0FFFFFFC0h
	jge loc_4044D9
	cmp edx, 0C0h
	jle loc_40451A
	lea eax, [ecx+0EC14h]
	jmp loc_4044D1

loc_40451A:
	mov eax, dword dword_512EEC[ebx]
	sar eax, 10h
	shl eax, 8
	lea edx, [ecx+eax]
	mov eax, dword dword_512ED4[ebx]
	sar eax, 10h
	add eax, edx
	jmp loc_4044D1
;sub_404360 endp

sub_404540: ;SUBROUTINE
	push edx
	cmp byte [byte_512DA9], 1
	jnz loc_40456A
	xor eax, eax

loc_40454C:
	mov edx, dword off_4D201C[eax]
	cmp dword [edx], 0
	jz loc_404566
	add eax, 4
	cmp eax, 50h
	jl loc_40454C
	mov eax, 1
	pop edx
	ret

loc_404566:
	xor eax, eax
	pop edx
	ret

loc_40456A:
	xor eax, eax

loc_40456C:
	mov edx, dword off_4D206C[eax]
	cmp dword [edx], 0
	jz loc_404566
	add eax, 4
	cmp eax, 28h
	jl loc_40456C
	mov eax, 1
	pop edx
	ret
;sub_404540 endp

sub_404590: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	test eax, eax
	jz loc_4045DE
	mov edx, eax
	and edx, 0FFh
	cmp edx, 3
	jnz loc_40460B
	mov bh, byte [byte_512DA9]
	and ecx, 0FFFFFFh
	cmp bh, 1
	jnz loc_4045E7
	xor eax, eax

loc_4045BE:
	mov edx, dword off_4D201C[eax]
	mov ebx, [edx]
	and ebx, 0FFFFFFh
	cmp ebx, ecx
	jnz loc_4045D6
	mov dword [edx], 0

loc_4045D6:
	add eax, 4
	cmp eax, 50h
	jnz loc_4045BE

loc_4045DE:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4045E7:
	xor eax, eax

loc_4045E9:
	mov edx, dword off_4D206C[eax]
	mov ebx, [edx]
	and ebx, 0FFFFFFh
	cmp ebx, ecx
	jnz loc_404601
	mov dword [edx], 0

loc_404601:
	add eax, 4
	cmp eax, 28h
	jz loc_4045DE
	jmp loc_4045E9

loc_40460B:
	mov bl, byte [byte_512DA9]
	mov esi, ecx
	mov edi, ecx
	and eax, 0FF0000FFh
	and esi, 0FF0000h
	and edi, 0FF00h
	cmp bl, 1
	jnz loc_4046B4
	mov [esp+4], edx
	mov [esp+0Ch], eax
	xor edx, edx

loc_404639:
	mov eax, dword off_4D201C[edx]
	mov ebx, [eax]
	cmp ecx, ebx
	jnz loc_404655

loc_404645:
	mov dword [eax], 0

loc_40464B:
	add edx, 4
	cmp edx, 50h
	jz loc_4045DE
	jmp loc_404639

loc_404655:
	mov ebp, [esp+0Ch]
	and ebx, 0FF0000FFh
	cmp ebx, ebp
	jnz loc_40464B
	cmp dword [esp+4], 1
	jnz loc_40464B
	mov ebx, [eax]
	and ebx, 0FF0000h
	cmp ebx, esi
	jz loc_404681
	mov eax, [eax]
	and eax, 0FF00h
	cmp eax, edi
	jnz loc_404689

loc_404681:
	mov eax, dword off_4D201C[edx]
	jmp loc_404645

loc_404689:
	mov ebp, esi
	sar ebp, 8
	and ebp, 0FF00h
	cmp eax, ebp
	jz loc_404681
	mov eax, edi
	shl eax, 8
	and eax, 0FF0000h
	cmp ebx, eax
	jz loc_404681
	add edx, 4
	cmp edx, 50h
	jz loc_4045DE
	jmp loc_404639

loc_4046B4:
	mov [esp], edx
	mov [esp+8], eax
	xor edx, edx

loc_4046BD:
	mov eax, dword off_4D206C[edx]
	mov ebx, [eax]
	cmp ecx, ebx
	jnz loc_4046DD

loc_4046C9:
	mov dword [eax], 0

loc_4046CF:
	add edx, 4
	cmp edx, 28h
	jz loc_4045DE
	jmp loc_4046BD

loc_4046DD:
	mov ebp, [esp+8]
	and ebx, 0FF0000FFh
	cmp ebx, ebp
	jnz loc_4046CF
	cmp dword [esp], 1
	jnz loc_4046CF
	mov ebx, [eax]
	and ebx, 0FF0000h
	cmp ebx, esi
	jz loc_404708
	mov eax, [eax]
	and eax, 0FF00h
	cmp eax, edi
	jnz loc_404710

loc_404708:
	mov eax, dword off_4D206C[edx]
	jmp loc_4046C9

loc_404710:
	mov ebp, esi
	sar ebp, 8
	and ebp, 0FF00h
	cmp eax, ebp
	jz loc_404708
	mov eax, edi
	shl eax, 8
	and eax, 0FF0000h
	cmp ebx, eax
	jz loc_404708
	add edx, 4
	cmp edx, 28h
	jz loc_4045DE
	jmp loc_4046BD
;sub_404590 endp

sub_404740: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0ACh
	and esp, 0FFFFFFF8h
	mov [esp+78h], eax
	mov esi, edx
	mov [esp+8Ch], ebx
	mov eax, [eax]
	sar eax, 10h
	call sub_41B6F0
	mov [esp+90h], eax
	test ecx, ecx
	jnz loc_40497E
	mov eax, [esp+78h]
	mov eax, [eax]
	sar eax, 10h
	call sub_41B6D0
	mov [esp+6Ch], eax
	mov [esp+68h], eax

loc_40478A:
	cmp dword [esp+90h], 12h
	jnz loc_4049C4
	mov eax, 0Ah
	mov edi, 50h
	mov [esp], eax
	mov [esp+4], edi

loc_4047A9:
	cmp byte [byte_512DFB], 5
	jz loc_4049DA

loc_4047B6:
	lea eax, [esi+8Ah]
	xor edx, edx
	xor edi, edi
	mov [esp+74h], eax
	mov [esp+88h], edx

loc_4047CB:
	mov eax, [esp+78h]
	mov ecx, [esp+4]
	mov eax, [eax+0Ch]
	add ecx, esi
	mov eax, [edi+eax]
	mov [esp+0A4h], ecx
	mov edx, eax
	mov ecx, eax
	and edx, 0FFh
	sar ecx, 8
	sar eax, 18h
	mov [esp+84h], ecx
	mov [esp+7Ch], eax
	cmp edx, 2
	jnb loc_404A2B
	cmp edx, 1
	jnz loc_404BE1
	mov eax, [esp+edi+66h]
	sar eax, 10h
	push eax
	mov eax, [esp+92h]
	sar eax, 10h
	movsx edx, si
	mov [esp+9Ch], eax
	mov eax, [esp+8Eh]
	push 3
	sar eax, 10h
	mov ecx, [esp+0A0h]
	mov [esp+9Ch], eax
	mov eax, 121h
	mov ebx, [esp+9Ch]
	call sub_41B710
	call sub_4054E0
	mov eax, 121h
	mov edx, [esp]
	call sub_41B710
	call sub_482424
	add eax, esi
	add edx, eax
	mov [esp+80h], edx
	mov eax, [esp+84h]
	sar eax, 14h
	inc eax
	push eax
	push aD_4 ; "%d"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+edi+66h]
	sar eax, 10h
	mov edx, [esp+7Eh]
	push eax
	mov ecx, [esp+9Ch]
	mov ebx, [esp+98h]
	push 3
	sar edx, 10h
	lea eax, [esp+10h]
	call sub_4054E0
	mov eax, [esp+edi+66h]
	sar eax, 10h
	mov esi, [esp+0A4h]
	push eax
	mov ecx, [esp+9Ch]
	mov ebx, [esp+98h]
	push 3
	mov eax, 123h
	movsx edx, si
	call sub_41B710
	call sub_4054E0
	mov eax, 123h
	mov ebx, [esp]
	call sub_41B710
	call sub_482424
	add eax, ebx
	add esi, eax
	mov eax, [esp+7Ch]
	and eax, 0Fh
	push eax
	push aD_4 ; "%d"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+edi+66h]
	sar eax, 10h
	push eax
	movsx edx, si
	mov ecx, [esp+9Ch]
	push 3
	mov ebx, [esp+9Ch]

loc_40493A:
	lea eax, [esp+10h]

loc_40493E:
	call sub_4054E0
	mov eax, [esp+78h]
	cmp byte [eax+9], 0Dh
	jnz loc_404C11
	mov eax, [esp+88h]
	inc eax
	add edi, 4
	mov [esp+88h], eax
	cmp eax, 2
	jge loc_404C11
	cmp eax, 1
	jnz loc_4047CB
	mov esi, [esp+74h]
	jmp loc_4047CB

loc_40497E:
	mov eax, [esp+78h]
	mov eax, [eax]
	sar eax, 10h
	call sub_41B6B0
	mov [esp+6Ch], eax
	mov [esp+68h], eax
	mov eax, [esp+78h]
	cmp byte [eax+9], 0Dh
	jnz loc_40478A
	mov eax, [eax]
	mov ecx, 1
	sar eax, 10h
	xor edx, edx
	call sub_41B6D0
	mov dl, byte [byte_512DA8]
	sub ecx, edx
	mov [esp+ecx*4+68h], eax
	jmp loc_40478A

loc_4049C4:
	mov ebx, 6
	mov ecx, 42h
	mov [esp], ebx
	mov [esp+4], ecx
	jmp loc_4047A9

loc_4049DA:
	mov eax, [esp+4]
	mov [esp+0A8h], eax
	fild dword [esp+0A8h]
	mov eax, [esp]
	fld st0
	mov [esp+0A8h], eax
	fmul qword [dbl_4C8114]
	fild dword [esp+0A8h]
	fld st0
	fmul qword [dbl_4C811C]
	fxch st2
	fstp st3
	fxch st2
	call __CHP
	fistp dword [esp+4]
	fstp st1
	call __CHP
	fistp dword [esp]
	jmp loc_4047B6

loc_404A2B:
	jbe loc_404AB4
	cmp edx, 4
	jnz loc_404BE1
	mov eax, [esp+edi+66h]
	sar eax, 10h
	push eax
	mov eax, [esp+92h]
	sar eax, 10h
	movsx edx, si
	mov [esp+74h], eax
	mov eax, [esp+8Eh]
	push 3
	sar eax, 10h
	mov ecx, [esp+78h]
	mov [esp+0B0h], eax
	mov eax, 120h
	mov ebx, [esp+0B0h]
	call sub_41B710
	call sub_4054E0
	lea edx, [esp+8]
	mov eax, [esp+84h]
	call sub_404C20
	mov eax, [esp+edi+66h]
	sar eax, 10h
	mov esi, [esp+0A4h]
	push eax
	mov ecx, [esp+74h]
	mov ebx, [esp+0ACh]
	push 3
	movsx edx, si
	jmp loc_40493A

loc_404AB4:
	mov eax, [esp+edi+66h]
	sar eax, 10h
	push eax
	mov eax, [esp+92h]
	sar eax, 10h
	movsx edx, si
	mov [esp+0A0h], eax
	mov eax, [esp+8Eh]
	push 3
	sar eax, 10h
	mov ecx, [esp+0A4h]
	mov [esp+0A8h], eax
	mov eax, 121h
	mov ebx, [esp+0A8h]
	call sub_41B710
	call sub_4054E0
	mov eax, 121h
	mov edx, [esp]
	call sub_41B710
	call sub_482424
	add eax, esi
	add edx, eax
	mov [esp+80h], edx
	mov eax, [esp+7Ch]
	inc eax
	push eax
	push aD_4 ; "%d"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+edi+66h]
	sar eax, 10h
	mov edx, [esp+7Eh]
	push eax
	mov ecx, [esp+0A0h]
	mov ebx, [esp+0A4h]
	push 3
	sar edx, 10h
	lea eax, [esp+10h]
	call sub_4054E0
	mov eax, [esp+edi+66h]
	sar eax, 10h
	mov esi, [esp+0A4h]
	push eax
	mov ecx, [esp+0A0h]
	mov ebx, [esp+0A4h]
	push 3
	mov eax, 122h
	movsx edx, si
	call sub_41B710
	call sub_4054E0
	mov eax, 122h
	mov ecx, [esp]
	call sub_41B710
	call sub_482424
	add eax, ecx
	add esi, eax
	mov eax, [esp+84h]
	add eax, 41h
	push eax
	push aC_0 ; "%c"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+edi+66h]
	sar eax, 10h
	push eax
	movsx edx, si
	mov ecx, [esp+0A0h]
	push 3
	mov ebx, [esp+0A8h]
	jmp loc_40493A

loc_404BE1:
	mov ecx, [esp+8Eh]
	mov eax, [esp+edi+66h]
	mov ebx, [esp+8Ah]
	sar eax, 10h
	movsx edx, si
	push eax
	sar ecx, 10h
	push 3
	mov eax, 136h
	sar ebx, 10h
	call sub_41B710
	jmp loc_40493E

loc_404C11:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret
;sub_404740 endp

sub_404C20: ;SUBROUTINE
	push ecx
	mov ecx, eax
	and eax, 0FFFFh
	cmp eax, 39h
	jnz loc_404C5B
	mov eax, 124h

loc_404C32:
	push edi
	push esi
	call sub_41B710
	mov esi, eax
	mov edi, edx
	push edi

loc_404C3E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_404C56
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_404C3E

loc_404C56:
	pop edi
	pop esi
	pop edi
	pop ecx
	ret

loc_404C5B:
	cmp eax, 1Ch
	jnz loc_404C67
	mov eax, 125h
	jmp loc_404C32

loc_404C67:
	cmp eax, 52h
	jnz loc_404C73
	mov eax, 126h
	jmp loc_404C32

loc_404C73:
	cmp eax, 53h
	jnz loc_404C7F
	mov eax, 127h
	jmp loc_404C32

loc_404C7F:
	cmp eax, 47h
	jnz loc_404C8B
	mov eax, 128h
	jmp loc_404C32

loc_404C8B:
	cmp eax, 4Fh
	jnz loc_404C97
	mov eax, 129h
	jmp loc_404C32

loc_404C97:
	cmp eax, 49h
	jnz loc_404CA3
	mov eax, 12Ah
	jmp loc_404C32

loc_404CA3:
	cmp eax, 51h
	jnz loc_404CAF
	mov eax, 12Bh
	jmp loc_404C32

loc_404CAF:
	cmp eax, 48h
	jnz loc_404CBE
	mov eax, 12Ch
	jmp loc_404C32

loc_404CBE:
	cmp eax, 50h
	jnz loc_404CCD
	mov eax, 12Dh
	jmp loc_404C32

loc_404CCD:
	cmp eax, 4Bh
	jnz loc_404CDC
	mov eax, 12Eh
	jmp loc_404C32

loc_404CDC:
	cmp eax, 4Dh
	jnz loc_404CEB
	mov eax, 12Fh
	jmp loc_404C32

loc_404CEB:
	cmp eax, 0Eh
	jnz loc_404CFA
	mov eax, 130h
	jmp loc_404C32

loc_404CFA:
	cmp eax, 0Fh
	jnz loc_404D09
	mov eax, 131h
	jmp loc_404C32

loc_404D09:
	cmp eax, 4Ch
	jnz loc_404D18
	mov eax, 132h
	jmp loc_404C32

loc_404D18:
	mov eax, ecx
	sar eax, 10h
	call toupper_
	push eax
	push aC_0 ; "%c"
	push edx
	call sprintf_
	add esp, 0Ch
	pop ecx
	ret
;sub_404C20 endp

sub_404D40: ;SUBROUTINE
	and eax, 0FFh
	ret
;sub_404D40 endp

sub_404D50: ;SUBROUTINE
	shl edx, 8
	movsx eax, al
	xor dl, dl
	add eax, edx
	ret
;sub_404D50 endp

sub_404D60: ;SUBROUTINE
	cmp word [word_4D231A], 0
	jnz loc_404D6D
	xor eax, eax
	ret

loc_404D6D:
	call sub_405A60
	test eax, eax
	jnz loc_404D84
	mov eax, 1
	call sub_486550
	test eax, eax
	jz loc_404D8A

loc_404D84:
	mov eax, 1
	ret

loc_404D8A:
	mov eax, 39h
	call sub_486550
	test eax, eax
	jnz loc_404D84
	mov eax, 1Ch
	call sub_486550
	test eax, eax
	jnz loc_404D84
	mov eax, 48h
	call sub_486550
	test eax, eax
	jnz loc_404D84
	mov eax, 50h
	call sub_486550
	test eax, eax
	jnz loc_404D84
	mov eax, 4Bh
	call sub_486550
	test eax, eax
	jnz loc_404D84
	mov eax, 4Dh
	call sub_486550
	test eax, eax
	jnz loc_404D84
	cmp dword [dword_4D4C88], 0
	jnz loc_404D84
	ret
;sub_404D60 endp

off_404DF0: dd loc_404EF1
	dd loc_404EFF ; jump table for switch statement
	dd loc_404F1D
	dd loc_404F53
off_404E00: dd loc_404EB4
	dd loc_404FD8
	dd loc_405018
	dd loc_405056
	dd loc_405095
	dd loc_4050CC
	dd loc_4050FA
	dd loc_40512F
	dd loc_404EDA
	dd loc_40518A
	dd loc_40515C
	dd loc_4051B7
	dd loc_4051E5
	dd loc_405221
	dd loc_405263
	dd loc_4052A3
	dd loc_4052E5

sub_404E44: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, eax
	test eax, eax
	jz loc_404EE3
	mov ah, byte [byte_512DA9]
	test ah, ah
	jz loc_404E67
	cmp ah, 1
	jnz loc_404EE3

loc_404E67:
	cmp byte [byte_512DAA], 0
	jnz loc_404EE3
	mov eax, ebp
	call toupper_
	mov edx, dword [dword_4D219C]
	mov ebp, eax
	cmp edx, 3 ; switch 4 cases
	jbe loc_404EEA

loc_404E88:
	mov esi, dword_4E50D0 ; jumptable 00404EEA default case
	xor ecx, ecx

loc_404E8F:
	lea edi, 0[ecx*4]
	mov edx, esi
	mov eax, ebp
	mov ebx, dword off_4D2158[edi]
	call sub_405320
	test eax, eax
	jz loc_404EDA
	cmp ecx, 10h
	ja loc_404EDA
	jmp off_404E00[edi]

loc_404EB4:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	cmp byte [byte_512DBD], 3
	jnb loc_404EDA
	mov byte [byte_512DBD], 3
	mov byte [byte_512DBF], 0Eh

loc_404EDA:
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F

loc_404EE3:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_404EEA:
	jmp off_404DF0[edx*4] ; switch jump

loc_404EF1:
	cmp eax, 47h ; jumptable 00404EEA case 0
	jnz loc_404E88 ; jumptable 00404EEA default case
	inc edx
	mov dword [dword_4D219C], edx
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404EFF:
	cmp eax, 4Fh ; jumptable 00404EEA case 1
	jnz loc_404F10
	inc edx
	mov dword [dword_4D219C], edx
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404F10:
	xor ecx, ecx
	mov dword [dword_4D219C], ecx
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404F1D:
	cmp eax, 30h ; jumptable 00404EEA case 2
	jl loc_404F46
	cmp eax, 39h
	jg loc_404F46
	lea ecx, [eax-30h]
	lea eax, 0[ecx*4]
	add eax, ecx
	inc edx
	add eax, eax
	mov dword [dword_4D219C], edx
	mov dword [dword_4D21A0], eax
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404F46:
	xor edx, edx
	mov dword [dword_4D219C], edx
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404F53:
	cmp eax, 30h ; jumptable 00404EEA case 3
	jl loc_404F9B
	cmp eax, 39h
	jg loc_404F9B
	mov edx, dword [dword_4D21A0]
	sub eax, 30h
	add edx, eax
	mov dword [dword_4D21A0], edx
	cmp edx, 16h
	jnz loc_404FA7

loc_404F73:
	mov dword [dword_4D21A0], 14h

loc_404F7D:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov al, byte [dword_4D21A0]
	mov byte [byte_4D1FE8], al
	mov byte [byte_4D1FE9], al

loc_404F9B:
	xor eax, eax
	mov dword [dword_4D219C], eax
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404FA7:
	cmp edx, 18h
	jz loc_404F73
	cmp edx, 19h
	jz loc_404F73
	cmp edx, 1Dh
	jz loc_404F73
	cmp edx, 1Eh
	jz loc_404F73
	cmp edx, 20h
	jz loc_404F73
	cmp edx, 12h
	jz loc_404F73
	jl loc_404F9B
	cmp edx, 33h
	jle loc_404F7D
	xor eax, eax
	mov dword [dword_4D219C], eax
	jmp loc_404E88 ; jumptable 00404EEA default case

loc_404FD8:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	cmp byte [byte_512DBD], 2
	jnb loc_404EDA
	mov dl, 0Dh
	mov ah, 2
	mov byte [byte_512DBF], dl
	mov byte [byte_512DBD], ah
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_405018:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	cmp byte [byte_512DBD], 1
	jnb loc_404EDA
	mov byte [byte_512DBD], 1
	mov byte [byte_512DBF], 0Ch
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_405056:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov ah, byte [byte_512DBC]
	mov dl, 7
	or ah, 1
	mov byte [byte_512DB0], dl
	mov byte [byte_512DBC], ah
	call sub_40EB20
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_405095:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov eax, 34Eh
	call sub_402CD0
	mov dword [dword_4E5508], 1
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4050CC:
	mov edx, 7Fh
	mov eax, 5
	mov edi, 1
	call sub_4423F0
	mov dword [dword_4E5514], edi
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4050FA:
	mov edx, 7Fh
	mov eax, 5
	mov ebx, 1
	call sub_4423F0
	mov al, 1
	mov dword [dword_4D209C], ebx
	mov byte [byte_512DBE], al
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40512F:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov dword [dword_4E550C], 1
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40515C:
	mov edx, 7Fh
	mov eax, 5
	mov edi, 1
	call sub_4423F0
	mov dword [dword_4E5504], edi
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40518A:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov dword [dword_4E5500], 1
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4051B7:
	mov edx, 7Fh
	mov eax, 5
	mov ebx, 1
	call sub_4423F0
	mov dword [dword_4E54F8], ebx
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4051E5:
	mov edx, 7Fh
	mov eax, 5
	mov bl, 2Bh
	call sub_4423F0
	mov edx, 1
	mov byte [byte_4D1FE8], bl
	mov byte [byte_4D1FE9], bl
	mov dword [dword_4E54F8], edx
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_405221:
	mov edx, 7Fh
	mov eax, 5
	mov edi, 1
	call sub_4423F0
	mov dl, 2Ah
	mov dword [dword_4E5508], edi
	mov dword [dword_4E54F8], edi
	mov byte [byte_4D1FE8], dl
	mov byte [byte_4D1FE9], dl
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_405263:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov edx, 1
	mov al, 14h
	mov dword [dword_4E5508], edx
	mov byte [byte_4D1FE8], al
	mov byte [byte_4D1FE9], al
	mov dword [dword_4E54F8], edx
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4052A3:
	mov edx, 7Fh
	mov eax, 5
	mov edi, 1
	mov bl, 23h
	call sub_4423F0
	mov dword [dword_4E5508], edi
	mov byte [byte_4D1FE8], bl
	mov byte [byte_4D1FE9], bl
	mov dword [dword_4E54F8], edi
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4052E5:
	mov edx, 7Fh
	mov eax, 5
	mov ebx, 1
	call sub_4423F0
	mov dword [dword_4E54FC], ebx
	inc ecx
	add esi, 4
	cmp ecx, 11h
	jl loc_404E8F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_404E44 endp

sub_405320: ;SUBROUTINE
	push ecx
	call toupper_
	lea ecx, [eax+9]
	mov eax, [edx]
	mov al, [ebx+eax]
	and eax, 0FFh
	cmp ecx, eax
	jnz loc_40534A
	mov ecx, [edx]
	inc ecx
	add ebx, ecx
	mov [edx], ecx
	cmp byte [ebx], 0
	jnz loc_405350
	mov eax, 1
	pop ecx
	ret

loc_40534A:
	mov dword [edx], 0

loc_405350:
	xor eax, eax
	pop ecx
	ret
;sub_405320 endp

sub_4053A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	mov [esp+0Ch], dx
	mov [esp+8], bx
	movsx eax, cx
	call sub_4056F0
	call sub_4871F0
	mov [esp], eax
	fild dword [esp]
	fmul qword [dbl_4C818C]
	mov edx, [esp+24h]
	mov edi, ebp
	call __CHP
	fistp dword [esp+4]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edi, ecx
	mov eax, ebp
	cmp dx, 1
	jz loc_4053F4
	cmp dx, 4
	jnz loc_405419

loc_4053F4:
	mov edx, [esp+0Ch]
	call sub_482424

loc_4053FD:
	sub edx, eax
	mov [esp+0Ch], dx

loc_405404:
	xor ecx, ecx

loc_405406:
	movsx eax, di
	movsx esi, cx
	cmp esi, eax
	jl loc_40543C
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_405419:
	cmp dx, 2
	jz loc_405425
	cmp dx, 5
	jnz loc_405404

loc_405425:
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+0Ah]
	sar edx, 10h
	jmp loc_4053FD

loc_40543C:
	mov ebx, 1
	lea eax, [esp+10h]
	mov edx, ebp
	call strncpy_
	lea eax, [esi+ebp]
	mov al, [eax]
	and eax, 0FFh
	push eax
	push aC ; "%c "
	lea eax, [esp+18h]
	push eax
	call sprintf_
	add esp, 0Ch
	cmp word [esp+24h], 2
	jle loc_40549D
	imul esi, [esp+4]
	mov eax, 8
	call sub_405D10
	mov eax, [esp+6]
	sar eax, 10h
	add eax, esi
	mov edx, [esp+0Ah]
	lea ebx, [eax+1]
	sar edx, 10h
	lea eax, [esp+10h]
	inc edx
	call sub_405CF0

loc_40549D:
	mov eax, [esp+26h]
	sar eax, 10h
	mov eax, dword dword_4D20B0[eax*4]
	mov ebx, [esp+4]
	call sub_405D10
	movsx eax, cx
	imul eax, ebx
	mov ebx, [esp+6]
	mov edx, [esp+0Ah]
	sar ebx, 10h
	sar edx, 10h
	add ebx, eax
	lea eax, [esp+10h]
	inc ecx
	call sub_405CF0
	jmp loc_405406
;sub_4053A0 endp

sub_4054E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov esi, edx
	mov edi, ebx
	mov ebx, [esp+10h]
	movsx eax, cx
	call sub_4056F0
	mov ecx, ebp
	cmp bx, 1
	jz loc_405503
	cmp bx, 4
	jnz loc_405538

loc_405503:
	mov eax, ecx
	call sub_482424
	sub esi, eax

loc_40550C:
	cmp bx, 2
	jg loc_40555D

loc_405512:
	mov eax, [esp+12h]
	sar eax, 10h
	movsx ebx, di
	mov eax, dword dword_4D20B0[eax*4]
	movsx edx, si
	call sub_405D10
	mov eax, ecx
	call sub_405CF0
	pop ebp
	pop edi
	pop esi
	ret 8

loc_405538:
	cmp bx, 2
	jz loc_405544
	cmp bx, 5
	jnz loc_40550C

loc_405544:
	mov eax, ecx
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	movsx edx, si
	sub edx, eax
	mov esi, edx
	jmp loc_40550C

loc_40555D:
	mov eax, 8
	call sub_405D10
	movsx ebx, di
	movsx edx, si
	inc ebx
	inc edx
	mov eax, ecx
	call sub_405CF0
	jmp loc_405512
;sub_4054E0 endp

sub_405580: ;SUBROUTINE
	push esi
	push edi
	sub esp, 10h
	mov [esp+0Ch], ax
	mov esi, edx
	mov [esp+4], bx
	mov edi, ecx
	mov ecx, [esp+0Ah]
	sar ecx, 10h
	mov eax, ecx
	call sub_41B6F0
	mov ebx, eax
	mov eax, ecx
	call sub_41B690
	mov edx, eax
	mov [esp+8], eax
	xor eax, eax
	mov [esp], ax
	movsx eax, bx
	call sub_4056F0
	mov eax, ecx
	call sub_41B710
	mov ecx, eax
	cmp dx, 1
	jz loc_4055D3
	cmp dx, 4
	jnz loc_40563A

loc_4055D3:
	mov eax, ecx
	call sub_482424
	sub esi, eax

loc_4055DC:
	cmp word [esp+8], 2
	jle loc_405601
	mov eax, 8
	mov ebx, [esp+2]
	call sub_405D10
	movsx edx, si
	sar ebx, 10h
	inc edx
	mov eax, ecx
	inc ebx
	call sub_405CF0

loc_405601:
	cmp di, 1
	jnb loc_405662
	test di, di
	jz loc_405688

loc_405610:
	mov eax, [esp-2]
	mov ebx, [esp+2]
	sar eax, 10h
	movsx edx, si
	mov eax, dword dword_4D20B0[eax*4]
	sar ebx, 10h
	call sub_405D10
	mov eax, ecx
	call sub_405CF0
	add esp, 10h
	pop edi
	pop esi
	ret

loc_40563A:
	cmp dx, 2
	jz loc_405646
	cmp dx, 5
	jnz loc_4055DC

loc_405646:
	mov eax, ecx
	call sub_482424
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	movsx edx, si
	sub edx, eax
	mov esi, edx
	jmp loc_4055DC

loc_405662:
	jbe loc_405676
	cmp di, 2
	jnz loc_405610
	mov ax, word [dword_4D20D4]
	mov [esp], ax
	jmp loc_405610

loc_405676:
	mov eax, [esp+0Ah]
	sar eax, 10h
	call sub_41B6B0
	mov [esp], ax
	jmp loc_405610

loc_405688:
	mov eax, [esp+0Ah]
	sar eax, 10h
	call sub_41B6D0
	mov [esp], ax
	jmp loc_405610
;sub_405580 endp

sub_4056A0: ;SUBROUTINE
	mov dword [dword_4D20D4], eax
	ret
;sub_4056A0 endp

sub_4056B0: ;SUBROUTINE
	mov eax, dword [dword_4E5118]
	call sub_4848FC
	mov eax, dword [dword_4E5114]
	call sub_4848FC
	mov eax, dword [dword_4E54A8]
	call sub_4848FC
	mov eax, dword [dword_4E54A4]
	call sub_4848FC
	mov eax, dword [dword_4E511C]
	jmp sub_4848FC
;sub_4056B0 endp

sub_4056F0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov eax, dword [dword_4E54A8+2]
	sar eax, 10h
	cmp eax, edx
	jz loc_405728
	mov ecx, dword [dword_4D20A0]
	mov word [dword_4E54AC], dx
	test ecx, ecx
	jnz loc_40572B

loc_405711:
	cmp edx, 10h
	jnb loc_405737
	cmp edx, 0Dh
	jnb loc_405751

loc_40571B:
	cmp dword [dword_4D20A0], 0
	jnz loc_4057B0

loc_405728:
	pop edx
	pop ecx
	ret

loc_40572B:
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	jmp loc_405711

loc_405737:
	jbe loc_405784
	cmp edx, 12h
	jb loc_40571B
	jbe loc_40579A
	cmp edx, 24h
	jnz loc_40571B
	mov eax, dword_4E53F0
	call sub_4871C8
	jmp loc_40571B

loc_405751:
	jbe loc_40576E
	cmp edx, 0Eh
	jnz loc_40571B
	mov eax, dword_4E51D4
	call sub_4871C8
	cmp dword [dword_4D20A0], 0
	jnz loc_4057B0
	pop edx
	pop ecx
	ret

loc_40576E:
	mov eax, dword_4E5288
	call sub_4871C8
	cmp dword [dword_4D20A0], 0
	jnz loc_4057B0
	pop edx
	pop ecx
	ret

loc_405784:
	mov eax, dword_4E5120
	call sub_4871C8
	cmp dword [dword_4D20A0], 0
	jnz loc_4057B0
	pop edx
	pop ecx
	ret

loc_40579A:
	mov eax, dword_4E533C
	call sub_4871C8
	cmp dword [dword_4D20A0], 0
	jnz loc_4057B0
	pop edx
	pop ecx
	ret

loc_4057B0:
	call sub_4824BC
	pop edx
	pop ecx
	ret
;sub_4056F0 endp

sub_4057C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 100h
	mov ecx, dword [dword_5134B8]
	push ecx
	push aSswiss13_ffn ; "%sswiss13.ffn"
	lea eax, [esp+8]
	xor edx, edx
	push eax
	mov dword [dword_4D2098], edx
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov dword [dword_4E54A8], eax
	call sub_487060
	mov eax, dword_4E5288
	call sub_4871B0
	mov ebx, dword [dword_5134B8]
	push ebx
	push aSfixed14_ffn ; "%sfixed14.ffn"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov dword [dword_4E5118], eax
	call sub_487060
	mov eax, dword_4E51D4
	call sub_4871B0
	mov esi, dword [dword_5134B8]
	push esi
	push aSswiss16_ffn ; "%sswiss16.ffn"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov dword [dword_4E5114], eax
	call sub_487060
	mov eax, dword_4E5120
	call sub_4871B0
	mov edi, dword [dword_5134B8]
	push edi
	push aSswiss18_ffn ; "%sswiss18.ffn"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov dword [dword_4E54A4], eax
	call sub_487060
	mov eax, dword_4E533C
	call sub_4871B0
	mov ebp, dword [dword_5134B8]
	push ebp
	push aSswiss36_ffn ; "%sswiss36.ffn"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov dword [dword_4E511C], eax
	call sub_487060
	mov eax, dword_4E53F0
	mov edx, 0FFFFFFFFh
	call sub_4871B0
	mov word [dword_4E54AC], dx
	add esp, 100h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4057C0 endp

sub_405910: ;SUBROUTINE
	xor eax, eax
	call sub_403550
	call sub_405A30
	call sub_424280
	test eax, eax
	jz loc_40592B
	mov eax, 0Dh
	ret

loc_40592B:
	push edx
	call sub_482030
	and eax, 0FFFFh
	jnz loc_405958
	mov edx, dword [dword_5637F4]
	cmp edx, dword [dword_4D20A8]
	jle loc_405958
	mov eax, dword [dword_5637F4]
	add eax, 28h
	mov dword [dword_4D20A8], eax
	call sub_405A60

loc_405958:
	pop edx
	ret
;sub_405910 endp

sub_405960: ;SUBROUTINE
	push edx
	call sub_405A30
	xor eax, eax
	call sub_403550
	call sub_424280
	test eax, eax
	jz loc_40597D
	mov eax, 0Dh
	pop edx
	ret

loc_40597D:
	call sub_482030
	mov edx, eax
	xor dx, ax
	shr edx, 10h
	cmp edx, 44h
	jz loc_4059E4
	and eax, 0FFFFh
	mov edx, eax
	call sub_404E44
	test edx, edx
	jnz loc_4059C0
	mov eax, dword [dword_5637F4]
	cmp eax, dword [dword_4D20A8]
	jle loc_4059C0
	mov eax, dword [dword_5637F4]
	add eax, 1Eh
	mov dword [dword_4D20A8], eax
	call sub_405A60
	mov edx, eax

loc_4059C0:
	call sub_482030
	and eax, 0FFFFh
	jz loc_4059E0

loc_4059CC:
	call sub_404E44
	call sub_482030
	and eax, 0FFFFh
	jnz loc_4059CC

loc_4059E0:
	mov eax, edx
	pop edx
	ret

loc_4059E4:
	mov eax, 36h
	call sub_486550
	test eax, eax
	jz loc_405A05

loc_4059F2:
	mov eax, 1
	call sub_428910
	call sub_486F28
	xor eax, eax
	pop edx
	ret

loc_405A05:
	mov eax, 2Ah
	call sub_486550
	test eax, eax
	jnz loc_4059F2
	call sub_428910
	call sub_486F28
	xor eax, eax
	pop edx
	ret
;sub_405960 endp

sub_405A30: ;SUBROUTINE
	mov eax, 38h
	call sub_486550
	test eax, eax
	jnz loc_405A3F

locret_405A3E:
	ret

loc_405A3F:
	mov eax, 19h
	call sub_486550
	test eax, eax
	jz locret_405A3E

	push edx
	sub esp, 50h
	mov edx, dword [dword_4D9668]
	inc edx
	push edx
	push aScn04d_tga ; "scn%04d.tga"
	lea eax, [esp+8]
	push eax
	mov dword [dword_4D9668], edx
	call sprintf_
	add esp, 0Ch
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, esp
	call sub_487538
	call sub_4824BC
	add esp, 50h
	pop edx
	ret
;sub_405A30 endp

sub_405A60: ;SUBROUTINE
	push ebx
	mov eax, 0Fh
	call sub_486550
	xor ebx, ebx
	test eax, eax
	jnz loc_405A99
	push edi
	push esi
	push edx
	push ecx
	xor esi, esi
	xor ecx, ecx
	xor edi, edi

loc_405A7B:
	cmp di, word (dword_512F34+2)[esi]
	jnz loc_405A9D

loc_405A84:
	inc ecx
	add esi, 2
	cmp ecx, 2
	jge loc_405A91
	test ebx, ebx
	jz loc_405A7B

loc_405A91:
	mov eax, ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	pop ebx
	ret

loc_405A99:
	xor eax, eax
	pop ebx
	ret

loc_405A9D:
	mov eax, ecx
	call sub_477B70
	test eax, eax
	jz loc_405AAF
	mov ebx, 0Dh
	jmp loc_405A84

loc_405AAF:
	test byte word_512F3A[esi], 1
	jz loc_405AE4
	mov edx, edi
	mov eax, ecx
	call sub_477BA0
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	cmp eax, 0C0h
	jl loc_405ADA
	mov ebx, 4D00h

loc_405ADA:
	cmp eax, 40h
	jg loc_405AE4
	mov ebx, 4B00h

loc_405AE4:
	test byte word_512F3A[esi], 2
	jz loc_405A84
	mov edx, 1
	mov eax, ecx
	call sub_477BA0
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	cmp eax, 0C0h
	jl loc_405B12
	mov ebx, 5000h

loc_405B12:
	cmp eax, 40h
	jg loc_405A84
	mov ebx, 4800h
	jmp loc_405A84
;sub_405A60 endp

sub_405B30: ;SUBROUTINE
	push esi
	push edi
	mov edi, edx
	mov esi, dword [dword_4D40B8]
	mov edx, eax
	mov eax, esi
	call sub_482EA8
	test eax, eax
	jnz loc_405B4A
	pop edi
	pop esi
	ret

loc_405B4A:
	movsx edx, di
	call sub_405B60
	pop edi
	pop esi
	ret
;sub_405B30 endp

sub_405B60: ;SUBROUTINE
	push esi
	push edi
	mov esi, ebx
	mov ebx, ecx
	mov ecx, edx
	and ch, 1
	movsx ecx, cx
	mov edi, ecx
	not edi
	and edx, edi
	cmp dx, 1800h
	jnb loc_405BA1
	cmp dx, 0C00h
	jnb loc_405BFF
	cmp dx, 400h
	jb loc_405B9E
	jbe loc_405C1B
	cmp dx, 800h
	jz loc_405C23

loc_405B9E:
	pop edi
	pop esi
	ret

loc_405BA1:
	jbe loc_405C3F
	cmp dx, 2400h
	jnb loc_405BCC
	cmp dx, 1C00h
	jb loc_405B9E
	jbe loc_405C49
	cmp dx, 2000h
	jnz loc_405B9E
	mov edx, esi
	call sub_482D7C
	pop edi
	pop esi
	ret

loc_405BCC:
	jbe loc_405C53
	cmp dx, 2C00h
	jnb loc_405BE8
	cmp dx, 2800h
	jnz loc_405B9E
	call sub_483384
	pop edi
	pop esi
	ret

loc_405BE8:
	jbe loc_405C5D
	cmp dx, 3000h
	jnz loc_405B9E
	mov edx, esi
	call sub_48330C
	pop edi
	pop esi
	ret

loc_405BFF:
	jbe loc_405C2D
	cmp dx, 1000h
	jb loc_405B9E
	jbe loc_405C37
	cmp dx, 1400h
	jnz loc_405B9E
	mov edx, esi
	call sub_486D2C
	pop edi
	pop esi
	ret

loc_405C1B:
	call sub_483470
	pop edi
	pop esi
	ret

loc_405C23:
	mov edx, esi
	call sub_483494
	pop edi
	pop esi
	ret

loc_405C2D:
	mov edx, esi
	call sub_483460
	pop edi
	pop esi
	ret

loc_405C37:
	call sub_486D10
	pop edi
	pop esi
	ret

loc_405C3F:
	mov edx, esi
	call sub_486C60
	pop edi
	pop esi
	ret

loc_405C49:
	mov edx, ecx
	call sub_482D58
	pop edi
	pop esi
	ret

loc_405C53:
	mov edx, esi
	call sub_482C78
	pop edi
	pop esi
	ret

loc_405C5D:
	mov edx, esi
	call sub_4833A0
	pop edi
	pop esi
	ret
;sub_405B60 endp

sub_405C70: ;SUBROUTINE
	push edx
	xor edx, edx
	call sub_428770
	mov dword [dword_4D2094], edx
	pop edx
	ret
;sub_405C70 endp

sub_405CF0: ;SUBROUTINE
	cmp dword [dword_4D20A0], 0
	jz sub_486A30
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov edi, edx
	mov [esp+4], ebx
	mov eax, dword [dword_4D20A4]
	or eax, 0FF000000h
	mov [esp], eax
	cmp byte [esi], 0
	jz loc_426C27

loc_426BC1:
	mov ebp, dword [dword_4E54AC]
	mov al, [esi]
	cmp ebp, 24h
	jnz loc_426C3E
	cmp al, 20h
	jnz loc_426C2F
	mov ah, 0FAh

loc_426BD8:
	xor edx, edx
	mov dl, ah
	xor ebx, ebx
	mov bl, byte byte_4EC3AC[edx]
	and eax, 0FFh
	push eax
	mov ecx, [esp+4]
	push ecx
	movzx ebp, byte byte_4EC2B0[edx]
	push 33h
	xor eax, eax
	mov ecx, edi
	push ebx
	mov ebx, [esp+14h]
	mov al, byte byte_4EC0B8[edx]
	push ebx
	xor ebx, ebx
	mov eax, dword dword_4EC4B0[eax*4]
	mov bl, byte byte_4EC1B4[edx]
	mov edx, ebp
	inc esi
	call sub_426C50
	mov dl, [esi]
	add edi, eax
	test dl, dl
	jnz loc_426BC1

loc_426C27:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_426C2F:
	cmp al, 0D6h
	jnz loc_426C37
	mov ah, 0FBh
	jmp loc_426BD8

loc_426C37:
	mov ah, al
	add ah, 9Fh
	jmp loc_426BD8

loc_426C3E:
	mov ah, al
	sub ah, 20h
	jmp loc_426BD8
;sub_405CF0 endp

sub_405D10: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp dword [dword_4D20A0], 0
	jz loc_405D23
	mov dword [dword_4D20A4], eax
	pop edx
	ret

loc_405D23:
	push ecx
	xor eax, eax
	call sub_48266C
	mov ecx, eax
	mov eax, edx
	mov edx, ecx
	call sub_48266C
	call sub_486560
	pop ecx
	pop edx
	ret
;sub_405D10 endp

dword_405D7C: dd 6050200h, 0D0B0A09h, 1211100Fh, 17161513h
dword_405D8C: dd 0
	dd 2, 4, 5, 3, 6, 7, 8, 0
off_405DB0: dd loc_406099
	dd loc_406962 ; jump table for switch statement
	dd loc_406C54
	dd loc_406C54
	dd loc_406C54
off_405DC4: dd loc_406107
	dd loc_406F7C ; jump table for switch statement
	dd loc_406F8C
	dd loc_406107

sub_405DD4: ;SUBROUTINE
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 9Ch
	mov [esp+68h], eax
	mov edx, 18h
	mov eax, 1E00h
	call sub_463930
	xor eax, eax

loc_405DF3:
	add eax, 4
	xor edx, edx
	mov dword dword_4E54B4[eax], edx
	cmp eax, 40h
	jnz loc_405DF3
	push esi
	push ebx
	mov eax, dword [dword_512D9E]
	sar eax, 10h
	call sub_4880DA
	call sub_403B20
	mov ah, byte [byte_512DA9]
	test ah, ah
	jz loc_406888
	cmp ah, 1
	jz loc_406888

loc_405E2E:
	xor bh, bh
	xor ecx, ecx
	mov byte [byte_4D1FE9], bh
	mov dword [dword_4E5508], ecx
	mov dword [dword_4E5514], ecx
	mov dword [dword_4E5510], ecx
	mov dword [dword_4E550C], ecx
	mov dword [dword_4E5504], ecx
	mov dword [dword_4E5500], ecx
	mov dword [dword_4E54F8], ecx
	mov dword [dword_4E54FC], ecx
	mov byte [byte_4D1FE8], bh

loc_405E6E:
	mov edx, 10000h
	mov eax, [esp+70h]
	call sub_488168
	mov eax, [esp+70h]
	lea ecx, [eax+4]
	mov dword [eax], 7
	mov dword [ecx], 1
	add ecx, 4
	mov dword [ecx], 0Ch
	add ecx, 4
	mov eax, dword [dword_512D9E]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 0Eh
	add ecx, 4
	mov dword [ecx], 0
	add ecx, 4
	mov dword [ecx], 0Fh
	add ecx, 4
	mov dword [ecx], 3
	add ecx, 4
	mov dword [ecx], 13h
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DFB]
	mov [ecx-4], eax
	mov dword [ecx], 1Eh
	xor eax, eax
	mov al, byte [byte_512DFA]
	mov [ecx+4], eax
	add ecx, 4
	mov al, byte [byte_512DA9]
	add ecx, 4
	cmp al, 1
	jnz loc_4068AB
	cmp byte [byte_512DAA], 2
	jnz loc_4068AB
	xor eax, eax
	call sub_4072D0
	test ax, ax
	jz loc_4068A4
	mov eax, 1
	call sub_4072D0
	test ax, ax
	jz loc_4068A4
	mov eax, 1

loc_405F3B:
	mov dword [ecx], 6
	add ecx, 4
	mov [ecx], eax
	lea eax, [ecx+8]
	mov bl, byte [byte_512DAA]
	add ecx, 4
	lea edx, [eax+4]
	cmp bl, 3
	jnz loc_4068B7
	mov dword [ecx], 2
	mov ecx, edx
	mov dword [eax], 0

loc_405F6C:
	lea ebx, [ecx+4]
	lea esi, [ecx+8]
	lea eax, [ecx+0Ch]
	lea edx, [ecx+10h]
	cmp byte [byte_512DAB], 2
	jnz loc_4068CA
	mov dword [ecx], 5
	mov dword [ebx], 1
	mov dword [esi], 21h
	mov ecx, edx
	mov dword [eax], 0

loc_405F9F:
	mov bh, byte [byte_512DAA]
	cmp bh, 2
	jnz loc_4068F1

loc_405FAE:
	mov eax, 1

loc_405FB3:
	mov dword [ecx], 4
	add ecx, 4
	add ecx, 4
	mov [ecx-4], eax
	mov dword [ecx], 9
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DAE]
	mov [ecx-4], eax
	mov dword [ecx], 0Ah
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DB0]
	add ecx, 4
	call sub_407160
	cwde
	mov [ecx-4], eax
	mov dword [ecx], 1Dh
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DB0]
	add ecx, 4
	call sub_41AE70
	mov [ecx-4], eax
	mov dword [ecx], 3
	add ecx, 4
	add ecx, 4
	call sub_407190
	mov [ecx-4], eax
	mov dword [ecx], 1Fh
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DBA]
	mov [ecx-4], eax
	mov dword [ecx], 20h
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512DBB]
	mov [ecx-4], eax
	mov dword [ecx], 22h
	mov bl, byte [byte_512DAA]
	add ecx, 4
	cmp bl, 2
	jnz loc_406929
	cmp byte [byte_512DB0], 0
	jz loc_406929
	mov eax, ecx
	call sub_407310
	nop

loc_40607C:
	mov ecx, eax

loc_406080:
	mov al, byte [byte_512DA9]
	xor edi, edi
	xor esi, esi
	cmp al, 4
	ja loc_4060CC
	and eax, 0FFh ; switch 5 cases
	jmp off_405DB0[eax*4] ; switch jump

loc_406099:
	mov edx, 1 ; jumptable 00406092 case 0
	mov ebx, 9
	mov eax, byte_512E84
	mov [esp+68h], esi
	mov [esp+6Ch], edx
	mov edx, dword_512F4C
	mov esi, 1
	call strncpy_
	mov eax, ecx
	xor edx, edx
	mov edi, esi
	call sub_4073B0
	mov ecx, eax

loc_4060CC:
	mov dword [ecx], 10h
	add ecx, 4
	add ecx, 4
	mov eax, [esp+6Ch]
	mov [ecx-4], eax
	mov eax, [esp+68h]
	mov dword [ecx], 8
	mov [ecx+4], eax
	add ecx, 4
	mov al, byte [byte_512DAA]
	add ecx, 4
	cmp al, 3
	ja loc_406129
	and eax, 0FFh ; switch 4 cases
	jmp off_405DC4[eax*4] ; switch jump

loc_406107:
	cmp byte [byte_512DA9], 1 ; jumptable 00406100 cases 0,3
	jnz loc_406F52
	cmp byte [byte_512DF6], 2
	jnz loc_406F47
	mov dword [esp+74h], 6

loc_406129:
	mov edx, [esp+74h]
	xor eax, eax
	xor ebp, ebp
	mov [esp+78h], eax
	test edx, edx
	jle loc_406209

loc_40613D:
	mov eax, edi
	call sub_4072D0
	test ax, ax
	jz loc_406FB4
	cmp byte [byte_512DAA], 0
	jz loc_406F9C

loc_40615A:
	lea ebx, [esp+34h]
	lea edx, [esp+30h]
	mov eax, ebp
	call sub_407880
	mov ebx, eax

loc_40616B:
	mov eax, ebp
	call sub_4077A0
	mov [esp+34h], eax
	mov edx, eax
	mov eax, ebx
	call sub_4077F0
	mov [esp+30h], eax
	mov dword [ecx], 7Bh
	add ecx, 4
	add ecx, 4
	add ecx, 4
	mov [ecx-8], esi
	mov [ecx-4], ebx
	mov dword [ecx], 7Dh
	add ecx, 4
	add ecx, 4
	mov [ecx-4], esi
	mov dword [ecx], 1
	add ecx, 4
	mov dword [ecx], 7Eh
	add ecx, 4
	add ecx, 4
	mov [ecx-4], esi
	add ecx, 4
	mov eax, [esp+30h]
	mov [ecx-4], eax
	mov dword [ecx], 7Ch
	add ecx, 4
	add ecx, 4
	mov [ecx-4], esi
	mov dword [ecx], 2
	add ecx, 4
	mov dword [ecx], 87h
	add ecx, 4
	add ecx, 4
	mov [ecx-4], esi
	add ecx, 4
	mov eax, [esp+34h]
	inc esi
	mov [ecx-4], eax

loc_4061FB:
	mov ebx, [esp+74h]
	inc ebp
	inc edi
	cmp ebp, ebx
	jl loc_40613D

loc_406209:
	mov eax, [esp+78h]
	mov edi, [esp+74h]
	sub edi, eax
	mov dl, byte [byte_512DF6]
	mov [esp+74h], edi
	cmp dl, 2
	jnz loc_406FD6
	mov dh, byte [byte_512DF5]
	cmp dh, 0Bh
	jbe loc_406FD6
	cmp dh, 0Ch
	jnz loc_406FBD
	mov eax, 0Ch

loc_406243:
	mov dword [ecx], 12h
	add ecx, 4
	add ecx, 4
	mov [ecx-4], eax
	mov eax, [esp+74h]
	mov dword [ecx], 11h
	mov [ecx+4], eax
	add ecx, 4
	mov al, byte [byte_512DF8]
	add ecx, 4
	test al, al
	jnz loc_4063A1
	cmp byte [byte_512DF6], 2
	jz loc_4063A1
	cmp byte [byte_512DAA], 0
	jnz loc_4063A1
	cmp byte [byte_512DB0], 0
	jz loc_4063A1
	call sub_407780
	cmp dword [dword_4E54F8], 0
	jz loc_406FF2
	mov bl, byte [byte_512DF6]
	mov edi, 0Bh
	test bl, bl
	jz loc_4062BF
	mov edi, 0Ah

loc_4062BF:
	cmp byte [byte_512DA9], 1
	jz loc_406FE2

loc_4062CC:
	xor edx, edx

loc_4062CE:
	mov bl, byte [byte_4D1FE8]
	test bl, bl
	jz loc_406FE8
	xor eax, eax
	mov al, bl

loc_4062E0:
	mov [esp+edx+18h], eax
	add edx, 4
	call sub_407830
	mov [esp+edx+4], eax
	cmp edx, 10h
	jnz loc_4062CE

loc_4062F5:
	xor ebx, ebx
	test edi, edi
	jle loc_4063A1

loc_4062FF:
	mov dword [ecx], 7Bh
	add ecx, 4
	mov edx, dword [dword_4E54F8]
	mov [ecx], esi
	add ecx, 4
	test edx, edx
	jz loc_406FFC
	mov ebp, 4
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ebp
	mov edx, [esp+edx*4+18h]

loc_40632D:
	add ecx, 4
	mov [ecx-4], edx
	mov dword [ecx], 7Dh
	add ecx, 4
	add ecx, 4
	mov [ecx-4], esi
	mov dword [ecx], 1
	add ecx, 4
	mov dword [ecx], 7Eh
	add ecx, 4
	mov ebp, dword [dword_4E54F8]
	mov [ecx], esi
	add ecx, 4
	test ebp, ebp
	jz loc_407008
	mov ebp, 4
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ebp
	mov edx, [esp+edx*4+8]

loc_406379:
	add ecx, 4
	mov [ecx-4], edx
	mov dword [ecx], 7Ch
	add ecx, 4
	add ecx, 4
	inc ebx
	mov [ecx-4], esi
	inc esi
	mov dword [ecx], 4
	add ecx, 4
	cmp ebx, edi
	jl loc_4062FF

loc_4063A1:
	mov dword [ecx], 0Dh
	mov [ecx+4], esi
	add ecx, 4
	mov bh, byte [byte_512DA9]
	add ecx, 4
	cmp bh, 1
	jnz loc_407046
	xor eax, eax
	call sub_4072D0
	test ax, ax
	jz loc_407014
	xor edx, edx

loc_4063D1:
	cmp byte [byte_512DBB], 0
	jz loc_40701E
	mov eax, 24h

loc_4063E3:
	mov [ecx], eax
	mov eax, dword dword_512E34[edx*4]
	call sub_4071D0
	mov [ecx+4], eax
	add ecx, 4
	mov bh, byte [byte_512DBB]
	add ecx, 4
	test bh, bh
	jz loc_407028
	mov eax, 23h

loc_40640D:
	mov [ecx], eax
	add ecx, 4
	mov eax, dword dword_512E3C[edx*4]
	add ecx, 4
	call sub_4071D0
	mov [ecx-4], eax
	mov dword [ecx], 25h
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E44[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 26h
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E4C[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 52h
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E54[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 53h
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E5C[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 2Bh
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E64[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 2Ch
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E6C[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 2Dh
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E74[edx*4]
	mov [ecx-4], eax
	mov dword [ecx], 2Eh
	add ecx, 4
	add ecx, 4
	mov eax, dword dword_512E7C[edx*4]
	mov edx, 57h
	mov [ecx-4], eax
	mov eax, 4
	mov dword [ecx], 28h
	call sub_404D50
	mov [ecx+4], eax
	add ecx, 4
	xor eax, eax
	add ecx, 4
	call sub_4072D0
	test ax, ax
	jz loc_40660E
	cmp byte [byte_512DBB], 0
	jz loc_407032
	mov eax, 30h

loc_406514:
	mov [ecx], eax
	mov eax, dword [dword_512E38]
	call sub_4071D0
	mov [ecx+4], eax
	add ecx, 4
	mov ah, byte [byte_512DBB]
	add ecx, 4
	test ah, ah
	jz loc_40703C
	mov eax, 2Fh

loc_40653C:
	mov [ecx], eax
	add ecx, 4
	mov eax, dword [dword_512E40]
	add ecx, 4
	call sub_4071D0
	mov [ecx-4], eax
	mov dword [ecx], 31h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E48]
	mov [ecx-4], eax
	mov dword [ecx], 32h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E50]
	mov [ecx-4], eax
	mov dword [ecx], 54h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E58]
	mov [ecx-4], eax
	mov dword [ecx], 55h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E60]
	mov [ecx-4], eax
	mov dword [ecx], 37h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E68]
	mov [ecx-4], eax
	mov dword [ecx], 38h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E70]
	mov [ecx-4], eax
	mov dword [ecx], 39h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E78]
	mov [ecx-4], eax
	mov dword [ecx], 3Ah
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E80]
	mov edx, 58h
	mov [ecx-4], eax
	mov eax, 4
	mov dword [ecx], 34h

loc_406601:
	add ecx, 4
	call sub_404D50
	mov [ecx], eax
	add ecx, 4

loc_40660E:
	mov edx, 1
	mov dword [ecx], 3Bh
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 48h
	mov dword [ecx], 3Ch
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 50h
	mov dword [ecx], 3Dh
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 4Bh
	mov dword [ecx], 3Eh
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 4Dh
	mov dword [ecx], 3Fh
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov edx, 1Ch
	mov [ecx-4], eax
	mov eax, 4
	mov dword [ecx], 40h
	add ecx, 4
	call sub_404D50
	mov [ecx], eax
	add ecx, 4
	pop ebx
	pop esi
	mov edx, 19h
	mov dword [ecx], 41h
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 0Fh
	mov dword [ecx], 43h
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov edx, 44h
	mov dword [ecx], 44h
	add ecx, 4
	mov eax, 4
	add ecx, 4
	call sub_404D50
	mov [ecx-4], eax
	mov dword [ecx], 15h
	add ecx, 4
	mov dword [ecx], 0
	add ecx, 4
	mov dword [ecx], 16h
	add ecx, 4
	mov dword [ecx], 0
	add ecx, 4
	mov dword [ecx], 17h
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512ED1]
	mov [ecx-4], eax
	mov dword [ecx], 18h
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512ED0]
	mov [ecx-4], eax
	mov dword [ecx], 19h
	add ecx, 4
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512ED2]
	mov [ecx-4], eax
	mov dword [ecx], 1Ch
	xor eax, eax
	add ecx, 4
	mov al, byte [byte_512F3F]
	mov edx, dword [dword_4E5508]
	mov [ecx], eax
	add ecx, 4
	xor eax, eax
	test edx, edx
	jz loc_4067A9
	mov eax, 4

loc_4067A9:
	cmp dword [dword_4E5514], 0
	jz loc_4067B4
	or al, 8

loc_4067B4:
	mov dl, byte [byte_512DAA]
	cmp dl, 2
	jz loc_4067DA
	cmp dl, 1
	jz loc_4067DA
	cmp byte [byte_512DD0], 0
	jz loc_4067CF
	or al, 10h

loc_4067CF:
	cmp byte [byte_512DEB], 0
	jz loc_4067DA
	or al, 20h

loc_4067DA:
	cmp dword [dword_4E550C], 0
	jz loc_4067E5
	or al, 80h

loc_4067E5:
	cmp dword [dword_4E5504], 0
	jz loc_4067F1
	or ah, 2

loc_4067F1:
	cmp dword [dword_4E5500], 0
	jz loc_4067FD
	or ah, 1

loc_4067FD:
	cmp dword [dword_4E54F8], 0
	jz loc_406812
	cmp byte [byte_512DF8], 0
	jnz loc_406812
	or ah, 4

loc_406812:
	cmp dword [dword_4E54FC], 0
	jz loc_40681E
	or ah, 8

loc_40681E:
	cmp dword [dword_4E54F8], 0
	jz loc_40683C
	cmp byte [byte_512DF8], 0
	jnz loc_40683C
	cmp byte [byte_4D1FE8], 25h
	jbe loc_40683C
	or ah, 10h

loc_40683C:
	cmp byte [byte_512DA9], 1
	ja loc_406854
	mov dl, byte [byte_512DAA]
	cmp dl, 3
	jz loc_406856
	test dl, dl
	jz loc_406856

loc_406854:
	xor eax, eax

loc_406856:
	mov dword [ecx], 14h
	add ecx, 4
	add ecx, 4
	mov edi, [esp+68h]
	mov [ecx-4], eax
	lea edx, [ecx+4]
	mov eax, edi
	sub edx, edi
	mov dword [ecx], 0
	call sub_488168
	mov eax, edi
	add esp, 9Ch
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret

loc_406888:
	mov dh, byte [byte_512DAA]
	test dh, dh
	jz loc_405E6E
	cmp dh, 3
	jnz loc_405E2E
	jmp loc_405E6E

loc_4068A4:
	xor eax, eax
	jmp loc_405F3B

loc_4068AB:
	xor eax, eax
	mov al, byte [byte_512DA9]
	jmp loc_405F3B

loc_4068B7:
	mov dword [ecx], 2
	xor ecx, ecx
	mov cl, bl
	mov [eax], ecx
	mov ecx, edx
	jmp loc_405F6C

loc_4068CA:
	mov dword [ecx], 5
	xor ecx, ecx
	mov cl, byte [byte_512DAB]
	mov [ebx], ecx
	mov dword [esi], 21h
	xor ecx, ecx
	mov cl, byte [byte_512DAB]
	mov [eax], ecx
	mov ecx, edx
	jmp loc_405F9F

loc_4068F1:
	cmp bh, 1
	jz loc_405FAE
	cmp byte [byte_512DD0], 0
	jnz loc_405FAE
	cmp byte [byte_512DEB], 0
	jz loc_40691D
	cmp byte [byte_512DA9], 1
	jz loc_405FAE

loc_40691D:
	xor eax, eax
	mov al, byte [byte_512DAD]
	jmp loc_405FB3

loc_406929:
	cmp byte [byte_512DAA], 1
	jnz loc_40693B
	cmp dword [dword_4D76B8], 0
	jnz loc_406956

loc_40693B:
	mov dword [ecx], 0Dh
	xor eax, eax
	add ecx, 4

loc_406946:
	mov [ecx], eax
	inc eax
	add ecx, 4
	cmp eax, 0Ch
	jle loc_406946
	jmp loc_406080

loc_406956:
	mov eax, ecx
	call sub_407380
	jmp loc_40607C

loc_406962:
	xor eax, eax ; jumptable 00406092 case 1
	call sub_4072D0
	movsx edx, ax
	mov eax, 1
	call sub_4072D0
	cwde
	mov ebx, 9
	add edx, eax
	mov eax, byte_512E84
	mov [esp+6Ch], edx
	mov edx, dword_512F4C
	call strncpy_
	mov ebx, 9
	mov edx, byte_512F55
	mov eax, byte_512E8D
	call strncpy_
	xor eax, eax
	mov [esp+68h], esi
	call sub_4072D0
	test ax, ax
	jz loc_4069C5
	mov eax, ecx
	xor edx, edx
	mov esi, 1
	call sub_4073B0
	mov ecx, eax

loc_4069C5:
	mov eax, 1
	call sub_4072D0
	inc edi
	test ax, ax
	jz loc_406B92
	lea ebx, [ecx+4]
	lea edx, [ecx+8]
	lea eax, [ecx+0Ch]
	cmp byte [byte_4D1FE9], 0
	jz loc_406B98
	mov dword [ecx], 7Bh
	xor ecx, ecx
	mov [ebx], esi
	mov cl, byte [byte_4D1FE9]

loc_4069FF:
	mov [edx], ecx
	mov ecx, eax
	mov dword [ecx], 7Dh
	add ecx, 4
	add ecx, 4
	xor eax, eax
	mov [ecx-4], esi
	add ecx, 4
	mov al, byte [byte_512DDB]
	mov [ecx-4], eax
	mov dword [ecx], 7Eh
	xor eax, eax
	mov [ecx+4], esi
	mov al, byte [byte_512DDA]
	add ecx, 4
	mov al, byte byte_512DDC[eax]
	add ecx, 4
	add ecx, 4
	and eax, 0FFh
	mov [ecx-4], eax
	mov dword [ecx], 7Ch
	add ecx, 4
	add ecx, 4
	lea eax, [ecx+8]
	lea edx, [eax+4]
	mov [esp+64h], edx
	lea edx, [eax+8]
	lea ebx, [eax+0Ch]
	mov [esp+60h], ebx
	lea ebx, [eax+10h]
	mov [esp+50h], ebx
	lea ebx, [eax+14h]
	mov [esp+48h], ebx
	lea ebx, [eax+18h]
	mov [esp+4Ch], ebx
	lea ebx, [eax+1Ch]
	mov [esp+54h], ebx
	lea ebx, [eax+20h]
	lea ebp, [eax+24h]
	mov [esp+5Ch], ebp
	lea ebp, [eax+28h]
	mov [esp+58h], ebp
	lea ebp, [eax+2Ch]
	mov [esp+44h], ebp
	lea ebp, [eax+30h]
	mov [ecx-4], esi
	mov [esp+40h], ebp
	lea ebp, [eax+34h]
	mov dword [ecx], 1
	mov [esp+3Ch], ebp
	lea ebp, [eax+38h]
	add ecx, 4
	cmp byte [byte_512DAA], 0
	jz loc_406BAD
	mov dword [ecx], 82h
	mov [eax], esi
	mov ecx, [esp+64h]
	mov eax, dword [dword_4D22E0]
	mov [ecx], eax
	mov eax, [esp+60h]
	mov dword [edx], 83h
	mov [eax], esi
	mov edx, [esp+50h]
	mov eax, dword [dword_4D22E0]
	mov [edx], eax
	mov eax, [esp+48h]
	mov dword [eax], 84h
	mov eax, [esp+4Ch]
	mov [eax], esi
	mov edx, [esp+54h]
	mov eax, dword [dword_4D22F0]
	mov [edx], eax
	mov eax, [esp+5Ch]
	mov dword [ebx], 85h
	mov [eax], esi
	mov edx, [esp+58h]
	mov eax, dword [dword_4D22FC]
	mov [edx], eax
	mov eax, [esp+44h]
	mov dword [eax], 86h
	mov eax, [esp+40h]
	mov [eax], esi
	mov edx, [esp+3Ch]
	mov eax, dword [dword_4D2308]

loc_406B39:
	mov ecx, ebp
	mov [edx], eax
	mov dword [ecx], 7Fh
	add ecx, 4
	add ecx, 4
	xor eax, eax
	mov [ecx-4], esi
	add ecx, 4
	mov al, byte [byte_512DF2]
	mov [ecx-4], eax
	mov dword [ecx], 80h
	add ecx, 4
	add ecx, 4
	xor eax, eax
	mov [ecx-4], esi
	add ecx, 4
	mov al, byte [byte_512DF3]
	mov [ecx-4], eax
	mov dword [ecx], 81h
	add ecx, 4
	add ecx, 4
	xor eax, eax
	mov [ecx-4], esi
	add ecx, 4
	mov al, byte [byte_512DF4]
	inc esi
	mov [ecx-4], eax

loc_406B92:
	inc edi
	jmp loc_4060CC

loc_406B98:
	mov dword [ecx], 7Bh
	xor ecx, ecx
	mov [ebx], esi
	mov cl, byte [byte_512DDA]
	jmp loc_4069FF

loc_406BAD:
	mov dword [ecx], 82h
	mov [eax], esi
	xor eax, eax
	mov al, byte [byte_512DEE]
	mov ecx, [esp+64h]
	mov eax, dword dword_4D22E0[eax*4]
	mov [ecx], eax
	mov eax, [esp+60h]
	mov dword [edx], 83h
	mov [eax], esi
	xor eax, eax
	mov al, byte [byte_512DEF]
	mov edx, [esp+50h]
	mov eax, dword dword_4D22E0[eax*4]
	mov [edx], eax
	mov eax, [esp+48h]
	mov dword [eax], 84h
	mov eax, [esp+4Ch]
	mov [eax], esi
	xor eax, eax
	mov al, byte [byte_512DEC]
	mov edx, [esp+54h]
	mov eax, dword dword_4D22EC[eax*4]
	mov [edx], eax
	mov eax, [esp+5Ch]
	mov dword [ebx], 85h
	mov [eax], esi
	xor eax, eax
	mov al, byte [byte_512DF1]
	mov edx, [esp+58h]
	mov eax, dword dword_4D22F8[eax*4]
	mov [edx], eax
	mov eax, [esp+44h]
	mov dword [eax], 86h
	mov eax, [esp+40h]
	mov [eax], esi
	xor eax, eax
	mov al, byte [byte_512DF0]
	mov edx, [esp+3Ch]
	mov eax, dword dword_4D2304[eax*4]
	jmp loc_406B39

loc_406C54:
	mov eax, dword [dword_513408+2] ; jumptable 00406092 cases 2-4
	sar eax, 10h
	mov [esp+68h], eax
	mov eax, dword [dword_513408]
	lea edx, [esi+esi]
	sar eax, 10h
	xor edi, edi
	mov [esp+6Ch], eax

loc_406C71:
	mov eax, dword [dword_513408]
	sar eax, 10h
	cmp edi, eax
	jge loc_4060CC
	mov dword [ecx], 7Bh
	add ecx, 4
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_512F98[edx]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 7Dh
	add ecx, 4
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_512FA8[edx]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 7Eh
	add ecx, 4
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_512FB8[edx]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 7Ch
	add ecx, 4
	add ecx, 4
	lea eax, [ecx+8]
	lea ebx, [eax+4]
	mov [esp+98h], ebx
	lea ebx, [eax+8]
	mov [esp+38h], ebx
	lea ebx, [eax+0Ch]
	mov [esp+80h], ebx
	lea ebx, [eax+10h]
	mov [esp+28h], ebx
	lea ebx, [eax+14h]
	mov [esp+90h], ebx
	lea ebx, [eax+18h]
	mov [esp+88h], ebx
	lea ebx, [eax+1Ch]
	mov [esp+0A0h], ebx
	lea ebx, [eax+20h]
	mov [esp+94h], ebx
	lea ebx, [eax+24h]
	mov [esp+2Ch], ebx
	lea ebx, [eax+28h]
	lea ebp, [eax+2Ch]
	mov [esp+9Ch], ebx
	lea ebx, [eax+30h]
	mov [esp+84h], ebx
	lea ebx, [eax+34h]
	mov [ecx-4], esi
	mov [esp+8Ch], ebx
	lea ebx, [eax+38h]
	mov dword [ecx], 1
	mov [esp+7Ch], ebx
	mov bl, byte [byte_512DAA]
	add ecx, 4
	test bl, bl
	jz loc_406E76
	mov dword [ecx], 82h
	mov [eax], esi
	mov ecx, [esp+98h]
	mov eax, dword [dword_4D22E0]
	mov [ecx], eax
	mov eax, [esp+38h]
	mov dword [eax], 83h
	mov eax, [esp+80h]
	mov [eax], esi
	mov ecx, [esp+28h]
	mov eax, dword [dword_4D22E0]
	mov [ecx], eax
	mov eax, [esp+90h]
	mov dword [eax], 84h
	mov eax, [esp+88h]
	mov [eax], esi
	mov ecx, [esp+0A0h]
	mov eax, dword [dword_4D22F0]
	mov [ecx], eax
	mov eax, [esp+94h]
	mov dword [eax], 85h
	mov eax, [esp+2Ch]
	mov [eax], esi
	mov ecx, [esp+9Ch]
	mov eax, dword [dword_4D22FC]
	mov [ecx], eax
	mov eax, [esp+84h]
	mov dword [ebp+0], 86h
	mov [eax], esi
	mov ecx, [esp+8Ch]
	mov eax, dword [dword_4D2308]

loc_406E0F:
	mov [ecx], eax
	mov ecx, [esp+7Ch]
	mov dword [ecx], 7Fh
	add ecx, 4
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_513018[edx]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 80h
	add ecx, 4
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_513028[edx]
	add ecx, 4
	sar eax, 10h
	mov [ecx-4], eax
	mov dword [ecx], 81h
	add ecx, 4
	add edx, 2
	inc edi
	mov [ecx], esi
	add ecx, 4
	mov eax, dword dword_513036[edx]
	add ecx, 4
	sar eax, 10h
	inc esi
	mov [ecx-4], eax
	jmp loc_406C71

loc_406E76:
	mov dword [ecx], 84h
	mov [eax], esi
	mov eax, dword dword_512FC8[edx]
	sar eax, 10h
	mov ecx, [esp+98h]
	mov eax, dword dword_4D22EC[eax*4]
	mov [ecx], eax
	mov eax, [esp+38h]
	mov dword [eax], 82h
	mov eax, [esp+80h]
	mov [eax], esi
	mov eax, dword dword_512FD8[edx]
	sar eax, 10h
	mov ecx, [esp+28h]
	mov eax, dword dword_4D22E0[eax*4]
	mov [ecx], eax
	mov eax, [esp+90h]
	mov dword [eax], 83h
	mov eax, [esp+88h]
	mov [eax], esi
	mov eax, dword dword_512FE8[edx]
	sar eax, 10h
	mov ecx, [esp+0A0h]
	mov eax, dword dword_4D22E0[eax*4]
	mov [ecx], eax
	mov eax, [esp+94h]
	mov dword [eax], 86h
	mov eax, [esp+2Ch]
	mov [eax], esi
	mov eax, dword dword_512FF8[edx]
	sar eax, 10h
	mov ecx, [esp+9Ch]
	mov eax, dword dword_4D2304[eax*4]
	mov [ecx], eax
	mov eax, [esp+84h]
	mov dword [ebp+0], 85h
	mov [eax], esi
	mov eax, dword dword_513008[edx]
	sar eax, 10h
	mov ecx, [esp+8Ch]
	mov eax, dword dword_4D22F8[eax*4]
	jmp loc_406E0F

loc_406F47:
	xor ebx, ebx
	mov [esp+74h], ebx
	jmp loc_406129

loc_406F52:
	cmp byte [byte_512DF6], 2
	jnz loc_406F6C
	mov eax, 7
	sub eax, edi
	inc eax
	mov [esp+74h], eax
	jmp loc_406129

loc_406F6C:
	xor eax, eax
	mov al, byte [byte_512DF6]
	mov [esp+74h], eax
	jmp loc_406129

loc_406F7C:
	mov eax, 8 ; jumptable 00406100 case 1
	sub eax, edi
	mov [esp+74h], eax
	jmp loc_406129

loc_406F8C:
	mov eax, 9 ; jumptable 00406100 case 2
	sub eax, edi
	mov [esp+74h], eax
	jmp loc_406129

loc_406F9C:
	mov ah, byte [byte_512DF5]
	cmp ah, 0Bh
	ja loc_40615A
	xor ebx, ebx
	mov bl, ah
	jmp loc_40616B

loc_406FB4:
	inc dword [esp+78h]
	jmp loc_4061FB

loc_406FBD:
	cmp dh, 0Dh
	jnz loc_406FCC
	mov eax, 0Dh
	jmp loc_406243

loc_406FCC:
	mov eax, 0Eh
	jmp loc_406243

loc_406FD6:
	xor eax, eax
	mov al, byte [byte_512DF5]
	jmp loc_406243

loc_406FE2:
	dec edi
	jmp loc_4062CC

loc_406FE8:
	call sub_40764C
	jmp loc_4062E0

loc_406FF2:
	mov edi, 4
	jmp loc_4062F5

loc_406FFC:
	call sub_40764C
	mov edx, eax
	jmp loc_40632D

loc_407008:
	call sub_407830
	mov edx, eax
	jmp loc_406379

loc_407014:
	mov edx, 1
	jmp loc_4063D1

loc_40701E:
	mov eax, 23h
	jmp loc_4063E3

loc_407028:
	mov eax, 24h
	jmp loc_40640D

loc_407032:
	mov eax, 2Fh
	jmp loc_406514

loc_40703C:
	mov eax, 30h
	jmp loc_40653C

loc_407046:
	cmp byte [byte_512DBB], 0
	jz loc_40714A
	mov eax, 24h

loc_407058:
	mov [ecx], eax
	mov eax, dword [dword_512E0C]
	call sub_4071D0
	mov [ecx+4], eax
	add ecx, 4
	mov ah, byte [byte_512DBB]
	add ecx, 4
	test ah, ah
	jz loc_407154
	mov eax, 23h

loc_407080:
	mov [ecx], eax
	add ecx, 4
	mov eax, dword [dword_512E10]
	add ecx, 4
	call sub_4071D0
	mov [ecx-4], eax
	mov dword [ecx], 25h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E14]
	mov [ecx-4], eax
	mov dword [ecx], 26h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E18]
	mov [ecx-4], eax
	mov dword [ecx], 52h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E1C]
	mov [ecx-4], eax
	mov dword [ecx], 53h
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E20]
	mov [ecx-4], eax
	mov dword [ecx], 2Bh
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E24]
	mov [ecx-4], eax
	mov dword [ecx], 2Ch
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E28]
	mov [ecx-4], eax
	mov dword [ecx], 2Dh
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E2C]
	mov [ecx-4], eax
	mov dword [ecx], 2Eh
	add ecx, 4
	add ecx, 4
	mov eax, dword [dword_512E30]
	mov edx, 57h
	mov [ecx-4], eax
	mov eax, 4
	mov dword [ecx], 28h
	jmp loc_406601

loc_40714A:
	mov eax, 23h
	jmp loc_407058

loc_407154:
	mov eax, 24h
	jmp loc_407080
;sub_405DD4 endp

sub_407160: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 20h
	mov ecx, 8
	mov edi, esp
	mov esi, dword_405D8C
	rep movsd
	test ax, ax
	jl loc_40717F
	cmp ax, 8
	jle loc_407181

loc_40717F:
	xor eax, eax

loc_407181:
	cwde
	mov ax, [esp+eax*4]
	add esp, 20h
	pop edi
	pop esi
	pop ecx
	ret
;sub_407160 endp

sub_407190: ;SUBROUTINE
	mov al, byte [byte_512DAA]
	cmp al, 1
	jb loc_4071AB
	jbe loc_4071A5
	cmp al, 2
	jnz loc_4071AB
	mov eax, 2
	ret

loc_4071A5:
	mov eax, 4
	ret

loc_4071AB:
	xor eax, eax
	mov al, byte [byte_512DB8]
	ret
;sub_407190 endp

off_4071C0: dd loc_40720E
	dd loc_407220 ; jump table for switch statement
	dd loc_407262
	dd loc_407294

sub_4071D0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	and eax, 0FFh
	cmp eax, 1
	jnz loc_40721C
	push edx
	push ebx
	mov edx, ecx
	mov eax, ecx
	and edx, 0FF0000h
	and eax, 0FF00h
	sar edx, 10h
	sar eax, 8
	mov bl, byte [byte_512E00]
	sub edx, eax
	cmp bl, 3
	ja loc_40720E ; jumptable 00407207 case 0
	and ebx, 0FFh ; switch 4 cases
	jmp off_4071C0[ebx*4] ; switch jump

loc_40720E:
	shl eax, 8 ; jumptable 00407207 case 0
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx

loc_40721C:
	mov eax, ecx
	pop ecx
	ret

loc_407220:
	test edx, edx ; jumptable 00407207 case 1
	jl loc_407242
	mov ebx, edx
	shl edx, 2
	sub edx, ebx
	sar edx, 2
	add eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret

loc_407242:
	neg edx
	mov ebx, edx
	shl edx, 2
	sub edx, ebx
	sar edx, 2
	sub eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret

loc_407262:
	test edx, edx ; jumptable 00407207 case 2
	jl loc_40727C
	sar edx, 1
	add eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret

loc_40727C:
	neg edx
	sar edx, 1
	sub eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret

loc_407294:
	test edx, edx ; jumptable 00407207 case 3
	jl loc_4072AF
	sar edx, 2
	add eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret

loc_4072AF:
	neg edx
	sar edx, 2
	sub eax, edx
	shl eax, 8
	xor ch, ch
	and eax, 0FF00h
	or ecx, eax
	pop ebx
	pop edx
	mov eax, ecx
	pop ecx
	ret
;sub_4071D0 endp

sub_4072D0: ;SUBROUTINE
	push edx
	cmp byte [byte_512DA9], 4
	jnz loc_4072E7
	mov edx, dword [dword_513408]
	sar edx, 10h
	cmp eax, edx
	jl loc_407307

loc_4072E7:
	cmp byte [byte_512DAA], 2
	jnz loc_407307
	cmp dword [dword_4D76BC], 0
	jz loc_407307
	lea edx, [eax+eax]
	mov eax, dword [dword_4D76BC]
	mov ax, [edx+eax]
	pop edx
	ret

loc_407307:
	mov eax, 1
	pop edx
	ret
;sub_4072D0 endp

sub_407310: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, dword [dword_4D76BC]
	mov ecx, eax
	mov eax, dword [dword_512264]
	cmp eax, 9
	jl loc_40735A
	nop

loc_407328:
	add ecx, 4
	xor edx, edx
	mov [ecx-4], eax

loc_407330:
	xor ebx, ebx
	mov bl, byte byte_513074[edx]
	cmp ebx, eax
	jg loc_407346
	mov edi, eax
	add ecx, 4
	sub edi, ebx
	mov [ecx-4], edi

loc_407346:
	inc edx
	cmp edx, 9
	jl loc_407330
	mov eax, ecx
	mov dword [dword_4D76BC], esi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40735A:
	jge loc_407328
	lea edx, [eax+eax]

loc_40735F:
	mov ebx, esi
	movsx ebx, word [edx+ebx]
	add edx, 2
	add eax, ebx
	cmp edx, 12h
	jl loc_40735F
	jmp loc_407328
;sub_407310 endp

sub_407380: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	add edx, 4
	mov dword [eax], 8
	xor eax, eax

loc_40738F:
	xor ecx, ecx
	add edx, 4
	mov cl, byte byte_512AD0[eax]
	inc eax
	mov [edx-4], ecx
	cmp eax, 8
	jl loc_40738F
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_407380 endp

sub_4073B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 28h
	lea esi, [eax+4]
	lea ecx, [eax+8]
	lea ebx, [eax+0Ch]
	cmp byte [byte_4D1FE8], 0
	jnz loc_407574
	mov dword [eax], 7Bh
	xor eax, eax
	mov [esi], edx
	mov al, byte [byte_512DBF]

loc_4073DD:
	mov [ecx], eax
	mov eax, ebx
	mov dword [eax], 7Dh
	add eax, 4
	add eax, 4
	xor ecx, ecx
	mov [eax-4], edx
	add eax, 4
	mov cl, byte [byte_512DC0]
	mov [eax-4], ecx
	mov dword [eax], 7Eh
	xor ecx, ecx
	mov [eax+4], edx
	mov cl, byte [byte_512DBF]
	add eax, 4
	mov cl, byte byte_512DC1[ecx]
	add eax, 4
	add eax, 4
	and ecx, 0FFh
	mov [eax-4], ecx
	mov dword [eax], 7Ch
	add eax, 4
	add eax, 4
	lea ecx, [eax+8]
	lea ebx, [ecx+4]
	mov [esp], ebx
	lea ebx, [ecx+8]
	mov [esp+8], ebx
	lea ebx, [ecx+0Ch]
	mov [esp+0Ch], ebx
	lea ebx, [ecx+10h]
	mov [esp+24h], ebx
	lea ebx, [ecx+14h]
	lea esi, [ecx+18h]
	lea edi, [ecx+1Ch]
	lea ebp, [ecx+20h]
	mov [esp+4], esi
	lea esi, [ecx+24h]
	mov [esp+1Ch], esi
	lea esi, [ecx+28h]
	mov [esp+20h], esi
	lea esi, [ecx+2Ch]
	mov [eax-4], edx
	mov [esp+10h], esi
	lea esi, [ecx+30h]
	mov dword [eax], 1
	mov [esp+14h], esi
	lea esi, [ecx+34h]
	add eax, 4
	mov [esp+18h], esi
	lea esi, [ecx+38h]
	cmp byte [byte_512DAA], 0
	jz loc_407588
	mov dword [eax], 82h
	mov [ecx], edx
	mov ecx, [esp]
	mov eax, dword [dword_4D22E0]
	mov [ecx], eax
	mov eax, [esp+8]
	mov dword [eax], 83h
	mov eax, [esp+0Ch]
	mov [eax], edx
	mov ecx, [esp+24h]
	mov eax, dword [dword_4D22E0]
	mov [ecx], eax
	mov eax, [esp+4]
	mov dword [ebx], 84h
	mov [eax], edx
	mov eax, dword [dword_4D22F0]
	mov [edi], eax
	mov eax, [esp+1Ch]
	mov dword [ebp+0], 85h
	mov [eax], edx
	mov ecx, [esp+20h]
	mov eax, dword [dword_4D22FC]
	mov [ecx], eax
	mov eax, [esp+10h]
	mov dword [eax], 86h
	mov eax, [esp+14h]
	mov [eax], edx
	mov ecx, [esp+18h]
	mov eax, dword [dword_4D2308]

loc_407511:
	mov [ecx], eax
	mov eax, esi
	mov dword [eax], 7Fh
	add eax, 4
	add eax, 4
	xor ecx, ecx
	mov [eax-4], edx
	add eax, 4
	mov cl, byte [byte_512DD6]
	mov [eax-4], ecx
	mov dword [eax], 80h
	add eax, 4
	add eax, 4
	xor ecx, ecx
	mov [eax-4], edx
	add eax, 4
	mov cl, byte [byte_512DD8]
	mov [eax-4], ecx
	mov dword [eax], 81h
	add eax, 4
	mov [eax], edx
	add eax, 4
	xor edx, edx
	add eax, 4
	mov dl, byte [byte_512DD9]
	mov [eax-4], edx
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_407574:
	mov dword [eax], 7Bh
	xor eax, eax
	mov [esi], edx
	mov al, byte [byte_4D1FE8]
	jmp loc_4073DD

loc_407588:
	mov dword [eax], 82h
	xor eax, eax
	mov [ecx], edx
	mov al, byte [byte_512DD3]
	mov ecx, [esp]
	mov eax, dword dword_4D22E0[eax*4]
	mov [ecx], eax
	mov eax, [esp+8]
	mov dword [eax], 83h
	mov eax, [esp+0Ch]
	mov [eax], edx
	xor eax, eax
	mov al, byte [byte_512DD4]
	mov ecx, [esp+24h]
	mov eax, dword dword_4D22E0[eax*4]
	mov [ecx], eax
	mov eax, [esp+4]
	mov dword [ebx], 84h
	mov [eax], edx
	xor eax, eax
	mov al, byte [byte_512DD2]
	mov eax, dword dword_4D22EC[eax*4]
	mov [edi], eax
	mov eax, [esp+1Ch]
	mov dword [ebp+0], 85h
	mov [eax], edx
	xor eax, eax
	mov al, byte [byte_512DD7]
	mov ecx, [esp+20h]
	mov eax, dword dword_4D22F8[eax*4]
	mov [ecx], eax
	mov eax, [esp+10h]
	mov dword [eax], 86h
	mov eax, [esp+14h]
	mov [eax], edx
	xor eax, eax
	mov al, byte [byte_512DD5]
	mov ecx, [esp+18h]
	mov eax, dword dword_4D2304[eax*4]
	jmp loc_407511
;sub_4073B0 endp

off_407630: dd loc_40766C
	dd loc_407685 ; jump table for switch statement
	dd loc_40769E
	dd loc_4076B7
	dd loc_4076D0
	dd loc_4076E9
	dd loc_407702

sub_40764C: ;SUBROUTINE
	push edx
	mov dl, byte [byte_512DB0]
	dec dl
	mov eax, 12h
	cmp dl, 6
	ja loc_407683
	and edx, 0FFh ; switch 7 cases
	jmp off_407630[edx*4] ; switch jump

loc_40766C:
	xor eax, eax ; jumptable 00407665 case 0
	mov al, byte [byte_4D22A8]
	call sub_407720
	mov al, byte byte_4D22A9[eax]
	and eax, 0FFh

loc_407683:
	pop edx
	ret

loc_407685:
	xor eax, eax ; jumptable 00407665 case 1
	mov al, byte [byte_4D22D3]
	call sub_407720
	mov al, byte byte_4D22D4[eax]
	and eax, 0FFh
	pop edx
	ret

loc_40769E:
	xor eax, eax ; jumptable 00407665 case 2
	mov al, byte [byte_4D22B1]
	call sub_407720
	mov al, byte byte_4D22B2[eax]
	and eax, 0FFh
	pop edx
	ret

loc_4076B7:
	xor eax, eax ; jumptable 00407665 case 3
	mov al, byte [byte_4D22BA]
	call sub_407720
	mov al, byte byte_4D22BB[eax]
	and eax, 0FFh
	pop edx
	ret

loc_4076D0:
	xor eax, eax ; jumptable 00407665 case 4
	mov al, byte [byte_4D22C6]
	call sub_407720
	mov al, byte byte_4D22C7[eax]
	and eax, 0FFh
	pop edx
	ret

loc_4076E9:
	xor eax, eax ; jumptable 00407665 case 5
	mov al, byte [byte_4D22CD]
	call sub_407720
	mov al, byte byte_4D22CE[eax]
	and eax, 0FFh
	pop edx
	ret

loc_407702:
	xor eax, eax ; jumptable 00407665 case 6
	mov al, byte [byte_4D22D9]
	call sub_407720
	mov al, byte byte_4D22DA[eax]
	and eax, 0FFh
	pop edx
	ret
;sub_40764C endp

sub_407720: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov bl, byte [byte_50B480]
	xor edx, edx
	mov dl, bl
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	inc bl
	mov ah, byte byte_4E551A[edx]
	mov byte [byte_50B480], bl
	test ah, ah
	jz loc_407768

loc_407754:
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp byte byte_4E551A[edx], 0
	jnz loc_407754

loc_407768:
	mov bh, 1
	mov eax, edx
	mov byte byte_4E551A[edx], bh
	pop edx
	pop ecx
	pop ebx
	ret
;sub_407720 endp

sub_407780: ;SUBROUTINE
	push edx
	xor eax, eax

loc_407783:
	inc eax
	xor dl, dl
	mov byte byte_4E5519[eax], dl
	cmp eax, 0Bh
	jl loc_407783
	pop edx
	ret
;sub_407780 endp

sub_4077A0: ;SUBROUTINE
	push edx
	cmp byte [byte_512DA9], 4
	jnz loc_4077BA
	mov dh, byte [byte_512DAA]
	cmp dh, 1
	jz loc_4077D3
	cmp dh, 2
	jz loc_4077D3

loc_4077BA:
	cmp byte [byte_512DAA], 1
	jnz loc_4077D5
	add eax, dword [dword_512DA4]

loc_4077C9:
	cmp eax, 0Bh
	jl loc_4077D3
	sub eax, 0Bh
	jmp loc_4077C9

loc_4077D3:
	pop edx
	ret

loc_4077D5:
	cmp byte [byte_512DA9], 1
	ja loc_4077C9
	add eax, dword [dword_4D76CC]
	jmp loc_4077C9
;sub_4077A0 endp

sub_4077F0: ;SUBROUTINE
	push ebx
	push ecx
	mov cl, byte byte_4D407D[eax*2]
	and ecx, 0FFh
	test ecx, ecx
	jle loc_40781A

loc_407803:
	xor ebx, ebx
	inc edx
	mov bl, byte byte_4D407C[eax*2]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	lea eax, [ebx+edx]
	pop ecx
	pop ebx
	ret

loc_40781A:
	mov ecx, 1
	jmp loc_407803
;sub_4077F0 endp

sub_407830: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 10h
	mov edi, esp
	mov bl, byte [byte_50B480]
	xor edx, edx
	mov esi, dword_405D7C
	mov dl, bl
	movsd
	movsd
	movsd
	movsd
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	mov ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	inc bl
	xor eax, eax
	mov byte [byte_50B480], bl
	mov al, [esp+edx]
	add esp, 10h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_407830 endp

sub_407880: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov ah, byte [byte_512DAA]
	test ah, ah
	jnz loc_4078F4

loc_407890:
	mov dl, byte [byte_512DF5]
	cmp dl, 0Eh
	jnz loc_40797B

loc_40789F:
	mov dword [dword_4D22A4], 2

loc_4078A9:
	cmp esi, 0Ah
	jle loc_4078B3
	mov esi, 0Ah

loc_4078B3:
	mov edx, dword [dword_4D22A4]
	lea eax, [esi+esi]
	cmp edx, 2
	jnz loc_407A6F
	mov edx, dword dword_4D2266[eax]
	sar edx, 10h
	mov [edi], edx
	mov edx, dword dword_4D227C[eax]
	sar edx, 10h
	mov [ebx], edx
	cmp byte [byte_512DAA], 2
	jnz loc_407A63
	mov eax, dword dword_4D2292[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret

loc_4078F4:
	cmp ah, 3
	jz loc_407890
	mov dh, byte [byte_512DA9]
	cmp dh, 1
	jz loc_40799B
	cmp dh, 4
	jnz loc_4079F7

loc_407911:
	push ecx
	cmp byte [byte_512DAA], 2
	jz loc_407A15

loc_40791F:
	xor eax, eax
	xor ecx, ecx
	xor edx, edx
	mov dword [dword_4D22A4], eax

loc_40792A:
	mov eax, dword [dword_513408]
	sar eax, 10h
	cmp ecx, eax
	jge loc_407A22
	mov eax, dword dword_512F98[edx]
	sar eax, 10h
	call sub_407BE0
	test eax, eax
	jz loc_40795F
	cmp dword [dword_4D22A4], 0
	jnz loc_40795F
	mov dword [dword_4D22A4], 1

loc_40795F:
	mov eax, dword dword_512F98[edx]
	sar eax, 10h
	call sub_407BB0
	test eax, eax
	jnz loc_407A33
	inc ecx
	add edx, 2
	jmp loc_40792A

loc_40797B:
	cmp dl, 0Dh
	jnz loc_40798F
	mov dword [dword_4D22A4], 1
	jmp loc_4078A9

loc_40798F:
	xor eax, eax
	mov dword [dword_4D22A4], eax
	jmp loc_4078A9

loc_40799B:
	xor eax, eax
	mov al, byte [byte_512DBF]
	inc esi
	call sub_407BB0
	test eax, eax
	jnz loc_40789F
	mov al, byte [byte_512DDA]
	call sub_407BB0
	test eax, eax
	jnz loc_40789F
	mov al, byte [byte_512DBF]
	call sub_407BE0
	test eax, eax
	jz loc_4079DF

loc_4079D0:
	mov dword [dword_4D22A4], 1
	jmp loc_4078A9

loc_4079DF:
	mov al, byte [byte_512DDA]
	call sub_407BE0
	test eax, eax
	jnz loc_4079D0

loc_4079ED:
	mov dword [dword_4D22A4], eax
	jmp loc_4078A9

loc_4079F7:
	cmp dh, 2
	jz loc_407911
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407BB0
	test eax, eax
	jz loc_407A46
	jmp loc_40789F

loc_407A15:
	cmp byte [byte_512DB0], 0
	jz loc_40791F

loc_407A22:
	mov eax, dword [dword_513408]
	sar eax, 10h
	dec eax
	add esi, eax
	pop ecx
	jmp loc_4078A9

loc_407A33:
	mov dword [dword_4D22A4], 2
	inc ecx
	add edx, 2
	jmp loc_40792A

loc_407A46:
	mov al, byte [byte_512DBF]
	call sub_407BE0
	test eax, eax
	jz loc_4079ED
	mov dword [dword_4D22A4], 1
	jmp loc_4078A9

loc_407A63:
	mov eax, dword dword_4D2258[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret

loc_407A6F:
	cmp edx, 1
	jnz loc_407AAB
	mov edx, dword dword_4D221C[eax]
	sar edx, 10h
	mov [edi], edx
	mov edx, dword dword_4D2232[eax]
	sar edx, 10h
	mov [ebx], edx
	cmp byte [byte_512DAA], 2
	jnz loc_407A9F
	mov eax, dword dword_4D2248[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret

loc_407A9F:
	mov eax, dword dword_4D220E[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret

loc_407AAB:
	mov edx, dword dword_4D21D2[eax]
	sar edx, 10h
	mov [edi], edx
	mov edx, dword dword_4D21E8[eax]
	sar edx, 10h
	mov [ebx], edx
	cmp byte [byte_512DAA], 2
	jnz loc_407AD6
	mov eax, dword dword_4D21FE[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret

loc_407AD6:
	mov eax, dword dword_4D21C4[eax]
	sar eax, 10h
	pop edi
	pop esi
	ret
;sub_407880 endp

sub_407AF0: ;SUBROUTINE
	push edx
	mov dl, byte [byte_512F43]
	cmp dl, 2
	jz loc_407B08
	cmp dl, 1
	jnz loc_407B0F
	call sub_407BE0
	pop edx
	ret

loc_407B08:
	call sub_407BB0
	pop edx
	ret

loc_407B0F:
	call sub_407C10
	pop edx
	ret
;sub_407AF0 endp

sub_407B20: ;SUBROUTINE
	push ebx
	push edx
	xor edx, edx
	mov dl, byte [byte_512DB0]
	add edx, edx
	mov bx, word word_4D21B4[edx]
	cmp bx, 2
	jz loc_407B47
	cmp bx, 1
	jnz loc_407B4F
	call sub_407BE0
	pop edx
	pop ebx
	ret

loc_407B47:
	call sub_407BB0
	pop edx
	pop ebx
	ret

loc_407B4F:
	call sub_407C10
	pop edx
	pop ebx
	ret
;sub_407B20 endp

sub_407B60: ;SUBROUTINE
	xor eax, eax
	mov al, byte [byte_512DB0]
	mov al, byte word_4D21B4[eax*2]
	mov byte [byte_512F43], al
	ret
;sub_407B60 endp

sub_407B80: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_407C10
	test eax, eax
	jz loc_407B90
	xor eax, eax
	pop edx
	ret

loc_407B90:
	mov eax, edx
	call sub_407BE0
	test eax, eax
	jz loc_407BA2
	mov eax, 1
	pop edx
	ret

loc_407BA2:
	mov eax, 2
	pop edx
	ret
;sub_407B80 endp

sub_407BB0: ;SUBROUTINE
	cmp eax, 2
	jz loc_407BC9
	cmp eax, 0Ah
	jz loc_407BC9
	cmp eax, 5
	jz loc_407BC9
	cmp eax, 8
	jz loc_407BC9
	cmp eax, 0Eh
	jnz loc_407BCF

loc_407BC9:
	mov eax, 1
	ret

loc_407BCF:
	xor eax, eax
	ret
;sub_407BB0 endp

sub_407BE0: ;SUBROUTINE
	cmp eax, 6
	jz loc_407BF9
	cmp eax, 4
	jz loc_407BF9
	cmp eax, 9
	jz loc_407BF9
	cmp eax, 0Bh
	jz loc_407BF9
	cmp eax, 0Dh
	jnz loc_407BFF

loc_407BF9:
	mov eax, 1
	ret

loc_407BFF:
	xor eax, eax
	ret
;sub_407BE0 endp

sub_407C10: ;SUBROUTINE
	test eax, eax
	jz loc_407C28
	cmp eax, 3
	jz loc_407C28
	cmp eax, 7
	jz loc_407C28
	cmp eax, 1
	jz loc_407C28
	cmp eax, 0Ch
	jnz loc_407C2E

loc_407C28:
	mov eax, 1
	ret

loc_407C2E:
	xor eax, eax
	ret
;sub_407C10 endp

sub_407C40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 4E78h
	mov si, word [dword_512264]
	mov dx, word [dword_512268]
	mov eax, esp
	add esi, edx
	xor ebx, ebx
	movsx edx, si
	xor ecx, ecx
	call sub_41A570
	xor edx, edx
	xor eax, eax

loc_407C6D:
	movsx edi, si
	cmp ecx, edi
	jl loc_407D63
	cmp dword [dword_512208], 1
	jle loc_407D8E
	mov edx, dword [dword_4D76BC]
	xor eax, eax

loc_407C8D:
	mov cx, [edx+eax]
	add eax, 2
	add ebx, ecx
	cmp eax, 12h
	jnz loc_407C8D
	nop

loc_407C9C:
	cmp bx, 1
	jge loc_407CA7
	mov ebx, 1

loc_407CA7:
	mov ecx, dword [dword_512208]
	cmp ecx, 2
	jl loc_407D96

loc_407CB6:
	movsx eax, bx
	movsx ecx, si
	lea edx, [eax+1]
	cmp ecx, edx
	jle loc_407DB5
	lea ebx, [esp+4E60h]
	lea edx, [esp+4E30h]
	mov di, [esp+eax*2+4E60h]
	mov eax, ecx
	call sub_41B2D0
	mov eax, [esp+ecx*2+4E5Ch]
	sar eax, 10h
	imul eax, 684h
	mov edx, [esp+eax+234h]
	movsx eax, di
	imul eax, 684h
	xor ebx, ebx
	add edx, 2EE00h
	xor ecx, ecx
	mov [esp+eax+234h], edx
	mov edx, 3E8h
	xor eax, eax

loc_407D1C:
	movsx edi, si
	cmp ecx, edi
	jl loc_407DE2
	lea ebx, [esp+4E60h]
	lea edx, [esp+4E30h]
	mov eax, edi
	call sub_41B2D0
	xor ebx, ebx
	xor edi, edi

loc_407D40:
	movsx eax, si
	cmp ebx, eax
	jge loc_407DB5
	xor eax, eax
	xor ecx, ecx

loc_407D4B:
	mov edx, [esp+eax+4E5Eh]
	sar edx, 10h
	inc ecx
	cmp edx, ebx
	jz loc_407E29
	add eax, 2
	jmp loc_407D4B

loc_407D63:
	mov edi, [esp+eax+234h]
	mov [esp+edx+4E30h], edi
	mov edi, [esp+eax+278h]
	add edx, 4
	add eax, 684h
	mov [esp+edi*2+4E5Eh], cx
	inc ecx
	jmp loc_407C6D

loc_407D8E:
	mov ebx, esi
	dec ebx
	jmp loc_407C9C

loc_407D96:
	cmp dword [dword_512264], 2
	jl loc_407DA8
	cmp ecx, 1
	jnz loc_407CB6

loc_407DA8:
	cmp dword [dword_512264], 3
	jge loc_407CB6

loc_407DB5:
	xor eax, eax
	xor edx, edx

loc_407DB9:
	movsx ecx, si
	cmp edx, ecx
	jge loc_407E3C
	mov ecx, dword [dword_4D5EF8]
	lea ebx, [ecx+eax]
	inc edx
	mov ecx, [esp+eax+278h]
	add eax, 684h
	mov [ebx+278h], ecx
	jmp loc_407DB9

loc_407DE2:
	mov edi, [esp+eax+21Ch]
	cmp dword [edi], 24h
	jz loc_407E10

loc_407DEE:
	add edx, 3E8h
	add ebx, 4
	mov edi, [esp+eax+234h]
	add eax, 684h
	inc ecx
	mov [esp+ebx+4E2Ch], edi
	jmp loc_407D1C

loc_407E10:
	cmp dword [esp+eax+234h], 0
	jg loc_407DEE
	lea edi, [edx+186A0h]
	mov [esp+eax+234h], edi
	jmp loc_407DEE

loc_407E29:
	add edi, 684h
	inc ebx
	mov [esp+edi-40Ch], ecx
	jmp loc_407D40

loc_407E3C:
	add esp, 4E78h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_407C40 endp

sub_407E50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, dword [dword_4D5EF8]
	xor eax, eax
	mov edx, 1
	mov al, byte [byte_512DFB]
	call sub_4030A0
	mov edx, 10h
	mov ecx, dword [dword_4DAB84]
	mov dword [dword_4DAB84], edx
	call sub_486F1C
	mov edx, dword [dword_4DAB88]
	mov eax, edx
	mov esi, 1
	or al, 4
	xor ebx, ebx
	mov dword [dword_4DAB88], eax
	call sub_408260
	call sub_408260
	call sub_428990
	call sub_47D410
	mov dword [dword_512214], ebx
	call sub_445A60
	mov bl, byte [byte_512DB8]
	call sub_407190
	mov byte [byte_512DB8], al
	mov eax, off_4D3D90
	mov dword [dword_4D2310], esi
	call sub_40F5C0
	mov ebp, eax
	mov byte [byte_512DB8], bl
	xor eax, eax
	xor ebx, ebx
	mov dword [dword_4D2310], eax
	call sub_408BF0
	call sub_4762E0
	mov dword [dword_4D21AC], ebx
	call sub_403080
	call sub_4761E0
	call sub_423C40
	mov edi, dword [dword_4D5EF8]
	mov dword [dword_4DAB84], ecx
	mov dword [dword_4DAB88], edx
	test edi, edi
	jz loc_407FCF
	cmp dword [dword_512214], 0
	jnz loc_407FCF
	cmp dword [dword_5121F8], 2
	jnz loc_407F98
	mov edx, dword [dword_512268]
	mov esi, dword [dword_512264]
	xor eax, eax
	add esi, edx
	mov edx, 9

loc_407F4D:
	inc eax
	mov byte byte_513073[eax], dl
	cmp eax, 9
	jl loc_407F4D
	mov ecx, dword [dword_512208]
	mov dword [dword_4D5EF8], edi
	cmp ecx, 2
	jl loc_407F6F
	call sub_407C40

loc_407F6F:
	mov edi, dword [dword_4D5EF8]
	xor eax, eax
	test esi, esi
	jle loc_407F98
	mov ecx, edi
	xor edx, edx

loc_407F7F:
	inc eax
	mov bl, [ecx+edx+278h]
	add edx, 684h
	mov byte byte_513073[eax], bl
	cmp eax, esi
	jl loc_407F7F
	nop

loc_407F98:
	cmp byte [byte_512DAA], 1
	jnz loc_407FC0
	mov ecx, edi
	xor edx, edx
	xor eax, eax

loc_407FA7:
	inc eax
	mov bl, [ecx+edx+278h]
	add edx, 684h
	mov byte byte_512ACF[eax], bl
	cmp eax, 8
	jl loc_407FA7

loc_407FC0:
	mov eax, edi
	mov dword [dword_4D5EF8], edi
	call sub_4848FC
	xor edi, edi

loc_407FCF:
	mov ebx, dword [dword_4D76B8]
	mov dword [dword_4D5EF8], edi
	test ebx, ebx
	jz loc_407FFE
	cmp word [ebx+2C0h], 6
	jle loc_407FFE
	cmp dword [dword_512214], 2
	jz loc_407FFE
	call sub_41A350
	xor eax, eax
	mov dword [dword_4D76B8], eax

loc_407FFE:
	call sub_4289F0
	mov edi, dword [dword_4D5EF8]
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_407E50 endp

sub_408020: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, sub_4242E0
	mov ebp, 10h
	mov edi, dword [dword_4DAB84]
	xor ah, ah
	xor ebx, ebx
	mov dword [off_4DAC4C], edx
	mov byte [byte_4D1FE8], ah
	mov byte [byte_4D1FE9], ah
	mov dword [dword_4E5508], ebx
	mov dword [dword_4E5514], ebx
	mov dword [dword_4E5510], ebx
	mov dword [dword_4E550C], ebx
	mov dword [dword_4E5504], ebx
	mov dword [dword_4E5500], ebx
	mov dword [dword_4E54F8], ebx
	mov dword [dword_4E54FC], ebx
	mov dword [dword_4DAB84], ebp
	call sub_486F1C
	mov esi, dword [dword_4DAB88]
	mov eax, esi
	or al, 4
	mov dword [dword_4DAB88], eax
	call sub_445A60
	call sub_408260
	mov eax, 11h
	xor edx, edx
	call sub_421FA0
	xor eax, eax
	call sub_422060
	call sub_408260
	call sub_428990
	cmp dword [dword_4D21B0], 0
	jnz loc_4081E2

loc_4080CA:
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512DFB]
	call sub_4030A0
	cmp byte [byte_512DAA], 2
	jnz loc_40821B
	cmp dword [dword_4D76BC], 0
	jnz loc_40821B
	xor ah, ah
	mov byte [byte_512DAA], ah

loc_4080FA:
	mov cl, byte [byte_50B480]
	xor edx, edx
	mov dl, cl
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	mov ebx, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	inc cl
	mov byte [byte_50B480], cl
	mov eax, off_4D3EC4
	mov dword [dword_4D76CC], edx
	call sub_40F5C0 ;Funkcja menu
	mov ecx, eax

loc_408136:
	xor eax, eax
	mov al, byte [byte_512DB0]
	xor ebp, ebp
	call sub_41AE70
	mov dword [dword_512DB4], eax
	call sub_403080
	call sub_4762E0
	mov dword [dword_4D21AC], ebp
	call sub_408BF0
	call sub_423C40
	mov dword [dword_4DAB84], edi
	mov dword [dword_4DAB88], esi
	call sub_4761E0
	cmp byte [byte_512DAA], 1
	jnz loc_408199
	cmp dword [dword_4D76B8], 0
	jnz loc_408199
	cmp dword [dword_512214], 2
	jz loc_408199
	call sub_41A370
	call sub_41A490

loc_408199:
	mov ebx, dword [dword_4D231C]
	test ebx, ebx
	jz loc_4081B2
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4D231C], esi

loc_4081B2:
	mov edi, dword [dword_4D2320]
	test edi, edi
	jz loc_4081CB
	mov eax, edi
	xor ebp, ebp
	call sub_4848FC
	mov dword [dword_4D2320], ebp

loc_4081CB:
	mov eax, dword [dword_4D2324]
	test eax, eax
	jnz loc_40823D
	call sub_4289F0
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4081E2:
	xor edx, edx
	mov dword [dword_4D21B0], edx
	call sub_4083D0
	cmp byte [byte_512ECC], 0
	jnz loc_40820C
	call sub_476250
	mov eax, aTitleav_dct ; "titleav.dct"
	call sub_4242F0
	call sub_4769D0

loc_40820C:
	call sub_408450
	call sub_486F28
	jmp loc_4080CA

loc_40821B:
	cmp byte [byte_512DAA], 2
	jnz loc_40822B
	call sub_4082B4
	mov ecx, eax

loc_40822B:
	cmp byte [byte_512DAA], 2
	jnz loc_4080FA
	jmp loc_408136

loc_40823D:
	xor edx, edx
	call sub_4848FC
	mov dword [dword_4D2324], edx
	call sub_4289F0
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_408020 endp

sub_408260: ;SUBROUTINE
	call sub_428A20
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	call sub_4824BC
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	jmp sub_4824BC
;sub_408260 endp

off_4082A0: dd loc_4082D5
	dd loc_408325 ; jump table for switch statement
	dd loc_40832C
	dd loc_40832C
	dd loc_40832C

sub_4082B4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_4D76BC]
	mov al, byte [byte_512DA9]
	cmp al, 4
	ja loc_4082DA
	and eax, 0FFh ; switch 5 cases
	jmp off_4082A0[eax*4] ; switch jump

loc_4082D5:
	mov ebp, 1 ; jumptable 004082CE case 0

loc_4082DA:
	xor ecx, ecx
	test ebp, ebp
	jle loc_4082F3
	lea esi, [ebp+ebp+0]
	mov ebx, edx
	xor eax, eax

loc_4082E8:
	cmp word [ebx+eax], 0
	jz loc_40839B

loc_4082F3:
	cmp ecx, ebp
	jnz loc_4083B6
	mov dword [dword_4D76BC], edx
	test edx, edx
	jnz loc_4083AC

loc_408309:
	xor bl, bl
	xor edx, edx
	mov byte [byte_512DAA], bl
	mov eax, 0FFFFFFFDh
	mov dword [dword_4D76BC], edx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_408325:
	mov ebp, 2 ; jumptable 004082CE case 1
	jmp loc_4082DA

loc_40832C:
	mov ebx, dword [dword_512264] ; jumptable 004082CE cases 2-4
	xor ecx, ecx
	test ebx, ebx
	jle loc_408346
	lea esi, [ebx+ebx]
	xor eax, eax
	mov ebx, edx

loc_40833F:
	cmp word [ebx+eax], 0
	jz loc_40837C

loc_408346:
	cmp ecx, dword [dword_512264]
	jnz loc_408386

loc_40834E:
	xor ebp, ebp

loc_408350:
	test ebp, ebp
	jle loc_4082DA
	mov edi, 24h
	lea ebx, [ebp+ebp+0]
	mov ecx, edx
	xor eax, eax

loc_408361:
	cmp word [ecx+eax], 0
	jnz loc_40836F
	mov word (dword_512F98+2)[eax], di

loc_40836F:
	add eax, 2
	cmp eax, ebx
	jge loc_4082DA
	jmp loc_408361

loc_40837C:
	add eax, 2
	inc ecx
	cmp eax, esi
	jl loc_40833F
	jmp loc_408346

loc_408386:
	cmp word [word_51345A], 0
	jnz loc_40834E
	mov ebp, dword [dword_513408]
	sar ebp, 10h
	jmp loc_408350

loc_40839B:
	add eax, 2
	inc ecx
	cmp eax, esi
	jl loc_4082E8
	jmp loc_4082F3

loc_4083AC:
	call sub_41A2A0
	jmp loc_408309

loc_4083B6:
	inc byte [byte_512DB0]
	mov eax, 0FFFFFFFDh
	mov dword [dword_4D76BC], edx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4082B4 endp

sub_4083D0: ;SUBROUTINE
	cmp byte [byte_512ECC], 0
	jnz loc_4083DA
	ret

loc_4083DA:
	push edx
	push ecx
	push ebx
	mov dl, byte [byte_4D3E2C]
	mov bl, byte [byte_4D3E68]
	mov cl, byte [byte_4D2FE0]
	mov eax, dword [off_4D26B0]
	or dl, 1
	or bl, 1
	or cl, 1
	mov byte [byte_4D3E2C], dl
	mov byte [byte_4D3E68], bl
	mov byte [byte_4D2FE0], cl
	mov dh, byte [byte_4D3E40]
	mov bh, byte [byte_4D3E7C]
	mov ch, [eax+8]
	or dh, 1
	or bh, 1
	or ch, 1
	mov byte [byte_4D3E40], dh
	mov byte [byte_4D3E7C], bh
	mov edx, 2
	mov [eax+8], ch
	mov word [word_4D3ECE], dx
	pop ebx
	pop ecx
	pop edx
	ret
;sub_4083D0 endp

sub_408450: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 50h
	mov edx, dword [dword_5134B4]
	push edx
	push aStitle_qfs ; "%stitle.qfs"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dl, byte [byte_512ECC]
	mov ecx, eax
	test dl, dl
	jz loc_408499

loc_408483:
	push ebx
	xor ebx, ebx

loc_408486:
	call sub_405A60
	cmp eax, 0Dh
	jnz loc_4084A0

loc_408490:
	mov eax, ebx
	call sub_403550
	jmp loc_408486

loc_408499:
	call sub_408558
	jmp loc_408483

loc_4084A0:
	call sub_424240
	test eax, eax
	jnz loc_408490
	call sub_486F28
	cmp word [byte_4E5518], 0
	jnz loc_4084F5

loc_4084B8:
	call sub_4833C7
	xor edx, edx
	xor ebx, ebx

loc_4084C1:
	call sub_486E5C
	test eax, eax
	jnz loc_408505
	call sub_405A60
	cmp eax, 0Dh
	jz loc_408505
	call sub_424240
	test eax, eax
	jnz loc_408505
	cmp edx, 1F4h
	jge loc_408505
	call sub_4833C7
	add edx, eax
	mov eax, ebx
	call sub_403550
	jmp loc_4084C1

loc_4084F5:
	xor ebx, ebx
	mov word [byte_4E5518], bx
	call sub_408610
	jmp loc_4084B8

loc_408505:
	test ecx, ecx
	jnz loc_40851F

loc_408509:
	xor edx, edx
	pop ebx

loc_40850C:
	call sub_405A60
	cmp eax, 0Dh
	jnz loc_408528

loc_408516:
	mov eax, edx
	call sub_403550
	jmp loc_40850C

loc_40851F:
	mov eax, ecx
	call sub_4848FC
	jmp loc_408509

loc_408528:
	call sub_424240
	test eax, eax
	jnz loc_408516
	call sub_486F28
	add esp, 50h
	pop edx
	pop ecx
	ret
;sub_408450 endp

off_408540: dd loc_40858F
	dd loc_4085AD ; jump table for switch statement
	dd loc_4085B4
	dd loc_4085BB
	dd loc_4085C2
	dd loc_4085C9

sub_408558: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov edx, aBack ; "back"
	call sub_482EB4
	mov ebx, eax
	mov edx, eax
	call sub_428A20
	mov eax, ebx
	call sub_483470
	mov bl, byte [byte_512DFB]
	cmp bl, 5
	ja loc_4085D0
	and ebx, 0FFh ; switch 6 cases
	jmp off_408540[ebx*4] ; switch jump

loc_40858F:
	mov edx, aEngl ; jumptable 00408588 case 0

loc_408594:
	mov eax, ecx
	call sub_482EB4
	mov edx, eax
	mov eax, edx
	call sub_486D10
	call sub_428770
	pop edx
	pop ecx
	pop ebx
	ret

loc_4085AD:
	mov edx, aGerm ; jumptable 00408588 case 1
	jmp loc_408594

loc_4085B4:
	mov edx, aFren ; jumptable 00408588 case 2
	jmp loc_408594

loc_4085BB:
	mov edx, aSpan ; jumptable 00408588 case 3
	jmp loc_408594

loc_4085C2:
	mov edx, aItly ; jumptable 00408588 case 4
	jmp loc_408594

loc_4085C9:
	mov edx, aSwed ; jumptable 00408588 case 5
	jmp loc_408594

loc_4085D0:
	mov dword [dword_4DB1D8], aCNfs2seFront_0 ; "c:\\nfs2se\\frontend\\common\\Front.c"
	xor ecx, ecx
	mov cl, byte [byte_512DFB]
	push ecx
	mov ebx, 2C9h
	push aBugUnsupported ; "BUG: unsupported language <%d>\n"
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 8
	mov eax, edx
	call sub_486D10
	call sub_428770
	pop edx
	pop ecx
	pop ebx
	ret
;sub_408558 endp

sub_408610: ;SUBROUTINE
	push ecx
	push edx

	mov ah, 2
	mov byte [byte_512ECD], ah

	call sub_4879D0 ;Detects the CPU type

	;Set graphics settings to maximum
	xor dl, dl
	mov byte [byte_512ECE], dl
	mov byte [byte_512ECF], dl
	mov byte [byte_512ED0], dl ;View distance
	mov eax, 1
	mov dword [dword_4D69C0], eax
	mov byte [byte_512ED2], dl ;Horizon
	mov byte [byte_512ED1], dl ;Car detail
	mov ecx, 3FC00000h
	mov dword [dword_4D4D20], ecx ;Brightness

	call sub_428990
	pop edx
	pop ecx
	ret
;sub_408610 endp

sub_408730: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	sub esp, 118h
	xor edx, edx
	mov ecx, dword [dword_4D76BC]
	mov [esp+108h], edx
	test ecx, ecx
	jz loc_408905

loc_408750:
	cmp byte [byte_512DA9], 1
	ja loc_408917

loc_40875D:
	push edi
	push esi
	push ebx
	mov esi, dword [dword_5134C8]
	push esi
	push aSconfig_dat ; "%sconfig.dat"
	lea eax, [esp+14h]
	push eax
	lea ecx, [esp+11Ch]
	lea ebx, [esp+120h]
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+118h]
	lea eax, [esp+0Ch]
	call sub_4877BC
	mov edi, [esp+118h]
	test edi, edi
	jnz loc_408926
	mov ecx, 1
	mov ebp, 1
	mov word [byte_4E5518], cx

loc_4087B7:
	call sub_408DF0

loc_4087BC:
	xor dl, dl
	xor ebx, ebx
	xor esi, esi
	mov byte [byte_512DAA], dl
	mov dword [dword_512F48], ebx
	mov byte [byte_512DA9], dl

loc_4087D4:
	add esi, 2
	xor edi, edi
	mov word dword_512F34[esi], di
	cmp esi, 4
	jnz loc_4087D4
	call sub_421F10
	mov esi, 2
	xor edx, edx
	mov [esp+120h], esi
	mov edi, eax
	mov [esp+120h], edx
	test eax, eax
	jle loc_4088A6
	xor esi, esi

loc_40880B:
	cmp dword [esp+120h], 2
	jge loc_4088A6
	mov eax, [esp+11Dh]
	lea ebx, [esp+10Ch]
	lea edx, [esp+108h]
	sar eax, 18h
	call sub_421BD0
	test eax, eax
	jz loc_40888C
	cmp dword [esp+108h], 0
	jz loc_408870
	push 0
	push 0
	push 0
	push 0
	lea edx, [esp+12Ch]
	mov eax, [esp+130h]
	push 0
	xor ecx, ecx
	xor ebx, ebx
	call sub_477C10
	test eax, eax
	jnz loc_408870
	mov [esp+108h], eax

loc_408870:
	mov eax, [esp+108h]
	mov word (dword_512F34+2)[esi], ax
	mov eax, [esp+10Ch]
	mov word word_512F3A[esi], ax

loc_40888C:
	mov ecx, [esp+120h]
	inc ecx
	add esi, 2
	mov [esp+120h], ecx
	cmp edi, ecx
	jg loc_40880B

loc_4088A6:
	call sub_4793B0
	mov byte [byte_512ED3], al
	test edi, edi
	jnz loc_4088B9
	call sub_408A30

loc_4088B9:
	xor eax, eax
	push eax
	call time_wrap
	add esp, 4
	mov word [dword_512D9E+2], ax
	xor eax, eax
	xor eax, eax
	push eax
	call time_wrap
	add esp, 4
	mov byte [byte_50B480], al
	call sub_408B40
	mov eax, aRemote ; "remote"
	mov edx, dword [dword_513468]
	call strcmp_
	test eax, eax
	jnz loc_408A16
	mov al, 1
	mov byte [byte_512ECC], al
	mov eax, ebp
	pop ebx
	pop esi
	pop edi
	add esp, 118h
	pop ebp
	pop edx
	pop ecx
	ret

loc_408905:
	cmp dword [dword_4D76B8], 0
	jnz loc_408750
	jmp loc_40875D

loc_408917:
	mov eax, dword_54B46C
	add esp, 118h
	pop ebp
	pop edx
	pop ecx
	ret

loc_408926:
	mov ebp, [esp+110h]
	cmp ebp, 2ACh
	jz loc_408974
	mov ebx, 1
	mov eax, edi
	mov word [byte_4E5518], bx
	call sub_487950
	mov ecx, dword [dword_5134C8]
	push ecx
	push aSconfig_dat ; "%sconfig.dat"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+0Ch]
	mov ebp, 1
	call sub_4879AE
	jmp loc_4087B7

loc_408974:
	mov eax, aCNfs2seFront_0 ; "c:\\nfs2se\\frontend\\common\\Front.c"
	xor edx, edx
	xor ebx, ebx
	mov word [byte_4E5518], dx
	mov dword [dword_4DB1D8], eax
	mov edx, 23Fh
	mov eax, aFrontend ; "frontend"
	mov dword [dword_4DB1DC], edx
	mov edx, ebp
	mov ecx, 2ACh
	call sub_484498
	mov ebx, [esp+110h]
	mov ebp, eax
	mov edx, eax
	mov eax, [esp+118h]
	mov edi, (dword_512D9E+2)
	call sub_487958
	mov eax, [esp+118h]
	mov esi, ebp
	call sub_487950
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, ebp
	call sub_4848FC
	xor eax, eax
	mov al, byte [byte_512DFE]
	mov dword [dword_4D5A30], eax
	mov dword [dword_4D5A34], eax
	xor eax, eax
	mov al, byte [byte_512DFD]
	mov dword [dword_4D5A2C], eax
	xor eax, eax
	mov al, byte [byte_512DFC]
	xor ebp, ebp
	mov dword [dword_4D5A28], eax
	jmp loc_4087BC

loc_408A16:
	xor al, al
	mov byte [byte_512ECC], al
	mov eax, ebp
	pop ebx
	pop esi
	pop edi
	add esp, 118h
	pop ebp
	pop edx
	pop ecx
	ret
;sub_408730 endp

sub_408A30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov eax, dword [dword_512E0C]
	mov edx, dword [dword_512E10]
	mov ecx, dword [dword_512E14]
	or eax, edx
	mov ebx, dword [dword_512E18]
	or eax, ecx
	mov esi, dword [dword_512E1C]
	or eax, ebx
	mov edi, dword [dword_512E20]
	or eax, esi
	mov ebp, dword [dword_512E24]
	or eax, edi
	mov edx, dword [dword_512E28]
	or eax, ebp
	mov ecx, dword [dword_512E2C]
	or eax, edx
	mov ebx, dword [dword_512E30]
	or eax, ecx
	mov esi, dword [dword_512E34]
	or eax, ebx
	mov edi, dword [dword_512E3C]
	or eax, esi
	mov ebp, dword [dword_512E44]
	or eax, edi
	mov edx, dword [dword_512E4C]
	or eax, ebp
	mov ecx, dword [dword_512E54]
	or eax, edx
	mov ebx, dword [dword_512E5C]
	or eax, ecx
	mov esi, dword [dword_512E64]
	or eax, ebx
	mov edi, dword [dword_512E6C]
	or eax, esi
	mov ebp, dword [dword_512E74]
	or eax, edi
	mov edx, dword [dword_512E7C]
	or eax, ebp
	mov ecx, dword [dword_512E38]
	or eax, edx
	mov ebx, dword [dword_512E40]
	or eax, ecx
	mov esi, dword [dword_512E48]
	or eax, ebx
	mov edi, dword [dword_512E50]
	or eax, esi
	mov ebp, dword [dword_512E58]
	or eax, edi
	mov edx, dword [dword_512E60]
	or eax, ebp
	mov ecx, dword [dword_512E68]
	or eax, edx
	mov ebx, dword [dword_512E70]
	or eax, ecx
	mov esi, dword [dword_512E78]
	or eax, ebx
	mov edi, dword [dword_512E80]
	or eax, esi
	or eax, edi
	call sub_404D40
	test al, 3
	jnz loc_408B33
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_408B33:
	call sub_4090C0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_408A30 endp

sub_408B40: ;SUBROUTINE
	push edx
	mov eax, aEnglish_0 ; "english"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jnz loc_408B5D
	xor ah, ah
	mov byte [byte_512DFB], ah

loc_408B5D:
	mov eax, aGerman_0 ; "german"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jnz loc_408B78
	mov byte [byte_512DFB], 1

loc_408B78:
	mov eax, aFrench_0 ; "french"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jnz loc_408B93
	mov byte [byte_512DFB], 2

loc_408B93:
	mov eax, aSpanish_0 ; "spanish"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jnz loc_408BAE
	mov byte [byte_512DFB], 3

loc_408BAE:
	mov eax, aItalian_0 ; "italian"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jnz loc_408BC9
	mov byte [byte_512DFB], 4

loc_408BC9:
	mov eax, aSwedish_0 ; "swedish"
	mov edx, dword [dword_513464]
	call strcmp_
	test eax, eax
	jz loc_408BDF
	pop edx
	ret

loc_408BDF:
	mov byte [byte_512DFB], 5
	pop edx
	ret
;sub_408B40 endp

sub_408BF0: ;SUBROUTINE
	push ebp
	sub esp, 0FCh
	push edi
	push esi
	push edx
	push ecx
	push ebx
	mov edx, aCNfs2seFront_0 ; "c:\\nfs2se\\frontend\\common\\Front.c"
	mov ecx, 1C2h
	mov esi, (dword_512D9E+2)
	mov al, byte [dword_4D5A30]
	xor ebx, ebx
	mov byte [byte_512DFE], al
	mov dword [dword_4DB1D8], edx
	mov al, byte [dword_4D5A2C]
	mov dword [dword_4DB1DC], ecx
	mov byte [byte_512DFD], al
	mov al, byte [dword_4D5A28]
	mov edx, 2ACh
	mov byte [byte_512DFC], al
	mov eax, aFrontend ; "frontend"
	mov ecx, 2ACh
	call sub_484498
	mov edi, eax
	mov ebp, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ebx, dword [dword_5134C8]
	push ebx
	push aSconfig_dat ; "%sconfig.dat"
	lea eax, [esp+1Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, ebp
	mov edx, ebp
	call sub_484D94
	mov ebx, eax
	lea eax, [esp+14h]
	call sub_4875B0
	mov eax, ebp
	call sub_4848FC
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	add esp, 0FCh
	pop ebp
	ret
;sub_408BF0 endp

sub_408CC0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 50h
	xor eax, eax
	mov al, byte [byte_512DFB]
	call sub_41B730
	mov eax, 2A1h
	mov edi, esp
	call sub_41B710
	mov esi, eax
	push edi

loc_408CE1:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_408CF9
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_408CE1

loc_408CF9:
	pop edi
	mov edi, esp
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp ecx, 8
	jbe loc_408D9D
	push edx
	push ebx
	mov ebx, 8
	lea edx, [esp+8]
	mov eax, dword_512F4C
	call strncpy_
	mov ebx, 8
	lea edx, [esp+8]
	mov eax, byte_512F55
	call strncpy_
	pop ebx
	pop edx

loc_408D39:
	mov esi, dword_4C81BC
	mov edi, dword_512F4C
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_408D4C:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_408D64
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_408D4C

loc_408D64:
	pop edi
	mov esi, dword_4C81C0
	mov edi, byte_512F55
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_408D78:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_408D90
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_408D78

loc_408D90:
	pop edi
	call sub_41B620
	add esp, 50h
	pop edi
	pop esi
	pop ecx
	ret

loc_408D9D:
	mov esi, esp
	mov edi, dword_512F4C
	push edi

loc_408DA5:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_408DBD
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_408DA5

loc_408DBD:
	pop edi
	mov esi, esp
	mov edi, byte_512F55
	push edi

loc_408DC6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_408DDE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_408DC6

loc_408DDE:
	pop edi
	jmp loc_408D39
;sub_408CC0 endp

sub_408DF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov bl, 1
	xor edx, edx
	xor ah, ah
	mov word [dword_512D9E+2], dx
	mov byte [byte_512DA8], ah
	mov byte [byte_512DBC], ah
	mov byte [byte_512DBD], ah
	mov byte [byte_512DAF], bl
	mov byte [byte_512DA9], ah
	mov byte [byte_512DAA], ah
	mov byte [byte_512DAB], bl
	mov byte [byte_512DAC], ah
	mov byte [byte_512DAD], ah
	mov byte [byte_512DAE], bl
	mov byte [byte_512DBA], ah
	mov byte [byte_512DBB], ah
	mov byte [byte_512DB0], ah
	xor edx, edx
	xor eax, eax
	mov dword [dword_512DA4], edx
	call sub_41AE70
	mov dword [dword_512DB4], eax
	mov byte [byte_512DC0], bl
	mov byte [byte_512DDB], bl
	xor dh, dh
	mov eax, 1
	mov byte [byte_512DB8], dh
	mov byte [byte_512DB9], dh
	mov byte [byte_512DBF], dh
	mov byte [byte_512DD1], dh
	mov byte [byte_512DBE], dh
	mov byte [byte_512DD0], dh
	mov byte [byte_512DEB], dh
	call sub_409070
	mov eax, 2
	call sub_409070
	xor edx, edx
	xor eax, eax

loc_408EB4:
	inc eax
	mov bl, byte byte_4D407C[edx]
	mov byte byte_512DDB[eax], bl
	add edx, 2
	mov byte byte_512DC0[eax], bl
	cmp eax, 0Fh
	jl loc_408EB4
	mov ch, 1
	mov bh, 0Ch
	mov byte [byte_512DD6], ch
	mov byte [byte_512DD8], ch
	mov ah, ch
	mov byte [byte_512DD9], ch
	mov byte [byte_512DF2], ch
	mov byte [byte_512DF3], ch
	mov byte [byte_512DF4], ch
	mov cl, 2
	mov byte [byte_512DF5], bh
	mov byte [byte_512DF6], cl
	mov byte [byte_512DF8], ch
	xor ah, ch
	mov byte [byte_512DF9], ch
	mov byte [byte_512DF7], ah
	call sub_408B40
	mov dl, byte [byte_512DFB]
	test dl, dl
	jz loc_409057
	mov byte [byte_512DFA], ch

loc_408F34:
	mov bh, 80h
	mov al, 8
	mov dl, 1
	xor ecx, ecx
	mov byte [byte_512DFD], bh
	mov byte [byte_512DFE], bh
	mov byte [byte_512F42], al
	mov byte [byte_512F3E], dl
	mov byte [byte_512F3F], dl
	mov byte [byte_512DFC], bh
	mov dl, 64h
	xor ah, ah
	mov ebx, 0Ch
	mov byte [byte_512F43], ah
	mov byte [byte_512F40], ah
	mov byte [byte_512F41], ah
	mov byte [byte_512DFF], ah
	mov byte [byte_512E00], ah
	mov al, 2
	mov byte [dword_512ED4], dl
	mov byte [byte_512ECD], al
	mov byte [byte_512ED3], ah

loc_408F99:
	mov edx, ebx
	imul eax, ecx, 0Ch

loc_408F9E:
	add eax, 2
	xor edi, edi
	mov word dword_512ED4[eax], di
	mov word dword_512EEC[eax], 68h
	mov word dword_512F04[eax], 98h
	mov word dword_512F1C[eax], 0FFh
	cmp eax, edx
	jnz loc_408F9E
	inc ecx
	add ebx, 0Ch
	cmp ecx, 2
	jl loc_408F99
	mov esi, dword_4C81B8
	xor dh, dh
	mov edi, byte_512F5E
	mov byte [byte_512ECE], dh
	mov byte [byte_512ECF], dh
	mov byte [byte_512ED0], dh
	mov byte [byte_512ED1], dh
	mov byte [byte_512ED2], dh
	call sub_4090C0
	mov al, 3
	mov byte [byte_512F45], dh
	mov byte [byte_512F44], al
	call sub_408CC0
	push edi

loc_409014:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40902C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_409014

loc_40902C:
	pop edi
	mov esi, dword_4C81B8
	mov edi, word_512F86
	push edi

loc_409038:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_409050
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_409038

loc_409050:
	pop edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_409057:
	mov byte [byte_512DFA], dl
	jmp loc_408F34
;sub_408DF0 endp

sub_409070: ;SUBROUTINE
	push edx
	cmp eax, 1
	jnz loc_40909C
	push ecx
	mov cl, 1
	mov byte [byte_512DD2], cl
	xor ch, ch
	mov byte [byte_512DD3], ch
	mov byte [byte_512DD4], ch
	mov byte [byte_512DD5], cl
	mov byte [byte_512DD7], cl
	pop ecx
	pop edx
	ret

loc_40909C:
	xor dl, dl
	mov ah, 1
	mov byte [byte_512DEE], dl
	mov byte [byte_512DEF], dl
	mov byte [byte_512DF0], ah
	mov byte [byte_512DF1], ah
	mov byte [byte_512DEC], ah
	pop edx
	ret
;sub_409070 endp

sub_4090C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 8
	mov bl, 5Ah
	mov ah, 51h
	mov dl, 57h
	mov bh, 41h
	mov [esp+4], dl
	mov dh, byte [byte_512DFB]
	mov [esp], ah
	cmp dh, 1
	jnz loc_4090E2
	mov bl, 59h

loc_4090E2:
	cmp byte [byte_512DFB], 2
	jnz loc_4090FA
	mov bh, 51h
	mov al, 5Ah
	mov ch, 41h
	mov bl, 57h
	mov [esp+4], al
	mov [esp], ch

loc_4090FA:
	mov edx, 4B00004Bh
	mov eax, 4
	call sub_404D50
	mov edx, 4D00004Dh
	mov dword [dword_512E0C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 48000048h
	mov dword [dword_512E10], eax
	mov eax, 4
	call sub_404D50
	mov edx, 50000050h
	mov dword [dword_512E14], eax
	mov eax, 4
	call sub_404D50
	mov edx, 420030h
	mov dword [dword_512E18], eax
	mov eax, 4
	call sub_404D50
	mov edx, 43002Eh
	mov dword [dword_512E1C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 200039h
	mov dword [dword_512E20], eax
	mov eax, 4
	call sub_404D50
	mov edx, 480023h
	mov dword [dword_512E24], eax
	mov eax, 4
	call sub_404D50
	mov dword [dword_512E28], eax
	xor eax, eax
	mov al, bh
	shl eax, 10h
	lea ecx, [eax+1Eh]
	mov eax, 4
	mov edx, ecx
	call sub_404D50
	mov dword [dword_512E2C], eax
	and ebx, 0FFh
	shl ebx, 10h
	add ebx, 2Ch
	mov eax, 4
	mov edx, ebx
	call sub_404D50
	mov dword [dword_512E30], eax
	mov edx, 4B00004Bh
	mov eax, 4
	call sub_404D50
	mov edx, 4D00004Dh
	mov dword [dword_512E34], eax
	mov eax, 4
	call sub_404D50
	mov edx, 48000048h
	mov dword [dword_512E3C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 50000050h
	mov dword [dword_512E44], eax
	mov eax, 4
	call sub_404D50
	mov edx, 51000051h
	mov dword [dword_512E4C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 49000049h
	mov dword [dword_512E54], eax
	mov eax, 4
	call sub_404D50
	mov edx, 47000047h
	mov dword [dword_512E5C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 4F00004Fh
	mov dword [dword_512E64], eax
	mov eax, 4
	call sub_404D50
	mov edx, 52000052h
	mov dword [dword_512E6C], eax
	mov eax, 4
	call sub_404D50
	mov edx, 53000053h
	mov dword [dword_512E74], eax
	mov eax, 4
	call sub_404D50
	mov edx, 53001Fh
	mov dword [dword_512E7C], eax
	mov eax, 4
	call sub_404D50
	mov dword [dword_512E38], eax
	mov edx, 460021h
	mov eax, 4
	call sub_404D50
	mov edx, 450012h
	mov dword [dword_512E40], eax
	mov eax, 4
	call sub_404D50
	mov edx, 440020h
	mov dword [dword_512E48], eax
	mov eax, 4
	call sub_404D50
	mov dword [dword_512E50], eax
	mov edx, ebx
	mov eax, 4
	call sub_404D50
	mov edx, 520013h
	mov dword [dword_512E58], eax
	mov eax, 4
	call sub_404D50
	mov dword [dword_512E60], eax
	xor eax, eax
	mov al, [esp+4]
	shl eax, 10h
	lea edx, [eax+11h]
	mov eax, 4
	call sub_404D50
	mov edx, 540014h
	mov dword [dword_512E68], eax
	mov eax, 4
	call sub_404D50
	xor edx, edx
	mov dl, [esp]
	mov dword [dword_512E70], eax
	shl edx, 10h
	mov eax, 4
	add edx, 10h
	call sub_404D50
	mov dword [dword_512E78], eax
	mov edx, ecx
	mov eax, 4
	call sub_404D50
	mov dword [dword_512E80], eax
	add esp, 8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4090C0 endp

off_409370: dd loc_409513
	dd loc_409650 ; jump table for switch statement
	dd loc_4096FD
	dd loc_409646
	dd loc_409773
	dd loc_40981B
	dd loc_409891

sub_40938C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 944h
	mov ebp, eax
	mov ah, byte [byte_512DAA]
	xor edx, edx
	xor ecx, ecx
	mov [esp+93Ch], edx
	mov [esp+934h], ecx
	mov edx, 1
	mov [esp+938h], ecx
	mov [esp+940h], edx
	cmp ah, 1
	jnz loc_4095ED
	cmp dword [dword_4D76B8], 0
	jz loc_4095ED
	and byte [byte_4D3910], 0FEh

loc_4093E2:
	call sub_486F28
	mov eax, aReplay_rpy ; "replay.rpy"
	call sub_488570
	test eax, eax
	jz loc_409617
	and byte [byte_4D394C], 0FEh

loc_409400:
	mov eax, ebp
	mov edi, [esp+93Ch]
	call sub_410E80
	test edi, edi
	jnz loc_4095D9

loc_409416:
	cmp dword [dword_512214], 2
	jnz loc_40942A
	mov dword [esp+93Ch], 0FFFFFFFDh

loc_40942A:
	call sub_4833C7
	mov ebx, [esp+938h]
	xor edx, edx
	add ebx, eax
	mov eax, ebp
	mov [esp+938h], ebx
	call sub_40BBE0
	test eax, eax
	jz loc_409623

loc_409450:
	call sub_40EB20
	call sub_428A20
	mov edx, 400h
	mov eax, [ebp+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, ebp
	call sub_40FA90
	call sub_405C70

loc_40949C:
	mov eax, ebp
	call sub_423CA0
	mov [esp+940h], eax

loc_4094AA:
	call sub_405960
	mov ecx, eax
	test ax, ax
	jz loc_4095BE ; jumptable 0040950C default case
	mov eax, [esp+938h]
	cmp eax, [esp+934h]
	jle loc_4095BE ; jumptable 0040950C default case
	add eax, 0Fh
	mov [esp+934h], eax
	mov dword [esp+940h], 1
	cmp cx, 0Dh
	jnz loc_409891 ; jumptable 0040950C case 6
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov ax, [ebp+0Ah]
	cmp ax, 6 ; switch 7 cases
	ja loc_4095BE ; jumptable 0040950C default case
	and eax, 0FFFFh
	jmp off_409370[eax*4] ; switch jump

loc_409513:
	mov eax, 2FCh ; jumptable 0040950C case 0
	lea edi, [esp+8CCh]
	mov ecx, 2
	mov ebx, 8
	call sub_41B710
	mov esi, eax
	mov edx, 2E5h
	push edi

loc_409536:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40954E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_409536

loc_40954E:
	pop edi
	lea eax, [esp+8CCh]
	call sub_402460
	test eax, eax
	jz loc_4095BE ; jumptable 0040950C default case
	lea eax, [esp+8CCh]
	push eax
	mov edx, dword [dword_5134C0]
	push edx
	push aSS_tou ; "%s%s.tou"
	lea eax, [esp+90Ch]
	push eax
	call sprintf_
	add esp, 10h
	lea eax, [esp+900h]
	call sub_488570
	test eax, eax
	jz loc_4095B2
	push 2F9h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_4095BE ; jumptable 0040950C default case
	lea eax, [esp+900h]
	call sub_4879AE

loc_4095B2:
	lea eax, [esp+900h]
	call sub_409D90

loc_4095BE:
	cmp dword [dword_512214], 2 ; jumptable 0040950C default case
	jz loc_4098A7
	cmp dword [esp+93Ch], 0
	jz loc_409416

loc_4095D9:
	mov eax, [esp+93Ch]
	add esp, 944h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4095ED:
	mov dl, byte [byte_4D3910]
	or dl, 1
	mov bx, [ebp+0Ah]
	mov byte [byte_4D3910], dl
	test bx, bx
	jnz loc_4093E2
	mov ecx, 1
	mov [ebp+0Ah], cx
	jmp loc_4093E2

loc_409617:
	or byte [byte_4D394C], 1
	jmp loc_409400

loc_409623:
	mov esi, [esp+940h]
	test si, si
	jnz loc_409450
	call sub_423B90
	test si, si
	jz loc_40949C
	jmp loc_4094AA

loc_409646:
	call sub_4098D0 ; jumptable 0040950C case 3
	jmp loc_4095BE ; jumptable 0040950C default case

loc_409650:
	mov al, byte [byte_512DAA] ; jumptable 0040950C case 1
	mov edx, 1
	cmp al, 1
	jnz loc_40968F
	cmp dword [dword_4D76B8], 0
	jz loc_40968F
	push 2EDh
	push edx
	call sub_401AE0
	add esp, 8
	mov ebx, [esp+93Ch]
	mov edx, eax
	test ebx, ebx
	jz loc_40968F
	xor esi, esi
	call sub_41A350
	mov dword [dword_4D76B8], esi

loc_40968F:
	test edx, edx
	jz loc_4095BE ; jumptable 0040950C default case
	mov edx, esp
	mov eax, a_tou ; "*.tou"
	xor ebx, ebx
	call sub_4099A0
	xor edx, edx
	call sub_401090
	cmp eax, 0FFFFFFFFh
	jz loc_4095BE ; jumptable 0040950C default case
	lea edx, [eax+eax*8]
	mov eax, esp
	add eax, edx
	push eax
	mov edi, dword [dword_5134C0]
	push edi
	push aSS_tou ; "%s%s.tou"
	lea eax, [esp+90Ch]
	push eax
	call sprintf_
	add esp, 10h
	lea eax, [esp+900h]
	call sub_409BF0
	test eax, eax
	jz loc_4095BE ; jumptable 0040950C default case
	mov dword [esp+93Ch], 0FFFFFFFBh
	jmp loc_4095BE ; jumptable 0040950C default case

loc_4096FD:
	mov edx, esp ; jumptable 0040950C case 2
	mov eax, a_tou ; "*.tou"
	xor ebx, ebx
	call sub_4099A0
	xor edx, edx
	call sub_401090
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jz loc_4095BE ; jumptable 0040950C default case
	push 2EFh
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_4095BE ; jumptable 0040950C default case
	mov eax, esp
	lea edx, [edx+edx*8]
	add eax, edx
	push eax
	mov edx, dword [dword_5134C0]
	push edx
	push aSS_tou ; "%s%s.tou"
	lea eax, [esp+90Ch]
	push eax
	call sprintf_
	add esp, 10h
	lea eax, [esp+900h]
	call sub_4879AE
	mov eax, 2F0h
	call sub_402CD0
	jmp loc_4095BE ; jumptable 0040950C default case

loc_409773:
	mov eax, aReplay_rpy ; jumptable 0040950C case 4
	call sub_488570
	test eax, eax
	jz loc_4097EB
	mov eax, 2E9h
	mov edx, esp
	call sub_41B710
	mov ebx, eax
	mov eax, a_rpy ; "*.rpy"

loc_409794:
	call sub_4099A0
	xor edx, edx
	call sub_401090
	mov edx, eax
	cmp edx, 0FFFFFFFFh
	jz loc_4095BE ; jumptable 0040950C default case
	test edx, edx
	jnz loc_4097F6
	mov eax, aReplay_rpy ; "replay.rpy"
	call sub_488570
	test eax, eax
	jz loc_4097F6
	xor cl, cl
	mov [esp+900h], cl

loc_4097C6:
	mov edx, 1
	lea eax, [esp+900h]
	xor ch, ch
	mov word [word_4D21A4], dx
	call sub_409B30
	mov byte [byte_512DA9], ch
	jmp loc_4095BE ; jumptable 0040950C default case

loc_4097EB:
	mov edx, esp
	mov eax, a_rpy ; "*.rpy"
	xor ebx, ebx
	jmp loc_409794

loc_4097F6:
	mov eax, esp
	lea edx, [edx+edx*8]
	add eax, edx
	push eax
	mov eax, dword [dword_5134C0]
	push eax
	push aSS_rpy ; "%s%s.rpy"
	lea eax, [esp+90Ch]
	push eax
	call sprintf_
	add esp, 10h
	jmp loc_4097C6

loc_40981B:
	mov edx, esp ; jumptable 0040950C case 5
	mov eax, a_rpy ; "*.rpy"
	xor ebx, ebx
	call sub_4099A0
	xor edx, edx
	call sub_401090
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jz loc_4095BE ; jumptable 0040950C default case
	push 2F5h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_4095BE ; jumptable 0040950C default case
	mov eax, esp
	lea edx, [edx+edx*8]
	add eax, edx
	push eax
	mov edi, dword [dword_5134C0]
	push edi
	push aSS_rpy ; "%s%s.rpy"
	lea eax, [esp+90Ch]
	push eax
	call sprintf_
	add esp, 10h
	lea eax, [esp+900h]
	call sub_4879AE
	mov eax, 2F6h
	call sub_402CD0
	jmp loc_4095BE ; jumptable 0040950C default case

loc_409891:
	movsx edx, cx ; jumptable 0040950C case 6
	mov eax, ebp
	call sub_410414
	mov [esp+93Ch], eax
	jmp loc_4095BE ; jumptable 0040950C default case

loc_4098A7:
	mov dword [esp+93Ch], 0FFFFFFFDh
	mov eax, [esp+93Ch]
	add esp, 944h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40938C endp

sub_4098D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 10Ch
	mov eax, 2FCh
	lea edi, [esp+100h]
	mov ecx, 2
	mov ebx, 8
	call sub_41B710
	mov esi, eax
	mov edx, 2E6h
	push edi

loc_4098FE:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_409916
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4098FE

loc_409916:
	pop edi
	lea eax, [esp+100h]
	call sub_402460
	test eax, eax
	jnz loc_409933

loc_409927:
	add esp, 10Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_409933:
	lea eax, [esp+100h]
	push eax
	mov edx, dword [dword_5134C0]
	push edx
	push aSS_rpy ; "%s%s.rpy"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	mov eax, esp
	call sub_488570
	test eax, eax
	jz loc_409985
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	push 2F9h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_409927
	mov eax, esp
	call sub_4879AE

loc_409985:
	mov eax, esp
	call sub_409B90
	add esp, 10Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4098D0 endp

sub_4099A0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov esi, eax
	mov ebp, edx
	mov [esp+100h], ebx
	mov edi, edx
	lea ecx, [edx+8CAh]

loc_4099BD:
	mov byte [edi], 0
	add edi, 9
	cmp edi, ecx
	jnz loc_4099BD
	mov edx, [esp+100h]
	xor ebx, ebx
	test edx, edx
	jz loc_4099D9
	mov ebx, 1

loc_4099D9:
	mov eax, esp
	call sub_45AD10
	mov eax, dword [dword_5134C0]
	call sub_488396
	mov eax, esi
	call sub_48846C
	mov ecx, eax
	test eax, eax
	jz loc_409AAA
	mov dl, 2Eh
	mov esi, eax

loc_4099FF:
	mov al, [esi]
	cmp al, dl
	jz loc_409A17
	cmp al, 0
	jz loc_409A15
	inc esi
	mov al, [esi]
	cmp al, dl
	jz loc_409A17
	inc esi
	cmp al, 0
	jnz loc_4099FF

loc_409A15:
	sub esi, esi

loc_409A17:
	mov byte [esi], 0
	lea esi, 0[ebx*8]
	add esi, ebx
	lea edi, [esi+ebp]
	mov esi, ecx
	inc ebx
	push edi

loc_409A2A:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_409A42
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_409A2A

loc_409A42:
	pop edi
	cmp ebx, 0FAh
	jge loc_409AAA
	lea ecx, 0[ebx*8]
	add ecx, ebx
	mov dl, 2Eh
	add ecx, ebp

loc_409A58:
	call sub_4883C0
	mov edi, eax
	test eax, eax
	jz loc_409AAA
	mov esi, edi

loc_409A65:
	mov al, [esi]
	cmp al, dl
	jz loc_409A7D
	cmp al, 0
	jz loc_409A7B
	inc esi
	mov al, [esi]
	cmp al, dl
	jz loc_409A7D
	inc esi
	cmp al, 0
	jnz loc_409A65

loc_409A7B:
	sub esi, esi

loc_409A7D:
	mov byte [esi], 0
	mov esi, edi
	mov edi, ecx
	inc ebx
	push edi

loc_409A86:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_409A9E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_409A86

loc_409A9E:
	pop edi
	add ecx, 9
	cmp ebx, 0FAh
	jl loc_409A58

loc_409AAA:
	mov eax, esp
	mov ecx, [esp+100h]
	call sub_488396
	xor ebx, ebx
	test ecx, ecx
	jnz loc_409AE4

loc_409ABE:
	lea ecx, 0[ebx*4]
	lea edi, 0[ebx*8]
	add edi, ebx
	add edi, ebp

loc_409AD0:
	cmp byte [edi], 0
	jz loc_409AEB
	inc ebx
	mov dword dword_4E5528[ecx], edi
	add ecx, 4
	add edi, 9
	jmp loc_409AD0

loc_409AE4:
	mov ebx, 1
	jmp loc_409ABE

loc_409AEB:
	xor ebx, ebx
	mov esi, [esp+100h]
	mov dword dword_4E5528[ecx], ebx
	test esi, esi
	jnz loc_409B0E
	mov eax, dword_4E5528
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_409B0E:
	mov dword [dword_4E5528], esi
	mov eax, dword_4E5528
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4099A0 endp

sub_409B30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp byte [eax], 0
	jnz loc_409B46

loc_409B38:
	mov dword [dword_512214], 2
	pop edx
	pop ecx
	pop ebx
	ret

loc_409B46:
	xor edx, edx
	call sub_486F40
	mov ecx, eax
	test eax, eax
	jz loc_409B7F
	mov eax, aReplay_rpy ; "replay.rpy"
	call sub_4879AE
	mov eax, ecx
	mov edx, ecx
	call sub_484D94
	mov ebx, eax
	mov eax, aReplay_rpy ; "replay.rpy"
	call sub_4875B0
	mov edx, eax
	mov eax, ecx
	call sub_4848FC
	test edx, edx
	jnz loc_409B38

loc_409B7F:
	mov eax, 2F4h
	call sub_402CD0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_409B30 endp

sub_409B90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	mov eax, aReplay_rpy ; "replay.rpy"
	xor edx, edx
	call sub_486F40
	mov ecx, eax
	test eax, eax
	jz loc_409BD4
	call sub_484D94
	mov ebx, eax
	mov edx, ecx
	mov eax, esi
	call sub_4875B0
	mov esi, eax
	mov eax, ecx
	call sub_4848FC
	test esi, esi
	jz loc_409BD4
	mov eax, 2F2h
	call sub_402CD0
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_409BD4:
	mov eax, 2F3h
	call sub_402CD0
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_409B90 endp

sub_409BF0: ;SUBROUTINE
	push ebx
	push edx
	push ebp
	sub esp, 20h
	xor edx, edx
	call sub_486F40
	xor ebx, ebx
	mov ebp, eax
	test eax, eax
	jz loc_409D23
	cmp dword [dword_4D76B8], 0
	jz loc_409CD2

loc_409C16:
	push edi
	push esi
	push ecx
	mov ecx, dword [dword_4D76B8]
	test ecx, ecx
	jz loc_409D06
	mov edi, ecx
	mov esi, ebp
	mov ecx, 2C8h
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, dword [dword_4D76B8]
	movsx eax, word [eax]
	cmp eax, 2C8h
	jnz loc_409CDC
	mov eax, 180h
	call sub_402CD0
	mov edx, dword [dword_4D76B8]
	mov eax, (dword_512D9E+2)
	add edx, 4
	xor ecx, ecx
	call sub_409D40

loc_409C72:
	mov edx, dword [dword_4D76B8]
	movsx eax, cx
	mov dx, [edx+eax*2+2B0h]
	inc ecx
	mov [esp+eax*2+1Ch], dx
	cmp cx, 8
	jl loc_409C72
	lea ebx, [esp+0Ch]
	lea edx, [esp+1Ch]
	mov eax, 8
	call sub_41B470
	xor ecx, ecx

loc_409CA3:
	movsx eax, cx
	mov eax, [esp+eax*2+0Ah]
	sar eax, 10h
	mov byte byte_512AD0[eax], cl
	inc ecx
	cmp cx, 8
	jl loc_409CA3
	mov ebx, 1
	mov eax, ebp
	call sub_4848FC
	pop ecx
	pop esi
	pop edi
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edx
	pop ebx
	ret

loc_409CD2:
	call sub_41A370
	jmp loc_409C16

loc_409CDC:
	call sub_41A350
	xor esi, esi
	mov eax, 2F4h
	mov dword [dword_4D76B8], esi
	call sub_402CD0
	mov eax, ebp
	call sub_4848FC
	pop ecx
	pop esi
	pop edi
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edx
	pop ebx
	ret

loc_409D06:
	mov eax, 2F4h
	call sub_402CD0
	mov eax, ebp
	call sub_4848FC
	pop ecx
	pop esi
	pop edi
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edx
	pop ebx
	ret

loc_409D23:
	mov eax, 2F4h
	call sub_402CD0
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edx
	pop ebx
	ret
;sub_409BF0 endp

sub_409D40: ;SUBROUTINE
	push ebx
	push ecx
	mov bl, [edx+9]
	mov byte [eax+0Ah], 1
	mov [eax+9], bl
	mov bl, [edx+0Bh]
	mov [eax+0Bh], bl
	mov bl, [edx+10h]
	mov [eax+10h], bl
	mov bl, [edx+5Ah]
	mov [eax+5Ah], bl
	mov bl, [edx+1Fh]
	mov [eax+1Fh], bl
	mov bl, [edx+20h]
	xor ecx, ecx
	mov [eax+20h], bl
	mov cl, [edx+1Fh]
	add ecx, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	add edx, eax
	mov al, [ecx+21h]
	mov [edx+21h], al
	pop ecx
	pop ebx
	ret
;sub_409D40 endp

sub_409D90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov edx, dword [dword_4D76B8]
	test edx, edx
	jnz loc_409DA9
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_409DA9:
	mov ecx, 2ACh
	mov esi, (dword_512D9E+2)
	lea edi, [edx+4]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edx, dword [dword_4D76B8]
	mov ebx, 2C8h
	mov eax, ebp
	mov word [edx], 2C8h
	call sub_4875B0
	test eax, eax
	jz loc_409DF2
	mov eax, 2F1h
	call sub_402CD0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_409DF2:
	mov eax, 2F3h
	call sub_402CD0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_409D90 endp

off_409E10: dd aTrk6
	dd aTrk5 ; "trk5"
	dd aTrk8 ; "trk8"
	dd aTrk4 ; "trk4"
	dd aTrk1 ; "trk1"
	dd aTrk3 ; "trk3"
	dd aTrk2 ; "trk2"
	dd aTrk7 ; "trk7"
off_409E30: dd aCar1
	dd aCar9 ; "car9"
	dd aCarc ; "carc"
	dd aCar7 ; "car7"
	dd aCar8 ; "car8"
	dd aCara ; "cara"
	dd aCar4 ; "car4"
	dd aCar6_1 ; "car6"
	dd aCar3 ; "car3"
	dd aCarb ; "carb"
	dd aCar5 ; "car5"
	dd aCar2 ; "car2"
	dd aCarf ; "carf"
	dd aCare ; "care"
	dd aCard ; "card"
	dd 0
off_409E70: dd aCar1
	dd aCar9 ; "car9"
	dd aCarc ; "carc"
	dd aCar7 ; "car7"
	dd aCar8 ; "car8"
	dd aCara ; "cara"
	dd aCar4 ; "car4"
	dd aCar6_1 ; "car6"
	dd aCar3 ; "car3"
	dd aCarb ; "carb"
	dd aCar5 ; "car5"
	dd aCar2 ; "car2"
	dd aClsa ; "clsa"
	dd aClsb ; "clsb"
	dd aClsc ; "clsc"
	dd 0
off_409EB0: dd aCome
	dd aComg ; "comg"
	dd aComf ; "comf"
	dd aComs ; "coms"
	dd aComi ; "comi"
	dd aComw ; "comw"
dword_409EC8: dd 60h, 61h, 63h, 67h, 64h, 66h, 69h, 6Bh, 62h, 65h, 68h
	dd 6Ah
dword_409EF8: times 2 dd 7Ch
	dd 7Eh, 7Ch, 7Dh, 7Eh, 7Dh, 7Ch, 7Eh, 7Dh
	dd 7Eh, 7Dh
off_409F28: dd aGren_0
	dd aRedd_0 ; "redd"
	dd aYell_0 ; "yell"
	dd aBlue ; "blue"
off_409F38: dd aSin
	dd aTwo ; "two"
	dd aMod ; "mod"
	dd aLnk ; "lnk"
	dd aNet ; "net"
	dd aOva ; "ova"
	dd aOva ; "ova"
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd aRac ; "rac"
	dd aTrn ; "trn"
	dd aNok ; "nok"
	dd aSlt ; "slt"
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd aCir ; "cir"
	dd aOut ; "out"
	dd aLrs ; "Lrs"
	dd aNor ; "nor"
	dd aPac ; "pac"
	dd aMed ; "med"
	dd aHim ; "him"
	dd aMon ; "mon"
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd dword_4C8478
	dd aMac ; "mac"
	dd aF50 ; "F50"
	dd a355 ; "355"
	dd aFgt ; "fgt"
	dd aInd ; "ind"
	dd aMus ; "mus"
	dd aJag ; "jag"
	dd aLgt ; "lgt"
	dd aLv8 ; "lv8"
	dd aNas ; "nas"
	dd aCal ; "Cal"
	dd aIsd ; "isd"
	dd aBom ; "bom"
	dd aTom ; "tom"
	dd aFzr ; "fzr"
	dd aTko ; "tko"
	dd aA_0 ; "A"
	dd aB_0 ; "B"
	dd aC_1 ; "C"
	times 3 dd 0
off_40A098: dd aEngl_1
	dd aGerm_0 ; "germ"
	dd aFren_0 ; "fren"
	dd aSpan_0 ; "span"
	dd aItly_0 ; "itly"
	dd aSwed_0 ; "swed"

sub_40A0B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov edx, eax
	mov ecx, 6
	mov edi, esp
	xor ebx, ebx
	mov esi, off_40A098
	mov [esp+18h], ebx
	rep movsd
	call sub_4762E0
	mov ecx, 40CCh
	mov eax, edx
	mov dword [dword_4D2310], ebx
	call sub_410E80
	mov ebx, 64h
	mov edx, 3000h
	mov eax, dword [dword_4D4D24]
	mov [esp+1Ch], ecx
	call sub_4825A8
	mov eax, 0FF000000h
	mov ecx, 32h
	call sub_48266C
	call sub_482740
	mov eax, aKnwd ; "knwd"
	call sub_405B30
	mov ecx, 1Eh
	mov ebx, 12Ch
	mov edx, 3000h
	mov eax, aChy2 ; "chy2"
	call sub_405B30
	call sub_4824BC
	xor eax, eax
	mov dword [dword_4EB584], eax
	mov eax, dword [dword_4D4D24]
	xor edx, edx
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_428250
	mov eax, dword [dword_4D4D24]
	mov edx, 400h
	call sub_4825A8
	mov eax, aBac1 ; "Bac1"
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esp+eax*4]
	call sub_405B30
	call sub_4824BC
	xor edx, edx
	mov eax, dword [dword_4D4D24]
	mov dword [dword_4EB588], edx
	mov eax, [eax+20h]
	mov edx, 1
	mov esi, 0FFFFFFFFh
	call sub_428250
	mov eax, 13h
	mov edx, dword [dword_4D5A28]
	mov [esp+20h], esi
	call sub_476750
	xor edx, edx

loc_40A1BF:
	call sub_405960
	test eax, eax
	jnz loc_40A1D1
	call sub_424240
	test eax, eax
	jz loc_40A1DA

loc_40A1D1:
	mov eax, edx
	call sub_403550
	jmp loc_40A1BF

loc_40A1DA:
	mov dword [esp+2Ch], 1C2h

loc_40A1E2:
	mov eax, [esp+1Ch]
	mov ebx, [esp+2Ch]
	neg eax
	cmp eax, ebx
	jge loc_40A42B
	mov eax, 50h
	call sub_486550
	test eax, eax
	jz loc_40A209
	lea edx, [ebx-0Ah]
	mov [esp+2Ch], edx

loc_40A209:
	mov eax, 48h
	call sub_486550
	test eax, eax
	jnz loc_40A3BD

loc_40A21B:
	mov eax, 5
	call sub_4833E7
	push 2
	xor ebx, ebx
	call sub_497680
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, 20h
	mov eax, 1
	xor edx, edx
	call sub_427B30
	push 1C2h
	mov eax, dword [dword_4DAB7C]
	push eax
	push 64h
	mov edi, 1
	mov esi, [esp+38h]
	push 0
	mov dword [dword_4D20A0], edi
	mov edi, 35Eh
	call sub_497714

loc_40A271:
	mov eax, dword [dword_4DAB7C]
	sar eax, 1
	mov [esp+24h], eax
	mov eax, edi
	call sub_41B6D0
	cmp eax, 4
	jnb loc_40A3E1
	cmp eax, 2
	jnz loc_40A29A
	test ebp, ebp
	jz loc_40A298
	sub esi, 1Ah

loc_40A298:
	xor ebp, ebp

loc_40A29A:
	cmp esi, 4Ah
	jle loc_40A310
	cmp esi, 1DCh
	jge loc_40A310
	mov eax, edi
	call sub_41B6D0
	cmp eax, 4
	jnz loc_40A2E3
	mov eax, edi
	call sub_41B6D0
	cwde
	push eax
	mov eax, edi
	call sub_41B690
	cwde
	push eax
	mov eax, [esp+2Ch]
	mov ecx, 12h
	add eax, 0Ah
	movsx ebx, si
	movsx edx, ax
	mov eax, asc_4C869C ; ":"
	call sub_4054E0

loc_40A2E3:
	mov eax, edi
	call sub_41B6D0
	cwde
	mov edx, [esp+22h]
	push eax
	mov eax, edi
	mov ecx, 12h
	call sub_41B690
	cwde
	movsx ebx, si
	push eax
	mov eax, edi
	sar edx, 10h
	call sub_41B710
	call sub_4054E0

loc_40A310:
	cmp edi, 5DAh
	jnz loc_40A331
	cmp esi, 6Eh
	jg loc_40A331
	mov eax, [esp+1Ch]
	mov edx, eax
	mov [esp+2Ch], eax
	neg edx
	mov [esp+28h], esi
	mov [esp+2Ch], edx

loc_40A331:
	cmp edi, 5D0h
	jnz loc_40A358
	cmp esi, 0FFFFFF9Ch
	jle loc_40A358
	cmp esi, 1C2h
	jge loc_40A358
	push 0FFFFFFFFh
	mov ecx, 20h
	mov ebx, esi
	xor edx, edx
	xor eax, eax
	call sub_427B30

loc_40A358:
	inc edi
	add esi, 1Ah
	cmp edi, 5DCh
	jle loc_40A271
	mov ecx, dword [dword_4DAB80]
	push ecx
	mov ebx, dword [dword_4DAB7C]
	push ebx
	push 0
	push 0
	call sub_497714
	call sub_4976B8
	call sub_4833F3
	call sub_405960
	cmp eax, 0Dh
	jnz loc_40A410

loc_40A39B:
	mov eax, [esp+1Ch]
	mov esi, 1
	mov edi, eax
	mov [esp+2Ch], eax
	neg edi
	mov [esp+18h], esi
	mov [esp+2Ch], edi
	dec dword [esp+2Ch]
	jmp loc_40A1E2

loc_40A3BD:
	mov ecx, [esp+2Ch]
	add ecx, 7
	mov [esp+2Ch], ecx
	cmp ecx, 1C2h
	jle loc_40A21B
	mov dword [esp+2Ch], 1C2h
	jmp loc_40A21B

loc_40A3E1:
	mov edx, [esp+24h]
	sub edx, 14h
	cmp eax, 4
	ja loc_40A3FE
	mov ebp, 1
	add esi, 0Dh
	mov [esp+24h], edx
	jmp loc_40A29A

loc_40A3FE:
	cmp eax, 5
	jnz loc_40A29A
	mov [esp+24h], edx
	jmp loc_40A29A

loc_40A410:
	cmp eax, 1Bh
	jz loc_40A39B
	call sub_424240
	test eax, eax
	jnz loc_40A39B
	dec dword [esp+2Ch]
	jmp loc_40A1E2

loc_40A42B:
	xor esi, esi
	mov edi, [esp+18h]
	mov dword [dword_4D20A0], esi
	test edi, edi
	jz loc_40A469

loc_40A43B:
	call sub_4762E0
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	mov esi, 1
	call sub_476750
	mov eax, [esp+20h]
	mov dword [dword_4D2310], esi
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40A469:
	mov ebp, 7Fh
	mov eax, 6
	mov ebx, dword [dword_4D5A30]
	mov edx, ebp
	mov dword [dword_4D5A30], ebp
	call sub_4423F0
	mov eax, 64h
	call sub_483410
	mov edx, ebp
	mov eax, 4
	mov [esp+24h], esi
	call sub_4423F0
	mov dword [dword_4D5A30], ebx
	mov ebp, 12h

loc_40A4AB:
	mov eax, 5
	call sub_4833E7
	push 2
	mov esi, [esp+2Ch]
	xor ebx, ebx
	call sub_497680
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, 20h
	mov eax, 1
	xor edx, edx
	mov edi, 5DAh
	call sub_427B30
	mov eax, [esp+24h]
	mov edx, 1
	add eax, 140h
	mov dword [dword_4D20A0], edx
	mov [esp+30h], ax

loc_40A4FA:
	mov eax, edi
	mov edx, [esp+2Eh]
	call sub_41B6D0
	cwde
	movsx ebx, si
	push eax
	mov eax, edi
	mov ecx, ebp
	call sub_41B690
	cwde
	sar edx, 10h
	push eax
	mov eax, edi
	add esi, 1Ah
	call sub_41B710
	inc edi
	call sub_4054E0
	cmp edi, 5DCh
	jle loc_40A4FA
	call sub_4976B8
	call sub_4833F3
	mov eax, [esp+24h]
	mov ecx, [esp+24h]
	add eax, 2
	add ecx, eax
	mov [esp+24h], ecx
	cmp ecx, 258h
	jl loc_40A4AB
	jmp loc_40A43B
;sub_40A0B0 endp

sub_40A570: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 70h
	mov esi, eax
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512F3F]
	mov [esp+4], edx
	mov [esp+2Ch], eax
	mov eax, 0FFFFFFFFh
	mov [esp+58h], edx
	call sub_48883C
	test al, 0Ch
	jnz loc_40A5B5
	mov ah, byte [byte_4D32E4]
	mov dl, 1
	or ah, 1
	mov byte [byte_512F41], dl
	mov byte [byte_4D32E4], ah

loc_40A5B5:
	mov eax, esi
	call sub_410E80
	xor eax, eax
	mov al, byte [byte_512DFF]
	mov [esp+20h], eax
	xor eax, eax
	mov al, byte [byte_512F41]
	mov edx, dword [dword_4D5A30]
	mov [esp], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DFE], al
	xor eax, eax
	mov al, byte [byte_512DFE]
	mov edx, dword [dword_4D5A2C]
	mov [esp+18h], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DFD], al
	xor eax, eax
	mov al, byte [byte_512DFD]
	mov edx, dword [dword_4D5A28]
	mov [esp+14h], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DFC], al
	xor eax, eax
	mov al, byte [byte_512DFC]
	mov [esp+1Ch], eax
	xor eax, eax
	mov al, byte [byte_512F40]
	mov dx, [esi+0Ah]
	mov [esp+5Ch], eax
	test dx, dx
	jle loc_40AEC6
	cmp dx, 3
	jge loc_40AEC6
	mov eax, dword [dword_4D5A2C]

loc_40A693:
	call sub_489800
	mov edx, aLaul ; "laul"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar eax, 14h
	sub eax, 17h
	mov edx, aRaul ; "raul"
	mov [esp+50h], eax
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, eax
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar eax, 14h
	sub eax, 17h
	mov ecx, [edx+0Ch]
	mov [esp+54h], eax
	call sub_486F28
	mov eax, [edx+4]
	xor ebx, ebx
	sar eax, 10h
	mov [esp+34h], ebx
	sub eax, 2
	shl ecx, 4
	mov [esp+4Ch], eax
	mov eax, 1
	sar ecx, 14h
	mov [esp+6Ch], eax
	lea eax, [ecx+3Ch]
	mov ebp, [edx+2]
	mov [esp+10h], eax
	lea eax, [ecx+21h]
	sar ebp, 10h
	add ecx, 6
	mov [esp+8], eax
	mov [esp+0Ch], ecx

loc_40A71D:
	xor eax, eax
	call sub_403550
	cmp byte [byte_512F3F], 0
	jz loc_40AED0
	mov bh, byte [byte_4D32C8]
	xor cl, cl
	or bh, 1
	mov byte [byte_512F40], cl
	mov byte [byte_4D32C8], bh

loc_40A748:
	xor eax, eax
	mov edx, [esp+5Ch]
	mov al, byte [byte_512F40]
	cmp eax, edx
	jz loc_40A790
	test al, al
	jbe loc_40AEDC
	cmp al, 11h
	jnb loc_40AEDC
	mov eax, 2
	call sub_4766D0
	mov ecx, eax
	call sub_476280
	mov edx, dword [dword_4D5A28]
	mov eax, ecx
	call sub_476350

loc_40A785:
	xor eax, eax
	mov al, byte [byte_512F40]
	mov [esp+5Ch], eax

loc_40A790:
	mov edx, [esp+58h]
	call sub_4833C7
	add edx, eax
	mov [esp+58h], edx
	mov eax, esi
	xor edx, edx
	call sub_40BBE0
	test eax, eax
	jz loc_40A7B4
	mov dword [esp+6Ch], 1

loc_40A7B4:
	mov eax, [esi+8]
	sar eax, 10h
	mov [esp+28h], edi
	mov [esp+24h], eax
	mov ah, byte [byte_512ECC]
	xor edi, edi
	test ah, ah
	jnz loc_40A812
	mov ecx, [esp+4Ch]
	mov edx, [esp+0Ch]
	mov eax, [esp+50h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40A7F0
	mov edi, 1
	mov word [esi+0Ah], 0

loc_40A7F0:
	mov ecx, [esp+4Ch]
	mov edx, [esp+8]
	mov eax, [esp+50h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40A812
	mov edi, 1
	mov word [esi+0Ah], 1

loc_40A812:
	mov ecx, [esp+4Ch]
	mov edx, [esp+10h]
	mov eax, [esp+50h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40A834
	mov edi, 1
	mov word [esi+0Ah], 2

loc_40A834:
	cmp byte [byte_512ECC], 0
	jnz loc_40A881
	mov ecx, [esp+4Ch]
	mov edx, [esp+0Ch]
	mov eax, [esp+54h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40A85F
	mov edi, 2
	mov word [esi+0Ah], 0

loc_40A85F:
	mov ecx, [esp+4Ch]
	mov edx, [esp+8]
	mov eax, [esp+54h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40A881
	mov edi, 2
	mov word [esi+0Ah], 1

loc_40A881:
	mov ecx, [esp+4Ch]
	mov edx, [esp+10h]
	mov eax, [esp+54h]
	mov ebx, ebp
	call sub_423DC0
	test eax, eax
	jz loc_40AF0B
	mov edi, 2
	mov word [esi+0Ah], 2

loc_40A8A7:
	mov eax, [esi+8]
	mov ecx, [esp+24h]
	sar eax, 10h
	cmp eax, ecx
	jz loc_40AF24

loc_40A8B9:
	mov edx, 2Dh
	mov eax, 1
	call sub_4423F0

loc_40A8C8:
	call sub_40EB20
	call sub_428A20
	mov edx, 400h
	mov eax, [esi+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, 8Ch
	mov ecx, 100h
	mov [esp+38h], eax
	mov [esp+44h], ecx
	mov [esp+30h], ecx
	mov [esp+40h], ecx
	mov cx, [esi+0Ah]
	mov [esp+3Ch], eax
	test cx, cx
	jnz loc_40A933
	mov eax, 100h
	mov [esp+40h], eax

loc_40A933:
	cmp word [esi+0Ah], 1
	jnz loc_40A947
	mov ebx, 100h
	mov [esp+30h], ebx
	mov [esp+3Ch], ebx

loc_40A947:
	cmp word [esi+0Ah], 2
	jnz loc_40A95B
	mov ecx, 100h
	mov [esp+44h], ecx
	mov [esp+38h], ecx

loc_40A95B:
	add ah, 20h
	mov ecx, 6
	cwde
	mov ebx, 0FFFFFFE9h
	mov [esp+48h], eax
	mov edx, eax
	mov eax, aAudi ; "audi"
	call sub_405B30
	mov eax, [esp+3Ch]
	add ah, 20h
	mov ecx, 21h
	cwde
	mov ebx, 0FFFFFFE9h
	mov [esp+64h], eax
	mov edx, eax
	mov eax, aAudi ; "audi"
	call sub_405B30
	mov eax, [esp+38h]
	add ah, 20h
	mov ecx, 3Ch
	cwde
	mov ebx, 0FFFFFFE9h
	mov [esp+60h], eax
	mov edx, eax
	mov eax, aAudi ; "audi"
	call sub_405B30
	mov eax, 188h
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	xor edx, edx
	call sub_482E00
	mov ecx, 6
	xor ebx, ebx
	mov edx, [esp+48h]
	mov bl, byte [byte_512DFC]
	mov eax, aAbar ; "abar"
	sub ebx, 0A3h
	call sub_405B30
	mov ecx, 21h
	xor ebx, ebx
	mov edx, [esp+64h]
	mov bl, byte [byte_512DFD]
	mov eax, aAbar ; "abar"
	sub ebx, 0A3h
	call sub_405B30
	mov ecx, 3Ch
	xor ebx, ebx
	mov edx, [esp+60h]
	mov bl, byte [byte_512DFE]
	mov eax, aAbar ; "abar"
	sub ebx, 0A3h
	call sub_405B30
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	xor edx, edx
	xor eax, eax
	call sub_482E00
	mov eax, [esp+40h]
	mov ecx, 6
	add ah, 20h
	mov ebx, 0FFFFFFE9h
	movsx edx, ax
	mov eax, aLaud ; "laud"
	call sub_405B30
	mov ecx, 6
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+48h]
	mov eax, aRaud ; "raud"
	call sub_405B30
	mov eax, [esp+30h]
	mov ecx, 21h
	add ah, 20h
	mov ebx, 0FFFFFFE9h
	movsx edx, ax
	mov eax, aLaud ; "laud"
	call sub_405B30
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+64h]
	mov eax, aRaud ; "raud"
	call sub_405B30
	mov eax, [esp+44h]
	mov ecx, 3Ch
	add ah, 20h
	mov ebx, 0FFFFFFE9h
	movsx edx, ax
	mov eax, aLaud ; "laud"
	call sub_405B30
	mov ecx, 3Ch
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+60h]
	mov eax, aRaud ; "raud"
	call sub_405B30
	cmp edi, 1
	jnz loc_40AF75
	mov bx, [esi+0Ah]
	test bx, bx
	jnz loc_40AF3F
	mov ecx, 6
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+48h]

loc_40AB13:
	mov eax, aLaul ; "laul"

loc_40AB18:
	call sub_405B30

loc_40AB1D:
	mov eax, esi
	call sub_40FA90
	call sub_405C70

loc_40AB2E:
	call sub_423B90
	mov eax, esi
	call sub_423CA0
	mov [esp+6Ch], eax
	call sub_405960
	mov dx, [esi+0Ah]
	mov [esp+68h], ax
	test dx, dx
	jle loc_40AFDF
	cmp dx, 3
	jge loc_40AFDF
	xor edx, edx
	mov dl, byte [byte_512DFD]
	imul edx, 7Fh
	mov ecx, 8Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4D5A2C], eax
	cmp eax, 7Fh
	jle loc_40AB8A
	mov dword [dword_4D5A2C], 7Fh

loc_40AB8A:
	mov eax, 32h
	mov edx, dword [dword_4D5A2C]

loc_40AB95:
	call sub_4864A0
	mov cx, [esi+0Ah]
	cmp cx, 1
	jnz loc_40B01A

loc_40ABA8:
	cmp byte [byte_4D24D8], 0
	jnz loc_40B024
	cmp dword [dword_4D96B0], 0
	jz loc_40B05B
	push 40h
	mov ecx, 7Fh
	mov edx, 7
	mov eax, dword [dword_50B410]
	xor ebx, ebx

loc_40ABD5:
	call sub_442280
	mov dword [dword_4E5910], eax
	mov byte [byte_4D24D8], 1

loc_40ABE6:
	xor edx, edx
	mov dl, byte [byte_512DFE]
	imul edx, 7Fh
	mov ecx, 8Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4D5A30], eax
	cmp eax, 7Fh
	jle loc_40AC11
	mov dword [dword_4D5A30], 7Fh

loc_40AC11:
	mov ecx, [esp+68h]
	test cx, cx
	jz loc_40AD4F
	mov eax, [esp+58h]
	cmp eax, [esp+4]
	jle loc_40AD4F
	add eax, 0Fh
	mov [esp+4], eax
	mov eax, 1
	mov dx, [esi+0Ah]
	mov [esp+6Ch], eax
	cmp dx, 3
	jge loc_40B0B6
	cmp cx, 0Dh
	jnz loc_40B0A0

loc_40AC54:
	mov edx, [esp+68h]
	cmp dx, 4B00h
	jnz loc_40B0CD

loc_40AC63:
	mov ax, [esi+0Ah]
	cmp ax, 1
	jnb loc_40B11C
	test ax, ax
	jnz loc_40ACA5
	xor eax, eax
	mov al, byte [byte_512DFC]
	sub eax, 8
	test eax, eax
	jle loc_40B164

loc_40AC88:
	xor edx, edx
	mov dl, al
	imul edx, 7Fh
	mov ecx, 8Ch
	mov byte [byte_512DFC], al

loc_40AC99:
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	call sub_489800

loc_40ACA5:
	cmp byte [byte_512F3F], 0
	jz loc_40ACCA
	cmp dword [esp+2Ch], 0
	jnz loc_40ACCA
	call sub_476BB0
	test eax, eax
	jz loc_40B201
	mov dword [esp+2Ch], 1

loc_40ACCA:
	xor edx, edx
	mov dl, byte [byte_512DFD]
	imul edx, 7Fh
	mov ecx, 8Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	xor edx, edx
	mov dl, byte [byte_512DFC]
	imul edx, 7Fh
	mov dword [dword_4D5A2C], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	xor edx, edx
	mov dl, byte [byte_512DFE]
	imul edx, 7Fh
	mov dword [dword_4D5A28], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, dword [dword_4D5A2C]
	mov dword [dword_4D5A30], eax
	cmp ecx, 7Fh
	jle loc_40AD29
	mov dword [dword_4D5A2C], 7Fh

loc_40AD29:
	cmp dword [dword_4D5A28], 7Fh
	jle loc_40AD3C
	mov dword [dword_4D5A28], 7Fh

loc_40AD3C:
	cmp dword [dword_4D5A30], 7Fh
	jle loc_40AD4F
	mov dword [dword_4D5A30], 7Fh

loc_40AD4F:
	mov eax, [esp+34h]
	test eax, eax
	jz loc_40A71D
	cmp eax, 0FFFFFFFEh
	jnz loc_40AD7B
	mov al, [esp+18h]
	mov byte [byte_512DFE], al
	mov al, [esp+14h]
	mov byte [byte_512DFD], al
	mov al, [esp+1Ch]
	mov byte [byte_512DFC], al

loc_40AD7B:
	xor edx, edx
	mov dl, byte [byte_512DFD]
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	mov ecx, 8Ch
	sar edx, 1Fh
	idiv ecx
	xor edx, edx
	mov dl, byte [byte_512DFC]
	mov dword [dword_4D5A2C], eax
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	xor edx, edx
	mov dl, byte [byte_512DFE]
	mov dword [dword_4D5A28], eax
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	mov ecx, dword [dword_4D5A2C]
	mov dword [dword_4D5A30], eax
	mov dword [dword_4D5A34], eax
	cmp ecx, 7Fh
	jle loc_40ADEB
	mov dword [dword_4D5A2C], 7Fh

loc_40ADEB:
	cmp dword [dword_4D5A28], 7Fh
	jle loc_40ADFE
	mov dword [dword_4D5A28], 7Fh

loc_40ADFE:
	cmp dword [dword_4D5A30], 7Fh
	jle loc_40AE11
	mov dword [dword_4D5A30], 7Fh

loc_40AE11:
	cmp byte [byte_4D24D8], 0
	jz loc_40AE2C
	mov eax, dword [dword_4E5910]
	xor dh, dh
	call sub_489840
	mov byte [byte_4D24D8], dh

loc_40AE2C:
	mov eax, 32h
	mov edx, dword [dword_4D5A28]
	call sub_4864A0
	mov bl, byte [byte_512DFF]
	cmp bl, 1
	jnz loc_40B218
	xor ebx, ebx
	mov dword [dword_4D96B0], ebx
	mov dword [dword_4D5A44], ebx

loc_40AE59:
	cmp byte [byte_512F3E], 0
	jz loc_40B238
	xor eax, eax

loc_40AE68:
	call sub_488898
	mov eax, dword [dword_4D5A28]
	mov edi, [esp+34h]
	call sub_489800
	cmp edi, 0FFFFFFFEh
	jz loc_40AEA5
	xor eax, eax
	mov ebp, [esp+20h]
	mov al, byte [byte_512DFF]
	cmp eax, ebp
	jnz loc_40B242
	xor eax, ebp
	mov edx, [esp]
	mov al, byte [byte_512F41]
	cmp eax, edx
	jnz loc_40B242

loc_40AEA5:
	mov ch, byte [byte_512F40]
	test ch, ch
	jbe loc_40AEB8
	cmp ch, 0Fh
	jb loc_40B292

loc_40AEB8:
	mov eax, [esp+34h]
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40AEC6:
	mov eax, dword [dword_4D5A28]
	jmp loc_40A693

loc_40AED0:
	and byte [byte_4D32C8], 0FEh
	jmp loc_40A748

loc_40AEDC:
	mov ecx, [esp+5Ch]
	test ecx, ecx
	jle loc_40A785
	cmp ecx, 11h
	jge loc_40A785
	call sub_476280
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	call sub_476750
	jmp loc_40A785

loc_40AF0B:
	test edi, edi
	jnz loc_40A8A7
	cmp word [esp+6Ch], 0
	jnz loc_40A8C8
	jmp loc_40AB2E

loc_40AF24:
	cmp edi, [esp+28h]
	jnz loc_40A8B9
	cmp word [esp+6Ch], 0
	jnz loc_40A8C8
	jmp loc_40AB2E

loc_40AF3F:
	cmp bx, 1
	jz loc_40AF62
	cmp bx, 2
	jnz loc_40AB1D
	mov ecx, 3Ch
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+60h]
	jmp loc_40AB13

loc_40AF62:
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+64h]
	jmp loc_40AB13

loc_40AF75:
	cmp edi, 2
	jnz loc_40AB1D
	mov cx, [esi+0Ah]
	test cx, cx
	jz loc_40AFAF
	cmp cx, 1
	jz loc_40AFC7
	cmp cx, 2
	jnz loc_40AB1D
	mov ecx, 3Ch
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+60h]
	mov eax, aRaul ; "raul"
	jmp loc_40AB18

loc_40AFAF:
	mov ecx, 6
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+48h]
	mov eax, aRaul ; "raul"
	jmp loc_40AB18

loc_40AFC7:
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov edx, [esp+64h]
	mov eax, aRaul ; "raul"
	jmp loc_40AB18

loc_40AFDF:
	xor edx, edx
	mov dl, byte [byte_512DFC]
	imul edx, 7Fh
	mov ecx, 8Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4D5A28], eax
	cmp eax, 7Fh
	jle loc_40B00A
	mov dword [dword_4D5A28], 7Fh

loc_40B00A:
	mov eax, 32h
	mov edx, dword [dword_4D5A28]
	jmp loc_40AB95

loc_40B01A:
	cmp cx, 2
	jz loc_40ABA8

loc_40B024:
	mov dx, [esi+0Ah]
	cmp dx, 1
	jnz loc_40B076

loc_40B02E:
	cmp byte [byte_4D24D8], 0
	jnz loc_40B07E

loc_40B037:
	cmp byte [byte_4D24D8], 0
	jz loc_40ABE6
	mov eax, dword [dword_4E5910]
	xor cl, cl
	call sub_489840
	mov byte [byte_4D24D8], cl
	jmp loc_40ABE6

loc_40B05B:
	push 40h
	mov ecx, 7Fh
	mov ebx, 40h
	mov edx, 7
	mov eax, dword [dword_50B410]
	jmp loc_40ABD5

loc_40B076:
	cmp dx, 2
	jz loc_40B02E
	jmp loc_40B037

loc_40B07E:
	mov eax, dword [dword_4D5A30]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, dword [dword_4E5910]
	mov edx, eax
	mov eax, ecx
	call sub_48999C
	jmp loc_40ABE6

loc_40B0A0:
	cmp cx, 4B00h
	jz loc_40AC54
	cmp cx, 4D00h
	jz loc_40AC54

loc_40B0B6:
	mov edx, [esp+66h]
	mov eax, esi
	sar edx, 10h
	call sub_410414
	mov [esp+34h], eax
	jmp loc_40ACA5

loc_40B0CD:
	cmp dx, 0Dh
	jnz loc_40B0DC
	cmp edi, 1
	jz loc_40AC63

loc_40B0DC:
	mov ecx, [esp+68h]
	cmp cx, 4D00h
	jnz loc_40B17B

loc_40B0EB:
	mov ax, [esi+0Ah]
	cmp ax, 1
	jnb loc_40B193
	test ax, ax
	jnz loc_40ACA5
	xor eax, eax
	mov al, byte [byte_512DFC]
	add eax, 8
	cmp eax, 8Bh
	jge loc_40B1E1
	jmp loc_40AC88

loc_40B11C:
	ja loc_40B142
	xor eax, eax
	mov al, byte [byte_512DFD]
	sub eax, 8
	test eax, eax
	jle loc_40B16B

loc_40B12C:
	xor edx, edx
	mov dl, al
	imul edx, 7Fh
	mov ecx, 8Ch
	mov byte [byte_512DFD], al
	jmp loc_40AC99

loc_40B142:
	cmp ax, 2
	jnz loc_40ACA5
	xor eax, eax
	mov al, byte [byte_512DFE]
	sub eax, 8
	test eax, eax
	jle loc_40B16F
	mov byte [byte_512DFE], al
	jmp loc_40ACA5

loc_40B164:
	xor eax, eax
	jmp loc_40AC88

loc_40B16B:
	xor eax, eax
	jmp loc_40B12C

loc_40B16F:
	xor eax, eax
	mov byte [byte_512DFE], al
	jmp loc_40ACA5

loc_40B17B:
	cmp cx, 0Dh
	jnz loc_40ACA5
	cmp edi, 2
	jz loc_40B0EB
	jmp loc_40ACA5

loc_40B193:
	ja loc_40B1BC
	xor eax, eax
	mov al, byte [byte_512DFD]
	add eax, 8
	cmp eax, 8Bh
	jge loc_40B1EB

loc_40B1A6:
	xor edx, edx
	mov dl, al
	imul edx, 7Fh
	mov ecx, 8Ch
	mov byte [byte_512DFD], al
	jmp loc_40AC99

loc_40B1BC:
	cmp ax, 2
	jnz loc_40ACA5
	xor eax, eax
	mov al, byte [byte_512DFE]
	add eax, 8
	cmp eax, 8Bh
	jge loc_40B1F2
	mov byte [byte_512DFE], al
	jmp loc_40ACA5

loc_40B1E1:
	mov eax, 8Bh
	jmp loc_40AC88

loc_40B1EB:
	mov eax, 8Bh
	jmp loc_40B1A6

loc_40B1F2:
	mov eax, 8Bh
	mov byte [byte_512DFE], al
	jmp loc_40ACA5

loc_40B201:
	mov eax, 30Ch
	call sub_402CD0
	xor ah, ah
	mov byte [byte_512F3F], ah
	jmp loc_40ACCA

loc_40B218:
	test bl, bl
	jnz loc_40AE59
	xor ecx, ecx
	mov edx, 1
	mov dword [dword_4D96B0], ecx
	mov dword [dword_4D5A44], edx
	jmp loc_40AE59

loc_40B238:
	mov eax, 0FFFFFFCEh
	jmp loc_40AE68

loc_40B242:
	call sub_4762E0
	call sub_4761E0
	mov eax, 306h
	call sub_402CD0
	call sub_476CA0
	xor edx, edx
	xor eax, eax
	mov dl, byte [byte_512DFF]
	mov al, byte [byte_512F41]
	call sub_476CC0
	call sub_445A60
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	call sub_476750
	mov eax, [esp+34h]
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40B292:
	call sub_4762E0
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	call sub_476750
	mov eax, [esp+34h]
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40A570 endp

sub_40B2C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov esi, eax
	xor ecx, ecx
	xor edx, edx
	mov cl, byte [dword_512ED4]
	mov [esp+24h], edx
	mov [esp+0Ch], edx
	mov [esp+2Ch], edx
	call sub_479240
	xor eax, eax
	mov [esp+18h], edx
	mov al, byte [dword_512ED4]
	lea edx, 0[ecx*8]
	call sub_4792C0
	add edx, ecx
	call sub_479340
	shl edx, 2
	mov eax, esi
	sub edx, ecx
	call sub_410E80
	shl edx, 2
	mov ecx, 64h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, aLaul ; "laul"
	mov [esp+30h], eax
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar eax, 14h
	sub eax, 17h
	mov edx, aRaul ; "raul"
	mov [esp+4], eax
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, [eax+0Ch]
	mov edi, 1
	shl edx, 14h
	mov ecx, [eax+2]
	sar edx, 14h
	sar ecx, 10h
	sub edx, 17h
	mov [esp+8], ecx
	mov [esp], edx
	mov edx, [eax+0Ch]
	mov eax, [eax+4]
	shl edx, 4
	sar eax, 10h
	sar edx, 14h
	mov [esp+1Ch], eax
	add edx, 21h
	call sub_486F28
	mov [esp+20h], edx

loc_40B38E:
	xor eax, eax
	mov edx, [esp+2Ch]
	call sub_403550
	call sub_4833C7
	add edx, eax
	mov [esp+2Ch], edx
	mov eax, esi
	xor edx, edx
	call sub_40BBE0
	test eax, eax
	jz loc_40B3B6
	mov edi, 1

loc_40B3B6:
	mov ecx, [esp+1Ch]
	mov ebx, [esp+8]
	mov eax, [esi+8]
	mov edx, [esp+20h]
	sar eax, 10h
	xor ebp, ebp
	mov [esp+10h], eax
	mov eax, [esp+4]
	mov [esp+14h], ebp
	call sub_423DC0
	test eax, eax
	jz loc_40B3EA
	mov ebp, 1
	mov word [esi+0Ah], 0

loc_40B3EA:
	mov ecx, [esp+1Ch]
	mov ebx, [esp+8]
	mov edx, [esp+20h]
	mov eax, [esp]
	call sub_423DC0
	test eax, eax
	jz loc_40B40D
	mov ebp, 2
	mov word [esi+0Ah], 0

loc_40B40D:
	mov eax, [esi+8]
	mov ebx, [esp+10h]
	sar eax, 10h
	cmp eax, ebx
	jz loc_40B61A

loc_40B41F:
	mov edx, 2Dh
	mov eax, 1
	call sub_4423F0

loc_40B42E:
	call sub_40EB20
	call sub_428A20
	mov edx, 400h
	mov eax, [esi+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov dword [esp+28h], 100h
	mov dx, [esi+0Ah]
	mov eax, 8Ch
	test dx, dx
	jnz loc_40B488
	mov eax, 100h
	mov [esp+28h], eax

loc_40B488:
	mov ecx, 21h
	add ah, 20h
	mov ebx, 0FFFFFFE9h
	movsx edi, ax
	mov eax, aAudi ; "audi"
	mov edx, edi
	call sub_405B30
	mov eax, 188h
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	xor edx, edx
	call sub_482E00
	mov ebx, [esp+30h]
	mov ecx, 21h
	mov eax, aAbar ; "abar"
	mov edx, edi
	sub ebx, 0A3h
	call sub_405B30
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	xor edx, edx
	xor eax, eax
	call sub_482E00
	mov eax, [esp+28h]
	mov ecx, 21h
	add ah, 20h
	mov ebx, 0FFFFFFE9h
	movsx edx, ax
	mov eax, aLaud ; "laud"
	call sub_405B30
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov eax, aRaud ; "raud"
	mov edx, edi
	call sub_405B30
	cmp word [esi+0Ah], 0
	jnz loc_40B546
	cmp ebp, 1
	jnz loc_40B632
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov eax, aLaul ; "laul"

loc_40B53F:
	mov edx, edi
	call sub_405B30

loc_40B546:
	mov eax, esi
	call sub_40FA90
	call sub_405C70

loc_40B557:
	call sub_423B90
	mov eax, esi
	call sub_423CA0
	mov edi, eax
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_40B5AF
	mov ecx, [esp+2Ch]
	cmp ecx, [esp+0Ch]
	jle loc_40B5AF
	add ecx, 0Fh
	mov edi, 1
	mov [esp+0Ch], ecx
	cmp ax, 4B00h
	jnz loc_40B64F

loc_40B591:
	cmp word [esi+0Ah], 0
	jnz loc_40B65E
	mov eax, [esp+30h]
	sub eax, 0Eh
	test eax, eax
	jle loc_40B67F

loc_40B5AB:
	mov [esp+30h], eax

loc_40B5AF:
	imul edx, [esp+30h], 64h
	mov ecx, 8Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, eax
	cmp eax, 64h
	jle loc_40B5CC
	mov eax, 64h

loc_40B5CC:
	mov edx, [esp+18h]
	mov ecx, eax
	cmp eax, edx
	jz loc_40B5DF
	mov [esp+18h], eax
	call sub_479310

loc_40B5DF:
	mov ebx, [esp+24h]
	test ebx, ebx
	jz loc_40B38E
	cmp ebx, 0FFFFFFFEh
	jz loc_40B5F6
	mov byte [dword_512ED4], cl

loc_40B5F6:
	xor eax, eax
	mov al, byte [dword_512ED4]
	call sub_4792C0
	call sub_4792D0
	call sub_479220
	mov eax, [esp+24h]
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40B61A:
	cmp ebp, [esp+14h]
	jnz loc_40B41F
	test di, di
	jnz loc_40B42E
	jmp loc_40B557

loc_40B632:
	cmp ebp, 2
	jnz loc_40B546
	mov ecx, 21h
	mov ebx, 0FFFFFFE9h
	mov eax, aRaul ; "raul"
	jmp loc_40B53F

loc_40B64F:
	cmp ax, 0Dh
	jnz loc_40B65E
	cmp ebp, 1
	jz loc_40B591

loc_40B65E:
	cmp dx, 4D00h
	jnz loc_40B686

loc_40B665:
	cmp word [esi+0Ah], 0
	jnz loc_40B691
	mov eax, [esp+30h]
	add eax, 0Eh
	cmp eax, 8Ch
	jge loc_40B6A4
	jmp loc_40B5AB

loc_40B67F:
	xor eax, eax
	jmp loc_40B5AB

loc_40B686:
	cmp dx, 0Dh
	jnz loc_40B691
	cmp ebp, 2
	jz loc_40B665

loc_40B691:
	movsx edx, dx
	mov eax, esi
	call sub_410414
	mov [esp+24h], eax
	jmp loc_40B5AF

loc_40B6A4:
	mov eax, 8Ch
	jmp loc_40B5AB
;sub_40B2C0 endp

off_40B6B0: dd loc_40B70C
	dd loc_40BB23 ; jump table for switch statement
	dd loc_40BB23
	dd loc_40BB23
	dd loc_40BB23

sub_40B6C4: ;SUBROUTINE
	push esi
	push edi
	sub esp, 1A8h
	mov [esp+194h], eax
	mov [esp+1A0h], edx
	mov ecx, 58h
	mov edi, esp
	mov esi, off_409F38
	xor edx, edx
	mov ax, word [word_4D3ECE]
	mov dword [dword_4D2314], edx
	rep movsd
	cmp ax, 4 ; switch 5 cases
	ja loc_40BB35 ; jumptable 0040B705 default case
	and eax, 0FFFFh
	jmp off_40B6B0[eax*4] ; switch jump

loc_40B70C:
	xor ebx, ebx ; jumptable 0040B705 case 0
	mov word [word_4D24C0], bx

loc_40B715:
	xor eax, eax
	mov al, byte [byte_512DA9]
	mov [esp+188h], ax
	xor eax, eax
	mov al, byte [byte_512DAA]
	mov [esp+18Ah], ax
	cmp al, 2
	jnz loc_40BB43
	xor ecx, ecx
	mov [esp+18Ch], cx

loc_40B745:
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov [esp+18Eh], ax
	xor eax, eax
	mov al, byte [byte_512DDA]
	mov dl, byte [byte_512DAA]
	mov [esp+190h], ax
	cmp dl, 2
	jnz loc_40BB57
	mov word [esp+192h], 0Fh

loc_40B77C:
	cmp word [esp+194h], 0
	jz loc_40BACC
	mov eax, dword [dword_5637F4]
	mov ecx, 1F2h
	add eax, 14h
	xor ebx, ebx
	mov dword [dword_4D24CC], eax
	mov eax, [esp+1A0h]
	mov [esp+1A4h], bx
	sub eax, 3E8h
	mov [esp+19Ch], ecx
	mov [esp+198h], eax

loc_40B7C2:
	cmp byte [byte_512DA9], 1
	jnz loc_40BBA8

loc_40B7CF:
	mov edi, [esp+1A4h]
	cmp di, 3
	jge loc_40BBBC
	mov eax, edi

loc_40B7E2:
	cwde
	imul eax, 58h
	mov edx, [esp+1A2h]
	sar edx, 10h
	mov edx, [esp+edx*2+186h]
	sar edx, 10h
	shl edx, 2
	add eax, edx
	mov ecx, [esp+eax]
	push ecx
	push aS5 ; "%s5"
	lea eax, [esp+168h]
	push eax
	call sprintf_
	mov bh, byte [byte_512DFB]
	add esp, 0Ch
	cmp bh, 2
	jnz loc_40B989
	mov edx, aA5 ; "A5"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B862
	mov esi, aFre1 ; "fre1"
	lea edi, [esp+160h]
	push edi

loc_40B849:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B861
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B849

loc_40B861:
	pop edi

loc_40B862:
	mov edx, aAd2 ; "Ad"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B89D
	mov esi, aFred ; "fred"
	lea edi, [esp+160h]
	push edi

loc_40B884:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B89C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B884

loc_40B89C:
	pop edi

loc_40B89D:
	mov edx, aB5 ; "B5"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B8D8
	mov esi, aFre2 ; "fre2"
	lea edi, [esp+160h]
	push edi

loc_40B8BF:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B8D7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B8BF

loc_40B8D7:
	pop edi

loc_40B8D8:
	mov edx, aBd ; "Bd"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B913
	mov esi, aFree ; "free"
	lea edi, [esp+160h]
	push edi

loc_40B8FA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B912
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B8FA

loc_40B912:
	pop edi

loc_40B913:
	mov edx, aC5 ; "C5"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B94E
	mov esi, aFre3 ; "fre3"
	lea edi, [esp+160h]
	push edi

loc_40B935:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B94D
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B935

loc_40B94D:
	pop edi

loc_40B94E:
	mov edx, aCd ; "Cd"
	lea eax, [esp+160h]
	call strcmp_
	test eax, eax
	jnz loc_40B989
	mov esi, aFref ; "fref"
	lea edi, [esp+160h]
	push edi

loc_40B970:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B988
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B970

loc_40B988:
	pop edi

loc_40B989:
	lea edi, [esp+160h]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp ecx, 2
	jnz loc_40B9CD
	mov esi, asc_4C8648 ; " "
	lea edi, [esp+160h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_40B9B4:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40B9CC
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40B9B4

loc_40B9CC:
	pop edi

loc_40B9CD:
	lea edx, [esp+160h]
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, eax
	mov eax, [esp+1A0h]
	cmp ax, 7D0h
	jge loc_40BA0D
	cmp ax, 3E8h
	jle loc_40BBC6
	imul eax, [esp+1A4h], 53h
	mov ebx, [esp+198h]
	sub ebx, eax
	mov eax, ebx

loc_40BA0A:
	test ax, ax

loc_40BA0D:
	mov eax, [edx+0Ch]
	shl eax, 14h
	sar eax, 14h
	mov edi, [esp+1A4h]
	add eax, 19h
	cmp di, 2
	jge loc_40BA2B
	add eax, 3

loc_40BA2B:
	mov edx, [edx+0Ch]
	mov esi, [esp+1A2h]
	shl edx, 4
	sar esi, 10h
	sar edx, 14h
	mov ebx, dword dword_4D24A4[esi*4]
	movsx ecx, ax
	add edx, ebx
	mov eax, esi
	movsx edx, dx
	mov ebx, dword [dword_4D24C6]
	push edx
	sar ebx, 10h
	lea edx, [esp+164h]
	call sub_4281B0

loc_40BA65:
	mov edx, [esp+1A4h]
	mov eax, [esp+19Ch]
	inc edx
	sub eax, 53h
	mov [esp+1A4h], dx
	mov [esp+19Ch], eax
	cmp dx, 6
	jge loc_40BACC
	cmp dx, 5
	jnz loc_40B7C2
	cmp byte [byte_512DF6], 0
	jnz loc_40B7C2
	cmp byte [byte_512DAA], 0
	jnz loc_40B7C2
	push 0
	mov eax, [esp+1A6h]
	lea edx, [esp+164h]
	xor ecx, ecx
	xor ebx, ebx
	sar eax, 10h
	call sub_4281B0

loc_40BACC:
	mov eax, [esp+188h]
	mov word [word_4E5934], ax
	mov eax, [esp+18Ah]
	mov word [word_4E5936], ax
	mov eax, [esp+18Ch]
	mov word [word_4E5938], ax
	mov eax, [esp+18Eh]
	mov word [word_4E593A], ax
	mov eax, [esp+190h]
	mov word [word_4E593C], ax
	mov eax, [esp+192h]
	mov word [word_4E593E], ax
	add esp, 1A8h
	pop edi
	pop esi
	ret

loc_40BB23:
	mov ax, word [word_4D3ECE] ; jumptable 0040B705 cases 1-4
	inc eax
	mov word [word_4D24C0], ax
	jmp loc_40B715

loc_40BB35:
	mov word [word_4D24C0], 0FFFFh ; jumptable 0040B705 default case
	jmp loc_40B715

loc_40BB43:
	xor eax, eax
	mov al, byte [byte_512DB0]
	mov [esp+18Ch], ax
	jmp loc_40B745

loc_40BB57:
	cmp dl, 1
	jnz loc_40BB7D
	xor eax, eax
	mov al, byte [byte_512DB0]
	mov ax, word word_4D21B4[eax*2]
	add eax, 10h
	mov [esp+192h], ax
	jmp loc_40B77C

loc_40BB7D:
	xor eax, eax
	mov al, byte [byte_512DF5]
	mov [esp+192h], ax
	cmp ax, 0Bh
	jle loc_40B77C
	mov edi, eax
	add edi, 4
	mov [esp+192h], di
	jmp loc_40B77C

loc_40BBA8:
	cmp word [esp+1A4h], 4
	jnz loc_40B7CF
	jmp loc_40BA65

loc_40BBBC:
	mov eax, 3
	jmp loc_40B7E2

loc_40BBC6:
	sub eax, [esp+19Ch]
	jmp loc_40BA0A
;sub_40B6C4 endp

sub_40BBE0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebp, eax
	mov [esp+1Ch], edx
	mov edi, esp
	mov esi, off_409F28
	movsd
	movsd
	movsd
	movsd
	test dx, dx
	jz loc_40BD1C

loc_40BC02:
	cmp word [esp+1Ch], 0
	jnz loc_40BC20
	mov ebx, dword [dword_4D2440]
	test ebx, ebx
	jz loc_40BC20
	cmp ebx, dword [dword_5637F4]
	jge loc_40BD11

loc_40BC20:
	mov edx, dword [dword_4D2444]
	inc edx
	mov ecx, 140h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	xor eax, eax
	mov dword [dword_4D2444], edx
	call sub_403550
	mov eax, dword [dword_5637F4]
	add eax, 14h
	mov ecx, [esp+1Ch]
	mov dword [dword_4D2440], eax
	test cx, cx
	jz loc_40BD85

loc_40BC5A:
	xor ebx, ebx
	xor edi, edi

loc_40BC5E:
	movsx ecx, bx
	add ecx, ecx
	mov si, word word_4D2452[ecx]
	cmp di, si
	jge loc_40BDC2
	mov dx, word word_4D2448[ecx]
	add edx, esi
	mov word word_4D2448[ecx], dx
	cmp dx, 6Eh
	jl loc_40BDA0
	cmp bx, 3
	jnz loc_40BDA0

loc_40BC97:
	movsx eax, bx
	mov word word_4D2452[eax*2], di

loc_40BCA2:
	inc ebx
	cmp bx, 4
	jl loc_40BC5E
	mov eax, dword [dword_4D2314+2]
	mov edx, 1
	sar eax, 10h
	sub edx, eax
	xor ecx, ecx
	mov eax, dword dword_4D231C[edx*4]
	xor ebx, ebx
	call sub_4825A8
	mov edx, 400h
	mov eax, aSide ; "side"
	call sub_405B30
	call sub_404D60
	test eax, eax
	jnz loc_40BF1C

loc_40BCE4:
	xor esi, esi

loc_40BCE6:
	call sub_404D60
	test eax, eax
	jz loc_40BF2D
	cmp word [esp+1Ch], 0
	jnz loc_40BF2D

loc_40BCFF:
	mov eax, dword [dword_5637F4]
	add eax, 14h
	mov dword [dword_4D2440], eax
	call sub_4824BC

loc_40BD11:
	xor eax, eax
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_40BD1C:
	lea ebx, [esp+14h]
	lea edx, [esp+10h]
	lea eax, [esp+18h]
	call sub_422060
	mov eax, [esp+10h]
	cmp eax, dword [dword_4E592C]
	jz loc_40BD77

loc_40BD39:
	mov eax, [esp+10h]
	mov dword [dword_4E592C], eax
	mov eax, [esp+14h]
	mov dword [dword_4E5930], eax
	mov eax, dword [dword_5637F4]
	add eax, 14h
	mov dword [dword_4D2440], eax

loc_40BD58:
	call sub_404D60
	test eax, eax
	jz loc_40BC02
	mov eax, dword [dword_5637F4]
	add eax, 14h
	mov dword [dword_4D2440], eax
	jmp loc_40BC02

loc_40BD77:
	mov eax, [esp+14h]
	cmp eax, dword [dword_4E5930]
	jnz loc_40BD39
	jmp loc_40BD58

loc_40BD85:
	cmp byte [byte_512ECD], 2
	jnb loc_40BC5A
	mov eax, 1
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_40BDA0:
	movsx eax, bx
	cmp word word_4D2448[eax*2], 0B4h
	jl loc_40BCA2
	cmp bx, 3
	jnz loc_40BC97
	jmp loc_40BCA2

loc_40BDC2:
	jle loc_40BDF6
	mov dx, word word_4D2448[ecx]
	add edx, esi
	mov word word_4D2448[ecx], dx
	cmp dx, 28h
	jg loc_40BCA2
	mov eax, 28h
	mov word word_4D2452[ecx], di
	mov word word_4D2448[ecx], ax
	jmp loc_40BCA2

loc_40BDF6:
	cmp bx, 3
	jnz loc_40BE6F
	cmp word word_4D2448[ecx], 28h
	jle loc_40BE35
	mov esi, 0FFFFFFFDh
	mov dx, word word_4D246A[ecx]
	mov word word_4D2452[ecx], si
	call sub_488074
	xor dh, dh
	xor ah, ah
	and dl, 0FEh
	and al, 1
	add eax, edx
	mov word word_4D246A[ecx], ax
	jmp loc_40BCA2

loc_40BE35:
	mov ax, word word_4D246A[ecx]
	xor ah, ah
	and al, 0FEh
	movsx edx, ax
	add edx, 2
	mov esi, 6
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov word word_4D2452[ecx], bx
	call sub_488074
	and eax, 1
	add edx, eax
	mov word word_4D246A[ecx], dx
	jmp loc_40BCA2

loc_40BE6F:
	call sub_488074
	xor ah, ah
	and al, 1
	mov dx, word word_4D2448[ecx]
	mov word word_4D246A[ecx], ax
	cmp dx, 28h
	jle loc_40BEAB
	mov esi, 0Ah
	xor edx, edx
	call sub_488074
	div esi
	neg edx
	lea eax, [edx-0Ah]
	mov word word_4D2452[ecx], ax
	jmp loc_40BCA2

loc_40BEAB:
	mov esi, 5
	xor edx, edx
	call sub_488074
	div esi
	test edx, edx
	jnz loc_40BCA2
	mov esi, 0Ah
	call sub_488074
	div esi
	add edx, esi
	mov esi, 18h
	mov word word_4D2452[ecx], dx
	xor edx, edx
	call sub_488074
	div esi
	sub edx, 0Ch
	mov word word_4D245A[ecx], dx
	xor edx, edx
	call sub_488074
	div esi
	sub edx, 0Ch
	mov word word_4D2462[ecx], dx
	cmp bx, 2
	jnz loc_40BCA2
	mov esi, edx
	sub esi, 1Eh
	mov word word_4D2462[ecx], si
	jmp loc_40BCA2

loc_40BF1C:
	cmp word [esp+1Ch], 0
	jz loc_40BCFF
	jmp loc_40BCE4

loc_40BF2D:
	movsx ecx, si
	add ecx, ecx
	mov di, word word_4D2448[ecx]
	test di, di
	jz loc_40BF73
	mov edx, edi
	mov eax, dword byte_4D2460[ecx]
	mov ebx, dword byte_4D2458[ecx]
	sar eax, 10h
	mov edi, dword byte_4D2468[ecx]
	sar ebx, 10h
	sar edi, 10h
	add dh, 20h
	add ecx, edi
	movsx edx, dx
	mov edi, dword off_4D2474[ecx*4]
	mov ecx, eax
	mov eax, edi
	call sub_405B30

loc_40BF73:
	inc esi
	cmp si, 4
	jl loc_40BCE6
	mov eax, dword [dword_4D2444]
	mov edx, eax
	mov ecx, 50h
	sar edx, 1Fh
	idiv ecx
	xor ebx, ebx
	mov edx, 2800h
	mov eax, [esp+eax*4]
	xor ecx, ecx
	call sub_405B30
	call sub_404D60
	test eax, eax
	jz loc_40BFB5
	cmp word [esp+1Ch], 0
	jz loc_40BCFF

loc_40BFB5:
	mov eax, dword [dword_4D2444]
	mov edx, eax
	mov ecx, 50h
	sar edx, 1Fh
	idiv ecx
	mov eax, edx
	shl eax, 4
	add eax, edx
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	add ah, 1Ch
	movsx edi, ax
	mov eax, dword [dword_4D2444]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	lea edx, [eax+1]
	mov ecx, 4
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	xor ebx, ebx
	mov eax, [esp+edx*4]
	xor ecx, ecx
	mov edx, edi
	call sub_405B30
	call sub_404D60
	test eax, eax
	jz loc_40C01F
	cmp word [esp+1Ch], 0
	jz loc_40BCFF

loc_40C01F:
	mov edx, 2800h
	mov eax, aLogo_0 ; "logo"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	call sub_404D60
	test eax, eax
	jz loc_40C047
	cmp word [esp+1Ch], 0
	jz loc_40BCFF

loc_40C047:
	cmp ebp, off_4D3EC4
	jz loc_40C054
	call sub_40C110

loc_40C054:
	call sub_4824BC
	mov eax, 1
	sub ax, word [word_4D2318]
	mov esi, 1
	mov word [word_4D2318], ax
	mov eax, dword [dword_4D4D24]
	mov word [word_4D231A], si
	call sub_4825A8
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 2800h
	mov eax, dword dword_4D231C[eax*4]
	xor ebx, ebx
	xor ecx, ecx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_404D60
	test eax, eax
	jz loc_40C0B6
	cmp word [esp+1Ch], 0
	jz loc_40BCFF

loc_40C0B6:
	mov eax, dword [dword_4D4D24]
	mov edx, 1
	xor edi, edi
	mov eax, [eax+20h]
	mov dword [dword_4EB588], edi
	call sub_428250
	call sub_404D60
	test eax, eax
	jz loc_40C0E5
	cmp word [esp+1Ch], 0
	jz loc_40BCFF

loc_40C0E5:
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	xor edx, edx
	mov eax, [eax+20h]
	call sub_428250
	mov eax, 1
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_40BBE0 endp

sub_40C110: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov eax, dword [byte_4D3ECC]
	sar eax, 10h
	mov edx, dword off_4D3ED0[eax*4]
	mov eax, [edx]
	sar eax, 10h
	call sub_41B650
	movsx ebx, ax
	mov eax, [edx]
	sar eax, 10h
	mov ecx, 1
	call sub_41B670
	mov esi, [edx]
	cwde
	sar esi, 10h
	mov edx, eax
	mov eax, esi
	call sub_405580
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40C110 endp

sub_40C160: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov esi, eax
	mov ebx, 0FFFFFFFFh
	xor edx, edx
	xor edi, edi
	xor ecx, ecx
	mov [esp], edx
	mov dword [dword_4D2310], ecx
	mov dword [dword_4D2420], ebx
	call sub_410E80
	call sub_40EB20
	mov ebx, 270Fh
	mov eax, 6
	xor edx, edx
	mov word [dword_4E5928], bx
	call sub_4056A0
	mov ebp, dword [dword_4D243C]
	mov [esp+1Ch], dx
	cmp ebp, off_4D3348
	jz loc_40C274
	cmp ebp, off_4D2C80
	jz loc_40C274
	cmp ebp, off_4D2B34
	jz loc_40C274
	cmp ebp, off_4D2BF4
	jz loc_40C274
	cmp ebp, off_4D39A8
	jz loc_40C274
	cmp ebp, off_4D37C8
	jz loc_40C274
	cmp ebp, off_4D38D8
	jz loc_40C274
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	call sub_4825A8
	call sub_40C110
	call sub_4824BC
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	xor edx, edx
	mov eax, [eax+20h]
	call sub_428250
	cmp dword [dword_4D243C], dword_4D2870
	jnz loc_40C25E
	mov edx, aBlk6 ; "blk6"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, 1
	call sub_428250

loc_40C25E:
	mov ecx, 1
	mov edx, 8Ch
	mov eax, 0E6h
	xor ebx, ebx
	call sub_427280

loc_40C274:
	mov ecx, dword [dword_4D243C]
	cmp ecx, off_4D2B34
	jnz loc_40C75D

loc_40C286:
	mov edx, aBlk6 ; "blk6"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, 1
	call sub_428250

loc_40C29F:
	cmp dword [dword_4D243C], off_4D2C80
	jnz loc_40C2DD
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	xor edx, edx
	mov eax, [eax+20h]
	call sub_428250
	mov edx, aBlk6 ; "blk6"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, 1
	call sub_428250

loc_40C2DD:
	mov cx, word [word_4D3ECE]
	test cx, cx
	jle loc_40C77B
	cmp cx, 5
	jge loc_40C77B
	cmp cx, 4
	jz loc_40C76E

loc_40C301:
	mov word [esp+1Ch], 1
	mov eax, esi
	call sub_427ED0
	cmp word [word_4D3ECE], 4
	jnz loc_40C7FB
	cmp byte [byte_512DF6], 0
	jnz loc_40C7FB

loc_40C32A:
	mov ecx, 0FFFFFF10h
	mov ebx, 2
	mov [esp+10h], cx
	mov [esp+0Ch], ebx
	mov ebp, 20h

loc_40C342:
	push 2
	mov ebx, [esp+10h]
	call sub_497680
	test bx, bx
	jz loc_40C375
	mov ecx, ebx
	dec ecx
	xor ebx, ebx
	mov [esp+0Ch], ecx
	call sub_49769C
	push 0FF8C8C8Ch
	mov eax, 1
	mov ecx, ebp
	xor edx, edx
	call sub_427B30

loc_40C375:
	mov eax, [esp+0Eh]
	mov edx, 13Ch
	sar eax, 10h
	mov ecx, ebp
	add eax, 0D3h
	xor ebx, ebx
	call sub_4279E0
	push 0FFFFFFFFh
	xor edx, edx
	xor eax, eax
	call sub_427B30
	mov eax, dword [byte_4D3ECC]
	mov edx, edi
	sar eax, 10h
	call sub_4276F0
	call sub_4976B8
	mov eax, [esp+10h]
	add eax, 0Ch
	mov [esp+10h], ax
	test ax, ax
	jle loc_40C342

loc_40C3CC:
	mov ebx, 1
	mov edx, 400h
	mov eax, dword [dword_4D4D24]
	xor ecx, ecx
	mov word [dword_4E5924+2], bx
	call sub_4825A8
	mov eax, aBlk4 ; "blk4"
	xor ebx, ebx
	call sub_405B30
	mov ebx, 13Ch
	mov edx, 0D3h
	mov eax, esi
	call sub_40CD70
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	xor ecx, ecx
	mov eax, dword dword_4D231C[eax*4]
	mov edx, 2800h
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_4824BC
	xor eax, eax
	mov dword [dword_4EB588], eax
	mov eax, dword [dword_4D4D24]
	mov edx, 1
	mov eax, [eax+20h]
	call sub_428250
	call sub_486F28
	xor eax, eax
	xor ebp, ebp
	mov al, byte [byte_512DD1]
	mov ebx, 2
	mov [esp+18h], ax
	xor eax, eax
	mov edx, 1
	mov al, byte [byte_512DF6]
	mov dword [dword_4D2310], edx
	mov [esp+8], ax

loc_40C473:
	xor eax, eax
	call sub_403550
	call sub_4833C7
	mov ecx, dword [dword_4D2314]
	add edi, eax
	test ecx, ecx
	jnz loc_40C494
	mov eax, esi
	xor edx, edx
	call sub_40BBE0

loc_40C494:
	test bx, bx
	jz loc_40C64C
	call sub_40EB20
	cmp dword [dword_4D209C], 0
	jz loc_40C4C6
	xor edx, edx
	mov dword [dword_4D209C], edx
	cmp esi, off_4D3050
	jnz loc_40C80F

loc_40C4BF:
	mov eax, esi
	call sub_410E80

loc_40C4C6:
	xor eax, eax
	mov al, byte [byte_512DB0]
	call sub_40D0C0
	test eax, eax
	jz loc_40C820
	mov eax, dword [off_4D2A40]
	or byte [eax+8], 1

loc_40C4E3:
	cmp byte [byte_512DAF], 1
	jz loc_40C82E
	mov eax, dword [off_4D2A3C]
	or byte [eax+8], 1

loc_40C4F9:
	cmp esi, off_4D3050
	jnz loc_40C83C
	cmp byte [byte_512DBF], 0Bh
	jbe loc_40C83C

loc_40C512:
	or byte [byte_4D2FB8], 1
	or byte [byte_4D2FE0], 1

loc_40C520:
	xor eax, eax
	mov edx, [esp+16h]
	mov al, byte [byte_512DD1]
	sar edx, 10h
	cmp eax, edx
	jz loc_40C54A
	xor eax, eax
	mov al, byte [byte_512DD1]
	mov [esp+18h], ax
	mov eax, esi
	mov ebx, 2
	call sub_427ED0

loc_40C54A:
	cmp esi, off_4D2A20
	jnz loc_40C88F
	xor edx, edx
	mov eax, dword [dword_4E5924+2]
	mov dl, byte [byte_512DB0]
	sar eax, 10h
	cmp eax, edx
	jz loc_40C88F

loc_40C56E:
	cmp byte [byte_512DD1], 0
	jnz loc_40C8F8

loc_40C57B:
	mov edx, [esp+1Ah]
	mov eax, esi
	sar edx, 10h
	call sub_40D1B0

loc_40C589:
	mov ebx, 2

loc_40C58E:
	cmp dword [dword_4D40B4], 0
	jz loc_40C5A4
	xor ebx, ebx
	mov dword [dword_4D40B4], ebx
	mov ebx, 2

loc_40C5A4:
	xor eax, eax
	mov edx, [esp+6]
	mov al, byte [byte_512DF6]
	sar edx, 10h
	cmp edx, eax
	jz loc_40C923
	xor eax, eax
	mov al, byte [byte_512DF6]
	mov [esp+8], ax

loc_40C5C6:
	mov eax, dword [dword_4D4D24]
	mov edx, 400h
	call sub_4825A8
	xor ecx, ecx
	xor ebx, ebx
	mov eax, aBlk4 ; "blk4"
	call sub_405B30
	mov ebx, 13Ch
	mov edx, 0D3h
	mov eax, esi
	call sub_40CD70
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	xor ecx, ecx
	mov eax, dword dword_4D231C[eax*4]
	mov edx, 2800h
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, esi
	call sub_40CAB0
	call sub_4824BC
	xor eax, eax
	mov dword [dword_4EB588], eax
	mov eax, dword [dword_4D4D24]
	mov edx, 1
	mov eax, [eax+20h]
	call sub_428250

loc_40C639:
	mov edx, 7D0h
	mov eax, 1
	mov ecx, esi
	xor ebx, ebx
	call sub_40B6C4

loc_40C64C:
	push 2
	call sub_497680
	call sub_49769C
	xor ebx, ebx
	push 0FFFFFFFFh
	mov ecx, 20h
	mov eax, 1
	xor edx, edx
	call sub_427B30
	mov edx, 1
	mov eax, esi
	mov dword [dword_4D20A0], edx
	call sub_40FA90
	mov eax, esi
	xor ecx, ecx
	call sub_40CB00
	mov eax, dword [byte_4D3ECC]
	mov edx, edi
	sar eax, 10h
	mov dword [dword_4D20A0], ecx
	call sub_4276F0
	mov dword [dword_4D2314], eax
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0
	call sub_4976B8
	mov eax, esi
	call sub_423CA0
	mov ebx, eax
	call sub_405960
	test ax, ax
	jz loc_40C6F2
	cmp edi, [esp]
	jle loc_40C6F2
	lea edx, [edi+0Fh]
	mov [esp], edx
	movsx edx, ax
	mov eax, esi
	mov ebx, 1
	call sub_410414
	mov ebp, eax

loc_40C6F2:
	cmp ebp, 0FFFFFFFFh
	jnz loc_40C932

loc_40C6FB:
	cmp esi, off_4D2A20
	jnz loc_40C93B
	cmp byte [byte_512DAA], 1
	jnz loc_40C93B
	cmp dword [dword_4D76B8], 0
	jz loc_40C93B
	xor eax, eax
	mov al, byte [byte_512DB0]
	call sub_40D0C0
	test eax, eax
	jz loc_40C93B
	xor edx, edx
	mov eax, 4D00h
	mov dl, byte [byte_512DB0]
	call sub_40DEA0
	xor eax, eax
	mov al, byte [byte_512DB0]
	cmp eax, edx
	jz loc_40C93B
	xor ebp, ebp
	jmp loc_40C473

loc_40C75D:
	cmp ecx, off_4D2BF4
	jz loc_40C286
	jmp loc_40C29F

loc_40C76E:
	cmp byte [byte_512DF6], 0
	jnz loc_40C301

loc_40C77B:
	cmp word [dword_4E5924+2], 0
	jnz loc_40C3CC
	mov word [esp+14h], 3E9h
	xor ebp, ebp

loc_40C792:
	mov edx, [esp+12h]
	mov eax, 1
	mov ecx, esi
	mov ebx, ebp
	sar edx, 10h
	call sub_40B6C4
	call sub_428A20
	mov edx, 400h
	mov ecx, ebp
	mov ebx, ebp
	mov eax, [esi+4]
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	mov ecx, ebp
	mov ebx, ebp
	mov eax, [eax+20h]
	call sub_405B60
	call sub_405C70
	mov eax, [esp+14h]
	add eax, 32h
	mov [esp+14h], ax
	cmp ax, 640h
	jle loc_40C792
	jmp loc_40C3CC

loc_40C7FB:
	mov edx, 7Fh
	mov eax, 4
	call sub_4423F0
	jmp loc_40C32A

loc_40C80F:
	cmp esi, off_4D3100
	jz loc_40C4BF
	jmp loc_40C4C6

loc_40C820:
	mov eax, dword [off_4D2A40]
	and byte [eax+8], 0FEh
	jmp loc_40C4E3

loc_40C82E:
	mov eax, dword [off_4D2A3C]
	and byte [eax+8], 0FEh
	jmp loc_40C4F9

loc_40C83C:
	cmp esi, off_4D3100
	jnz loc_40C851
	cmp byte [byte_512DDA], 0Bh
	ja loc_40C512

loc_40C851:
	cmp esi, off_4D3204
	jnz loc_40C866
	cmp byte [byte_512DF5], 0Bh
	ja loc_40C512

loc_40C866:
	mov ah, byte [byte_4D2FB8]
	and ah, 0FEh
	mov dl, byte [byte_512ECC]
	mov byte [byte_4D2FB8], ah
	test dl, dl
	jnz loc_40C520
	and byte [byte_4D2FE0], 0FEh
	jmp loc_40C520

loc_40C88F:
	cmp esi, off_4D3050
	jnz loc_40C8AF
	xor edx, edx
	mov eax, dword [dword_4E5924+2]
	mov dl, byte [byte_512DBF]
	sar eax, 10h
	cmp eax, edx
	jnz loc_40C56E

loc_40C8AF:
	cmp esi, off_4D3100
	jnz loc_40C8CF
	xor eax, eax
	mov edx, dword [dword_4E5924+2]
	mov al, byte [byte_512DDA]
	sar edx, 10h
	cmp edx, eax
	jnz loc_40C56E

loc_40C8CF:
	cmp esi, off_4D3204
	jnz loc_40C58E
	xor eax, eax
	mov edx, dword [dword_4E5924+2]
	mov al, byte [byte_512DF5]
	sar edx, 10h
	cmp edx, eax
	jnz loc_40C56E
	jmp loc_40C58E

loc_40C8F8:
	cmp word [dword_4E5928], 0Bh
	jg loc_40C57B
	cmp esi, off_4D2A20
	jz loc_40C57B
	cmp esi, off_4D3204
	jz loc_40C57B
	jmp loc_40C589

loc_40C923:
	cmp bx, 2
	jz loc_40C5C6
	jmp loc_40C639

loc_40C932:
	cmp ebp, 0FFFFFFFBh
	jz loc_40C6FB

loc_40C93B:
	test ebp, ebp
	jz loc_40C473
	xor ebx, ebx
	mov ax, word [word_4D3ECE]
	mov dword [dword_4D2310], ebx
	test ax, ax
	jle loc_40CA3D
	cmp ax, 5
	jge loc_40CA3D
	cmp esi, off_4D3204
	jz loc_40CA30

loc_40C970:
	mov edx, 7Fh
	mov eax, 5
	call sub_4423F0
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	xor edx, edx
	mov eax, [eax+20h]
	call sub_428250
	mov edx, aBlk4 ; "blk4"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, 1
	xor esi, esi
	call sub_428250

loc_40C9B3:
	movsx eax, si
	mov [esp+4], eax
	cmp eax, 0FFFFFEE8h
	jl loc_40CA75
	push 2
	call sub_497680
	call sub_49769C
	xor ebx, ebx
	push 0FF8C8C8Ch
	mov ecx, 20h
	mov eax, 1
	xor edx, edx
	call sub_427B30
	mov eax, dword [byte_4D3ECC]
	mov edx, edi
	sar eax, 10h
	mov ecx, 20h
	call sub_4276F0
	mov eax, [esp+4]
	mov edx, 13Ch
	add eax, 0D3h
	xor ebx, ebx
	call sub_4279E0
	push 0FFFFFFFFh
	xor edx, edx
	xor eax, eax
	sub esi, 0Fh
	call sub_427B30
	call sub_4976B8
	jmp loc_40C9B3

loc_40CA30:
	cmp byte [byte_512DF6], 0
	jnz loc_40C970

loc_40CA3D:
	mov ecx, 1
	mov edx, 0E6h
	mov eax, 8Ch
	xor ebx, ebx
	call sub_427320

loc_40CA53:
	cmp ebp, 0FFFFFFFFh
	jnz loc_40CA98

loc_40CA58:
	mov edx, 1
	mov dword [dword_4D243C], ebp
	mov eax, ebp
	mov dword [dword_4D2310], edx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40CA75:
	cmp ebp, dword_4D2870
	jnz loc_40CA53
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	xor edx, edx
	mov eax, [eax+20h]
	call sub_428250
	jmp loc_40CA53

loc_40CA98:
	xor ebx, ebx
	mov word [dword_4E5924+2], bx
	jmp loc_40CA58
;sub_40C160 endp

sub_40CAB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	cmp eax, off_4D3050
	jz loc_40CAC8
	cmp ecx, off_4D3100
	jz loc_40CAE8
	pop edx
	pop ecx
	pop ebx
	ret

loc_40CAC8:
	mov ebx, 88h
	mov edx, 16Dh
	mov eax, dword_4D2F80
	call sub_410090
	cmp ecx, off_4D3100
	jz loc_40CAE8
	pop edx
	pop ecx
	pop ebx
	ret

loc_40CAE8:
	mov ebx, 88h
	mov edx, 16Dh
	mov eax, dword_4D2B68
	call sub_410090
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40CAB0 endp

sub_40CB00: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 60h
	mov ebp, eax
	mov ecx, 0Ch
	mov edi, esp
	mov esi, dword_409EC8
	rep movsd
	mov ecx, 0Ch
	lea edi, [esp+30h]
	mov esi, dword_409EF8
	mov ah, byte [byte_512DD1]
	rep movsd
	test ah, ah
	jz loc_40CBF4
	cmp ebp, off_4D3050
	jnz loc_40CD20

loc_40CB42:
	cmp word [dword_4E5928], 0Bh
	jg loc_40CBF4
	mov eax, 58h
	call sub_41B650
	movsx ebx, ax
	mov eax, 58h
	mov ecx, 1
	call sub_41B670
	movsx edx, ax
	mov eax, 58h
	call sub_405580
	mov eax, 59h
	call sub_41B650
	movsx ebx, ax
	mov eax, 59h
	mov ecx, 1
	call sub_41B670
	movsx edx, ax
	mov eax, 59h
	call sub_405580
	mov eax, 5Ah
	call sub_41B650
	movsx ebx, ax
	mov eax, 5Ah
	mov ecx, 1
	call sub_41B670
	movsx edx, ax
	mov eax, 5Ah
	call sub_405580
	mov eax, 5Bh
	call sub_41B650
	movsx ebx, ax
	mov eax, 5Bh
	mov ecx, 1
	call sub_41B670
	movsx edx, ax
	mov eax, 5Bh
	call sub_405580

loc_40CBF4:
	cmp ebp, off_4D3204
	jnz loc_40CCC6
	mov dl, byte [byte_512DF5]
	cmp dl, 0Ch
	jb loc_40CCC6
	cmp dl, 0Eh
	ja loc_40CCC6
	xor eax, eax
	mov al, dl
	shl eax, 2
	push 0
	lea esi, [eax-30h]
	push 1
	mov eax, 58h
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, [esp+esi*4+8]
	mov edx, 0AAh
	call sub_41B710
	call sub_4054E0
	push 0
	push 1
	mov eax, 59h
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, [esp+esi*4+0Ch]
	mov edx, 0AAh
	call sub_41B710
	call sub_4054E0
	push 0
	push 1
	mov eax, 5Ah
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, [esp+esi*4+10h]
	mov edx, 0AAh
	call sub_41B710
	call sub_4054E0
	push 0
	push 1
	mov eax, 5Bh
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, [esp+esi*4+14h]
	mov edx, 0AAh
	call sub_41B710
	call sub_4054E0

loc_40CCC6:
	mov edx, 0FFFFFFFFh
	cmp ebp, off_4D3204
	jnz loc_40CCDB
	xor edx, edx
	mov dl, byte [byte_512DF5]

loc_40CCDB:
	cmp ebp, off_4D3050
	jnz loc_40CCF4
	cmp byte [byte_512DD1], 0
	jnz loc_40CCF4
	xor edx, edx
	mov dl, byte [byte_512DBF]

loc_40CCF4:
	cmp ebp, off_4D3100
	jnz loc_40CD0D
	cmp byte [byte_512DD1], 0
	jnz loc_40CD0D
	xor edx, edx
	mov dl, byte [byte_512DDA]

loc_40CD0D:
	cmp edx, 0FFFFFFFFh
	jz loc_40CD17
	cmp edx, 0Ch
	jl loc_40CD31

loc_40CD17:
	add esp, 60h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_40CD20:
	cmp ebp, off_4D3100
	jz loc_40CB42
	jmp loc_40CBF4

loc_40CD31:
	push 0
	push 1
	mov eax, 58h
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, [esp+edx*4+38h]
	mov edx, 0AAh
	call sub_41B710
	call sub_4054E0
	add esp, 60h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_40CB00 endp

sub_40CD70: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0C0h
	mov [esp+0B8h], eax
	mov [esp+0BCh], edx
	mov ebp, ebx
	mov ecx, 8
	lea edi, [esp+80h]
	mov esi, off_409E10
	rep movsd
	mov ecx, 10h
	lea edi, [esp+40h]
	mov esi, off_409E30
	rep movsd
	mov ecx, 10h
	mov edi, esp
	mov esi, off_409E70
	rep movsd
	mov ecx, 6
	lea edi, [esp+0A0h]
	mov esi, off_409EB0
	rep movsd
	cmp eax, off_4D2A20
	jz loc_40CF46
	cmp eax, off_4D3050
	jz loc_40CDEB
	cmp eax, off_4D3100
	jnz loc_40D026

loc_40CDEB:
	mov eax, 0FF000000h
	mov ecx, 80h
	mov ebx, 118h
	call sub_48266C
	mov edx, ebp
	push eax
	mov eax, [esp+0C0h]
	mov edi, [esp+0BCh]
	call sub_488620
	cmp edi, off_4D3050
	jnz loc_40CFF0
	xor eax, eax
	mov al, byte [byte_512DBF]

loc_40CE28:
	mov word [dword_4E5928], ax
	cmp byte [byte_512DD1], 0
	jz loc_40CFFC
	cmp word [dword_4E5928], 0Bh
	jg loc_40CFFC
	mov ebx, [esp+0BCh]
	mov edx, 3000h
	mov eax, aGrph ; "grph"
	mov ecx, ebp
	call sub_405B30
	mov eax, dword [dword_4E5924+2]
	sar eax, 10h
	mov esi, 0Ch
	sub esi, dword dword_4D236C[eax*4]
	lea eax, 0[esi*8]
	add eax, esi
	mov esi, [esp+0BCh]
	add esi, 1Ah
	lea ecx, [ebp+0Bh]
	mov ebx, esi
	mov edx, 3000h
	sub ebx, eax
	mov eax, aGrpg ; "grpg"
	call sub_405B30
	mov eax, dword [dword_4E5924+2]
	sar eax, 10h
	mov ecx, 0Ch
	sub ecx, dword dword_4D2330[eax*4]
	lea edx, [ebp+29h]
	lea eax, 0[ecx*8]
	mov ebx, esi
	add eax, ecx
	mov ecx, edx
	sub ebx, eax
	mov edx, 3000h
	mov eax, aGrpb ; "grpb"
	call sub_405B30
	mov eax, dword [dword_4E5924+2]
	sar eax, 10h
	mov ecx, 0Ch
	sub ecx, dword dword_4D23E4[eax*4]
	lea edx, [ebp+47h]
	lea eax, 0[ecx*8]
	mov ebx, esi
	add eax, ecx
	mov ecx, edx
	sub ebx, eax
	mov edx, 3000h
	mov eax, aGrpr ; "grpr"
	call sub_405B30
	mov eax, dword [dword_4E5924+2]
	lea ecx, [ebp+65h]
	sar eax, 10h
	mov ebx, 0Ch
	sub ebx, dword dword_4D23A8[eax*4]
	lea eax, 0[ebx*8]
	add eax, ebx
	mov ebx, esi
	mov edx, 3000h
	sub ebx, eax
	mov eax, aGrpy ; "grpy"
	call sub_405B30

loc_40CF3B:
	add esp, 0C0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_40CF46:
	mov eax, 0FF000000h
	mov ecx, 80h
	mov ebx, 118h
	call sub_48266C
	push eax
	mov edx, ebp
	mov eax, [esp+0C0h]
	call sub_488620
	xor eax, eax
	mov al, byte [byte_512DB0]
	mov word [dword_4E5928], ax
	xor eax, eax
	mov ebx, [esp+0BCh]
	mov al, byte [byte_512DB0]
	mov edx, 3000h
	mov ecx, ebp
	mov eax, [esp+eax*4+80h]
	call sub_405B30
	xor eax, eax
	mov al, byte [byte_512DB0]
	call sub_40D0C0
	test eax, eax
	jz loc_40CF3B
	mov esi, [esp+0BCh]
	mov edx, 3000h
	mov eax, aTrnm ; "trnm"
	add esi, 0B5h
	lea ecx, [ebp+2Dh]
	mov ebx, esi
	call sub_405B30
	xor eax, eax
	mov edx, 3000h
	mov al, byte [byte_512DFB]
	lea ecx, [ebp+0Ah]
	mov ebx, esi
	mov eax, [esp+eax*4+0A0h]
	call sub_405B30
	add esp, 0C0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_40CFF0:
	xor eax, eax
	mov al, byte [byte_512DDA]
	jmp loc_40CE28

loc_40CFFC:
	mov ebx, [esp+0BCh]
	mov eax, dword [dword_4E5924+2]
	mov edx, 3000h
	sar eax, 10h
	mov ecx, ebp
	mov eax, [esp+eax*4+40h]
	call sub_405B30
	add esp, 0C0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_40D026:
	cmp eax, off_4D3204
	jnz loc_40CF3B
	cmp byte [byte_512DF6], 0
	jz loc_40CF3B
	mov eax, 0FF000000h
	mov ecx, 80h
	mov ebx, 118h
	call sub_48266C
	push eax
	mov edx, ebp
	mov eax, [esp+0C0h]
	call sub_488620
	xor eax, eax
	mov al, byte [byte_512DF5]
	mov word [dword_4E5928], ax
	xor eax, eax
	mov ebx, [esp+0BCh]
	mov al, byte [byte_512DF5]
	mov edx, 3000h
	mov ecx, ebp
	mov eax, [esp+eax*4]
	call sub_405B30
	add esp, 0C0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_40CD70 endp

off_40D0A0: dd loc_40D0E1
	dd loc_40D102 ; jump table for switch statement
	dd loc_40D147
	dd loc_40D119
	dd loc_40D130
	dd loc_40D15E
	dd loc_40D175
	dd loc_40D18C

sub_40D0C0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_4D76B8]
	cmp byte [byte_512DAA], 1
	jnz loc_40D0F5
	test ecx, ecx
	jz loc_40D0F5
	cmp eax, 7 ; switch 8 cases
	ja loc_40D0EA ; jumptable 0040D0DA default case
	jmp off_40D0A0[eax*4] ; switch jump

loc_40D0E1:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 0
	and edx, 1

loc_40D0EA:
	mov eax, edx ; jumptable 0040D0DA default case
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D0F5:
	xor edx, edx
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D102:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 1
	shl edx, 1Eh
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D119:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 3
	shl edx, 1Dh
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D130:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 4
	shl edx, 1Ch
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D147:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 2
	shl edx, 1Bh
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D15E:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 5
	shl edx, 1Ah
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D175:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 6
	shl edx, 19h
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret

loc_40D18C:
	mov edx, [ecx+2C4h] ; jumptable 0040D0DA case 7
	shl edx, 18h
	shr edx, 1Fh
	mov eax, edx
	mov dword [dword_4D76B8], ecx
	pop edx
	pop ecx
	ret
;sub_40D0C0 endp

sub_40D1B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	xor ebp, ebp
	cmp eax, off_4D3204
	jnz loc_40D1D0
	cmp byte [byte_512DF6], 0
	jz loc_40D2DE

loc_40D1D0:
	mov eax, dword [dword_4E5924+2]
	sar eax, 10h
	mov [esp], eax
	cmp esi, off_4D3050
	jnz loc_40D1EE
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov [esp+4], eax

loc_40D1EE:
	cmp esi, off_4D3100
	jnz loc_40D201
	xor eax, eax
	mov al, byte [byte_512DDA]
	mov [esp+4], eax

loc_40D201:
	mov edx, 7D0h
	mov eax, 1
	mov ecx, esi
	xor ebx, ebx
	call sub_40B6C4
	mov eax, esi
	call sub_427ED0
	cmp esi, off_4D3050
	jnz loc_40D22B
	mov al, [esp]
	mov byte [byte_512DBF], al

loc_40D22B:
	cmp esi, off_4D3100
	jz loc_40D382

loc_40D237:
	mov edx, 7Fh
	mov eax, 4
	mov edi, 0FFFFFFE3h
	call sub_4423F0

loc_40D24B:
	push 2
	call sub_497680
	mov eax, ebp
	inc ebp
	cmp eax, 2
	jge loc_40D38F
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, 20h
	mov eax, 1
	xor ebx, ebx
	xor edx, edx
	call sub_427B30
	mov ebx, 1
	mov eax, esi
	xor edx, edx
	mov dword [dword_4D20A0], ebx
	call sub_40FA90
	mov eax, esi
	call sub_40CB00
	xor eax, eax
	mov dword [dword_4D20A0], eax
	mov eax, dword [byte_4D3ECC]
	xor edx, edx
	sar eax, 10h
	call sub_4276F0
	mov dword [dword_4D2314], eax
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_40D2C3:
	add edi, 0Ch
	call sub_4976B8
	cmp edi, 0DFh
	jnz loc_40D24B

loc_40D2DE:
	xor eax, eax
	mov edx, 400h
	call sub_403550
	xor ecx, ecx
	mov eax, dword [dword_4D4D24]
	xor ebx, ebx
	call sub_4825A8
	mov eax, aBlk4 ; "blk4"
	call sub_405B30
	mov ebx, 13Ch
	mov edx, 0D3h
	mov eax, esi
	call sub_40CD70
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	xor ecx, ecx
	mov eax, dword dword_4D231C[eax*4]
	mov edx, 2800h
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_4824BC
	xor edx, edx
	mov eax, dword [dword_4D4D24]
	mov dword [dword_4EB588], edx
	mov eax, [eax+20h]
	mov edx, 1
	call sub_428250
	cmp esi, off_4D3050
	jnz loc_40D363
	mov al, [esp+4]
	mov byte [byte_512DBF], al

loc_40D363:
	cmp esi, off_4D3100
	jnz loc_40D374
	mov al, [esp+4]
	mov byte [byte_512DDA], al

loc_40D374:
	call sub_486F28
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_40D382:
	mov al, [esp]
	mov byte [byte_512DDA], al
	jmp loc_40D237

loc_40D38F:
	mov edx, 13Ch
	mov eax, edi
	mov ecx, 20h
	call sub_4279E0
	xor ebx, ebx
	push 0FFFFFFFFh
	xor edx, edx
	xor eax, eax
	call sub_427B30
	mov edx, 1
	mov eax, esi
	mov dword [dword_4D20A0], edx
	xor edx, edx
	xor ecx, ecx
	call sub_40CB00
	mov dword [dword_4D20A0], ecx
	jmp loc_40D2C3
;sub_40D1B0 endp

sub_40D3D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 128h
	mov esi, eax
	mov ah, byte [byte_512ECC]
	xor edx, edx
	xor ebp, ebp
	mov [esp+11Ch], edx
	mov [esp+120h], edx
	test ah, ah
	jz loc_40D401
	mov byte [byte_512DA9], 4

loc_40D401:
	mov eax, 8
	xor ebx, ebx
	lea edx, [esp+100h]
	mov dword [dword_4E5914], ebx
	mov dword [dword_4D2310], ebx
	call sub_4056A0
	mov eax, 4D00h
	lea ebx, [esp+108h]
	call sub_40DEA0
	call sub_40EB20
	lea eax, [esp+110h]
	call sub_422060
	xor edx, edx
	mov eax, dword [dword_4D231C]
	mov word [word_4D231A], dx
	test eax, eax
	jnz loc_40D46B
	mov eax, 157h
	mov edx, dword [dword_4DAB80]
	xor ebx, ebx
	call sub_482474
	mov dword [dword_4D231C], eax

loc_40D46B:
	cmp dword [dword_4D2320], 0
	jnz loc_40D48B
	mov eax, 157h
	mov edx, dword [dword_4DAB80]
	xor ebx, ebx
	call sub_482474
	mov dword [dword_4D2320], eax

loc_40D48B:
	cmp dword [dword_4D2324], 0
	jnz loc_40D4AB
	mov eax, 280h
	mov edx, dword [dword_4DAB80]
	xor ebx, ebx
	call sub_482474
	mov dword [dword_4D2324], eax

loc_40D4AB:
	mov eax, esi
	call sub_410E80
	cmp dword [dword_4D21AC], 0
	jnz loc_40D4D6
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	mov edi, 1
	call sub_476750
	mov dword [dword_4D21AC], edi

loc_40D4D6:
	mov edx, aSide ; "side"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	xor ebx, ebx
	mov eax, [eax+2]
	mov edx, dword [dword_4DAB80]
	sar eax, 10h
	call sub_482474
	mov edx, 1
	mov [esp+118h], eax
	mov [esp+114h], eax
	mov eax, esi
	call sub_40BBE0
	mov eax, [esp+118h]
	call sub_4825A8
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	xor ecx, ecx
	mov eax, dword dword_4D231C[eax*4]
	xor ebx, ebx
	mov edx, 400h
	mov eax, [eax+20h]
	xor edi, edi
	call sub_405B60
	mov ebx, 1
	mov cx, word [word_4D232C]
	mov [esp+124h], ebx
	test cx, cx
	jz loc_40D63E
	xor eax, eax
	mov word [word_4D232C], ax
	call sub_428A20
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	call sub_405C70
	call sub_428A20
	mov eax, 0FF000000h
	mov edx, aBlk6 ; "blk6"
	call sub_48266C
	call sub_482740
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, 1
	call sub_428250
	mov eax, [esp+118h]
	mov ebx, 1
	xor edx, edx
	mov eax, [eax+20h]
	xor ecx, ecx
	call sub_428250
	xor eax, eax
	mov edx, 0E6h
	call sub_427450
	xor eax, eax
	call sub_427320
	call sub_486F28
	cmp byte [byte_512F3F], 0
	jz loc_40D63E
	call sub_476BB0
	test eax, eax
	jnz loc_40D63E
	mov eax, dword [dword_4D4D24]
	mov edx, 400h
	call sub_4825A8
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esi+4]
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 2800h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_4824BC
	mov eax, 30Ch
	xor bl, bl
	call sub_402CD0
	mov byte [byte_512F3F], bl

loc_40D63E:
	mov eax, dword [dword_4D4D24]
	mov edx, 400h
	call sub_4825A8
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esi+4]
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 2800h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_4824BC
	xor eax, eax
	mov dword [dword_4EB588], eax
	mov eax, dword [dword_4D4D24]
	mov edx, 1
	mov eax, [eax+20h]
	call sub_428250
	xor edx, edx
	mov ecx, 1
	mov dword [dword_4D2420], edx
	call sub_4833C7
	mov dword [dword_4D2310], ecx
	test edi, edi
	jnz loc_40D9F2

loc_40D6B7:
	xor eax, eax
	call sub_403550
	call sub_4833C7
	mov ebx, dword [dword_4E5914]
	lea edx, [esp+104h]
	add ebx, eax
	lea eax, [esp+110h]
	mov dword [dword_4E5914], ebx
	lea ebx, [esp+10Ch]
	call sub_422060
	mov eax, [esp+104h]
	cmp eax, [esp+100h]
	jz loc_40DAAA

loc_40D6FF:
	mov ebp, dword [dword_4E5914]
	call sub_4833C7

loc_40D70A:
	cmp word [esp+124h], 0
	jnz loc_40D722
	cmp dword [dword_4D2314], 0
	jz loc_40DAC3

loc_40D722:
	cmp byte [byte_512ECC], 0
	jnz loc_40DAD8
	mov eax, dword [dword_4E5914]
	sub eax, ebp
	cmp eax, 0C80h
	jle loc_40DAD8
	call sub_4056B0
	call sub_4762E0
	call sub_476250
	mov eax, dword [dword_4D2328]
	push eax
	push aDemoav ; "demoav"
	push aSD_dct ; "%s%d.dct"
	lea eax, [esp+0Ch]
	xor ebp, ebp
	push eax
	mov dword [dword_4D2310], ebp
	call sprintf_
	add esp, 10h
	mov eax, esp
	call sub_4242F0
	mov edx, dword [dword_4D2328]
	inc edx
	mov dword [dword_4D2328], edx
	cmp edx, 3
	jl loc_40D794
	mov dword [dword_4D2328], ebp

loc_40D794:
	call sub_4769D0
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	call sub_476750
	call sub_4057C0
	xor ebp, ebp
	xor ecx, ecx
	xor ebx, ebx
	mov eax, esi
	mov edx, 1
	call sub_410E80
	call sub_408450
	call sub_486F28
	mov dword [dword_4E5914], ebp
	call sub_4833C7
	mov eax, dword [dword_4D4D24]
	mov dword [dword_4D2310], edx
	call sub_4825A8
	mov edx, 400h
	mov eax, [esi+4]
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 2800h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	call sub_4824BC
	mov eax, dword [dword_4D4D24]
	mov edx, 1
	mov eax, [eax+20h]
	mov dword [dword_4EB588], ebp
	call sub_428250

loc_40D82F:
	call sub_40EB20
	lea ebx, [esp+108h]
	lea edx, [esp+100h]
	lea eax, [esp+110h]
	call sub_422060
	mov ecx, esi
	mov ebx, 1
	mov edx, 7D0h
	mov eax, ebx
	call sub_40B6C4

loc_40D861:
	push 2
	call sub_497680
	call sub_49769C
	xor ebx, ebx
	push 0FFFFFFFFh
	mov ecx, 20h
	mov eax, 1
	xor edx, edx
	call sub_427B30
	mov eax, esi
	call sub_40DC40
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0
	call sub_4976B8
	push 0
	call sub_4976C8
	cmp word [word_51345C], 0
	jz loc_40D8D3
	call sub_401080
	mov eax, 300h
	call sub_402CD0
	xor eax, eax
	mov word [word_51345C], ax

loc_40D8D3:
	cmp word [word_51345A], 0
	jz loc_40D8FF
	mov ebx, aCNfs2seFront_2 ; "c:\\nfs2se\\frontend\\common\\Mainmenu.c"
	mov eax, 283h
	push aBugUserDidNotG ; "BUG: User did not go back to netmenu_ne"...
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_40D8FF:
	mov eax, esi
	call sub_423CA0
	mov [esp+124h], eax
	call sub_405960
	mov edx, eax
	mov ebx, eax
	call sub_4833C7
	mov ecx, dword [dword_4E5914]
	add ecx, eax
	mov dword [dword_4E5914], ecx
	test dx, dx
	jz loc_40DAEC
	cmp ecx, [esp+11Ch]
	jle loc_40DAEC

loc_40D93F:
	mov eax, dword [dword_4E5914]
	mov ecx, 1
	add eax, 0Fh
	movsx edx, bx
	mov [esp+11Ch], eax
	mov eax, esi
	mov [esp+124h], ecx
	call sub_410414
	mov edi, eax
	cmp bx, 4B00h
	jnz loc_40DB04

loc_40D971:
	mov edx, [esi+8]
	movsx eax, bx
	sar edx, 10h
	call sub_40DC90

loc_40D97F:
	cmp edi, 0FFFFFFFEh
	jnz loc_40DB14

loc_40D988:
	mov eax, 10h
	call sub_486550
	test eax, eax
	jnz loc_40D9C5
	cmp byte [byte_512DAA], 1
	jnz loc_40DB22
	cmp dword [dword_4D76B8], 0
	jz loc_40DB22
	push 2EDh

loc_40D9B5:
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jnz loc_40D9C5
	xor edi, edi

loc_40D9C5:
	call sub_4833C7
	mov ebp, dword [dword_4E5914]
	add ebp, eax
	mov word [dword_4E5928+2], bx
	mov dword [dword_4E5914], ebp

loc_40D9DF:
	cmp dword [esp+120h], 0
	jz loc_40DB2C
	mov edi, 0FFFFFFFDh

loc_40D9F2:
	mov eax, 1
	mov ebx, [esp+114h]
	xor ecx, ecx
	mov word [dword_4E5924+2], ax
	mov dword [dword_4D2310], ecx
	test ebx, ebx
	jz loc_40DA17
	mov eax, ebx
	call sub_4848FC

loc_40DA17:
	cmp edi, 0FFFFFFFDh
	jnz loc_40DB57
	mov ch, byte [byte_512DA9]
	test ch, ch
	jz loc_40DB57
	cmp ch, 1
	jz loc_40DB57
	xor edi, edi

loc_40DA39:
	mov edx, 1
	mov eax, esi
	call sub_40BBE0

loc_40DA45:
	cmp edi, 0FFFFFFFDh
	jnz loc_40DA60
	cmp byte [byte_512DAA], 2
	jnz loc_40DA60
	xor dh, dh
	mov byte [byte_512DB0], dh
	call sub_41A450

loc_40DA60:
	cmp edi, 0FFFFFFFDh
	jnz loc_40DC26
	cmp dword [dword_4D96B0], 0
	jz loc_40DC0B
	push 40h
	mov ecx, 7Fh
	mov edx, 6
	mov eax, dword [dword_50B410]
	xor ebx, ebx

loc_40DA89:
	call sub_442280
	mov edx, eax
	xor ebx, ebx

loc_40DA92:
	mov eax, edx
	call sub_486040
	test eax, eax
	jnz loc_40DC26
	mov eax, ebx
	call sub_483EB0
	jmp loc_40DA92

loc_40DAAA:
	mov eax, [esp+10Ch]
	cmp eax, [esp+108h]
	jnz loc_40D6FF
	jmp loc_40D70A

loc_40DAC3:
	mov eax, esi
	xor edx, edx
	call sub_40BBE0
	mov [esp+124h], eax
	jmp loc_40D722

loc_40DAD8:
	cmp word [esp+124h], 0
	jnz loc_40D82F
	jmp loc_40D861

loc_40DAEC:
	mov eax, dword [dword_4E5928]
	movsx edx, bx
	sar eax, 10h
	cmp eax, edx
	jnz loc_40D93F
	jmp loc_40D9DF

loc_40DB04:
	cmp bx, 4D00h
	jz loc_40D971
	jmp loc_40D97F

loc_40DB14:
	cmp edi, 0FFFFFFFFh
	jz loc_40D988
	jmp loc_40D9C5

loc_40DB22:
	push 309h
	jmp loc_40D9B5

loc_40DB2C:
	cmp edi, 0FFFFFFFBh
	jnz loc_40DB4A
	mov edx, 1
	mov word [esi+0Ah], 4
	xor edi, edi
	mov [esp+120h], edx
	jmp loc_40D6B7

loc_40DB4A:
	test edi, edi
	jz loc_40D6B7
	jmp loc_40D9F2

loc_40DB57:
	cmp edi, 0FFFFFFFDh
	jnz loc_40DBF6

loc_40DB60:
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov eax, dword dword_4D231C[eax*4]
	mov ecx, 1
	xor edx, edx
	mov eax, [eax+20h]
	mov ebx, ecx
	call sub_428250
	mov eax, 0E6h
	xor edx, edx
	call sub_427280
	xor eax, eax
	call sub_4273B0

loc_40DB93:
	cmp edi, 0FFFFFFFFh
	jnz loc_40DC01

loc_40DB98:
	cmp byte [byte_512ECC], 0
	jnz loc_40DA45
	mov esi, dword [dword_4D231C]
	test esi, esi
	jz loc_40DBBE
	mov eax, esi
	xor ebp, ebp
	call sub_4848FC
	mov dword [dword_4D231C], ebp

loc_40DBBE:
	mov eax, dword [dword_4D2320]
	test eax, eax
	jz loc_40DBD4
	xor edx, edx
	call sub_4848FC
	mov dword [dword_4D2320], edx

loc_40DBD4:
	mov ecx, dword [dword_4D2324]
	test ecx, ecx
	jz loc_40DA45
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword [dword_4D2324], ebx
	jmp loc_40DA45

loc_40DBF6:
	cmp edi, 0FFFFFFFEh
	jz loc_40DB60
	jmp loc_40DB93

loc_40DC01:
	cmp edi, 0FFFFFFFDh
	jz loc_40DB98
	jmp loc_40DA39

loc_40DC0B:
	push 40h
	mov ecx, 7Fh
	mov ebx, 40h
	mov edx, 6
	mov eax, dword [dword_50B410]
	jmp loc_40DA89

loc_40DC26:
	mov eax, 6
	call sub_4056A0
	mov eax, edi
	add esp, 128h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40D3D0 endp

sub_40DC40: ;SUBROUTINE
	push ebx
	push edx
	mov edx, eax
	mov dword [dword_4D20A0], 1
	call sub_40FA90
	mov eax, [edx+8]
	sar eax, 10h
	xor ebx, ebx
	call sub_40DDD0
	mov eax, dword [byte_4D3ECC]
	mov edx, dword [dword_4E5914]
	sar eax, 10h
	mov dword [dword_4D20A0], ebx
	call sub_4276F0
	mov dword [dword_4D2314], eax
	pop edx
	pop ebx
	ret
;sub_40DC40 endp

sub_40DC90: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov ecx, edx
	test edx, edx
	jnz loc_40DCAE
	cmp eax, 4B00h
	jnz loc_40DCE7
	mov eax, dword [off_4D2424]
	call sub_40DD20

loc_40DCAC:
	mov esi, eax

loc_40DCAE:
	test ecx, ecx
	jz loc_40DCF3

loc_40DCB2:
	inc ecx
	cmp ecx, 6
	jge loc_40DCD4
	lea eax, 0[ecx*4]
	cmp ebx, 4B00h
	jnz loc_40DCF9
	mov edx, ecx
	mov eax, dword off_4D2424[eax]
	call sub_40DD20

loc_40DCD4:
	mov eax, ebx
	call sub_40DEA0

loc_40DCDB:
	xor edx, edx
	mov dword [dword_4E5914], edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_40DCE7:
	mov eax, dword [off_4D2424]
	call sub_40DD80
	jmp loc_40DCAC

loc_40DCF3:
	test esi, esi
	jnz loc_40DCB2
	jmp loc_40DCDB

loc_40DCF9:
	mov edx, ecx
	mov eax, dword off_4D2424[eax]
	call sub_40DD80
	mov eax, ebx
	call sub_40DEA0
	xor edx, edx
	mov dword [dword_4E5914], edx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_40DC90 endp

sub_40DD20: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	call sub_410E10
	xor ebx, ebx
	test eax, eax
	jz loc_40DD69
	cmp edx, 1
	jnz loc_40DD55

loc_40DD34:
	mov eax, [ecx+0Ch]
	mov dl, [eax]
	test dl, dl
	jnz loc_40DD63

loc_40DD3D:
	mov eax, [ecx+0Ch]
	xor ebx, ebx
	mov edx, [ecx+10h]
	mov bl, [eax]
	cmp word [edx+ebx*2+2], 0
	jz loc_40DD6E
	inc bl
	mov [eax], bl
	jmp loc_40DD3D

loc_40DD55:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	jmp loc_40DD34

loc_40DD63:
	mov dh, dl
	dec dh
	mov [eax], dh

loc_40DD69:
	mov eax, ebx
	pop ecx
	pop ebx
	ret

loc_40DD6E:
	mov ebx, 1
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_40DD20 endp

sub_40DD80: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	call sub_410E10
	xor ebx, ebx
	test eax, eax
	jz loc_40DDAA
	cmp edx, 1
	jnz loc_40DDAF

loc_40DD94:
	mov eax, [ecx+0Ch]
	inc byte [eax]
	mov eax, [ecx+0Ch]
	xor edx, edx
	mov dl, [eax]
	mov ecx, [ecx+10h]
	cmp word [ecx+edx*2], 0
	jz loc_40DDBD

loc_40DDAA:
	mov eax, ebx
	pop ecx
	pop ebx
	ret

loc_40DDAF:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	jmp loc_40DD94

loc_40DDBD:
	mov ebx, 1
	mov byte [eax], 0
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_40DD80 endp

sub_40DDD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	lea esi, [eax+1]
	cmp esi, 1
	jz loc_40DDE8
	cmp esi, 2
	jz loc_40DE5A
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40DDE8:
	mov eax, dword [off_4D2424]
	push 4
	mov edx, [eax+0Ch]
	push 3
	mov dl, [edx]
	and edx, 0FFh
	mov eax, [eax+10h]
	mov ecx, 0Dh
	mov ebx, 49h
	movsx eax, word [eax+edx*2]
	mov edx, 23Ah
	call sub_41B710
	call sub_4054E0
	mov eax, dword [off_4D2428]
	push 4
	mov edx, [eax+0Ch]
	push 4
	mov dl, [edx]
	and edx, 0FFh
	mov eax, [eax+10h]
	mov ecx, 0Dh
	mov ebx, 49h
	movsx eax, word [eax+edx*2]
	mov edx, 230h
	call sub_41B710
	call sub_4054E0
	cmp esi, 2
	jz loc_40DE5A
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40DE5A:
	mov eax, dword off_4D2424[esi*4]
	push 4
	mov edx, [eax+0Ch]
	push 5
	mov dl, [edx]
	and edx, 0FFh
	mov eax, [eax+10h]
	mov ecx, 0Dh
	mov ebx, 0B5h
	movsx eax, word [eax+edx*2]
	mov edx, 23Eh
	call sub_41B710
	call sub_4054E0
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40DDD0 endp

sub_40DEA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor edx, edx
	mov dl, byte [byte_512DB0]
	cmp eax, 4B00h
	jnz loc_40DEEE
	mov ch, 6

loc_40DEB4:
	xor eax, eax
	mov al, byte [byte_512DB0]
	call sub_40D0C0
	test eax, eax
	jz loc_40DEDF
	mov cl, byte [byte_512DB0]
	test cl, cl
	jnz loc_40DEE3
	mov byte [byte_512DB0], ch

loc_40DED4:
	xor eax, eax
	mov al, byte [byte_512DB0]
	cmp eax, edx
	jnz loc_40DEB4

loc_40DEDF:
	pop edx
	pop ecx
	pop ebx
	ret

loc_40DEE3:
	mov al, cl
	dec al
	mov byte [byte_512DB0], al
	jmp loc_40DED4

loc_40DEEE:
	xor eax, eax
	mov al, byte [byte_512DB0]
	call sub_40D0C0
	test eax, eax
	jz loc_40DEDF
	mov ah, byte [byte_512DB0]
	inc ah
	mov byte [byte_512DB0], ah
	cmp ah, 7
	jnb loc_40DF1E
	xor eax, eax
	mov al, byte [byte_512DB0]
	cmp eax, edx
	jz loc_40DEDF
	jmp loc_40DEEE

loc_40DF1E:
	xor bh, bh
	mov byte [byte_512DB0], bh
	xor eax, eax
	mov al, byte [byte_512DB0]
	cmp eax, edx
	jz loc_40DEDF
	jmp loc_40DEEE
;sub_40DEA0 endp

sub_40DF40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov eax, dword [dword_4D7708]
	call sub_489F48
	cmp word [word_51345A], 0
	jz loc_40DF5B

loc_40DF57:
	pop edi
	pop esi
	pop ecx
	ret

loc_40DF5B:
	mov eax, dword [dword_513408+2]
	sar eax, 10h
	call sub_463DC0
	cwde
	mov ecx, [edx+4]
	cmp eax, ecx
	jz loc_40DFC2
	mov edi, ecx
	mov esi, edx
	shl edi, 5
	mov ecx, 20h
	add edi, dword_4E5940
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 1
	mov eax, dword [dword_4D7708]
	mov word [dword_513428], cx
	call sub_489F60
	cmp word [word_513458], 0
	jz loc_40DF57
	mov ebx, 20h
	xor eax, eax
	call sub_464070
	pop edi
	pop esi
	pop ecx
	ret

loc_40DFC2:
	mov eax, dword [dword_4D7708]
	call sub_489F60
	pop edi
	pop esi
	pop ecx
	ret
;sub_40DF40 endp

sub_40DFD0: ;SUBROUTINE
	mov eax, dword [dword_4D24E0]
	call sub_489F48
	cmp word [word_51345A], 0
	jz loc_40DFE5
	ret

loc_40DFE5:
	push edi
	push esi
	push ecx
	mov ecx, 0Ch
	mov edi, byte_4E5A60
	mov esi, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 1
	mov ah, byte [byte_4E5A61]
	mov word [word_513426], cx
	cmp ah, 1
	jz loc_40E02E
	cmp dword [dword_4D76B8], 0
	jz loc_40E02E
	mov dword [dword_4D24E4], 1

loc_40E02E:
	mov eax, dword [dword_4D24E0]
	call sub_489F60
	pop ecx
	pop esi
	pop edi
	ret
;sub_40DFD0 endp

sub_40E040: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 20h
	mov eax, dword [dword_513408+2]
	sar eax, 10h
	xor edx, edx
	call sub_463DC0
	mov [ebp-14h], ax
	mov ah, byte [byte_51345F]
	mov [ebp-0Ch], edx
	test ah, ah
	jnz loc_40E157
	mov eax, 2

loc_40E074:
	xor ebx, ebx
	mov [ebp-4], ax
	mov [ebp-8], bx
	mov [ebp-18h], ebx

loc_40E081:
	mov edx, [ebp-6]
	mov eax, [ebp-0Ah]
	sar edx, 10h
	sar eax, 10h
	cmp eax, edx
	jge loc_40E294
	mov edx, [ebp-16h]
	sar edx, 10h
	cmp eax, edx
	jnz loc_40E161
	mov word [ebp-10h], 4

loc_40E0A9:
	cmp word [ebp-4], 2
	jle loc_40E16C
	imul esi, [ebp-8], 3Bh

loc_40E0B8:
	add esi, 2
	mov eax, [ebp-0Ah]
	sar eax, 10h
	lea ecx, [eax+eax]
	mov dx, word (dword_51340C+2)[ecx]
	mov edi, eax
	movsx edx, dx
	shl edi, 5
	cmp edx, 0FFFFFFFFh
	jnz loc_40E174
	cmp eax, dword dword_4E5944[edi]
	jnz loc_40E10D
	mov eax, dword [dword_4D7708]
	call sub_489F48
	mov eax, dword dword_51340C[ecx]
	sar eax, 10h
	cmp eax, edx
	jnz loc_40E103
	xor eax, edx
	mov dword dword_4E5944[edi], eax

loc_40E103:
	mov eax, dword [dword_4D7708]
	call sub_489F60

loc_40E10D:
	mov eax, esi
	mov edx, 10Eh
	inc eax
	xor ecx, ecx
	movsx ebx, ax
	mov eax, 98h
	call sub_405580
	mov ebx, 0F6h
	mov edx, 3000h
	movsx ecx, si
	mov eax, aDark ; "dark"

loc_40E136:
	add ecx, 8
	call sub_405B30

loc_40E13E:
	mov esi, [ebp-8]
	mov ecx, [ebp-18h]
	inc esi
	add ecx, 0ECh
	mov [ebp-8], si
	mov [ebp-18h], ecx
	jmp loc_40E081

loc_40E157:
	mov eax, 8
	jmp loc_40E074

loc_40E161:
	mov word [ebp-10h], 2
	jmp loc_40E0A9

loc_40E16C:
	mov esi, [ebp-18h]
	jmp loc_40E0B8

loc_40E174:
	cmp eax, dword dword_4E5944[edi]
	jz loc_40E1B7
	mov ebx, 0F6h
	mov edx, 3000h
	movsx edi, si
	mov eax, aWait ; "wait"
	lea ecx, [edi+8]
	call sub_405B30
	mov eax, [ebp-12h]
	sar eax, 10h
	push eax
	mov ecx, 12h
	mov edx, 10Eh
	push 3
	mov ebx, edi
	mov eax, a___ ; "..."
	call sub_4054E0
	jmp loc_40E13E

loc_40E1B7:
	mov eax, dword [dword_4D7708]
	call sub_489F48
	mov eax, [ebp-12h]
	sar eax, 10h
	mov ecx, 12h
	mov [ebp-20h], eax
	push eax
	movsx eax, si
	mov edx, 10Eh
	mov [ebp-1Ch], eax
	mov eax, dword_4E5940
	push 3
	add eax, edi
	mov ebx, [ebp-1Ch]
	add eax, 9
	call sub_4054E0
	mov eax, [ebp-20h]
	mov ecx, 12h
	push eax
	xor eax, eax
	mov ebx, [ebp-1Ch]
	mov al, byte byte_4E5952[edi]
	push 3
	add eax, 60h
	mov edx, 1A4h
	call sub_41B710
	call sub_4054E0
	mov edx, [ebp-20h]
	mov ecx, 12h
	push edx
	mov ebx, [ebp-1Ch]
	mov al, byte byte_4E5953[edi]
	push 3
	mov edx, 235h
	test al, al
	jnz loc_40E279
	mov eax, 1

loc_40E239:
	add eax, 5Eh
	call sub_41B710
	call sub_4054E0
	mov eax, dword [dword_4D7708]
	call sub_489F60
	mov eax, [ebp-0Ah]
	sar eax, 10h
	shl eax, 5
	cmp byte byte_4E5948[eax], 0
	jz loc_40E27D
	mov ebx, 0F6h
	mov edx, 3000h
	movsx ecx, si
	mov eax, aRedy ; "redy"
	jmp loc_40E136

loc_40E279:
	xor eax, eax
	jmp loc_40E239

loc_40E27D:
	mov ebx, 0F6h
	mov edx, 3000h
	movsx ecx, si
	mov eax, aWait ; "wait"
	jmp loc_40E136

loc_40E294:
	xor edx, edx
	mov si, word [dword_513408+2]
	mov dword [dword_4D24DC], edx
	cmp si, 2
	jl loc_40E2CB
	xor edx, edx
	xor ecx, ecx

loc_40E2AD:
	mov ebx, dword [dword_513408]
	movsx eax, dx
	sar ebx, 10h
	cmp eax, ebx
	jge loc_40E317
	call sub_463DC0
	cwde
	cmp eax, 0FFFFFFFFh
	jnz loc_40E308

loc_40E2C8:
	inc edx
	jmp loc_40E2AD

loc_40E2CB:
	mov edx, 2800h
	mov eax, aRedd ; "redd"

loc_40E2D5:
	xor ecx, ecx

loc_40E2D7:
	xor ebx, ebx

loc_40E2D9:
	call sub_405B30
	mov edx, 2800h
	mov eax, aLogo ; "logo"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	xor eax, eax
	call sub_4211E0
	cmp word [ebp-0Ch], 0
	jnz loc_40E35D
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40E308:
	shl eax, 5
	cmp byte byte_4E5948[eax], 0
	jz loc_40E2C8
	inc ecx
	jmp loc_40E2C8

loc_40E317:
	test ecx, ecx
	jz loc_40E32B
	cmp ecx, ebx
	jge loc_40E337
	mov edx, 2800h
	mov eax, aYell ; "yell"
	jmp loc_40E2D5

loc_40E32B:
	mov edx, 2800h
	mov eax, aRedd ; "redd"
	jmp loc_40E2D7

loc_40E337:
	mov edx, 1
	mov edi, 1
	mov eax, aGren ; "gren"
	xor ecx, ecx
	xor ebx, ebx
	mov dword [dword_4D24DC], edx
	mov edx, 2800h
	mov [ebp-0Ch], edi
	jmp loc_40E2D9

loc_40E35D:
	mov eax, 305h
	call sub_402E10
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40E040 endp

sub_40E370: ;SUBROUTINE
	push ebx
	push edx
	push esi
	xor eax, eax

loc_40E375:
	add eax, 20h
	xor dl, dl
	mov byte dword_4E5928[eax], dl
	xor edx, edx
	mov dword dword_4E5924[eax], edx
	cmp eax, 100h
	jnz loc_40E375
	call sub_420FC0
	cmp byte [byte_512DAA], 2
	jz loc_40E3CF

loc_40E39D:
	mov bh, byte [byte_512F42]
	cmp bh, 0Eh
	jbe loc_40E3DE
	xor dl, dl
	mov byte [byte_512DF6], dl

loc_40E3B0:
	cmp dword [dword_4D24E4], 0
	jz loc_40E3CB
	xor ebx, ebx
	mov esi, dword [dword_4D76B8]
	mov dword [dword_4D24E4], ebx
	test esi, esi
	jnz loc_40E40B

loc_40E3CB:
	pop esi
	pop edx
	pop ebx
	ret

loc_40E3CF:
	xor bl, bl
	mov byte [byte_512DB0], bl
	call sub_41A450
	jmp loc_40E39D

loc_40E3DE:
	cmp bh, 0Ch
	jb loc_40E3F8
	cmp bh, 0Eh
	ja loc_40E3F8
	mov ah, 2
	mov byte [byte_512DF5], bh
	mov byte [byte_512DF6], ah
	jmp loc_40E3B0

loc_40E3F8:
	mov al, byte [byte_512F42]
	mov byte [byte_512DF5], al
	mov byte [byte_512DF6], 2
	jmp loc_40E3B0

loc_40E40B:
	call sub_41A350
	pop esi
	pop edx
	pop ebx
	ret
;sub_40E370 endp

sub_40E420: ;SUBROUTINE
	push ebx
	push edx
	push edi
	push ebp
	cmp word [dword_513408+2], 2
	jl loc_40E519
	cmp word [word_513458], 0
	jz loc_40E50B
	xor ebx, ebx

loc_40E442:
	mov eax, dword [dword_513408]
	sar eax, 10h
	cmp ebx, eax
	jl loc_40E4E1
	mov dword [dword_4DA1B8], 1
	call sub_47DCF0
	test eax, eax
	jz loc_40E501

loc_40E469:
	cmp word [word_513458], 0
	jnz loc_40E520

loc_40E477:
	call sub_40E6B0
	xor edx, edx

loc_40E47E:
	add edx, 2
	xor edi, edi
	mov word word_513446[edx], di
	cmp edx, 10h
	jnz loc_40E47E
	push esi
	push ecx
	mov edx, 1
	mov eax, 1400h
	mov ebp, byte_512E84
	call sub_463930
	mov edx, 1
	mov eax, 0A00h
	xor ebx, ebx
	call sub_463930
	xor edx, edx

loc_40E4B8:
	mov eax, dword [dword_513408]
	sar eax, 10h
	cmp ebx, eax
	jge loc_40E611
	movsx eax, bx
	call sub_463DC0
	movsx ecx, ax
	cmp ecx, 0FFFFFFFFh
	jnz loc_40E537
	add ebp, 9
	inc ebx
	add edx, 2
	jmp loc_40E4B8

loc_40E4E1:
	movsx eax, bx
	call sub_463DC0
	cwde
	cmp eax, 0FFFFFFFFh
	jz loc_40E519
	shl eax, 5
	cmp byte byte_4E5948[eax], 0
	jz loc_40E519
	inc ebx
	jmp loc_40E442

loc_40E501:
	mov dword [dword_4DA1B8], eax
	pop ebp
	pop edi
	pop edx
	pop ebx
	ret

loc_40E50B:
	cmp word [dword_513428+2], 1
	jz loc_40E469

loc_40E519:
	xor eax, eax
	pop ebp
	pop edi
	pop edx
	pop ebx
	ret

loc_40E520:
	call sub_47E360
	xor ebx, ebx
	call sub_40E620
	mov dword [dword_4DA1B8], ebx
	jmp loc_40E477

loc_40E537:
	mov esi, dword_4E5940
	shl ecx, 5
	add esi, ecx
	mov edi, ebp
	add esi, 9
	push edi

loc_40E547:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40E55F
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40E547

loc_40E55F:
	pop edi
	xor eax, eax
	mov al, byte byte_4E5952[ecx]
	mov word (dword_512F98+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5953[ecx]
	mov word (dword_512FA8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5954[ecx]
	mov word (dword_512FB8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E595A[ecx]
	mov word (dword_512FC8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5958[ecx]
	mov word (dword_512FD8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5959[ecx]
	mov word (dword_512FE8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E595C[ecx]
	mov word (dword_512FF8+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E595B[ecx]
	mov word (dword_513008+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5955[ecx]
	mov word (dword_513018+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5956[ecx]
	mov word (dword_513028+2)[edx], ax
	xor eax, eax
	mov al, byte byte_4E5957[ecx]
	mov word word_51303A[edx], ax
	add ebp, 9
	inc ebx
	add edx, 2
	jmp loc_40E4B8

loc_40E611:
	mov eax, 1
	pop ecx
	pop esi
	pop ebp
	pop edi
	pop edx
	pop ebx
	ret
;sub_40E420 endp

sub_40E620: ;SUBROUTINE
	push ebx
	push edx
	mov byte [byte_4E5A60], 1
	mov al, byte [byte_512DAA]
	mov byte [byte_4E5A61], al
	mov al, byte [byte_512DAB]
	mov byte [byte_4E5A62], al
	mov al, byte [byte_512DB0]
	mov byte [byte_4E5A63], al
	mov al, byte [byte_512F43]
	mov byte [byte_4E5A64], al
	mov al, byte [byte_512DB8]
	mov byte [byte_4E5A65], al
	mov al, byte [byte_512DB9]
	mov byte [byte_4E5A66], al
	mov al, byte [byte_512F42]
	mov byte [byte_4E5A67], al
	mov al, byte [byte_512DF8]
	mov byte [byte_4E5A68], al
	mov al, byte [byte_512DBB]
	mov ebx, 0Ch
	mov byte [byte_4E5A69], al
	mov ax, word [dword_512D9E+2]
	mov edx, byte_4E5A60
	mov word [word_4E5A6A], ax
	xor eax, eax
	call sub_464070
	pop edx
	pop ebx
	ret
;sub_40E620 endp

sub_40E6B0: ;SUBROUTINE
	mov byte [byte_4E5A40], 2
	mov eax, dword [dword_513408+2]
	sar eax, 10h
	call sub_463DC0
	cwde
	mov dword [dword_4E5A44], eax
	cmp eax, 0FFFFFFFFh
	jnz loc_40E6D0
	ret

loc_40E6D0:
	push edi
	push esi
	push edx
	push ecx
	push ebx
	mov esi, dword_512F4C
	mov al, byte [byte_512F45]
	mov edi, byte_4E5A49
	mov byte [byte_4E5A48], al
	push edi

loc_40E6EA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40E702
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40E6EA

loc_40E702:
	pop edi
	mov al, byte [byte_512DBF]
	mov byte [byte_4E5A52], al
	mov al, byte [byte_512DC0]
	mov byte [byte_4E5A53], al
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov al, byte byte_512DC1[eax]
	mov byte [byte_4E5A54], al
	mov al, byte [byte_512DD6]
	mov byte [byte_4E5A55], al
	mov al, byte [byte_512DD8]
	mov ecx, 20h
	mov byte [byte_4E5A56], al
	mov al, byte [byte_512DD9]
	mov ebx, 20h
	mov byte [byte_4E5A57], al
	mov al, byte [byte_512DD3]
	mov edx, byte_4E5A40
	mov byte [byte_4E5A58], al
	mov al, byte [byte_512DD4]
	mov esi, byte_4E5A40
	mov byte [byte_4E5A59], al
	mov al, byte [byte_512DD2]
	mov edi, dword [dword_4E5A44]
	mov byte [byte_4E5A5A], al
	mov al, byte [byte_512DD7]
	shl edi, 5
	mov byte [byte_4E5A5B], al
	mov al, byte [byte_512DD5]
	add edi, dword_4E5940
	mov byte [byte_4E5A5C], al
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	call sub_464070
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	ret
;sub_40E6B0 endp

sub_40E7C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, eax
	call sub_47E610
	mov esi, eax
	mov ebp, eax
	mov eax, dword [dword_513408+2]
	sar eax, 10h
	call sub_463DC0
	movsx edi, ax
	xor ecx, ecx
	cmp edi, 0FFFFFFFFh
	jnz loc_40E883

loc_40E7EC:
	cmp word [word_513458], 0
	jz loc_40E811
	mov al, byte [byte_4E5A61]
	cmp al, byte [byte_512DAA]
	jz loc_40E909

loc_40E807:
	call sub_40E620
	mov ecx, 1

loc_40E811:
	cmp word [word_513434], 0
	jz loc_40E829
	xor edi, edi
	mov ecx, 1
	mov word [word_513434], di

loc_40E829:
	mov eax, ebx
	xor edx, edx
	call sub_420FD0
	or ecx, eax
	cmp word [dword_513428], 0
	jz loc_40E860
	mov eax, dword [dword_4D7708]
	mov ecx, 1
	call sub_489F48
	xor edx, edx
	mov eax, dword [dword_4D7708]
	mov word [dword_513428], dx
	call sub_489F60

loc_40E860:
	mov bx, word [word_513458]
	test bx, bx
	jnz loc_40E87A
	cmp word [word_513426], 0
	jnz loc_40E9BD

loc_40E87A:
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40E883:
	mov al, byte [byte_4E5A52]
	cmp al, byte [byte_512DBF]
	jnz loc_40E8FA
	mov dl, byte [byte_512DC0]
	cmp dl, byte [byte_4E5A53]
	jnz loc_40E8FA
	mov dh, byte [byte_512F45]
	cmp dh, byte [byte_4E5A48]
	jnz loc_40E8FA
	mov edx, dword_512F4C
	mov eax, byte_4E5A49
	call strcmp_
	test eax, eax
	jnz loc_40E8FA
	test esi, esi
	jnz loc_40E8FA
	mov esi, edi
	shl esi, 5
	mov al, byte byte_4E5952[esi]
	cmp al, byte [byte_512DBF]
	jnz loc_40E8FA
	mov dl, byte [byte_512DC0]
	cmp dl, byte byte_4E5953[esi]
	jnz loc_40E8FA
	mov dh, byte [byte_512F45]
	cmp dh, byte byte_4E5948[esi]
	jz loc_40E7EC

loc_40E8FA:
	call sub_40E6B0
	mov ecx, 1
	jmp loc_40E7EC

loc_40E909:
	mov dl, byte [byte_512DAB]
	cmp dl, byte [byte_4E5A62]
	jnz loc_40E807
	mov dh, byte [byte_512DB0]
	cmp dh, byte [byte_4E5A63]
	jnz loc_40E807
	mov al, byte [byte_4E5A64]
	cmp al, byte [byte_512F43]
	jnz loc_40E807
	mov dl, byte [byte_512DB8]
	cmp dl, byte [byte_4E5A65]
	jnz loc_40E807
	mov dh, byte [byte_512DB9]
	cmp dh, byte [byte_4E5A66]
	jnz loc_40E807
	mov al, byte [byte_4E5A67]
	cmp al, byte [byte_512F42]
	jnz loc_40E807
	mov dl, byte [byte_512DF8]
	cmp dl, byte [byte_4E5A68]
	jnz loc_40E807
	mov dh, byte [byte_512DBB]
	cmp dh, byte [byte_4E5A69]
	jnz loc_40E807
	mov eax, dword [dword_512D9E]
	mov esi, dword [byte_4E5A68]
	sar eax, 10h
	sar esi, 10h
	cmp esi, eax
	jnz loc_40E807
	test ebp, ebp
	jnz loc_40E807
	jmp loc_40E811

loc_40E9BD:
	mov eax, dword [dword_4D24E0]
	call sub_489F48
	mov eax, dword [dword_4D24E0]
	mov word [word_513426], bx
	call sub_489F60
	mov al, byte [byte_4E5A61]
	mov byte [byte_512DAA], al
	mov al, byte [byte_4E5A62]
	mov byte [byte_512DAB], al
	mov al, byte [byte_4E5A63]
	mov byte [byte_512DB0], al
	mov al, byte [byte_4E5A64]
	mov byte [byte_512F43], al
	mov al, byte [byte_4E5A65]
	mov byte [byte_512DB8], al
	mov al, byte [byte_4E5A66]
	mov byte [byte_512DB9], al
	mov al, byte [byte_4E5A67]
	mov byte [byte_512F42], al
	mov al, byte [byte_4E5A68]
	mov byte [byte_512DF8], al
	mov al, byte [byte_4E5A69]
	mov byte [byte_512DBB], al
	mov ax, word [word_4E5A6A]
	mov edx, dword [dword_4D24E4]
	mov word [dword_512D9E+2], ax
	test edx, edx
	jz loc_40EA5F
	xor ecx, ecx
	mov ebx, dword [dword_4D76B8]
	mov dword [dword_4D24E4], ecx
	test ebx, ebx
	jz loc_40EA5F
	call sub_41A350

loc_40EA5F:
	mov ecx, 1
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40E7C0 endp

sub_40EA70: ;SUBROUTINE
	push edx
	mov eax, dword [dword_4D24E0]
	call sub_489F74
	xor edx, edx
	mov eax, dword [dword_4D7708]
	mov dword [dword_4D24E0], edx
	call sub_489F74
	mov eax, dword [dword_4D770C]
	mov dword [dword_4D7708], edx
	call sub_489F74
	mov eax, byte_4E5A40
	mov dword [dword_4D770C], edx
	mov edx, 20h
	call sub_48A01C
	pop edx
	ret
;sub_40EA70 endp

sub_40EAC0: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_4D24E4], edx
	call sub_489EF8
	mov edx, 100h
	mov dword [dword_4D24E0], eax
	call sub_489EF8
	mov dword [dword_4D7708], eax
	call sub_489EF8
	mov dword [dword_4D770C], eax
	mov eax, dword_4E5940
	call sub_48A01C
	pop edx
	ret
;sub_40EAC0 endp

dword_40EB00: dd 4, 8, 2, 0

sub_40EB20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, esp
	mov esi, dword_40EB00
	movsd
	movsd
	movsd
	call sub_403B20
	cmp byte [byte_512DBE], 0
	jnz loc_40EFCA
	mov edx, dword_4D3014
	mov ecx, dword_4D3028
	mov ebx, dword_4D303C
	mov eax, dword_4D30EC
	xor esi, esi
	mov dword [off_4D3124], edx
	mov dword [off_4D3074], edx
	mov dword [off_4D3078], ecx
	mov dword [off_4D307C], ebx
	mov dword [off_4D3080], esi
	mov dword [off_4D3128], ecx
	xor dl, dl
	mov dword [off_4D312C], eax
	mov byte [byte_512DEB], dl
	xor dh, dh
	mov dword [off_4D3130], esi
	mov byte [byte_512DD0], dh

loc_40EB9A:
	cmp byte [byte_512DBE], 0
	jz loc_40F02A
	mov bh, byte [byte_512DAA]
	cmp bh, 2
	jz loc_40F02A
	cmp bh, 1
	jz loc_40F02A
	mov dl, byte [byte_4D30B8]
	mov ah, byte [byte_4D2F9C]
	and dl, 0FEh
	and ah, 0FEh
	mov byte [byte_4D30B8], dl
	mov byte [byte_4D2F9C], ah

loc_40EBDD:
	mov dh, byte [byte_512DAA]
	cmp dh, 1
	jnz loc_40F067
	mov eax, dword [dword_4E5FDC]
	call sub_40F370
	cmp dh, byte [byte_512DAB]
	jnz loc_40EC2C
	mov edi, dword [dword_4E5FDC]
	mov byte [byte_512DAC], dh
	cmp edi, 4B00h
	jnz loc_40F04A
	cmp word [word_4D279A], 2
	jnz loc_40F04A
	xor dl, dl
	mov byte [byte_512DAB], dl

loc_40EC2C:
	cmp byte [byte_512DAC], 0
	jz loc_40EC59
	cmp word [word_4D279A], 2
	jnz loc_40EC59
	mov ebp, dword [dword_4E5FDC]
	cmp ebp, 4B00h
	jnz loc_40F056

loc_40EC51:
	xor bl, bl
	mov byte [byte_512DAC], bl

loc_40EC59:
	mov al, byte [byte_4D3780]
	mov bh, byte [byte_512DA9]
	and al, 0FEh
	cmp bh, 1
	jnz loc_40F0A0
	cmp byte [byte_512DD6], 0
	jz loc_40F089

loc_40EC7C:
	or byte [byte_4D3780], 1

loc_40EC83:
	mov bl, byte [byte_512DA9]
	cmp bl, 2
	jnz loc_40F0B7

loc_40EC92:
	mov word [word_4D3E8A], 6

loc_40EC9B:
	cmp byte [byte_512ECC], 0
	jz loc_40ECFB
	mov al, byte [byte_4D3A38]
	mov dl, byte [byte_4D3248]
	mov bl, byte [byte_4D3A54]
	or al, 1
	or dl, 1
	or bl, 1
	mov byte [byte_4D3A38], al
	mov byte [byte_4D3248], dl
	mov byte [byte_4D3A54], bl
	mov ah, byte [byte_4D3234]
	mov dh, byte [byte_4D328C]
	mov bh, byte [byte_4D3E7C]
	or ah, 1
	or dh, 1
	or bh, 1
	mov byte [byte_4D3234], ah
	mov byte [byte_4D328C], dh
	mov byte [byte_4D3E7C], bh

loc_40ECFB:
	xor eax, eax
	mov al, byte [byte_512DBF]
	cmp byte byte_4D407D[eax*2], 0
	jnz loc_40F0D7
	or byte [byte_4D2F88], 1

loc_40ED17:
	xor eax, eax
	mov al, byte [byte_512DDA]
	cmp byte byte_4D407D[eax*2], 0
	jnz loc_40F0E3
	or byte [byte_4D30A4], 1

loc_40ED33:
	cmp byte [byte_512DA9], 1
	jnz loc_40F0EF
	and byte [byte_4D3E68], 0FEh

loc_40ED47:
	mov al, byte [byte_512DA9]
	cmp al, 1
	jnz loc_40ED5F
	cmp al, byte [byte_512DF6]
	jnz loc_40ED5F
	mov byte [byte_512DF6], 2

loc_40ED5F:
	mov dh, byte [byte_512DA9]
	test dh, dh
	jnz loc_40F0FB
	mov eax, dword [off_4D27A8]
	mov byte [byte_512DAE], dh
	or byte [eax+8], 1

loc_40ED7C:
	cmp byte [byte_512ECC], 0
	jnz loc_40EDBC
	cmp byte [byte_512DAA], 2
	jnz loc_40F11B
	mov eax, dword [off_4D2A2C]
	or byte [eax+8], 1
	mov al, byte [byte_4D3E40]
	or al, 1
	mov di, word [word_4D2A2A]
	mov byte [byte_4D3E40], al
	test di, di
	jnz loc_40EDBC
	mov word [word_4D2A2A], 2

loc_40EDBC:
	cmp word [word_4D320E], 1
	jnz loc_40F13D
	cmp byte [byte_512DF6], 0
	jnz loc_40EDDA
	mov byte [byte_512DF5], 0Fh

loc_40EDDA:
	cmp byte [byte_512DF6], 1
	jnz loc_40EDF4
	cmp byte [byte_512DF5], 0Bh
	jbe loc_40EDF4
	xor bh, bh
	mov byte [byte_512DF5], bh

loc_40EDF4:
	cmp byte [byte_512DF6], 2
	jnz loc_40F13D
	cmp byte [byte_512DF5], 0Fh
	jnz loc_40F13D
	xor dl, dl
	mov byte [byte_512DF5], dl

loc_40EE16:
	cmp byte [byte_512DF7], 0
	jz loc_40F19B
	xor cl, cl
	mov byte [byte_512DF7], cl
	mov byte [byte_512DF6], 1

loc_40EE32:
	and byte [byte_4D31D0], 0FEh

loc_40EE39:
	cmp byte [byte_512DB0], 0
	jnz loc_40F1B4

loc_40EE46:
	test byte [byte_4D3198], 1
	jnz loc_40EE61
	mov al, byte [byte_512DF8]
	xor bh, bh
	mov byte [byte_512DF9], al
	mov byte [byte_512DF8], bh

loc_40EE61:
	or byte [byte_4D3198], 1

loc_40EE68:
	cmp byte [byte_512DAA], 0
	jnz loc_40F228
	mov al, byte [byte_512DBD]
	cmp al, 2
	jnb loc_40F1E2
	cmp al, 1
	jnz loc_40F214
	mov ecx, word_4D2EF6
	mov dword [off_4D3098], ecx
	mov dword [off_4D2F60], ecx

loc_40EE9B:
	test byte [byte_512DBC], 1
	jz loc_40F26B
	mov edi, dword_4D2978
	mov ch, byte [byte_512DAA]
	mov dword [off_4D299C], edi
	cmp ch, 1
	jnz loc_40EEDA
	mov ebp, dword_4D2968
	mov al, byte [byte_512DB0]
	mov dword [off_4D299C], ebp
	cmp al, 7
	jnz loc_40EEDA
	xor ah, ah
	mov byte [byte_512DB0], ah

loc_40EEDA:
	mov dword [off_4D3F18], dword_4D2978

loc_40EEE4:
	mov dl, byte [byte_512DAB]
	cmp dl, 2
	jnz loc_40F292

loc_40EEF3:
	mov eax, dword [off_4D306C]
	or byte [eax+8], 1
	mov eax, dword [off_4D311C]
	or byte [eax+8], 1

loc_40EF05:
	cmp byte [byte_512ECC], 0
	jnz loc_40EF24
	cmp byte [byte_512DAF], 1
	jz loc_40F2CA
	mov eax, dword [off_4D2A3C]
	or byte [eax+8], 1

loc_40EF24:
	cmp byte [byte_512ECC], 0
	jnz loc_40EF50
	mov al, byte [byte_512DAA]
	cmp al, 1
	jnb loc_40F2D8
	test al, al
	jnz loc_40EF50
	mov eax, dword [off_4D3EE0]
	and byte [eax+8], 0FEh
	mov eax, dword [off_4D2A30]
	and byte [eax+8], 0FEh

loc_40EF50:
	mov al, byte [byte_512DAA]
	cmp al, 1
	jnz loc_40F310
	cmp dword [dword_4D76B8], 0
	jz loc_40F310
	or byte [byte_4D2714], al

loc_40EF70:
	cmp dword [dword_512F48], 0
	jnz loc_40F31C

loc_40EF7D:
	mov eax, dword [off_4D260C]
	or byte [eax+8], 1
	cmp dword [dword_512F48], 0
	jnz loc_40F334
	mov eax, dword [off_4D2610]
	or byte [eax+8], 1

loc_40EF9C:
	mov al, byte [byte_512DFF]
	cmp al, 1
	jz loc_40F342
	test al, al
	jz loc_40F355

loc_40EFB1:
	xor eax, eax
	mov al, byte [byte_512DB9]
	mov al, [esp+eax*4]
	mov byte [byte_512DB8], al
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40EFCA:
	mov ebx, dword_4D2FEC
	mov esi, dword_4D3000
	mov edi, dword_4D303C
	mov eax, dword_4D30B0
	mov ecx, dword_4D2F94
	xor ebp, ebp
	mov dword [off_4D3078], ebx
	mov dword [off_4D307C], esi
	mov dword [off_4D3080], edi
	mov dword [dword_4D3084], ebp
	mov dword [off_4D3124], eax
	mov dword [off_4D3128], ebx
	mov dword [off_4D312C], esi
	mov dword [dword_4D3134], ebp
	mov ebx, dword_4D30EC
	mov dword [off_4D3074], ecx
	mov dword [off_4D3130], ebx
	jmp loc_40EB9A

loc_40F02A:
	mov al, byte [byte_4D30B8]
	mov ch, byte [byte_4D2F9C]
	or al, 1
	or ch, 1
	mov byte [byte_4D30B8], al
	mov byte [byte_4D2F9C], ch
	jmp loc_40EBDD

loc_40F04A:
	mov byte [byte_512DAB], 2
	jmp loc_40EC2C

loc_40F056:
	cmp ebp, 4D00h
	jz loc_40EC51
	jmp loc_40EC59

loc_40F067:
	cmp byte [byte_512DAC], 0
	jz loc_40EC59
	mov cl, 1
	xor bh, bh
	mov byte [byte_512DAB], cl
	mov byte [byte_512DAC], bh
	jmp loc_40EC59

loc_40F089:
	cmp byte [byte_512DF2], 0
	jnz loc_40EC7C
	mov byte [byte_4D3780], al
	jmp loc_40EC83

loc_40F0A0:
	cmp byte [byte_512DD6], 0
	jnz loc_40EC7C
	mov byte [byte_4D3780], al
	jmp loc_40EC83

loc_40F0B7:
	cmp bl, 3
	jz loc_40EC92
	cmp bl, 4
	jz loc_40EC92
	mov word [word_4D3E8A], 5
	jmp loc_40EC9B

loc_40F0D7:
	and byte [byte_4D2F88], 0FEh
	jmp loc_40ED17

loc_40F0E3:
	and byte [byte_4D30A4], 0FEh
	jmp loc_40ED33

loc_40F0EF:
	or byte [byte_4D3E68], 1
	jmp loc_40ED47

loc_40F0FB:
	mov eax, dword [off_4D27A8]
	test byte [eax+8], 1
	jz loc_40F10D
	mov byte [byte_512DAE], 1

loc_40F10D:
	mov eax, dword [off_4D27A8]
	and byte [eax+8], 0FEh
	jmp loc_40ED7C

loc_40F11B:
	mov eax, dword [off_4D2A2C]
	mov cl, byte [byte_4D3E40]
	mov bh, [eax+8]
	and cl, 0FEh
	and bh, 0FEh
	mov byte [byte_4D3E40], cl
	mov [eax+8], bh
	jmp loc_40EDBC

loc_40F13D:
	mov al, byte [byte_512DF5]
	cmp al, 0Fh
	jnz loc_40F16A
	mov cl, byte [byte_512DF6]
	cmp cl, 1
	jnz loc_40F157
	mov byte [byte_512DF7], cl

loc_40F157:
	xor al, al
	mov byte [byte_512DF6], al
	or byte [byte_4D31D0], 1
	jmp loc_40EE39

loc_40F16A:
	cmp al, 0Bh
	jbe loc_40EE16
	mov dl, byte [byte_512DF6]
	cmp dl, 1
	jz loc_40F189
	mov byte [byte_512DF6], 2
	jmp loc_40EE32

loc_40F189:
	mov byte [byte_512DF7], dl
	mov byte [byte_512DF6], 2
	jmp loc_40EE32

loc_40F19B:
	cmp byte [byte_512DF6], 0
	jnz loc_40EE32
	mov byte [byte_512DF6], 2
	jmp loc_40EE32

loc_40F1B4:
	cmp byte [byte_512DF6], 2
	jz loc_40EE46
	mov al, byte [byte_4D3198]
	and al, 1
	cmp al, 1
	jnz loc_40F1D6
	mov al, byte [byte_512DF9]
	mov byte [byte_512DF8], al

loc_40F1D6:
	and byte [byte_4D3198], 0FEh
	jmp loc_40EE68

loc_40F1E2:
	ja loc_40F1FA
	mov edi, word_4D2F12
	mov dword [off_4D3098], edi
	mov dword [off_4D2F60], edi
	jmp loc_40EE9B

loc_40F1FA:
	cmp al, 3
	jnz loc_40F214
	mov ebx, dword_4D2F30
	mov dword [off_4D3098], ebx
	mov dword [off_4D2F60], ebx
	jmp loc_40EE9B

loc_40F214:
	mov eax, dword_4D2EDC
	mov dword [off_4D3098], eax
	mov dword [off_4D2F60], eax
	jmp loc_40EE9B

loc_40F228:
	mov edx, dword_4D2EDC
	mov al, byte [byte_512DBF]
	mov dword [off_4D2F60], edx
	cmp al, 0Bh
	jbe loc_40F244
	xor ah, ah
	mov byte [byte_512DBF], ah

loc_40F244:
	mov ecx, dword_4D2EDC
	mov dl, byte [byte_512DDA]
	mov dword [off_4D3098], ecx
	cmp dl, 0Bh
	jbe loc_40EE9B
	xor dh, dh
	mov byte [byte_512DDA], dh
	jmp loc_40EE9B

loc_40F26B:
	mov esi, dword_4D2968
	mov bh, byte [byte_512DB0]
	mov dword [off_4D299C], esi
	cmp bh, 7
	jnz loc_40EEE4
	xor cl, cl
	mov byte [byte_512DB0], cl
	jmp loc_40EEE4

loc_40F292:
	cmp dl, 1
	jz loc_40EEF3
	mov bl, byte [byte_512DAA]
	cmp bl, 2
	jz loc_40EEF3
	cmp bl, 1
	jz loc_40EEF3
	mov eax, dword [off_4D306C]
	and byte [eax+8], 0FEh
	mov eax, dword [off_4D311C]
	and byte [eax+8], 0FEh
	jmp loc_40EF05

loc_40F2CA:
	mov eax, dword [off_4D2A3C]
	and byte [eax+8], 0FEh
	jmp loc_40EF24

loc_40F2D8:
	ja loc_40F2F1
	mov eax, dword [off_4D3EE0]
	or byte [eax+8], 1
	mov eax, dword [off_4D2A30]
	or byte [eax+8], 1
	jmp loc_40EF50

loc_40F2F1:
	cmp al, 2
	jnz loc_40EF50
	mov eax, dword [off_4D3EE0]
	or byte [eax+8], 1
	mov eax, dword [off_4D2A30]
	or byte [eax+8], 1
	jmp loc_40EF50

loc_40F310:
	and byte [byte_4D2714], 0FEh
	jmp loc_40EF70

loc_40F31C:
	xor eax, eax
	mov al, byte [byte_512F5E]
	test eax, eax
	jz loc_40EF7D
	mov eax, dword [off_4D260C]
	and byte [eax+8], 0FEh

loc_40F334:
	mov eax, dword [off_4D2610]
	and byte [eax+8], 0FEh
	jmp loc_40EF9C

loc_40F342:
	xor ebp, ebp
	mov dword [dword_4D96B0], ebp
	mov dword [dword_4D5A44], ebp
	jmp loc_40EFB1

loc_40F355:
	xor edi, edi
	mov esi, 1
	mov dword [dword_4D96B0], edi
	mov dword [dword_4D5A44], esi
	jmp loc_40EFB1
;sub_40EB20 endp

sub_40F370: ;SUBROUTINE
	push ecx
	push edx
	cmp eax, 4B00h
	jnz loc_40F464
	cmp byte [byte_51345E], 0
	jnz loc_40F3F5
	mov ecx, 0Ch

loc_40F38B:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407B20
	test eax, eax
	jnz loc_40F3B5
	xor edx, edx
	mov dl, byte [byte_512DBF]
	add edx, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F38B

loc_40F3B5:
	cmp byte [byte_512DA9], 1
	jnz loc_40F53B
	mov ecx, 0Ch

loc_40F3C7:
	xor eax, eax
	mov al, byte [byte_512DDA]
	call sub_407B20
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DDA]
	add edx, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DDA], dl
	jmp loc_40F3C7

loc_40F3F5:
	cmp byte [byte_512DAA], 1
	jnz loc_40F431
	mov ecx, 0Ch

loc_40F403:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407B20
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DBF]
	add edx, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F403

loc_40F431:
	mov ecx, 0Ch

loc_40F436:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407AF0
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DBF]
	add edx, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F436

loc_40F464:
	cmp byte [byte_51345E], 0
	jnz loc_40F4D8
	mov ecx, 0Ch

loc_40F472:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407B20
	test eax, eax
	jnz loc_40F49A
	xor edx, edx
	mov dl, byte [byte_512DBF]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F472

loc_40F49A:
	cmp byte [byte_512DA9], 1
	jnz loc_40F53B
	mov ecx, 0Ch

loc_40F4AC:
	xor eax, eax
	mov al, byte [byte_512DDA]
	call sub_407B20
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DDA]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DDA], dl
	jmp loc_40F4AC

loc_40F4D8:
	cmp byte [byte_512DAA], 1
	jnz loc_40F50E
	mov ecx, 0Ch

loc_40F4E6:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407B20
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DBF]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F4E6

loc_40F50E:
	mov ecx, 0Ch

loc_40F513:
	xor eax, eax
	mov al, byte [byte_512DBF]
	call sub_407AF0
	test eax, eax
	jnz loc_40F53B
	xor edx, edx
	mov dl, byte [byte_512DBF]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512DBF], dl
	jmp loc_40F513

loc_40F53B:
	pop edx
	pop ecx
	ret
;sub_40F370 endp

sub_40F540: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	cmp word [eax+0Ah], 64h
	jz loc_40F5B4
	mov esi, [eax+8]
	sar esi, 10h
	mov edx, [eax+esi*4+0Ch]
	test byte [edx+8], 1
	jz loc_40F5B4
	mov bl, 2
	xor edi, edi

loc_40F564:
	mov edx, [eax+8]
	sar edx, 10h
	mov edx, [eax+edx*4+0Ch]
	test byte [edx+8], 1
	jz loc_40F5B4
	inc word [eax+0Ah]
	mov edx, [eax+8]
	sar edx, 10h
	mov ecx, [eax+edx*4+0Ch]
	cmp edi, ecx
	jz loc_40F5AA

loc_40F586:
	mov edx, [eax+8]
	sar edx, 10h
	mov ecx, [eax+edx*4+0Ch]
	cmp bl, [ecx]
	jz loc_40F5B0
	inc word [eax+0Ah]
	mov edx, [eax+8]
	sar edx, 10h
	cmp edi, [eax+edx*4+0Ch]
	jnz loc_40F586
	mov [eax+0Ah], di
	jmp loc_40F586

loc_40F5AA:
	mov [eax+0Ah], cx
	jmp loc_40F586

loc_40F5B0:
	cmp esi, edx
	jnz loc_40F564

loc_40F5B4:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40F540 endp

sub_40F5C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ebx, eax
	mov ecx, 1
	mov esi, 0FFFFFFFFh
	mov edi, 1
	xor ah, ah
	mov [esp+2Ch], ecx
	mov byte [byte_4E5FC8], ah
	mov [esp+28h], si
	mov [esp+30h], edi
	mov esi, (dword_512D9E+2)
	xor eax, eax
	xor ecx, ecx
	mov al, byte [byte_512DFB]
	mov dword [dword_4D40B8], ecx
	call sub_41B730
	call sub_4057C0
	mov ecx, 0ABh
	mov word [word_4D232C], di
	mov edi, dword_4E5D1C
	rep movsd
	mov ecx, 0ABh
	mov edi, dword_4E5A70
	mov esi, (dword_512D9E+2)
	rep movsd
	cmp ebx, off_4D3EC4
	jz loc_40F8AB

loc_40F63D:
	mov ebp, off_4D3EC4

loc_40F642:
	cmp word [esp+30h], 0
	jz loc_40FA4A
	cmp word [esp+2Ch], 0
	jz loc_40F674
	mov eax, [esp+28h]
	test ax, ax
	jnz loc_40F8DE
	mov ecx, 0ABh
	mov edi, dword_4E5D1C

loc_40F66D:
	mov esi, (dword_512D9E+2)
	rep movsd

loc_40F674:
	mov edx, [ebx+6]
	sar edx, 10h
	mov eax, ebx
	call dword off_4D40C0[edx*4]
	mov edx, eax
	cmp eax, 0FFFFFFFBh
	jnz loc_40F6C3
	cmp ebx, off_4D3EC4
	jz loc_40F6C3
	mov ebx, 0FFFFFFFFh
	mov eax, dword [off_4D3EC8+2]
	mov ecx, 4
	sar eax, 10h
	mov [esp+28h], bx
	lea edx, 0[eax*4]
	mov word [word_4D3ECE], cx
	mov eax, ebp
	mov ebx, ebp
	call dword off_4D40C0[edx]
	mov edx, eax

loc_40F6C3:
	cmp edx, 0FFFFFFFDh
	jnz loc_40F6CE
	xor esi, esi
	mov [esp+30h], esi

loc_40F6CE:
	cmp edx, 0FFFFFFFEh
	jnz loc_40F6F1
	mov edi, [esp+28h]
	test di, di
	jnz loc_40F8F7
	mov ecx, 0ABh
	mov edi, (dword_512D9E+2)
	mov esi, dword_4E5D1C

loc_40F6EF:
	rep movsd

loc_40F6F1:
	cmp byte [byte_512ECC], 0
	jz loc_40F741
	cmp ebx, off_4D3EC4
	jnz loc_40F741
	cmp edx, 0FFFFFFFDh
	jnz loc_40F741
	mov eax, dword_4E5A6C
	mov [esp], ebp
	xor edx, edx
	call sub_47EF30
	mov [esp+28h], dx
	mov dword [dword_4D40BC], eax
	test eax, eax
	jnz loc_40F915
	call sub_401080
	mov eax, 2FEh
	call sub_402CD0
	xor edx, edx

loc_40F739:
	mov dword [esp+30h], 1

loc_40F741:
	cmp edx, off_4D349C
	jnz loc_40F757
	cmp byte [byte_512DA9], 1
	jnz loc_40F757
	mov edx, off_4D35E8

loc_40F757:
	cmp ebx, off_4D3CFC
	jnz loc_40F78A
	cmp edx, off_4D3C50
	jnz loc_40F78A
	mov ch, byte [byte_512DAA]
	cmp ch, 1
	jnz loc_40F92C
	mov eax, dword [dword_4D76B8]
	cmp word [eax+2C0h], 6
	jle loc_40F78A
	mov edx, off_4D3BE4

loc_40F78A:
	cmp ebx, off_4D3C50
	jnz loc_40F7A0
	cmp edx, off_4D3BE4
	jnz loc_40F7A0
	xor eax, eax
	mov [esp+30h], eax

loc_40F7A0:
	cmp ebx, off_4D3BE4
	jnz loc_40F7B6
	cmp edx, off_4D3B74
	jnz loc_40F7B6
	xor ecx, ecx
	mov [esp+30h], ecx

loc_40F7B6:
	cmp edx, off_4D3C50
	jnz loc_40F7CD
	cmp byte [byte_512DAA], 1
	jz loc_40F7CD
	xor esi, esi
	mov [esp+30h], esi

loc_40F7CD:
	cmp ebx, off_4D3B74
	jnz loc_40F7E3
	cmp edx, off_4D3B08
	jnz loc_40F7E3
	xor edi, edi
	mov [esp+30h], edi

loc_40F7E3:
	cmp ebx, off_4D3B08
	jnz loc_40F7FA
	cmp byte [byte_512DAA], 2
	jz loc_40F7FA
	xor eax, eax
	mov [esp+30h], eax

loc_40F7FA:
	cmp edx, off_4D3B74
	jnz loc_40F811
	cmp byte [byte_512DAA], 2
	jz loc_40F811
	xor ecx, ecx
	mov [esp+30h], ecx

loc_40F811:
	cmp ebx, off_4D3EC4
	jnz loc_40F9E6
	test edx, edx
	jnz loc_40F9E6
	mov ah, byte [byte_512DA9]
	test ah, ah
	jz loc_40F9E6
	cmp ah, 1
	jz loc_40F9E6
	cmp ah, 3
	jnz loc_40F959
	mov edx, off_4D2548

loc_40F84A:
	test edx, edx
	jz loc_40F9E6
	call sub_402C40
	test eax, eax
	jnz loc_40F9E6
	xor ch, ch
	xor edx, edx
	mov byte [byte_512DA9], ch

loc_40F869:
	mov edi, 1
	mov [esp+2Ch], edi
	test edx, edx
	jz loc_40F642
	cmp edx, 0FFFFFFFFh
	jnz loc_40FA18

loc_40F883:
	mov eax, [esp+26h]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_40FA4A
	mov edi, [esp+28h]
	mov ebx, [esp+eax*4]
	xor esi, esi
	dec edi
	mov [esp+2Ch], esi
	mov [esp+28h], di
	jmp loc_40F642

loc_40F8AB:
	mov cl, byte [byte_512DA9]
	cmp cl, 2
	jnz loc_40F8CF

loc_40F8B6:
	inc word [esp+28h]
	mov eax, [esp+26h]
	sar eax, 10h
	mov [esp+eax*4], ebx
	mov ebx, dword_4D403C
	jmp loc_40F63D

loc_40F8CF:
	cmp cl, 3
	jz loc_40F8B6
	cmp cl, 4
	jz loc_40F8B6
	jmp loc_40F63D

loc_40F8DE:
	cmp ax, 1
	jl loc_40F674
	mov ecx, 0ABh
	mov edi, dword_4E5A70
	jmp loc_40F66D

loc_40F8F7:
	cmp di, 1
	jl loc_40F6F1
	mov ecx, 0ABh
	mov edi, (dword_512D9E+2)
	mov esi, dword_4E5A70
	jmp loc_40F6EF

loc_40F915:
	mov dl, 4
	call sub_402C40
	mov byte [byte_512DA9], dl
	mov edx, off_4D26A0
	jmp loc_40F739

loc_40F92C:
	cmp ch, 2
	jnz loc_40F94E
	cmp byte [byte_512DB0], 7
	jb loc_40F944
	mov edx, off_4D3B08
	jmp loc_40F78A

loc_40F944:
	mov edx, off_4D3B74
	jmp loc_40F78A

loc_40F94E:
	xor esi, esi
	mov [esp+30h], esi
	jmp loc_40F78A

loc_40F959:
	cmp ah, 2
	jnz loc_40F9A2
	xor eax, eax ;Sprawdzanie modemu, brak modemu
	mov dword [dword_512F48], eax
	call sub_401080
	mov eax, 2FDh
	xor dh, dh
	call sub_402CD0
	mov byte [byte_512DA9], dh
	xor edx, edx
	jmp loc_40F869

loc_40F9A2:
	cmp ah, 4
	jnz loc_40F84A
	mov eax, dword_4E5A6C
	call sub_47EF30
	mov dword [dword_4D40BC], eax
	test eax, eax
	jnz loc_40F9DC
	call sub_401080
	mov eax, 2FEh
	xor dl, dl
	call sub_402CD0
	mov byte [byte_512DA9], dl
	xor edx, edx
	jmp loc_40F869

loc_40F9DC:
	mov edx, off_4D26A0
	jmp loc_40F84A

loc_40F9E6:
	cmp edx, 0FFFFFFFCh
	jnz loc_40F869
	cmp dword [dword_4D76BC], 0
	jz loc_40F9FD
	call sub_41A2A0

loc_40F9FD:
	xor ecx, ecx
	xor esi, esi
	mov dword [dword_4D76BC], ecx
	xor cl, cl
	mov [esp+30h], esi
	mov byte [byte_512DAA], cl
	jmp loc_40F869

loc_40FA18:
	cmp edx, 0FFFFFFFEh
	jz loc_40F883
	add [esp+28h], di
	mov eax, [esp+26h]
	sar eax, 10h
	mov ecx, [esp+30h]
	mov [esp+eax*4], ebx
	mov ebx, edx
	test cx, cx
	jz loc_40F642
	mov word [edx+0Ah], 0
	jmp loc_40F642

loc_40FA4A:
	mov ebx, dword [dword_4D40B8]
	test ebx, ebx
	jz loc_40FA5B
	mov eax, ebx
	call sub_4848FC

loc_40FA5B:
	call sub_4056B0
	call sub_41B620
	cmp edx, 0FFFFFFFDh
	jnz loc_40FA79
	mov eax, 1
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_40FA79:
	xor eax, eax
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40F5C0 endp

sub_40FA90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 74h
	mov [esp+5Ch], eax
	xor edx, edx
	mov [esp+6Ch], dx

loc_40FAA4:
	mov eax, [esp+6Ah]
	sar eax, 10h
	mov edx, [esp+5Ch]
	lea ebp, 0[eax*4]
	add ebp, edx
	mov ecx, [ebp+0Ch]
	test ecx, ecx
	jz loc_41007C
	mov edx, [edx+8]
	sar edx, 10h
	mov ebp, ecx
	cmp eax, edx
	jnz loc_40FC31
	mov eax, 1

loc_40FAD8:
	mov [esp+68h], ax
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B6F0
	cmp eax, 12h
	jl loc_40FC38
	mov eax, 13h
	mov esi, 0Ch
	mov [esp+64h], ax
	mov [esp+60h], esi

loc_40FB04:
	mov dl, [ebp+0]
	cmp dl, 1
	jnb loc_40FC50
	test dl, dl
	jnz loc_40FC1D

loc_40FB18:
	mov eax, [ebp+0]
	sar eax, 10h
	mov edi, esp
	call sub_41B710
	mov esi, eax
	push edi

loc_40FB28:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_40FB40
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_40FB28

loc_40FB40:
	pop edi
	test byte [ebp+8], 1
	jz loc_40FCB6
	mov word [esp+68h], 2
	mov esi, 6

loc_40FB57:
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B670
	mov [esp+54h], eax
	mov eax, [esp+54h]
	mov ecx, [esp+66h]
	mov [esp+70h], ax
	mov eax, [ebp+0]
	sar ecx, 10h
	sar eax, 10h
	mov edx, [esp+52h]
	call sub_41B650
	mov edi, eax
	cwde
	sar edx, 10h
	mov [esp+50h], eax
	mov eax, [ebp+0]
	mov ebx, [esp+50h]
	sar eax, 10h
	call sub_405580
	test byte [ebp+8], 4
	jz loc_40FBDE
	movsx eax, si
	push eax
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B690
	cwde
	push eax
	mov eax, [ebp+0]
	sar eax, 10h
	mov edx, [esp+68h]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+5Ch]
	add eax, edx
	mov ebx, [esp+58h]
	movsx edx, ax
	mov eax, asc_4C8780 ; ":"
	call sub_4054E0

loc_40FBDE:
	test byte [ebp+8], 2
	jz loc_40FC1D
	movsx eax, si
	push eax
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B690
	cwde
	push eax
	mov eax, [ebp+0]
	sar eax, 10h
	mov esi, [esp+68h]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, esi
	movsx ebx, di
	movsx edx, ax
	mov eax, a____1 ; "..."
	call sub_4054E0

loc_40FC1D:
	cmp byte [ebp+0], 2
	jz loc_40FD08

loc_40FC27:
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FC31:
	xor eax, eax
	jmp loc_40FAD8

loc_40FC38:
	mov ecx, 0Dh
	mov ebx, 8
	mov [esp+64h], cx
	mov [esp+60h], ebx
	jmp loc_40FB04

loc_40FC50:
	ja loc_40FC9D
	mov ebx, [esp+5Ch]
	mov edx, ebp
	cmp ebx, off_4D3CFC
	jnz loc_40FCE2
	call sub_41A210

loc_40FC69:
	test byte [edx+2], 1
	jnz loc_40FC1D
	cmp word [esp+68h], 0
	jz loc_40FCE6
	movsx ecx, ax
	lea eax, [edx+8]
	xor ebx, ebx
	mov edx, 2C00h
	call sub_405B30
	cmp byte [ebp+0], 2
	jz loc_40FD08
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FC9D:
	cmp dl, 2
	jz loc_40FB18
	cmp byte [ebp+0], 2
	jz loc_40FD08
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FCB6:
	cmp word [esp+68h], 0
	jz loc_40FCD0
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B6B0
	mov esi, eax
	jmp loc_40FB57

loc_40FCD0:
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B6D0
	mov esi, eax
	jmp loc_40FB57

loc_40FCE2:
	xor eax, eax
	jmp loc_40FC69

loc_40FCE6:
	movsx ecx, ax
	lea eax, [edx+4]
	xor ebx, ebx
	mov edx, 2C00h
	call sub_405B30
	cmp byte [ebp+0], 2
	jz loc_40FD08
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FD08:
	mov ah, [ebp+9]
	mov esi, ebp
	cmp ah, 3
	jnz loc_40FD6D
	cmp dword [ebp+0Ch], 0
	jz loc_40FD6D
	mov eax, [ebp+0]
	sar eax, 10h
	call sub_41B690
	cmp eax, 2
	jle loc_40FE63
	mov edx, 3

loc_40FD31:
	cmp word [esp+68h], 0
	jz loc_40FE6A
	mov eax, 4

loc_40FD42:
	cwde
	push eax
	movsx eax, dx
	push eax
	mov eax, [esi]
	sar eax, 10h
	mov edx, [esp+6Ch]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, edx
	movsx ebx, di
	movsx edx, ax
	mov eax, [esi+0Ch]
	call sub_4054E0

loc_40FD6D:
	cmp byte [esi+9], 18h
	jnz loc_40FDFF
	fld dword [dword_4D4D20]
	fadd dword [flt_4C8790]
	fmul dword [flt_4C878C]
	call __CHP
	fistp dword [esp+58h]
	mov eax, [esp+58h]
	inc eax
	push eax
	push aD_2 ; "%d"
	lea eax, [esp+8]
	push eax
	call sprintf_
	mov eax, [esi]
	add esp, 0Ch
	sar eax, 10h
	call sub_41B690
	cmp eax, 2
	jle loc_40FE74
	mov eax, 3

loc_40FDC2:
	cmp word [esp+68h], 0
	jz loc_40FE7B
	mov edx, 4

loc_40FDD3:
	movsx edx, dx
	push edx
	cwde
	push eax
	mov eax, [esi]
	sar eax, 10h
	mov edx, [esp+6Ch]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, edx
	movsx ebx, di
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0

loc_40FDFF:
	mov dh, [esi+9]
	cmp dh, 2
	jnz loc_40FE90
	mov eax, [esi]
	sar eax, 10h
	call sub_41B690
	cmp eax, 2
	jle loc_40FE85
	mov eax, 3

loc_40FE1F:
	cmp word [esp+68h], 0
	jz loc_40FE89
	mov edx, 4

loc_40FE2C:
	movsx edx, dx
	push edx
	cwde
	push eax
	mov eax, [esi]
	sar eax, 10h
	mov esi, [esp+6Ch]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, esi
	movsx ebx, di
	movsx edx, ax
	mov eax, dword [dword_512F48]
	call sub_4054E0
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FE63:
	xor edx, edx
	jmp loc_40FD31

loc_40FE6A:
	mov eax, 3
	jmp loc_40FD42

loc_40FE74:
	xor eax, eax
	jmp loc_40FDC2

loc_40FE7B:
	mov edx, 3
	jmp loc_40FDD3

loc_40FE85:
	xor eax, eax
	jmp loc_40FE1F

loc_40FE89:
	mov edx, 3
	jmp loc_40FE2C

loc_40FE90:
	cmp dh, 0Ch
	jz loc_40FF2B
	cmp dh, 0Dh
	jz loc_40FF2B
	cmp dh, 10h
	jz loc_40FF56
	mov edx, [esi+10h]
	cmp word [edx], 0
	jz loc_410002
	mov al, [esi+9]
	cmp al, 16h
	jnb loc_40FF7A

loc_40FEC3:
	mov eax, [esi+0Ch]
	mov al, [eax]
	and eax, 0FFh
	mov edx, [esi+10h]

loc_40FED0:
	mov dx, [edx+eax*2]

loc_40FED4:
	mov eax, [esp+68h]
	cmp ax, 1
	jnz loc_40FFE5
	movsx eax, dx
	call sub_41B6B0

loc_40FEEA:
	cwde
	movsx ebp, dx
	push eax
	mov eax, ebp
	call sub_41B690
	cwde
	push eax
	mov eax, [esi]
	sar eax, 10h
	mov esi, [esp+6Ch]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, esi
	movsx edx, ax
	mov eax, ebp
	movsx ebx, di
	call sub_41B710
	call sub_4054E0
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FF2B:
	mov ecx, [esp+66h]
	mov eax, [esp+6Eh]
	mov edx, [esp+62h]
	movsx ebx, di
	sar eax, 10h
	sar edx, 10h
	sar ecx, 10h
	add edx, eax
	mov eax, esi
	call sub_404740
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FF56:
	mov edx, [esp+6Eh]
	mov eax, [esp+62h]
	sar edx, 10h
	sar eax, 10h
	movsx ebx, di
	add edx, eax
	mov eax, esi
	call sub_410090
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_40FF7A:
	ja loc_40FF98
	mov al, byte [byte_512DAA]
	cmp al, 1
	jnb loc_40FFB3

loc_40FF85:
	mov eax, [esi+0Ch]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esi+10h]
	mov dx, [eax+edx*2]
	jmp loc_40FED4

loc_40FF98:
	cmp al, 17h
	jnz loc_40FEC3
	cmp byte [byte_512DF6], 2
	jnz loc_40FFCD

loc_40FFA9:
	mov edx, 0DBh
	jmp loc_40FED4

loc_40FFB3:
	ja loc_40FFBF
	mov edx, 48h
	jmp loc_40FED4

loc_40FFBF:
	cmp al, 2
	jnz loc_40FF85
	mov edx, 4Ah
	jmp loc_40FED4

loc_40FFCD:
	cmp byte [byte_512DB0], 0
	jz loc_40FFA9
	mov eax, [esi+0Ch]
	mov al, [eax]
	and eax, 0FFh
	jmp loc_40FED0

loc_40FFE5:
	cmp ax, 2
	jnz loc_40FFF5
	mov eax, 6
	jmp loc_40FEEA

loc_40FFF5:
	movsx eax, dx
	call sub_41B6D0
	jmp loc_40FEEA

loc_410002:
	cmp byte [esi+9], 5
	jnz loc_40FC27
	cmp dword [dword_4D40BC], 0
	jz loc_40FC27
	mov eax, [esi]
	sar eax, 10h
	call sub_41B690
	cmp eax, 2
	jle loc_410071
	mov eax, 3

loc_41002D:
	cmp word [esp+68h], 0
	jz loc_410075
	mov edx, 4

loc_41003A:
	movsx edx, dx
	push edx
	cwde
	push eax
	mov eax, [esi]
	sar eax, 10h
	mov esi, [esp+6Ch]
	call sub_41B6F0
	movsx ecx, ax
	mov eax, [esp+78h]
	add eax, esi
	movsx ebx, di
	movsx edx, ax
	mov eax, dword [dword_4D40BC]
	call sub_4054E0
	inc word [esp+6Ch]
	jmp loc_40FAA4

loc_410071:
	xor eax, eax
	jmp loc_41002D

loc_410075:
	mov edx, 3
	jmp loc_41003A

loc_41007C:
	add esp, 74h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_40FA90 endp

sub_410090: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov edi, edx
	mov esi, ebx
	cmp dword [eax+0Ch], 1
	jnz loc_4101A8
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov al, byte byte_512DC1[eax]

loc_4100B2:
	and eax, 0FFh
	lea edx, [esp+2Ch]
	lea ecx, [esp+18h]
	push edx
	lea ebx, [esp+20h]
	lea edx, [esp+24h]
	call sub_458670
	lea eax, [esp+28h]
	lea ecx, [esp+30h]
	push eax
	lea eax, [esp+28h]
	mov ebx, [esp+1Ch]
	push eax
	mov edx, [esp+24h]
	mov eax, [esp+28h]
	call sub_457FA8
	mov ebx, 0D2h
	mov eax, [esp+30h]
	xor ecx, ecx
	mov edx, [esp+2Ch]
	mov [esp+0Ch], ecx
	mov [esp+10h], ebx
	mov [esp+14h], ecx
	mov [esp], eax
	mov eax, [esp+24h]
	lea ecx, [esp+34h]
	mov [esp+4], eax
	mov eax, [esp+28h]
	mov ebx, esp
	mov [esp+8], eax
	lea eax, [esp+0Ch]
	call sub_4584E0
	xor eax, eax
	mov al, [esp+34h]
	mov [esp+30h], eax
	xor eax, eax
	mov al, [esp+35h]
	mov [esp+24h], eax
	xor eax, eax
	mov edx, [esp+30h]
	mov al, [esp+36h]
	shl edx, 10h
	mov [esp+28h], eax
	mov eax, [esp+24h]
	or edx, 0FF000000h
	shl eax, 8
	mov ebp, [esp+28h]
	or eax, edx
	mov ecx, 15h
	or ebp, eax
	mov eax, 0FF000000h
	mov ebx, 54h
	call sub_48266C
	push eax
	lea edx, [esi+6]
	lea eax, [edi+2]
	call sub_488620
	mov ecx, 15h
	mov eax, ebp
	mov ebx, 54h
	call sub_48266C
	push eax
	lea edx, [esi+5]
	lea eax, [edi+1]
	call sub_488620
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4101A8:
	xor eax, eax
	mov al, byte [byte_512DDA]
	mov al, byte byte_512DDC[eax]
	jmp loc_4100B2
;sub_410090 endp

sub_4101C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov eax, dword [dword_4D4D20]
	mov ebx, 1
	mov [esp+4], eax
	mov ah, byte [byte_4D3468]
	xor ebp, ebp
	and ah, 0FEh
	xor edi, edi
	mov byte [byte_4D3468], ah
	mov eax, esi
	mov [esp], ebp
	call sub_410E80

loc_4101F6:
	call sub_4833C7
	add edi, eax
	xor edx, edx
	mov eax, esi
	call sub_40BBE0
	test eax, eax
	jz loc_410302

loc_41020E:
	call sub_40EB20
	call sub_428A20
	mov edx, 400h
	mov eax, [esi+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, dword [dword_4D2314+2]
	sar eax, 10h
	mov edx, 1000h
	mov eax, dword dword_4D231C[eax*4]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_405B60
	mov eax, esi
	call sub_40FA90
	cmp esi, off_4D36A8
	jnz loc_41025D
	call sub_410330

loc_41025D:
	cmp esi, off_4D349C
	jnz loc_41030D

loc_410269:
	push 4
	push 5
	mov eax, 135h
	mov ecx, 12h
	call sub_41B650
	movsx ebx, ax
	mov eax, 137h
	mov edx, 199h
	call sub_41B710
	call sub_4054E0

loc_410293:
	call sub_405C70

loc_41029D:
	call sub_423B90
	mov eax, esi
	call sub_423CA0
	fld dword [dword_4D4D20]
	mov ebx, eax
	fcomp dword [esp+4]
	fnstsw ax
	sahf
	jz loc_4102C8
	mov eax, dword [dword_4D4D20]
	mov ebx, 1
	mov [esp+4], eax

loc_4102C8:
	call sub_405960
	test ax, ax
	jz loc_4102EE
	cmp edi, [esp]
	jle loc_4102EE
	lea edx, [edi+0Fh]
	mov [esp], edx
	movsx edx, ax
	mov eax, esi
	mov ebx, 1
	call sub_410414
	mov ebp, eax

loc_4102EE:
	test ebp, ebp
	jz loc_4101F6
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_410302:
	test bx, bx
	jnz loc_41020E
	jmp loc_41029D

loc_41030D:
	cmp esi, off_4D35E8
	jz loc_410269
	jmp loc_410293
;sub_4101C0 endp

off_410320: dd loc_410348
	dd loc_410362 ; jump table for switch statement
	dd loc_41037C
	dd loc_410396

sub_410330: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov al, byte [byte_512E00]
	cmp al, 3
	ja loc_41035E
	and eax, 0FFh ; switch 4 cases
	jmp off_410320[eax*4] ; switch jump

loc_410348:
	mov ecx, 118h ; jumptable 00410341 case 0
	mov edx, 3000h
	mov eax, aSful ; "sful"
	mov ebx, ecx
	call sub_405B30

loc_41035E:
	pop edx
	pop ecx
	pop ebx
	ret

loc_410362:
	mov ecx, 118h ; jumptable 00410341 case 1
	mov edx, 3000h
	mov eax, aSthr ; "sthr"
	mov ebx, ecx
	call sub_405B30
	pop edx
	pop ecx
	pop ebx
	ret

loc_41037C:
	mov ecx, 118h ; jumptable 00410341 case 2
	mov edx, 3000h
	mov eax, aShlf ; "shlf"
	mov ebx, ecx
	call sub_405B30
	pop edx
	pop ecx
	pop ebx
	ret

loc_410396:
	mov ecx, 118h ; jumptable 00410341 case 3
	mov edx, 3000h
	mov eax, aSqrt ; "sqrt"
	mov ebx, ecx
	call sub_405B30
	pop edx
	pop ecx
	pop ebx
	ret
;sub_410330 endp

off_4103B0: dd loc_41053C
	dd loc_41053C ; jump table for switch statement
	dd 0
	dd loc_410A94
	dd loc_410ADC
	dd loc_410AF9
	dd loc_41053C
	dd loc_410B55
	dd loc_410B29
	dd loc_410C4E
	dd loc_410C4E
	dd loc_410912
	dd loc_4108ED
	dd loc_4108ED
	dd loc_4108D3
	dd loc_41053C
	dd loc_4107EF
	dd loc_41053C
	dd loc_41053C
	dd loc_410954
	dd loc_41098F
	dd loc_4109A2
	dd loc_41053C
	dd loc_41053C
	dd loc_4107DA

sub_410414: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 9Ch
	mov esi, eax
	mov edi, edx
	movsx eax, dx
	xor ebx, ebx
	mov dword [dword_4E5FDC], eax
	cmp dx, 1Bh
	jz loc_41054A
	cmp word [esi+0Ah], 64h
	jnz loc_410458
	cmp di, 0Dh
	jz loc_41055A
	mov ax, word [dword_4E8B08]
	mov [esi+0Ah], ax
	mov eax, esi
	call sub_423E10

loc_410458:
	push ecx
	mov eax, [esi+8]
	sar eax, 10h
	mov eax, [esi+eax*4+0Ch]
	cmp byte [eax], 2
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov edx, [eax+0Ch]
	mov ecx, eax
	cmp edx, byte_512ED1
	jnz loc_410485
	cmp di, 3C00h
	jnz loc_410485
	mov edi, 4D00h

loc_410485:
	cmp dword [ecx+0Ch], byte_512ED0
	jnz loc_41049A
	cmp di, 3D00h
	jnz loc_41049A
	mov edi, 4D00h

loc_41049A:
	cmp dword [ecx+0Ch], byte_512ED2
	jnz loc_410567
	cmp di, 3E00h
	jnz loc_410567
	mov edi, 4D00h

loc_4104B7:
	mov eax, [ecx+10h]
	cmp word [eax], 0
	jz loc_4104CC

loc_4104C0:
	mov edx, 7Fh
	xor eax, eax

loc_4104C7:
	call sub_4423F0

loc_4104CC:
	cmp di, 4800h
	jnb loc_4105CC
	cmp di, 0Dh
	jb loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	ja loc_410743

loc_4104E3:
	mov al, [ecx+8]
	test al, 8
	jz loc_410760
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0
	mov dx, [esi+0Ah]
	inc edx
	mov eax, esi
	mov [esi+0Ah], dx

loc_410508:
	call sub_423E10

loc_41050D:
	cmp di, 0Dh
	jnz loc_410529
	mov eax, [ecx+4]
	test eax, eax
	jz loc_410529
	test byte [ecx+8], 10h
	jz loc_4107D3
	mov ebx, 0FFFFFFFEh

loc_410529:
	mov al, [ecx+9]
	cmp al, 18h
	ja loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	and eax, 0FFh ; switch 25 cases
	jmp off_4103B0[eax*4] ; switch jump

loc_41053C:
	mov eax, ebx ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_41054A:
	mov eax, 0FFFFFFFEh
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_41055A:
	xor eax, eax
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410567:
	cmp di, 1Bh
	jnb loc_41059A
	cmp di, 0Dh
	jnz loc_4104CC
	cmp byte [ecx+9], 12h
	jz loc_4104CC
	cmp dword [ecx+4], 0
	jz loc_4104C0
	mov edx, 7Fh
	mov eax, 2
	jmp loc_4104C7

loc_41059A:
	jbe loc_4105BD
	cmp di, 4B00h
	jb loc_4104CC
	jbe loc_4104B7
	cmp di, 4D00h
	jz loc_4104B7
	jmp loc_4104CC

loc_4105BD:
	mov edx, 7Fh
	mov eax, 3
	jmp loc_4104C7

loc_4105CC:
	ja loc_4105F8
	mov edi, [esi+8]
	sar edi, 10h

loc_4105D4:
	mov ax, [esi+0Ah]
	test ax, ax
	jnz loc_410DC4

loc_4105E1:
	mov eax, [esi+8]
	sar eax, 10h
	cmp dword [esi+eax*4+10h], 0
	jz loc_410DCB
	inc word [esi+0Ah]
	jmp loc_4105E1

loc_4105F8:
	cmp di, 4D00h
	jnb loc_4106D8
	cmp di, 4B00h
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov al, [ecx+8]
	test al, 8
	jz loc_410CCD
	inc word [esi+0Ah]
	mov eax, esi
	mov edx, 7Fh

loc_410624:
	call sub_423E10
	mov eax, 1
	call sub_4423F0

loc_410633:
	cmp byte [ecx+9], 18h
	jnz loc_410643
	mov eax, 1
	call sub_428910

loc_410643:
	cmp byte [ecx+9], 10h
	jnz loc_4106A5
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov eax, dword [dword_4D40B4]
	inc eax
	mov edx, [ecx+0Ch]
	mov dword [dword_4D40B4], eax
	cmp edx, 1
	jnz loc_410D82
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov dl, byte byte_512DC1[eax]
	dec dl
	mov byte byte_512DC1[eax], dl
	movzx edi, byte [byte_512DBF]
	lea esi, [edi+edi]
	mov dh, byte byte_4D407C[esi]
	cmp dl, dh
	jnb loc_4106A5
	mov al, dh
	add al, byte byte_4D407D[esi]
	dec al
	mov byte byte_512DC1[edi], al

loc_4106A5:
	cmp byte [ecx+9], 5
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov eax, dword_4E5A6C
	call sub_47EF30
	mov dword [dword_4D40BC], eax
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4106D8:
	jbe loc_4104E3
	cmp di, 5000h
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov edi, [esi+8]
	sar edi, 10h

loc_4106EF:
	inc word [esi+0Ah]
	mov eax, [esi+8]
	sar eax, 10h
	cmp dword [esi+eax*4+0Ch], 0
	jnz loc_410706
	mov word [esi+0Ah], 0

loc_410706:
	mov edx, [esi+8]
	sar edx, 10h
	mov eax, [esi+edx*4+0Ch]
	cmp byte [eax], 2
	jnz loc_4106EF
	test byte [eax+8], 1
	jnz loc_4106EF
	cmp edx, edi
	jz loc_41072E
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0

loc_41072E:
	mov eax, esi
	call sub_423E10
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410743:
	cmp di, 1Bh
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov ebx, 0FFFFFFFEh
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410760:
	test al, 10h
	jz loc_410792
	mov eax, [esi+8]
	sar eax, 10h
	mov eax, [esi+eax*4+8]
	test byte [eax+8], 1
	jnz loc_41050D
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0
	dec word [esi+0Ah]
	mov eax, esi
	jmp loc_410508

loc_410792:
	mov eax, [ecx+10h]
	cmp word [eax], 0
	jz loc_41050D
	mov eax, ecx
	call sub_410E10
	test eax, eax
	jz loc_41050D
	mov eax, [ecx+0Ch]
	inc byte [eax]
	mov eax, [ecx+0Ch]
	xor edx, edx
	mov dl, [eax]
	mov ebp, [ecx+10h]
	add edx, edx
	add edx, ebp
	cmp word [edx], 0
	jnz loc_41050D
	mov byte [eax], 0
	jmp loc_41050D

loc_4107D3:
	mov ebx, eax
	jmp loc_410529

loc_4107DA:
	xor eax, eax ; jumptable 00410535 case 24
	call sub_428910
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4107EF:
	cmp di, 4D00h ; jumptable 00410535 case 16
	jnz loc_410802
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_410802:
	mov edx, dword [dword_4D40B4]
	inc edx
	mov esi, [ecx+0Ch]
	mov dword [dword_4D40B4], edx
	cmp esi, 1
	jnz loc_410875
	xor eax, eax
	mov al, byte [byte_512DBF]
	xor ecx, ecx
	mov cl, byte byte_4D407D[eax*2]
	mov dl, byte byte_4D407C[eax*2]
	and edx, 0FFh
	add edx, ecx
	mov ch, byte byte_512DC1[eax]
	inc ch
	mov byte byte_512DC1[eax], ch
	mov al, ch
	and eax, 0FFh
	cmp eax, edx
	jl loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor eax, eax
	mov al, byte [byte_512DBF]
	mov dl, byte byte_4D407C[eax*2]
	mov byte byte_512DC1[eax], dl
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410875:
	xor eax, eax
	mov al, byte [byte_512DDA]
	xor ecx, ecx
	mov cl, byte byte_4D407D[eax*2]
	mov dl, byte byte_4D407C[eax*2]
	and edx, 0FFh
	add edx, ecx
	mov cl, byte byte_512DDC[eax]
	inc cl
	mov byte byte_512DDC[eax], cl
	mov al, cl
	and eax, 0FFh
	cmp eax, edx
	jl loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor eax, eax
	mov al, byte [byte_512DDA]
	mov dl, byte byte_4D407C[eax*2]
	mov byte byte_512DDC[eax], dl
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4108D3:
	xor eax, eax ; jumptable 00410535 case 14
	mov al, byte [byte_512DFB]
	call sub_41B730
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4108ED:
	cmp di, 0Dh ; jumptable 00410535 cases 12,13
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23

loc_4108F7:
	mov edx, ecx
	mov eax, esi
	call sub_403FC0
	test eax, eax
	jnz loc_4108F7
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410912:
	cmp di, 0Dh ; jumptable 00410535 case 11
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	cmp esi, off_4D2B34
	jnz loc_41093C
	mov eax, 1
	call sub_409070
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410954:
	cmp di, 0Dh
	jnz loc_41053C
	push 134h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_41053C
	call sub_4090C0
	and byte [byte_4D3468], 0FEh
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_41093C:
	mov eax, 2
	call sub_409070
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_41098F:
	call sub_408610 ; jumptable 00410535 case 20
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4109A2:
	cmp byte [byte_512ED3], 0 ; jumptable 00410535 case 21
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	call sub_4793B0
	mov byte [byte_512ED3], al
	test al, al
	jnz loc_410A49
	xor edx, edx

loc_4109C3:
	call sub_405910
	test eax, eax
	jz loc_4109D5
	mov eax, edx
	call sub_483EB0
	jmp loc_4109C3

loc_4109D5:
	mov eax, 14Ah
	call sub_41B710
	mov [esp+98h], eax
	mov eax, 301h
	lea edx, [esp+98h]
	call sub_41B710
	mov [esp+9Ch], eax
	mov eax, 2
	call sub_402E80
	call sub_405C70
	mov eax, 180h
	call sub_4833E7
	xor edx, edx

loc_410A1E:
	call sub_405910
	test eax, eax
	jnz loc_410A39
	call sub_483401
	test eax, eax
	jnz loc_410A39
	mov eax, edx
	call sub_483EB0
	jmp loc_410A1E

loc_410A39:
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410A49:
	mov eax, 14Ah
	call sub_41B710
	mov [esp+98h], eax
	mov eax, 302h
	lea edx, [esp+98h]
	call sub_41B710
	mov [esp+9Ch], eax
	mov eax, 2
	call sub_402E80
	call sub_405C70
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410A94:
	cmp di, 0Dh ; jumptable 00410535 case 3
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	call sub_423750
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410ADC:
	cmp di, 0Dh ; jumptable 00410535 case 4
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	call sub_423690
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410AF9:
	cmp di, 4D00h ; jumptable 00410535 case 5
	jnz loc_410B0C
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_410B0C:
	mov eax, dword_4E5A6C
	call sub_47EF30
	mov dword [dword_4D40BC], eax
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410B29:
	cmp di, 0Dh ; jumptable 00410535 case 8
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	mov eax, dword_512F4C
	call sub_47EAE0
	test eax, eax
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410B55:
	cmp di, 0Dh ; jumptable 00410535 case 7
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	cmp dword [dword_4E5A6C], 0
	jz loc_410C29
	mov edx, dword_512F4C
	mov eax, 180h
	call sub_47ED30
	mov dx, [eax]
	mov edi, eax
	test dx, dx
	jz loc_410C0F
	xor esi, esi
	xor eax, eax
	xor edx, edx

loc_410B8F:
	movsx ecx, word [edi]
	cmp edx, ecx
	jge loc_410BA7
	add esi, 4
	mov ecx, [edi+4]
	inc edx
	add ecx, eax
	add eax, 40h
	mov [esp+esi], ecx
	jmp loc_410B8F

loc_410BA7:
	lea eax, [esp+4]
	xor esi, esi
	xor edx, edx
	mov [esp+ecx*4+4], esi
	call sub_401090
	cmp eax, 0FFFFFFFFh
	jnz loc_410BCD
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410BCD:
	mov edx, [edi+4]
	shl eax, 6
	lea edi, [esp+84h]
	lea esi, [edx+eax+2Ch]
	movsd
	movsd
	movsd
	movsd
	movsd

loc_410BE3:
	test ebx, ebx
	jz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	lea eax, [esp+84h]
	call sub_47E8B0
	test eax, eax
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410C0F:
	mov eax, 35h
	call sub_402CD0
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410C29:
	mov edx, dword_512F4C
	lea eax, [esp+84h]
	call sub_47E7B0
	test eax, eax
	jnz loc_410BE3
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410C4E:
	cmp di, 0Dh ; jumptable 00410535 cases 9,10
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor eax, eax
	mov esi, byte_512F5E
	mov al, byte [byte_512F44]
	lea edi, [esp+58h]
	mov [esp+54h], eax
	push edi

loc_410C6D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_410C85
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_410C6D

loc_410C85:
	pop edi
	mov eax, dword [dword_512F48]
	mov [esp+80h], eax
	cmp byte [ecx+9], 0Ah
	jnz loc_410CC2
	mov word [word_513458], 1

loc_410CA1:
	lea eax, [esp+54h]
	call sub_4719B0
	test eax, eax
	jnz loc_41053C ; jumptable 00410535 cases 0,1,6,15,17,18,22,23
	xor ebx, ebx
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_410CC2:
	xor ecx, ecx
	mov word [word_513458], cx
	jmp loc_410CA1

loc_410CCD:
	test al, 10h
	jz loc_410CFA
	mov eax, [esi+8]
	sar eax, 10h
	mov eax, [esi+eax*4+8]
	test byte [eax+8], 1
	jnz loc_410633
	mov di, [esi+0Ah]
	mov edx, 7Fh
	dec edi
	mov eax, esi
	mov [esi+0Ah], di
	jmp loc_410624

loc_410CFA:
	mov eax, [ecx+10h]
	cmp word [eax], 0
	jz loc_410633
	mov eax, ecx
	call sub_410E10
	test eax, eax
	jz loc_410D5A
	mov eax, [ecx+0Ch]
	mov dh, [eax]
	test dh, dh
	jnz loc_410D54

loc_410D21:
	mov eax, [ecx+0Ch]
	xor edx, edx
	mov esi, [ecx+10h]
	mov dl, [eax]
	cmp word [esi+edx*2+2], 0
	jz loc_410D5A
	inc dl
	mov [eax], dl
	jmp loc_410D21

loc_410D54:
	mov dl, dh
	dec dl
	mov [eax], dl

loc_410D5A:
	mov dh, byte [byte_512DA9]
	cmp dh, 1
	jnz loc_410633
	cmp dh, byte [byte_512DF6]
	jnz loc_410633
	xor ah, ah
	mov byte [byte_512DF6], ah
	jmp loc_410633

loc_410D82:
	xor eax, eax
	mov al, byte [byte_512DDA]
	mov dl, byte byte_512DDC[eax]
	dec dl
	mov byte byte_512DDC[eax], dl
	movzx edi, byte [byte_512DDA]
	lea esi, [edi+edi]
	mov dh, byte byte_4D407C[esi]
	cmp dl, dh
	jnb loc_4106A5
	mov al, dh
	add al, byte byte_4D407D[esi]
	dec al
	mov byte byte_512DDC[edi], al
	jmp loc_4106A5

loc_410DC4:
	mov edx, eax
	dec edx
	mov [esi+0Ah], dx

loc_410DCB:
	mov edx, [esi+8]
	sar edx, 10h
	mov eax, [esi+edx*4+0Ch]
	cmp byte [eax], 2
	jnz loc_4105D4
	test byte [eax+8], 1
	jnz loc_4105D4
	cmp edx, edi
	jz loc_410DFB
	mov edx, 7Fh
	mov eax, 1
	call sub_4423F0

loc_410DFB:
	mov eax, esi
	call sub_423E10
	mov eax, ebx
	pop ecx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_410414 endp

sub_410E10: ;SUBROUTINE
	push ebx
	push edx
	mov bl, byte [byte_512DAA]
	mov edx, 1
	cmp bl, 1
	jnz loc_410E3E
	cmp dword [dword_4D76B8], 0
	jz loc_410E3E
	mov ebx, [eax+0Ch]
	cmp ebx, byte_512DAA
	jz loc_410E43
	cmp ebx, byte_512DA9
	jz loc_410E43

loc_410E3E:
	mov eax, edx
	pop edx
	pop ebx
	ret

loc_410E43:
	push 2EDh
	push 1
	call sub_401AE0
	add esp, 8
	mov edx, eax
	test eax, eax
	jz loc_410E3E
	push edi
	push ecx
	call sub_41A350
	xor edi, edi
	xor bh, bh
	xor cl, cl
	mov dword [dword_4D76B8], edi
	mov byte [byte_4E5D26], bh
	mov byte [byte_4E5A7A], cl
	pop ecx
	pop edi
	mov eax, edx
	pop edx
	pop ebx
	ret
;sub_410E10 endp

sub_410E80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 100h
	mov ecx, eax
	call sub_423C40
	mov eax, ecx
	call sub_40F540

loc_410E9A:
	call sub_405910
	test eax, eax
	jnz loc_410E9A
	mov edx, [ecx]
	test edx, edx
	jnz loc_410EC2

loc_410EA9:
	mov eax, ecx
	call sub_423EA0
	call sub_4833C7
	add esp, 100h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_410EC2:
	mov eax, edx
	mov edx, byte_4E5FC8
	call strcmp_
	test eax, eax
	jz loc_410EA9
	mov edi, byte_4E5FC8
	mov esi, [ecx]
	push edi

loc_410EDA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_410EF2
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_410EDA

loc_410EF2:
	pop edi
	mov ebx, dword [dword_4D40B8]
	test ebx, ebx
	jnz loc_411009

loc_410F01:
	xor eax, eax
	mov edi, [ecx]
	mov al, byte [byte_512DFB]
	push edi
	mov ebp, dword off_4D409C[eax*4]
	push ebp
	mov eax, dword [dword_5134B4]
	push eax
	push aSSS_qfs ; "%s%s%s.qfs"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 14h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dword [dword_4D40B8], eax
	test eax, eax
	jnz loc_410F67
	mov edx, [ecx]
	push edx
	mov ebx, dword [dword_5134B4]
	push ebx
	push aSS_qfs ; "%s%s.qfs"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dword [dword_4D40B8], eax

loc_410F67:
	cmp dword [dword_4D40B8], 0
	jnz loc_410F9A
	mov edi, [ecx]
	push edi
	mov ebp, dword [dword_5134B4]
	push ebp
	push aSS_fsh ; "%s%s.fsh"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dword [dword_4D40B8], eax

loc_410F9A:
	cmp dword [dword_4D40B8], 0
	jnz loc_410FCD
	mov edx, [ecx]
	push edx
	mov ebx, dword [dword_5134D0]
	push ebx
	push aSS_qfs ; "%s%s.qfs"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dword [dword_4D40B8], eax

loc_410FCD:
	cmp dword [dword_4D40B8], 0
	jnz loc_410EA9
	mov edi, [ecx]
	push edi
	mov ebp, dword [dword_5134D4]
	push ebp
	push aSS_qfs ; "%s%s.qfs"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov dword [dword_4D40B8], eax
	jmp loc_410EA9

loc_411009:
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4D40B8], esi
	jmp loc_410F01
;sub_410E80 endp

dword_411020: dd 4, 8, 2, 0

sub_411030: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	call sub_4118D0
	mov esi, 1
	mov ax, word [word_51345A]
	xor edx, edx
	xor ebp, ebp
	xor edi, edi
	mov ebx, esi
	mov [esp+0Ch], dx
	mov [esp+4], ebp
	mov [esp], ebp
	test ax, ax
	jnz loc_41119E
	cmp byte [byte_51345F], 1
	jz loc_4111B4
	mov dword [ecx], aModem ; "modem"

loc_41107B:
	mov eax, ecx
	call sub_410E80
	test bx, bx
	jz loc_411094

loc_411087:
	call sub_405910
	mov ebx, eax
	test ax, ax
	jnz loc_411087
	nop

loc_411094:
	cmp byte [byte_512DA9], 4
	jz loc_4111BF

loc_4110A1:
	test ebp, ebp
	jnz loc_41118D
	call sub_4833C7
	movsx edx, bx
	add edi, eax
	mov eax, ecx
	call sub_411370
	mov eax, ecx
	call sub_40F540
	test si, si
	jz loc_4110CD
	mov eax, ecx
	call sub_411820

loc_4110CD:
	call sub_423B90
	mov dx, word [word_513458]
	xor esi, esi
	test dx, dx
	jnz loc_4111F1
	cmp dword [dword_4D24DC], 0
	jz loc_4111E3

loc_4110F1:
	xor ebx, ebx

loc_4110F3:
	xor eax, eax
	mov [esp+0Ch], bx
	mov [esp+4], eax
	xor ebx, ebx

loc_411100:
	cmp byte [byte_512DA9], 4
	jnz loc_411143
	cmp dword [dword_4D76B8], 0
	jz loc_41112B
	cmp word [word_513458], 0
	jz loc_41112B
	cmp word [dword_513408+2], 2
	jge loc_41112B
	call sub_41A350

loc_41112B:
	cmp dword [esp], 0
	jz loc_411143
	mov edx, dword [dword_4D76B8]
	test edx, edx
	jnz loc_411143
	call sub_47E3D0
	mov [esp], edx

loc_411143:
	movsx eax, bx
	call sub_40E7C0
	test eax, eax
	jz loc_411322
	mov esi, 1

loc_411158:
	cmp word [word_51345A], 0
	jz loc_4110A1
	cmp word [word_51345C], 0
	jz loc_411188
	call sub_401080
	mov eax, 300h
	xor ebx, ebx
	call sub_402CD0
	mov word [word_51345C], bx

loc_411188:
	mov ebp, 0FFFFFFFFh

loc_41118D:
	call sub_411860
	mov eax, ebp
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41119E:
	call sub_411860
	mov ebp, 0FFFFFFFEh
	mov eax, ebp
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4111B4:
	mov dword [ecx], aNetwork ; "network"
	jmp loc_41107B

loc_4111BF:
	cmp dword [dword_4D76B8], 0
	jnz loc_4111D2
	call sub_47E3D0
	jmp loc_4110A1

loc_4111D2:
	mov dword [esp], 1
	call sub_4117E0
	jmp loc_4110A1

loc_4111E3:
	cmp word [dword_513428+2], 1
	jz loc_4110F1

loc_4111F1:
	mov eax, ecx
	call sub_423CA0
	mov esi, eax
	call sub_405910
	mov ebx, eax
	test ax, ax
	jz loc_4110F3
	cwde
	mov [esp+8], eax
	mov eax, [esp+0Ah]
	mov edx, [esp+8]
	sar eax, 10h
	cmp eax, edx
	jz loc_411299

loc_41121E:
	cmp bx, 1Bh
	jnz loc_4112A8

loc_411228:
	movsx esi, bx
	mov eax, ecx
	mov edx, esi
	call sub_410414
	mov edx, eax
	mov ebp, eax
	mov eax, esi
	call sub_40F370
	cmp edx, 0FFFFFFFFh
	jnz loc_4112E0

loc_411248:
	cmp byte [byte_512F45], 0
	jz loc_4112EE
	xor al, al
	xor ebp, ebp
	mov byte [byte_512F45], al

loc_41125E:
	mov esi, 1

loc_411263:
	mov eax, [esp+0Ah]
	movsx edx, bx
	sar eax, 10h
	cmp edx, eax
	jz loc_41131A
	lea eax, [edi+0Fh]

loc_411278:
	mov [esp+4], eax
	xor eax, eax
	mov al, byte [byte_512DB9]
	mov al, byte dword_411020[eax*4]
	mov [esp+0Ch], bx
	mov byte [byte_512DB8], al
	jmp loc_411100

loc_411299:
	cmp edi, [esp+4]
	jg loc_41121E
	jmp loc_4110F3

loc_4112A8:
	cmp bx, 0Dh
	jz loc_411228
	cmp bx, 4800h
	jz loc_411228
	cmp bx, 5000h
	jz loc_411228
	cmp bx, 4B00h
	jz loc_411228
	cmp bx, 4D00h
	jz loc_411228
	jmp loc_411263

loc_4112E0:
	cmp edx, 0FFFFFFFEh
	jz loc_411248
	jmp loc_41125E

loc_4112EE:
	push 2FFh
	mov edx, 1
	push edx
	mov dword [dword_4DA1B8], edx
	call sub_401AE0
	add esp, 8
	test eax, eax
	jnz loc_41130D
	xor ebp, ebp

loc_41130D:
	xor esi, esi
	mov dword [dword_4DA1B8], esi
	jmp loc_41125E

loc_41131A:
	lea eax, [edi+5]
	jmp loc_411278

loc_411322:
	call sub_40E420
	test eax, eax
	jz loc_411158
	mov eax, ecx
	call sub_411820
	call sub_40E370
	cmp byte [byte_512DA9], 4
	jnz loc_411352
	cmp dword [dword_4D76B8], 0
	jz loc_411352
	call sub_4116F0

loc_411352:
	mov ebp, 0FFFFFFFDh
	mov eax, ebp
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_411030 endp

sub_411370: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	cmp byte [byte_512F45], 0
	jnz loc_4114ED
	mov eax, esi
	xor edx, edx

loc_411389:
	cmp word [word_513458], 0
	jz loc_41152D

loc_411397:
	mov ecx, [eax+0Ch]
	and byte [ecx+8], 0FEh

loc_41139E:
	inc edx
	add eax, 4
	cmp edx, 0Ah
	jle loc_411389
	cmp word [word_513458], 0
	jz loc_4114A5
	test byte [byte_512DBC], 1
	jz loc_411542
	mov dword [off_4D3F18], dword_4D2978

loc_4113CC:
	cmp byte [byte_512DAA], 1
	jnz loc_411566
	mov ebx, dword_4D2968
	mov dl, byte [byte_512DB0]
	mov dword [off_4D3F18], ebx
	cmp dl, 7
	jnz loc_411566
	xor bl, bl
	mov byte [byte_512DB0], bl

loc_4113FB:
	mov eax, [esi+24h]
	mov bh, [eax+8]
	mov cl, 1
	or bh, 1
	mov byte [byte_512DF8], cl
	mov [eax+8], bh

loc_41140F:
	mov ch, byte [byte_512DAA]
	test ch, ch
	jz loc_4115A5
	cmp ch, 2
	jnz loc_411578
	mov eax, [esi+14h]
	or byte [eax+8], 1
	xor dh, dh
	mov byte [byte_512DB9], ch
	mov byte [byte_512DB0], dh

loc_41143B:
	mov bh, byte [byte_512F42]
	cmp bh, 0Fh
	jnz loc_411597

loc_41144A:
	mov al, byte [byte_512F43]
	add al, 0Ch
	mov byte [byte_512F42], al

loc_411456:
	mov eax, [esi+18h]
	or byte [eax+8], 1
	mov eax, [esi+20h]
	or byte [eax+8], 1
	mov eax, [esi+24h]
	mov dh, [eax+8]
	mov bl, 1
	or dh, 1
	mov byte [byte_512DF8], bl
	mov [eax+8], dh

loc_411478:
	mov bh, byte [byte_512DAA]
	cmp bh, 1
	jnz loc_411492
	cmp dword [dword_4D76B8], 0
	jz loc_411492
	mov eax, [esi+10h]
	or [eax+8], bh

loc_411492:
	xor eax, eax
	mov al, byte [byte_512DB9]
	mov al, byte dword_411020[eax*4]
	mov byte [byte_512DB8], al

loc_4114A5:
	xor eax, eax
	mov al, byte [byte_512DBF]
	cmp byte byte_4D407D[eax*2], 0
	jnz loc_4115E1
	or byte [byte_4D4000], 1

loc_4114C1:
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512F42]
	mov dl, byte [byte_512F43]
	lea ecx, [eax-0Ch]
	cmp ecx, edx
	jz loc_4114ED
	cmp byte [byte_512DAA], 2
	jnz loc_4115ED
	mov al, dl

loc_4114E6:
	add al, 0Ch
	mov byte [byte_512F42], al

loc_4114ED:
	cmp byte [byte_512DBF], 0Bh
	jbe loc_4114FE
	xor dh, dh
	mov byte [byte_512DBF], dh

loc_4114FE:
	mov dword [off_4D3FE0], dword_4D2EDC
	mov eax, edi
	call sub_40F370
	cmp byte [byte_512F45], 0
	jz loc_411528
	mov eax, [esi+34h]
	test byte [eax+8], 1
	jz loc_4116BB

loc_411528:
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41152D:
	cmp edx, 6
	jg loc_411397
	mov ecx, [eax+0Ch]
	or byte [ecx+8], 1
	jmp loc_41139E

loc_411542:
	cmp byte [byte_512DB0], 7
	jnz loc_4113CC
	xor al, al
	mov edx, dword_4D2968
	mov byte [byte_512DB0], al
	mov dword [off_4D3F18], edx
	jmp loc_4113CC

loc_411566:
	cmp byte [byte_512DB0], 0
	jz loc_4113FB
	jmp loc_41140F

loc_411578:
	mov eax, [esi+1Ch]
	or byte [eax+8], 1
	xor al, al
	mov byte [byte_512DB9], al
	mov eax, edi
	call sub_40DEA0
	call sub_407B60
	jmp loc_41143B

loc_411597:
	cmp bh, 0Ch
	jb loc_41144A
	jmp loc_411456

loc_4115A5:
	cmp byte [byte_512F42], 0Fh
	jz loc_4115C1
	mov eax, [esi+24h]
	or byte [eax+8], 1
	mov byte [byte_512DF8], 1
	jmp loc_411478

loc_4115C1:
	cmp byte [byte_512DF8], 1
	jz loc_411478
	mov eax, [esi+20h]
	or byte [eax+8], 1
	mov byte [byte_512F42], 0Fh
	jmp loc_411478

loc_4115E1:
	and byte [byte_4D4000], 0FEh
	jmp loc_4114C1

loc_4115ED:
	cmp word [esi+0Ah], 5
	jz loc_411613
	cmp al, 0Fh
	jz loc_4114ED
	call sub_407B80
	cmp eax, edx
	jz loc_4114ED
	mov al, byte [byte_512F43]
	jmp loc_4114E6

loc_411613:
	cmp edi, 4B00h
	jnz loc_41166D
	mov ecx, 10h

loc_411620:
	cmp byte [byte_512F42], 0Fh
	jz loc_4114ED
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512F42]
	mov dl, byte [byte_512F43]
	call sub_407B80
	cmp eax, edx
	jz loc_4114ED
	mov ah, byte [byte_512F42]
	xor edx, edx
	dec ah
	mov dl, ah
	add edx, 10h
	mov byte [byte_512F42], ah
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512F42], dl
	jmp loc_411620

loc_41166D:
	mov cl, byte [byte_512F42]
	cmp cl, 0Fh
	jz loc_4114ED
	xor eax, eax
	xor edx, edx
	mov al, cl
	mov dl, byte [byte_512F43]
	call sub_407B80
	cmp eax, edx
	jz loc_4114ED
	mov ch, byte [byte_512F42]
	xor edx, edx
	inc ch
	mov dl, ch
	mov byte [byte_512F42], ch
	mov ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_512F42], dl
	jmp loc_41166D

loc_4116BB:
	mov eax, esi
	mov word [esi+0Ah], 0Bh
	call sub_423E10
	mov eax, esi
	lea ecx, [esi+2Ch]

loc_4116CD:
	mov edx, [eax+0Ch]
	mov bl, [edx+8]
	or bl, 1
	add eax, 4
	mov [edx+8], bl
	cmp eax, ecx
	jnz loc_4116CD
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_411370 endp

sub_4116F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, dword [dword_4D76B8]
	cmp word [word_513458], 0
	jz loc_4117C6
	mov ebp, 2

loc_41170F:
	mov ebx, dword (dword_4E5FDC+2)[ebp]
	mov eax, dword dword_51340C[ebp]
	sar ebx, 10h
	sar eax, 10h
	cmp eax, ebx
	jz loc_4117BA
	cmp eax, 0FFFFFFFFh
	jnz loc_4117BA
	mov eax, 2

loc_411737:
	mov edx, dword (dword_4E5FDC+2)[eax]
	sar edx, 10h
	cmp edx, ebx
	jle loc_41174B
	dec dword dword_4E5FE0[eax]

loc_41174B:
	add eax, 2
	cmp eax, 10h
	jnz loc_411737
	mov eax, ebx
	cmp ebx, 7
	jge loc_4117A0
	lea ecx, [ebx+ebx]

loc_41175D:
	mov dh, byte byte_512AD0[eax]
	mov dl, byte byte_512AD1[eax]
	mov byte byte_512AD0[eax], dl
	add ecx, 2
	mov byte byte_512AD1[eax], dh
	mov edx, edi
	mov si, [ecx+edx+2B0h]
	mov bx, [ecx+edx+2AEh]
	mov [ecx+edx+2AEh], si
	inc eax
	mov [ecx+edx+2B0h], bx
	cmp eax, 7
	jl loc_41175D

loc_4117A0:
	mov ecx, dword [dword_512268]
	mov edx, dword [dword_512264]
	inc ecx
	dec edx
	mov dword [dword_512268], ecx
	mov dword [dword_512264], edx

loc_4117BA:
	add ebp, 2
	cmp ebp, 10h
	jnz loc_41170F

loc_4117C6:
	mov dword [dword_4D76B8], edi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4116F0 endp

sub_4117E0: ;SUBROUTINE
	cmp word [word_513458], 0
	jnz loc_4117EB
	ret

loc_4117EB:
	push edi
	push esi
	push ecx
	mov ecx, 10h
	mov esi, (dword_51340C+2)
	mov edi, dword_4E5FE0
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	pop ecx
	pop esi
	pop edi
	ret
;sub_4117E0 endp

sub_411820: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	call sub_428A20
	mov edx, 400h
	mov eax, [esi+4]
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	call sub_40E040
	mov eax, esi
	call sub_40FA90
	call sub_405C70
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_411820 endp

sub_411860: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, 2D0h
	mov ebx, 2C4h
	mov ecx, 2B0h
	mov esi, 281h
	mov word [word_4D3BBE], dx
	mov word [word_4D3C2A], bx
	mov word [word_4D3CAA], cx
	mov edx, dword [dword_4D76B8]
	mov word [word_4D3D52], si
	test edx, edx
	jz loc_4118A3
	call sub_41A350

loc_4118A3:
	call sub_463E40
	cmp byte [byte_512DB0], 7
	jz loc_4118B6
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4118B6:
	xor dl, dl
	mov byte [byte_512DB0], dl
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_411860 endp

sub_4118D0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov esi, eax
	push edi
	push ebx
	mov edx, 1
	mov ecx, dword [dword_4D21AC]
	mov dword [dword_4D2310], edx
	test ecx, ecx
	jz loc_41195B

loc_4118EC:
	mov edx, 2D1h
	mov ebx, 2C5h
	xor edi, edi
	mov ecx, 2B1h
	mov dword [dword_4D24DC], edi
	mov word [word_4D3BBE], dx
	mov word [word_4D3C2A], bx
	mov edi, 282h
	mov word [word_4D3CAA], cx
	mov word [word_4D3D52], di
	call sub_403B20
	xor ah, ah
	xor edx, edx
	mov byte [byte_512F45], ah
	mov eax, esi
	pop ebx
	pop edi

loc_411937:
	cmp word [word_513458], 0
	jz loc_41197B

loc_411941:
	mov ecx, [eax+0Ch]
	and byte [ecx+8], 0FEh

loc_411948:
	inc edx
	add eax, 4
	cmp edx, 0Ah
	jle loc_411937
	mov word [esi+0Ah], 7
	pop esi
	pop edx
	pop ecx
	ret

loc_41195B:
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	mov ebx, 1
	call sub_476750
	mov dword [dword_4D21AC], ebx
	jmp loc_4118EC

loc_41197B:
	cmp edx, 6
	jg loc_411941
	mov ecx, [eax+0Ch]
	or byte [ecx+8], 1
	jmp loc_411948
;sub_4118D0 endp

off_411990: dd aHismac
	dd aHisfer ; "hisfer"
	dd aHisfer ; "hisfer"
	dd aHisfrd ; "hisfrd"
	dd aHisfrd ; "hisfrd"
	dd aHisfrd ; "hisfrd"
	dd aHisjag ; "hisjag"
	dd aHisltus ; "hisltus"
	dd aHisltus ; "hisltus"
	dd aHisita ; "hisita"
	dd aHisita ; "hisita"
	dd aHisisd ; "hisisd"
off_4119C0: dd aMac_1
	dd aFerr ; "ferr"
	dd aF355 ; "f355"
	dd aGt90 ; "gt90"
	dd aIndigo ; "indigo"
	dd aMus_0 ; "mus"
	dd aJag_0 ; "jag"
	dd aGt1 ; "gt1"
	dd aLotus ; "lotus"
	dd aNazca ; "nazca"
	dd aItal ; "ital"
	dd aIsdera ; "isdera"
off_4119F0: dd aSldmac
	dd aSldfer ; "sldfer"
	dd aSld355f ; "sld355f"
	dd aSldfrd ; "sldfrd"
	dd aSldind ; "sldInd"
	dd aSldmus ; "sldmus"
	dd aSldjag ; "sldjag"
	dd aSldgt1 ; "sldgt1"
	dd aSldv8 ; "sldv8"
	dd aSldnaz ; "sldnaz"
	dd aSldita ; "sldita"
	dd aSldisd ; "sldisd"
dword_411A20: dd 189h, 190h, 1CFh, 197h, 1C1h, 1C8h, 19Eh, 1A5h, 1ACh
	dd 1D6h, 1B3h, 1BAh
dword_411A50: dd 240h, 245h, 272h, 24Ah, 268h, 26Dh, 24Fh, 254h, 259h
	dd 277h, 25Eh, 263h
dword_411A80: dd 1E5h, 1ECh, 22Bh, 1F3h, 21Dh, 224h, 1FAh, 201h, 208h
	dd 232h, 20Fh, 216h
off_411AB0: dd aMclarav
	dd aF50av ; "f50av"
	dd aF355av ; "f355av"
	dd aGt90av ; "gt90av"
	dd aIndigav ; "indigav"
	dd aMustav ; "mustav"
	dd aJagav ; "jagav"
	dd aGt1av ; "gt1av"
	dd aEspritav ; "espritav"
	dd aNazcaav ; "nazcaav"
	dd aCalaav ; "calaav"
	dd aIsderav ; "isderav"
dword_411AE0: dd 4C000Dh, 0C004Ch, 0C000Ch, 36000Bh, 0E0036h, 47000Eh
dword_411AF8: dd 3220313h, 3160322h, 3160316h, 31C0319h, 31F031Ch, 325031Fh
dword_411B10: dd 3230314h, 3170323h, 3170317h, 31D031Ah, 320031Dh, 3260320h
dword_411B28: dd 3240315h, 3180324h, 3180318h, 31E031Bh, 321031Eh, 3270321h
dword_411B40: dd 10000h, 20001h, 20002h, 40003h, 60004h, 70006h
dword_411B58: dd 32Eh, 6, 339h, 6, 339h, 6, 328h, 6, 328h, 6, 328h, 6
	dd 345h, 4, 334h, 5, 334h, 5, 33Fh, 6, 33Fh, 6, 349h, 4
	times 6 dd 0

sub_411BD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 218h
	mov [esp+1F8h], eax
	mov ecx, 6
	lea edi, [esp+1A8h]
	mov esi, dword_411AF8
	rep movsd
	mov ecx, 6
	lea edi, [esp+1D8h]
	mov esi, dword_411B10
	rep movsd
	mov ecx, 6
	lea edi, [esp+190h]
	mov esi, dword_411B28
	rep movsd
	xor edx, edx
	lea edi, [esp+1C0h]
	xor ecx, ecx
	mov esi, dword_411B40
	mov [esp+1F0h], ecx
	mov [esp+204h], ecx
	mov [esp+1F4h], ecx
	mov ecx, 6
	mov [esp+208h], edx
	rep movsd
	mov edx, 1
	mov ecx, 1Eh
	mov edi, esp
	mov esi, dword_411B58
	mov bx, word [word_4D3ECE]
	mov [esp+214h], edx
	rep movsd
	cmp bx, 3
	jz loc_411E5F
	xor eax, eax
	mov al, byte [byte_512DBF]

loc_411C81:
	mov [esp+1FCh], eax
	mov edx, [esp+1FCh]
	mov eax, [esp+1F8h]
	call sub_413180
	mov eax, [esp+1F8h]
	mov edi, [esp+208h]
	call sub_410E80
	test edi, edi
	jnz loc_412064

loc_411CB6:
	call sub_4833C7
	mov edx, [esp+204h]
	mov ecx, [esp+1F4h]
	xor ebx, ebx
	add edx, eax
	add ecx, eax
	call sub_428A20
	mov eax, aBack_0 ; "back"
	mov [esp+204h], edx
	mov [esp+1F4h], ecx
	mov edx, 400h
	xor ecx, ecx
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D4134[eax*4]
	mov esi, [esp+1FCh]
	call sub_405B30
	mov eax, [esp+1F8h]
	mov ecx, 12h
	call sub_40FA90
	push 2
	mov ebx, 0C8h
	mov eax, [esp+esi*2+1AAh]
	push 3
	sar eax, 10h
	mov edx, 0ECh
	call sub_41B710
	call sub_4054E0
	push 2
	mov ecx, 12h
	mov ebx, 15Eh
	mov eax, [esp+esi*2+1DAh]
	push 3
	sar eax, 10h
	mov edx, 29h
	call sub_41B710
	call sub_4054E0
	push 2
	mov ecx, 12h
	mov ebx, 15Eh
	mov eax, [esp+esi*2+192h]
	push 3
	sar eax, 10h
	mov edx, 0ECh
	call sub_41B710
	call sub_4054E0
	lea edx, 0[esi*8]
	mov eax, [esp+edx]
	xor ebx, ebx
	call sub_41B650
	mov [esp+210h], ebx
	mov [esp+200h], edx
	mov esi, [esp+edx+4]
	mov [esp+20Ch], eax
	test esi, esi
	jle loc_411F1E

loc_411DC9:
	mov ebp, [esp+200h]
	mov edx, [esp+210h]
	mov ebp, [esp+ebp]
	xor ah, ah
	add ebp, edx
	mov [esp+118h], ah
	mov eax, ebp
	lea edi, [esp+0C8h]
	call sub_41B710
	mov esi, eax
	push edi

loc_411DF6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_411E0E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_411DF6

loc_411E0E:
	pop edi
	mov eax, ebp
	call sub_41B670
	mov esi, eax

loc_411E18:
	lea eax, [esp+0C8h]
	call sub_482424
	mov edx, dword [dword_4DAB7C]
	add eax, esi
	sub edx, 5
	cmp eax, edx
	jle loc_411E6B
	lea edx, [esp+78h]
	lea eax, [esp+0C8h]
	call sub_412290
	lea edx, [esp+78h]
	lea eax, [esp+118h]
	call sub_412240
	cmp byte [esp+0C8h], 0
	jz loc_411E6B
	jmp loc_411E18

loc_411E5F:
	xor eax, eax
	mov al, byte [byte_512DDA]
	jmp loc_411C81

loc_411E6B:
	cmp byte [esp+0C8h], 0
	jz loc_411EB2
	mov eax, ebp
	call sub_41B6D0
	cwde
	push eax
	mov eax, ebp
	mov ebx, [esp+20Eh]
	call sub_41B690
	cwde
	movsx edx, si
	push eax
	mov eax, ebp
	sar ebx, 10h
	call sub_41B6F0
	movsx ecx, ax
	lea eax, [esp+0D0h]
	call sub_4054E0
	add dword [esp+20Ch], 1Ah

loc_411EB2:
	cmp byte [esp+118h], 0
	jz loc_411EFC
	mov eax, ebp
	call sub_41B6D0
	cwde
	mov ebx, [esp+20Ah]
	push eax
	mov eax, ebp
	add esi, 31h
	call sub_41B690
	cwde
	sar ebx, 10h
	push eax
	mov eax, ebp
	movsx edx, si
	call sub_41B6F0
	movsx ecx, ax
	lea eax, [esp+120h]
	call sub_4054E0
	add dword [esp+20Ch], 1Ah

loc_411EFC:
	mov edi, [esp+210h]
	mov edx, [esp+200h]
	inc edi
	mov ebp, [esp+edx+4]
	mov [esp+210h], edi
	cmp edi, ebp
	jl loc_411DC9

loc_411F1E:
	call sub_405C70
	mov eax, [esp+1F8h]
	call sub_423CA0
	cmp dword [esp+1F4h], 0A0h
	jle loc_411F88
	cmp word [esp+214h], 1
	jnz loc_411F88
	mov eax, [esp+1FCh]
	mov eax, [esp+eax*2+1BEh]
	sar eax, 10h
	push eax
	push aHD0 ; "h%d0"
	lea eax, [esp+170h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+168h]
	xor edi, edi
	call sub_403480
	call sub_486F28
	mov [esp+214h], edi

loc_411F88:
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_412056
	mov ecx, [esp+204h]
	cmp ecx, [esp+1F0h]
	jle loc_412056
	add ecx, 0Fh
	mov [esp+1F0h], ecx
	cmp ax, 4B00h
	jnz loc_4120FB
	mov eax, [esp+1F8h]
	cmp word [eax+0Ah], 0
	jnz loc_4120FB
	mov edx, 7Fh
	xor eax, eax
	mov ebx, [esp+1FCh]
	call sub_4423F0
	cmp ebx, 8
	jnz loc_4120A3
	mov dword [esp+1FCh], 7

loc_411FF9:
	mov esi, [esp+1FCh]
	dec esi
	mov [esp+1FCh], esi
	test esi, esi
	jl loc_4120E6

loc_412010:
	mov ebp, 1
	mov edx, [esp+1FCh]
	xor eax, eax
	mov dword [dword_4D1FFC], ebp
	call sub_403550
	mov eax, [esp+1F8h]
	call sub_413180
	mov eax, [esp+1F8h]
	mov edi, 1
	call sub_410E80
	xor eax, eax
	mov [esp+214h], edi
	mov [esp+1F4h], eax

loc_412056:
	cmp dword [esp+208h], 0
	jz loc_411CB6

loc_412064:
	mov dword [dword_4D1FFC], 1
	xor eax, eax
	call sub_403550
	cmp word [word_4D3ECE], 3
	jnz loc_412216
	mov al, [esp+1FCh]
	mov byte [byte_512DDA], al
	mov eax, [esp+208h]
	add esp, 218h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4120A3:
	cmp ebx, 5
	jnz loc_4120B8
	mov dword [esp+1FCh], 3
	jmp loc_411FF9

loc_4120B8:
	cmp ebx, 2
	jnz loc_4120CD
	mov dword [esp+1FCh], 1
	jmp loc_411FF9

loc_4120CD:
	cmp ebx, 0Ah
	jnz loc_411FF9
	mov dword [esp+1FCh], 9
	jmp loc_411FF9

loc_4120E6:
	mov eax, dword [dword_4E5FF8]
	sar eax, 10h
	dec eax
	mov [esp+1FCh], eax
	jmp loc_412010

loc_4120FB:
	cmp dx, 0Dh
	jnz loc_4121AD

loc_412105:
	mov eax, [esp+1F8h]
	cmp word [eax+0Ah], 0
	jnz loc_4121B8
	mov edx, 7Fh
	xor eax, eax
	mov esi, [esp+1FCh]
	call sub_4423F0
	cmp esi, 7
	jnz loc_4121D3
	mov dword [esp+1FCh], 8

loc_41213E:
	mov edi, [esp+1FCh]
	mov eax, dword [dword_4E5FF8]
	inc edi
	sar eax, 10h
	mov [esp+1FCh], edi
	cmp eax, edi
	jnz loc_412162
	xor eax, edi
	mov [esp+1FCh], eax

loc_412162:
	mov edx, 1
	mov esi, 1
	xor eax, eax
	xor ecx, ecx
	mov dword [dword_4D1FFC], edx
	call sub_403550
	mov edx, [esp+1FCh]
	mov eax, [esp+1F8h]
	mov [esp+214h], esi
	call sub_413180
	mov eax, [esp+1F8h]
	mov [esp+1F4h], ecx
	call sub_410E80
	jmp loc_412056

loc_4121AD:
	cmp dx, 4D00h
	jz loc_412105

loc_4121B8:
	mov eax, [esp+1F8h]
	movsx edx, dx
	call sub_410414
	mov [esp+208h], eax
	jmp loc_412056

loc_4121D3:
	cmp esi, 3
	jnz loc_4121E8
	mov dword [esp+1FCh], 5
	jmp loc_41213E

loc_4121E8:
	cmp esi, 1
	jnz loc_4121FD
	mov dword [esp+1FCh], 2
	jmp loc_41213E

loc_4121FD:
	cmp esi, 9
	jnz loc_41213E
	mov dword [esp+1FCh], 0Ah
	jmp loc_41213E

loc_412216:
	mov al, [esp+1FCh]
	mov byte [byte_512DBF], al
	mov eax, [esp+208h]
	add esp, 218h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_411BD0 endp

sub_412240: ;SUBROUTINE
	push esi
	push edi
	sub esp, 50h
	mov edi, eax
	mov esi, edx
	cmp byte [edx], 0
	jz loc_41226D
	cmp byte [edi], 0
	jnz loc_412273

loc_412253:
	push edi

loc_412254:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41226C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_412254

loc_41226C:
	pop edi

loc_41226D:
	add esp, 50h
	pop edi
	pop esi
	ret

loc_412273:
	push edi
	push esi
	push aSS ; "%s %s"
	lea esi, [esp+0Ch]
	push esi
	call sprintf_
	add esp, 10h
	mov esi, esp
	jmp loc_412253
;sub_412240 endp

sub_412290: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov ebx, edx
	mov edi, eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov ah, [ebp+0]
	mov esi, ecx
	test ah, ah
	jz loc_4122EF
	cmp byte [edx], 0
	jz loc_4122EF
	mov eax, ecx
	add ecx, ebp
	mov byte [ebx], 0
	mov edx, ecx
	cmp byte [ecx], 20h
	jz loc_4122CF

loc_4122C1:
	test eax, eax
	jl loc_4122CF
	mov cl, [edx-1]
	dec edx
	dec eax
	cmp cl, 20h
	jnz loc_4122C1

loc_4122CF:
	mov edi, eax
	lea ecx, [eax+ebp]
	mov edx, ebx
	cmp eax, esi
	jge loc_4122E8

loc_4122DA:
	inc edx
	mov bl, [ecx]
	inc ecx
	inc eax
	mov [edx-1], bl
	cmp eax, esi
	jl loc_4122DA

loc_4122E8:
	mov byte [edx], 0
	mov byte [edi+ebp], 0

loc_4122EF:
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_412290 endp

sub_412300: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov ecx, 1
	mov eax, 1
	xor esi, esi
	xor ebp, ebp
	mov dword [dword_4D1FFC], eax
	xor eax, eax
	mov [esp], esi
	call sub_403550
	mov dx, word [word_4D3ECE]
	mov [esp+4], esi
	cmp dx, 3
	jz loc_412473
	xor eax, eax
	mov al, byte [byte_512DBF]

loc_412344:
	mov [esp+8], eax
	mov edx, [esp+8]
	mov ebx, esi
	mov eax, edi
	call sub_413100
	mov eax, edi
	mov edx, [esp]
	call sub_410E80
	test edx, edx
	jnz loc_412444

loc_412367:
	call sub_4833C7
	add ebp, eax
	test cx, cx
	jz loc_412397
	call sub_428A20
	mov edx, 400h
	mov eax, aBack_0 ; "back"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	mov eax, edi
	call sub_40FA90
	call sub_405C70

loc_412397:
	xor eax, eax
	call sub_403550
	call sub_423B90
	mov eax, edi
	call sub_423CA0
	mov ecx, eax
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_41243A
	cmp ebp, [esp+4]
	jle loc_41243A
	lea ebx, [ebp+0Fh]
	mov ecx, 1
	mov [esp+4], ebx
	cmp ax, 4D00h
	jnz loc_41247F

loc_4123DC:
	cmp word [edi+0Ah], 1
	jnz loc_412489
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov edx, [esp+8]
	mov ebx, dword [dword_4E5FF8]
	inc edx
	sar ebx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov [esp+8], edx
	cmp edx, 3

loc_41240F:
	jnz loc_412418
	cmp esi, 7
	jl loc_412418
	xor esi, esi

loc_412418:
	cmp dword [esp+8], 5
	jnz loc_412426
	cmp esi, 7
	jl loc_412426

loc_412424:
	xor esi, esi

loc_412426:
	mov edx, [esp+8]
	mov ebx, esi
	mov eax, edi
	call sub_413100
	mov eax, edi
	call sub_412580

loc_41243A:
	cmp dword [esp], 0
	jz loc_412367

loc_412444:
	cmp word [word_4D3ECE], 3
	jnz loc_41256F
	mov al, [esp+8]
	mov byte [byte_512DDA], al

loc_41245B:
	mov esi, 1
	mov eax, [esp]
	mov dword [dword_4D4154], esi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_412473:
	xor eax, eax
	mov al, byte [byte_512DDA]
	jmp loc_412344

loc_41247F:
	cmp ax, 0Dh
	jz loc_4123DC

loc_412489:
	cmp dx, 4B00h
	jnz loc_4124C9
	cmp word [edi+0Ah], 1
	jnz loc_4124C9
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov eax, [esp+8]
	dec eax
	mov [esp+8], eax
	test eax, eax
	jl loc_4124BA

loc_4124B0:
	cmp dword [esp+8], 3
	jmp loc_41240F

loc_4124BA:
	mov eax, dword [dword_4E5FF8]
	sar eax, 10h
	dec eax
	mov [esp+8], eax
	jmp loc_4124B0

loc_4124C9:
	cmp dx, 4D00h
	jnz loc_412512

loc_4124D0:
	cmp word [edi+0Ah], 0
	jnz loc_412518
	mov edx, 7Fh
	xor eax, eax
	inc esi
	call sub_4423F0
	cmp esi, 8
	jnz loc_4124EB
	xor esi, esi

loc_4124EB:
	cmp dword [esp+8], 3
	jnz loc_4124F9
	cmp esi, 7
	jnz loc_4124F9
	xor esi, esi

loc_4124F9:
	cmp dword [esp+8], 5
	jnz loc_412426
	cmp esi, 7
	jnz loc_412426
	jmp loc_412424

loc_412512:
	cmp dx, 0Dh
	jz loc_4124D0

loc_412518:
	cmp dx, 4B00h
	jnz loc_41255D
	cmp word [edi+0Ah], 0
	jnz loc_41255D
	mov edx, 7Fh
	xor eax, eax
	dec esi
	call sub_4423F0
	test esi, esi
	jge loc_412426
	mov esi, [esp+8]
	cmp esi, 3
	jnz loc_41254E

loc_412544:
	mov esi, 6
	jmp loc_412426

loc_41254E:
	cmp esi, 5
	jz loc_412544
	mov esi, 7
	jmp loc_412426

loc_41255D:
	movsx edx, dx
	mov eax, edi
	call sub_410414
	mov [esp], eax
	jmp loc_41243A

loc_41256F:
	mov al, [esp+8]
	mov byte [byte_512DBF], al
	jmp loc_41245B
;sub_412300 endp

sub_412580: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	sub esp, 100h
	mov ecx, eax
	mov edx, [eax]
	test edx, edx
	jnz loc_4125A0

loc_412591:
	call sub_4833C7
	add esp, 100h
	pop ebp
	pop edx
	pop ecx
	ret

loc_4125A0:
	mov eax, edx
	mov edx, byte_4E5FC8
	call strcmp_
	test eax, eax
	jz loc_412591
	push edi
	push esi
	push ebx
	mov edi, byte_4E5FC8
	mov esi, [ecx]
	push edi

loc_4125BB:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4125D3
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4125BB

loc_4125D3:
	pop edi
	mov ebx, dword [dword_4D40B8]
	test ebx, ebx
	jz loc_4125ED
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4D40B8], esi

loc_4125ED:
	mov edi, [ecx]
	push edi
	mov ebp, dword [dword_5134D0]
	push ebp
	push aSS_qfs_0 ; "%s%s.qfs"
	lea eax, [esp+18h]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	lea eax, [esp+0Ch]
	call sub_488058
	mov dword [dword_4D40B8], eax
	mov eax, 1Eh
	call sub_4833E7
	call sub_4833F3
	pop ebx
	pop esi
	pop edi
	call sub_4833C7
	add esp, 100h
	pop ebp
	pop edx
	pop ecx
	ret
;sub_412580 endp

sub_412640: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 18h
	mov ecx, 6
	mov edi, esp
	mov esi, dword_411AE0
	rep movsd
	cmp ax, 0Ch
	jl loc_41265C
	xor eax, eax

loc_41265C:
	cwde
	mov ax, [esp+eax*2]
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	ret
;sub_412640 endp

sub_412670: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 174h
	mov ebp, eax
	mov eax, dword [dword_5637F4]
	mov edx, 1
	lea edi, [esp+0FCh]
	mov esi, off_411AB0
	mov [esp+158h], eax
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+15Ch], ecx
	mov [esp+164h], ecx
	mov [esp+160h], ecx
	mov [esp+16Ch], edx
	mov ecx, 0Ch
	mov [esp+170h], ebx
	mov edx, 1
	rep movsd
	mov [esp+154h], edx
	mov ecx, 0Ch
	mov si, word [word_4D3ECE]
	mov word [dword_4E5FF8+2], cx
	cmp si, 3
	jz loc_412A8D
	xor eax, eax
	mov al, byte [byte_512DBF]

loc_4126F9:
	mov [esp+168h], eax
	mov edx, [esp+168h]
	mov eax, ebp
	mov ebx, 1
	call sub_413160
	mov edx, [esp+168h]
	mov eax, 1
	xor edi, edi
	call sub_412E60
	mov eax, ebp
	mov dword [dword_4D2098], edi
	call sub_410E80
	mov eax, [esp+166h]
	push edi
	sar eax, 10h
	mov edx, aCar6 ; "car6"
	call sub_412640
	movsx ecx, ax
	xor eax, eax
	call sub_428140
	cmp dword [dword_4D4154], 0
	jz loc_412762
	mov [esp+160h], edi

loc_412762:
	xor ecx, ecx
	mov ebx, [esp+15Ch]
	mov dword [dword_4D4154], ecx
	test ebx, ebx
	jnz loc_412A1E

loc_412779:
	mov edi, [esp+160h]
	call sub_4833C7
	add edi, eax
	mov ecx, 1
	mov [esp+160h], edi
	mov esi, edi
	mov edi, [esp+170h]
	add edi, ecx
	mov eax, [esp+168h]
	mov [esp+170h], edi
	cmp eax, 0Bh
	jnz loc_412A99
	mov eax, [ebp+1Ch]
	or byte [eax+8], 1

loc_4127BC:
	cmp word [esp+170h], 23h
	jl loc_412AB2
	cmp word [esp+16Ch], 1
	jnz loc_412AB2
	mov edx, [esp+158h]
	add edx, 78h
	mov eax, dword [dword_5637F4]
	cmp eax, edx
	jle loc_412AB2
	cmp byte [byte_512DFB], 0
	jnz loc_412AA5
	cmp byte [byte_512DFA], 1
	jnz loc_412AA5
	mov edx, [esp+168h]
	cmp edx, 7
	jnz loc_412AA5
	lea eax, [edx+5]
	push eax

loc_41281F:
	push a02d0 ; "%02d0"
	lea eax, [esp+134h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+12Ch]
	call sub_403480
	xor ebx, ebx
	call sub_486F28
	mov [esp+16Ch], ebx

loc_41284E:
	cmp dword [dword_4D2094], 0
	jz loc_412B02

loc_41285B:
	call sub_428A20
	mov edx, 400h
	mov eax, aBack_0 ; "back"
	xor ecx, ecx
	xor ebx, ebx
	mov edi, [esp+154h]
	call sub_405B30
	cmp edi, 2
	jnb loc_412AC0
	cmp edi, 1
	jnz loc_41289B
	mov edx, 1000h
	mov eax, aGnrl ; "gnrl"

loc_412892:
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30

loc_41289B:
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	mov ebx, [esp+168h]
	call sub_426B70
	cmp ebx, 7
	jnz loc_412AE9

loc_4128BF:
	mov ebx, 0Ah
	mov eax, 12h
	mov edx, esi
	xor ecx, ecx

loc_4128CD:
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_4128EE
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_4128EE:
	call sub_4976B8

loc_4128FA:
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_412A10
	mov ecx, [esp+160h]
	cmp ecx, [esp+164h]
	jle loc_412A10
	add ecx, 0Fh
	mov [esp+164h], ecx
	cmp ax, 4B00h
	jnz loc_412B38
	cmp word [ebp+0Ah], 0
	jnz loc_412B38
	mov edx, 7Fh
	mov ebx, [esp+168h]
	xor eax, eax
	dec ebx
	call sub_4423F0
	mov [esp+168h], ebx
	test ebx, ebx
	jl loc_412B0C

loc_412967:
	mov edi, 1
	mov edx, [esp+168h]
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	mov eax, ebp
	call sub_413160
	xor eax, eax
	mov edx, [esp+168h]
	call sub_403550
	mov eax, [esp+154h]
	call sub_412E60
	xor eax, eax
	call sub_403550
	mov eax, ebp
	mov ebx, edi
	call sub_410E80
	mov eax, [esp+166h]
	push 0
	sar eax, 10h
	mov edx, aCar6 ; "car6"
	call sub_412640
	movsx ecx, ax
	xor eax, eax
	call sub_428140
	xor eax, eax
	mov ecx, 1
	call sub_403550
	xor ebx, ebx
	xor edx, edx
	mov eax, [esp+168h]
	mov [esp+170h], ebx
	mov [esp+16Ch], ecx
	cmp eax, 7
	jnz loc_412B21

loc_4129FF:
	mov ebx, 0Ah
	mov eax, 12h
	xor ecx, ecx

loc_412A0B:
	call sub_4274F0

loc_412A10:
	cmp dword [esp+15Ch], 0
	jz loc_412779

loc_412A1E:
	cmp word [word_4D3ECE], 3
	jnz loc_412E3E
	mov al, [esp+168h]
	mov byte [byte_512DDA], al

loc_412A38:
	mov edi, 1
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	xor eax, eax
	mov edx, [esp+168h]
	mov dword [dword_4D2098], eax
	cmp edx, 7
	jz loc_412A66
	cmp edx, 8
	jnz loc_412E4F

loc_412A66:
	mov ebx, 0Ah
	mov edx, eax
	xor ecx, ecx
	mov eax, 12h

loc_412A74:
	call sub_4274F0
	mov eax, [esp+15Ch]
	add esp, 174h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_412A8D:
	xor eax, eax
	mov al, byte [byte_512DDA]
	jmp loc_4126F9

loc_412A99:
	mov eax, [ebp+1Ch]
	and byte [eax+8], 0FEh
	jmp loc_4127BC

loc_412AA5:
	mov ecx, [esp+168h]
	push ecx
	jmp loc_41281F

loc_412AB2:
	test cx, cx
	jnz loc_41285B
	jmp loc_41284E

loc_412AC0:
	jbe loc_412ADA
	cmp edi, 3
	jnz loc_41289B
	mov edx, 1000h
	mov eax, aMech ; "mech"
	jmp loc_412892

loc_412ADA:
	mov edx, 1000h
	mov eax, aPerf ; "perf"
	jmp loc_412892

loc_412AE9:
	cmp ebx, 8
	jz loc_4128BF
	mov eax, 12h
	mov edx, esi
	xor ecx, ecx
	xor ebx, ebx
	jmp loc_4128CD

loc_412B02:
	call sub_423B90
	jmp loc_4128FA

loc_412B0C:
	mov eax, dword [dword_4E5FF8]
	sar eax, 10h
	dec eax
	mov [esp+168h], eax
	jmp loc_412967

loc_412B21:
	cmp eax, 8
	jz loc_4129FF

loc_412B2A:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	jmp loc_412A0B

loc_412B38:
	cmp ax, 4D00h
	jnz loc_412C1C

loc_412B42:
	cmp word [ebp+0Ah], 0
	jnz loc_412C26
	mov edx, 7Fh
	xor eax, eax
	mov ecx, [esp+168h]
	call sub_4423F0
	mov eax, dword [dword_4E5FF8]
	inc ecx
	sar eax, 10h
	mov [esp+168h], ecx
	cmp eax, ecx
	jnz loc_412B7D
	xor esi, esi
	mov [esp+168h], esi

loc_412B7D:
	mov edi, 1
	mov edx, [esp+168h]
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	mov eax, ebp
	call sub_413160
	xor eax, eax
	mov edx, [esp+168h]
	call sub_403550
	mov eax, [esp+154h]
	call sub_412E60
	mov eax, ebp
	mov ebx, edi
	call sub_410E80
	mov eax, [esp+166h]
	push 0
	sar eax, 10h
	mov edx, aCar6 ; "car6"
	call sub_412640
	movsx ecx, ax
	xor eax, eax
	call sub_428140
	xor eax, eax
	mov edx, 1
	call sub_403550
	xor eax, eax
	mov [esp+16Ch], edx
	mov [esp+170h], eax
	mov eax, [esp+168h]
	xor edx, edx
	cmp eax, 7
	jz loc_4129FF
	cmp eax, 8
	jnz loc_412B2A
	jmp loc_4129FF

loc_412C1C:
	cmp ax, 0Dh
	jz loc_412B42

loc_412C26:
	cmp ax, 4D00h
	jnz loc_412C76

loc_412C2C:
	cmp word [ebp+0Ah], 1
	jnz loc_412C7C
	mov edx, 7Fh
	mov edi, [esp+154h]
	xor eax, eax
	inc edi
	call sub_4423F0
	mov [esp+154h], edi
	cmp edi, 3
	jle loc_412C5E
	mov dword [esp+154h], 1

loc_412C5E:
	mov edx, [esp+168h]
	mov eax, [esp+154h]
	call sub_412E60
	jmp loc_412A10

loc_412C76:
	cmp ax, 0Dh
	jz loc_412C2C

loc_412C7C:
	cmp ax, 4B00h
	jnz loc_412CCC
	cmp word [ebp+0Ah], 1
	jnz loc_412CCC
	mov edx, 7Fh
	mov ecx, [esp+154h]
	xor eax, eax
	dec ecx
	call sub_4423F0
	mov [esp+154h], ecx
	cmp ecx, 1
	jge loc_412CB4
	mov dword [esp+154h], 3

loc_412CB4:
	mov edx, [esp+168h]
	mov eax, [esp+154h]
	call sub_412E60
	jmp loc_412A10

loc_412CCC:
	cmp ax, 0Dh
	jnz loc_412E02
	cmp word [ebp+0Ah], 4
	jnz loc_412E02
	mov edx, 7Fh
	mov eax, 2
	mov ebx, 1
	call sub_4423F0
	xor eax, eax
	mov dword [dword_4D1FFC], ebx
	call sub_403550
	call sub_4056B0
	call sub_4762E0
	call sub_476250
	mov eax, [esp+168h]
	mov esi, [esp+eax*4+0FCh]
	push esi
	push aS_dct ; "%s.dct"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, esp
	xor edi, edi
	call sub_4242F0
	call sub_4769D0
	mov eax, 12h
	mov edx, dword [dword_4D5A28]
	xor esi, esi
	call sub_476750
	call sub_4057C0
	mov eax, ebp
	mov dword [dword_4D2098], edi
	call sub_410E80
	mov eax, [esp+166h]
	push edi
	sar eax, 10h
	mov edx, aCar6 ; "car6"
	call sub_412640
	movsx ecx, ax
	xor eax, eax
	mov [esp+174h], esi
	call sub_428140
	mov eax, [esp+168h]
	xor esi, esi
	cmp eax, 7
	jnz loc_412DF0

loc_412D98:
	mov ebx, 0Ah
	mov eax, 12h
	mov edx, esi
	xor ecx, ecx

loc_412DA6:
	call sub_4274F0
	mov edx, [esp+168h]
	mov eax, ebp
	call sub_413160
	mov edx, [esp+168h]
	mov eax, [esp+154h]
	mov edi, 1
	call sub_412E60
	mov eax, ebp
	mov [esp+16Ch], edi
	call sub_410E80
	mov eax, dword [dword_5637F4]
	mov [esp+158h], eax
	jmp loc_412A10

loc_412DF0:
	cmp eax, 8
	jz loc_412D98
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	jmp loc_412DA6

loc_412E02:
	cmp ax, 1Bh
	jnz loc_412E28
	mov edx, 7Fh
	mov eax, 3
	mov esi, 0FFFFFFFFh
	call sub_4423F0
	mov [esp+15Ch], esi
	jmp loc_412A1E

loc_412E28:
	movsx edx, ax
	mov eax, ebp
	call sub_410414
	mov [esp+15Ch], eax
	jmp loc_412A10

loc_412E3E:
	mov al, [esp+168h]
	mov byte [byte_512DBF], al
	jmp loc_412A38

loc_412E4F:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	jmp loc_412A74
;sub_412670 endp

sub_412E60: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 90h
	mov ebx, eax
	mov ecx, 0Ch
	mov edi, esp
	mov esi, dword_411A20
	rep movsd
	mov ecx, 0Ch
	lea edi, [esp+30h]
	mov esi, dword_411A50
	rep movsd
	mov ecx, 0Ch
	lea edi, [esp+60h]
	mov esi, dword_411A80
	rep movsd
	cmp eax, 2
	jnb loc_412F2A
	cmp eax, 1
	jnz loc_412F06
	mov ecx, 181h
	mov esi, 182h
	mov edi, 183h
	mov eax, 184h
	mov word [word_4D2D4E], cx
	mov word [word_4D2D62], si
	mov word [word_4D2D76], di
	mov word [word_4D2D8A], ax
	mov ecx, 185h
	mov esi, 186h
	mov edi, 187h
	mov eax, 188h

loc_412EEB:
	mov word [word_4D2D9E], cx
	mov word [word_4D2DB2], si
	mov word [word_4D2DC6], di
	mov word [word_4D2DDA], ax

loc_412F06:
	lea eax, 0[edx*4]
	cmp ebx, 2
	jnb loc_412FC1
	cmp ebx, 1
	jz loc_41303B

loc_412F1F:
	add esp, 90h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_412F2A:
	ja loc_412F74
	mov ecx, 239h
	mov esi, 23Ah
	mov edi, 23Bh
	mov eax, 23Ch
	mov word [word_4D2D4E], cx
	mov word [word_4D2D62], si
	mov word [word_4D2D76], di
	mov word [word_4D2D8A], ax
	mov ecx, 23Dh
	mov esi, 23Eh
	mov edi, 23Fh
	mov eax, 15Ah
	jmp loc_412EEB

loc_412F74:
	cmp eax, 3
	jnz loc_412F06
	mov ecx, 1DDh
	mov esi, 1DEh
	mov edi, 1DFh
	mov eax, 1E0h
	mov word [word_4D2D4E], cx
	mov word [word_4D2D62], si
	mov word [word_4D2D76], di
	mov word [word_4D2D8A], ax
	mov ecx, 1E1h
	mov esi, 1E2h
	mov edi, 1E3h
	mov eax, 1E4h
	jmp loc_412EEB

loc_412FC1:
	jbe loc_4130A0
	cmp ebx, 3
	jnz loc_412F1F
	mov dx, [esp+eax+60h]
	mov word [word_4D2DEE], dx
	inc edx
	mov word [word_4D2E02], dx
	mov dx, [esp+eax+60h]
	add edx, 2
	mov word [word_4D2E16], dx
	mov dx, [esp+eax+60h]
	add edx, 3
	mov word [word_4D2E2A], dx
	mov dx, [esp+eax+60h]
	add edx, 4
	mov word [word_4D2E3E], dx
	mov dx, [esp+eax+60h]
	mov ax, [esp+eax+60h]
	add edx, 5
	add eax, 6
	mov word [word_4D2E52], dx
	mov word [word_4D2E66], ax
	add esp, 90h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41303B:
	mov dx, [esp+eax]
	mov word [word_4D2DEE], dx
	inc edx
	mov word [word_4D2E02], dx
	mov dx, [esp+eax]
	add edx, 2
	mov word [word_4D2E16], dx
	mov dx, [esp+eax]
	add edx, 3
	mov word [word_4D2E2A], dx
	mov dx, [esp+eax]
	add edx, 4
	mov word [word_4D2E3E], dx
	mov dx, [esp+eax]
	mov ax, [esp+eax]
	add edx, 5
	add eax, 6
	mov word [word_4D2E52], dx
	mov word [word_4D2E66], ax
	add esp, 90h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4130A0:
	mov dx, [esp+eax+30h]
	mov word [word_4D2DEE], dx
	inc edx
	mov word [word_4D2E02], dx
	mov dx, [esp+eax+30h]
	add edx, 2
	mov word [word_4D2E16], dx
	mov dx, [esp+eax+30h]
	add edx, 3
	mov ax, [esp+eax+30h]
	mov word [word_4D2E2A], dx
	add eax, 4
	mov edx, 15Ah
	mov word [word_4D2E3E], ax
	mov word [word_4D2E52], dx
	mov word [word_4D2E66], dx
	add esp, 90h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_412E60 endp

sub_413100: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ebp, eax
	mov ecx, 0Ch
	mov edi, esp
	mov esi, off_4119F0
	shl edx, 2
	rep movsd
	test ebx, ebx
	jnz loc_41312B
	mov edx, [esp+edx]
	mov [eax], edx
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41312B:
	inc ebx
	push ebx
	mov ecx, [esp+edx+4]
	push ecx
	push aSD ; "%s%d"
	push dword_4E5FF0
	call sprintf_
	add esp, 10h
	mov dword [ebp+0], dword_4E5FF0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_413100 endp

sub_413160: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 30h
	mov ecx, 0Ch
	mov edi, esp
	mov esi, off_4119C0
	rep movsd
	mov edx, [esp+edx*4]
	mov [eax], edx
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret
;sub_413160 endp

sub_413180: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 30h
	mov ecx, 0Ch
	mov edi, esp
	mov esi, off_411990
	rep movsd
	mov edx, [esp+edx*4]
	mov [eax], edx
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret
;sub_413180 endp

dword_4131A0: dd 19001Eh, 100014h, 8000Ch, 4
off_4131B0: dd loc_4132F7
	dd loc_4133FB ; jump table for switch statement
	dd loc_41334A
	dd loc_41334A
	dd loc_41334A

sub_4131C4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov ecx, dword [dword_4D76BC]
	mov esi, eax
	call sub_41A020
	mov edx, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov ebx, 3DFh
	mov [esp+24h], ax
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov ebx, 20h
	movsx edx, ax
	mov eax, aDumitime ; "dumitime"
	shl edx, 2
	call sub_4844B0
	mov [esp], eax
	test eax, eax
	jz loc_41326F

loc_413211:
	mov eax, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov edx, 3E6h
	mov ebx, 20h
	mov dword [dword_4DB1DC], edx
	mov edx, [esp+22h]
	mov dword [dword_4DB1D8], eax
	sar edx, 10h
	mov eax, aDumirank_0 ; "dumirank"
	add edx, edx
	call sub_4844B0
	mov edx, eax
	test eax, eax
	jz loc_413297

loc_413244:
	mov ecx, dword [dword_4D76BC]
	xor eax, eax

loc_41324C:
	mov edi, [esp+22h]
	movsx ebx, ax
	sar edi, 10h
	cmp ebx, edi
	jge loc_4132BC
	imul ebx, 684h
	mov ebx, [esi+ebx+278h]
	mov [edx+ebx*2-2], ax
	inc eax
	jmp loc_41324C

loc_41326F:
	mov edi, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov ebp, 3E4h
	push aErrorAllocatin ; "Error allocating memory\n"
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], ebp
	call sub_4840F0
	add esp, 4
	jmp loc_413211

loc_413297:
	mov ebx, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov edi, 3EBh
	push aErrorAllocatin ; "Error allocating memory\n"
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], edi
	call sub_4840F0
	add esp, 4
	jmp loc_413244

loc_4132BC:
	mov eax, [esp+24h]

loc_4132C0:
	dec eax
	movsx ebx, ax
	add ebx, ebx
	lea ebp, [edx+ebx]
	movsx ebx, word [ebp+0]
	imul ebx, 684h
	mov ebx, [esi+ebx+21Ch]
	cmp dword [ebx], 24h
	jz loc_4132C0
	mov bl, byte [byte_512DA9]
	cmp bl, 4
	ja loc_4132F7 ; jumptable 004132F0 case 0
	and ebx, 0FFh ; switch 5 cases
	jmp off_4131B0[ebx*4] ; switch jump

loc_4132F7:
	movsx ebx, ax ; jumptable 004132F0 case 0
	movsx ebx, word [edx+ebx*2]
	imul edi, ebx, 684h
	test byte [edi+esi+1F4h], 4
	jnz loc_4134F3
	mov edi, 1
	mov ebx, edi
	mov [esp+14h], di

loc_41331E:
	mov ebp, [esp+12h]
	movsx edi, ax
	sar ebp, 10h
	movsx edi, word [edx+edi*2]
	cmp edi, ebp
	jle loc_413503

loc_413334:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 1
	jz loc_413521
	inc ebx
	jmp loc_41331E

loc_41334A:
	movsx ebx, ax ; jumptable 004132F0 cases 2-4
	movsx ebx, word [edx+ebx*2]
	imul edi, ebx, 684h
	test byte [edi+esi+1F4h], 4
	jnz loc_413391
	mov bx, word [dword_512264]
	mov [esp+20h], bx

loc_41336D:
	mov ebp, [esp+1Eh]
	movsx edi, ax
	sar ebp, 10h
	movsx edi, word [edx+edi*2]
	cmp edi, ebp
	jle loc_4133D9

loc_41337F:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 1
	jz loc_4133F0
	inc ebx
	jmp loc_41336D

loc_413391:
	mov edi, ecx
	mov word [edi+ebx*2], 0

loc_413399:
	cmp dword [dword_512208], 1
	jg loc_413563
	xor edi, edi
	xor eax, eax
	mov [esp+8], edi

loc_4133AE:
	mov edi, [esp+22h]
	movsx ebx, ax
	sar edi, 10h
	cmp ebx, edi
	jge loc_413536
	imul ebx, 684h
	mov edi, [esi+ebx+280h]
	cmp edi, 1
	jz loc_41352C
	inc eax
	jmp loc_4133AE

loc_4133D9:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 0
	jz loc_41337F

loc_4133E8:
	mov word [ebp+0], 0
	jmp loc_413399

loc_4133F0:
	inc word [esp+20h]
	inc ebx
	jmp loc_41336D

loc_4133FB:
	cmp dword [dword_512208], 0 ; jumptable 004132F0 case 1
	jz loc_41343F

loc_413404:
	xor ebx, ebx
	mov [esp+18h], bx

loc_41340B:
	movsx edi, ax
	movsx edi, word [edx+edi*2]
	mov [esp+4], edi
	mov edi, [esp+16h]
	mov ebp, [esp+4]
	sar edi, 10h
	cmp edi, ebp
	jge loc_4134C9

loc_413429:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 1
	jz loc_4134E8
	inc ebx
	jmp loc_41340B

loc_41343F:
	mov di, [ecx]
	mov ebx, ecx
	test di, di
	jnz loc_413404
	mov di, [ebp+0]
	cmp di, 1
	jnz loc_41346A
	mov ebx, 2

loc_413458:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 0
	jnz loc_4133E8
	inc ebx
	jmp loc_413458

loc_41346A:
	test di, di
	jz loc_41349E
	mov ebx, 1
	mov [esp+1Ch], bx

loc_413479:
	movsx edi, ax
	mov ebp, [esp+1Ah]
	movsx edi, word [edx+edi*2]
	sar ebp, 10h
	inc edi
	cmp edi, ebp
	jle loc_4134A7

loc_41348C:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 1
	jz loc_4134C1
	inc ebx
	jmp loc_413479

loc_41349E:
	mov [ecx+2], di
	jmp loc_413399

loc_4134A7:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 0
	jz loc_41348C
	mov word [ebp+0], 0
	jmp loc_413399

loc_4134C1:
	inc word [esp+1Ch]
	inc ebx
	jmp loc_413479

loc_4134C9:
	movsx ebp, bx
	add ebp, ebp
	add ebp, ecx
	mov di, [ebp+0]
	test di, di
	jz loc_413429
	mov word [ebp+0], 0
	jmp loc_413399

loc_4134E8:
	inc word [esp+18h]
	inc ebx
	jmp loc_41340B

loc_4134F3:
	lea edi, [ebx+ebx]
	mov ebx, ecx
	mov word [edi+ebx], 0
	jmp loc_413399

loc_413503:
	movsx edi, bx
	add edi, edi
	lea ebp, [ecx+edi]
	cmp word [ebp+0], 0
	jz loc_413334
	mov word [ebp+0], 0
	jmp loc_413399

loc_413521:
	inc word [esp+14h]
	inc ebx
	jmp loc_41331E

loc_41352C:
	mov [esp+8], edi
	inc eax
	jmp loc_4133AE

loc_413536:
	cmp dword [esp+8], 0
	jz loc_4135F2
	xor eax, eax

loc_413543:
	mov esi, [esp+22h]
	movsx ebx, ax
	sar esi, 10h
	cmp ebx, esi
	jge loc_4135F2
	lea esi, [ebx+ebx]
	mov ebx, ecx
	inc eax
	mov word [esi+ebx], 0
	jmp loc_413543

loc_413563:
	xor ebx, ebx
	mov [esp+10h], bx

loc_41356A:
	mov ebx, [esp+0Eh]
	mov ebp, dword [dword_512264]
	sar ebx, 10h
	cmp ebx, ebp
	jge loc_4135F2
	imul edi, ebx, 684h
	cmp dword [edi+esi+280h], 1
	jz loc_413596

loc_41358F:
	inc word [esp+10h]
	jmp loc_41356A

loc_413596:
	lea ebp, [ebx+ebx]
	add ebp, ecx
	mov edi, ecx
	mov ebx, dword [dword_512208]
	mov word [ebp+0], 0
	cmp ebx, 2
	jl loc_41358F
	movsx ebx, ax
	movsx ebx, word [edx+ebx*2]
	mov [esp+0Ch], ebx
	imul ebx, 684h
	add ebx, esi
	cmp dword [ebx+280h], 1
	jz loc_41358F
	test byte [ebx+1F4h], 4
	jz loc_41358F
	mov ebx, [ebx+21Ch]
	cmp dword [ebx], 24h
	jz loc_41358F
	mov ebx, [esp+0Ch]
	mov word [edi+ebx*2], 1
	inc word [esp+10h]
	jmp loc_41356A

loc_4135F2:
	mov dword [dword_4D76BC], ecx
	test edx, edx
	jz loc_413603
	mov eax, edx
	call sub_4848FC

loc_413603:
	mov eax, [esp]
	test eax, eax
	jnz loc_41361F

loc_41360A:
	mov eax, 1
	mov ecx, dword [dword_4D76BC]
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41361F:
	call sub_4848FC
	jmp loc_41360A
;sub_4131C4 endp

off_413630: dd loc_4137F5
	dd loc_413887 ; jump table for switch statement
	dd loc_4138BA
	dd loc_413898
	dd loc_4138A9
	dd loc_4138CB
	dd loc_4138DC
	dd loc_4138ED

sub_413650: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov ebp, eax
	lea edi, [esp+30h]
	mov esi, dword_4131A0
	xor edx, edx
	movsd
	movsd
	movsd
	movsd
	call sub_41A020
	mov ecx, eax

loc_413671:
	movsx esi, cx
	movsx eax, dx
	cmp eax, esi
	jge loc_4136F4
	imul ebx, eax, 684h
	add ebx, ebp
	shl eax, 2
	mov esi, [ebx+234h]
	mov [esp+eax], esi
	test byte [ebx+1F4h], 4
	jnz loc_4136A7

loc_41369C:
	movsx eax, dx
	mov [esp+eax*2+20h], dx
	inc edx
	jmp loc_413671

loc_4136A7:
	cmp dword [ebx+280h], 2
	jz loc_41369C
	mov edi, [esp+eax]
	test edi, edi
	jl loc_4136CB
	lea ebx, [edi+1C200h]
	mov [esp+eax], ebx
	movsx eax, dx
	mov [esp+eax*2+20h], dx
	inc edx
	jmp loc_413671

loc_4136CB:
	jle loc_4136EE
	mov ebx, edi

loc_4136CF:
	movsx eax, dx
	imul esi, eax, 0E4Ch
	add ebx, 1C200h
	add ebx, esi
	mov [esp+eax*4], ebx
	movsx eax, dx
	mov [esp+eax*2+20h], dx
	inc edx
	jmp loc_413671

loc_4136EE:
	mov ebx, edi
	neg ebx
	jmp loc_4136CF

loc_4136F4:
	lea ebx, [esp+20h]
	mov edx, esp
	mov eax, esi
	call sub_41B2D0
	xor edx, edx

loc_413703:
	movsx esi, cx
	movsx eax, dx
	cmp eax, esi
	jl loc_41375A
	lea ebx, [esp+20h]
	mov edx, esp
	mov eax, esi
	call sub_41B2D0
	xor edx, edx

loc_41371C:
	movsx ebx, cx
	movsx eax, dx
	cmp eax, ebx
	jge loc_4137DF
	add eax, eax
	mov esi, [esp+eax+1Eh]
	sar esi, 10h
	imul ebx, esi, 684h
	add ebx, ebp
	add esi, esi
	test byte [ebx+1F4h], 4
	jz loc_4137C6
	cmp dword [ebx+280h], 2
	jz loc_4137C6
	inc edx
	jmp loc_41371C

loc_41375A:
	imul ebx, eax, 684h
	add ebx, ebp
	test byte [ebx+1F4h], 4
	jnz loc_41376E

loc_41376B:
	inc edx
	jmp loc_413703

loc_41376E:
	cmp dword [ebx+280h], 2
	jz loc_41376B
	shl eax, 2
	mov ebx, [esp+eax]
	test ebx, ebx
	jl loc_413799
	mov ebx, [esp+esi*2+1Ch]
	sar ebx, 10h
	mov esi, [esp+eax]
	mov ebx, [esp+ebx*4]
	add esi, ebx
	mov [esp+eax], esi
	inc edx
	jmp loc_413703

loc_413799:
	jle loc_4137C0
	mov eax, ebx

loc_41379D:
	movsx ebx, cx
	mov ebx, [esp+ebx*2+1Ch]
	sar ebx, 10h
	mov esi, [esp+ebx*4]
	add esi, eax
	movsx eax, dx
	imul ebx, eax, 0E4Ch
	add ebx, esi
	mov [esp+eax*4], ebx
	inc edx
	jmp loc_413703

loc_4137C0:
	mov eax, ebx
	neg eax
	jmp loc_41379D

loc_4137C6:
	mov ebx, dword [dword_4D76B8]
	mov ax, [esp+eax+30h]
	add [esi+ebx+2B0h], ax
	inc edx
	jmp loc_41371C

loc_4137DF:
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 7 ; switch 8 cases
	ja loc_4137F5 ; jumptable 004137EE default case
	jmp off_413630[eax*4] ; switch jump

loc_4137F5:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE default case
	or byte [eax+2C4h], 1

loc_413801:
	mov eax, dword [dword_4D76B8]
	mov edx, [eax+2C4h]
	mov ebx, [eax+2C4h]
	shl edx, 1Eh
	and ebx, 1
	shr edx, 1Fh
	add ebx, edx
	mov edx, [eax+2C4h]
	shl edx, 1Dh
	shr edx, 1Fh
	add edx, ebx
	mov ebx, [eax+2C4h]
	shl ebx, 1Ch
	shr ebx, 1Fh
	add ebx, edx
	mov edx, [eax+2C4h]
	shl edx, 1Bh
	shr edx, 1Fh
	add edx, ebx
	mov ebx, [eax+2C4h]
	shl ebx, 1Ah
	shr ebx, 1Fh
	add ebx, edx
	mov edx, [eax+2C4h]
	shl edx, 19h
	shr edx, 1Fh
	add edx, ebx
	mov ebx, [eax+2C4h]
	shl ebx, 18h
	shr ebx, 1Fh
	add edx, ebx
	mov [eax+2C0h], dx
	mov eax, 1
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_413887:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 1
	or byte [eax+2C4h], 2
	jmp loc_413801

loc_413898:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 3
	or byte [eax+2C4h], 4
	jmp loc_413801

loc_4138A9:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 4
	or byte [eax+2C4h], 8
	jmp loc_413801

loc_4138BA:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 2
	or byte [eax+2C4h], 10h
	jmp loc_413801

loc_4138CB:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 5
	or byte [eax+2C4h], 20h
	jmp loc_413801

loc_4138DC:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 6
	or byte [eax+2C4h], 40h
	jmp loc_413801

loc_4138ED:
	mov eax, dword [dword_4D76B8] ; jumptable 004137EE case 7
	or byte [eax+2C4h], 80h
	jmp loc_413801
;sub_413650 endp

off_413900: dd loc_413934
	dd loc_413AC5 ; jump table for switch statement
	dd loc_4139FD
	dd loc_4139FD
	dd loc_4139FD

sub_413914: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov ebp, eax
	mov [esp+54h], dx
	mov eax, dword [dword_512208]
	cmp eax, 4 ; switch 5 cases
	ja loc_413934 ; jumptable 0041392D default case
	jmp off_413900[eax*4] ; switch jump

loc_413934:
	mov esi, dword_512F4C ; jumptable 0041392D default case
	mov edi, ebp
	push edi

loc_41393C:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_413954
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41393C

loc_413954:
	pop edi
	mov eax, 2E7h
	call sub_41B710
	push eax
	push 1
	mov eax, 2A1h
	call sub_41B710
	push eax
	push aSDS ; "%s %d: %s"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 14h
	xor eax, eax
	mov ecx, 1
	mov al, [esp+54h]
	mov ebx, 8
	push eax
	lea edx, [esp+4]
	mov eax, ebp
	call sub_401F40
	mov edx, [esp+52h]
	sar edx, 10h
	lea eax, 0[edx*8]
	mov edi, byte_512E84
	add eax, edx
	mov esi, ebp
	add edi, eax
	push edi

loc_4139B5:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4139CD
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4139B5

loc_4139CD:
	pop edi

loc_4139CE:
	mov edi, dword_512F4C

loc_4139D3:
	mov esi, ebp
	push edi

loc_4139D6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4139EE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4139D6

loc_4139EE:
	pop edi

loc_4139EF:
	mov eax, 1
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4139FD:
	mov edx, [esp+52h] ; jumptable 0041392D cases 2-4
	mov ecx, dword [dword_51220C]
	sar edx, 10h
	cmp edx, ecx
	jnz loc_4139EF
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, byte_512E84
	add ecx, eax
	mov edi, ebp
	mov esi, ecx
	push edi

loc_413A23:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_413A3B
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_413A23

loc_413A3B:
	pop edi
	mov eax, 2E7h
	call sub_41B710
	push eax
	inc edx
	push edx
	mov eax, 2A1h
	call sub_41B710
	push eax
	push aSDS ; "%s %d: %s"
	lea eax, [esp+10h]
	mov ebx, 8
	push eax
	mov [esp+64h], ecx
	mov ecx, 1
	call sprintf_
	add esp, 14h
	xor eax, eax
	mov esi, ebp
	mov al, [esp+54h]
	mov edx, esp
	push eax
	mov eax, ebp
	mov edi, [esp+54h]
	call sub_401F40
	mov edx, [esp+54h]
	push edi

loc_413A8F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_413AA7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_413A8F

loc_413AA7:
	pop edi
	test dx, dx
	jz loc_4139CE
	cmp dx, 1
	jnz loc_4139EF
	mov edi, byte_512F55
	jmp loc_4139D3

loc_413AC5:
	mov ecx, [esp+52h] ; jumptable 0041392D case 1
	sar ecx, 10h
	lea eax, 0[ecx*8]
	mov esi, byte_512E84
	add eax, ecx
	mov edi, ebp
	add esi, eax
	push edi

loc_413ADF:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_413AF7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_413ADF

loc_413AF7:
	pop edi
	mov ebx, dword [dword_5121F8]
	cmp ebx, 2
	jnz loc_413BD1
	test dx, dx
	jnz loc_413BD1
	cmp ebx, dword [dword_512264]
	jle loc_413BD1
	mov eax, dword [dword_4D76BC]
	cmp word [eax], 0
	jnz loc_413BD1
	cmp word [eax+2], 1
	jnz loc_413BD1
	mov eax, 2E7h
	call sub_41B710
	push eax
	add ecx, ebx
	push ecx

loc_413B44:
	mov eax, 2A1h
	call sub_41B710
	push eax
	push aSDS ; "%s %d: %s"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 14h
	xor eax, eax
	mov ecx, 1
	mov al, [esp+54h]
	mov ebx, 8
	push eax
	lea edx, [esp+4]
	mov eax, ebp
	call sub_401F40
	mov edx, [esp+52h]
	sar edx, 10h
	lea eax, 0[edx*8]
	mov edi, byte_512E84
	add eax, edx
	mov esi, ebp
	add edi, eax
	mov ebx, [esp+54h]
	push edi

loc_413B9B:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_413BB3
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_413B9B

loc_413BB3:
	pop edi
	test bx, bx
	jz loc_4139CE
	cmp bx, 1
	jnz loc_4139EF
	mov edi, byte_512F55
	jmp loc_4139D3

loc_413BD1:
	mov eax, 2E7h
	call sub_41B710
	push eax
	mov eax, [esp+56h]
	sar eax, 10h
	inc eax
	push eax
	jmp loc_413B44
;sub_413914 endp

sub_413BF0: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 18Ch
	mov [esp+15Ch], eax
	mov [esp+178h], dx
	mov [esp+16Ch], ebx
	xor edx, edx
	mov ebp, 14h
	mov [esp+184h], edx
	xor edx, edx
	mov ecx, dword [dword_4E5508]
	mov [esp+158h], edx
	cmp ecx, 1
	jnz loc_413C40

loc_413C30:
	mov eax, [esp+184h]
	add esp, 18Ch
	pop ebp
	pop ecx
	ret

loc_413C40:
	call sub_41A240
	cmp ax, 1
	jnz loc_413C30
	cmp byte [byte_512DAA], 3
	jz loc_413C30
	cmp byte [byte_512DD0], 1
	jz loc_413C30
	cmp byte [byte_512DEB], 1
	jz loc_413C30
	push edi
	push esi
	mov ebx, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov esi, 1CDh
	mov edx, 280h
	mov eax, aToprcrds ; "toprcrds"
	mov edi, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov ecx, 1CFh
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	mov ebx, 20h
	mov esi, [esp+17Eh]
	call sub_484498
	mov ebx, 20h
	mov [esp+160h], eax
	sar esi, 10h
	mov eax, 1CEh
	lea edx, 0[esi*4]
	mov dword [dword_4DB1DC], eax
	mov eax, aCarttime ; "carttime"
	mov dword [dword_4DB1D8], edi
	call sub_484498
	mov ebx, 20h
	mov [esp+170h], eax
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], ecx
	lea edx, [esi+esi]
	mov eax, aCarttrnk ; "carttrnk"
	mov esi, 1D0h
	mov ecx, [esp+164h]
	call sub_484498
	mov ebx, 20h
	mov edx, 0C8h
	mov [esp+16Ch], eax
	mov dword [dword_4DB1D8], edi
	mov eax, aRecords ; "records"
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov [esp+168h], eax
	xor eax, eax

loc_413D34:
	mov ebx, [esp+17Eh]
	movsx edx, ax
	sar ebx, 10h
	cmp edx, ebx
	jge loc_413D65
	imul edx, 684h
	add edx, ecx
	mov edx, [edx+278h]
	mov ebx, [esp+16Ch]
	add edx, edx
	add edx, ebx
	mov [edx-2], ax
	inc eax
	jmp loc_413D34

loc_413D65:
	mov eax, dword [dword_51221C]
	mov edx, [esp+160h]
	call sub_41A3A0
	cwde
	call sub_41B040
	mov edi, dword [dword_5121FC]
	cmp edi, 2
	jnz loc_413E14
	mov word [esp+184h], 1

loc_413D95:
	mov eax, ebp
	shl eax, 5
	sub eax, ebp
	mov [esp+17Ch], eax
	lea eax, 0[ebp*4]
	add eax, ebp
	xor edi, edi
	add eax, eax
	mov [esp+190h], di
	mov [esp+178h], eax

loc_413DBF:
	mov edx, [esp+17Eh]
	mov eax, [esp+18Eh]
	sar edx, 10h
	sar eax, 10h
	cmp eax, edx
	jge loc_414305
	mov edx, [esp+16Ch]
	movsx edx, word [edx+eax*2]
	imul eax, edx, 684h
	mov ecx, [esp+164h]
	xor ebx, ebx
	add eax, ecx
	mov bl, byte [byte_512DBD]
	mov esi, [eax+21Ch]
	add ebx, 0Ch
	cmp ebx, [esi]
	jg loc_413E37

loc_413E0A:
	inc word [esp+190h]
	jmp loc_413DBF

loc_413E14:
	cmp edi, 4
	jnz loc_413E28
	mov word [esp+184h], 0Bh
	jmp loc_413D95

loc_413E28:
	mov word [esp+184h], 15h
	jmp loc_413D95

loc_413E37:
	cmp dword [dword_512208], 2
	jge loc_41416D
	test byte [eax+1F4h], 4
	jz loc_413E0A
	cmp dword [eax+280h], 2
	jnz loc_413E0A

loc_413E56:
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov edx, [esp+16Ch]
	add eax, eax
	add eax, edx
	movsx eax, word [eax]
	imul eax, 684h
	add eax, [esp+164h]
	mov edx, [eax+234h]
	mov eax, [esp+182h]
	sar eax, 10h
	add eax, 9
	imul eax, 14h
	add eax, [esp+160h]
	mov esi, [eax+0Ch]
	cmp edx, esi
	jg loc_4141A0

loc_413EA3:
	mov dword [esp+18Ch], 1
	mov edx, [esp+18Eh]
	sar edx, 10h
	mov eax, [esp+16Ch]
	add edx, edx
	add edx, eax
	movsx eax, word [edx]
	imul eax, 684h
	mov ecx, [esp+164h]
	add eax, ecx
	mov eax, [eax+234h]
	mov [esp+14Ch], eax
	movsx eax, word [edx]
	imul eax, 684h
	add eax, ecx
	mov eax, [eax+21Ch]
	mov ax, [eax]
	mov esi, dword [dword_512230]
	mov [esp+14Ah], ax
	cmp esi, 1
	jnz loc_4141BD
	mov word [esp+150h], 1

loc_413F17:
	mov edi, [esp+182h]
	sar edi, 10h
	add edi, 9
	imul edi, 14h
	mov eax, [esp+160h]
	mov ecx, 14h
	lea esi, [esp+140h]
	add edi, eax
	mov ebx, [esp+184h]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi

loc_413F53:
	mov edx, [esp+182h]
	sar edx, 10h
	movsx eax, bx
	lea esi, [edx+9]
	cmp eax, esi
	jle loc_4141E4
	lea ebx, [esp+12Ch]
	lea edx, [esp+104h]
	mov eax, 0Ah
	call sub_41B2D0
	xor eax, eax

loc_413F85:
	movsx edx, ax
	cmp word [esp+edx*2+12Ch], 9
	jnz loc_413F9E
	mov edx, eax
	inc edx
	mov [esp+188h], dx

loc_413F9E:
	inc eax
	cmp ax, 0Ah
	jl loc_413F85
	mov ebx, [esp+16Ch]
	xor eax, eax

loc_413FAE:
	mov edx, [esp+18Eh]
	sar edx, 10h
	movsx esi, ax
	add edx, edx
	mov esi, [esp+esi*2+12Ah]
	add edx, ebx
	sar esi, 10h
	movsx edx, word [edx]
	cmp esi, edx
	jnz loc_414221
	mov esi, [esp+174h]
	shl edx, 2
	mov eax, [esp+186h]
	add edx, esi
	sar eax, 10h
	mov [edx], eax

loc_413FEC:
	cmp word [esp+188h], 1
	jnz loc_41427E
	mov edi, dword [dword_512208]
	cmp edi, 1
	jnz loc_414245
	cmp edi, dword [dword_512264]
	jge loc_414245
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov esi, [esp+16Ch]
	add eax, eax
	add eax, esi
	mov cx, [eax]
	test cx, cx
	jnz loc_414231
	mov eax, aC04 ; "c04"

loc_41403C:
	call sub_403480

loc_414041:
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov edi, [esp+16Ch]
	add eax, eax
	add eax, edi
	movsx edx, word [eax]
	lea eax, [esp+154h]
	lea esi, [esp+154h]
	call sub_413914
	mov edx, [esp+182h]
	lea edi, [esp+140h]
	sar edx, 10h
	push edi

loc_41407E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_414096
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41407E

loc_414096:
	pop edi
	lea eax, [edx+9]
	imul eax, 14h
	imul edx, 14h
	mov ecx, 14h
	mov edi, [esp+160h]
	lea esi, [esp+140h]
	add edi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov esi, [esp+160h]
	mov ecx, [esp+178h]
	mov edi, [esp+168h]
	add esi, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor edx, edx

loc_4140EE:
	mov edi, [esp+182h]
	movsx eax, dx
	sar edi, 10h
	mov esi, [esp+eax*2+12Ah]
	add eax, edi
	imul eax, 14h
	sar esi, 10h
	imul esi, ebp
	mov ecx, [esp+168h]
	mov edi, [esp+160h]
	add esi, ecx
	add edi, eax
	mov ecx, ebp
	inc edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	cmp dx, 0Ah
	jl loc_4140EE
	mov eax, [esp+17Ch]
	mov ebx, dword [dword_512208]
	cmp ebx, 1
	jnz loc_413E0A
	xor eax, eax
	mov dword [dword_4D1FFC], ebx
	call sub_403550
	inc word [esp+190h]
	jmp loc_413DBF

loc_41416D:
	cmp edx, dword [dword_51220C]
	jnz loc_413E0A
	test byte [eax+1F4h], 4
	jz loc_413E0A
	cmp dword [eax+280h], 2
	jz loc_413E56
	inc word [esp+190h]
	jmp loc_413DBF

loc_4141A0:
	test esi, esi
	jnz loc_413E0A
	test edx, edx
	jg loc_413EA3
	inc word [esp+190h]
	jmp loc_413DBF

loc_4141BD:
	cmp dword [dword_512204], 1
	jnz loc_4141D5
	mov word [esp+150h], 2
	jmp loc_413F17

loc_4141D5:
	xor ebx, ebx
	mov [esp+150h], bx
	jmp loc_413F17

loc_4141E4:
	imul esi, eax, 14h
	add esi, [esp+160h]
	mov edi, eax
	sub edi, edx
	lea edx, 0[edi*4]
	mov esi, [esi+0Ch]
	mov [esp+edx+104h], esi
	test esi, esi
	jz loc_41420D
	inc ebx
	jmp loc_413F53

loc_41420D:
	inc eax
	imul eax, 23280h
	mov [esp+edx+104h], eax
	inc ebx
	jmp loc_413F53

loc_414221:
	inc eax
	cmp ax, 0Ah
	jl loc_413FAE
	jmp loc_413FEC

loc_414231:
	cmp cx, 1
	jnz loc_414041
	mov eax, aC05 ; "c05"
	jmp loc_41403C

loc_414245:
	cmp dword [dword_512208], 2
	jl loc_414274
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov ecx, [esp+16Ch]
	add eax, eax
	add eax, ecx
	mov ebx, dword [dword_51220C]
	movsx eax, word [eax]
	cmp eax, ebx
	jnz loc_414041

loc_414274:
	mov eax, aC03 ; "c03"
	jmp loc_41403C

loc_41427E:
	mov edi, dword [dword_512208]
	cmp edi, 1
	jnz loc_4142CC
	cmp edi, dword [dword_512264]
	jge loc_4142CC
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov esi, [esp+16Ch]
	add eax, eax
	add eax, esi
	mov dx, [eax]
	test dx, dx
	jnz loc_4142B8
	mov eax, aC07 ; "c07"
	jmp loc_41403C

loc_4142B8:
	cmp dx, 1
	jnz loc_414041
	mov eax, aC08 ; "c08"
	jmp loc_41403C

loc_4142CC:
	cmp dword [dword_512208], 2
	jl loc_4142FB
	mov eax, [esp+18Eh]
	sar eax, 10h
	mov ecx, [esp+16Ch]
	add eax, eax
	add eax, ecx
	mov ebx, dword [dword_51220C]
	movsx eax, word [eax]
	cmp eax, ebx
	jnz loc_414041

loc_4142FB:
	mov eax, aC06 ; "c06"
	jmp loc_41403C

loc_414305:
	cmp word [esp+18Ch], 1
	jnz loc_4143A6
	mov esi, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov edi, 2CAh
	mov edx, 26Ch
	mov eax, aRecord ; "record"
	mov ecx, 26Ch
	xor ebx, ebx
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_484498
	lea esi, [esp+160h]
	mov edi, eax
	mov ebp, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, dword [dword_51221C]
	lea edx, [esp+8]
	call sub_41A3A0
	cwde
	call sub_41B250
	xor eax, eax

loc_414371:
	inc eax
	cmp ax, 1Fh
	jl loc_414371
	mov ebx, 26Ch
	mov edx, [esp+160h]
	lea eax, [esp+8]
	call sub_4875B0
	test eax, eax
	jnz loc_41439B
	mov eax, 2F3h
	call sub_402CD0

loc_41439B:
	test ebp, ebp
	jz loc_4143A6
	mov eax, ebp
	call sub_4848FC

loc_4143A6:
	mov edx, [esp+168h]
	test edx, edx
	jz loc_4143B8
	mov eax, edx
	call sub_4848FC

loc_4143B8:
	mov ecx, [esp+16Ch]
	test ecx, ecx
	jz loc_4143CA
	mov eax, ecx
	call sub_4848FC

loc_4143CA:
	mov ebx, [esp+170h]
	test ebx, ebx
	jz loc_4143DC
	mov eax, ebx
	call sub_4848FC

loc_4143DC:
	mov esi, [esp+160h]
	test esi, esi
	jz loc_4143EE
	mov eax, esi
	call sub_4848FC

loc_4143EE:
	mov eax, [esp+18Ch]
	pop esi
	pop edi
	add esp, 18Ch
	pop ebp
	pop ecx
	ret
;sub_413BF0 endp

sub_414400: ;SUBROUTINE
	push ebp
	sub esp, 148h
	mov [esp+138h], eax
	mov [esp+13Ch], bx
	mov [esp+144h], cx
	mov eax, [esp+13Ah]
	sar eax, 10h
	imul eax, 684h
	xor edx, edx
	mov [esp+140h], edx
	mov dword [esp+134h], 14h
	mov edx, [esp+138h]
	add edx, eax
	xor eax, eax
	mov [esp+130h], edx
	mov al, byte [byte_512DBD]
	mov edx, [edx+21Ch]
	add eax, 0Ch
	cmp eax, [edx]
	jle loc_414481
	cmp byte [byte_512DAA], 3
	jz loc_414481
	cmp byte [byte_512DD0], 1
	jz loc_414481
	cmp byte [byte_512DEB], 1
	jnz loc_41448B

loc_414481:
	xor eax, eax
	add esp, 148h
	pop ebp
	ret

loc_41448B:
	push edi
	push esi
	mov ebx, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov esi, 125h
	mov edx, 280h
	mov eax, aTrkrcrds ; "trkrcrds"
	mov dword [dword_4DB1D8], ebx
	mov ebx, 20h
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov esi, eax
	mov ebp, eax
	mov eax, dword [dword_51221C]
	mov ecx, 14h
	call sub_41A3A0
	mov edx, esi
	cwde
	lea edi, [esp+104h]
	call sub_41B040
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+138h]
	mov eax, [eax+21Ch]
	mov ax, [eax]
	mov [esp+122h], ax
	mov eax, [esp+14Ah]
	sar eax, 10h
	mov edi, [esp+138h]
	shl eax, 2
	add eax, edi
	mov eax, [eax+238h]
	mov [esp+124h], eax
	cmp dword [dword_512230], 1
	jnz loc_4145CE
	mov word [esp+128h], 1

loc_41453B:
	mov ecx, dword [dword_512208]
	cmp ecx, 1
	jnz loc_414609
	cmp ecx, dword [dword_512264]
	jge loc_414609
	mov edi, [esp+144h]
	test di, di
	jnz loc_4145F5
	mov eax, aC10 ; "c10"

loc_41456B:
	call sub_403480

loc_414570:
	mov eax, dword [dword_5121FC]
	cmp eax, 2
	jnz loc_414634
	mov esi, 1

loc_414583:
	mov edx, esi

loc_414585:
	movsx ecx, si
	movsx eax, dx
	add ecx, 9
	cmp eax, ecx
	jge loc_41465E
	mov ecx, [esp+142h]
	sar ecx, 10h
	imul ecx, 684h
	mov ebx, [esp+140h]
	add ebx, ecx
	mov ecx, eax
	shl eax, 2
	add eax, ecx
	shl eax, 2
	lea ecx, [eax+ebp]
	mov eax, [ebx+234h]
	cmp eax, [ecx+0Ch]
	jz loc_41464D
	inc edx
	jmp loc_414585

loc_4145CE:
	cmp dword [dword_512204], 1
	jnz loc_4145E6
	mov word [esp+128h], 2
	jmp loc_41453B

loc_4145E6:
	xor ebx, ebx
	mov [esp+128h], bx
	jmp loc_41453B

loc_4145F5:
	cmp di, 1
	jnz loc_414570
	mov eax, aC11 ; "c11"
	jmp loc_41456B

loc_414609:
	cmp dword [dword_512208], 2
	jl loc_41462A
	mov eax, [esp+142h]
	mov edi, dword [dword_51220C]
	sar eax, 10h
	cmp eax, edi
	jnz loc_414570

loc_41462A:
	mov eax, aC09 ; "c09"
	jmp loc_41456B

loc_414634:
	cmp eax, 4
	jnz loc_414643
	mov esi, 0Bh
	jmp loc_414583

loc_414643:
	mov esi, 15h
	jmp loc_414583

loc_41464D:
	mov dword [esp+148h], 1
	inc edx
	jmp loc_414585

loc_41465E:
	cmp word [esp+148h], 0
	jnz loc_414700
	mov edx, [esp+142h]
	lea eax, [esp+12Ch]
	lea esi, [esp+12Ch]
	sar edx, 10h
	lea edi, [esp+118h]
	call sub_413914

loc_414691:
	push edi

loc_414692:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4146AA
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_414692

loc_4146AA:
	pop edi
	mov ecx, [esp+13Ch]
	lea esi, [esp+118h]
	mov edi, ebp
	mov edx, [esp+13Ch]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 1
	jmp loc_414726

loc_4146E9:
	test ebp, ebp
	jz loc_4146F4
	mov eax, ebp
	call sub_4848FC

loc_4146F4:
	mov eax, ecx
	pop esi
	pop edi
	add esp, 148h
	pop ebp
	ret

loc_414700:
	mov edx, [esp+142h]
	sar edx, 10h
	lea eax, 0[edx*8]
	mov esi, byte_512E84
	add eax, edx
	lea edi, [esp+118h]
	add esi, eax
	jmp loc_414691

loc_414726:
	mov eax, dword [dword_51221C]
	lea edx, [esp+8]
	call sub_41A3A0
	cwde
	mov ebx, 26Ch
	call sub_41B250
	lea eax, [esp+8]
	mov edx, ebp
	call sub_4875B0
	test eax, eax
	jnz loc_4146E9
	mov eax, 2F3h
	call sub_402CD0
	jmp loc_4146E9
;sub_414400 endp

sub_414760: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8Ch
	mov esi, eax
	mov edi, edx
	mov [esp+74h], ebx
	mov [esp+70h], ecx
	xor edx, edx
	mov [esp+84h], edx
	mov edx, dword [dword_4E5508]
	mov ecx, 14h
	cmp edx, 1
	jz loc_4147A9
	cmp byte [byte_512DAA], 3
	jz loc_4147A9
	cmp byte [byte_512DD0], 1
	jz loc_4147A9
	cmp byte [byte_512DEB], 1
	jnz loc_4147BA

loc_4147A9:
	mov eax, [esp+84h]
	add esp, 8Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4147BA:
	mov eax, esi
	call sub_41A240
	mov ebx, dword [dword_512208]
	cmp ebx, 2
	jl loc_41482F
	imul edx, dword [dword_51220C], 684h
	cmp dword [edx+esi+280h], 2
	jz loc_4147E2
	xor eax, eax

loc_4147E2:
	imul edx, dword [dword_51220C], 684h
	mov ebx, [edx+esi+21Ch]
	xor edx, edx
	mov dl, byte [byte_512DBD]
	mov ebp, [ebx]
	add edx, 0Ch
	cmp edx, ebp
	jg loc_414806
	xor eax, eax

loc_414806:
	imul edx, dword [dword_51220C], 684h
	test byte [edx+esi+1F4h], 4
	jnz loc_4148A2
	mov eax, [esp+84h]
	add esp, 8Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41482F:
	cmp ebx, 1
	jnz loc_41485F
	cmp ebx, dword [dword_512264]
	jge loc_41485F
	cmp dword [esi+280h], 2
	jz loc_4148A2
	cmp dword [esi+904h], 2
	jz loc_4148A2
	mov eax, [esp+84h]
	add esp, 8Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41485F:
	mov ebx, dword [dword_512208]
	cmp ebx, 1
	jnz loc_41488C
	cmp ebx, dword [dword_512264]
	jnz loc_41488C
	cmp dword [esi+280h], 2
	jz loc_4148A2
	mov eax, [esp+84h]
	add esp, 8Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41488C:
	cmp dword [dword_512264], 1
	jnz loc_4148A2
	cmp dword [esi+280h], 2
	jnz loc_4147A9

loc_4148A2:
	cmp ax, 1
	jnz loc_4147A9
	mov ebp, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov eax, 96h
	mov ebx, 20h
	mov edx, dword [dword_5121FC]
	movsx edi, di
	shl edx, 2
	mov dword [dword_4DB1DC], eax
	mov eax, aBestlaps ; "bestlaps"
	mov dword [dword_4DB1D8], ebp
	call sub_484498
	mov ebx, 20h
	mov edx, dword [dword_5121FC]
	mov [esp+80h], eax
	mov dword [dword_4DB1D8], ebp
	mov ebp, 98h
	mov eax, aRankspd ; "rankspd"
	add edx, edx
	mov dword [dword_4DB1DC], ebp
	call sub_484498
	mov edx, 99h
	mov ebx, 20h
	mov [esp+6Ch], eax
	mov eax, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov dword [dword_4DB1DC], edx
	mov dword [dword_4DB1D8], eax
	lea edx, 0[edi*4]
	mov eax, aRanklap ; "ranklap"
	mov ebp, 9Ah
	call sub_484498
	mov ebx, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov [esp+78h], eax
	lea edx, [edi+edi]
	mov eax, aRankbst ; "rankbst"
	mov dword [dword_4DB1D8], ebx
	mov ebx, 20h
	mov dword [dword_4DB1DC], ebp
	call sub_484498
	mov edx, 9Bh
	mov ebx, 20h
	mov [esp+7Ch], eax
	mov eax, aCNfs2seFront_4 ; "c:\\nfs2se\\frontend\\common\\Statchk.c"
	mov dword [dword_4DB1DC], edx
	mov dword [dword_4DB1D8], eax
	mov edx, ecx
	mov eax, aTrkrcrds ; "trkrcrds"
	shl edx, 5
	call sub_484498
	mov ebx, dword [dword_512208]
	mov ebp, eax
	cmp ebx, 1
	jz loc_414A9C
	mov ax, word [dword_51220C]
	mov [esp+88h], ax
	mov ebx, esp
	mov edx, [esp+86h]
	mov eax, esi
	sar edx, 10h

loc_4149C0:
	call sub_41A040

loc_4149C5:
	mov ebx, eax

loc_4149C7:
	mov eax, [esp+86h]
	sar eax, 10h
	imul eax, 684h
	add esi, eax
	movsx eax, bx
	mov eax, [esi+eax*4+238h]
	lea edi, [esp+50h]
	mov [esp+68h], eax
	mov eax, dword [dword_51221C]
	mov edx, ebp
	call sub_41A3A0
	cwde
	mov esi, ebp
	call sub_41B040
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+68h]
	mov edx, [esp+5Ch]
	cmp eax, edx
	jg loc_414B88

loc_414A1F:
	mov dword [esp+84h], 1

loc_414A2A:
	mov edx, [esp+74h]
	mov eax, [esp+88h]
	mov [edx], ax
	mov eax, [esp+70h]
	mov [eax], bx
	test ebp, ebp
	jz loc_414A4A
	mov eax, ebp
	call sub_4848FC

loc_414A4A:
	mov edi, [esp+7Ch]
	test edi, edi
	jz loc_414A59
	mov eax, edi
	call sub_4848FC

loc_414A59:
	mov ebp, [esp+78h]
	test ebp, ebp
	jz loc_414A68
	mov eax, ebp
	call sub_4848FC

loc_414A68:
	mov eax, [esp+6Ch]
	test eax, eax
	jz loc_414A75
	call sub_4848FC

loc_414A75:
	mov edx, [esp+80h]
	test edx, edx
	jz loc_4147A9
	mov eax, edx
	call sub_4848FC
	mov eax, [esp+84h]
	add esp, 8Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_414A9C:
	cmp ebx, ebx
	jnz loc_414AAC
	cmp ebx, dword [dword_512264]
	jz loc_414B2D

loc_414AAC:
	mov edx, [esi+280h]
	cmp edx, 2
	jnz loc_414AC3
	cmp edx, [esi+904h]
	jnz loc_414B49

loc_414AC3:
	cmp dword [esi+280h], 2
	jz loc_414AD9
	cmp dword [esi+904h], 2
	jz loc_414B5E

loc_414AD9:
	mov ebx, esp
	mov eax, esi
	xor edx, edx
	call sub_41A040
	mov ebx, esp
	mov edx, 1
	mov edi, eax
	mov eax, esi
	call sub_41A040
	movsx edx, di
	shl edx, 2
	lea ebx, [esi+edx]
	movsx edx, ax
	shl edx, 2
	mov [esp+64h], ebx
	lea ebx, [esi+edx]
	mov edx, [esp+64h]
	mov edx, [edx+238h]
	cmp edx, [ebx+8BCh]
	jge loc_414B79
	xor eax, eax
	mov ebx, edi
	mov [esp+88h], ax
	jmp loc_4149C7

loc_414B2D:
	mov ebx, esp
	mov eax, esi
	xor edx, edx
	call sub_41A040
	xor edi, edi
	mov ebx, eax
	mov [esp+88h], di
	jmp loc_4149C7

loc_414B49:
	mov eax, esi
	xor ebx, ebx
	xor edx, edx
	mov [esp+88h], bx
	mov ebx, esp
	jmp loc_4149C0

loc_414B5E:
	mov edx, 1
	mov ebx, esp
	mov eax, esi
	mov [esp+88h], dx
	mov edx, 1
	jmp loc_4149C0

loc_414B79:
	mov word [esp+88h], 1
	jmp loc_4149C5

loc_414B88:
	test edx, edx
	jnz loc_414A2A
	test eax, eax
	jg loc_414A1F
	jmp loc_414A2A
;sub_414760 endp

dword_414BD0: dd 0Dh
	times 2 dd 4Ch
off_414C00: dd aMac_2
	dd aFerr_0 ; "ferr"
	dd aFerr_0 ; "ferr"
	dd aGt90_0 ; "gt90"
	dd aIndigo_0 ; "indigo"
	dd aMus_1 ; "mus"
	dd aJag_1 ; "jag"
	dd aGt1_0 ; "gt1"
	dd aLotus_0 ; "lotus"
	dd aNazca_0 ; "nazca"
	dd aItal_0 ; "ital"
	dd aIsdera_0 ; "isdera"
off_414C30: dd aEcon
	dd aGcon ; "gcon"
	dd aFcon ; "fcon"
	dd aScon ; "scon"
	dd aIcon ; "icon"
	dd aWcon ; "wcon"
off_414C48: dd aMcf1_0
	dd aFf50 ; "ff50"
	dd aF355_0 ; "f355"
	dd aFgt9 ; "fgt9"
	dd aFind ; "find"
	dd aFmus ; "fmus"
	dd aJagr ; "jagr"
	dd aLgt1 ; "lgt1"
	dd aLesp ; "lesp"
	dd aNazc ; "nazc"
	dd aCala ; "cala"
	dd aIsde ; "isde"
	dd aBbfs ; "bbfs"
	dd aDayt ; "dayt"
	dd aFzr2 ; "fzr2"
dword_414C84: dd 41h
	times 2 dd 0
	times 4 dd 3Ch
	times 2 dd 0
	times 2 dd 46h
	dd 0
dword_414CB4: times 7 dd 0
	times 2 dd 0FFFFFFF6h
	times 6 dd 0

sub_414CF0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 30h
	mov ecx, 0Ch
	mov edi, esp
	mov esi, dword_414CB4
	rep movsd
	cmp ax, 0Ch
	jge loc_414D1A
	test ax, ax
	jl loc_414D1A
	cwde
	mov eax, [esp+eax*4]
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret

loc_414D1A:
	xor eax, eax
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret
;sub_414CF0 endp

sub_414D30: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 30h
	mov ecx, 0Ch
	mov edi, esp
	mov esi, dword_414C84
	rep movsd
	cmp ax, 0Ch
	jge loc_414D5A
	test ax, ax
	jl loc_414D5A
	cwde
	mov eax, [esp+eax*4]
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret

loc_414D5A:
	xor eax, eax
	add esp, 30h
	pop edi
	pop esi
	pop ecx
	ret
;sub_414D30 endp

sub_414D70: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov ebx, edx
	call sub_41A020
	mov edx, 1
	mov [esp+4], ax
	sub eax, edx
	mov [esp+8], dx
	mov [esp+0Ch], eax
	mov ebp, 4

loc_414D9B:
	mov edx, [esp+2]
	mov esi, [esp+6]
	sar edx, 10h
	sar esi, 10h
	dec edx
	cmp esi, edx
	jge loc_414E72
	mov eax, [esp+0Ch]

loc_414DB6:
	mov esi, [esp+6]
	movsx edx, ax
	sar esi, 10h
	cmp edx, esi
	jge loc_414DCB
	inc word [esp+8]
	jmp loc_414D9B

loc_414DCB:
	add edx, edx
	lea esi, [ebx+edx]
	movsx edx, word [esi-2]
	mov [esp], edx
	mov edi, edx
	mov edx, dword [dword_4D76B8]
	movsx esi, word [esi]
	mov edi, [edx+edi*2+2AEh]
	mov edx, [edx+esi*2+2AEh]
	sar edi, 10h
	sar edx, 10h
	cmp edx, edi
	jz loc_414DFD

loc_414DFA:
	dec eax
	jmp loc_414DB6

loc_414DFD:
	imul esi, 684h
	imul edx, [esp], 684h
	add edx, ecx
	lea edi, [ecx+esi]
	mov esi, [edx+278h]
	cmp esi, [edi+278h]
	jge loc_414E40
	test [edx+1F4h], ebp
	jz loc_414E40

loc_414E25:
	movsx edx, ax
	mov si, [ebx+edx*2]
	mov di, [ebx+edx*2-2]
	mov [ebx+edx*2-2], si
	mov [ebx+edx*2], di
	dec eax
	jmp loc_414DB6

loc_414E40:
	movsx edx, ax
	add edx, edx
	add edx, ebx
	movsx esi, word [edx]
	imul esi, 684h
	test [ecx+esi+1F4h], ebp
	jnz loc_414DFA
	movsx edx, word [edx-2]
	imul edx, 684h
	test [ecx+edx+1F4h], ebp
	jnz loc_414E25
	dec eax
	jmp loc_414DB6

loc_414E72:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_414D70 endp

sub_414E80: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov ecx, edx
	call sub_41A020
	mov edx, dword [dword_4D76B8]
	cwde
	mov ebx, ecx
	add edx, 2B0h
	call sub_41B470
	mov edx, ecx
	mov eax, esi
	call sub_414D70
	mov ax, [ecx+0Eh]
	movsx edi, ax
	imul ebx, edi, 684h
	add ebx, esi
	mov dx, [ecx+0Ch]
	mov cx, [ecx+0Ah]
	test byte [ebx+1F4h], 4
	jz loc_414EF3
	cmp dword [ebx+280h], 2
	jnz loc_414EF3
	cmp dword [dword_512208], 1
	jnz loc_414F7C
	test ax, ax
	jnz loc_414F6C
	mov eax, aC13 ; "c13"

loc_414EEE:
	call sub_403480

loc_414EF3:
	movsx eax, dx
	imul ebx, eax, 684h
	add ebx, esi
	test byte [ebx+1F4h], 4
	jz loc_414F30
	cmp dword [ebx+280h], 2
	jnz loc_414F30
	cmp dword [dword_512208], 1
	jnz loc_414F9F
	test dx, dx
	jnz loc_414F92
	mov eax, aC16 ; "c16"

loc_414F2B:
	call sub_403480

loc_414F30:
	movsx eax, cx
	imul edx, eax, 684h
	add esi, edx
	test byte [esi+1F4h], 4
	jz loc_414F65
	cmp dword [esi+280h], 2
	jnz loc_414F65
	cmp dword [dword_512208], 1
	jnz loc_414FCE
	test cx, cx
	jz loc_414FB1
	cmp cx, 1
	jz loc_414FBD

loc_414F65:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_414F6C:
	cmp ax, 1
	jnz loc_414EF3
	mov eax, aC14 ; "c14"
	jmp loc_414EEE

loc_414F7C:
	cmp edi, dword [dword_51220C]
	jnz loc_414EF3
	mov eax, aC12 ; "c12"
	jmp loc_414EEE

loc_414F92:
	cmp dx, 1
	jnz loc_414F30
	mov eax, aC17 ; "c17"
	jmp loc_414F2B

loc_414F9F:
	cmp eax, dword [dword_51220C]
	jnz loc_414F30
	mov eax, aC15 ; "c15"
	jmp loc_414F2B

loc_414FB1:
	mov eax, aC19 ; "c19"
	call sub_403480
	jmp loc_414F65

loc_414FBD:
	mov eax, aC20 ; "c20"
	call sub_403480
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_414FCE:
	cmp eax, dword [dword_51220C]
	jnz loc_414F65
	mov eax, aC18 ; "c18"
	call sub_403480
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_414E80 endp

sub_414FF0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 4
	mov edi, eax
	call sub_41A020
	mov [esp], ax
	xor esi, esi
	xor ebx, ebx
	xor eax, eax

loc_415008:
	mov ecx, [esp-2]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_415045
	imul edx, 684h
	add edx, edi
	cmp dword [edx+278h], 1
	jz loc_41502A

loc_415027:
	inc eax
	jmp loc_415008

loc_41502A:
	test byte [edx+1F4h], 4
	jz loc_415027
	cmp dword [edx+280h], 2
	jnz loc_415027
	mov esi, 1
	mov ebx, eax
	jmp loc_415027

loc_415045:
	mov ecx, dword [dword_51220C]
	movsx edx, bx
	cmp edx, ecx
	jnz loc_415086
	cmp si, 1
	jnz loc_415086
	cmp dword [dword_512208], 1
	jnz loc_415097
	cmp dword [dword_512264], 2
	jnz loc_415097
	test bx, bx
	jnz loc_41508A
	mov eax, aC25 ; "c25"

loc_415074:
	call sub_403480

loc_415079:
	mov eax, 1

loc_41507E:
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_415086:
	xor eax, eax
	jmp loc_41507E

loc_41508A:
	cmp bx, 1
	jnz loc_415079
	mov eax, aC26 ; "c26"
	jmp loc_415074

loc_415097:
	mov eax, aC24 ; "c24"
	call sub_403480
	mov eax, 1
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_414FF0 endp

sub_4150B0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov esi, dword [dword_4D76BC]
	mov edi, eax
	call sub_41A020
	mov ecx, dword [dword_512208]
	xor edx, edx
	cmp ecx, 2
	jl loc_4150FA
	push ebx
	mov esi, dword [dword_4D76BC]
	xor eax, eax
	mov ebx, esi

loc_4150D9:
	movsx ecx, ax
	inc eax
	add dx, [ebx+ecx*2]
	cmp ax, 9
	jl loc_4150D9
	movsx ecx, dx
	mov ax, [edi+ecx*2]
	pop ebx
	mov dword [dword_4D76BC], esi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_4150FA:
	movsx ecx, ax
	mov esi, dword [dword_4D76BC]
	mov ax, [edi+ecx*2-2]
	mov dword [dword_4D76BC], esi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_4150B0 endp

sub_415120: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	call sub_41A020
	mov eax, edx
	call sub_4150B0
	movsx edx, ax
	imul edx, 684h
	add edx, ecx
	xor ebx, ebx
	mov edi, [edx+280h]
	mov esi, eax
	cmp edi, 2
	jnz loc_41517D
	test byte [edx+1F4h], 4
	jz loc_41517D
	cmp byte [byte_512DA9], 1
	jnz loc_415191
	cmp dword [dword_512264], 1
	jle loc_415191
	test ax, ax
	jnz loc_415184
	mov eax, aC28 ; "c28"

loc_415171:
	call sub_403480

loc_415176:
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41517D:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_415184:
	cmp ax, 1
	jnz loc_415176
	mov eax, aC29 ; "c29"
	jmp loc_415171

loc_415191:
	movsx eax, si
	imul edx, eax, 684h
	test byte [ecx+edx+1F4h], 4
	jz loc_415176
	cmp dword [dword_512208], 2
	jl loc_4151B5
	cmp eax, dword [dword_51220C]
	jnz loc_415176

loc_4151B5:
	mov eax, aC27 ; "c27"
	call sub_403480
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_415120 endp

sub_4151D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov [esp], edx
	call sub_41A020
	mov ecx, dword [dword_512208]
	mov [esp+4], ax
	xor edx, edx
	xor ebx, ebx
	cmp ecx, 2
	jl loc_41524F
	xor eax, eax

loc_4151F8:
	movsx ecx, ax
	lea esi, [ecx+ecx]
	mov ecx, dword [dword_4D76BC]
	mov di, [ecx+esi]
	inc eax
	add edx, edi
	cmp ax, 9
	jl loc_4151F8
	movsx eax, dx
	mov edi, [esp]
	add eax, eax
	add eax, edi
	mov di, [eax]

loc_41521E:
	cmp byte [byte_512DA9], 1
	jnz loc_415329
	xor edx, edx

loc_41522D:
	mov ecx, [esp+2]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_415270
	imul ecx, eax, 684h
	add ecx, ebp
	test byte [ecx+1F4h], 4
	jnz loc_41525D

loc_41524C:
	inc edx
	jmp loc_41522D

loc_41524F:
	cwde
	mov esi, [esp]
	add eax, eax
	add eax, esi
	mov di, [eax-2]
	jmp loc_41521E

loc_41525D:
	movsx esi, di
	cmp eax, esi
	jz loc_41524C
	cmp dword [ecx+280h], 2
	jnz loc_41524C
	inc ebx
	jmp loc_41524C

loc_415270:
	cmp bx, 1
	jg loc_4152A2
	test bx, bx
	jle loc_415289
	test di, di
	jnz loc_415289
	cmp dword [ebp+904h], 2
	jz loc_4152C9

loc_415289:
	test bx, bx
	jle loc_415297
	cmp dword [ebp+280h], 2
	jz loc_4152F0

loc_415297:
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4152A2:
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 6
	jnz loc_4152BD
	mov eax, aC37 ; "c37"
	call sub_403480
	jmp loc_415297

loc_4152BD:
	mov eax, aC33 ; "c33"
	call sub_403480
	jmp loc_415297

loc_4152C9:
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 6
	jnz loc_4152E4
	mov eax, aC36 ; "c36"
	call sub_403480
	jmp loc_415297

loc_4152E4:
	mov eax, aC32 ; "c32"
	call sub_403480
	jmp loc_415297

loc_4152F0:
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 6
	jnz loc_415314
	mov eax, aC35 ; "c35"
	call sub_403480
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_415314:
	mov eax, aC31 ; "c31"
	call sub_403480
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_415329:
	cmp dword [dword_512208], 2
	jl loc_4153A0
	mov ecx, dword [dword_51220C]
	movsx eax, di
	cmp eax, ecx
	jz loc_415297
	imul eax, ecx, 684h
	add ebp, eax
	cmp dword [ebp+280h], 2
	jnz loc_415297
	mov eax, [ebp+21Ch]
	cmp dword [eax], 24h
	jz loc_415297
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 6
	jnz loc_41538B
	mov eax, aC34 ; "c34"
	call sub_403480
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41538B:
	mov eax, aC30 ; "c30"
	call sub_403480
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4153A0:
	test di, di
	jz loc_415297
	cmp dword [ebp+280h], 2
	jnz loc_415297
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 6
	jnz loc_41538B
	mov eax, aC34 ; "c34"
	call sub_403480
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4151D0 endp

sub_4153E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov [esp], edx
	mov ebp, dword [dword_51220C]
	xor esi, esi
	xor eax, eax
	xor ebx, ebx

loc_4153F9:
	movsx edx, ax
	mov ecx, [esp]
	add edx, edx
	add edx, ecx
	movsx edx, word [edx]
	imul ecx, edx, 684h
	test byte [ecx+edi+1F4h], 4
	jz loc_415421
	cmp edx, ebp
	jz loc_415421
	mov ebx, 1
	mov esi, eax

loc_415421:
	inc eax
	cmp bx, 1
	jnz loc_4153F9
	mov eax, esi
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4153E0 endp

sub_415440: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov ebx, edx
	xor eax, eax

loc_415448:
	movsx edx, ax
	movsx edx, word [ebx+edx*2]
	imul edx, 684h
	test byte [ecx+edx+1F4h], 4
	jz loc_415462
	inc eax
	jmp loc_415448

loc_415462:
	pop ecx
	pop ebx
	ret
;sub_415440 endp

sub_415470: ;SUBROUTINE
	mov dl, byte [byte_512ECC]
	cmp dl, 1
	jnz loc_41547F
	or [eax+8], dl
	ret

loc_41547F:
	and byte [eax+8], 0FEh
	ret
;sub_415470 endp

sub_415490: ;SUBROUTINE
	push edx
	mov edx, dword [dword_5121F8]
	cmp edx, 1
	jz loc_4154B3
	cmp edx, 2
	jz loc_4154B3
	cmp byte [byte_512DA9], 1
	jz loc_4154B9
	cmp dword [dword_512264], 2
	jl loc_4154B9

loc_4154B3:
	or byte [eax+8], 1
	pop edx
	ret

loc_4154B9:
	and byte [eax+8], 0FEh
	pop edx
	ret
;sub_415490 endp

sub_4154C0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0C8h
	mov [esp+0ACh], eax
	mov ebx, edx
	mov ecx, 1
	mov esi, off_414C30
	xor edx, edx
	xor edi, edi
	xor ebp, ebp
	mov [esp+0B0h], edx
	mov [esp+0C0h], ecx
	mov [esp+0C4h], ecx
	mov [esp+0BCh], edi
	mov ecx, 6
	lea edi, [esp+8Ch]
	mov [esp+0B8h], dx
	mov [esp+0B4h], dx
	rep movsd
	xor edx, edx
	mov ecx, 0Fh
	lea edi, [esp+50h]
	mov esi, off_414C48
	mov [esp+0A8h], edx
	mov [esp+0A4h], edx
	rep movsd
	call sub_41A020
	mov edi, eax
	cmp ax, 2
	jl loc_415594
	xor edx, edx

loc_41554D:
	movsx ecx, di
	movsx eax, dx
	cmp eax, ecx
	jge loc_415594
	imul eax, 684h
	lea esi, [ebx+eax]
	cmp dword [esi+278h], 1
	jz loc_41556C

loc_415569:
	inc edx
	jmp loc_41554D

loc_41556C:
	test byte [esi+1F4h], 4
	jz loc_415569
	cmp dword [esi+280h], 2
	jnz loc_415569
	mov ecx, 1
	mov [esp+0B8h], dx
	mov [esp+0B0h], ecx
	jmp loc_415569

loc_415594:
	cmp word [esp+0B0h], 0
	jz loc_415887
	mov eax, [esp+0B6h]
	mov esi, dword [dword_51220C]
	sar eax, 10h
	cmp eax, esi
	jz loc_4155C4
	cmp dword [dword_512208], 1
	jg loc_415887

loc_4155C4:
	cmp di, 2
	jl loc_415887
	cmp dword [dword_512208], 1
	jnz loc_4155E6
	cmp word [esp+0B8h], 1
	jg loc_415887

loc_4155E6:
	cmp dword [dword_512208], 1
	jg loc_415819

loc_4155F3:
	mov eax, off_4D3DB8
	xor edi, edi
	mov edx, 1
	mov dword [dword_4D2098], edi
	call sub_410E80
	mov eax, ebx
	call sub_4159E0
	mov eax, [esp+0B6h]
	sar eax, 10h
	imul eax, 684h
	mov eax, [ebx+eax+21Ch]
	mov dx, [eax]
	xor ecx, ecx
	mov [esp+0B4h], dx
	mov cl, byte [byte_512DBD]
	mov edx, [esp+0B2h]
	add ecx, 0Ch
	sar edx, 10h
	cmp edx, ecx
	jl loc_41589A

loc_415650:
	xor edi, edi

loc_415652:
	mov ecx, [esp+0A8h]
	cmp edi, ecx
	jnz loc_415831
	call sub_4833C7
	add ebp, eax
	mov eax, [esp+0BCh]
	mov edx, 400h
	inc eax
	mov ebx, ecx
	mov [esp+0BCh], eax
	call sub_428A20
	mov eax, aBack_1 ; "back"
	call sub_405B30
	xor edx, edx
	mov eax, [esp+0B2h]
	mov dl, byte [byte_512DBD]
	sar eax, 10h
	add edx, 0Ch
	mov esi, ebp
	cmp eax, edx
	jge loc_4156B8
	mov edx, 400h
	mov eax, esp
	mov ecx, edi
	mov ebx, edi
	call sub_405B30

loc_4156B8:
	xor eax, eax
	mov edx, 2800h
	mov al, byte [byte_512DFB]
	mov ecx, edi
	mov ebx, edi
	mov eax, [esp+eax*4+8Ch]
	call sub_405B30
	call sub_415CC0
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	cmp byte [byte_512ECC], 1
	jnz loc_4158B8
	mov eax, 12h
	mov ecx, edi
	mov ebx, edi
	mov edx, esi

loc_4156FE:
	call sub_4274F0

loc_415703:
	mov ebx, [esp+0BCh]
	call sub_4976B8
	cmp bx, 11h
	jl loc_415731
	mov eax, edi
	call sub_489800
	mov eax, edi
	call sub_403550
	mov eax, edi
	call sub_489800

loc_415731:
	cmp byte [byte_512ECC], 1
	jz loc_415741
	mov eax, edi
	call sub_489800

loc_415741:
	call sub_405960
	mov bl, byte [byte_512ECC]
	mov edx, eax
	cmp bl, 1
	jz loc_41575A
	mov eax, edi
	call sub_489800

loc_41575A:
	test dx, dx
	jz loc_4158EF
	cmp ebp, [esp+0A4h]
	jle loc_4158EF

loc_415770:
	lea eax, [ebp+0Fh]
	mov [esp+0A4h], eax
	mov eax, [esp+0ACh]
	mov edx, 0Dh
	mov bh, byte [byte_512ECC]
	mov [eax+0Ah], di
	cmp bh, 1
	jz loc_41579C
	mov eax, edi
	call sub_489800

loc_41579C:
	mov eax, [esp+0ACh]
	movsx edx, dx
	call sub_410414
	mov cl, byte [byte_512ECC]
	mov [esp+0A8h], eax
	cmp cl, 1
	jz loc_4157C4
	mov eax, edi
	call sub_489800

loc_4157C4:
	mov esi, [esp+0C0h]
	cmp si, 1
	jnz loc_415652
	cmp word [esp+0BCh], 11h
	jl loc_415652
	cmp byte [byte_512ECC], 1
	jz loc_415652
	mov edx, [esp+0C4h]
	mov [esp+0C0h], edi
	cmp dx, si
	jz loc_41590E

loc_415808:
	mov eax, edi
	call sub_489800
	call sub_4833C7
	jmp loc_415652

loc_415819:
	mov eax, [esp+0B6h]
	mov esi, dword [dword_51220C]
	sar eax, 10h
	cmp eax, esi
	jz loc_4155F3

loc_415831:
	cmp byte [byte_512ECC], 1
	jz loc_41585A
	xor eax, eax
	mov edi, 1
	call sub_489800
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	xor eax, eax
	call sub_489800

loc_41585A:
	cmp word [esp+0B4h], 0Ch
	jge loc_415882
	cmp byte [byte_512ECC], 1
	jnz loc_415992
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx

loc_41587D:
	call sub_4274F0

loc_415882:
	call sub_4159C0

loc_415887:
	mov eax, [esp+0B0h]
	add esp, 0C8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41589A:
	mov eax, [eax]
	mov edx, [esp+eax*4+50h]
	push edx
	push aS_4 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_415650

loc_4158B8:
	cmp word [esp+0B4h], 0Ch
	jge loc_415703
	mov edx, [esp+0B2h]
	sar edx, 10h
	mov eax, edx
	call sub_414D30
	mov ecx, eax
	mov eax, edx
	call sub_414CF0
	mov ebx, eax
	mov edx, esi
	mov eax, 12h
	jmp loc_4156FE

loc_4158EF:
	cmp ebp, 500h
	jle loc_4157C4
	cmp di, [esp+0C0h]
	jz loc_415770
	jmp loc_4157C4

loc_41590E:
	cmp dword [dword_512208], 1
	jnz loc_415970
	mov ebx, [esp+0B8h]
	cmp di, bx
	jz loc_41594E
	cmp bx, dx
	jnz loc_415808
	mov eax, aC02 ; "c02"
	call sub_403480
	mov eax, edi
	call sub_489800
	mov eax, edi
	call sub_489800
	call sub_4833C7
	jmp loc_415652

loc_41594E:
	mov eax, aC01 ; "c01"
	call sub_403480
	mov eax, edi
	call sub_489800
	mov eax, edi
	call sub_489800
	call sub_4833C7
	jmp loc_415652

loc_415970:
	mov eax, aC00 ; "c00"
	call sub_403480
	mov eax, edi
	call sub_489800
	mov eax, edi
	call sub_489800
	call sub_4833C7
	jmp loc_415652

loc_415992:
	mov edx, [esp+0B2h]
	sar edx, 10h
	mov eax, edx
	call sub_414D30
	mov ecx, eax
	mov eax, edx
	call sub_414CF0
	mov ebx, eax
	xor edx, edx
	mov eax, 12h
	jmp loc_41587D
;sub_4154C0 endp

sub_4159C0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D4208]
	test edx, edx
	jnz loc_4159CD
	pop edx
	ret

loc_4159CD:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D4208], ecx
	pop ecx
	pop edx
	ret
;sub_4159C0 endp

sub_4159E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov [esp+100h], eax
	mov ecx, 0Ch
	lea edi, [esp+0A0h]
	mov esi, dword_414BD0
	rep movsd
	mov ecx, 0Ch
	lea edi, [esp+0D0h]
	mov esi, off_414C00
	rep movsd
	call sub_41A020
	mov esi, eax
	mov ah, byte [byte_512ECC]
	xor ebp, ebp
	cmp ah, 1
	jnz loc_415A7F
	cmp dx, 2
	jnz loc_415A7F
	mov edx, aOmg6 ; "omg6"
	mov eax, dword [dword_4D40B8]
	mov ecx, 0Dh
	call sub_482EB4
	xor ebx, ebx
	push ebp

loc_415A49:
	mov edx, eax

loc_415A4B:
	xor eax, eax
	call sub_4280B0

loc_415A52:
	mov ebx, dword [dword_4D4208]
	test ebx, ebx
	jz loc_415A6B
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4D4208], esi

loc_415A6B:
	test ebp, ebp
	jnz loc_415BD7

loc_415A73:
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_415A7F:
	cmp dx, 1
	jnb loc_415AA4
	test dx, dx
	jnz loc_415A52
	mov edx, aOmg6 ; "omg6"
	mov eax, dword [dword_4D40B8]
	mov ecx, 0Dh
	call sub_482EB4
	xor ebx, ebx
	push 0
	jmp loc_415A49

loc_415AA4:
	jbe loc_415B0F
	cmp dx, 2
	jnz loc_415A52
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	movsx ecx, ax
	lea edx, [esp+50h]
	mov eax, ecx
	call sub_41B230
	lea eax, [esp+50h]
	push eax
	mov edx, dword [dword_5134D4]
	push edx
	push aSS_qfs_1 ; "%s%s.qfs"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov edx, aRec6 ; "rec6"
	mov dword [dword_4D4208], eax
	call sub_482EB4
	push 19h
	mov edx, eax
	mov eax, ecx
	xor ebx, ebx
	call sub_419FD0
	movsx ecx, ax
	jmp loc_415A4B

loc_415B0F:
	mov ecx, aCNfs2seFront_3 ; "c:\\nfs2se\\frontend\\common\\Statdisp.c"
	mov ebx, 0CCAh
	mov eax, aDumirank ; "dumirank"
	movsx edx, si
	mov dword [dword_4DB1DC], ebx
	add edx, edx
	mov ebx, 20h
	mov dword [dword_4DB1D8], ecx
	call sub_4844B0
	mov ebp, eax
	test eax, eax
	jz loc_415A73
	xor edx, edx

loc_415B45:
	movsx ecx, si
	movsx eax, dx
	cmp eax, ecx
	jge loc_415B6A
	imul eax, 684h
	add eax, [esp+100h]
	mov eax, [eax+278h]
	mov [ebp+eax*2-2], dx
	inc edx
	jmp loc_415B45

loc_415B6A:
	movsx eax, word [ebp+0]
	imul eax, 684h
	add eax, [esp+100h]
	mov eax, [eax+21Ch]
	mov ax, [eax]
	cmp ax, 0Ch
	jge loc_415BD7
	movsx ecx, ax
	mov edi, [esp+ecx*4+0D0h]
	push edi
	mov eax, dword [dword_5134B4]
	push eax
	push aSS_qfs_1 ; "%s%s.qfs"
	lea eax, [esp+0Ch]
	push eax
	xor edx, edx
	call sprintf_
	add esp, 10h
	mov eax, esp
	xor ebx, ebx
	call sub_488058
	mov edx, aCar6_0 ; "car6"
	mov dword [dword_4D4208], eax
	call sub_482EB4
	push 0
	mov edx, eax
	mov ecx, [esp+ecx*4+0A4h]
	jmp loc_415A4B

loc_415BD7:
	mov eax, ebp
	call sub_4848FC
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4159E0 endp

sub_415BF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ah, 1
	mov ebx, 1
	xor edx, edx
	xor cl, cl
	mov byte [byte_4D76C1], ah
	mov byte [byte_4D76C2], ah
	mov byte [byte_4D76C3], ah
	mov byte [byte_4D76C4], ah
	mov byte [byte_4D76C6], cl
	mov byte [byte_4D76C0], ah
	mov word [word_4D4200], dx
	mov word [word_4D4204], bx
	xor ch, ch
	xor al, al
	mov byte [byte_4D76C7], ch
	mov byte [byte_4D76C8], al
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415BF0 endp

sub_415C50: ;SUBROUTINE
	push esi
	push edi
	sub esp, 58h
	mov [esp+50h], dx
	mov [esp+54h], bx
	mov edi, eax
	imul esi, eax, 1Ah
	add esi, ecx

loc_415C66:
	mov edx, [esp+4Eh]
	movsx eax, di
	sar edx, 10h
	cmp eax, edx
	jg loc_415CBA
	cmp byte [byte_512DFB], 2
	jnz loc_415CB2
	push eax
	push aD_3 ; "%d"

loc_415C83:
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	mov edx, [esp+56h]
	mov ecx, 12h
	lea eax, [esp+4]
	movsx ebx, si
	push 4
	sar edx, 10h
	inc edi
	call sub_4054E0
	add esi, 1Ah
	jmp loc_415C66

loc_415CB2:
	push eax
	push aD_ ; "%d."
	jmp loc_415C83

loc_415CBA:
	add esp, 58h
	pop edi
	pop esi
	ret
;sub_415C50 endp

sub_415CC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push 2
	mov ecx, 12h
	push 5
	mov eax, dword [dword_51221C]
	mov ebx, 0BEh
	call sub_41A3A0
	add eax, 40h
	mov edx, 7Ah
	call sub_41B710
	call sub_4054E0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415CC0 endp

sub_415D00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	add eax, 295h
	movsx esi, ax
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Eh
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, esi
	call sub_405580
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415D00 endp

sub_415D40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 50h
	call sub_41A3E0
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 5
	mov eax, 284h
	call sub_41B650
	sub eax, 18h
	movsx ebx, ax
	mov eax, 27Eh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	add esp, 50h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415D40 endp

sub_415DA0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 50h
	mov eax, edx
	call sub_41A170
	mov edi, esp
	mov esi, eax
	push edi

loc_415DB3:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_415DCB
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_415DB3

loc_415DCB:
	pop edi
	push 2
	push 5
	mov eax, 2A3h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2A3h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	add esp, 50h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_415DA0 endp

sub_415E00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	push 5
	push 5
	mov eax, 2A2h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2A2h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	mov eax, esi
	call sub_4054E0
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415E00 endp

sub_415E40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, 400h
	mov eax, aBack_1 ; "back"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	pop edx
	pop ecx
	pop ebx
	ret
;sub_415E40 endp

sub_415E60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 4ED8h
	mov ebp, eax
	mov esi, dword [dword_512214]
	xor edx, edx
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+4EB4h], edx
	mov [esp+4EB0h], ecx
	mov [esp+4EB8h], ecx
	xor ebx, ecx
	mov edx, 1
	mov [esp+4EC8h], ebx
	mov [esp+4EC4h], edx
	cmp esi, 2
	jz loc_415F26
	cmp dword [dword_512208], 1
	jg loc_415F37
	mov word [word_4D3B26], 2DDh

loc_415EC2:
	push edi
	mov eax, [ebp+14h]
	xor ebx, ebx
	xor edx, edx
	call sub_415470
	call sub_41A020
	mov [esp+4ED8h], ax
	movsx edx, ax
	lea eax, [esp+4]
	call sub_41A570
	cmp dword [dword_512208], 1
	jg loc_415F42
	xor edi, edi
	mov [esp+4EC4h], di

loc_415EFB:
	xor eax, eax

loc_415EFD:
	mov ecx, [esp+4ED6h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_415F52
	imul edx, 684h
	mov edx, [esp+edx+27Ch]
	mov [esp+edx*2+4E9Ah], ax
	inc eax
	jmp loc_415EFD

loc_415F26:
	mov eax, 0FFFFFFFDh
	add esp, 4ED8h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_415F37:
	mov word [word_4D3B26], 2DEh
	jmp loc_415EC2

loc_415F42:
	mov ax, word [dword_51220C]
	mov [esp+4EC4h], ax
	jmp loc_415EFB

loc_415F52:
	xor eax, eax

loc_415F54:
	mov ecx, [esp+4ED6h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_415F7D
	imul edx, 684h
	mov edx, [esp+edx+27Ch]
	mov [esp+edx*2+4E82h], ax
	inc eax
	jmp loc_415F54

loc_415F7D:
	xor edx, edx
	mov eax, ebp
	mov dword [dword_4D2098], edx
	call sub_410E80
	mov edx, 2
	lea eax, [esp+4]
	mov ecx, [esp+4EB8h]
	call sub_4159E0
	test ecx, ecx
	jnz loc_416323

loc_415FA9:
	call sub_4833C7
	mov edi, [esp+4EBCh]
	mov edx, [esp+4ECCh]
	add edi, eax
	mov eax, 1
	add edx, eax
	mov [esp+4EBCh], edi
	mov [esp+4ECCh], edx
	mov dl, byte [byte_4D76C4]
	mov [esp+4EC0h], edi
	test dl, dl
	jnz loc_41618A
	xor edi, edi
	mov [esp+4EC8h], edi

loc_415FF1:
	test ax, ax
	jz loc_4161DD

loc_415FFA:
	call sub_428A20
	call sub_415E40
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D41D0[eax*4]
	call sub_405B30
	call sub_415CC0
	mov eax, 2D8h
	mov edx, [esp+4ED6h]
	call sub_41B650
	movsx ecx, ax
	mov eax, 2D8h
	sar edx, 10h
	call sub_41B670
	movsx ebx, ax
	mov eax, 1
	call sub_415C50
	xor edx, edx
	mov ebx, 1Ah
	mov [esp+4ED0h], dx
	mov [esp+4ED4h], ebx

loc_416069:
	mov edx, [esp+4ED6h]
	mov eax, [esp+4ECEh]
	sar edx, 10h
	sar eax, 10h
	cmp eax, edx
	jge loc_416413
	mov eax, [esp+eax*2+4E9Ah]
	sar eax, 10h
	imul edx, eax, 684h
	test byte [esp+edx+1F8h], 4
	jz loc_416361
	lea eax, [eax+eax*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E3Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 3
	mov eax, 2D9h
	mov edi, [esp+4EDCh]
	call sub_41B650
	add eax, edi

loc_4160D8:
	movsx ebx, ax
	mov eax, 2D9h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E3Ch]
	call sub_4054E0
	mov eax, [esp+4ECEh]
	sar eax, 10h
	mov eax, [esp+eax*2+4E9Ah]
	sar eax, 10h
	imul eax, 684h
	cmp dword [esp+eax+284h], 1
	jz loc_4163DF
	cmp word [esp+4ED0h], 0
	jnz loc_4163AB
	mov eax, 2E3h
	mov esi, [esp+4ED4h]
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2E3h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2D4h

loc_41615F:
	call sub_405580
	mov eax, [esp+4ED0h]
	mov edi, [esp+4ED4h]
	inc eax
	add edi, 1Ah
	mov [esp+4ED0h], ax
	mov [esp+4ED4h], edi
	jmp loc_416069

loc_41618A:
	cmp ax, [esp+4EC8h]
	jnz loc_415FF1
	cmp word [esp+4ECCh], 0
	jl loc_415FF1
	xor dh, dh
	lea eax, [esp+4]
	mov byte [byte_4D76C4], dh
	lea edx, [esp+4E9Ch]
	xor esi, esi
	call sub_415120
	lea edx, [esp+4E9Ch]
	lea eax, [esp+4]
	mov [esp+4EC8h], esi
	call sub_414FF0
	jmp loc_415FFA

loc_4161DD:
	cmp dword [dword_4D2094], 0
	jnz loc_415FFA
	cmp word [esp+4ECCh], 0
	jz loc_4161FA
	call sub_423B90

loc_4161FA:
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_416315
	mov ecx, dword [dword_5637F4]
	cmp ecx, [esp+4EB4h]
	jle loc_416315
	mov ebx, [esp+4EC8h]
	test bx, bx
	jnz loc_416315
	mov ecx, dword [dword_5637F4]
	add ecx, 0Fh
	mov [esp+4EB4h], ecx
	cmp ax, 1Bh
	jnz loc_41648D
	mov edx, 0Dh
	mov [ebp+0Ah], bx

loc_416257:
	mov eax, 1
	call sub_41A1A0
	call sub_415BF0
	xor bh, bh
	xor esi, esi
	mov edi, dword [dword_4D76BC]
	mov byte [byte_512DAA], bh
	mov dword [dword_5121F8], esi
	test edi, edi
	jz loc_41629A
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	cmp eax, 7
	jl loc_41629A
	call sub_41A2A0
	mov dword [dword_4D76BC], esi

loc_41629A:
	mov eax, [esp+4EC2h]
	sar eax, 10h
	imul eax, 684h
	cmp dword [esp+eax+27Ch], 1
	jnz loc_4164A7
	cmp dword [esp+eax+284h], 2
	jnz loc_4164A7
	or byte [byte_512DBC], 1

loc_4162CD:
	cmp word [ebp+0Ah], 1
	jnz loc_4162F0
	cmp dx, 0Dh
	jnz loc_4162F0
	xor al, al
	mov byte [byte_4D76C3], al
	mov byte [byte_4D76C1], al
	mov byte [byte_4D76C0], al
	mov byte [byte_4D76C4], al

loc_4162F0:
	cmp word [ebp+0Ah], 2
	jnz loc_416304
	cmp dx, 0Dh
	jnz loc_416304
	call sub_4098D0
	xor edx, edx

loc_416304:
	movsx edx, dx
	mov eax, ebp
	call sub_410414
	mov [esp+4EB8h], eax

loc_416315:
	cmp dword [esp+4EB8h], 0
	jz loc_415FA9

loc_416323:
	mov ebx, 0FFFFFFF6h
	mov eax, 12h
	xor ecx, ecx
	xor edx, edx
	mov esi, 1
	call sub_4274F0
	call sub_4159C0
	xor eax, eax
	mov dword [dword_4D1FFC], esi
	call sub_403550
	mov eax, [esp+4EB8h]
	pop edi
	add esp, 4ED8h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_416361:
	lea eax, [esp+4]
	add eax, edx
	lea edi, [esp+4E34h]
	call sub_41A170
	mov esi, eax
	push edi

loc_416376:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41638E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_416376

loc_41638E:
	pop edi
	push 2
	push 3
	mov eax, 2D9h
	mov esi, [esp+4EDCh]
	call sub_41B650
	add eax, esi
	jmp loc_4160D8

loc_4163AB:
	mov eax, 2E4h
	mov ecx, [esp+4ED4h]
	call sub_41B650
	add eax, ecx
	movsx ebx, ax
	mov eax, 2E4h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2E4h
	jmp loc_41615F

loc_4163DF:
	mov eax, 2E3h
	mov edx, [esp+4ED4h]
	call sub_41B650
	add eax, edx
	movsx ebx, ax
	mov eax, 2E3h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2A5h
	jmp loc_41615F

loc_416413:
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov ebx, 0FFFFFFF6h
	mov eax, [eax+20h]
	mov edx, [esp+4EC0h]
	call sub_426B70
	mov eax, dword [dword_51221C]
	xor ecx, ecx
	call sub_41A3A0
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_416465
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_416465:
	cmp word [esp+4ECCh], 0
	jz loc_416475

loc_416475:
	call sub_4976B8
	xor eax, eax
	call sub_403550
	jmp loc_4161FA

loc_41648D:
	cmp word [ebp+0Ah], 0
	jnz loc_4162CD
	cmp ax, 0Dh
	jz loc_416257
	jmp loc_4162CD

loc_4164A7:
	xor esi, esi
	xor cl, cl
	mov dword [dword_51221C], esi
	mov byte [byte_512DB0], cl
	jmp loc_4162CD
;sub_415E60 endp

sub_4164C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 14h
	mov [esp+10h], al
	cmp al, 4
	jnz loc_4164F6
	mov ecx, dword [dword_512264]
	xor edx, edx
	test ecx, ecx
	jle loc_4164EE
	lea ebx, [ecx+ecx]
	xor eax, eax
	mov ecx, dword [dword_4D76BC]

loc_4164E7:
	cmp word [ecx+eax], 0
	jz loc_41653D

loc_4164EE:
	cmp edx, dword [dword_512264]
	jz loc_416547

loc_4164F6:
	mov dl, [esp+10h]
	cmp dl, 3
	jnz loc_416573
	cmp dword [dword_51220C], 0
	jz loc_41654B
	cmp dword [dword_512208], 4
	jnz loc_41654B
	cmp word [word_51345A], 0
	jnz loc_416532
	mov edx, 1
	mov word [word_51345C], dx
	mov word [word_51345A], dx

loc_416532:
	mov al, 3

loc_416534:
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41653D:
	add eax, 2
	inc edx
	cmp eax, ebx
	jl loc_4164E7
	jmp loc_4164EE

loc_416547:
	mov al, 4
	jmp loc_416534

loc_41654B:
	mov cl, 3
	mov edi, 16h
	mov ebx, 4
	mov edx, esp
	xor eax, eax
	mov [esp], cl
	mov [esp+2], di
	call sub_464070
	mov al, cl
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_416573:
	cmp dl, 4
	jnz loc_416657
	cmp word [word_513458], 0
	jnz loc_41664A

loc_41658A:
	mov bl, 3
	mov eax, 2
	lea edx, [esp+4]
	mov [esp+4], bl
	mov [esp+6], ax
	mov eax, 308h
	mov ebx, 4
	call sub_402CD0
	xor eax, eax
	call sub_464070
	mov ebx, 16h
	xor edx, edx

loc_4165BB:
	mov eax, edx
	call sub_483EB0
	mov cx, word [word_51345A]
	cmp dx, cx
	jnz loc_416532
	cmp cx, word [word_513458]
	jz loc_41668E
	mov cx, word [word_51343A]
	cmp bx, cx
	jz loc_416532
	cmp cx, 2
	jnz loc_4165BB

loc_4165F5:
	cmp word [word_513458], 0
	jz loc_4167BC
	cmp byte [esp+10h], 1
	jnz loc_4167A6
	cmp dword [dword_512208], 4
	jnz loc_4166E0
	mov eax, 2
	mov edx, 1

loc_416625:
	mov ecx, dword [dword_513408]
	sar ecx, 10h
	cmp edx, ecx
	jge loc_41676F
	cmp word word_513448[eax], 0
	jnz loc_416744
	inc edx
	add eax, 2
	jmp loc_416625

loc_41664A:
	cmp dword [dword_512208], 4
	jnz loc_41658A

loc_416657:
	cmp byte [esp+10h], 2
	jnz loc_4165F5
	cmp word [word_513458], 0
	jz loc_4166AD
	mov eax, 2
	mov edx, 1
	mov ebx, eax

loc_416674:
	mov ecx, dword [dword_513408]
	sar ecx, 10h
	cmp edx, ecx
	jge loc_4166D5
	inc edx
	add eax, 2
	jmp loc_416674

loc_41668E:
	mov di, word [dword_513428+2]
	cmp bx, di
	jz loc_416532
	cmp di, 1
	jz loc_4165F5
	jmp loc_4165BB

loc_4166AD:
	mov bx, word [dword_513428+2]
	cmp bx, 16h
	jz loc_416532
	cmp bx, 2
	jz loc_4166CA
	cmp bx, 1
	jnz loc_4166D5

loc_4166CA:
	mov al, 4
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4166D5:
	xor al, al
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4166E0:
	mov dx, word [word_51343A]
	cmp dx, 16h
	jz loc_416532
	mov eax, dword [dword_4D76BC]
	cmp word [eax], 0
	jnz loc_4167A6
	cmp dx, 2
	jnz loc_4167A6

loc_41670A:
	mov eax, 308h
	mov edx, 1
	call sub_402CD0
	xor eax, eax
	call sub_463930
	mov edx, 0Fh
	mov eax, 9600h
	call sub_463930
	cmp word [word_51345A], 0
	jz loc_4166CA
	mov al, 3
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_416744:
	mov dl, 3
	mov eax, 16h
	mov ebx, 4
	mov [esp+8], dl
	mov [esp+0Ah], ax
	lea edx, [esp+8]
	xor eax, eax
	call sub_464070
	mov al, 3
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41676F:
	mov eax, dword [dword_4D76BC]
	cmp word [eax], 0
	jnz loc_4167A6
	mov eax, 2
	mov edx, 1
	mov ebx, eax

loc_416786:
	mov ecx, dword [dword_513408]
	sar ecx, 10h
	cmp edx, ecx
	jge loc_4167A6
	cmp bx, word (dword_513436+2)[eax]
	jz loc_41670A
	inc edx
	add eax, 2
	jmp loc_416786

loc_4167A6:
	cmp byte [esp+10h], 4
	jz loc_41670A

loc_4167B1:
	xor al, al
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4167BC:
	mov ax, word [dword_513428+2]
	cmp ax, 1
	jnz loc_416839

loc_4167C8:
	cmp byte [esp+10h], 4
	jnz loc_416858

loc_4167D3:
	mov eax, 308h
	call sub_402CD0
	mov si, word [dword_513428+2]
	cmp si, 2
	jnz loc_416805
	mov al, 3
	mov ebx, 4
	lea edx, [esp+0Ch]
	mov [esp+0Ch], al
	xor eax, eax
	mov [esp+0Eh], si
	call sub_464070

loc_416805:
	mov edx, 1
	xor eax, eax
	call sub_463930
	mov edx, 0Fh
	mov eax, 9600h
	call sub_463930
	cmp word [word_51345A], 0
	jz loc_4166CA
	mov al, 3
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_416839:
	cmp ax, 2
	jz loc_4167C8

loc_41683F:
	cmp word [dword_513428+2], 16h
	jnz loc_4167B1
	mov al, 3
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_416858:
	mov eax, dword [dword_4D76BC]
	mov edx, dword [dword_51220C]
	cmp word [eax+edx*2], 0
	jz loc_4167D3
	jmp loc_41683F
;sub_4164C0 endp

off_416870: dd loc_416997
	dd loc_416C3A ; jump table for switch statement
	dd loc_416BFF
	dd loc_416BFF
	dd loc_416BFF

sub_416884: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 4F0Ch
	mov ebp, eax
	mov esi, dword [dword_512214]
	xor edx, edx
	xor ebx, ebx
	xor ecx, ecx
	mov [esp+4EE0h], edx
	mov [esp+4EF8h], ebx
	mov [esp+4EECh], ecx
	mov [esp+4EE8h], ecx
	mov [esp+4EFCh], ebx
	mov edx, 1
	mov [esp+4F00h], bx
	mov [esp+4EF0h], edx
	cmp esi, 2
	jnz loc_4168EA
	mov eax, 0FFFFFFFDh
	add esp, 4F0Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4168EA:
	call sub_41A020
	mov [esp+4F04h], ax
	movsx edx, ax
	mov eax, esp
	call sub_41A570
	xor eax, eax

loc_416903:
	mov ecx, [esp+4F02h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_416941
	imul ecx, edx, 684h
	lea ebx, 0[edx*4]
	mov edx, [esp+ecx+234h]
	mov [esp+ebx+4E80h], edx
	mov edx, [esp+ecx+278h]
	mov [esp+edx*2+4EAEh], ax
	inc eax
	jmp loc_416903

loc_416941:
	xor eax, eax

loc_416943:
	mov ecx, [esp+4F02h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_41696C
	imul edx, 684h
	mov edx, [esp+edx+278h]
	mov [esp+edx*2+4EC6h], ax
	inc eax
	jmp loc_416943

loc_41696C:
	push edi
	mov eax, [ebp+14h]
	xor ebx, ebx
	xor edx, edx
	call sub_415470
	lea eax, [esp+4EB4h]
	call sub_4150B0
	mov edx, dword [dword_512208]
	cmp edx, 4 ; switch 5 cases
	ja loc_416997 ; jumptable 00416990 default case
	jmp off_416870[edx*4] ; switch jump

loc_416997:
	mov edi, dword [dword_51220C] ; jumptable 00416990 default case
	cwde
	cmp eax, edi
	jnz loc_416CA1

loc_4169A6:
	mov word [word_4D3B26], 2DDh

loc_4169AF:
	mov edx, 2
	xor ecx, ecx
	mov eax, ebp
	mov dword [dword_4D2098], ecx
	call sub_410E80
	lea eax, [esp+4]
	call sub_4159E0
	cmp dword [dword_512208], 1
	jle loc_416CCD
	xor eax, eax

loc_4169DB:
	movsx edx, ax
	lea ecx, [edx+edx]
	mov edx, dword [dword_4D76BC]
	mov ebx, [esp+4F04h]
	add bx, [ecx+edx]
	inc eax
	mov [esp+4F04h], bx
	cmp ax, 9
	jl loc_4169DB

loc_416A04:
	mov esi, [esp+4EE4h]
	test esi, esi
	jnz loc_4171F2
	call sub_4833C7
	mov edx, [esp+4EECh]
	mov ecx, [esp+4F00h]
	mov bh, byte [byte_4D76C4]
	add edx, eax
	mov eax, 1
	mov [esp+4EECh], edx
	add ecx, eax
	mov [esp+4EE8h], edx
	mov [esp+4F00h], ecx
	test bh, bh
	jnz loc_416CE2
	xor edx, edx
	mov [esp+4EF4h], edx

loc_416A5B:
	test ax, ax
	jz loc_416D2F

loc_416A64:
	call sub_428A20
	call sub_415E40
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D41B8[eax*4]
	call sub_405B30
	call sub_415CC0
	mov eax, 2D8h
	mov edx, [esp+4F06h]
	call sub_41B650
	movsx ecx, ax
	mov eax, 2D8h
	sar edx, 10h
	call sub_41B670
	movsx ebx, ax
	mov eax, 1
	mov esi, 1Ah
	call sub_415C50
	xor ecx, ecx
	mov [esp+4EF8h], esi
	mov [esp+4F0Ch], cx

loc_416AD3:
	mov edx, [esp+4F06h]
	mov eax, [esp+4F0Ah]
	sar edx, 10h
	sar eax, 10h
	cmp eax, edx
	jge loc_41704A
	mov edx, [esp+eax*2+4EB2h]
	sar edx, 10h
	imul eax, edx, 684h
	test byte [esp+eax+1F8h], 4
	jz loc_416EFF
	lea edx, [edx+edx*8]
	add edx, byte_512E84
	push edx
	push aS_4 ; "%s"
	lea eax, [esp+4E3Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 3
	mov eax, 2D9h
	mov ebx, [esp+4F00h]
	call sub_41B650
	add eax, ebx

loc_416B43:
	movsx ebx, ax
	mov eax, 2D9h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E3Ch]
	call sub_4054E0
	mov eax, [esp+4F0Ah]
	sar eax, 10h
	mov eax, [esp+eax*2+4EB2h]
	sar eax, 10h
	imul eax, 684h
	mov edx, [esp+4F02h]
	sar edx, 10h
	cmp edx, [esp+eax+27Ch]
	jl loc_416FC7
	mov edx, [esp+eax+284h]
	cmp edx, 2
	jnz loc_416F49
	mov eax, 2E3h
	mov ebx, [esp+4EF8h]
	call sub_41B650
	add eax, ebx
	movsx ebx, ax
	mov eax, 2E3h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2E3h

loc_416BD4:
	call sub_405580

loc_416BD9:
	mov esi, [esp+4F0Ch]
	mov ecx, [esp+4EF8h]
	inc esi
	add ecx, 1Ah
	mov [esp+4F0Ch], si
	mov [esp+4EF8h], ecx
	jmp loc_416AD3

loc_416BFF:
	mov eax, dword [dword_51220C] ; jumptable 00416990 cases 2-4
	mov eax, [esp+eax*2+4EB2h]
	sar eax, 10h
	imul eax, 684h
	cmp dword [esp+eax+284h], 1
	jnz loc_416C2C
	mov word [word_4D3B26], 2DEh
	jmp loc_4169AF

loc_416C2C:
	mov word [word_4D3B26], 2DCh
	jmp loc_4169AF

loc_416C3A:
	cmp dword [dword_512264], 2 ; jumptable 00416990 case 1
	jnz loc_416C65
	cmp dword [esp+284h], 1
	jnz loc_416C5B

loc_416C4D:
	mov word [word_4D3B26], 2DDh
	jmp loc_416997 ; jumptable 00416990 default case

loc_416C5B:
	cmp dword [esp+908h], 1
	jz loc_416C4D

loc_416C65:
	cmp dword [dword_512264], 1
	jnz loc_416C93
	movsx edx, ax
	imul edx, 684h
	test byte [esp+edx+1F8h], 4
	jz loc_416997 ; jumptable 00416990 default case
	mov word [word_4D3B26], 2DDh
	jmp loc_416997 ; jumptable 00416990 default case

loc_416C93:
	mov word [word_4D3B26], 2DCh
	jmp loc_416997 ; jumptable 00416990 default case

loc_416CA1:
	mov eax, [esp+edi*2+4EB2h]
	sar eax, 10h
	imul eax, 684h
	cmp dword [esp+eax+284h], 1
	jz loc_4169A6
	mov word [word_4D3B26], 2DCh
	jmp loc_4169AF

loc_416CCD:
	mov eax, [esp+4F08h]
	dec eax
	mov [esp+4F04h], ax
	jmp loc_416A04

loc_416CE2:
	cmp ax, [esp+4EF4h]
	jnz loc_416A5B
	test cx, cx
	jl loc_416A5B
	lea edx, [esp+4EB4h]
	xor eax, eax
	xor cl, cl
	mov [esp+4EF4h], eax
	lea eax, [esp+4]
	mov byte [byte_4D76C4], cl
	call sub_415120
	lea edx, [esp+4EB4h]
	lea eax, [esp+4]
	call sub_4151D0
	jmp loc_416A64

loc_416D2F:
	cmp dword [dword_4D2094], 0
	jnz loc_416A64
	cmp word [esp+4F00h], 0
	jz loc_416D4C
	call sub_423B90

loc_416D4C:
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov edi, eax
	cmp byte [byte_51345E], 0
	jz loc_416D75
	mov eax, 1
	call sub_4164C0
	cmp al, 3
	jnb loc_4170C4

loc_416D75:
	test di, di
	jz loc_416A04
	mov eax, dword [dword_5637F4]
	cmp eax, [esp+4EF0h]
	jle loc_416A04
	cmp word [esp+4EF4h], 0
	jnz loc_416A04
	mov eax, dword [dword_5637F4]
	add eax, 0Fh
	mov [esp+4EF0h], eax
	cmp di, 1Bh
	jnz loc_417149
	mov edi, 0Dh
	mov word [ebp+0Ah], 0

loc_416DC3:
	xor eax, eax
	call sub_41A1A0
	cmp byte [byte_512DA9], 1
	jnz loc_416E4F
	cmp dword [dword_512264], 1
	jle loc_416E4F
	mov eax, dword [dword_4D76BC]
	cmp word [eax], 0
	jnz loc_416E4F
	mov cx, [eax+2]
	cmp cx, 1
	jnz loc_416E4F
	cmp cx, word [word_4D4202]
	jnz loc_416E4F
	mov ebx, 9
	mov edx, byte_512F55
	mov eax, dword_512F4C
	call strncpy_
	mov ebx, 9
	mov edx, byte_512E8D
	mov eax, byte_512E84
	call strncpy_
	mov eax, dword [dword_4D5EF8]
	mov edx, [eax+8FCh]
	mov [eax+278h], edx
	mov edx, [esp+4F06h]
	sar edx, 10h
	mov [eax+8FCh], edx
	xor eax, eax
	mov word [word_4D4202], ax

loc_416E4F:
	cmp byte [byte_51345E], 0
	jz loc_416E9E
	mov eax, 4
	call sub_4164C0
	cmp al, 3
	jnz loc_416E9E
	mov edx, 1
	mov ebx, dword [dword_4D76BC]
	mov word [ebp+0Ah], 3
	mov [esp+4EFCh], edx
	test ebx, ebx
	jz loc_416E8F
	xor esi, esi
	call sub_41A2A0
	mov dword [dword_4D76BC], esi

loc_416E8F:
	xor eax, eax
	xor bl, bl
	mov dword [dword_5121F8], eax
	mov byte [byte_512DAA], bl

loc_416E9E:
	call sub_415BF0

loc_416EA3:
	cmp word [ebp+0Ah], 1
	jnz loc_416ECA
	cmp di, 0Dh
	jnz loc_416ECA
	xor bh, bh
	mov byte [byte_4D76C1], bh
	mov byte [byte_4D76C3], bh
	mov byte [byte_4D76C4], bh
	mov byte [byte_4D76C0], bh

loc_416ECA:
	cmp word [ebp+0Ah], 2
	jnz loc_416EDE
	cmp di, 0Dh
	jnz loc_416EDE
	call sub_4098D0
	xor edi, edi

loc_416EDE:
	cmp word [ebp+0Ah], 3
	jz loc_417163

loc_416EE9:
	movsx edx, di
	mov eax, ebp
	call sub_410414
	mov [esp+4EE4h], eax
	jmp loc_416A04

loc_416EFF:
	lea edx, [esp+4]
	add eax, edx
	lea edi, [esp+4E34h]
	call sub_41A170
	mov esi, eax
	push edi

loc_416F14:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_416F2C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_416F14

loc_416F2C:
	pop edi
	push 2
	push 3
	mov eax, 2D9h
	mov edx, [esp+4F00h]
	call sub_41B650
	add eax, edx
	jmp loc_416B43

loc_416F49:
	cmp edx, 3
	jnz loc_416F82
	mov eax, 2E4h
	mov edx, [esp+4EF8h]
	call sub_41B650
	add eax, edx
	movsx ebx, ax
	mov eax, 2E4h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2E4h
	jmp loc_416BD4

loc_416F82:
	push 4
	push 4
	mov eax, 2E3h
	mov edi, [esp+4F00h]
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2E3h
	call sub_41B670
	add eax, 19h
	movsx edx, ax
	mov eax, 2A5h
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0
	jmp loc_416BD9

loc_416FC7:
	cmp dword [esp+eax+284h], 1
	jz loc_417005
	mov eax, 2E4h
	mov esi, [esp+4EF8h]
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2E4h
	call sub_41B670
	add eax, 19h
	xor ecx, ecx
	movsx edx, ax
	mov eax, 2E4h
	jmp loc_416BD4

loc_417005:
	push 4
	push 4
	mov eax, 2E3h
	mov ecx, [esp+4F00h]
	call sub_41B650
	add eax, ecx
	movsx ebx, ax
	mov eax, 2E3h
	call sub_41B670
	add eax, 19h
	movsx edx, ax
	mov eax, 2A5h
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0
	jmp loc_416BD9

loc_41704A:
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov ebx, 0FFFFFFF6h
	mov eax, [eax+20h]
	mov edx, [esp+4EE8h]
	call sub_426B70
	mov eax, dword [dword_51221C]
	xor ecx, ecx
	call sub_41A3A0
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_41709C
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_41709C:
	cmp word [esp+4F00h], 0
	jz loc_4170AC

loc_4170AC:
	call sub_4976B8
	xor eax, eax
	call sub_403550
	jmp loc_416D4C

loc_4170C4:
	ja loc_41710F
	mov edi, 1
	mov ebx, dword [dword_4D76BC]
	mov [esp+4EFCh], edi
	test ebx, ebx
	jnz loc_41713A

loc_4170DC:
	mov edx, 0Dh
	xor ah, ah
	xor edi, edi
	mov byte [byte_512DAA], ah
	mov dword [dword_5121F8], edi
	call sub_415BF0
	mov eax, ebp
	mov word [ebp+0Ah], 3
	call sub_410414
	mov [esp+4EE4h], eax
	jmp loc_416A04

loc_41710F:
	cmp al, 4
	jnz loc_416D75
	call sub_415BF0
	mov edx, 0Dh
	mov eax, ebp
	mov word [ebp+0Ah], 0
	call sub_410414
	mov [esp+4EE4h], eax
	jmp loc_416A04

loc_41713A:
	xor esi, esi
	call sub_41A2A0
	mov dword [dword_4D76BC], esi
	jmp loc_4170DC

loc_417149:
	cmp word [ebp+0Ah], 0
	jnz loc_416EA3
	cmp di, 0Dh
	jz loc_416DC3
	jmp loc_416EA3

loc_417163:
	cmp di, 0Dh
	jnz loc_416EE9
	cmp word [esp+4EFCh], 0
	jnz loc_416EE9
	push 2ECh
	push 1
	call sub_401AE0
	add esp, 8
	mov [esp+4EFCh], eax
	cmp ax, 1
	jnz loc_4171E5
	mov eax, 1
	call sub_41A1A0
	cmp byte [byte_51345E], 0
	jz loc_4171B5
	mov eax, 3
	call sub_4164C0

loc_4171B5:
	cmp dword [dword_4D76BC], 0
	jz loc_4171CB
	xor ecx, ecx
	call sub_41A2A0
	mov dword [dword_4D76BC], ecx

loc_4171CB:
	xor dl, dl
	xor ebx, ebx
	mov byte [byte_512DAA], dl
	mov dword [dword_5121F8], ebx
	call sub_415BF0
	jmp loc_416EE9

loc_4171E5:
	mov word [ebp+0Ah], 0
	xor edi, edi
	jmp loc_416EE9

loc_4171F2:
	mov ebx, 0FFFFFFF6h
	mov eax, 12h
	xor ecx, ecx
	xor edx, edx
	mov edi, 1
	call sub_4274F0
	call sub_4159C0
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	mov eax, esi
	pop edi
	add esp, 4F0Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_416884 endp

sub_417230: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 4ED4h
	mov ebp, eax
	mov esi, dword [dword_512214]
	xor edx, edx
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+4EB0h], edx
	mov [esp+4EBCh], ecx
	mov [esp+4EB8h], ecx
	xor ebx, ecx
	mov edx, 1
	mov [esp+4ED0h], ebx
	mov [esp+4EC0h], edx
	cmp esi, 2
	jz loc_4172D8
	cmp dword [dword_512208], 1
	jg loc_4172E9
	mov word [word_4D3B96], 2C1h

loc_41728A:
	mov eax, [ebp+14h]
	xor ebx, ebx
	xor edx, edx
	call sub_415470
	call sub_41A020
	mov [esp+4ECCh], ax
	movsx edx, ax
	mov eax, esp
	call sub_41A570
	xor eax, eax

loc_4172AF:
	mov ecx, [esp+4ECAh]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_4172F4
	imul edx, 684h
	mov edx, [esp+edx+278h]
	mov [esp+edx*2+4E96h], ax
	inc eax
	jmp loc_4172AF

loc_4172D8:
	mov eax, 0FFFFFFFDh
	add esp, 4ED4h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4172E9:
	mov word [word_4D3B96], 2CEh
	jmp loc_41728A

loc_4172F4:
	push edi
	lea ebx, [esp+4E84h]
	mov edx, dword [dword_4D76B8]
	mov eax, ecx
	add edx, 2B0h
	call sub_41B470
	lea edx, [esp+4E84h]
	lea eax, [esp+4]
	call sub_414D70
	cmp dword [dword_512208], 1
	jg loc_417753
	xor edi, edi
	mov [esp+4EC8h], di

loc_417336:
	xor edx, edx
	mov eax, ebp
	mov dword [dword_4D2098], edx
	call sub_410E80
	mov edx, 2
	lea eax, [esp+4]
	mov ecx, [esp+4EB4h]
	call sub_4159E0
	test ecx, ecx
	jnz loc_417727
	mov eax, [esp+4ED0h]
	dec eax
	mov [esp+4ECCh], eax

loc_417371:
	call sub_4833C7
	mov esi, [esp+4EBCh]
	mov edx, [esp+4ED4h]
	add esi, eax
	mov eax, 1
	add edx, eax
	mov [esp+4EBCh], esi
	mov [esp+4ED4h], edx
	mov dl, byte [byte_4D76C5]
	mov [esp+4EB8h], esi
	test dl, dl
	jnz loc_417766
	xor edi, edi
	mov [esp+4EC4h], edi

loc_4173B9:
	test ax, ax
	jz loc_417848

loc_4173C2:
	call sub_428A20
	call sub_415E40
	mov edx, 400h
	xor eax, eax
	mov esi, [esp+4ECEh]
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D41A0[eax*4]
	sar esi, 10h
	call sub_405B30
	call sub_415CC0
	mov eax, [esp+esi*2+4E80h]
	sar eax, 10h
	imul eax, 684h
	test byte [esp+eax+1F8h], 4
	jz loc_4177CF
	mov edi, [esp+eax+284h]
	cmp edi, 2
	jnz loc_4177A9
	mov eax, 2D4h
	call sub_41B650
	add eax, 1Ah
	movsx ebx, ax
	mov eax, 2D4h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2D4h
	call sub_405580
	mov eax, 2C9h
	call sub_41B650
	movsx ecx, ax
	mov eax, 2C9h
	mov edx, esi
	call sub_41B670
	movsx ebx, ax
	mov eax, edi

loc_41746E:
	call sub_415C50
	mov edi, [esp+4ECCh]
	test di, di
	jl loc_41759B
	imul esi, edi, 1Ah
	imul eax, [esp+4ED0h], 1Ah
	neg esi
	add esi, eax

loc_417492:
	movsx edx, di
	mov edx, [esp+edx*2+4E82h]
	sar edx, 10h
	imul eax, edx, 684h
	test byte [esp+eax+1F8h], 4
	jz loc_417820
	lea eax, [edx+edx*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E3Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5

loc_4174D3:
	push 3
	mov eax, 2CAh
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2CAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E3Ch]
	call sub_4054E0
	movsx eax, di
	mov eax, [esp+eax*2+4E82h]
	mov edx, dword [dword_4D76B8]
	sar eax, 10h
	mov eax, [edx+eax*2+2AEh]
	sar eax, 10h
	push eax
	push aD_3 ; "%d"
	lea eax, [esp+4E3Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 4
	mov eax, 2CBh
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2CBh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E3Ch]
	call sub_4054E0
	mov eax, 2CBh
	call sub_41B650
	add eax, esi
	dec edi
	movsx ebx, ax
	mov eax, 2C7h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2C7h
	add esi, 1Ah
	call sub_405580
	test di, di
	jge loc_417492

loc_41759B:
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov ebx, 0FFFFFFF6h
	mov eax, [eax+20h]
	mov edx, [esp+4EB8h]
	call sub_426B70
	mov eax, dword [dword_51221C]
	xor ecx, ecx
	call sub_41A3A0
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_4175ED
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_4175ED:
	cmp word [esp+4ED4h], 0
	jz loc_4175FD

loc_4175FD:
	call sub_4976B8
	xor eax, eax
	call sub_403550

loc_417610:
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_417719
	mov ecx, dword [dword_5637F4]
	cmp ecx, [esp+4EC0h]
	jle loc_417719
	mov ecx, dword [dword_5637F4]
	add ecx, 0Fh
	mov [esp+4EC0h], ecx
	cmp ax, 1Bh
	jnz loc_417861
	mov edx, 0Dh
	mov word [ebp+0Ah], 0

loc_41765F:
	call sub_415BF0
	call sub_41A350
	mov eax, [esp+4EC6h]
	mov cl, 1
	sar eax, 10h
	mov byte [byte_4D76C5], cl
	imul ecx, eax, 684h
	cmp dword [esp+ecx+284h], 2
	jnz loc_4176B9
	mov ebx, [esp+4ECEh]
	sar ebx, 10h
	add ebx, ebx
	mov ecx, [esp+ebx+4E80h]
	sar ecx, 10h
	cmp ecx, eax
	jnz loc_41787B
	cmp byte [byte_512DBD], 3
	jnb loc_4176B9
	mov byte [byte_512DBD], 3

loc_4176B9:
	xor edi, edi
	xor ch, ch
	mov dword [dword_5121F8], edi
	mov byte [byte_512DAA], ch

loc_4176C9:
	cmp word [ebp+0Ah], 1
	jnz loc_4176E7
	cmp dx, 0Dh
	jnz loc_4176E7
	xor al, al
	mov byte [byte_4D76C1], al
	mov byte [byte_4D76C2], al
	mov byte [byte_4D76C0], al

loc_4176E7:
	cmp word [ebp+0Ah], 2
	jnz loc_417708
	cmp dx, 0Dh
	jnz loc_417708
	cmp dword [dword_512208], 1
	jle loc_4178CD
	call sub_4098D0
	xor edx, edx

loc_417708:
	movsx edx, dx
	mov eax, ebp
	call sub_410414
	mov [esp+4EB4h], eax

loc_417719:
	cmp dword [esp+4EB4h], 0
	jz loc_417371

loc_417727:
	mov ebx, 0FFFFFFF6h
	mov eax, 12h
	xor ecx, ecx
	xor edx, edx
	call sub_4274F0
	call sub_4159C0
	mov eax, [esp+4EB4h]
	pop edi
	add esp, 4ED4h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_417753:
	mov ax, word [dword_51220C]
	mov [esp+4EC8h], ax
	jmp loc_417336

loc_417766:
	cmp ax, [esp+4EC4h]
	jnz loc_4173B9
	cmp word [esp+4ED4h], 0
	jl loc_4173B9
	lea eax, [esp+4]
	xor dh, dh
	xor esi, esi
	mov byte [byte_4D76C5], dh
	lea edx, [esp+4E84h]
	mov [esp+4EC4h], esi
	call sub_414E80
	jmp loc_4173C2

loc_4177A9:
	mov eax, 2C9h
	call sub_41B650
	movsx ecx, ax
	mov eax, 2C9h
	mov edx, esi
	call sub_41B670
	movsx ebx, ax
	mov eax, 1
	jmp loc_41746E

loc_4177CF:
	mov eax, 2D4h
	call sub_41B650
	add eax, 1Ah
	movsx ebx, ax
	mov eax, 2D4h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2D4h
	call sub_405580
	mov eax, 2C9h
	call sub_41B650
	movsx ecx, ax
	mov eax, 2C9h
	mov edx, esi
	call sub_41B670
	movsx ebx, ax
	mov eax, 2
	jmp loc_41746E

loc_417820:
	lea edx, [esp+4]
	add eax, edx
	call sub_41A170
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E3Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	jmp loc_4174D3

loc_417848:
	cmp word [esp+4ED4h], 0
	jz loc_417610
	call sub_423B90
	jmp loc_417610

loc_417861:
	cmp word [ebp+0Ah], 0
	jnz loc_4176C9
	cmp ax, 0Dh
	jz loc_41765F
	jmp loc_4176C9

loc_41787B:
	mov ecx, [esp+ebx+4E7Eh]
	sar ecx, 10h
	cmp ecx, eax
	jnz loc_4178A2
	cmp byte [byte_512DBD], 2
	jnb loc_4176B9
	mov byte [byte_512DBD], 2
	jmp loc_4176B9

loc_4178A2:
	mov ecx, [esp+ebx+4E7Ch]
	sar ecx, 10h
	cmp ecx, eax
	jnz loc_4176B9
	cmp byte [byte_512DBD], 1
	jnb loc_4176B9
	mov byte [byte_512DBD], 1
	jmp loc_4176B9

loc_4178CD:
	xor bh, bh
	mov ecx, 2
	mov byte [byte_4D76C2], bh
	mov byte [byte_4D76C1], bh
	mov byte [byte_4D76C0], bh
	mov dword [dword_512214], ecx
	jmp loc_417708
;sub_417230 endp

sub_417900: ;SUBROUTINE
	push edx
	push esi
	push ebp
	sub esp, 4ECCh
	mov ebp, eax
	xor edx, edx
	mov [esp+4EB0h], edx
	mov [esp+4EB8h], edx
	mov [esp+4EBCh], edx
	xor edx, edx
	mov esi, dword [dword_512214]
	mov [esp+4EC0h], edx
	cmp esi, 2
	jz loc_4179E2
	mov eax, dword [dword_4D76B8]
	cmp word [eax+2C0h], 6
	jg loc_4179F1
	cmp dword [dword_512208], 1
	jle loc_4179FF
	mov word [word_4D3C02], 2C2h

loc_417963:
	push edi
	push ecx
	push ebx
	mov eax, [ebp+14h]
	xor ebx, ebx
	xor edx, edx
	call sub_415470
	call sub_41A020
	mov [esp+4ED0h], ax
	movsx ecx, ax
	lea eax, [esp+0Ch]
	mov edx, ecx
	lea ebx, [esp+4EA4h]
	call sub_41A570
	mov edx, dword [dword_4D76B8]
	mov eax, ecx
	add edx, 2B0h
	call sub_41B470
	lea edx, [esp+4EA4h]
	lea eax, [esp+0Ch]
	call sub_414D70
	xor eax, eax

loc_4179B9:
	mov ecx, [esp+4ECEh]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_417A0D
	imul edx, 684h
	mov edx, [esp+edx+284h]
	mov [esp+edx*2+4E8Ah], ax
	inc eax
	jmp loc_4179B9

loc_4179E2:
	mov eax, 0FFFFFFFDh
	add esp, 4ECCh
	pop ebp
	pop esi
	pop edx
	ret

loc_4179F1:
	mov word [word_4D3C02], 2C0h
	jmp loc_417963

loc_4179FF:
	mov word [word_4D3C02], 2C1h
	jmp loc_417963

loc_417A0D:
	xor eax, eax
	mov dword [dword_4D2098], eax
	mov eax, ebp
	mov edx, 2
	call sub_410E80
	lea eax, [esp+0Ch]
	call sub_4159E0
	cmp dword [esp+4EC8h], 0
	jnz loc_417D3D
	mov eax, [esp+4ED0h]
	dec eax
	mov [esp+4ED4h], eax

loc_417A46:
	mov ebx, [esp+4EC4h]
	call sub_4833C7
	add ebx, eax
	mov eax, [esp+4ECCh]
	mov edx, 400h
	inc eax
	xor ecx, ecx
	mov [esp+4ECCh], eax
	call sub_428A20
	call sub_415E40
	xor eax, eax
	mov [esp+4EC4h], ebx
	mov al, byte [byte_512DFB]
	mov [esp+4EC0h], ebx
	xor ebx, ebx
	mov eax, dword off_4D4188[eax*4]
	call sub_405B30
	call sub_415CC0
	mov eax, 2BDh
	mov edx, [esp+4ECEh]
	call sub_41B650
	movsx ecx, ax
	mov eax, 2BDh
	sar edx, 10h
	call sub_41B670
	movsx ebx, ax
	mov eax, 1
	mov edi, [esp+4ED4h]
	call sub_415C50
	test di, di
	jl loc_417BF3
	imul esi, edi, 1Ah
	imul eax, [esp+4ED0h], 1Ah
	neg esi
	add esi, eax

loc_417AE9:
	movsx edx, di
	mov edx, [esp+edx*2+4EA2h]
	sar edx, 10h
	imul eax, edx, 684h
	test byte [esp+eax+200h], 4
	jz loc_417D69
	lea edx, [edx+edx*8]
	add edx, byte_512E84
	push edx
	push aS_4 ; "%s"
	lea eax, [esp+4E44h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5

loc_417B2B:
	push 3
	mov eax, 2BEh
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2BEh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E44h]
	call sub_4054E0
	movsx eax, di
	mov eax, [esp+eax*2+4EA2h]
	mov edx, dword [dword_4D76B8]
	sar eax, 10h
	mov eax, [edx+eax*2+2AEh]
	sar eax, 10h
	push eax
	push aD_3 ; "%d"
	lea eax, [esp+4E44h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 4
	mov eax, 2BFh
	call sub_41B650
	add eax, esi
	movsx ebx, ax
	mov eax, 2BFh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E44h]
	call sub_4054E0
	mov eax, 2BFh
	call sub_41B650
	add eax, esi
	dec edi
	movsx ebx, ax
	mov eax, 2C7h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2C7h
	add esi, 1Ah
	call sub_405580
	test di, di
	jge loc_417AE9

loc_417BF3:
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov ebx, 0FFFFFFF6h
	mov eax, [eax+20h]
	mov edx, [esp+4EC0h]
	call sub_426B70
	mov eax, dword [dword_51221C]
	xor ecx, ecx
	call sub_41A3A0
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_417C45
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_417C45:
	cmp word [esp+4ECCh], 0
	jz loc_417C55

loc_417C55:
	call sub_4976B8
	xor eax, eax
	call sub_403550
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov edx, eax
	test ax, ax
	jz loc_417D2F
	mov ecx, dword [dword_5637F4]
	cmp ecx, [esp+4EBCh]
	jle loc_417D2F
	mov ecx, dword [dword_5637F4]
	add ecx, 0Fh
	mov [esp+4EBCh], ecx
	cmp ax, 1Bh
	jnz loc_417D91
	mov edx, 0Dh
	mov word [ebp+0Ah], 0

loc_417CB7:
	call sub_415BF0
	lea eax, [esp+4EA4h]
	call sub_41A530

loc_417CC8:
	cmp word [ebp+0Ah], 1
	jnz loc_417CE9
	cmp dx, 0Dh
	jnz loc_417CE9
	xor ah, ah
	mov byte [byte_4D76C1], ah
	mov byte [byte_4D76C2], ah
	mov byte [byte_4D76C0], ah

loc_417CE9:
	cmp word [ebp+0Ah], 2
	jnz loc_417D1E
	cmp dx, 0Dh
	jnz loc_417D1E
	cmp dword [dword_512208], 1
	jle loc_417DAB
	call sub_4098D0
	xor edx, edx

loc_417D0A:
	xor cl, cl
	mov byte [byte_4D76C1], cl
	mov byte [byte_4D76C2], cl
	mov byte [byte_4D76C0], cl

loc_417D1E:
	movsx edx, dx
	mov eax, ebp
	call sub_410414
	mov [esp+4EC8h], eax

loc_417D2F:
	cmp dword [esp+4EC8h], 0
	jz loc_417A46

loc_417D3D:
	mov ebx, 0FFFFFFF6h
	mov eax, 12h
	xor ecx, ecx
	xor edx, edx
	call sub_4274F0
	call sub_4159C0
	mov eax, [esp+4EC8h]
	pop ebx
	pop ecx
	pop edi
	add esp, 4ECCh
	pop ebp
	pop esi
	pop edx
	ret

loc_417D69:
	lea edx, [esp+0Ch]
	add eax, edx
	call sub_41A170
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E44h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	jmp loc_417B2B

loc_417D91:
	cmp word [ebp+0Ah], 0
	jnz loc_417CC8
	cmp ax, 0Dh
	jz loc_417CB7
	jmp loc_417CC8

loc_417DAB:
	mov dword [dword_512214], 2
	jmp loc_417D0A
;sub_417900 endp

off_417DC0: dd loc_417F8B
	dd loc_418322 ; jump table for switch statement
	dd loc_41827F
	dd loc_41827F
	dd loc_4182A2

sub_417DD4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4F74h
	mov ebp, eax
	xor edx, edx
	xor ebx, ebx
	xor ecx, ecx
	xor edi, edi
	xor eax, eax
	mov [esp+4EECh], edx
	mov [esp+4F04h], ebx
	mov [esp+4F5Ch], bx
	mov [esp+4F2Ch], bx
	mov [esp+4EF0h], ecx
	mov [esp+4EF4h], ecx
	mov [esp+4F60h], edi
	mov [esp+4F30h], ax
	mov edx, 1
	mov edi, dword [dword_512214]
	mov [esp+4F28h], edx
	mov esi, edx
	cmp edi, 2
	jz loc_417EE8
	cmp dword [dword_512264], 2
	jg loc_417EFC
	mov eax, [ebp+20h]
	or byte [eax+2], 1
	mov eax, [ebp+24h]
	or byte [eax+2], 1

loc_417E5F:
	cmp byte [byte_512ECC], 0
	jz loc_417E6F
	mov eax, [ebp+1Ch]
	or byte [eax+8], 1

loc_417E6F:
	mov edx, dword [dword_5121F8]
	cmp edx, 1
	jnz loc_417F0F

loc_417E7E:
	mov word [word_4D3C6E], 2ACh

loc_417E87:
	call sub_41A210
	mov edi, eax
	call sub_41A020
	mov [esp+4F58h], ax
	cmp dword [dword_4D21AC], 0
	jz loc_417F3D

loc_417EA8:
	mov edx, [esp+4F56h]
	mov eax, esp
	sar edx, 10h
	call sub_41A570
	xor eax, eax

loc_417EBB:
	mov ecx, [esp+4F56h]
	sar ecx, 10h
	movsx edx, ax
	cmp edx, ecx
	jge loc_417F7A
	imul edx, 684h
	mov edx, [esp+edx+278h]
	mov [esp+edx*2+4ECEh], ax
	inc eax
	jmp loc_417EBB

loc_417EE8:
	mov esi, 0FFFFFFFDh
	mov eax, esi
	add esp, 4F74h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_417EFC:
	mov eax, [ebp+20h]
	and byte [eax+2], 0FEh
	mov eax, [ebp+24h]
	and byte [eax+2], 0FEh
	jmp loc_417E5F

loc_417F0F:
	cmp edx, 2
	jz loc_417E7E
	cmp dword [dword_512208], 1
	jle loc_417F2F
	mov word [word_4D3C6E], 2AEh
	jmp loc_417E87

loc_417F2F:
	mov word [word_4D3C6E], 2ADh
	jmp loc_417E87

loc_417F3D:
	cmp byte [byte_512ECC], 1
	jz loc_417EA8
	mov edx, dword [dword_4D5A28]
	mov eax, dword [dword_51221C]
	call sub_476750
	mov edx, 1
	mov eax, 64h
	mov dword [dword_4D21AC], edx
	mov edx, dword [dword_4D5A28]
	call sub_4864A0
	jmp loc_417EA8

loc_417F7A:
	mov eax, dword [dword_512208]
	cmp eax, 4 ; switch 5 cases
	ja loc_417F8B ; jumptable 00417F84 default case
	jmp off_417DC0[eax*4] ; switch jump

loc_417F8B:
	mov eax, dword [dword_51221C] ; jumptable 00417F84 default case
	lea edx, [esp+4E80h]
	call sub_41A3A0
	cwde
	mov ecx, [esp+4F28h]
	call sub_41AEF0
	mov [esp+4F34h], eax
	cmp cx, 1
	jnz loc_417FE5
	cmp byte [byte_4D76C1], 1
	jnz loc_417FE5
	mov edx, [esp+4F56h]
	lea ecx, [esp+4F2Ch]
	lea ebx, [esp+4F5Ch]
	mov eax, esp
	sar edx, 10h
	call sub_414760
	mov [esp+4F04h], eax

loc_417FE5:
	mov eax, [ebp+18h]
	mov edx, [esp+4F2Eh]
	call sub_415490
	movsx ebx, si
	sar edx, 10h
	mov eax, [ebp+14h]
	call sub_415470
	mov eax, ebp
	xor ebx, ebx
	xor edx, edx
	mov dword [dword_4D2098], ebx
	call sub_410E80
	mov eax, esp
	call sub_4159E0
	cmp dword [esp+4EECh], 0
	jnz loc_418B67
	mov eax, [esp+4F58h]
	dec eax
	mov [esp+4F0Ch], eax

loc_418037:
	mov edx, [esp+4EF4h]
	call sub_4833C7
	add edx, eax
	mov eax, [esp+4F60h]
	xor ecx, ecx
	inc eax
	xor ebx, ebx
	mov [esp+4F60h], eax
	call sub_428A20
	call sub_415E40
	xor eax, eax
	mov [esp+4EF4h], edx
	mov al, byte [byte_512DFB]
	mov [esp+4EFCh], edx
	mov edx, 400h
	mov eax, dword off_4D41E8[eax*4]
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D4170[eax*4]
	call sub_405B30
	call sub_415CC0
	mov eax, 2B5h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2B5h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2B5h
	call sub_405580
	cmp word [esp+4F34h], 0
	jz loc_41810E
	push 2
	push 3
	mov eax, 2B5h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2B5h
	call sub_41B670
	add eax, 0Ah
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0

loc_41810E:
	cmp dword [dword_512264], 2
	jl loc_418BD7
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2B6h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2B6h
	call sub_405580
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ecx, ax
	mov eax, 2B6h
	call sub_41B670
	mov edx, dword [dword_5121F8+2]
	movsx ebx, ax
	mov eax, 1
	sar edx, 10h
	call sub_415C50
	mov eax, [esp+4F2Eh]
	sar eax, 10h
	imul edx, eax, 684h
	cmp dword [esp+edx+280h], 2
	jnz loc_418388
	lea ebx, [esp+4E30h]
	mov edx, eax
	mov eax, esp
	call sub_41A040
	mov [esp+4F38h], ax
	inc eax
	imul eax, 1Ah
	xor edx, edx
	mov ebx, 1Ah
	mov [esp+4F48h], dx
	mov [esp+4F1Ch], ebx
	mov [esp+4F6Ch], eax

loc_4181C9:
	mov ecx, [esp+4F46h]
	mov ebx, dword [dword_5121FC]
	sar ecx, 10h
	cmp ecx, ebx
	jge loc_418483
	mov eax, [esp+4F2Eh]
	sar eax, 10h
	imul edx, eax, 684h
	lea eax, 0[ecx*4]
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	mov eax, [esp+4F36h]
	sar eax, 10h
	cmp ecx, eax
	jz loc_41836C
	push 4
	push 5
	mov eax, 2B6h
	mov ebx, [esp+4F24h]
	call sub_41B650
	add eax, ebx

loc_418236:
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov eax, [esp+4F48h]
	mov ecx, [esp+4F1Ch]
	inc eax
	add ecx, 1Ah
	mov [esp+4F48h], ax
	mov [esp+4F1Ch], ecx
	jmp loc_4181C9

loc_41827F:
	mov ax, word [dword_51220C] ; jumptable 00417F84 cases 2,3
	lea edx, [esp+4ED0h]
	mov [esp+4F30h], ax
	mov eax, esp
	call sub_4153E0
	mov esi, eax
	jmp loc_417F8B ; jumptable 00417F84 default case

loc_4182A2:
	mov ax, word [dword_51220C] ; jumptable 00417F84 case 4
	mov [esp+4F30h], ax
	xor eax, eax
	cmp bx, 1
	jz loc_417F8B ; jumptable 00417F84 default case

loc_4182BC:
	movsx edx, ax
	mov edx, [esp+edx*2+4ECEh]
	sar edx, 10h
	mov [esp+4EF8h], edx
	imul edx, 684h
	test byte [esp+edx+1F4h], 4
	jz loc_4182FC
	mov edx, [esp+4F2Eh]
	mov ecx, [esp+4EF8h]
	sar edx, 10h
	cmp edx, ecx
	jz loc_4182FC
	mov ebx, 1
	mov esi, eax

loc_4182FC:
	inc eax
	mov edx, [esp+4F56h]
	movsx ecx, ax
	sar edx, 10h
	cmp ecx, edx
	jl loc_418317
	test bx, bx
	jz loc_417F8B ; jumptable 00417F84 default case

loc_418317:
	cmp bx, 1
	jnz loc_4182BC
	jmp loc_417F8B ; jumptable 00417F84 default case

loc_418322:
	mov esi, 1 ; jumptable 00417F84 case 1
	xor eax, eax
	mov ebx, dword [dword_512264]
	mov [esp+4F30h], ax
	cmp ebx, 2
	jge loc_418357
	test byte [esp+1F4h], 4
	jnz loc_417F8B ; jumptable 00417F84 default case
	mov [esp+4F30h], si
	jmp loc_417F8B ; jumptable 00417F84 default case

loc_418357:
	lea edx, [esp+4ED0h]
	mov eax, esp
	call sub_4153E0
	mov esi, eax
	jmp loc_417F8B ; jumptable 00417F84 default case

loc_41836C:
	push 2
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F74h]
	call sub_41B650
	add eax, edx
	jmp loc_418236

loc_418388:
	cmp dword [dword_5121F8], 2
	jz loc_41844A
	mov eax, 1Ah
	xor ecx, ecx
	mov [esp+4F18h], eax
	mov [esp+4F4Ch], cx

loc_4183AB:
	mov edx, [esp+4F2Eh]
	sar edx, 10h
	imul edx, 684h
	mov eax, [esp+4F4Ah]
	sar eax, 10h
	cmp eax, [esp+edx+230h]
	jge loc_418596
	shl eax, 2
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	push 4
	push 5
	mov eax, 2B6h
	mov ebx, [esp+4F20h]
	call sub_41B650
	add eax, ebx
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov ecx, [esp+4F18h]
	mov eax, [esp+4F4Ch]
	add ecx, 1Ah
	inc eax
	mov [esp+4F18h], ecx
	mov [esp+4F4Ch], ax
	jmp loc_4183AB

loc_41844A:
	push 4
	push 5
	mov eax, 2B6h
	call sub_41B650
	add eax, 1Ah
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	call sub_41B670
	movsx edx, ax
	mov eax, 2E4h

loc_418474:
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0

loc_418483:
	movsx eax, si
	mov eax, [esp+eax*2+4ECEh]
	sar eax, 10h
	imul edx, eax, 684h
	cmp dword [esp+edx+280h], 2
	jnz loc_4185E5
	lea ebx, [esp+4E30h]
	mov edx, eax
	mov eax, esp
	call sub_41A040
	mov [esp+4F3Ch], ax
	inc eax
	imul eax, 1Ah
	xor ecx, ecx
	mov [esp+4F68h], eax
	mov eax, 1Ah
	mov [esp+4F64h], cx
	mov [esp+4F24h], eax

loc_4184DD:
	mov ecx, [esp+4F62h]
	mov ebx, dword [dword_5121FC]
	sar ecx, 10h
	cmp ecx, ebx
	jge loc_4186E3
	movsx eax, si
	mov eax, [esp+eax*2+4ECEh]
	sar eax, 10h
	imul edx, eax, 684h
	lea eax, 0[ecx*4]
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	mov eax, [esp+4F3Ah]
	sar eax, 10h
	cmp ecx, eax
	jz loc_4185C9
	push 4
	push 5
	mov eax, 2B6h
	mov ebx, [esp+4F2Ch]
	call sub_41B650
	add eax, ebx

loc_41854D:
	add eax, edi
	movsx ebx, ax
	mov eax, 2AAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov eax, [esp+4F64h]
	mov ecx, [esp+4F24h]
	inc eax
	add ecx, 1Ah
	mov [esp+4F64h], ax
	mov [esp+4F24h], ecx
	jmp loc_4184DD

loc_418596:
	push 4
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F20h]
	call sub_41B650
	add eax, edx
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	call sub_41B670
	movsx edx, ax
	mov eax, 2A5h
	jmp loc_418474

loc_4185C9:
	push 2
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F70h]
	call sub_41B650
	add eax, edx
	jmp loc_41854D

loc_4185E5:
	cmp dword [dword_5121F8], 2
	jz loc_4186AA
	mov ebx, 1Ah
	xor edx, edx
	mov [esp+4F20h], ebx
	mov [esp+4F44h], dx

loc_418608:
	movsx eax, si
	mov eax, [esp+eax*2+4ECEh]
	sar eax, 10h
	imul eax, 684h
	mov edx, [esp+4F42h]
	sar edx, 10h
	cmp edx, [esp+eax+230h]
	jge loc_418BA4
	shl edx, 2
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	push 4
	push 5
	mov eax, 2B6h
	mov ebx, [esp+4F28h]
	call sub_41B650
	add eax, ebx
	add eax, edi
	movsx ebx, ax
	mov eax, 2AAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov ecx, [esp+4F20h]
	mov eax, [esp+4F44h]
	add ecx, 1Ah
	inc eax
	mov [esp+4F20h], ecx
	mov [esp+4F44h], ax
	jmp loc_418608

loc_4186AA:
	push 4
	push 5
	mov eax, 2B6h
	call sub_41B650
	add eax, 1Ah
	add eax, edi
	movsx ebx, ax
	mov eax, 2AAh
	call sub_41B670
	movsx edx, ax
	mov eax, 2E4h

loc_4186D4:
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0

loc_4186E3:
	mov eax, [esp+4F2Eh]
	sar eax, 10h
	mov [esp+4F00h], eax
	lea eax, [eax+eax*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 5
	mov eax, 2BAh
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2BAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	movsx eax, si
	add eax, eax
	mov [esp+4EE8h], eax
	mov eax, [esp+eax+4ECEh]
	sar eax, 10h
	lea eax, [eax+eax*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 5
	mov eax, 2BBh
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2BBh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	imul eax, [esp+4F00h], 684h
	mov eax, [esp+eax+21Ch]
	mov eax, [eax]
	call sub_41A3E0
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 5
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov eax, [esp+4EE8h]
	mov eax, [esp+eax+4ECEh]
	sar eax, 10h
	imul eax, 684h
	mov eax, [esp+eax+21Ch]
	mov eax, [eax]
	call sub_41A3E0
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 5
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2AAh

loc_41885B:
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov edx, [esp+4EFCh]
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_426B70
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_4188B9
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_4188B9:
	cmp word [esp+4F60h], 0
	jz loc_4188C9

loc_4188C9:
	call sub_4976B8
	xor eax, eax
	call sub_403550
	mov eax, ebp
	mov ebx, [esp+4F60h]
	call sub_423CA0
	call sub_405960
	mov [esp+4F40h], ax
	test bx, bx
	jl loc_418976
	mov ecx, [esp+4F04h]
	cmp cx, 1
	jnz loc_418976
	mov eax, [esp+4F28h]
	cmp ax, cx
	jnz loc_418976
	cmp byte [byte_4D76C1], 1
	jnz loc_418976
	mov ebx, [esp+4F5Ah]
	xor edx, edx
	xor ah, ch
	mov ecx, [esp+4F2Ah]
	mov [esp+4F28h], edx
	mov byte [byte_4D76C1], ah
	sar ebx, 10h
	mov edx, [esp+4F56h]
	mov eax, esp
	sar ecx, 10h
	sar edx, 10h
	call sub_414400
	mov [esp+4F34h], eax
	mov eax, dword [dword_51221C]
	lea edx, [esp+4E80h]
	call sub_41A3A0
	cwde
	call sub_41AEF0

loc_418976:
	cmp word [esp+4F40h], 0
	jz loc_418B59
	mov eax, dword [dword_5637F4]
	cmp eax, [esp+4EF0h]
	jle loc_418B59
	cmp word [esp+4F04h], 0
	jnz loc_418EE8

loc_4189A6:
	mov eax, dword [dword_5637F4]
	add eax, 0Fh
	mov [esp+4EF0h], eax
	cmp word [ebp+0Ah], 2
	jnz loc_4189E3
	cmp word [esp+4F40h], 0Dh
	jnz loc_4189E3
	cmp dword [dword_512208], 1
	jle loc_418EFA
	xor ebx, ebx
	call sub_4098D0
	mov [esp+4F40h], bx

loc_4189E3:
	cmp word [ebp+0Ah], 3
	jnz loc_4189FA
	cmp word [esp+4F40h], 0Dh
	jnz loc_4189FA
	call sub_415BF0

loc_4189FA:
	cmp word [ebp+0Ah], 4
	jnz loc_418A10
	cmp word [esp+4F40h], 0Dh
	jz loc_418F11

loc_418A10:
	mov ecx, [esp+4F40h]
	cmp cx, 1Bh
	jnz loc_418F59
	mov ebx, 0Dh
	mov word [ebp+0Ah], 0
	mov [esp+4F40h], bx

loc_418A34:
	cmp dword [dword_5121F8], 0
	jz loc_418F73
	xor bl, bl
	mov byte [byte_4D76C2], bl
	mov byte [byte_4D76C1], bl

loc_418A4F:
	cmp word [ebp+0Ah], 1
	jnz loc_418A7B
	cmp word [esp+4F40h], 0Dh
	jnz loc_418A7B
	xor cl, cl
	mov byte [byte_4D76C1], cl
	mov byte [byte_4D76C2], cl
	mov byte [byte_4D76C3], cl
	mov byte [byte_4D76C0], cl

loc_418A7B:
	cmp dword [dword_512264], 2
	jle loc_418B41
	mov edx, [esp+4F40h]
	cmp dx, 4D00h
	jnz loc_418F7D
	mov eax, 0Dh
	mov word [ebp+0Ah], 6
	mov [esp+4F40h], ax

loc_418AAD:
	mov ecx, dword [dword_51220C]

loc_418AB3:
	mov eax, [esp+4F56h]
	sar eax, 10h
	movsx edx, si
	dec eax
	cmp edx, eax
	jnz loc_419009
	xor esi, esi

loc_418ACB:
	movsx eax, si
	mov eax, [esp+eax*2+4ECEh]
	sar eax, 10h
	imul edx, eax, 684h
	test byte [esp+edx+1F4h], 4
	jz loc_418AB3
	cmp eax, ecx
	jz loc_418AB3
	mov edx, 7Fh
	xor eax, eax
	mov word [ebp+0Ah], 6

loc_418AF9:
	call sub_4423F0

loc_418AFE:
	mov dx, [ebp+0Ah]
	cmp dx, 5
	jnz loc_41900F

loc_418B0C:
	mov ecx, [esp+4F40h]
	cmp cx, 4800h
	jnz loc_41901E

loc_418B1E:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	mov eax, ebp
	mov word [ebp+0Ah], 0
	xor edx, edx
	call sub_423E10
	mov [esp+4F40h], dx

loc_418B41:
	mov edx, [esp+4F3Eh]
	mov eax, ebp
	sar edx, 10h
	call sub_410414
	mov [esp+4EECh], eax

loc_418B59:
	cmp dword [esp+4EECh], 0
	jz loc_418037

loc_418B67:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov esi, 1
	call sub_4274F0
	call sub_4159C0
	xor eax, eax
	mov dword [dword_4D1FFC], esi
	call sub_403550
	mov esi, [esp+4EECh]
	mov eax, esi
	add esp, 4F74h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_418BA4:
	push 4
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F28h]
	call sub_41B650
	add eax, edx
	add eax, edi
	movsx ebx, ax
	mov eax, 2AAh
	call sub_41B670
	movsx edx, ax
	mov eax, 2A5h
	jmp loc_4186D4

loc_418BD7:
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2B6h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 2B6h
	call sub_405580
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ecx, ax
	mov eax, 2B6h
	call sub_41B670
	mov edx, dword [dword_5121F8+2]
	movsx ebx, ax
	mov eax, 1
	sar edx, 10h
	call sub_415C50
	mov edx, [esp+4F2Eh]
	sar edx, 10h
	imul eax, edx, 684h
	cmp dword [esp+eax+280h], 2
	jnz loc_418D4E
	lea ebx, [esp+4E30h]
	mov eax, esp
	call sub_41A040
	mov [esp+4F70h], ax
	inc eax
	imul eax, 1Ah
	xor edx, edx
	mov ebx, 1Ah
	mov [esp+4F50h], dx
	mov [esp+4F14h], ebx
	mov [esp+4F08h], eax

loc_418C83:
	mov ecx, [esp+4F4Eh]
	mov ebx, dword [dword_5121FC]
	sar ecx, 10h
	cmp ecx, ebx
	jge loc_418E3C
	mov eax, [esp+4F2Eh]
	sar eax, 10h
	imul edx, eax, 684h
	lea eax, 0[ecx*4]
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	mov eax, [esp+4F6Eh]
	sar eax, 10h
	cmp ecx, eax
	jz loc_418D35
	push 4
	push 5
	mov eax, 2B6h
	mov ebx, [esp+4F1Ch]
	call sub_41B650
	add eax, ebx

loc_418CEC:
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov eax, [esp+4F50h]
	mov ecx, [esp+4F14h]
	inc eax
	add ecx, 1Ah
	mov [esp+4F50h], ax
	mov [esp+4F14h], ecx
	jmp loc_418C83

loc_418D35:
	push 2
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F10h]
	call sub_41B650
	add eax, edx
	jmp loc_418CEC

loc_418D4E:
	mov ecx, 1Ah
	xor ebx, ebx
	mov [esp+4F10h], ecx
	mov [esp+4F54h], bx

loc_418D64:
	mov edx, [esp+4F2Eh]
	sar edx, 10h
	imul edx, 684h
	mov eax, [esp+4F52h]
	sar eax, 10h
	cmp eax, [esp+edx+230h]
	jge loc_418DFF
	shl eax, 2
	add eax, edx
	lea edx, [esp+4E30h]
	mov eax, [esp+eax+238h]
	call sub_41B150
	push 4
	push 5
	mov eax, 2B6h
	mov edx, [esp+4F18h]
	call sub_41B650
	add eax, edx
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	mov ebx, [esp+4F10h]
	mov ecx, [esp+4F54h]
	add ebx, 1Ah
	inc ecx
	mov [esp+4F10h], ebx
	mov [esp+4F54h], cx
	jmp loc_418D64

loc_418DFF:
	push 4
	push 5
	mov eax, 2B6h
	mov ecx, [esp+4F18h]
	call sub_41B650
	add eax, ecx
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	call sub_41B670
	movsx edx, ax
	mov eax, 2A5h
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0

loc_418E3C:
	mov eax, [esp+4F2Eh]
	sar eax, 10h
	mov [esp+4F00h], eax
	lea eax, [eax+eax*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 5
	mov eax, 2AAh
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0
	imul eax, [esp+4F00h], 684h
	mov eax, [esp+eax+21Ch]
	mov eax, [eax]
	call sub_41A3E0
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E38h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 5
	mov eax, 2B6h
	call sub_41B650
	add eax, edi
	movsx ebx, ax
	mov eax, 2A8h
	jmp loc_41885B

loc_418EE8:
	cmp byte [byte_4D76C1], 0
	jz loc_4189A6
	jmp loc_418B59

loc_418EFA:
	mov dword [dword_512214], 2
	xor dh, dh
	mov byte [byte_4D76C1], dh
	jmp loc_4189E3

loc_418F11:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov edi, 1
	call sub_4274F0
	xor esi, esi
	call sub_4159C0
	mov dword [dword_4D21AC], esi
	call sub_4762E0
	mov esi, dword_4D28C4
	xor eax, eax
	mov dword [dword_4D1FFC], edi
	call sub_403550
	mov eax, esi
	add esp, 4F74h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_418F59:
	cmp word [ebp+0Ah], 0
	jnz loc_418A4F
	cmp cx, 0Dh
	jz loc_418A34
	jmp loc_418A4F

loc_418F73:
	call sub_415BF0
	jmp loc_418A4F

loc_418F7D:
	cmp dx, 4B00h
	jnz loc_418FDA
	mov ecx, 0Dh
	mov word [ebp+0Ah], 5
	mov [esp+4F40h], cx

loc_418F97:
	test si, si
	jnz loc_419006
	mov esi, [esp+4F0Ch]

loc_418FA3:
	movsx eax, si
	mov eax, [esp+eax*2+4ECEh]
	sar eax, 10h
	imul edx, eax, 684h
	test byte [esp+edx+1F4h], 4
	jz loc_418F97
	cmp eax, dword [dword_51220C]
	jz loc_418F97
	mov edx, 7Fh
	xor eax, eax
	mov word [ebp+0Ah], 5
	jmp loc_418AF9

loc_418FDA:
	cmp word [ebp+0Ah], 5
	jnz loc_418FE7
	cmp dx, 0Dh
	jz loc_418F97

loc_418FE7:
	cmp word [ebp+0Ah], 6
	jnz loc_418AFE
	cmp word [esp+4F40h], 0Dh
	jz loc_418AAD
	jmp loc_418AFE

loc_419006:
	dec esi
	jmp loc_418FA3

loc_419009:
	inc esi
	jmp loc_418ACB

loc_41900F:
	cmp dx, 6
	jz loc_418B0C
	jmp loc_418B41

loc_41901E:
	cmp cx, 5000h
	jz loc_418B1E
	jmp loc_418B41
;sub_417DD4 endp

off_419030: dd loc_41924E
	dd loc_419B54 ; jump table for switch statement
	dd loc_419AC4
	dd loc_419AC4
	dd loc_419ADC

sub_419044: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4F6Ch
	mov ebp, eax
	mov edi, dword [dword_512214]
	xor edx, edx
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+4F44h], edx
	mov [esp+4F38h], ebx
	mov [esp+4F48h], ebx
	mov edx, 1
	mov [esp+4F5Ch], ecx
	mov [esp+4F50h], edx
	mov [esp+4F64h], dx
	cmp edi, 2
	jz loc_419202
	cmp byte [byte_4D76C0], 1
	jz loc_419214

loc_4190A4:
	call sub_41A020
	mov [esp+4F60h], ax
	cmp dword [dword_4D21AC], 0
	jnz loc_4190E5
	cmp byte [byte_512ECC], 1
	jz loc_4190E5
	mov edx, dword [dword_4D5A28]
	mov eax, dword [dword_51221C]
	call sub_476750
	xor eax, eax
	mov edx, 1
	call sub_489800
	mov dword [dword_4D21AC], edx

loc_4190E5:
	cmp dword [dword_4D5EF8], 0
	jnz loc_41911D
	mov esi, aCNfs2seFront_3 ; "c:\\nfs2se\\frontend\\common\\Statdisp.c"
	mov edi, 0C2h
	mov ebx, 20h
	mov edx, 4E30h
	mov eax, aDumicars ; "dumicars"
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_4844B0
	mov dword [dword_4D5EF8], eax

loc_41911D:
	mov edx, [esp+4F5Eh]
	mov eax, esp
	sar edx, 10h
	call sub_41A570
	cmp dword [dword_5121F8], 1
	jnz loc_41914F
	cmp byte [byte_4D76C2], 1
	jnz loc_41914F
	mov eax, esp
	xor bl, bl
	call sub_413650
	mov byte [byte_4D76C2], bl

loc_41914F:
	cmp dword [dword_5121F8], 2
	jnz loc_41916F
	cmp byte [byte_4D76C3], 1
	jnz loc_41916F
	mov eax, esp
	call sub_4131C4
	xor al, al
	mov byte [byte_4D76C3], al

loc_41916F:
	cmp byte [byte_512DAF], 1
	jnz loc_419191
	cmp word [word_4D4204], 1
	jnz loc_419191
	mov eax, esp
	call sub_424E60
	xor eax, eax
	mov word [word_4D4204], ax

loc_419191:
	cmp byte [byte_4D76C0], 1
	jnz loc_4191A3
	mov edx, esp
	mov eax, ebp
	call sub_4154C0

loc_4191A3:
	cmp byte [byte_512ECC], 1
	jnz loc_419228

loc_4191B0:
	lea ebx, [esp+4E30h]
	mov eax, dword [dword_51221C]
	mov edx, dword [dword_5121F8+2]
	call sub_41A3A0
	sar edx, 10h
	cwde
	call sub_41ACA0
	mov [esp+4F54h], eax
	xor eax, eax

loc_4191D9:
	mov ebx, [esp+4F5Eh]
	movsx edx, ax
	sar ebx, 10h
	cmp edx, ebx
	jge loc_41923D
	imul edx, 684h
	mov edx, [esp+edx+278h]
	mov [esp+edx*2+4F1Eh], ax
	inc eax
	jmp loc_4191D9

loc_419202:
	mov eax, 0FFFFFFFDh
	add esp, 4F6Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_419214:
	mov edx, 30h
	mov eax, dword_4E5FFC
	call sub_48A01C
	jmp loc_4190A4

loc_419228:
	mov eax, 64h
	mov edx, dword [dword_4D5A28]
	call sub_4864A0
	jmp loc_4191B0

loc_41923D:
	mov eax, dword [dword_512208]
	cmp eax, 4 ; switch 5 cases
	ja loc_41924E ; jumptable 00419247 default case
	jmp off_419030[eax*4] ; switch jump

loc_41924E:
	xor eax, eax ; jumptable 00419247 default case
	mov edx, [esp+4F60h]
	mov [esp+4F68h], ax
	cmp dx, 1

loc_419263:
	jle loc_41927B

loc_419265:
	lea edx, [esp+4F20h]
	mov eax, esp
	call sub_415440
	mov [esp+4F64h], ax

loc_41927B:
	cmp word [esp+4F60h], 2
	jle loc_419BFC
	mov eax, [ebp+1Ch]
	and byte [eax+2], 0FEh
	mov eax, [ebp+20h]
	and byte [eax+2], 0FEh

loc_419298:
	mov ebx, [esp+4F62h]
	mov eax, [ebp+10h]
	mov edx, [esp+4F66h]
	call sub_415490
	sar ebx, 10h
	sar edx, 10h
	mov eax, [ebp+14h]
	call sub_415470
	cmp byte [byte_512ECC], 0
	jz loc_4192CC
	mov eax, [ebp+18h]
	or byte [eax+8], 1

loc_4192CC:
	mov eax, ebp
	xor esi, esi
	xor edx, edx
	mov dword [dword_4D2098], esi
	call sub_410E80
	mov eax, esp
	mov edi, [esp+4F44h]
	call sub_4159E0
	test edi, edi
	jnz loc_419A89
	mov eax, [esp+4F60h]
	dec eax
	mov [esp+4F58h], eax

loc_419302:
	call sub_4833C7
	mov ecx, [esp+4F48h]
	mov edx, 400h
	add ecx, eax
	call sub_428A20
	call sub_415E40
	mov [esp+4F48h], ecx
	mov [esp+4F40h], ecx
	xor eax, eax
	mov ecx, [esp+4F5Ch]
	mov al, byte [byte_512DFB]
	xor ebx, ebx
	inc ecx
	mov eax, dword off_4D41E8[eax*4]
	mov [esp+4F5Ch], ecx
	xor ecx, ecx
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, dword off_4D4158[eax*4]
	call sub_405B30
	call sub_415CC0
	cmp byte [byte_512DFB], 5
	jnz loc_419C0F
	mov esi, dword [dword_5121FC]
	push esi
	mov eax, 2B8h
	call sub_41B710
	push eax
	push aSD_0 ; "%s %d"

loc_419398:
	lea eax, [esp+4E8Ch]
	push eax
	call sprintf_
	add esp, 10h
	push 2
	push 4
	mov eax, 2B8h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2B8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0
	mov eax, 288h
	call sub_41B650
	movsx ebx, ax
	mov eax, 288h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 288h
	mov esi, [esp+4F54h]
	call sub_405580
	test si, si
	jz loc_41943D
	push 2
	push 3
	mov eax, 288h
	call sub_41B650
	movsx ebx, ax
	mov eax, 288h
	call sub_41B670
	add eax, 0Ah
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+4E38h]
	call sub_4054E0

loc_41943D:
	mov eax, 284h
	call sub_41B650
	movsx ebx, ax
	mov eax, 284h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 284h
	call sub_405580
	mov eax, 285h
	mov edi, 27Dh
	call sub_41B650
	movsx ebx, ax
	mov eax, 285h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 285h
	mov [esp+4F4Ch], di
	call sub_405580
	mov eax, 286h
	mov edi, [esp+4F66h]
	call sub_41B650
	movsx ebx, ax
	mov eax, 286h
	xor ecx, ecx
	call sub_41B670
	movsx edx, ax
	mov eax, 286h
	sar edi, 10h
	call sub_405580
	lea eax, [edi+edi*8]
	add eax, byte_512E84
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E88h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 5
	mov eax, 2A1h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Dh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0
	imul esi, edi, 684h
	mov eax, [esp+esi+21Ch]
	mov eax, [eax]
	call sub_41A3E0
	push eax
	push aS_4 ; "%s"
	lea eax, [esp+4E88h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 5
	mov eax, 284h
	call sub_41B650
	sub eax, 18h
	movsx ebx, ax
	mov eax, 27Dh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0
	cmp dword [esp+esi+280h], 2
	jnz loc_419C2B
	mov ax, [esp+esi+278h]
	add eax, 288h
	push 4
	movsx ecx, ax
	push 5
	mov eax, ecx
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Dh
	call sub_41B670
	cwde
	mov [esp+4F44h], eax
	mov edx, [esp+4F44h]
	mov eax, ecx
	mov ecx, 12h
	call sub_41B710
	call sub_4054E0
	lea edx, [esp+4E80h]
	mov eax, [esp+esi+234h]
	shl edi, 2
	call sub_41B150
	mov ecx, dword dword_4E5FFC[edi]
	test ecx, ecx
	jz loc_419636
	lea eax, [ecx+288h]
	call sub_41B710
	push eax
	lea eax, [esp+4E84h]
	push eax
	push aSS_0 ; "%s (%s)"
	lea eax, [esp+4EDCh]
	push eax
	call sprintf_
	add esp, 10h
	lea esi, [esp+4ED0h]
	lea edi, [esp+4E80h]
	push edi

loc_41961D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_419635
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41961D

loc_419635:
	pop edi

loc_419636:
	push 4
	push 5
	mov eax, 285h
	mov esi, [esp+4F52h]
	call sub_41B650
	sar esi, 10h
	movsx ebx, ax
	mov eax, esi
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0
	mov edx, [esp+4F66h]
	lea ebx, [esp+4E80h]
	mov eax, esp
	sar edx, 10h
	call sub_41A0B0
	push 4
	push 5
	mov eax, 286h
	call sub_41B650
	movsx ebx, ax
	mov eax, esi
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]

loc_4196AB:
	call sub_4054E0
	cmp word [esp+4F60h], 1
	jle loc_419853
	cmp dword [dword_512208], 0
	jnz loc_419C98
	mov eax, [esp+4F62h]
	sar eax, 10h
	mov eax, [esp+eax*2+4F1Eh]
	sar eax, 10h
	imul edx, eax, 684h

loc_4196E6:
	mov ecx, esp
	add edx, ecx
	call sub_415DA0

loc_4196EF:
	mov edx, [esp+4F62h]
	sar edx, 10h
	lea ecx, [edx+edx]
	mov eax, [esp+ecx+4F1Eh]
	sar eax, 10h
	imul eax, 684h
	mov eax, [esp+eax+21Ch]
	mov eax, [eax]
	call sub_415D40
	mov eax, [esp+ecx+4F1Eh]
	sar eax, 10h
	imul eax, 684h
	cmp dword [esp+eax+280h], 2
	jnz loc_419CD2
	mov eax, edx
	call sub_415D00
	mov eax, [esp+ecx+4F1Eh]
	sar eax, 10h
	imul eax, 684h
	lea edx, [esp+4E80h]
	mov eax, [esp+eax+234h]
	call sub_41B150
	cmp dword [dword_512208], 1
	jg loc_4197D3
	mov eax, [esp+ecx+4F1Eh]
	sar eax, 10h
	shl eax, 2
	mov edx, dword dword_4E5FFC[eax]
	test edx, edx
	jz loc_4197D3
	lea eax, [edx+0B3h]
	call sub_41B710
	push eax
	lea eax, [esp+4E84h]
	push eax
	push aSS_0 ; "%s (%s)"
	lea eax, [esp+4EDCh]
	push eax
	call sprintf_
	add esp, 10h
	lea esi, [esp+4ED0h]
	lea edi, [esp+4E80h]
	push edi

loc_4197BA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4197D2
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4197BA

loc_4197D2:
	pop edi

loc_4197D3:
	push 4
	push 5
	mov eax, 285h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Eh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]
	call sub_4054E0
	mov eax, [esp+4F62h]
	sar eax, 10h
	lea ebx, [esp+4E80h]
	mov edx, [esp+eax*2+4F1Eh]
	mov eax, esp
	sar edx, 10h
	call sub_41A0B0
	push 4
	push 5
	mov eax, 286h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Eh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+4E88h]

loc_41984E:
	call sub_4054E0

loc_419853:
	mov eax, ebp
	call sub_40FA90
	mov eax, [esp+4F1Eh]
	sar eax, 10h
	imul eax, 684h
	mov edx, [esp+eax+21Ch]
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	mov dx, [edx]
	call sub_426B70
	cmp dx, 0Ch
	jge loc_41989C
	mov edx, [esp+4F40h]
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	call sub_4274F0

loc_41989C:
	cmp dword [dword_4D2310], 0
	jz loc_4198B8
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_4198B8:
	cmp word [esp+4F5Ch], 0
	jz loc_4198C8

loc_4198C8:
	call sub_4976B8
	xor eax, eax
	call sub_403550
	xor ebx, ebx
	mov eax, ebp
	mov dword [dword_4D2094], ebx
	call sub_423CA0
	cmp word [word_51345C], 0
	jz loc_419911
	call sub_401080
	mov eax, 300h
	xor ecx, ecx
	call sub_402CD0
	mov word [word_51345C], cx
	call sub_48A2B4

loc_419911:
	mov esi, [esp+4F50h]
	cmp si, 1
	jnz loc_419984
	cmp byte [byte_4D76C0], 1
	jnz loc_419984
	cmp word [esp+4F5Ch], 0
	jl loc_419984
	mov edx, [esp+4F5Eh]
	xor eax, eax
	mov ebx, dword_4E5FFC
	mov [esp+4F50h], eax
	xor al, al
	sar edx, 10h
	mov byte [byte_4D76C0], al
	mov eax, esp
	call sub_413BF0
	cmp ax, si
	jnz loc_419984
	lea ebx, [esp+4E30h]
	mov eax, dword [dword_51221C]
	mov edx, dword [dword_5121F8+2]
	call sub_41A3A0
	sar edx, 10h
	cwde
	call sub_41ACA0
	mov [esp+4F54h], eax

loc_419984:
	call sub_405960
	mov ebx, eax
	test ax, ax
	jz loc_419A7B
	mov edx, dword [dword_5637F4]
	cmp edx, [esp+4F38h]
	jle loc_419A7B
	cmp byte [byte_4D76C0], 0
	jnz loc_419A7B
	mov edx, dword [dword_5637F4]
	add edx, 0Fh
	mov [esp+4F38h], edx
	cmp ax, 1Bh
	jnz loc_419D3F
	mov ebx, 0Dh
	mov word [ebp+0Ah], 0

loc_4199D9:
	xor dh, dh
	mov byte [byte_4D76C2], dh
	mov byte [byte_4D76C0], dh

loc_4199E7:
	cmp word [ebp+0Ah], 2
	jnz loc_419A08
	cmp bx, 0Dh
	jnz loc_419A08
	cmp dword [dword_512208], 1
	jle loc_419D59
	call sub_4098D0
	xor ebx, ebx

loc_419A08:
	cmp word [ebp+0Ah], 1
	jnz loc_419A1A
	cmp bx, 0Dh
	jnz loc_419A1A
	call sub_415BF0

loc_419A1A:
	cmp word [ebp+0Ah], 3
	jnz loc_419A2B
	cmp bx, 0Dh
	jz loc_419D7C

loc_419A2B:
	cmp word [esp+4F60h], 2
	jle loc_419A6A
	mov dx, [ebp+0Ah]
	cmp dx, 4
	jnz loc_419DC2

loc_419A44:
	cmp bx, 4800h
	jnz loc_419EC5

loc_419A4F:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor ebx, ebx
	mov eax, ebp
	mov word [ebp+0Ah], 0
	call sub_423E10

loc_419A6A:
	movsx edx, bx
	mov eax, ebp
	call sub_410414
	mov [esp+4F44h], eax

loc_419A7B:
	cmp dword [esp+4F44h], 0
	jz loc_419302

loc_419A89:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	call sub_4274F0
	call sub_4159C0
	mov edx, 1
	xor eax, eax
	mov dword [dword_4D1FFC], edx
	call sub_403550
	mov eax, [esp+4F44h]
	add esp, 4F6Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_419AC4:
	lea edx, [esp+4F20h] ; jumptable 00419247 cases 2,3
	mov eax, esp
	call sub_4153E0
	xor ecx, ecx
	mov [esp+4F64h], ax

loc_419ADC:
	mov ax, word [dword_51220C] ; jumptable 00419247 case 4
	mov [esp+4F68h], ax
	xor eax, eax
	cmp cx, 1
	jz loc_41927B

loc_419AF6:
	movsx edx, ax
	mov edx, [esp+edx*2+4F1Eh]
	sar edx, 10h
	imul ebx, edx, 684h
	test byte [esp+ebx+1F4h], 4
	jz loc_419B2E
	mov ebx, [esp+4F66h]
	sar ebx, 10h
	cmp edx, ebx
	jz loc_419B2E
	mov ecx, 1
	mov [esp+4F64h], ax

loc_419B2E:
	inc eax
	mov edx, [esp+4F5Eh]
	movsx ebx, ax
	sar edx, 10h
	cmp ebx, edx
	jl loc_419B49
	test cx, cx
	jz loc_419265

loc_419B49:
	cmp cx, 1
	jnz loc_419AF6
	jmp loc_41927B

loc_419B54:
	mov ebx, 1 ; jumptable 00419247 case 1
	xor edx, edx
	mov [esp+4F64h], bx
	mov ebx, dword [dword_512264]
	mov [esp+4F68h], dx
	cmp ebx, 2
	jge loc_419BB6
	test byte [esp+1F4h], 4
	jz loc_419B8E
	cmp word [esp+4F60h], 1
	jmp loc_419263

loc_419B8E:
	lea edx, [esp+4F20h]
	mov eax, esp
	mov ecx, 1
	call sub_415440
	mov [esp+4F64h], ax
	mov [esp+4F68h], cx
	jmp loc_41927B

loc_419BB6:
	xor eax, eax
	cmp cx, 1
	jz loc_41927B

loc_419BC2:
	movsx edx, ax
	mov edx, [esp+edx*2+4F1Eh]
	sar edx, 10h
	imul ebx, edx, 684h
	test byte [esp+ebx+1F4h], 4
	jz loc_419BF0
	test edx, edx
	jz loc_419BF0
	mov ecx, 1
	mov [esp+4F64h], ax

loc_419BF0:
	inc eax
	cmp cx, 1
	jnz loc_419BC2
	jmp loc_41927B

loc_419BFC:
	mov eax, [ebp+1Ch]
	or byte [eax+2], 1
	mov eax, [ebp+20h]
	or byte [eax+2], 1
	jmp loc_419298

loc_419C0F:
	mov eax, 2B8h
	call sub_41B710
	push eax
	mov ebx, dword [dword_5121FC]
	push ebx
	push aDS ; "%d %s"
	jmp loc_419398

loc_419C2B:
	cmp dword [dword_5121F8], 2
	jnz loc_419C66
	push 4
	push 5
	mov eax, 289h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Dh
	call sub_41B670
	movsx edx, ax
	mov eax, 2E4h
	mov ecx, 12h
	call sub_41B710
	jmp loc_4196AB

loc_419C66:
	push 4
	push 5
	mov eax, 289h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Dh
	call sub_41B670
	movsx edx, ax
	mov eax, 2A5h
	mov ecx, 12h
	call sub_41B710
	jmp loc_4196AB

loc_419C98:
	mov eax, [esp+4F62h]
	sar eax, 10h
	mov eax, [esp+eax*2+4F1Eh]
	sar eax, 10h
	imul edx, eax, 684h
	test byte [esp+edx+1F4h], 4
	jz loc_4196E6
	lea eax, [eax+eax*8]
	add eax, byte_512E84
	call sub_415E00
	jmp loc_4196EF

loc_419CD2:
	cmp dword [dword_5121F8], 2
	jnz loc_419D0D
	push 4
	push 5
	mov eax, 295h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Eh
	call sub_41B670
	movsx edx, ax
	mov eax, 2E4h
	mov ecx, 12h
	call sub_41B710
	jmp loc_41984E

loc_419D0D:
	push 4
	push 5
	mov eax, 295h
	call sub_41B650
	movsx ebx, ax
	mov eax, 27Eh
	call sub_41B670
	movsx edx, ax
	mov eax, 2A5h
	mov ecx, 12h
	call sub_41B710
	jmp loc_41984E

loc_419D3F:
	cmp word [ebp+0Ah], 0
	jnz loc_4199E7
	cmp ax, 0Dh
	jz loc_4199D9
	jmp loc_4199E7

loc_419D59:
	xor ch, ch
	mov eax, 2
	mov byte [byte_4D76C3], ch
	mov byte [byte_4D76C2], ch
	mov byte [byte_4D76C0], ch
	mov dword [dword_512214], eax
	jmp loc_419A08

loc_419D7C:
	mov eax, 12h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov esi, 1
	call sub_4274F0
	xor ebx, ebx
	call sub_4159C0
	mov dword [dword_4D21AC], ebx
	call sub_4762E0
	xor eax, eax
	mov dword [dword_4D1FFC], esi
	call sub_403550
	mov eax, dword_4D28C4
	add esp, 4F6Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_419DC2:
	cmp dx, 5
	jz loc_419A44

loc_419DCC:
	cmp bx, 4B00h
	jnz loc_419E41
	mov eax, [esp+4F64h]
	test ax, ax
	jnz loc_419EFB
	mov eax, [esp+4F58h]
	mov [esp+4F64h], ax

loc_419DF2:
	mov eax, [esp+4F62h]
	sar eax, 10h
	mov eax, [esp+eax*2+4F1Eh]
	mov edx, dword [dword_51220C]
	sar eax, 10h
	cmp eax, edx
	jnz loc_419E2F
	mov ecx, [esp+4F64h]
	test cx, cx
	jnz loc_419F0B
	mov eax, [esp+4F58h]
	mov [esp+4F64h], ax

loc_419E2F:
	mov edx, 7Fh
	xor eax, eax
	mov word [ebp+0Ah], 4
	call sub_4423F0

loc_419E41:
	cmp bx, 4D00h
	jnz loc_419A6A

loc_419E4C:
	mov eax, [esp+4F5Eh]
	mov edx, [esp+4F62h]
	sar eax, 10h
	sar edx, 10h
	dec eax
	cmp edx, eax
	jnz loc_419F1B
	xor eax, eax
	mov [esp+4F64h], ax

loc_419E73:
	mov eax, [esp+4F62h]
	sar eax, 10h
	mov edx, [esp+eax*2+4F1Eh]
	mov ecx, dword [dword_51220C]
	sar edx, 10h
	cmp edx, ecx
	jnz loc_419EAE
	mov edx, [esp+4F5Eh]
	sar edx, 10h
	dec edx
	cmp eax, edx
	jnz loc_419F28
	xor ecx, ecx
	mov [esp+4F64h], cx

loc_419EAE:
	mov edx, 7Fh
	xor eax, eax
	mov word [ebp+0Ah], 5
	call sub_4423F0
	jmp loc_419A6A

loc_419EC5:
	cmp bx, 5000h
	jz loc_419A4F
	cmp bx, 0Dh
	jnz loc_419DCC
	cmp word [ebp+0Ah], 4
	jnz loc_419EE6
	mov ebx, 4B00h

loc_419EE6:
	cmp word [ebp+0Ah], 5
	jnz loc_419DCC
	mov ebx, 4D00h
	jmp loc_419E4C

loc_419EFB:
	mov edx, eax
	dec edx
	mov [esp+4F64h], dx
	jmp loc_419DF2

loc_419F0B:
	mov esi, ecx
	dec esi
	mov [esp+4F64h], si
	jmp loc_419E2F

loc_419F1B:
	inc word [esp+4F64h]
	jmp loc_419E73

loc_419F28:
	inc word [esp+4F64h]
	jmp loc_419EAE
;sub_419044 endp

off_419F40: dd aOval
	dd aOz ; "oz"
	dd aLast ; "last"
	dd aNort ; "nort"
	dd aPac_0 ; "pac"
	dd aMed_0 ; "med"
	dd aMyst ; "myst"
	dd aMono ; "mono"
aSSSS_0: db '%s     %s     %s     %s',0
aSSSS: db '%s     %s     %s     %s',0
dword_419F90: times 2 dd 0
	dd 1, 4, 2, 3, 5, 6, 7
dword_419FB4: dd 120031h, 350038h, 380031h, 3A0032h
	times 3 dd 0

sub_419FD0: ;SUBROUTINE
	push esi
	push edi
	sub esp, 10h
	mov edi, esp
	mov esi, dword_419FB4
	movsd
	movsd
	movsd
	movsd
	cmp ax, 8
	jl loc_419FE8
	xor eax, eax

loc_419FE8:
	cwde
	mov ax, [esp+eax*2]
	add esp, 10h
	pop edi
	pop esi
	ret
;sub_419FD0 endp

sub_41A000: ;SUBROUTINE
	cmp ax, 2
	jz loc_41A012
	cmp ax, 4
	jnz loc_41A015
	mov eax, 1
	ret

loc_41A012:
	xor eax, eax
	ret

loc_41A015:
	mov eax, 2
	ret
;sub_41A000 endp

sub_41A020: ;SUBROUTINE
	push edx
	mov dx, word [dword_512268]
	mov ax, word [dword_512264]
	add eax, edx
	cmp ax, 1
	jge loc_41A03B
	mov eax, 1

loc_41A03B:
	pop edx
	ret
;sub_41A020 endp

sub_41A040: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov edi, eax
	mov [esp+30h], dx
	mov ebp, ebx
	mov esi, dword [dword_5121FC]
	xor eax, eax

loc_41A058:
	movsx edx, ax
	cmp edx, esi
	jge loc_41A081
	mov ecx, [esp+2Eh]
	sar ecx, 10h
	imul ecx, 684h
	lea ebx, [edi+ecx]
	mov ebx, [ebx+edx*4+238h]
	mov [esp+edx*4], ebx
	mov [esp+edx*2+20h], ax
	inc eax
	jmp loc_41A058

loc_41A081:
	lea ebx, [esp+20h]
	mov edx, esp
	mov eax, esi
	call sub_41B2D0
	mov eax, [esp+1Eh]
	sar eax, 10h
	mov edx, ebp
	mov eax, [esp+eax*4]
	call sub_41B150
	mov eax, [esp+20h]
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41A040 endp

sub_41A0B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ebp, eax
	mov edi, edx
	mov [esp+30h], ebx
	mov esi, dword [dword_5121FC]
	xor eax, eax

loc_41A0C7:
	movsx edx, ax
	cmp edx, esi
	jge loc_41A0EC
	movsx ecx, di
	imul ecx, 684h
	lea ebx, [ecx+ebp]
	mov ebx, [ebx+edx*4+258h]
	mov [esp+edx*4], ebx
	mov [esp+edx*2+20h], ax
	inc eax
	jmp loc_41A0C7

loc_41A0EC:
	lea ebx, [esp+20h]
	mov edx, esp
	mov eax, esi
	call sub_41B2D0
	mov ebx, esi
	mov ah, byte [byte_512DFA]
	dec ebx
	cmp ah, 1
	jnz loc_41A142
	movsx eax, bx
	mov eax, [esp+eax*2+1Eh]
	sar eax, 10h
	fild dword [esp+eax*4]
	fmul dword [flt_4C8FB8]
	sub esp, 8
	fstp qword [esp]
	push a5_2f ; "%5.2f"
	mov ecx, [esp+3Ch]
	push ecx

loc_41A12A:
	call sprintf_
	add esp, 10h
	movsx eax, bx
	mov ax, [esp+eax*2+20h]
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41A142:
	movsx eax, bx
	mov eax, [esp+eax*2+1Eh]
	sar eax, 10h
	fild dword [esp+eax*4]
	fmul dword [flt_4C8FB4]
	sub esp, 8
	fstp qword [esp]
	push a5_2f ; "%5.2f"
	mov edx, [esp+3Ch]
	push edx
	jmp loc_41A12A
;sub_41A0B0 endp

sub_41A170: ;SUBROUTINE
	mov eax, [eax+21Ch]
	mov eax, [eax+30h]
	test eax, eax
	jl loc_41A18A
	cmp eax, 0Bh
	jge loc_41A18A
	mov eax, dword off_4D4A9C[eax*4]
	ret

loc_41A18A:
	mov eax, 2A3h
	jmp sub_41B710
;sub_41A170 endp

sub_41A1A0: ;SUBROUTINE
	push ecx
	push edx
	cmp dword [dword_512208], 1
	jnz loc_41A1E3
	test eax, eax
	jz loc_41A1B8
	cmp byte [byte_512DA9], 1
	jz loc_41A1E6

loc_41A1B8:
	mov ecx, dword [dword_4D76BC]
	test ecx, ecx
	jz loc_41A1E3
	cmp word [ecx], 0
	jnz loc_41A1D1
	cmp dword [dword_512208], 1
	jz loc_41A1F9

loc_41A1D1:
	mov eax, dword [dword_4D76BC]
	cmp word [eax], 0
	jnz loc_41A1E3
	cmp word [eax+2], 0
	jz loc_41A1F9

loc_41A1E3:
	pop edx
	pop ecx
	ret

loc_41A1E6:
	push ebx
	xor bl, bl
	mov byte [byte_512E8D], bl
	mov byte [byte_512E84], bl
	pop ebx
	pop edx
	pop ecx
	ret

loc_41A1F9:
	xor dl, dl
	mov byte [byte_512E8D], dl
	mov byte [byte_512E84], dl
	pop edx
	pop ecx
	ret
;sub_41A1A0 endp

sub_41A210: ;SUBROUTINE
	mov eax, dword [dword_5121FC]
	cmp eax, 4
	jnb loc_41A223
	cmp eax, 2

loc_41A21D:
	mov eax, 64h
	ret

loc_41A223:
	jbe loc_41A22D
	cmp eax, 8
	jnz loc_41A21D
	xor eax, eax
	ret

loc_41A22D:
	mov eax, 4Ch
	ret
;sub_41A210 endp

sub_41A240: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	mov di, word [dword_512264]
	mov dx, word [dword_512268]
	xor eax, eax
	xor ebx, ebx
	add edi, edx

loc_41A25B:
	movsx ecx, di
	movsx edx, ax
	cmp edx, ecx
	jge loc_41A28B
	imul edx, 684h
	add edx, esi
	test byte [edx+1F4h], 4
	jz loc_41A284
	cmp dword [edx+280h], 2
	jnz loc_41A284
	mov ebx, 1

loc_41A284:
	inc eax
	cmp bx, 1
	jnz loc_41A25B

loc_41A28B:
	mov eax, ebx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41A240 endp

sub_41A2A0: ;SUBROUTINE
	push ecx
	push edx
	cmp dword [dword_512208], 1
	jz loc_41A2DA
	cmp byte [byte_512DA9], 1
	jz loc_41A2DA

loc_41A2B4:
	mov edx, 12h
	mov eax, word_513062
	call sub_48A01C
	xor ecx, ecx
	mov edx, 1
	mov dword [dword_4D76BC], ecx
	mov word [word_4D4202], dx
	pop edx
	pop ecx
	ret

loc_41A2DA:
	push ebx
	mov eax, 1
	mov ebx, 9
	mov edx, dword_512F4C
	call sub_41A1A0
	call sub_408CC0
	mov eax, byte_512E84
	call strncpy_
	mov ebx, 9
	mov edx, byte_512F55
	mov eax, byte_512E8D
	call strncpy_
	call sub_408BF0
	pop ebx
	jmp loc_41A2B4
;sub_41A2A0 endp

sub_41A320: ;SUBROUTINE
	push edx
	mov edx, 12h
	mov eax, word_513062
	call sub_48A01C
	mov dword [dword_4D76BC], word_513062
	mov word [word_4D4202], 1
	pop edx
	ret
;sub_41A320 endp

sub_41A350: ;SUBROUTINE
	push edx
	mov edx, 2C8h
	mov eax, dword_512AD8
	call sub_48A01C
	xor edx, edx
	mov dword [dword_4D76B8], edx
	pop edx
	ret
;sub_41A350 endp

sub_41A370: ;SUBROUTINE
	push ecx
	push edx
	mov edx, 2C8h
	mov eax, dword_512AD8
	call sub_48A01C
	mov edx, dword_512AD8
	xor ecx, ecx
	mov dword [dword_4D76B8], edx

loc_41A38E:
	mov byte byte_512AD0[ecx], cl
	inc ecx
	cmp ecx, 8
	jl loc_41A38E
	pop edx
	pop ecx
	ret
;sub_41A370 endp

sub_41A3A0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 24h
	mov ecx, 9
	mov edi, esp
	mov esi, dword_419F90
	rep movsd
	test eax, eax
	jl loc_41A3BD
	cmp eax, 8
	jle loc_41A3BF

loc_41A3BD:
	xor eax, eax

loc_41A3BF:
	mov eax, [esp+eax*4]
	add esp, 24h
	pop edi
	pop esi
	pop ecx
	ret
;sub_41A3A0 endp

sub_41A3E0: ;SUBROUTINE
	cmp eax, 24h
	jnz loc_41A3F7
	cmp dword [dword_512208], 1
	jle loc_41A3F7
	cmp dword [dword_5121F8], 2
	jz loc_41A406

loc_41A3F7:
	cmp eax, 0Fh
	jl loc_41A40C
	mov eax, 70h
	jmp sub_41B710

loc_41A406:
	mov eax, aJacques ; "Jacques"
	ret

loc_41A40C:
	add eax, 60h
	jmp sub_41B710
;sub_41A3E0 endp

sub_41A420: ;SUBROUTINE
	cmp eax, 12h
	jz loc_41A439
	cmp eax, 24h
	jz loc_41A439
	cmp eax, 0Fh
	jle loc_41A43F
	mov eax, 70h
	jmp sub_41B710

loc_41A439:
	mov eax, aJacques ; "Jacques"
	ret

loc_41A43F:
	add eax, 60h
	jmp sub_41B710
;sub_41A420 endp

sub_41A450: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, dword [dword_4D76BC]
	test ebx, ebx
	jz loc_41A481

loc_41A45D:
	mov ebx, dword [dword_4D76BC]
	xor eax, eax
	mov edx, ebx

loc_41A467:
	movsx ecx, ax
	inc eax
	mov word [edx+ecx*2], 1
	cmp ax, 9
	jl loc_41A467
	mov dword [dword_4D76BC], ebx
	pop edx
	pop ecx
	pop ebx
	ret

loc_41A481:
	call sub_41A320
	jmp loc_41A45D
;sub_41A450 endp

sub_41A490: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ebx, dword [dword_4D76B8]
	mov cl, byte [byte_50B480]
	xor edx, edx
	mov dl, cl
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	mov edi, 0Bh
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	inc cl
	mov byte [byte_50B480], cl
	mov dword [dword_512DA4], edx
	xor eax, eax
	mov edx, ebx

loc_41A4CF:
	movsx ecx, ax
	inc eax
	mov word [edx+ecx*2+2B0h], 0
	cmp ax, 8
	jl loc_41A4CF
	mov ecx, 2ACh
	mov esi, (dword_512D9E+2)
	mov word [ebx+2C0h], 0
	lea edi, [ebx+4]
	mov byte [ebx+2C4h], 0
	mov dword [dword_4D76B8], ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, 1
	mov ebx, dword [dword_4D76B8]
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41A490 endp

sub_41A530: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, dword [dword_4D5EF8]
	mov esi, eax
	mov ecx, edi
	xor eax, eax

loc_41A541:
	movsx edx, ax
	movsx ebx, word [esi+edx*2]
	imul ebx, 684h
	inc eax
	mov [ecx+ebx+278h], edx
	cmp ax, 8
	jl loc_41A541
	mov dword [dword_4D5EF8], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41A530 endp

sub_41A570: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4Ch
	mov ebp, eax
	mov [esp+48h], dx
	xor edx, edx
	xor ebx, ebx

loc_41A583:
	mov eax, [esp+46h]
	movsx ecx, dx
	sar eax, 10h
	cmp ecx, eax
	jl loc_41A5DA
	cmp dword [dword_512214], 0
	jnz loc_41A81D
	cmp dword [dword_512208], 2
	jge loc_41A611
	xor ecx, ecx
	mov esi, 1

loc_41A5AE:
	mov edx, [esp+46h]
	movsx eax, cx
	sar edx, 10h
	cmp eax, edx
	jge loc_41A689
	imul eax, 684h
	mov edx, dword [dword_4D5EF8]
	mov edi, [edx+eax+280h]
	cmp esi, edi
	jz loc_41A603

loc_41A5D7:
	inc ecx
	jmp loc_41A5AE

loc_41A5DA:
	imul ecx, 684h
	mov esi, dword [dword_4D5EF8]
	add esi, ecx
	lea edi, [ecx+ebp]
	mov ecx, 684h
	inc edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	jmp loc_41A583 ;short

loc_41A603:
	test byte [eax+ebp+1F4h], 4
	jz loc_41A5D7
	mov ebx, edi
	jmp loc_41A5D7

loc_41A611:
	mov esi, 1
	mov cx, word [dword_512264]

loc_41A61D:
	mov edx, [esp+46h]
	movsx eax, cx
	sar edx, 10h
	cmp eax, edx
	jl loc_41A659
	mov ebx, 1
	xor eax, eax

loc_41A632:
	mov edx, [esp+46h]
	movsx esi, ax
	sar edx, 10h
	cmp esi, edx
	jge loc_41A689
	imul esi, 684h
	mov edx, dword [dword_4D5EF8]
	cmp dword [edx+esi+280h], 2
	jz loc_41A67B

loc_41A656:
	inc eax
	jmp loc_41A632

loc_41A659:
	mov edx, dword [dword_4D5EF8]
	mov ebx, [edx+280h]
	cmp esi, ebx
	jz loc_41A66C

loc_41A669:
	inc ecx
	jmp loc_41A61D

loc_41A66C:
	imul eax, 684h
	mov [eax+ebp+280h], ebx
	jmp loc_41A669

loc_41A67B:
	test byte [esi+ebp+1F4h], 4
	jz loc_41A656
	xor ebx, ebx
	jmp loc_41A656

loc_41A689:
	cmp bx, 1
	jnz loc_41A6B7
	mov ax, word [dword_512264]

loc_41A695:
	mov ecx, [esp+46h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_41A6B7
	imul edx, 684h
	inc eax
	mov dword [edx+ebp+280h], 1
	jmp loc_41A695

loc_41A6B7:
	xor eax, eax

loc_41A6B9:
	mov ecx, [esp+46h]
	movsx edx, ax
	sar ecx, 10h
	cmp edx, ecx
	jge loc_41A6F1
	imul edx, 684h
	mov ecx, dword [dword_4D5EF8]
	mov ebx, dword [dword_5121FC]
	cmp ebx, [ecx+edx+230h]
	jle loc_41A6E5

loc_41A6E2:
	inc eax
	jmp loc_41A6B9

loc_41A6E5:
	lea ecx, [ebx-1]
	mov [edx+ebp+230h], ecx
	jmp loc_41A6E2

loc_41A6F1:
	mov eax, dword [dword_5121F8]
	cmp eax, 2
	jnz loc_41A81D
	cmp eax, dword [dword_512208]
	jg loc_41A81D
	xor edx, edx

loc_41A70D:
	mov eax, [esp+46h]
	movsx esi, dx
	sar eax, 10h
	cmp esi, eax
	jl loc_41A769
	mov ebx, 186A0h
	xor edx, edx

loc_41A722:
	mov ecx, [esp+46h]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jl loc_41A79A
	lea ebx, [esp+30h]
	mov edx, esp
	mov eax, ecx
	call sub_41B2D0
	xor edx, edx

loc_41A73F:
	mov ecx, [esp+46h]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_41A81D
	mov ecx, [esp+eax*2+2Eh]
	sar ecx, 10h
	imul ecx, 684h
	inc eax
	inc edx
	mov [ecx+ebp+278h], eax
	jmp loc_41A73F

loc_41A769:
	imul esi, 684h
	mov eax, dword [dword_4D5EF8]
	add eax, esi
	mov ecx, [eax+21Ch]
	cmp dword [ecx], 24h
	jz loc_41A784

loc_41A781:
	inc edx
	jmp loc_41A70D

loc_41A784:
	cmp dword [eax+280h], 1
	jz loc_41A781
	mov dword [esi+ebp+280h], 3
	jmp loc_41A781

loc_41A79A:
	imul ecx, eax, 684h
	mov esi, dword [dword_4D5EF8]
	mov edi, [ecx+esi+21Ch]
	imul esi, eax, 0E4Ch
	lea eax, [ecx+ebp]
	cmp dword [edi], 24h
	jnz loc_41A806
	mov ecx, [eax+234h]
	test ecx, ecx
	jle loc_41A7F3
	lea esi, [ecx+ebx]

loc_41A7C8:
	mov [eax+234h], esi

loc_41A7CE:
	movsx eax, dx
	imul ecx, eax, 684h
	mov [esp+eax*2+30h], dx
	lea esi, 0[eax*4]
	mov eax, [ecx+ebp+234h]
	inc edx
	mov [esp+esi], eax
	jmp loc_41A722

loc_41A7F3:
	imul ecx, -1
	add ecx, 186A0h
	add ecx, esi
	mov [eax+234h], ecx
	jmp loc_41A7CE

loc_41A806:
	mov edi, [eax+234h]
	test edi, edi
	jg loc_41A7CE
	imul ecx, edi, -1
	add ecx, 186A0h
	add esi, ecx
	jmp loc_41A7C8

loc_41A81D:
	mov eax, 1
	add esp, 4Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41A570 endp

sub_41ACA0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0D8h
	mov [esp+0D0h], ax
	mov [esp+0D4h], edx
	mov [esp+0CCh], ebx
	mov ecx, 6
	lea edi, [esp+0A0h]
	mov edx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov esi, aSSSS ; "%s %s %s %s"
	mov ebx, 20h
	mov eax, aTrkrcrds_0 ; "trkrcrds"
	rep movsd
	mov dword [dword_4DB1D8], edx
	mov ecx, 21Dh
	mov edx, 280h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ecx, [esp+0CEh]
	mov ebx, eax
	sar ecx, 10h
	mov edx, eax
	mov eax, ecx
	call sub_41B040
	mov edx, [esp+0D4h]
	mov ebp, 14h
	cmp dx, 2
	jnz loc_41AE23
	mov eax, 1

loc_41AD2D:
	movsx edx, ax
	lea eax, 0[edx*4]
	add eax, edx
	lea edi, [esp+0B8h]
	shl eax, 2
	mov ecx, ebp
	lea esi, [ebx+eax]
	lea edx, [esp+50h]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+0C4h]
	call sub_41B150
	mov esi, [esp+0C8h]
	cmp si, 2
	jnz loc_41AE3D
	mov eax, 1Fh

loc_41AD7E:
	call sub_41B710
	push eax
	push aS ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	lea edi, [esp+0B8h]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp byte [esp+ecx+0B7h], 0Ah
	jnz loc_41ADCB
	lea edi, [esp+0B8h]
	xor dl, dl
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov [esp+ecx+0B7h], dl

loc_41ADCB:
	mov eax, esp
	push eax
	lea eax, [esp+54h]
	push eax
	mov eax, [esp+0C8h]
	sar eax, 10h
	call sub_41A420
	push eax
	lea eax, [esp+0C4h]
	push eax
	lea eax, [esp+0B0h]
	push eax
	mov esi, [esp+0E0h]
	push esi
	call sprintf_
	add esp, 18h
	cmp dword [esp+0C4h], 0
	jz loc_41AE57
	mov edx, 1

loc_41AE12:
	test ebx, ebx
	jnz loc_41AE5B
	mov eax, edx
	add esp, 0D8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41AE23:
	cmp dx, 4
	jnz loc_41AE33
	mov eax, 0Bh
	jmp loc_41AD2D

loc_41AE33:
	mov eax, 15h
	jmp loc_41AD2D

loc_41AE3D:
	cmp si, 1
	jnz loc_41AE4D
	mov eax, 1Bh
	jmp loc_41AD7E

loc_41AE4D:
	mov eax, 1Eh
	jmp loc_41AD7E

loc_41AE57:
	xor edx, edx
	jmp loc_41AE12

loc_41AE5B:
	mov eax, ebx
	call sub_4848FC
	mov eax, edx
	add esp, 0D8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41ACA0 endp

sub_41AE70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 14h
	mov edi, eax
	mov edx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov ecx, 1F6h
	mov ebx, 20h
	mov eax, aTrkrcrds_0 ; "trkrcrds"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	mov edx, 280h
	mov ecx, 14h
	call sub_4844B0
	mov ebx, eax
	movsx eax, di
	mov edx, ebx
	mov esi, ebx
	mov edi, esp
	call sub_41B040
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	test ebx, ebx
	jnz loc_41AEDA
	mov eax, [esp+0Ch]
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41AEDA:
	mov eax, ebx
	call sub_4848FC
	mov eax, [esp+0Ch]
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41AE70 endp

sub_41AEF0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0D0h
	mov [esp+0CCh], ax
	mov ebp, edx
	mov ecx, 6
	lea edi, [esp+0A0h]
	mov edx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov esi, aSSSS_0 ; "%s %s %s %s"
	mov ebx, 20h
	mov eax, aTrkrcrds_0 ; "trkrcrds"
	rep movsd
	mov dword [dword_4DB1D8], edx
	mov ecx, 1B1h
	mov edx, 280h
	lea edi, [esp+0B8h]
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov esi, eax
	mov ebx, eax
	mov eax, [esp+0CAh]
	mov edx, esi
	sar eax, 10h
	mov ecx, 14h
	call sub_41B040
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea edx, [esp+50h]
	mov eax, [esp+0C4h]
	call sub_41B150
	mov edx, [esp+0C8h]
	cmp dx, 2
	jz loc_41B00D
	cmp dx, 1
	jnz loc_41B014
	mov eax, 1Bh

loc_41AFA3:
	call sub_41B710
	push eax
	push aS ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, esp
	push eax
	lea eax, [esp+54h]
	push eax
	mov eax, [esp+0C8h]
	sar eax, 10h
	call sub_41A420
	push eax
	lea eax, [esp+0C4h]
	push eax
	lea eax, [esp+0B0h]
	push eax
	push ebp
	call sprintf_
	add esp, 18h
	cmp dword [esp+0C4h], 0
	jz loc_41B01B
	mov esi, 1

loc_41AFFB:
	test ebx, ebx
	jnz loc_41B01F
	mov eax, esi
	add esp, 0D0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41B00D:
	mov eax, 1Fh
	jmp loc_41AFA3

loc_41B014:
	mov eax, 1Eh
	jmp loc_41AFA3

loc_41B01B:
	xor esi, esi
	jmp loc_41AFFB

loc_41B01F:
	mov eax, ebx
	call sub_4848FC
	mov eax, esi
	add esp, 0D0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41AEF0 endp

sub_41B040: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 108h
	mov edi, edx
	lea ecx, [esp+104h]
	xor edx, edx
	movsx ebp, ax
	mov [esp+100h], edx
	mov eax, ebp
	mov edx, esp
	lea ebx, [esp+100h]
	call sub_41B250
	xor eax, eax
	lea edx, [esp+0FCh]
	call sub_403550
	mov eax, esp
	call sub_4877BC
	mov ecx, [esp+0FCh]
	test ecx, ecx
	jz loc_41B118
	cmp dword [esp+104h], 26Ch
	jnz loc_41B123
	mov esi, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov ebp, 189h
	mov edx, [esp+104h]
	mov eax, aRecords_0 ; "records"
	xor ebx, ebx
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], ebp
	call sub_4844B0
	mov ebx, [esp+104h]
	mov ebp, eax
	mov edx, eax
	mov eax, [esp+0FCh]
	mov ecx, 26Ch
	call sub_487958
	mov eax, [esp+0FCh]
	mov esi, ebp
	call sub_487950
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	test ebp, ebp
	jnz loc_41B13C

loc_41B10C:
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41B118:
	mov eax, ebp
	xor edx, edx
	call fetchTrackRecords
	jmp loc_41B10C

loc_41B123:
	mov eax, ecx
	call sub_487950
	mov eax, esp
	xor edx, edx
	call sub_4879AE
	mov eax, ebp
	call fetchTrackRecords
	jmp loc_41B10C

loc_41B13C:
	mov eax, ebp
	call sub_4848FC
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41B040 endp

sub_41B150: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 8
	and esp, 0FFFFFFF8h
	mov [esp], eax
	mov esi, edx
	mov [esp+4], eax
	fild dword [esp+4]
	fmul qword [dbl_4C8F70]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	mov edx, eax
	mov ecx, 1770h
	sar edx, 1Fh
	idiv ecx
	movsx ecx, ax
	lea eax, 0[ecx*4]
	sub eax, ecx
	shl eax, 3
	add eax, ecx
	shl eax, 4
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, [esp]
	sub edx, eax
	mov ebx, 64h
	mov [esp], edx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	movsx ebx, ax
	mov edx, ebx
	lea eax, 0[ebx*4]
	sub eax, ebx
	shl eax, 3
	add eax, ebx
	mov edi, [esp]
	shl eax, 2
	sub edi, eax
	mov [esp], edi
	mov eax, [esp-2]
	sar eax, 10h
	push eax
	xor eax, eax
	mov al, byte [byte_512DFB]
	xor edx, ebx
	mov dl, byte byte_4D4A8E[eax]
	push edx
	mov al, byte byte_4D4A88[eax]
	push ebx
	and eax, 0FFh
	push eax
	push ecx
	push a01dC02dC02d ; "%01d%c%02d%c%02d"
	push esi
	call sprintf_
	add esp, 1Ch
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41B150 endp

sub_41B210: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	cwde
	mov ecx, dword off_4D4A48[eax*4]
	push ecx
	push aSinfo ; "%sinfo"
	push edx
	call sprintf_
	add esp, 0Ch
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_41B210 endp

sub_41B230: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	cwde
	mov ecx, dword off_4D4A68[eax*4]
	push ecx
	push aSrec ; "%srec"
	push edx
	call sprintf_
	add esp, 0Ch
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_41B230 endp

sub_41B250: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebx, eax
	mov ecx, 8
	mov edi, esp
	mov esi, off_419F40
	rep movsd
	cmp ax, 7
	jle loc_41B2A3
	cmp ax, 14h
	jge loc_41B2A3

loc_41B274:
	xor ebx, ebx

loc_41B276:
	movsx eax, bx
	push a_stf ; ".stf"
	mov edi, [esp+eax*4+4]
	push edi
	mov ebp, dword [dword_5134C4]
	push ebp

loc_41B28A:
	push aSSS ; "%s%s%s"
	push edx
	call sprintf_
	add esp, 14h
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41B2A3:
	test bx, bx
	jl loc_41B274
	cmp bx, 1Bh
	jg loc_41B274
	cmp bx, 14h
	jl loc_41B276
	movsx eax, bx
	push a_ssf ; ".ssf"
	mov ecx, [esp+eax*4-4Ch]
	push ecx
	mov esi, dword [dword_5134C4]
	push esi
	jmp loc_41B28A
;sub_41B250 endp

sub_41B2D0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov [esp+0Ch], eax
	mov esi, edx
	mov [esp+4], ebx
	cmp eax, 32h
	jg loc_41B40F
	mov ecx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	lea edx, 0[eax*4]
	mov ebx, 8Dh
	mov eax, aTempsort ; "TempSort"
	mov dword [dword_4DB1DC], ebx
	add edx, 4
	mov ebx, 20h
	mov dword [dword_4DB1D8], ecx
	call sub_4844B0
	mov [esp+8], eax
	test eax, eax
	jz loc_41B434
	mov ebp, [esp+0Ch]
	xor edi, edi
	test ebp, ebp
	jle loc_41B354
	mov ecx, eax
	mov edx, esi
	mov eax, [esp+4]
	mov esi, [esp+0Ch]

loc_41B33B:
	add ecx, 4
	add edx, 4
	mov [eax], di
	add eax, 2
	mov ebx, [edx-4]
	inc edi
	mov [ecx-4], ebx
	cmp edi, esi
	jl loc_41B33B

loc_41B354:
	cmp dword [esp+0Ch], 1
	jz loc_41B454
	mov ebp, [esp+0Ch]
	mov edi, 1
	cmp ebp, edi
	jle loc_41B3FF
	mov eax, [esp+8]
	mov ebp, [esp+4]
	add eax, 4
	add ebp, 2
	mov [esp+10h], eax

loc_41B382:
	mov esi, [esp+10h]
	movsx eax, word [ebp+0]
	lea ecx, [edi-1]
	mov [esp], eax
	mov esi, [esi]
	test ecx, ecx
	jl loc_41B3C8
	mov edx, [esp+8]
	lea eax, 0[ecx*4]
	mov ebx, [esp+4]
	add eax, edx
	lea edx, [ecx+ecx]
	add edx, ebx

loc_41B3AC:
	cmp esi, [eax]
	jge loc_41B3C8
	mov ebx, [eax]
	sub edx, 2
	mov [eax+4], ebx
	sub eax, 4
	mov bx, [edx+2]
	dec ecx
	mov [edx+4], bx
	test ecx, ecx
	jge loc_41B3AC

loc_41B3C8:
	mov edx, [esp+8]
	lea eax, 0[ecx*4]
	mov ebx, [esp+10h]
	add eax, edx
	add ebp, 2
	inc edi
	mov [eax+4], esi
	lea eax, [ecx+ecx]
	add ebx, 4
	mov ecx, [esp+4]
	mov edx, [esp]
	add eax, ecx
	mov [esp+10h], ebx
	mov esi, [esp+0Ch]
	mov [eax+2], dx
	cmp edi, esi
	jl loc_41B382

loc_41B3FF:
	mov edi, [esp+8]
	test edi, edi
	jnz loc_41B45F

loc_41B407:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41B40F:
	mov ecx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov ebx, 82h
	push aStattool_ncrea ; "Stattool_nCreateIndex: This routine is"...
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 4
	jmp loc_41B407

loc_41B434:
	mov edx, 8Fh
	push aStattoolMemory ; "Stattool: memory allocation failure\n"
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], edx
	call sub_4840F0
	add esp, 4
	jmp loc_41B407

loc_41B454:
	mov eax, [esp+8]
	call sub_4848FC
	jmp loc_41B407

loc_41B45F:
	mov eax, edi
	call sub_4848FC
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41B2D0 endp

sub_41B470: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp], eax
	mov ecx, edx
	mov ebp, ebx
	cmp eax, 32h
	jg loc_41B5DD
	mov ebx, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	lea edx, [eax+eax]
	mov esi, 46h
	mov eax, aTempsort ; "TempSort"
	mov dword [dword_4DB1D8], ebx
	add edx, 2
	mov ebx, 20h
	mov dword [dword_4DB1DC], esi
	call sub_4844B0
	mov [esp+4], eax
	test eax, eax
	jnz loc_41B4DC
	mov edi, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov eax, 48h
	push aStattoolMemory ; "Stattool: memory allocation failure\n"
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_41B4DC:
	xor edx, edx
	mov ebx, [esp]
	mov [esp+10h], edx
	test ebx, ebx
	jle loc_41B518
	mov esi, [esp]
	mov edx, [esp+4]
	mov eax, ecx
	mov ecx, ebp

loc_41B4F4:
	mov ebx, [esp+10h]
	mov [ecx], bx
	add edx, 2
	mov bx, [eax]
	mov [edx-2], bx
	mov ebx, [esp+10h]
	add eax, 2
	inc ebx
	add ecx, 2
	mov [esp+10h], ebx
	cmp ebx, esi
	jl loc_41B4F4

loc_41B518:
	mov edi, [esp]
	cmp edi, 1
	jz loc_41B602
	mov eax, 1
	mov [esp+10h], eax
	cmp edi, eax
	jle loc_41B5CD
	lea eax, [ebp+2]
	mov [esp+8], eax
	mov eax, [esp+4]
	add eax, 2
	mov [esp+0Ch], eax

loc_41B547:
	mov eax, [esp+8]
	mov edx, [esp+10h]
	mov edi, [esp+0Ch]
	dec edx
	mov ax, [eax]
	mov di, [edi]
	mov [esp+14h], eax
	test edx, edx
	jl loc_41B591
	mov ecx, [esp+4]
	lea eax, [edx+edx]
	add eax, ecx

loc_41B56B:
	movsx ecx, di
	movsx ebx, word [eax]
	lea esi, [edx+edx]
	cmp ecx, ebx
	jge loc_41B591
	mov bx, [eax]
	lea ecx, [esi+ebp]
	mov [eax+2], bx
	sub eax, 2
	mov bx, [ecx]
	dec edx
	mov [ecx+2], bx
	test edx, edx
	jge loc_41B56B

loc_41B591:
	mov eax, [esp+4]
	mov ecx, [esp+8]
	mov ebx, [esp+0Ch]
	mov esi, [esp+10h]
	add ecx, 2
	add ebx, 2
	inc esi
	mov [eax+edx*2+2], di
	mov eax, [esp+14h]
	mov edi, [esp]
	mov [esp+8], ecx
	mov [esp+0Ch], ebx
	mov [esp+10h], esi
	mov [ebp+edx*2+2], ax
	cmp esi, edi
	jl loc_41B547

loc_41B5CD:
	mov ebp, [esp+4]
	test ebp, ebp
	jnz loc_41B60D

loc_41B5D5:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41B5DD:
	mov esi, aCNfs2seFront_5 ; "c:\\nfs2se\\frontend\\common\\Stattool.c"
	mov edi, 41h
	push aStattool_creat ; "Stattool_CreateIndex: This routine is "...
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_4840F0
	add esp, 4
	jmp loc_41B5D5

loc_41B602:
	mov eax, [esp+4]
	call sub_4848FC
	jmp loc_41B5D5

loc_41B60D:
	mov eax, ebp
	call sub_4848FC
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41B470 endp

sub_41B620: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_4D4AE0]
	test edx, edx
	jnz loc_41B637
	xor ecx, ecx
	mov dword [dword_4D4AE0], ecx
	pop edx
	pop ecx
	ret

loc_41B637:
	mov eax, edx
	call sub_4848FC
	xor ecx, ecx
	mov dword [dword_4D4AE0], ecx
	pop edx
	pop ecx
	ret
;sub_41B620 endp

sub_41B650: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	movsx eax, word [edx+eax+6]
	pop edx
	ret
;sub_41B650 endp

sub_41B670: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	movsx eax, word [edx+eax+4]
	pop edx
	ret
;sub_41B670 endp

sub_41B690: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	mov al, [edx+eax+3]
	and eax, 0FFh
	pop edx
	ret
;sub_41B690 endp

sub_41B6B0: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	mov al, [edx+eax+2]
	and eax, 0FFh
	pop edx
	ret
;sub_41B6B0 endp

sub_41B6D0: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	mov al, [edx+eax+1]
	and eax, 0FFh
	pop edx
	ret
;sub_41B6D0 endp

sub_41B6F0: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	mov al, [edx+eax]
	and eax, 0FFh
	pop edx
	ret
;sub_41B6F0 endp

sub_41B710: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D4AE0]
	add eax, [edx+eax+8]
	pop edx
	ret
;sub_41B710 endp

sub_41B730: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 0FCh
	mov edx, eax
	cmp eax, 6
	jg loc_41B785
	mov ecx, dword [dword_4D4AE0]
	test ecx, ecx
	jz loc_41B750
	mov eax, ecx
	call sub_4848FC

loc_41B750:
	push esi
	push ebx
	mov ebx, dword off_4D4AC8[edx*4]
	push ebx
	mov esi, dword [dword_5134BC]
	push esi
	push aSS_1 ; "%s%s"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	lea eax, [esp+8]
	call sub_486F40
	mov dword [dword_4D4AE0], eax
	pop ebx
	pop esi

loc_41B785:
	add esp, 0FCh
	pop edx
	pop ecx
	ret
;sub_41B730 endp

off_41B790: dd aEngl_2
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItal_1 ; "ital"
	dd aSwed_1 ; "swed"
off_41B7A8: dd aEngl_2
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItly_1 ; "itly"
	dd aSwed_1 ; "swed"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItal_1 ; "ital"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItly_1 ; "itly"
	dd aSwed_1 ; "swed"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aEngl_2 ; "engl"
	dd aSpan_1 ; "span"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aItly_1 ; "itly"
	dd aItly_1 ; "itly"
	dd aSwed_1 ; "swed"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aFren_1 ; "fren"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aEngl_2 ; "engl"
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItly_1 ; "itly"
	dd aSwed_1 ; "swed"
off_41B868: dd a5_1
	dd a7_5 ; "7.5"
	dd a7_5 ; "7.5"
	dd a7_5 ; "7.5"
	dd a8_1 ; "8.1"
	dd a6_5 ; "6.5"
	dd a7_6 ; "7.6"
	dd a7_3 ; "7.3"
off_41B888: dd a3_2
	dd a4_7 ; "4.7"
	dd a4_7 ; "4.7"
	dd a4_7 ; "4.7"
	dd a5_0 ; "5.0"
	dd a4_0 ; "4.0"
	dd a4_7 ; "4.7"
	dd a4_5 ; "4.5"
dword_41B8A8: dd 0A200A2h, 0A300A3h, 0A400A3h, 0A300A4h
off_41B8B8: dd aEngl_2
	dd aGerm_1 ; "germ"
	dd aFren_1 ; "fren"
	dd aSpan_1 ; "span"
	dd aItal_1 ; "ital"
	dd aSwed_1 ; "swed"

sub_41B8D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0F4h
	mov [esp+0C8h], eax
	mov ecx, 6
	lea edi, [esp+0A0h]
	mov ax, word [dword_5121FC]
	xor edx, edx
	mov esi, off_41B8B8
	mov [esp+0CCh], edx
	mov [esp+0D4h], ax
	rep movsd
	mov edx, 1
	mov ah, byte [byte_512DBC]
	xor ecx, ecx
	mov [esp+0D0h], edx
	mov [esp+0ECh], edx
	mov [esp+0E8h], ecx
	xor ecx, ecx
	mov edx, 14h
	mov [esp+0BCh], ecx
	mov [esp+0C4h], ecx
	test ah, 1
	jnz loc_41BF15
	mov word [esp+0E4h], 7

loc_41B957:
	call sub_428A20
	mov eax, 0FF000000h
	mov esi, aCNfs2seFront_6 ; "c:\\nfs2se\\frontend\\common\\Trkstat.c"
	mov edi, 31Ah
	mov ebx, 20h
	call sub_48266C
	call sub_482740
	call sub_4824BC
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, 0FF000000h
	shl edx, 5
	call sub_48266C
	call sub_482740
	call sub_4824BC
	mov eax, aVtrkrcrd ; "vtrkrcrd"
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_484498
	mov ebp, eax
	mov eax, dword [dword_51221C]
	call sub_41A3A0
	mov [esp+0F0h], ax
	cmp dword [dword_4D21AC], 0
	jz loc_41BF24

loc_41B9D2:
	mov eax, [esp+0E4h]
	dec eax
	mov [esp+0E0h], eax

loc_41B9E1:
	mov ecx, [esp+0CCh]
	test ecx, ecx
	jnz loc_41C120
	cmp word [esp+0D0h], 0
	jz loc_41BA4B
	xor edx, edx
	mov ebx, [esp+0EEh]
	mov [esp+0D0h], edx
	sar ebx, 10h
	mov edx, esp
	mov eax, ebx
	call sub_41B230
	mov edx, [esp+0C8h]
	mov eax, esp
	mov [edx], eax
	mov eax, edx
	mov dword [dword_4D2098], ecx
	call sub_410E80
	push ecx
	mov eax, ebx
	mov edx, aRec6_0 ; "rec6"
	call sub_419FD0
	mov ebx, 1
	movsx ecx, ax
	xor eax, eax
	call sub_428140

loc_41BA4B:
	cmp word [esp+0ECh], 0
	jz loc_41BA84
	mov ebx, [esp+0EEh]
	sar ebx, 10h
	lea edx, [esp+50h]
	mov eax, ebx
	xor ecx, ecx
	call sub_41AEF0
	mov [esp+0E8h], eax
	mov edx, ebp
	mov eax, ebx
	mov [esp+0ECh], ecx
	call sub_41B040

loc_41BA84:
	call sub_4833C7
	mov edi, [esp+0C4h]
	mov edx, 400h
	add edi, eax
	call sub_428A20
	mov eax, [esp+0C8h]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+4]
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esp+eax*4+0A0h]
	mov [esp+0C4h], edi
	call sub_405B30
	mov dl, byte [byte_512DFB]
	mov [esp+0B8h], edi
	cmp dl, 5
	jnz loc_41BF43
	mov eax, [esp+0D2h]
	sar eax, 10h
	push eax
	mov eax, 0AEh
	call sub_41B710
	push eax
	push aSD_1 ; "%s %d"

loc_41BB03:
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	push 2
	push 4
	mov eax, 0AEh
	call sub_41B650
	movsx ebx, ax
	mov eax, 0AEh
	call sub_41B670
	sub eax, 14h
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+8]
	mov esi, [esp+0DCh]
	call sub_4054E0
	cmp si, 2
	jnz loc_41BF63
	mov dword [esp+0C0h], 1

loc_41BB5B:
	mov eax, 0A7h
	mov ebx, 1ACh
	call sub_41B670
	xor ecx, ecx
	movsx edx, ax
	mov eax, 0B3h
	call sub_405580
	cmp word [esp+0E8h], 0
	jnz loc_41BF89

loc_41BB88:
	mov esi, 0B4h
	xor ecx, ecx
	mov [esp+0D8h], si
	mov [esp+0DCh], cx

loc_41BB9F:
	mov edi, [esp+0DAh]
	sar edi, 10h
	lea esi, [edi+0B4h]
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A7h
	call sub_41B670
	movsx edx, ax
	mov eax, [esp+0D6h]
	xor ecx, ecx
	sar eax, 10h
	call sub_405580
	add edi, [esp+0C0h]
	imul edi, 14h
	add edi, ebp
	cmp dword [edi+0Ch], 0
	jz loc_41BCF2
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	mov eax, edi
	call sub_4054E0
	mov eax, [edi+8]
	sar eax, 10h
	call sub_41A420
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A9h
	call sub_41B670
	sub eax, 19h
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov edx, esp
	mov eax, [edi+0Ch]
	call sub_41B150
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0AAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov ax, [edi+10h]
	cmp ax, 2
	jnz loc_41C082
	mov eax, 1Fh

loc_41BCA4:
	call sub_41B710
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+0DAh]
	push 4
	sar eax, 10h
	push 3
	add eax, 0B4h
	call sub_41B650
	movsx ebx, ax
	mov eax, 0ABh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0

loc_41BCF2:
	mov ecx, [esp+0DCh]
	mov ebx, [esp+0D8h]
	inc ecx
	inc ebx
	mov [esp+0DCh], cx
	mov [esp+0D8h], bx
	cmp cx, 0Ah
	jl loc_41BB9F
	mov eax, [esp+0C8h]
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov edx, [esp+0B8h]
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_426B70
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_41BD66
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_41BD66:
	call sub_4976B8
	mov eax, [esp+0C8h]
	call sub_423CA0
	call sub_405960
	mov esi, eax
	test ax, ax
	jz loc_41B9E1
	mov edx, [esp+0C4h]
	cmp edx, [esp+0BCh]
	jle loc_41B9E1
	add edx, 0Fh
	mov [esp+0BCh], edx
	mov edx, [esp+0C8h]
	cmp word [edx+0Ah], 0
	jnz loc_41BE15
	cmp ax, 4B00h
	jnz loc_41BE15
	mov edx, [esp+0F0h]
	mov eax, 1
	sub edx, eax
	mov [esp+0ECh], eax
	mov [esp+0F0h], dx
	test dx, dx
	jl loc_41C09C

loc_41BDE6:
	mov edx, 7Fh
	xor eax, eax
	mov ecx, 1
	call sub_4423F0
	xor ebx, ebx
	xor eax, eax
	mov [esp+0D0h], ecx
	call sub_403550
	xor edx, edx
	mov eax, 12h
	xor ecx, ecx
	call sub_4274F0

loc_41BE15:
	mov eax, [esp+0C8h]
	cmp word [eax+0Ah], 0
	jnz loc_41BE93
	cmp si, 4D00h
	jnz loc_41C0B0

loc_41BE2E:
	mov edx, [esp+0EEh]
	mov eax, 1
	mov ecx, [esp+0E2h]
	sar edx, 10h
	mov [esp+0ECh], eax
	inc edx
	sar ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov [esp+0F0h], dx
	mov dword [esp+0D0h], 1
	cmp si, 4D00h
	jnz loc_41BE7C
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_41BE7C:
	xor eax, eax
	call sub_403550
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 12h
	call sub_4274F0

loc_41BE93:
	mov eax, [esp+0C8h]
	mov bx, [eax+0Ah]
	cmp bx, 1
	jnz loc_41C0BF
	cmp si, 4B00h
	jnz loc_41C0BF
	mov [esp+0ECh], ebx
	mov ebx, [esp+0D2h]
	sar ebx, 10h
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+0D4h], ax
	cmp ax, 2
	jge loc_41BEE7
	mov word [esp+0D4h], 8

loc_41BEE7:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_41BEF3:
	xor eax, eax
	call sub_403550

loc_41BEFA:
	mov eax, [esp+0C8h]
	movsx edx, si
	call sub_410414
	mov [esp+0CCh], eax
	jmp loc_41B9E1

loc_41BF15:
	mov word [esp+0E4h], 8
	jmp loc_41B957

loc_41BF24:
	mov edx, dword [dword_4D5A28]
	mov eax, dword [dword_51221C]
	call sub_476750
	mov dword [dword_4D21AC], 1
	jmp loc_41B9D2

loc_41BF43:
	mov eax, 0AEh
	call sub_41B710
	push eax
	mov eax, [esp+0D6h]
	sar eax, 10h
	push eax
	push aDS_0 ; "%d %s"
	jmp loc_41BB03

loc_41BF63:
	cmp si, 4
	jnz loc_41BF79
	mov dword [esp+0C0h], 0Bh
	jmp loc_41BB5B

loc_41BF79:
	mov dword [esp+0C0h], 15h
	jmp loc_41BB5B

loc_41BF89:
	push 2
	mov eax, 0A8h
	push 3
	mov ecx, 12h
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	mov eax, ebp
	call sub_4054E0
	mov eax, [ebp+8]
	sar eax, 10h
	call sub_41A420
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 3
	mov eax, 0A9h
	mov ecx, 12h
	call sub_41B670
	sub eax, 19h
	mov ebx, 1ACh
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov edx, esp
	mov eax, [ebp+0Ch]
	call sub_41B150
	push 2
	mov ecx, 12h
	push 3
	mov eax, 0AAh
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov dx, [ebp+10h]
	cmp dx, 2
	jnz loc_41C06E
	mov eax, 1Fh

loc_41C02D:
	call sub_41B710
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	mov eax, 0ABh
	push 3
	mov ecx, 12h
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	jmp loc_41BB88

loc_41C06E:
	cmp dx, 1
	jnz loc_41C07B
	mov eax, 1Bh
	jmp loc_41C02D

loc_41C07B:
	mov eax, 1Eh
	jmp loc_41C02D

loc_41C082:
	cmp ax, 1
	jnz loc_41C092
	mov eax, 1Bh
	jmp loc_41BCA4

loc_41C092:
	mov eax, 1Eh
	jmp loc_41BCA4

loc_41C09C:
	mov eax, [esp+0E0h]
	mov [esp+0F0h], ax
	jmp loc_41BDE6

loc_41C0B0:
	cmp si, 0Dh
	jz loc_41BE2E
	jmp loc_41BE93

loc_41C0BF:
	mov eax, [esp+0C8h]
	cmp word [eax+0Ah], 1
	jnz loc_41BEFA
	cmp si, 4D00h
	jnz loc_41C115

loc_41C0D8:
	mov eax, [esp+0D4h]
	mov edi, 1
	add eax, eax
	mov [esp+0ECh], edi
	mov [esp+0D4h], ax
	cmp ax, 8
	jle loc_41C105
	mov word [esp+0D4h], 2

loc_41C105:
	cmp si, 4D00h
	jnz loc_41BEF3
	jmp loc_41BEE7

loc_41C115:
	cmp si, 0Dh
	jz loc_41C0D8
	jmp loc_41BEFA

loc_41C120:
	test ebp, ebp
	jnz loc_41C199

loc_41C124:
	xor eax, eax
	call sub_403550
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 12h
	call sub_4274F0
	xor ebx, ebx
	mov dword [dword_4D2098], ebx
	mov dword [dword_4D21AC], ebx
	call sub_428A20
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	call sub_4824BC
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	call sub_4824BC
	call sub_4762E0
	call sub_47D410
	mov eax, [esp+0CCh]
	add esp, 0F4h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41C199:
	mov eax, ebp
	call sub_4848FC
	jmp loc_41C124
;sub_41B8D0 endp

sub_41C1B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 1D0h
	mov ebp, eax
	mov ecx, 30h
	mov edi, esp
	mov esi, off_41B7A8
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512DB0]
	rep movsd
	mov [esp+1B0h], edx
	mov ecx, 8
	lea edi, [esp+16Ch]
	mov esi, off_41B868
	mov edx, 1
	mov [esp+1C8h], ax
	rep movsd
	mov ah, byte [byte_512DBC]
	mov ecx, 8
	lea edi, [esp+14Ch]
	mov esi, off_41B888
	mov [esp+1BCh], edx
	mov [esp+1CCh], edx
	rep movsd
	mov [esp+1B4h], edx
	lea edi, [esp+18Ch]
	xor ecx, ecx
	mov esi, dword_41B8A8
	mov [esp+1C0h], ecx
	xor ecx, ecx
	movsd
	movsd
	movsd
	movsd
	mov [esp+1A8h], ecx
	mov [esp+1ACh], ecx
	mov dword [dword_4D2310], ecx
	test ah, 1
	jnz loc_41C795
	mov word [esp+1C4h], 7

loc_41C26C:
	mov ecx, [esp+1C6h]
	call sub_40EB20
	sar ecx, 10h
	lea edx, [esp+0C0h]
	mov eax, ecx
	mov ebx, 1
	call sub_41B210
	lea eax, [esp+0C0h]
	xor edi, edi
	mov [ebp+0], eax
	mov eax, ebp
	mov dword [dword_4D2098], edi
	call sub_410E80
	push edi
	mov eax, ecx
	mov edx, aRec6_0 ; "rec6"
	call sub_419FD0
	movsx ecx, ax
	xor eax, eax
	call sub_428140
	mov edx, [esp+1B0h]
	mov dword [dword_4D2420], edi
	test edx, edx
	jnz loc_41C740
	mov eax, [esp+1C4h]
	dec eax
	mov [esp+1B8h], eax

loc_41C2E2:
	cmp word [esp+1BCh], 0
	jz loc_41C3DF
	mov ecx, [esp+1C6h]
	lea edx, [esp+0C0h]
	sar ecx, 10h
	xor ebx, ebx
	mov eax, ecx
	mov [esp+1BCh], ebx
	call sub_41B210
	lea eax, [esp+0C0h]
	xor ebx, ebx
	mov [ebp+0], eax
	mov eax, ebp
	mov dword [dword_4D2098], ebx
	call sub_410E80
	push ebx
	mov eax, ecx
	mov edx, aRec6_0 ; "rec6"
	call sub_419FD0
	mov ebx, 1
	movsx ecx, ax
	xor eax, eax
	call sub_428140
	mov edx, aSldr ; "sldr"
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov edx, aBack_2 ; "back"
	mov esi, eax
	mov eax, dword [dword_4D40B8]
	xor ecx, ecx
	call sub_482EB4
	mov edi, eax
	mov eax, [esp+1B4h]
	mov [esp+1C0h], ecx
	test ax, ax
	jz loc_41C7A4
	mov ebx, 1
	mov eax, 8Ch
	xor ecx, ecx
	xor edx, edx
	call sub_427280
	xor eax, eax
	xor edx, edx
	call sub_4273B0
	mov [esp+1B4h], edx

loc_41C3A5:
	mov eax, esi
	xor edx, edx
	mov ebx, 1
	call sub_428250
	mov edx, 1
	mov eax, edi
	xor ecx, ecx
	call sub_428250
	xor eax, eax
	mov edx, 0E6h
	call sub_427450
	xor eax, eax
	mov esi, 1
	call sub_427320
	mov dword [dword_4D2310], esi

loc_41C3DF:
	call sub_4833C7
	mov edi, [esp+1ACh]
	mov edx, 1
	mov ebx, [esp+1C0h]
	add edi, eax
	add ebx, edx
	mov [esp+1ACh], edi
	mov [esp+1C0h], ebx
	cmp bx, 23h
	jl loc_41C459
	cmp dx, [esp+1CCh]
	jnz loc_41C459
	mov eax, [esp+1C6h]
	sar eax, 10h
	call sub_407160
	cwde
	push eax
	push aTD0 ; "t%d0"
	lea eax, [esp+1A4h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+19Ch]
	xor edi, edi
	call sub_403480
	call sub_486F28
	mov [esp+1CCh], edi

loc_41C459:
	test dx, dx
	jz loc_41C7AE

loc_41C462:
	call sub_403550
	call sub_428A20
	mov edx, 400h
	mov eax, aBack_2 ; "back"
	mov esi, [esp+1C6h]
	xor ecx, ecx
	xor ebx, ebx
	sar esi, 10h
	call sub_405B30
	imul edx, esi, 18h
	xor eax, eax
	mov al, byte [byte_512DFB]
	shl eax, 2
	xor ecx, ecx
	add eax, edx
	xor ebx, ebx
	mov edx, 400h
	mov eax, [esp+eax]
	call sub_405B30
	mov edx, 1000h
	mov eax, aSldr ; "sldr"
	xor ecx, ecx
	xor ebx, ebx
	call sub_405B30
	push 2
	mov ecx, 12h
	mov ebx, 3Fh
	mov eax, [esp+esi*2+18Eh]
	push 4
	sar eax, 10h
	mov edx, 268h
	call sub_41B710
	call sub_4054E0
	mov dl, byte [byte_512DFA]
	shl esi, 2
	test dl, dl
	jz loc_41C7C5
	lea edi, [esp+110h]
	mov esi, [esp+esi+16Ch]
	push edi

loc_41C50C:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41C524
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41C50C

loc_41C524:
	pop edi
	mov esi, asc_4C90D4 ; " "
	lea edi, [esp+110h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_41C53A:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41C552
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41C53A

loc_41C552:
	pop edi
	mov eax, 0A0h

loc_41C558:
	lea edi, [esp+110h]
	call sub_41B710
	mov esi, eax
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_41C56F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41C587
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41C56F

loc_41C587:
	pop edi
	cmp byte [byte_512DFB], 5
	jnz loc_41C599
	mov byte [esp+111h], 2Ch

loc_41C599:
	push 2
	mov ecx, 12h
	mov ebx, 5Ah
	push 4
	mov edx, 268h
	lea eax, [esp+118h]
	call sub_4054E0
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov edx, [esp+1ACh]
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_426B70
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_41C5FD
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_41C5FD:
	call sub_4976B8

loc_41C609:
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov esi, eax
	test ax, ax
	jz loc_41C732
	mov edx, dword [dword_5637F4]
	cmp edx, [esp+1A8h]
	jle loc_41C732
	mov edx, dword [dword_5637F4]
	add edx, 0Fh
	mov [esp+1A8h], edx
	cmp word [ebp+0Ah], 0
	jnz loc_41C6A3
	cmp ax, 4B00h
	jnz loc_41C6A3
	mov edx, 7Fh
	mov ebx, [esp+1C8h]
	xor eax, eax
	dec ebx
	call sub_4423F0
	mov [esp+1C8h], bx
	test bx, bx
	jl loc_41C825

loc_41C675:
	mov edi, 1
	mov ebx, 1
	mov eax, 12h
	xor ecx, ecx
	xor edx, edx
	mov [esp+1BCh], edi
	mov dword [dword_4D1FFC], ebx
	xor ebx, ebx
	mov [esp+1CCh], edi
	call sub_4274F0

loc_41C6A3:
	cmp word [ebp+0Ah], 0
	jnz loc_41C71A
	cmp si, 4D00h
	jnz loc_41C839

loc_41C6B5:
	cmp si, 4D00h
	jnz loc_41C6C8
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_41C6C8:
	mov edx, [esp+1C6h]
	sar edx, 10h
	mov ecx, [esp+1C2h]
	inc edx
	sar ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ebx, 1
	mov edi, 1
	mov [esp+1BCh], ebx
	mov [esp+1CCh], ebx
	xor ebx, ebx
	mov eax, 12h
	mov [esp+1C8h], dx
	xor ecx, ecx
	xor edx, edx
	mov dword [dword_4D1FFC], edi
	call sub_4274F0

loc_41C71A:
	movsx edx, si
	mov eax, ebp
	call sub_410414
	mov [esp+1B0h], eax
	xor eax, eax
	call sub_403550

loc_41C732:
	cmp dword [esp+1B0h], 0
	jz loc_41C2E2

loc_41C740:
	mov al, [esp+1C8h]
	mov ebp, 1
	xor ecx, ecx
	mov byte [byte_512DB0], al
	xor eax, eax
	xor ebx, ebx
	call sub_403550
	xor eax, eax
	mov dword [dword_4D1FFC], ebp
	call sub_403550
	xor eax, eax
	xor edx, edx
	mov dword [dword_4D2098], eax
	mov eax, 12h
	call sub_4274F0
	mov eax, [esp+1B0h]
	add esp, 1D0h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41C795:
	mov word [esp+1C4h], 8
	jmp loc_41C26C

loc_41C7A4:
	call sub_427210
	jmp loc_41C3A5

loc_41C7AE:
	cmp dword [dword_4D2094], 0
	jnz loc_41C462
	call sub_423B90
	jmp loc_41C609

loc_41C7C5:
	lea edi, [esp+110h]
	mov esi, [esp+esi+14Ch]
	push edi

loc_41C7D4:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41C7EC
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41C7D4

loc_41C7EC:
	pop edi
	mov esi, asc_4C90D4 ; " "
	lea edi, [esp+110h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_41C802:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41C81A
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41C802

loc_41C81A:
	pop edi
	mov eax, 0A1h
	jmp loc_41C558

loc_41C825:
	mov eax, [esp+1B8h]
	mov [esp+1C8h], ax
	jmp loc_41C675

loc_41C839:
	cmp si, 0Dh
	jz loc_41C6B5
	jmp loc_41C71A
;sub_41C1B0 endp

sub_41C850: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0F4h
	mov [esp+0C4h], eax
	mov ecx, 6
	lea edi, [esp+0A0h]
	mov esi, off_41B790
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512DB8]
	mov [esp+0BCh], edx
	rep movsd
	mov edx, 1
	mov [esp+0E0h], ax
	xor ecx, ecx
	mov [esp+0D8h], edx
	mov [esp+0DCh], edx
	mov [esp+0D4h], ecx
	xor eax, eax
	mov edx, 14h
	xor ecx, ecx
	mov al, byte [byte_512DB0]
	mov [esp+0B8h], ecx
	mov [esp+0F0h], ax
	mov ah, byte [byte_512DBC]
	mov [esp+0C8h], ecx
	test ah, 1
	jnz loc_41CED7
	mov word [esp+0E4h], 7

loc_41C8E7:
	mov esi, aCNfs2seFront_6 ; "c:\\nfs2se\\frontend\\common\\Trkstat.c"
	mov edi, 64h
	mov ebx, 20h
	mov eax, aTrkrcrds_1 ; "trkrcrds"
	shl edx, 5
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_484498
	mov dl, byte [byte_512DAF]
	mov ebp, eax
	test dl, dl
	jnz loc_41CEE6
	mov eax, [esp+0C4h]
	mov eax, [eax+18h]
	or byte [eax+8], 1

loc_41C92D:
	mov eax, [esp+0E4h]
	dec eax
	mov [esp+0D0h], eax

loc_41C93C:
	cmp dword [esp+0BCh], 0
	jnz loc_41D14E
	cmp word [esp+0D8h], 0
	jz loc_41C9B0
	xor edx, edx
	mov ebx, [esp+0EEh]
	mov [esp+0D8h], edx
	sar ebx, 10h
	lea edx, [esp+50h]
	mov eax, ebx
	call sub_41B230
	mov edx, [esp+0C4h]
	lea eax, [esp+50h]
	mov [edx], eax
	xor edx, edx
	mov eax, [esp+0C4h]
	mov dword [dword_4D2098], edx
	call sub_410E80
	push edx
	mov eax, ebx
	call sub_419FD0
	mov ebx, 1
	mov edx, aRec6_0 ; "rec6"
	movsx ecx, ax
	xor eax, eax
	call sub_428140

loc_41C9B0:
	cmp word [esp+0DCh], 0
	jnz loc_41CEF9

loc_41C9BF:
	call sub_4833C7
	mov ecx, [esp+0C8h]
	xor edx, edx
	add ecx, eax
	xor esi, esi
	mov [esp+0C8h], ecx
	mov [esp+0C0h], ecx

loc_41C9DF:
	movsx eax, si
	imul eax, 14h
	cmp dword [eax+ebp+0Ch], 0
	jz loc_41C9F1
	mov edx, 1

loc_41C9F1:
	inc esi
	cmp si, 1Fh
	jl loc_41C9DF
	test dx, dx
	jz loc_41CF2A
	mov eax, [esp+0C4h]
	mov eax, [eax+14h]
	and byte [eax+8], 0FEh

loc_41CA0F:
	call sub_428A20
	call sub_40EB20
	mov eax, [esp+0C4h]
	mov edx, 400h
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [eax+4]
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esp+eax*4+0A0h]
	call sub_405B30
	cmp byte [byte_512DFB], 5
	jnz loc_41CF4F
	mov eax, [esp+0DEh]
	sar eax, 10h
	push eax
	mov eax, 0AEh
	call sub_41B710
	push eax
	push aSD_1 ; "%s %d"

loc_41CA75:
	lea eax, [esp+5Ch]
	push eax
	call sprintf_
	add esp, 10h
	push 2
	push 4
	mov eax, 0AEh
	call sub_41B650
	movsx ebx, ax
	mov eax, 0AEh
	call sub_41B670
	sub eax, 14h
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+58h]
	mov edi, [esp+0E8h]
	call sub_4054E0
	cmp di, 2
	jnz loc_41CF6F
	mov dword [esp+0CCh], 1

loc_41CACD:
	mov eax, 0A7h
	mov ebx, 1ACh
	call sub_41B670
	xor ecx, ecx
	movsx edx, ax
	mov eax, 0B3h
	call sub_405580
	cmp word [esp+0D4h], 0
	jnz loc_41CF95

loc_41CAFA:
	mov edi, 0B4h
	xor esi, esi
	mov [esp+0E8h], di
	mov [esp+0ECh], si

loc_41CB11:
	mov edi, [esp+0EAh]
	sar edi, 10h
	lea esi, [edi+0B4h]
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A7h
	call sub_41B670
	movsx edx, ax
	mov eax, [esp+0E6h]
	xor ecx, ecx
	sar eax, 10h
	call sub_405580
	add edi, [esp+0CCh]
	imul edi, 14h
	add edi, ebp
	cmp dword [edi+0Ch], 0
	jz loc_41CC66
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A8h
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	mov eax, edi
	call sub_4054E0
	mov eax, [edi+8]
	sar eax, 10h
	call sub_41A420
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+58h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0A9h
	call sub_41B670
	sub eax, 19h
	mov ecx, 12h
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0
	lea edx, [esp+50h]
	mov eax, [edi+0Ch]
	call sub_41B150
	push 4
	push 3
	mov eax, esi
	call sub_41B650
	movsx ebx, ax
	mov eax, 0AAh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0
	mov ax, [edi+10h]
	cmp ax, 2
	jnz loc_41D090
	mov eax, 1Fh

loc_41CC18:
	call sub_41B710
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+58h]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, [esp+0EAh]
	push 4
	sar eax, 10h
	push 3
	add eax, 0B4h
	call sub_41B650
	movsx ebx, ax
	mov eax, 0ABh
	mov ecx, 12h
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0

loc_41CC66:
	mov ecx, [esp+0ECh]
	mov ebx, [esp+0E8h]
	inc ecx
	inc ebx
	mov [esp+0ECh], cx
	mov [esp+0E8h], bx
	cmp cx, 0Ah
	jl loc_41CB11
	mov eax, [esp+0C4h]
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov edx, [esp+0C0h]
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_426B70
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_41CCDA
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_41CCDA:
	call sub_4976B8
	mov eax, [esp+0C4h]
	call sub_423CA0
	call sub_405960
	mov esi, eax
	test ax, ax
	jz loc_41C93C
	mov edx, [esp+0C8h]
	cmp edx, [esp+0B8h]
	jle loc_41C93C
	add edx, 0Fh
	mov [esp+0B8h], edx
	mov edx, [esp+0C4h]
	cmp word [edx+0Ah], 0
	jnz loc_41CD89
	cmp ax, 4B00h
	jnz loc_41CD89
	mov edx, [esp+0F0h]
	mov eax, 1
	sub edx, eax
	mov [esp+0DCh], eax
	mov [esp+0F0h], dx
	test dx, dx
	jl loc_41D0AA

loc_41CD5A:
	mov edx, 7Fh
	xor eax, eax
	mov ecx, 1
	call sub_4423F0
	xor ebx, ebx
	xor eax, eax
	mov [esp+0D8h], ecx
	call sub_403550
	xor edx, edx
	mov eax, 12h
	xor ecx, ecx
	call sub_4274F0

loc_41CD89:
	mov eax, [esp+0C4h]
	cmp word [eax+0Ah], 0
	jnz loc_41CE07
	cmp si, 4D00h
	jnz loc_41D0BE

loc_41CDA2:
	mov edx, [esp+0EEh]
	mov eax, 1
	mov ecx, [esp+0E2h]
	sar edx, 10h
	mov [esp+0DCh], eax
	inc edx
	sar ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov [esp+0F0h], dx
	mov dword [esp+0D8h], 1
	cmp si, 4D00h
	jnz loc_41CDF0
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_41CDF0:
	xor eax, eax
	call sub_403550
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 12h
	call sub_4274F0

loc_41CE07:
	mov eax, [esp+0C4h]
	mov bx, [eax+0Ah]
	cmp bx, 1
	jnz loc_41D0CD
	cmp si, 4B00h
	jnz loc_41D0CD
	mov [esp+0DCh], ebx
	mov ebx, [esp+0DEh]
	sar ebx, 10h
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+0E0h], ax
	cmp ax, 2
	jge loc_41CE5B
	mov word [esp+0E0h], 8

loc_41CE5B:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0

loc_41CE67:
	xor eax, eax
	call sub_403550

loc_41CE6E:
	mov eax, [esp+0C4h]
	movsx edx, si
	call sub_410414
	mov [esp+0BCh], eax
	mov eax, [esp+0C4h]
	cmp word [eax+0Ah], 2
	jnz loc_41C93C
	cmp si, 0Dh
	jnz loc_41C93C
	push 34Dh
	mov ebx, 1
	push 1
	mov [esp+0E0h], ebx
	call sub_401AE0
	mov [esp+0E4h], ebx
	add esp, 8
	cmp ax, bx
	jz loc_41D12E
	xor eax, eax
	call sub_403550
	jmp loc_41C93C

loc_41CED7:
	mov word [esp+0E4h], 8
	jmp loc_41C8E7

loc_41CEE6:
	mov eax, [esp+0C4h]
	mov eax, [eax+18h]
	and byte [eax+8], 0FEh
	jmp loc_41C92D

loc_41CEF9:
	mov ebx, [esp+0EEh]
	sar ebx, 10h
	mov edx, esp
	mov eax, ebx
	xor ecx, ecx
	call sub_41AEF0
	mov [esp+0D4h], eax
	mov edx, ebp
	mov eax, ebx
	mov [esp+0DCh], ecx
	call sub_41B040
	jmp loc_41C9BF

loc_41CF2A:
	mov eax, [esp+0C4h]
	cmp word [eax+0Ah], 2
	jnz loc_41CF3C
	mov [eax+0Ah], dx

loc_41CF3C:
	mov eax, [esp+0C4h]
	mov eax, [eax+14h]
	or byte [eax+8], 1
	jmp loc_41CA0F

loc_41CF4F:
	mov eax, 0AEh
	call sub_41B710
	push eax
	mov eax, [esp+0E2h]
	sar eax, 10h
	push eax
	push aDS_0 ; "%d %s"
	jmp loc_41CA75

loc_41CF6F:
	cmp di, 4
	jnz loc_41CF85
	mov dword [esp+0CCh], 0Bh
	jmp loc_41CACD

loc_41CF85:
	mov dword [esp+0CCh], 15h
	jmp loc_41CACD

loc_41CF95:
	push 2
	mov eax, 0A8h
	push 3
	mov ecx, 12h
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	mov eax, ebp
	call sub_4054E0
	mov eax, [ebp+8]
	sar eax, 10h
	call sub_41A420
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+58h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 3
	mov eax, 0A9h
	mov ecx, 12h
	call sub_41B670
	sub eax, 19h
	mov ebx, 1ACh
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0
	lea edx, [esp+50h]
	mov eax, [ebp+0Ch]
	call sub_41B150
	push 2
	mov ecx, 12h
	push 3
	mov eax, 0AAh
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0
	mov bx, [ebp+10h]
	cmp bx, 2
	jnz loc_41D07C
	mov eax, 1Fh

loc_41D03B:
	call sub_41B710
	push eax
	push aS_0 ; "%s"
	lea eax, [esp+58h]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	mov eax, 0ABh
	push 3
	mov ecx, 12h
	mov ebx, 1ACh
	call sub_41B670
	movsx edx, ax
	lea eax, [esp+58h]
	call sub_4054E0
	jmp loc_41CAFA

loc_41D07C:
	cmp bx, 1
	jnz loc_41D089
	mov eax, 1Bh
	jmp loc_41D03B

loc_41D089:
	mov eax, 1Eh
	jmp loc_41D03B

loc_41D090:
	cmp ax, 1
	jnz loc_41D0A0
	mov eax, 1Bh
	jmp loc_41CC18

loc_41D0A0:
	mov eax, 1Eh
	jmp loc_41CC18

loc_41D0AA:
	mov eax, [esp+0D0h]
	mov [esp+0F0h], ax
	jmp loc_41CD5A

loc_41D0BE:
	cmp si, 0Dh
	jz loc_41CDA2
	jmp loc_41CE07

loc_41D0CD:
	mov eax, [esp+0C4h]
	cmp word [eax+0Ah], 1
	jnz loc_41CE6E
	cmp si, 4D00h
	jnz loc_41D123

loc_41D0E6:
	mov eax, [esp+0E0h]
	mov edi, 1
	add eax, eax
	mov [esp+0DCh], edi
	mov [esp+0E0h], ax
	cmp ax, 8
	jle loc_41D113
	mov word [esp+0E0h], 2

loc_41D113:
	cmp si, 4D00h
	jnz loc_41CE67
	jmp loc_41CE5B

loc_41D123:
	cmp si, 0Dh
	jz loc_41D0E6
	jmp loc_41CE6E

loc_41D12E:
	mov eax, [esp+0EEh]
	mov edx, 1
	sar eax, 10h
	call fetchTrackRecords
	xor eax, eax
	call sub_403550
	jmp loc_41C93C

loc_41D14E:
	mov al, [esp+0F0h]
	xor bh, bh
	mov byte [byte_512DB0], al
	mov al, [esp+0E0h]
	mov byte [byte_512DB9], bh
	mov byte [byte_512DB8], al
	cmp al, 8
	jnz loc_41D179
	mov byte [byte_512DB9], 1

loc_41D179:
	mov al, byte [byte_512DB8]
	cmp al, 2
	jnz loc_41D187
	mov byte [byte_512DB9], al

loc_41D187:
	xor eax, eax
	call sub_403550
	test ebp, ebp
	jnz loc_41D1CA

loc_41D197:
	xor eax, eax
	call sub_403550
	xor ebp, ebp
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 12h
	mov dword [dword_4D2098], ebp
	call sub_4274F0
	mov eax, [esp+0BCh]
	add esp, 0F4h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41D1CA:
	mov eax, ebp
	call sub_4848FC
	jmp loc_41D197
;sub_41C850 endp

sub_41D1E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	sub esp, 190h
	mov ebx, eax
	cmp dword [dword_4D4B48], 0
	jz loc_41D205

loc_41D1F5:
	mov eax, dword [dword_4D4B48]
	add esp, 190h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_41D205:
	mov eax, esp
	push eax ; lpWSAData
	push 101h ; wVersionRequested
	call WSAStartup_wrap
	test eax, eax
	jnz loc_41D1F5
	push edi
	push esi
	xor edx, edx
	call sub_41D7B0
	test eax, eax
	jz loc_41D263
	mov ecx, 1
	mov esi, off_4D4AEC
	mov dword [dword_4D4B48], ecx
	call sub_41D720
	mov eax, dword [dword_4DBADC]
	mov edi, dword_4DBB00
	lea ebp, [eax+ecx]
	mov dword dword_564344[eax*4], esi
	mov dword dword_564324[eax*4], edi
	mov dword [dword_4DBADC], ebp
	test ebx, ebx
	jz loc_41D263
	mov dword [off_4D4AEC], ebx

loc_41D263:
	call WSACleanup_wrap
	pop esi
	pop edi
	mov eax, dword [dword_4D4B48]
	add esp, 190h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41D1E0 endp

sub_41D280: ;SUBROUTINE
	push ebp
	sub esp, 20h
	mov ebp, eax
	mov [esp+1Ch], ebx
	mov [esp], ebx
	test edx, edx
	jnz loc_41D2B7
	mov [esp+18h], edx

loc_41D295:
	cmp dword [dword_4DBAD8], 4
	jge loc_41D2CC

loc_41D29E:
	mov ebx, esp
	mov edx, sub_41DA70
	lea eax, [ebp+68h]
	call sub_48BFFC
	mov eax, 1
	add esp, 20h
	pop ebp
	ret

loc_41D2B7:
	push edi
	push esi
	lea edi, [esp+0Ch]
	mov esi, edx
	movsd
	movsd
	movsd
	movsd
	movsd
	mov [esp+20h], eax
	pop esi
	pop edi
	jmp loc_41D295

loc_41D2CC:
	push 0
	mov ecx, 14h
	mov eax, aWinipxflush ; "WINIPXFlush"
	push 0
	mov ebx, edx
	lea edx, [esp+24h]
	call sub_48B724
	jmp loc_41D29E
;sub_41D280 endp

sub_41D2F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov [esp+2Ch], eax
	mov [esp+20h], edx
	mov [esp+24h], ebx
	mov [esp+1Ch], ecx
	lea ebx, [eax+4Ch]
	mov eax, ebx
	call sub_48BAFC
	mov ebp, eax
	test eax, eax
	jz loc_41D346
	mov esi, [esp+2Ch]
	add esi, 68h

loc_41D31D:
	mov eax, [esp+2Ch]
	mov edx, ebp
	call sub_41DB50
	test eax, eax
	jz loc_41D3E3
	mov edx, ebp
	mov eax, esi
	call sub_48BAB4
	mov eax, ebx
	call sub_48BAFC
	mov ebp, eax
	test eax, eax
	jnz loc_41D31D

loc_41D346:
	mov eax, [esp+24h]
	lea edi, [esp+4]
	mov eax, [eax]
	mov esi, [esp+20h]
	mov [esp], eax
	mov eax, [esp+2Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov ebx, esp
	mov [esp+18h], eax
	lea esi, [eax+68h]
	mov edx, sub_41DAC0
	mov eax, esi
	call sub_48BE10
	mov ebp, eax
	test eax, eax
	jz loc_41D3CE
	mov edi, [esp+2Ch]
	add edi, 4Ch

loc_41D382:
	mov eax, dword [dword_5637F0]
	add eax, 10h
	cmp eax, [ebp+4]
	jge loc_41D3F1
	cmp dword [dword_4DBAD8], 4
	jl loc_41D3B1
	push 0
	mov ecx, 14h
	lea ebx, [ebp+0Ch]
	push 0
	mov eax, aTurfBuffer ; "Turf Buffer"
	lea edx, [ebp+20h]
	call sub_48B724

loc_41D3B1:
	mov edx, ebp
	mov eax, edi
	mov ebx, esp
	call sub_48BA80
	mov edx, sub_41DAC0
	mov eax, esi
	call sub_48BE10
	mov ebp, eax
	test eax, eax
	jnz loc_41D382

loc_41D3CE:
	mov eax, [esp+24h]
	mov dword [eax], 0
	xor eax, eax
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_41D3E3:
	mov edx, ebp
	mov eax, ebx
	call sub_48BA80
	jmp loc_41D346

loc_41D3F1:
	mov eax, [ebp+8]
	sub eax, 4
	mov ecx, [esp+40h]
	mov [esp+28h], eax
	cmp eax, ecx
	jle loc_41D46F
	mov [esp+28h], ecx

loc_41D407:
	mov edi, [esp+20h]
	lea esi, [ebp+0Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov edx, [esp+24h]
	mov eax, [ebp+20h]
	mov edi, [esp+28h]
	mov [edx], eax
	test edi, edi
	jz loc_41D432
	mov edx, [esp+1Ch]
	lea eax, [ebp+28h]
	mov ebx, edi
	call sub_48A980

loc_41D432:
	cmp dword [dword_4DBAD8], 4
	jl loc_41D454
	push 0
	mov ecx, 14h
	lea ebx, [ebp+0Ch]
	push 0
	mov eax, aWinipxrecv ; "WINIPXRecv"
	lea edx, [ebp+20h]
	call sub_48B724

loc_41D454:
	mov eax, [esp+2Ch]
	mov edx, ebp
	add eax, 4Ch
	call sub_48BA80
	mov eax, [esp+28h]
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_41D46F:
	test eax, eax
	jge loc_41D407
	xor esi, esi
	mov [esp+28h], esi
	jmp loc_41D407
;sub_41D2F0 endp

sub_41D480: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 138h
	mov edi, [esp+148h]
	mov ebp, eax
	mov esi, edx
	mov [esp+12Ch], ebx
	cmp edi, 118h
	jle loc_41D4A8
	mov edi, 118h

loc_41D4A8:
	mov ebx, 4
	mov edx, [esp+12Ch]
	mov eax, esp
	call sub_48C054
	lea edx, [esp+4]
	mov ebx, edi
	mov eax, ecx
	call sub_48A980
	test esi, esi
	jz loc_41D571
	lea edx, [esp+11Ch]
	mov eax, esi
	call sub_41DC90

loc_41D4DE:
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	push 0Eh ; tolen
	lea eax, [esp+120h]
	push eax ; to
	push 0 ; flags
	lea eax, [edi+4]
	push eax ; len
	lea eax, [esp+10h]
	push eax ; buf
	mov edx, [ebp+34h]
	push edx ; s
	call sendto_wrap
	mov ecx, eax
	mov [esp+134h], eax
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	cmp ecx, 0FFFFFFFFh
	jnz loc_41D586
	call WSAGetLastError_wrap
	mov ebx, dword [dword_4DBAD8]
	mov [esp+130h], eax
	cmp ebx, 4
	jl loc_41D552
	push 0
	mov ecx, 4
	lea edx, [esp+134h]
	push 1
	mov eax, aIpxfailsend ; "ipxfailsend"
	lea ebx, [ebp+34h]

loc_41D54D:
	call sub_48B724

loc_41D552:
	mov esi, [esp+134h]
	add edi, 4
	cmp edi, esi
	jnz loc_41D5A8
	mov eax, 1
	add esp, 138h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_41D571:
	lea edx, [esp+11Ch]
	movsx eax, word [ebp+0]
	call sub_41DC40
	jmp loc_41D4DE

loc_41D586:
	cmp dword [dword_4DBAD8], 4
	jl loc_41D552
	push 0
	mov ecx, 14h
	lea edx, [esp+130h]
	push 0
	mov eax, aWinipxsend ; "WINIPXSend"
	mov ebx, esi
	jmp loc_41D54D

loc_41D5A8:
	xor eax, eax
	add esp, 138h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_41D480 endp

sub_41D5C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 8
	mov ebx, eax
	add eax, 68h
	call sub_48BC4C
	test eax, eax
	jbe loc_41D5E0

loc_41D5D4:
	mov eax, 1
	add esp, 8
	pop edx
	pop ecx
	pop ebx
	ret

loc_41D5E0:
	lea eax, [esp+4]
	push eax ; argp
	push 4004667Fh ; cmd
	mov edx, [ebx+34h]
	push edx ; s
	call ioctlsocket_wrap
	mov [esp], eax
	cmp eax, 0FFFFFFFFh
	jz loc_41D60B
	cmp dword [esp+4], 0
	ja loc_41D5D4
	xor eax, eax
	add esp, 8
	pop edx
	pop ecx
	pop ebx
	ret

loc_41D60B:
	cmp dword [dword_4DBAD8], 4
	jl loc_41D62E
	push 0
	mov ecx, 4
	lea edx, [esp+4]
	push 1
	mov eax, aIpxfailready ; "ipxfailready"
	add ebx, 34h
	call sub_48B724

loc_41D62E:
	xor eax, eax
	add esp, 8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41D5C0 endp

sub_41D640: ;SUBROUTINE
	mov eax, 1
	ret
;sub_41D640 endp

sub_41D650: ;SUBROUTINE
	push esi
	push edi
	mov edi, edx
	lea esi, [eax+38h]
	mov eax, 1
	movsd
	movsd
	movsd
	movsd
	movsd
	pop edi
	pop esi
	ret
;sub_41D650 endp

sub_41D670: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 8
	lea edi, [ebx+4]
	lea esi, [edx+4]
	xor eax, eax
	repe cmpsb
	jz loc_41D689
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_41D689:
	test eax, eax
	jnz loc_41D696
	mov eax, 1
	pop edi
	pop esi
	pop ecx
	ret

loc_41D696:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	ret
;sub_41D670 endp

sub_41D6A0: ;SUBROUTINE
	mov byte [eax+2], 0
	mov eax, 1
	ret
;sub_41D6A0 endp

sub_41D6B0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov ebx, 30h
	add eax, 2
	call strncpy_
	mov eax, [ecx+34h]
	call sub_48A9E0
	pop ecx
	pop ebx
	ret
;sub_41D6B0 endp

;	Attributes: thunk

sub_41D6D0: ;SUBROUTINE
	jmp sub_48AF34
;sub_41D6D0 endp

sub_41D6E0: ;SUBROUTINE
	push ebx
	push ecx
	lea ecx, [eax+38h]
	mov ebx, edx
	mov edx, ecx
	call sub_48AE40
	pop ecx
	pop ebx
	ret
;sub_41D6E0 endp

sub_41D700: ;SUBROUTINE
	push ecx
	mov ecx, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	pop ecx
	ret
;sub_41D700 endp

sub_41D720: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 4
	mov esi, eax
	cmp dword [dword_4DBAD8], 4
	jl loc_41D746
	push 0
	mov eax, aIpxclosesocket ; "ipxclosesocket"
	xor ecx, ecx
	push 0
	xor ebx, ebx
	xor edx, edx
	call sub_48B724

loc_41D746:
	mov ecx, [esi+34h]
	push ecx ; s
	call closesocket_wrap
	cmp eax, 0FFFFFFFFh
	jz loc_41D778

loc_41D754:
	lea eax, [esi+4Ch]
	call sub_48BA6C
	lea eax, [esi+68h]
	call sub_48BA6C
	mov eax, esi
	call sub_4848FC
	mov eax, 1
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41D778:
	call WSAGetLastError_wrap
	mov ebx, dword [dword_4DBAD8]
	mov [esp], eax
	cmp ebx, 4
	jl loc_41D754
	push 0
	lea edx, [esp+4]
	mov eax, aCloseerr ; "closeerr"
	push 1
	xor ecx, ecx
	xor ebx, ebx
	call sub_48B724
	jmp loc_41D754
;sub_41D720 endp

sub_41D7B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov [esp+10h], eax
	mov edx, aCNfs2seFron_13 ; "c:\\nfs2se\\frontend\\pc\\ipx.c"
	mov ecx, 0E6h
	mov ebx, 300h
	mov eax, aSocket ; "socket"
	mov dword [dword_4DB1D8], edx
	mov edx, 14084h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov edx, 14084h
	mov ecx, eax
	mov edi, eax
	call sub_48A01C
	xor ebx, ebx
	lea esi, [ecx+4Ch]
	xor edx, edx
	mov eax, esi
	call sub_48BA2C
	lea eax, [ecx+68h]
	xor ebx, ebx
	xor edx, edx
	xor ebp, ebp
	call sub_48BA2C
	lea eax, [ecx+84h]
	mov ebx, esi
	mov ecx, eax
	lea esi, [eax+14000h]

loc_41D820:
	mov edx, ecx
	mov eax, ebx
	add ecx, 140h
	call sub_48BA80
	cmp ecx, esi
	jnz loc_41D820
	push 3E8h ; protocol
	push 2 ; type
	push 6 ; af
	call socket_wrap
	mov ebx, dword [dword_4DBAD8]
	mov [edi+34h], eax
	cmp ebx, 4
	jge loc_41D8BB

loc_41D84F:
	cmp dword [edi+34h], 0FFFFFFFFh
	jnz loc_41D8DA

loc_41D859:
	test ebp, ebp
	jnz loc_41D8B0
	cmp dword [dword_4DBAD8], 4
	jge loc_41D9D9

loc_41D86A:
	mov ecx, [edi+34h]
	cmp ecx, 0FFFFFFFFh
	jz loc_41D8A7
	push ecx ; s
	call closesocket_wrap
	cmp eax, 0FFFFFFFFh
	jnz loc_41D8A7
	call WSAGetLastError_wrap
	mov esi, dword [dword_4DBAD8]
	mov [esp+1Ch], eax
	cmp esi, 4
	jl loc_41D8A7
	push 0
	lea edx, [esp+20h]
	mov eax, aAborterr ; "aborterr"
	push 1
	xor ecx, ecx
	xor ebx, ebx
	call sub_48B724

loc_41D8A7:
	mov eax, edi
	call sub_4848FC
	xor edi, edi

loc_41D8B0:
	mov eax, edi
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41D8BB:
	push 0
	mov ecx, 4
	lea edx, [esp+14h]
	push 1
	mov eax, aIpxopensocket ; "ipxopensocket"
	lea ebx, [edi+34h]
	call sub_48B724
	jmp loc_41D84F

loc_41D8DA:
	mov eax, 1
	push 4 ; optlen
	mov [esp+18h], eax
	lea eax, [esp+18h]
	push eax ; optval
	push 20h ; optname
	push 0FFFFh ; level
	mov edx, [edi+34h]
	push edx ; s
	call setsockopt_wrap
	push 4 ; optlen
	lea eax, [esp+18h]
	push eax ; optval
	xor ecx, ecx
	push 400Fh ; optname
	mov [esp+20h], ecx
	push 0FFFFh ; level
	mov ebx, [edi+34h]
	push ebx ; s
	call setsockopt_wrap
	push 4 ; optlen
	lea eax, [esp+18h]
	push eax ; optval
	push 400Fh ; optname
	push 3E8h ; level
	mov esi, [edi+34h]
	push esi ; s
	call setsockopt_wrap
	mov dword [esp+14h], 1
	lea eax, [esp+14h]
	push eax ; argp
	push 8004667Eh ; cmd
	mov edx, [edi+34h]
	push edx ; s
	call ioctlsocket_wrap
	mov edx, 0Eh
	mov eax, esp
	call sub_48A01C
	xor eax, eax
	mov ax, [esp+10h]
	mov edx, 6
	push eax ; hostshort
	mov [esp+4], dx
	call htons_wrap
	push 0Eh ; namelen
	mov [esp+10h], ax
	lea eax, [esp+4]
	push eax ; name
	mov ecx, [edi+34h]
	push ecx ; s
	call bind_wrap
	test eax, eax
	jnz loc_41D859
	lea eax, [esp+18h]
	mov ebx, 0Eh
	push eax ; namelen
	lea eax, [esp+4]
	mov [esp+1Ch], ebx
	push eax ; name
	mov esi, [edi+34h]
	push esi ; s
	call getsockname_wrap
	test eax, eax
	jnz loc_41D859
	cmp ebx, [esp+18h]
	jnz loc_41D859
	mov eax, esp
	lea edx, [edi+38h]
	call sub_41DCD0
	mov eax, [esp+0Ch]
	mov [edi], ax
	mov eax, edi
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41D9D9:
	push ebp
	mov eax, aOpenfailed ; "openfailed"
	xor ecx, ecx
	push 1
	xor ebx, ebx
	xor edx, edx
	call sub_48B724
	jmp loc_41D86A
;sub_41D7B0 endp

sub_41DA00: ;SUBROUTINE
	push ecx
	push edx
	call WSACleanup_wrap
	test eax, eax
	jnz loc_41DA13
	mov eax, 1
	pop edx
	pop ecx
	ret

loc_41DA13:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_41DA00 endp

sub_41DA20: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 190h
	mov eax, esp
	push eax ; lpWSAData
	push 101h ; wVersionRequested
	call WSAStartup_wrap
	test eax, eax
	jnz loc_41DA58
	mov edx, [esp+188h]
	test dx, dx
	jz loc_41DA51
	mov ax, dx

loc_41DA48:
	add esp, 190h
	pop edx
	pop ecx
	ret

loc_41DA51:
	mov eax, 2000h
	jmp loc_41DA48

loc_41DA58:
	xor eax, eax
	add esp, 190h
	pop edx
	pop ecx
	ret
;sub_41DA20 endp

sub_41DA70: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, [eax+20h]
	mov ebx, [edx]
	mov esi, eax
	cmp ecx, ebx
	jnz loc_41DA8D
	mov edi, [edx+18h]
	test edi, edi
	jnz loc_41DA97

loc_41DA86:
	mov dword [esi+4], 0

loc_41DA8D:
	mov eax, 1
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41DA97:
	lea ebx, [edx+4]
	lea edx, [eax+0Ch]
	mov eax, edi
	call sub_41D670
	test eax, eax
	jnz loc_41DA86
	mov eax, 1
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DA70 endp

sub_41DAC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, dword [dword_5637F0]
	add ecx, 10h
	cmp ecx, [eax+4]
	jl loc_41DAD8
	mov esi, [eax+20h]
	cmp esi, [edx]
	jz loc_41DAE1

loc_41DAD8:
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_41DAE1:
	lea ebx, [eax+0Ch]
	lea eax, [edx+4]
	mov ecx, [edx+18h]
	mov edx, eax
	mov eax, ecx
	call sub_41D670
	test eax, eax
	jnz loc_41DAD8
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DAC0 endp

sub_41DB00: ;SUBROUTINE
	push esi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov [esp], edx
	mov esi, ebx
	lea edx, [eax+2]
	mov ebx, 30h
	mov eax, esi
	call strncmp_
	test eax, eax
	jz loc_41DB25
	add esp, 4
	pop ebp
	pop esi
	ret

loc_41DB25:
	push edi
	push ecx
	mov edi, esi
	mov ebx, 0EA737276h
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	inc ecx
	mov edx, [esp+8]
	push ecx
	mov eax, ebp
	mov ecx, esi
	call sub_41D480
	pop ecx
	pop edi
	add esp, 4
	pop ebp
	pop esi
	ret
;sub_41DB00 endp

sub_41DB50: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov edi, eax
	mov esi, edx
	mov edx, 0Eh
	mov eax, dword [dword_4DB6A0]
	mov [esp+10h], edx
	call sub_489F48
	lea eax, [esp+10h]
	push eax ; fromlen
	lea eax, [esp+4]
	push eax ; from
	push 0 ; flags
	push 11Ch ; len
	lea ebx, [esi+24h]
	push ebx ; buf
	mov ecx, [edi+34h]
	push ecx ; s
	call recvfrom_wrap
	mov [esi+8], eax
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	mov ebp, [esi+8]
	test ebp, ebp
	jle loc_41DBE8
	cmp byte [edi+2], 0
	jnz loc_41DBF3

loc_41DBA7:
	mov eax, dword [dword_5637F0]
	mov ecx, 4
	mov [esi+4], eax
	lea eax, [esi+24h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+20h], eax
	test eax, eax
	jz loc_41DBDA
	cmp dword [esi+8], 4
	jl loc_41DBDA
	cmp dword [esp+10h], 0Eh
	jz loc_41DC04

loc_41DBDA:
	mov dword [esi+8], 0
	mov dword [esi+20h], 0

loc_41DBE8:
	xor eax, eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41DBF3:
	mov edx, esp
	mov ecx, ebp
	mov eax, edi
	call sub_48AA98
	test eax, eax
	jz loc_41DBA7
	jmp loc_41DBE8

loc_41DC04:
	lea ebx, [esi+0Ch]
	mov eax, esp
	mov edx, ebx
	call sub_41DCD0
	cmp dword [dword_4DBAD8], 4
	jl loc_41DC2F
	push 0
	mov ecx, 14h
	push 0
	mov eax, aRecvfrom ; "recvfrom"
	lea edx, [esi+20h]
	call sub_48B724

loc_41DC2F:
	mov eax, 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DB50 endp

sub_41DC40: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 4
	mov [esp], eax
	mov ecx, edx
	lea eax, [edx+2]
	mov word [edx], 6
	xor ebx, ebx
	mov edx, 4
	call sub_48A026
	mov ebx, 0FFh
	mov edx, 6
	lea eax, [ecx+6]
	call sub_48A026
	mov ebx, 2
	mov eax, esp
	lea edx, [ecx+0Ch]
	call sub_48A980
	add esp, 4
	pop ecx
	pop ebx
	ret
;sub_41DC40 endp

sub_41DC90: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov ebx, 4
	add edx, 2
	call sub_48A980
	mov ebx, 6
	lea edx, [ecx+6]
	lea eax, [esi+4]
	call sub_48A980
	mov ebx, 2
	lea edx, [ecx+0Ch]
	lea eax, [esi+0Ah]
	call sub_48A980
	mov word [ecx], 6
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DC90 endp

sub_41DCD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov ebx, 4
	add eax, 2
	call sub_48A980
	mov ebx, 6
	lea edx, [ecx+4]
	lea eax, [esi+6]
	call sub_48A980
	mov ebx, 2
	lea edx, [ecx+0Ah]
	lea eax, [esi+0Ch]
	call sub_48A980
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DCD0 endp

sub_41DD10: ;SUBROUTINE
	push ecx
	push edx
	cmp dword [dword_4D4BC0], 0
	jz loc_41DD23

loc_41DD1B:
	mov eax, dword [dword_4D4BC0]
	pop edx
	pop ecx
	ret

loc_41DD23:
	push dword_4E6030 ; lpWSAData
	push 101h ; wVersionRequested
	call WSAStartup_wrap
	test eax, eax
	jnz loc_41DD1B
	push eax ; protocol
	push 1 ; type
	push 2 ; af
	call socket_wrap
	cmp eax, 0FFFFFFFFh
	jz loc_41DD90
	push edi
	push esi
	push ebx
	mov ecx, off_4D4B64
	mov ebx, dword_4DBB6C
	mov edi, 1
	mov edx, dword [dword_4DBADC]
	push eax ; s
	lea esi, [edx+1]
	mov dword dword_564344[edx*4], ecx
	mov dword dword_564324[edx*4], ebx
	mov dword [dword_4DBADC], esi
	call closesocket_wrap
	mov dword [dword_4D4BC0], edi
	pop ebx
	pop esi
	pop edi

loc_41DD90:
	call WSACleanup_wrap
	mov eax, dword [dword_4D4BC0]
	pop edx
	pop ecx
	ret
;sub_41DD10 endp

sub_41DDA0: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 4
	mov dword [esp], 14h
	mov ecx, esp
	push ecx ; namelen
	push edx ; name
	mov ebx, [eax+18h]
	push ebx ; s
	call getsockname_wrap
	cmp eax, 0FFFFFFFFh
	jz loc_41DDC9
	mov eax, 1
	add esp, 4
	pop ecx
	pop ebx
	ret

loc_41DDC9:
	xor eax, eax
	add esp, 4
	pop ecx
	pop ebx
	ret
;sub_41DDA0 endp

sub_41DDE0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 10h
	mov edi, ebx
	mov esi, edx
	xor eax, eax
	repe cmpsb
	jz loc_41DDF7
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_41DDF7:
	test eax, eax
	jnz loc_41DE04
	mov eax, 1
	pop edi
	pop esi
	pop ecx
	ret

loc_41DE04:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	ret
;sub_41DDE0 endp

sub_41DE10: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov [esp], eax
	mov esi, edx
	mov [esp+8], ebx
	mov ebx, ecx
	mov ebp, 1
	mov [esp+4], ecx
	test edx, edx
	jnz loc_41DE37

loc_41DE2E:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41DE37:
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	test ecx, ecx
	jz loc_41DE2E
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp byte [ecx+esi-1], 2Eh
	jz loc_41DE2E
	push edx ; cp
	call inet_addr_wrap
	mov edx, 14h
	mov ecx, eax
	mov eax, ebx
	call sub_48A01C
	mov word [ebx], 2
	cmp ecx, 0FFFFFFFFh
	jnz loc_41DED4
	push esi ; name
	call gethostbyname_wrap
	mov ecx, eax
	test eax, eax
	jz loc_41DED0
	mov ebx, [eax+8]
	sar ebx, 10h
	cmp ebx, 4
	jnb loc_41DEC9

loc_41DE8F:
	mov edx, [esp+4]
	mov eax, [ecx+0Ch]
	add edx, 4
	mov eax, [eax]
	call sub_48A980

loc_41DEA0:
	test ebp, ebp
	jz loc_41DEC0
	cmp dword [esp+8], 0
	jz loc_41DED9
	xor eax, eax
	mov ax, [esp+8]

loc_41DEB2:
	push eax ; hostshort
	call htons_wrap
	mov edx, [esp+4]
	mov [edx+2], ax

loc_41DEC0:
	mov eax, ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41DEC9:
	mov ebx, 4
	jmp loc_41DE8F

loc_41DED0:
	xor ebp, ebp
	jmp loc_41DEC0

loc_41DED4:
	mov [ebx+4], ecx
	jmp loc_41DEA0

loc_41DED9:
	mov edx, [esp]
	xor eax, eax
	mov ax, [edx]
	jmp loc_41DEB2
;sub_41DE10 endp

sub_41DEF0: ;SUBROUTINE
	xor eax, eax
	ret
;sub_41DEF0 endp

sub_41DF00: ;SUBROUTINE
	xor eax, eax
	ret
;sub_41DF00 endp

sub_41DF10: ;SUBROUTINE
	xor eax, eax
	ret
;sub_41DF10 endp

sub_41DF20: ;SUBROUTINE
	xor eax, eax
	ret
;sub_41DF20 endp

sub_41DF30: ;SUBROUTINE
	mov eax, [eax]
	ret
;sub_41DF30 endp

sub_41DF40: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, eax
	cmp byte [eax+43h], 0
	jnz loc_41DF63

loc_41DF4C:
	mov edx, [ebx+18h]
	cmp edx, 0FFFFFFFFh
	jnz loc_41DF87
	mov eax, ebx
	call sub_4848FC
	mov eax, 1
	pop edx
	pop ebx
	ret

loc_41DF63:
	mov dl, [ebx+43h]
	mov byte [ebx+42h], 1
	test dl, dl
	jz loc_41DF4C

loc_41DF6E:
	xor eax, eax
	call sub_483EB0
	mov eax, 1
	call sub_489B9C
	cmp byte [ebx+43h], 0
	jnz loc_41DF6E
	jmp loc_41DF4C

loc_41DF87:
	push ecx
	push edx ; s
	call closesocket_wrap
	pop ecx
	mov eax, ebx
	call sub_4848FC
	mov eax, 1
	pop edx
	pop ebx
	ret
;sub_41DF40 endp

sub_41DFA0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebp, edx
	mov edx, aCNfs2seFron_14 ; "c:\\nfs2se\\frontend\\pc\\tcp.c"
	mov ebx, 22Ch
	mov eax, aSocket_0 ; "socket"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov ebx, 300h
	mov edx, 44h
	call sub_484498
	mov edx, 44h
	mov ebx, eax
	mov esi, eax
	call sub_48A01C
	mov eax, ecx
	mov dword [ebx+1Ch], 0FFFFFFFFh
	call sub_41EBB0
	mov [ebx+18h], eax
	mov [ebx+3Ch], ebp
	mov ebp, [ebx+18h]
	xor edi, edi
	cmp ebp, 0FFFFFFFFh
	jnz loc_41E00F

loc_41DFFF:
	test edi, edi
	jz loc_41E072
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41E00F:
	push 5 ; backlog
	push ebp ; s
	call listen_wrap
	test eax, eax
	jnz loc_41DFFF
	mov ecx, 0FFFFFFFFh
	mov dword [dword_4E61E0], ebx
	add ebx, 4
	mov eax, sub_41E5D0
	push ebx
	xor edx, edx
	mov ebx, 2
	call sub_489AE0
	test eax, eax
	jz loc_41DFFF
	mov edi, 1
	xor ecx, ecx

loc_41E046:
	mov ah, [esi+43h]
	cmp cl, ah
	jnz loc_41E062
	cmp ah, [esi+42h]
	jnz loc_41E062
	mov eax, ecx
	call sub_483EB0
	mov eax, edi
	call sub_489B9C
	jmp loc_41E046

loc_41E062:
	movzx edi, byte [esi+43h]
	test edi, edi
	jz loc_41E072
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41E072:
	mov eax, esi
	call sub_41DF40
	xor esi, esi
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41DFA0 endp

sub_41E090: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_4D4B4C]
	test edx, edx
	jz loc_41E0BA
	lea ecx, [edx-1]
	mov dword [dword_4D4B4C], ecx
	test ecx, ecx
	jz loc_41E0B1

loc_41E0A9:
	mov eax, 1
	pop edx
	pop ecx
	ret

loc_41E0B1:
	call WSACleanup_wrap
	test eax, eax
	jz loc_41E0A9

loc_41E0BA:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_41E090 endp

sub_41E0C0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 100h
	cmp dword [dword_4D4B4C], 0
	jz loc_41E17A

loc_41E0D5:
	push esi
	push ebx
	push 0 ; protocol
	push 1 ; type
	push 2 ; af
	call socket_wrap
	mov ebx, eax
	cmp eax, 0FFFFFFFFh
	jz loc_41E14E
	push 100h ; namelen
	lea eax, [esp+0Ch]
	push eax ; name
	call gethostname_wrap
	test eax, eax
	jnz loc_41E148
	lea eax, [esp+8]
	push eax ; name
	call gethostbyname_wrap
	test eax, eax
	jz loc_41E148
	cmp word [eax+8], 2
	jnz loc_41E148
	cmp word [eax+0Ah], 4
	jnz loc_41E148
	push edi
	mov eax, [eax+0Ch]
	mov eax, [eax]
	mov ecx, [eax]
	push ecx ; in
	mov edi, dword_4E61C0
	call inet_ntoa_wrap
	mov esi, eax
	push edi

loc_41E12E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_41E146
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_41E12E

loc_41E146:
	pop edi
	pop edi

loc_41E148:
	push ebx ; s
	call closesocket_wrap

loc_41E14E:
	mov ebx, dword [dword_4D4B4C]
	inc ebx
	mov si, word [word_4E61B8]
	mov dword [dword_4D4B4C], ebx
	test si, si
	jz loc_41E195
	xor eax, eax
	mov ax, si
	sub eax, 2
	pop ebx
	pop esi

loc_41E171:
	add esp, 100h
	pop edx
	pop ecx
	ret

loc_41E17A:
	push dword_4E6030 ; lpWSAData
	push 101h ; wVersionRequested
	call WSAStartup_wrap
	test eax, eax
	jz loc_41E0D5
	xor eax, eax
	jmp loc_41E171

loc_41E195:
	mov eax, 400h
	pop ebx
	pop esi
	add esp, 100h
	pop edx
	pop ecx
	ret
;sub_41E0C0 endp

sub_41E1B0: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov ebx, eax
	mov esi, eax
	mov edx, eax
	mov eax, dword_56428C
	call sub_48BC18
	test eax, eax
	jz loc_41E1EC
	push ecx
	mov eax, [ebx+44h]
	push eax ; s
	call closesocket_wrap
	mov dword [ebx+44h], 0FFFFFFFFh
	mov dword [ebx+4], 0
	mov eax, dword_564270
	mov edx, ebx
	call sub_48BA80
	pop ecx

loc_41E1EC:
	mov eax, dword_564270
	mov edx, esi
	call sub_48BC18
	test eax, eax
	jz loc_41E215
	mov eax, [esi+10h]
	cmp dword [eax], 0
	jz loc_41E210
	call sub_4848FC
	mov dword [esi+10h], 0

loc_41E210:
	mov eax, 1

loc_41E215:
	pop esi
	pop edx
	pop ebx
	ret
;sub_41E1B0 endp

sub_41E220: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov ecx, ebx
	mov esi, [eax+10h]
	mov [esp], eax
	xor eax, eax
	mov ax, [esi+4]
	cmp ebx, eax
	ja loc_41E24C

loc_41E23B:
	cmp word [esi+6], 0
	jbe loc_41E278
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41E24C:
	xor eax, eax
	mov ax, [esi+4]
	push eax
	mov edx, aCNfs2seFron_14 ; "c:\\nfs2se\\frontend\\pc\\tcp.c"
	mov ebx, 1C2h
	push aSendpacketPack ; "sendpacket - PACKET TOO LONG, MAXIMUM S"...
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 8
	jmp loc_41E23B

loc_41E278:
	mov eax, dword [dword_4DB6A0]
	mov ebx, 2
	call sub_489F48
	lea edi, [esi+0Ch]
	mov edx, ecx
	mov eax, edi
	call sub_48C054
	lea edx, [esi+0Eh]
	mov ebx, ecx
	mov eax, ebp
	call sub_48A980
	push 0 ; flags
	add ecx, 2
	xor eax, eax
	mov [esi+8], edi
	mov ax, cx
	mov edi, [esi+8]
	push eax ; len
	mov eax, [esp+8]
	mov [esi+6], cx
	push edi ; buf
	mov eax, [eax+44h]
	push eax ; s
	call send_wrap
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jnz loc_41E2F6
	call WSAGetLastError_wrap
	cmp eax, 2747h
	jz loc_41E2DC
	cmp eax, 2733h
	jnz loc_41E30C

loc_41E2DC:
	mov eax, dword [dword_4DB6A0]
	mov word [esi+6], 0
	call sub_489F60
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41E2F6:
	test eax, eax
	jle loc_41E30C
	mov bx, [esi+6]
	mov ebp, [esi+8]
	sub ebx, eax
	add ebp, eax
	mov [esi+6], bx
	mov [esi+8], ebp

loc_41E30C:
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41E220 endp

sub_41E330: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov edi, eax
	mov esi, eax
	lea eax, [ebx+10h]
	test edi, edi
	jz loc_41E493
	mov edx, [edi+10h]
	test edx, edx
	jz loc_41E40B
	mov [esp], edx

loc_41E353:
	cmp dword [dword_4DB6A0], 0
	jnz loc_41E366
	call sub_489EF8
	mov dword [dword_4DB6A0], eax

loc_41E366:
	cmp dword [edi+10h], 0
	jnz loc_41E43B
	mov eax, 1

loc_41E375:
	mov edx, [esp]
	mov [edx], eax
	mov dx, word [word_4E61B8]
	test dx, dx
	jz loc_41E442
	xor eax, eax
	mov ax, dx
	sub eax, 2

loc_41E392:
	mov edx, [esp]
	mov word [edx+6], 0
	mov dword [edx+8], 0
	mov [edx+4], ax
	mov edi, [esi+48h]
	mov edi, [edi+0Ch]
	mov dword [esi+4], 0
	mov bx, [esi+30h]
	mov [esi+10h], edx
	test bx, bx
	jnz loc_41E44C
	mov eax, 1

loc_41E3C8:
	mov ebp, eax
	test eax, eax
	jz loc_41E453
	mov ebx, 3E8h
	xor ecx, ecx

loc_41E3D9:
	cmp dword [edi+1Ch], 0FFFFFFFFh
	jnz loc_41E453
	mov eax, ecx
	call sub_483EB0
	test eax, eax
	jl loc_41E453
	mov eax, esi
	call dword [esi+14h]
	test eax, eax
	jnz loc_41E453
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv dword [dword_4DABCC]
	call sub_489B9C
	jmp loc_41E3D9

loc_41E40B:
	mov ecx, aCNfs2seFron_14 ; "c:\\nfs2se\\frontend\\pc\\tcp.c"
	mov ebx, 160h
	mov edx, eax
	mov eax, aTcpdata ; "TCPDATA"
	mov dword [dword_4DB1DC], ebx
	mov ebx, dword [dword_4DABE8]
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov [esp], eax
	jmp loc_41E353

loc_41E43B:
	xor eax, eax
	jmp loc_41E375

loc_41E442:
	mov eax, 400h
	jmp loc_41E392

loc_41E44C:
	xor eax, eax
	jmp loc_41E3C8

loc_41E453:
	cmp dword [edi+1Ch], 0FFFFFFFFh
	jz loc_41E4AC
	test ebp, ebp
	jz loc_41E49A

loc_41E45D:
	mov eax, [edi+1Ch]
	mov [esi+44h], eax
	mov dword [edi+1Ch], 0FFFFFFFFh
	mov dword [esi+4], 1

loc_41E471:
	mov edx, [esi+4]
	test edx, edx
	jnz loc_41E5B0
	mov eax, [esp]
	cmp dword [eax], 0
	jz loc_41E5B0
	mov [esi+10h], edx
	call sub_4848FC

loc_41E490:
	mov eax, [esi+4]

loc_41E493:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret

loc_41E49A:
	lea ebx, [edi+20h]
	lea edx, [esi+30h]
	mov eax, [esi+48h]
	call sub_48B2F0
	test eax, eax
	jnz loc_41E45D

loc_41E4AC:
	test ebp, ebp
	jnz loc_41E471
	mov [edi+38h], esi
	test esi, esi
	jz loc_41E471
	lea eax, [esi+30h]
	mov [esp+8], eax

loc_41E4BE:
	test ebp, ebp
	jnz loc_41E471
	xor eax, eax
	call sub_41EBB0
	mov ebx, eax
	mov [esp+0Ch], eax
	call SDL_GetTicks_wrap
	add eax, 3E8h
	mov [esp+10h], eax
	cmp ebx, 0FFFFFFFFh
	jnz loc_41E4F1
	mov ebp, 1

loc_41E4E9:
	cmp dword [edi+38h], 0
	jnz loc_41E4BE
	jmp loc_41E471

loc_41E4F1:
	mov eax, ebx
	call sub_41EB50
	push 10h ; namelen
	mov edx, [esp+0Ch]
	push edx ; name
	push ebx ; s
	call connect_wrap
	mov [esp+4], eax
	call WSAGetLastError_wrap
	cmp eax, 2733h
	jnz loc_41E594
	mov [esi+44h], ebx
	cmp dword [edi+38h], 0
	jz loc_41E55C

loc_41E522:
	call SDL_GetTicks_wrap
	cmp eax, [esp+10h]
	jnb loc_41E55C
	xor eax, eax
	call sub_483EB0
	test eax, eax
	jl loc_41E543
	mov eax, esi
	call dword [esi+14h]
	test eax, eax
	jz loc_41E57B

loc_41E543:
	mov ebp, 1
	mov dword [edi+38h], 0
	mov dword [esi+4], 0

loc_41E556:
	cmp dword [edi+38h], 0
	jnz loc_41E522

loc_41E55C:
	cmp dword [esi+4], 0
	jnz loc_41E4E9
	mov eax, [esp+0Ch]
	push eax ; s
	call closesocket_wrap
	cmp dword [edi+38h], 0
	jnz loc_41E4BE
	jmp loc_41E471

loc_41E57B:
	mov eax, 3E8h
	mov edx, eax
	mov ecx, dword [dword_4DABCC]
	sar edx, 1Fh
	idiv ecx
	call sub_489B9C
	jmp loc_41E556

loc_41E594:
	cmp dword [esp+4], 0
	jz loc_41E55C
	mov ebp, 1
	mov dword [edi+38h], 0
	mov dword [esi+4], 0
	jmp loc_41E55C

loc_41E5B0:
	cmp dword [esi+4], 0
	jz loc_41E490
	mov eax, dword_56428C
	mov edx, esi
	call sub_48BA80
	mov eax, [esi+4]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret
;sub_41E330 endp

sub_41E5D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 430h
	mov eax, dword [dword_4E61E0]
	mov [esp], eax
	mov byte [eax+43h], 1
	mov eax, [esp]
	cmp byte [eax+42h], 0
	jnz loc_41E842

loc_41E5F5:
	mov eax, [esp]
	mov edx, [eax+3Ch]
	test edx, edx
	jz loc_41E856
	mov eax, [edx+10h]

loc_41E606:
	mov edx, [esp]
	mov ecx, [edx+1Ch]
	mov ebx, eax
	cmp ecx, 0FFFFFFFFh
	jz loc_41E644
	test eax, eax
	jz loc_41E85D
	mov eax, [esp]
	add edx, 20h
	mov eax, [eax+3Ch]
	call ebx
	test eax, eax
	jnz loc_41E85D

loc_41E62E:
	mov eax, [esp]
	mov esi, [eax+1Ch]
	push esi ; s
	call closesocket_wrap
	mov eax, [esp]
	mov dword [eax+1Ch], 0FFFFFFFFh

loc_41E644:
	xor edi, edi
	mov eax, [esp]
	mov [esp+4], edi
	mov [esp+108h], edi
	mov [esp+20Ch], edi
	mov [esp+310h], edi
	cmp dword [eax+1Ch], 0FFFFFFFFh
	jnz loc_41E873
	mov dword [esp+4], 1
	mov eax, [eax+18h]
	mov [esp+8], eax

loc_41E67B:
	mov eax, [esp]
	mov esi, [eax+38h]
	test esi, esi
	jz loc_41E6A5
	mov edi, [esp+108h]
	cmp edi, 40h
	jnb loc_41E6A5
	lea ebp, [edi+1]
	mov [esp+108h], ebp
	mov eax, [esi+44h]
	mov [esp+edi*4+10Ch], eax

loc_41E6A5:
	mov ebx, esp
	mov edx, sub_41EAB0
	mov eax, dword_56428C
	call sub_48BFFC
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	xor eax, eax
	mov [esp+424h], eax
	lea eax, [esp+424h]
	push eax ; timeout
	lea eax, [esp+210h]
	push eax ; exceptfds
	lea eax, [esp+110h]
	push eax ; writefds
	lea eax, [esp+10h]
	push eax ; readfds
	mov edx, 2710h
	push 0 ; nfds
	mov [esp+43Ch], edx
	call select_wrap
	cmp eax, 0FFFFFFFFh
	jz loc_41E835
	lea eax, [esp+4]
	push eax ; fd_set *
	mov eax, [esp+4]
	mov ecx, [eax+18h]
	push ecx ; fd
	call WSAFDIsSet_wrap
	test eax, eax
	jz loc_41E762
	lea eax, [esp+42Ch]
	push eax ; addrlen
	lea eax, [esp+418h]
	mov ebx, 10h
	push eax ; addr
	mov eax, [esp+8]
	mov [esp+434h], ebx
	mov esi, [eax+18h]
	push esi ; s
	call accept_wrap
	mov edx, [esp]
	mov [edx+1Ch], eax
	mov eax, [esp]
	cmp dword [eax+1Ch], 0FFFFFFFFh
	jnz loc_41E882
	mov byte [eax+42h], 1

loc_41E762:
	mov ebp, [esp]
	mov ebp, [ebp+38h]
	test ebp, ebp
	jz loc_41E796
	lea eax, [esp+20Ch]
	push eax ; fd_set *
	mov eax, [ebp+44h]
	push eax ; fd
	call WSAFDIsSet_wrap
	test eax, eax
	jz loc_41E8BE
	mov dword [ebp+4], 0

loc_41E78C:
	mov eax, [esp]
	mov dword [eax+38h], 0

loc_41E796:
	mov eax, [esp+310h]
	xor edi, edi
	test eax, eax
	jle loc_41E835
	xor ebx, ebx

loc_41E7A9:
	mov eax, [esp+ebx+314h]
	xor esi, esi
	cmp dword [eax+44h], 0FFFFFFFFh
	jz loc_41E80C
	cmp eax, ebp
	jz loc_41E80C
	lea edx, [esp+4]
	push edx ; fd_set *
	mov eax, [eax+44h]
	push eax ; fd
	call WSAFDIsSet_wrap
	test eax, eax
	jz loc_41E7DF
	mov eax, [esp]
	mov edx, [esp+ebx+314h]
	call sub_41E9D0
	mov esi, eax

loc_41E7DF:
	lea eax, [esp+108h]
	push eax ; fd_set *
	mov eax, [esp+ebx+318h]
	mov eax, [eax+44h]
	push eax ; fd
	call WSAFDIsSet_wrap
	test eax, eax
	jz loc_41E80C
	mov eax, [esp]
	mov edx, [esp+ebx+314h]
	call sub_41E940
	or esi, eax

loc_41E80C:
	test esi, esi
	jz loc_41E822
	mov esi, [esp+ebx+314h]
	test esi, esi
	jz loc_41E822
	mov eax, esi
	call sub_41E8F0

loc_41E822:
	mov edx, [esp+310h]
	inc edi
	add ebx, 4
	cmp edi, edx
	jl loc_41E7A9

loc_41E835:
	mov eax, [esp]
	cmp byte [eax+42h], 0
	jz loc_41E5F5

loc_41E842:
	mov eax, [esp]
	mov byte [eax+43h], 0
	add esp, 430h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41E856:
	xor eax, eax
	jmp loc_41E606

loc_41E85D:
	mov eax, dword [dword_5637F4]
	mov edx, [esp]
	cmp eax, [edx+34h]
	jg loc_41E62E
	jmp loc_41E644

loc_41E873:
	mov eax, 1
	call sub_489B9C
	jmp loc_41E67B

loc_41E882:
	lea edx, [eax+20h]
	mov ebx, [esp+42Ch]
	lea eax, [esp+414h]
	call sub_48A980
	mov eax, [esp]
	mov eax, [eax+1Ch]
	call sub_41EB50
	mov eax, dword [dword_5637F4]
	mov ebx, dword [dword_4DABCC]
	shl ebx, 2
	mov edx, [esp]
	add eax, ebx
	mov [edx+34h], eax
	jmp loc_41E762

loc_41E8BE:
	lea eax, [esp+108h]
	push eax ; fd_set *
	mov eax, [ebp+44h]
	push eax ; fd
	call WSAFDIsSet_wrap
	test eax, eax
	jz loc_41E796
	mov dword [ebp+4], 1
	jmp loc_41E78C
;sub_41E5D0 endp

sub_41E8F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	mov eax, [eax+44h]
	push eax ; s
	call closesocket_wrap
	mov dword [ebx+44h], 0FFFFFFFFh
	mov eax, dword_56428C
	mov edx, ebx
	call sub_48BC18
	test eax, eax
	jnz loc_41E919
	pop edx
	pop ecx
	pop ebx
	ret

loc_41E919:
	mov dword [ebx+4], 0
	mov eax, ebx
	mov edx, ebx
	call dword [ebx+18h]
	mov eax, dword_564270
	call sub_48BA80
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41E8F0 endp

sub_41E940: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, [edx+10h]
	mov cx, [ebx+6]
	xor esi, esi
	test cx, cx
	ja loc_41E957
	mov eax, esi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41E957:
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	xor eax, eax
	push esi ; flags
	mov ax, [ebx+6]
	push eax ; len
	mov ecx, [ebx+8]
	push ecx ; buf
	mov eax, [edx+44h]
	push eax ; s
	call send_wrap
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jnz loc_41E9AB
	call WSAGetLastError_wrap
	cmp eax, 2747h
	jz loc_41E99B
	cmp eax, 2733h
	jz loc_41E99B
	mov esi, 1
	mov word [ebx+6], 0

loc_41E99B:
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	mov eax, esi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41E9AB:
	test eax, eax
	jle loc_41E99B
	add [ebx+8], eax
	sub [ebx+6], ax
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	mov eax, esi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41E940 endp

sub_41E9D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 404h
	mov esi, edx
	mov eax, dword [dword_4DB6A0]
	mov ebp, [edx+10h]
	call sub_489F48
	push 2 ; flags
	push 2 ; len
	lea eax, [esp+8]
	xor edi, edi
	push eax ; buf
	mov eax, [edx+44h]
	push eax ; s
	call recv_wrap
	test eax, eax
	jz loc_41EA13
	cmp eax, 0FFFFFFFFh
	jnz loc_41EA30
	call WSAGetLastError_wrap
	cmp eax, 2733h
	jz loc_41EA30

loc_41EA13:
	mov edi, 1

loc_41EA18:
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	mov eax, edi
	add esp, 404h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41EA30:
	mov ecx, 2
	mov eax, esp
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ebx, eax
	xor eax, eax
	mov ax, [ebp+4]
	cmp ebx, eax
	jg loc_41EA18
	push 2 ; flags
	lea ebp, [ebx+2]
	push ebp ; len
	lea eax, [esp+8]
	push eax ; buf
	mov eax, [esi+44h]
	push eax ; s
	call recv_wrap
	mov ecx, eax
	cmp eax, ebp
	jz loc_41EA83

loc_41EA6C:
	test ecx, ecx
	jz loc_41EA13
	cmp ecx, 0FFFFFFFFh
	jnz loc_41EA18
	call WSAGetLastError_wrap
	cmp eax, 2733h
	jz loc_41EA18
	jmp loc_41EA13

loc_41EA83:
	lea edx, [esp+2]
	mov eax, esi
	call dword [esi+20h]
	test eax, eax
	jz loc_41EA6C
	push 0 ; flags
	push ebp ; len
	lea eax, [esp+8]
	push eax ; buf
	mov eax, [esi+44h]
	push eax ; s
	call recv_wrap
	mov ecx, eax
	jmp loc_41EA6C
;sub_41E9D0 endp

sub_41EAB0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebx, [eax+0Ch]
	mov ecx, edx
	mov esi, [ebx]
	mov ebp, eax
	cmp esi, 1
	jnz loc_41EB08
	cmp dword [eax+44h], 0FFFFFFFFh
	jz loc_41EB08
	mov ebx, [edx]
	cmp eax, [ebx+38h]
	jz loc_41EB08
	mov ebx, [edx+310h]
	lea esi, 0[ebx*4]
	inc ebx
	mov edi, [eax+10h]
	mov [edx+310h], ebx
	mov [edx+esi+314h], eax
	mov ebx, [edx+4]
	cmp ebx, 40h
	jb loc_41EB13

loc_41EAF6:
	cmp word [edi+6], 0
	jbe loc_41EB08
	mov esi, [ecx+108h]
	cmp esi, 40h
	jb loc_41EB27

loc_41EB08:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41EB13:
	lea esi, 0[ebx*4]
	inc ebx
	mov [edx+4], ebx
	mov eax, [eax+44h]
	mov [edx+esi+8], eax
	jmp loc_41EAF6

loc_41EB27:
	lea edx, 0[esi*4]
	lea eax, [esi+1]
	mov [ecx+108h], eax
	mov eax, [ebp+44h]
	mov [ecx+edx+10Ch], eax
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41EAB0 endp

sub_41EB50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 4
	mov ebx, eax
	mov eax, esp
	push eax ; argp
	push 8004667Eh ; cmd
	mov edx, 1
	push ebx ; s
	mov [esp+0Ch], edx
	call ioctlsocket_wrap
	push 4 ; optlen
	lea eax, [esp+4]
	push eax ; optval
	push 8 ; optname
	push 0FFFFh ; level
	mov ecx, 1
	push ebx ; s
	mov [esp+14h], ecx
	call setsockopt_wrap
	push 4 ; optlen
	lea eax, [esp+4]
	push eax ; optval
	mov esi, 1
	push esi ; optname
	push 6 ; level
	push ebx ; s
	mov [esp+14h], esi
	call setsockopt_wrap
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41EB50 endp

sub_41EBB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 10h
	mov esi, eax
	push 0 ; protocol
	push 1 ; type
	push 2 ; af
	call socket_wrap
	mov ebx, eax
	cmp eax, 0FFFFFFFFh
	jnz loc_41EBDA
	mov ebx, 0FFFFFFFFh

loc_41EBD0:
	mov eax, ebx
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41EBDA:
	mov edx, 10h
	mov eax, esp
	call sub_48A01C
	xor eax, eax
	mov ax, si
	mov edx, 2
	push eax ; hostshort
	mov [esp+4], dx
	call htons_wrap
	push 10h ; namelen
	mov [esp+6], ax
	lea eax, [esp+4]
	push eax ; name
	push ebx ; s
	call bind_wrap
	test eax, eax
	jz loc_41EBD0
	push ebx ; s
	call closesocket_wrap
	mov ebx, 0FFFFFFFFh
	mov eax, ebx
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41EBB0 endp

sub_41EC30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	test eax, eax
	jz loc_41ECF8
	mov edx, [eax+10h]
	test edx, edx
	jz loc_41ECF8
	mov ecx, dword [dword_4DBAB8]
	mov esi, edx
	mov ebp, [edx+4]
	cmp ecx, 1
	jge loc_41ECA7

loc_41EC5B:
	mov eax, dword_56428C
	mov edx, edi
	call sub_48BC18
	test eax, eax
	jz loc_41ED01
	cmp dword [edi+4], 0
	jz loc_41ECDC
	mov ecx, 4
	mov dword [edi+4], 0

loc_41EC81:
	dec ecx
	cmp ecx, 0FFFFFFFFh
	jz loc_41ECCD
	mov eax, edi
	call dword [ebp+8]
	test eax, eax
	jz loc_41ECCD
	mov ebx, 0FFh
	mov edx, esi
	mov eax, [esi+18h]
	call sub_41FC60
	test eax, eax
	jz loc_41ECC1
	xor ecx, ecx
	jmp loc_41EC81

loc_41ECA7:
	xor eax, eax
	mov al, [edx+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aClosepktconn ; "ClosePktConn"
	call sub_48B724
	jmp loc_41EC5B

loc_41ECC1:
	mov eax, 1
	call sub_483410
	jmp loc_41EC81

loc_41ECCD:
	mov eax, 3
	call sub_483410
	mov eax, edi
	call dword [ebp+4]

loc_41ECDC:
	mov eax, dword_564270
	mov edx, edi
	call sub_48BA80

loc_41ECE8:
	mov eax, dword_564270
	mov edx, edi
	call sub_48BC18
	test eax, eax
	jnz loc_41ED16

loc_41ECF8:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41ED01:
	cmp dword [edi+4], 0
	jz loc_41ECE8
	push aClosepacketcon ; "closepacketconnection - DID NOT FIND AC"...
	call sub_48EC20
	add esp, 4
	jmp loc_41ECE8

loc_41ED16:
	lea eax, [esi+38h]
	call sub_48BA6C
	lea eax, [esi+54h]
	call sub_48BA6C
	lea eax, [esi+78h]
	call sub_48BA6C
	lea eax, [esi+94h]
	call sub_48BA6C
	mov eax, [esi+14h]
	call sub_489F74
	cmp byte [esi+0Ch], 0
	jz loc_41ED55
	mov eax, esi
	call sub_4848FC
	mov dword [edi+10h], 0

loc_41ED55:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41EC30 endp

sub_41ED70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, eax
	mov edx, dword [dword_4DBAB8]
	mov esi, [eax+10h]
	cmp edx, 5
	jge loc_41EDEF

loc_41ED85:
	dec dword [edi+4]
	mov ebx, [edi+4]
	test ebx, ebx
	jnz loc_41EDB5
	cmp dword [dword_4DBAB8], 3
	jl loc_41EDAD
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	xor ecx, ecx
	push ebx
	xor edx, edx
	mov eax, aConntimeout ; "conntimeout"
	call sub_48B724

loc_41EDAD:
	mov eax, edi
	call dword [edi+1Ch]
	mov [edi+4], eax

loc_41EDB5:
	cmp dword [edi+4], 0
	jnz loc_41EE0C

loc_41EDBB:
	cmp dword [dword_4DBAB8], 2
	jl loc_41EDDD
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	lea edx, [edi+4]
	xor ecx, ecx
	push 1
	xor ebx, ebx
	mov eax, aFailedconn ; "failedconn"
	call sub_48B724

loc_41EDDD:
	mov eax, esi
	call sub_41FA00

loc_41EDE4:
	mov eax, 1
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41EDEF:
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aProcessconn ; "processconn"
	call sub_48B724
	jmp loc_41ED85

loc_41EE0C:
	mov edx, [esi+4]
	mov eax, edi
	call dword [edx+8]
	test eax, eax
	jz loc_41EDBB
	lea edi, [esi+54h]
	mov edx, sub_41F710
	mov ebx, esi
	mov eax, edi
	call sub_48BFFC
	mov edx, sub_41F700
	mov ebx, esi
	mov eax, edi
	call sub_48BF74
	mov eax, [esi+2Ch]
	lea edx, [eax-1]
	mov [esi+2Ch], edx
	test eax, eax
	jg loc_41EDE4
	mov ebx, 0FBh
	mov edx, esi
	mov eax, [esi+18h]
	call sub_41FC60
	mov eax, 1
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41ED70 endp

sub_41EE60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, ebx
	test eax, eax
	jz loc_41EE70
	cmp dword [eax+4], 0
	jnz loc_41EE77

loc_41EE70:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41EE77:
	mov esi, [eax+10h]
	lea eax, [esi+38h]
	call sub_48BAFC
	mov ebp, [esi+8]
	mov edi, eax
	cmp ecx, ebp
	jbe loc_41EEAD
	mov eax, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov ebx, 2B6h
	push aSendpacketTooM ; "sendpacket - TOO MUCH DATA TO FIT INTO "...
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 4

loc_41EEAD:
	test edi, edi
	jnz loc_41EED7
	cmp dword [dword_4DBAB8], 2
	jl loc_41EE70
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	mov ebx, edx
	push 1
	xor edx, edx
	mov eax, aNobuffers ; "nobuffers"
	call sub_48B724
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41EED7:
	mov ebx, edx
	mov eax, edi
	mov edx, esi
	call sub_41FE70
	mov edx, esi
	mov eax, edi
	call sub_41FD00
	lea eax, [esi+54h]
	mov edx, edi
	call sub_48BBA4
	cmp dword [esi+30h], 0
	jnz loc_41EF1D
	mov eax, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov edx, 2C2h
	push aSendpacketSorr ; "sendpacket - SORRY, TOO MANY PACKETS HA"...
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], edx
	call sub_4840F0
	add esp, 4

loc_41EF1D:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_41EE60 endp

sub_41EF30: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov esi, eax
	mov [esp+14h], ebx
	mov ebp, [esp+14h]
	xor ebx, ebx
	mov [esp+10h], edx
	mov [esp+0Ch], ebx
	mov [esp+24h], ebx
	cmp ebp, 6
	jl loc_41F1B5
	cmp ebp, 0FAh
	jle loc_41F1C2
	push 0FAh
	mov edi, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov ebp, 201h
	push aOpenpacketconn ; "openpacketconnection - MAXIMUM SUPPORTE"...
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], ebp
	call sub_4840F0
	add esp, 8

loc_41EF8B:
	test esi, esi
	jz loc_41EFB8
	cmp dword [esi+4], 0
	jz loc_41EFB8
	mov ebx, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov edi, 206h
	push aOpenpacketco_0 ; "openpacketconnection - CALLED WITH AN A"...
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], edi
	call sub_4840F0
	add esp, 4

loc_41EFB8:
	test esi, esi
	jz loc_41F207
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jnz loc_41F207
	mov ebx, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov edi, 20Ah
	push aOpenpacketco_1 ; "openpacketconnection - MAY ONLY BE CALL"...
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], edi

loc_41EFEA:
	call sub_4840F0
	add esp, 4

loc_41EFF2:
	cmp ecx, 2
	jge loc_41F23B
	mov ecx, 2

loc_41F000:
	mov edx, [esp+10h]
	xor eax, eax
	mov ebp, [esp+14h]
	mov al, [edx+1Eh]
	cmp eax, ebp
	jle loc_41F015
	mov [esp+14h], eax

loc_41F015:
	mov edx, 1
	shl edx, cl
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebp, [eax-1]
	mov dword [esp+8], 100h
	mov eax, [esp+10h]
	mov dl, [eax+1Fh]
	mov [esp+28h], ebp
	test dl, dl
	jnz loc_41F047
	mov dword [esp+8], 200h

loc_41F047:
	mov edx, [esp+28h]
	lea eax, [ebp+1]
	add edx, eax
	mov eax, [esp+14h]
	add eax, 15h
	and al, 0FCh
	imul eax, edx
	mov ecx, [esp+8]
	add eax, 0B0h
	add eax, ecx
	test esi, esi
	jz loc_41F24E
	mov ebx, [esi+10h]
	test ebx, ebx
	jnz loc_41F259
	mov edi, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov edx, 227h
	mov ecx, 1
	mov ebx, dword [dword_4DABE8]
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], edx
	mov edx, eax
	mov eax, aPktbuf ; "PKTBUF"
	mov [esp+0Ch], ecx
	call sub_484498
	mov edi, eax

loc_41F0AD:
	test edi, edi
	jz loc_41F40A
	lea ecx, [edi+0B0h]
	mov dword [esi], 0
	mov dword [esi+4], 0
	mov eax, [esi+18h]
	mov [esi+10h], edi
	mov [esp+4], eax
	mov dword [esi+18h], sub_48A130
	mov eax, [esp+14h]
	mov [edi], esi
	mov [edi+8], eax
	mov eax, [esi+24h]
	mov [edi+2Ch], eax
	mov al, [esp+0Ch]
	mov [edi+0Ch], al
	mov eax, [esp+10h]
	mov [edi+4], eax
	mov eax, dword [dword_4D4BC4]
	mov [edi+0Dh], al
	inc eax
	mov dword [dword_4D4BC4], eax
	mov dword [edi+10h], 0
	call sub_489EF8
	mov dword [edi+30h], 1
	mov dword [edi+34h], 0
	xor ebx, ebx
	mov [edi+14h], eax
	lea eax, [edi+38h]
	xor edx, edx
	mov [esp], eax
	call sub_48BA2C
	lea eax, [edi+54h]
	mov edx, sub_41F740
	mov ebx, edi
	call sub_48BA2C
	mov edx, sub_41F740
	lea eax, [edi+78h]
	mov dword [edi+70h], 1
	mov ebx, edi
	mov dword [edi+74h], 1
	call sub_48BA2C
	lea eax, [edi+94h]
	mov edx, sub_41F740
	mov ebx, edi
	call sub_48BA2C
	mov eax, [esp+14h]
	add eax, 15h
	and al, 0FCh
	mov ebx, [esp]
	mov [esp+1Ch], eax

loc_41F17E:
	mov eax, [esp+28h]
	dec eax
	mov [esp+28h], eax
	cmp eax, 0FFFFFFFFh
	jz loc_41F260
	mov edx, ecx
	mov dword [edx], 0
	mov eax, [esp+1Ch]
	mov dword [edx+4], 0
	add ecx, eax
	mov eax, ebx
	mov dword [edx+8], 0
	call sub_48BA80
	jmp loc_41F17E

loc_41F1B5:
	mov dword [esp+14h], 6
	jmp loc_41EF8B

loc_41F1C2:
	mov bx, [edx+1Ch]
	test bx, bx
	jz loc_41EF8B
	xor eax, eax
	lea edx, [ebp+6]
	mov ax, bx
	cmp edx, eax
	jbe loc_41EF8B
	mov edx, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov ebx, 203h
	push aOpenpacketco_2 ; "openpacketconnection - PACKETSIZE IS GR"...
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 4
	jmp loc_41EF8B

loc_41F207:
	test esi, esi
	jz loc_41EFF2
	cmp dword [dword_4DB274], 0
	jz loc_41EFF2
	mov eax, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov edx, 20Ch
	push aOpenpacketco_3 ; "openpacketconnection - MAY NOT BE CALLE"...
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], edx
	jmp loc_41EFEA

loc_41F23B:
	cmp ecx, 7
	jle loc_41F000
	mov ecx, 7
	jmp loc_41F000

loc_41F24E:
	mov edx, eax
	mov eax, edx
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41F259:
	mov edi, ebx
	jmp loc_41F0AD

loc_41F260:
	lea eax, [edi+78h]
	mov [esp+20h], eax
	mov eax, [esp+14h]
	add eax, 15h
	mov [esp+18h], eax

loc_41F272:
	mov eax, [esp+18h]
	and al, 0FCh
	dec ebp
	add eax, ecx
	cmp ebp, 0FFFFFFFFh
	jz loc_41F2A8
	mov edx, ecx
	mov dword [edx], 0
	mov ecx, eax
	mov eax, [edi+74h]
	lea ebx, [eax+1]
	mov [edi+74h], ebx
	mov [edx+4], eax
	mov eax, [esp+20h]
	mov dword [edx+8], 0
	call sub_48BBA4
	jmp loc_41F272

loc_41F2A8:
	mov dword [edi+24h], 0
	mov [edi+1Ch], eax
	mov [edi+18h], ecx
	mov eax, [esp+8]
	mov edx, dword [dword_4DBABC]
	mov [edi+20h], eax
	test edx, edx
	jnz loc_41F2E9
	mov ecx, aCNfs2seFron_15 ; "c:\\nfs2se\\frontend\\pc\\eacpkt.c"
	mov ebx, 272h
	push aPacketlayer_ti ; "packetlayer_timeout - MUST BE NONZERO\n"
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 4

loc_41F2E9:
	mov ecx, [esp+10h]
	mov edx, sub_41F4E0
	mov eax, esi
	call dword [ecx]
	test eax, eax
	jz loc_41F454
	mov dword [esi+4], 3B9ACA00h
	mov eax, dword_56428C
	mov edx, esi
	call sub_48BA80
	cmp dword [dword_4DBAB8], 1
	jge loc_41F420

loc_41F31E:
	xor ebp, ebp

loc_41F320:
	mov eax, 1
	call sub_483F44
	test eax, eax
	jl loc_41F33B
	mov eax, esi
	call dword [esi+14h]
	test eax, eax
	jz loc_41F43D

loc_41F33B:
	mov edx, 1

loc_41F340:
	mov [esp+24h], edx
	test edx, edx
	jz loc_41F368
	cmp dword [dword_4DBAB8], 2
	jl loc_41F368
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	mov ecx, ebp
	mov ebx, ebp
	push ebp
	mov edx, ebp
	mov eax, aConnAborted ; "conn aborted"
	call sub_48B724

loc_41F368:
	cmp ebp, [esi+4]
	jz loc_41F374
	mov dword [esi+4], 3B9ACA00h

loc_41F374:
	cmp ebp, [esi+4]
	jz loc_41F386
	mov eax, [edi+10h]
	cmp ebp, eax
	jnz loc_41F386
	cmp eax, [esp+24h]
	jz loc_41F320

loc_41F386:
	cmp dword [esi+4], 0
	jnz loc_41F444

loc_41F390:
	mov ebp, [esi+4]
	test ebp, ebp
	jnz loc_41F3B7
	cmp dword [dword_4DBAB8], 2
	jl loc_41F3B7
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push ebp
	xor edx, edx
	mov eax, aConnInactive ; "conn inactive"
	call sub_48B724

loc_41F3B7:
	mov dword [esi+4], 0
	mov edx, [esp+10h]
	mov eax, esi
	call dword [edx+4]

loc_41F3C7:
	cmp dword [esi+4], 0
	jz loc_41F47C
	mov ecx, [esp+24h]
	test ecx, ecx
	jnz loc_41F47C
	mov eax, dword [dword_4DBABC]
	mov [esi+4], eax
	mov eax, [esp+4]
	mov [esi+18h], eax
	cmp dword [dword_4DBAB8], 1
	jl loc_41F40A
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ebx, ebx
	push ecx
	xor edx, edx
	mov eax, aOpenpktconnSuc ; "OpenPktConn Success"
	call sub_48B724

loc_41F40A:
	test edi, edi
	jz loc_41F4CB
	mov edx, 1
	mov eax, edx
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_41F420:
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aOpenpktconn ; "OpenPktConn"
	call sub_48B724
	jmp loc_41F31E

loc_41F43D:
	mov edx, ebp
	jmp loc_41F340

loc_41F444:
	cmp dword [esp+24h], 0
	jnz loc_41F390
	jmp loc_41F3C7

loc_41F454:
	cmp dword [dword_4DBAB8], 3
	jl loc_41F3C7
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aConnectFailed ; "connect failed"
	call sub_48B724
	jmp loc_41F3C7

loc_41F47C:
	cmp dword [dword_4DBAB8], 1
	jl loc_41F49D
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aOpenpktconnFai ; "OpenPktConn Failed"
	call sub_48B724

loc_41F49D:
	mov eax, dword_56428C
	mov edx, esi
	call sub_48BC18
	mov eax, dword_564270
	mov edx, esi
	mov ebp, [esp+0Ch]
	call sub_48BC18
	test ebp, ebp
	jz loc_41F4CB
	mov eax, edi
	call sub_4848FC
	mov dword [esi+10h], 0

loc_41F4CB:
	xor edx, edx
	mov eax, edx
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_41EF30 endp

sub_41F4E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 18h
	mov [ebp-4], eax
	mov edi, [eax+10h]
	mov eax, [edi+4]
	mov edx, dword [dword_4DBAB8]
	mov [ebp-18h], eax
	cmp edx, 5
	jge loc_41F662

loc_41F506:
	mov eax, [ebp-4]
	mov dword [edi+28h], 0
	cmp dword [eax+4], 0
	jz loc_41F659
	lea eax, [edi+94h]
	mov [ebp-14h], eax
	lea eax, [edi+78h]
	mov [ebp-8], eax
	mov eax, [ebp-14h]
	mov [ebp-0Ch], eax

loc_41F52F:
	mov edx, [ebp-18h]
	mov eax, [ebp-4]
	call dword [edx+10h]
	test eax, eax
	jnz loc_41F67F

loc_41F540:
	mov [ebp-10h], eax
	mov eax, [ebp-14h]
	mov edx, [edi+70h]
	call sub_48BF0C
	mov esi, eax
	test eax, eax
	jz loc_41F5D7

loc_41F558:
	cmp dword [dword_4DBAB8], 3
	jl loc_41F57E
	xor eax, eax
	mov al, [edi+0Dh]
	lea ebx, [esi+12h]
	push eax
	xor ecx, ecx
	lea edx, [esi+4]
	push 0
	mov cl, [esi+0Dh]
	mov eax, aRecv ; "recv"
	call sub_48B724

loc_41F57E:
	mov eax, [ebp-4]
	xor ebx, ebx
	mov ecx, eax
	lea edx, [esi+12h]
	mov bl, [esi+0Dh]
	call dword [ecx+20h]
	test eax, eax
	jz loc_41F68B
	mov eax, [edi+6Ch]
	call sub_489F48
	mov eax, [edi+74h]
	lea edx, [eax+1]
	mov [edi+74h], edx
	mov [esi+4], eax
	inc dword [edi+70h]
	mov eax, [edi+6Ch]
	mov edx, esi
	call sub_489F60
	mov eax, [ebp-8]
	mov dword [esi+8], 0
	call sub_48BBA4
	mov eax, [ebp-0Ch]
	mov edx, [edi+70h]
	call sub_48BF0C
	mov esi, eax
	test eax, eax
	jnz loc_41F558

loc_41F5D7:
	cmp dword [ebp-10h], 0
	jnz loc_41F52F
	cmp byte [edi+0Eh], 0
	jnz loc_41F6C1
	lea eax, [edi+94h]
	call sub_48BCC0
	cmp eax, 0FFFFFFFFh
	jz loc_41F6BA
	cmp eax, [edi+70h]
	jz loc_41F6BA
	mov eax, 1

loc_41F60D:
	mov byte [edi+0Eh], 1

loc_41F611:
	cmp dword [edi+28h], 0
	jz loc_41F6C8

loc_41F61B:
	cmp dword [dword_4DBAB8], 4
	jl loc_41F647
	xor eax, eax
	mov esi, [edi+28h]
	mov al, [edi+0Dh]
	xor ecx, ecx
	push eax
	xor ebx, ebx
	xor edx, edx
	push 1
	test esi, esi
	jz loc_41F6D9
	mov eax, aGrbg ; "grbg"

loc_41F642:
	call sub_48B724

loc_41F647:
	lea eax, [edi+78h]
	xor edx, edx
	call sub_48BD74
	test eax, eax
	jnz loc_41F6E3

loc_41F659:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41F662:
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, aRecvnotify ; "recvnotify"
	call sub_48B724
	jmp loc_41F506

loc_41F67F:
	mov eax, edi
	call sub_41F750
	jmp loc_41F540

loc_41F68B:
	cmp dword [dword_4DBAB8], 3
	jl loc_41F6AB
	mov al, [edi+0Dh]
	push eax
	lea edx, [esi+4]
	xor ecx, ecx
	push 1
	xor ebx, ebx
	mov eax, aDeny ; "deny"
	call sub_48B724

loc_41F6AB:
	mov eax, [ebp-14h]
	mov edx, esi
	call sub_48BBA4
	jmp loc_41F5D7

loc_41F6BA:
	xor eax, eax
	jmp loc_41F60D

loc_41F6C1:
	xor eax, eax
	jmp loc_41F611

loc_41F6C8:
	test eax, eax
	jnz loc_41F61B
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41F6D9:
	mov eax, aBad ; "bad#"
	jmp loc_41F642

loc_41F6E3:
	mov edx, edi
	call sub_41FC00
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41F4E0 endp

sub_41F700: ;SUBROUTINE
	cmp dword [eax+8], 0
	jle sub_41FD00
	mov eax, 1
	ret
;sub_41F700 endp

sub_41F710: ;SUBROUTINE
	mov edx, [eax+8]
	test edx, edx
	jle loc_41F726
	push ecx
	lea ecx, [edx-1]
	mov [eax+8], ecx
	test ecx, ecx
	jle loc_41F72C
	xor eax, eax
	pop ecx
	ret

loc_41F726:
	mov eax, 1
	ret

loc_41F72C:
	mov eax, 1
	pop ecx
	ret
;sub_41F710 endp

sub_41F740: ;SUBROUTINE
	mov eax, [eax+4]
	ret
;sub_41F740 endp

sub_41F750: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	xor edx, edx
	mov [esp], edx
	mov eax, [eax]
	mov [esp+4], eax
	mov eax, [edi+4]
	mov dl, [eax+1Fh]
	mov [esp+8], eax
	test dl, dl
	jnz loc_41F807

loc_41F778:
	mov ecx, [edi+24h]
	mov eax, [edi+20h]
	cmp eax, ecx
	jbe loc_41F799
	mov esi, [esp+8]
	mov ebx, eax
	mov edx, [edi+1Ch]
	mov eax, [esp+4]
	sub ebx, ecx
	add edx, ecx
	call dword [esi+14h]
	add [edi+24h], eax

loc_41F799:
	mov eax, [edi+24h]
	test eax, eax
	jz loc_41F7F2
	mov esi, eax
	xor ebp, ebp

loc_41F7A4:
	mov edx, esp
	mov ecx, esi
	mov ebx, [edi+1Ch]
	mov eax, edi
	add ebx, ebp
	call sub_41F820
	mov edx, [esp+8]
	cmp byte [edx+1Fh], 0
	jnz loc_41F7D4
	test eax, eax
	jz loc_41F7D4
	sub esi, eax
	add ebp, eax
	test eax, eax
	jz loc_41F7D4
	mov eax, [esp+4]
	cmp dword [eax+4], 0
	jnz loc_41F7A4

loc_41F7D4:
	mov eax, [esp+8]
	cmp byte [eax+1Fh], 0
	jnz loc_41F7F2
	test ebp, ebp
	jz loc_41F7F2
	mov edx, [edi+1Ch]
	mov ebx, esi
	lea eax, [edx+ebp]
	call sub_48A980
	mov [edi+24h], esi

loc_41F7F2:
	cmp dword [esp], 0
	jz loc_41F813
	mov eax, 1
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41F807:
	mov dword [edi+24h], 0
	jmp loc_41F778

loc_41F813:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41F750 endp

sub_41F820: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov [esp+4], edx
	mov ebp, ebx
	mov ebx, ecx
	mov eax, [eax]
	mov [esp+8], eax
	mov eax, [edi+4]
	xor esi, esi
	mov dl, [eax+1Fh]
	mov [esp], esi
	test dl, dl
	jnz loc_41F857
	mov eax, ebp
	lea edx, [ecx+ebp]

loc_41F84A:
	cmp eax, edx
	jnb loc_41F857
	cmp byte [eax], 0FEh
	jz loc_41F857
	inc esi
	inc eax
	jmp loc_41F84A

loc_41F857:
	lea eax, [esi+ebp]
	cmp byte [eax], 0FEh
	jnz loc_41F888
	lea ecx, [esi+6]
	cmp ecx, ebx
	jbe loc_41F88C

loc_41F866:
	mov edx, [esp]
	add edi, 28h
	cmp esi, edx
	jbe loc_41F9EB
	mov eax, 1
	mov ecx, [edi]
	add ecx, eax
	mov eax, esi
	mov [edi], ecx

loc_41F881:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_41F888:
	mov eax, ebx
	jmp loc_41F881

loc_41F88C:
	xor edx, edx
	mov dl, [eax+1]
	mov ebp, eax
	cmp edx, [edi+8]
	ja loc_41F9CF
	add ecx, edx
	cmp ecx, ebx
	ja loc_41F866
	sub ecx, esi
	mov edx, ecx
	call sub_41FF30
	test eax, eax
	jz loc_41F9C7
	mov eax, [esp+8]
	cmp dword [eax+4], 0
	jz loc_41F8C9
	mov edx, [esp+8]
	mov eax, dword [dword_4DBABC]
	mov [edx+4], eax

loc_41F8C9:
	inc dword [edi+10h]
	mov dh, [ebp+3]
	add esi, ecx
	cmp dh, 7Fh
	ja loc_41F8E2
	xor edx, edx
	mov eax, edi
	mov dl, [ebp+3]
	call sub_41FB50

loc_41F8E2:
	mov bl, [ebp+1]
	mov [esp], ecx
	test bl, bl
	jz loc_41F8F4
	mov bh, [ebp+2]
	cmp bh, 7Fh
	jbe loc_41F936

loc_41F8F4:
	mov cl, [ebp+2]
	cmp cl, 7Fh
	jbe loc_41F9B7
	cmp cl, 0FFh
	jnz loc_41F866
	cmp dword [dword_4DBAB8], 2
	jl loc_41F92A
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 1
	xor edx, edx
	mov eax, aCloseconnmsg ; "closeconnmsg"
	call sub_48B724

loc_41F92A:
	mov eax, edi
	call sub_41FA00
	jmp loc_41F866

loc_41F936:
	xor edx, edx
	mov eax, [edi+70h]
	mov dl, bh
	mov ebx, 7Fh
	call sub_41FF90
	lea ebx, [edi+78h]
	mov edx, eax
	mov eax, ebx
	call sub_48BF0C
	mov [esp+0Ch], eax
	mov byte [edi+0Eh], 0
	test eax, eax
	jz loc_41F866
	lea edx, [eax+0Ch]
	mov ebx, ecx
	mov eax, ebp
	call sub_48A980
	mov edx, [esp+0Ch]
	lea eax, [edi+94h]
	call sub_48BBA4
	mov eax, [esp+4]
	inc dword [eax]
	cmp dword [dword_4DBAB8], 3
	jl loc_41F866
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	mov eax, [esp+10h]
	xor ecx, ecx
	lea ebx, [eax+12h]
	push 0
	lea edx, [eax+4]
	mov cl, [eax+0Dh]
	mov eax, aQdat ; "qdat"
	call sub_48B724
	jmp loc_41F866

loc_41F9B7:
	xor edx, edx
	mov eax, edi
	mov dl, cl
	call sub_41FAD0
	jmp loc_41F866

loc_41F9C7:
	add esi, 3
	jmp loc_41F866

loc_41F9CF:
	cmp dl, 0FEh
	jz loc_41F9E1
	mov eax, 1
	inc eax
	add esi, eax
	jmp loc_41F866

loc_41F9E1:
	xor eax, eax
	inc eax
	add esi, eax
	jmp loc_41F866

loc_41F9EB:
	xor eax, eax
	mov ecx, [edi]
	add ecx, eax
	mov eax, esi
	mov [edi], ecx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret
;sub_41F820 endp

sub_41FA00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, eax
	cmp dword [dword_4DBAB8], 2
	jl loc_41FA28
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 1
	xor edx, edx
	mov eax, aShutdownconn ; "shutdownconn"
	call sub_48B724

loc_41FA28:
	mov eax, dword_56428C
	mov edx, [edi]
	call sub_48BC18
	test eax, eax
	jz loc_41FAA6
	mov ebx, dword [dword_4DBAB8]
	mov esi, [edi]
	cmp ebx, 1
	jl loc_41FA5D
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 1
	xor edx, edx
	mov eax, aDisconnect ; "disconnect"
	call sub_48B724

loc_41FA5D:
	mov dword [esi+4], 0
	mov edx, [edi+4]
	mov eax, esi
	call dword [edx+4]
	mov eax, esi
	mov edx, esi
	call dword [esi+18h]
	mov eax, dword_564270
	call sub_48BA80
	cmp dword [dword_4DBAB8], 2
	jge loc_41FA8C

loc_41FA86:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_41FA8C:
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 1
	xor edx, edx
	mov eax, aConnclosed ; "connclosed"
	call sub_48B724
	jmp loc_41FA86

loc_41FAA6:
	cmp dword [dword_4DBAB8], 1
	jl loc_41FA86
	mov al, [edi+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 1
	xor edx, edx
	mov eax, aDupShutdown ; "dup shutdown"
	call sub_48B724
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_41FA00 endp

sub_41FAD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 4
	mov esi, eax
	lea ecx, [eax+54h]
	mov eax, ecx
	call sub_48BCC0
	mov ebx, 7Fh
	and edx, 0FFh
	call sub_41FF90
	mov [esp], eax
	mov edx, eax
	mov eax, ecx
	call sub_48BDB8
	mov edi, eax
	test eax, eax
	jz loc_41FB15
	cmp dword [dword_4DBAB8], 3
	jge loc_41FB1D
	mov dword [edi+8], 0

loc_41FB15:
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41FB1D:
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	lea edx, [esp+4]
	xor ecx, ecx
	push 1
	xor ebx, ebx
	mov eax, aNakr ; "nakr"
	call sub_48B724
	mov dword [edi+8], 0
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41FAD0 endp

sub_41FB50: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 4
	mov esi, eax
	mov ebx, 7Fh
	and edx, 0FFh
	mov eax, [eax+34h]
	call sub_41FF90
	mov [esp], eax
	cmp eax, [esi+30h]
	jnb loc_41FBBD
	cmp eax, [esi+34h]
	jbe loc_41FBBD
	mov edi, dword [dword_4DBAB8]
	mov [esi+34h], eax
	cmp edi, 3
	jge loc_41FBA1

loc_41FB87:
	lea ebx, [esi+38h]
	lea ecx, [esi+54h]

loc_41FB8D:
	mov eax, ecx
	call sub_48BCC0
	cmp eax, [esi+34h]
	jbe loc_41FBE2

loc_41FB99:
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41FBA1:
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	lea edx, [esp+4]
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, aAckr ; "ackr"
	call sub_48B724
	jmp loc_41FB87

loc_41FBBD:
	cmp dword [dword_4DBAB8], 3
	jl loc_41FB87
	xor eax, eax
	mov al, [esi+0Dh]
	push eax
	lea edx, [esp+4]
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, aAckQ ; "ack?"
	call sub_48B724
	jmp loc_41FB87

loc_41FBE2:
	mov eax, ecx
	call sub_48BAFC
	test eax, eax
	jz loc_41FB99
	mov edx, eax
	mov eax, ebx
	call sub_48BA80
	jmp loc_41FB8D
;sub_41FB50 endp

sub_41FC00: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	test eax, eax
	jz loc_41FC17
	mov eax, [eax+8]
	lea edx, [eax-1]
	mov [esi+8], edx
	test eax, eax
	jle loc_41FC1F

loc_41FC17:
	mov eax, 1
	pop edi
	pop esi
	ret

loc_41FC1F:
	push ebx
	cmp dword [dword_4DBAB8], 3
	jl loc_41FC44
	push ecx
	xor eax, eax
	mov al, [edi+0Dh]
	push eax
	lea edx, [esi+4]
	xor ecx, ecx
	push 1
	xor ebx, ebx
	mov eax, aNakt ; "NAKt"
	call sub_48B724
	pop ecx

loc_41FC44:
	mov edx, edi
	mov ebx, [esi+4]
	mov eax, [edi+18h]
	and ebx, 7Fh
	call sub_41FC60
	pop ebx
	pop edi
	pop esi
	ret
;sub_41FC00 endp

sub_41FC60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov esi, edx
	mov [esp], ebx
	mov edi, [esi]
	mov dword [eax+8], 1
	mov ebp, [esi+4]
	mov eax, edi
	xor edx, edx
	call dword [ebp+0Ch]
	cmp eax, 6
	jnb loc_41FC90

loc_41FC86:
	mov eax, edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41FC90:
	mov eax, esi
	call sub_41FEC0
	mov edx, 6
	and eax, 0FFh
	mov byte [ecx+0Ch], 0FEh
	mov ah, [esp]
	mov ebx, 6
	mov [ecx+0Eh], ah
	lea ebp, [ecx+0Ch]
	mov [ecx+0Fh], al
	mov eax, ebp
	mov byte [ecx+0Dh], 0
	call sub_41FF60
	mov esi, [esi+4]
	mov edx, ebp
	mov eax, edi
	call dword [esi+18h]
	cmp eax, 6
	jnz loc_41FCF1
	mov esi, 1

loc_41FCD5:
	mov edx, esi
	test esi, esi
	jz loc_41FC86
	cmp dword [esp], 7Fh
	ja loc_41FC86
	mov eax, [edi+28h]
	mov [ecx+8], eax
	mov eax, edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_41FCF1:
	xor esi, esi
	jmp loc_41FCD5
;sub_41FC60 endp

sub_41FD00: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 14h
	mov esi, eax
	mov ecx, edx
	xor edx, edx
	mov eax, [ecx]
	mov [ebp-10h], edx
	mov edx, [ecx+4]
	mov [ebp-8], eax
	call dword [edx+0Ch]
	xor edx, edx
	mov ebx, esi
	mov dl, [esi+0Dh]
	add ebx, 4
	add edx, 6
	mov [ebp-4], ebx
	cmp eax, edx
	jnb loc_41FD7C
	cmp dword [esi+8], 0
	jl loc_41FE34
	cmp dword [dword_4DBAB8], 3
	jl loc_41FD5E
	xor eax, eax
	mov al, [ecx+0Dh]
	push eax
	mov edx, [ebp-4]
	xor ebx, ebx
	push 1
	xor ecx, ecx
	mov eax, aHold ; "hold"

loc_41FD59:
	call sub_48B724

loc_41FD5E:
	cmp dword [ebp-10h], 0
	jz loc_41FE5A
	mov eax, [ebp-8]
	mov eax, [eax+2Ch]
	mov [esi+8], eax
	mov eax, [ebp-10h]
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41FD7C:
	mov eax, ecx
	call sub_41FEC0
	mov dl, al
	xor eax, eax
	mov al, [esi+0Dh]
	add eax, 6
	mov [ebp-14h], eax
	mov [esi+0Fh], dl
	xor edx, edx
	mov eax, esi
	mov dl, [esi+0Dh]
	add eax, 0Ch
	add edx, 6
	mov [ebp-0Ch], eax
	call sub_41FF60
	mov ebx, [ebp-14h]
	mov edi, [ecx+4]
	mov edx, [ebp-0Ch]
	mov eax, [ebp-8]
	call dword [edi+18h]
	mov edx, [ebp-14h]
	cmp eax, edx
	jnz loc_41FE0D
	cmp dword [dword_4DBAB8], 3
	jl loc_41FDEB
	xor eax, eax
	mov edx, [ebp-4]
	mov al, [ecx+0Dh]
	lea ebx, [esi+12h]
	push eax
	mov edi, [esi+8]
	xor ecx, ecx
	push 0
	mov cl, [esi+0Dh]
	test edi, edi
	jl loc_41FE06
	mov eax, aRsnd ; "rsnd"

loc_41FDE6:
	call sub_48B724

loc_41FDEB:
	mov dword [ebp-10h], 1
	mov eax, [ebp-8]
	mov eax, [eax+2Ch]
	mov [esi+8], eax
	mov eax, [ebp-10h]
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_41FE06:
	mov eax, aSent ; "sent"
	jmp loc_41FDE6

loc_41FE0D:
	cmp dword [dword_4DBAB8], 1
	jl loc_41FD5E
	xor eax, eax
	mov al, [ecx+0Dh]
	push eax
	mov ebx, [ebp-0Ch]
	mov ecx, edx
	push 1
	lea edx, [ebp-14h]
	mov eax, aWriteFailure ; "write failure"
	jmp loc_41FD59

loc_41FE34:
	cmp dword [dword_4DBAB8], 3
	jl loc_41FD5E
	xor eax, eax
	mov al, [ecx+0Dh]
	push eax
	mov edx, [ebp-4]
	xor ebx, ebx
	push 1
	xor ecx, ecx
	mov eax, aBusy ; "busy"
	jmp loc_41FD59

loc_41FE5A:
	mov dword [esi+8], 1
	mov eax, [ebp-10h]
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_41FD00 endp

sub_41FE70: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, ebx
	lea ebp, [eax+12h]
	mov eax, [edx+6Ch]
	call sub_489F48
	mov eax, [edx+30h]
	lea ebx, [eax+1]
	mov [edx+30h], ebx
	mov [esi+4], eax
	mov eax, [edx+6Ch]
	call sub_489F60
	mov dword [esi+8], 0FFFFFFFFh
	mov ebx, ecx
	mov dl, [esi+4]
	mov byte [esi+0Ch], 0FEh
	and dl, 7Fh
	mov eax, edi
	mov [esi+0Eh], dl
	mov edx, ebp
	mov [esi+0Dh], cl
	call sub_48A980
	pop ebp
	pop edi
	pop esi
	ret
;sub_41FE70 endp

sub_41FEC0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	mov edx, eax
	add eax, 78h
	call sub_48BCC0
	mov [esp], eax
	cmp eax, 0FFFFFFFFh
	jz loc_41FEF9

loc_41FED7:
	dec eax
	mov [esp], eax
	mov eax, [edx]
	mov eax, [eax+24h]
	mov ecx, dword [dword_4DBAB8]
	mov [edx+2Ch], eax
	cmp ecx, 3
	jge loc_41FEFE
	mov al, [esp]
	and al, 7Fh
	add esp, 4
	pop edx
	pop ecx
	ret

loc_41FEF9:
	mov eax, [edx+74h]
	jmp loc_41FED7

loc_41FEFE:
	push ebx
	xor eax, eax
	mov al, [edx+0Dh]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	lea edx, [esp+0Ch]
	mov eax, aAckt ; "ACKt"
	call sub_48B724
	pop ebx
	mov al, [esp]
	and al, 7Fh
	add esp, 4
	pop edx
	pop ecx
	ret
;sub_41FEC0 endp

sub_41FF30: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov bl, [eax+4]
	mov bh, [eax+5]
	call sub_41FF60
	mov eax, [ecx+2]
	movsx edx, bx
	sar eax, 10h
	cmp edx, eax
	jnz loc_41FF54
	mov eax, 1
	pop ecx
	pop ebx
	ret

loc_41FF54:
	xor eax, eax
	pop ecx
	pop ebx
	ret
;sub_41FF30 endp

sub_41FF60: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov byte [eax+5], 0
	mov al, [eax+5]
	mov [ecx+4], al
	mov eax, ecx
	call sub_48EBE0
	mov edx, eax
	sar eax, 8
	mov [ecx+5], dl
	mov [ecx+4], al
	pop ecx
	ret
;sub_41FF60 endp

sub_41FF90: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, ebx
	not eax
	and eax, ecx
	or eax, edx
	cmp eax, ecx
	jnb loc_41FFA2
	inc ebx
	add eax, ebx

loc_41FFA2:
	pop ecx
	ret
;sub_41FF90 endp

sub_420060: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	mov edx, ebx
	mov ecx, [ecx+34h]
	mov ebx, eax
	mov eax, ecx
	call sub_490008
	pop ecx
	ret
;sub_420060 endp

sub_420080: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, ebx
	mov ebx, edx
	mov ecx, [ecx+34h]
	mov edx, eax
	mov eax, ecx
	call sub_490478
	mov edx, eax
	test eax, eax
	jl loc_42009D
	mov eax, edx
	pop ecx
	ret

loc_42009D:
	neg edx
	mov eax, edx
	pop ecx
	ret
;sub_420080 endp

sub_4200B0: ;SUBROUTINE
	mov eax, [eax+34h]
	jmp sub_490308
;sub_4200B0 endp

sub_420F80: ;SUBROUTINE
	cmp edx, 4700h
	jz loc_420FA5
	cmp edx, 8
	jz sub_4231D0
	cmp edx, 5300h
	jz sub_4231D0
	test dl, 0FFh
	jnz loc_420FB0
	xor eax, eax
	ret

loc_420FA5:
	call sub_423430
	mov eax, 1
	ret

loc_420FB0:
	and edx, 0FFh
	jmp sub_423290
;sub_420F80 endp

;	Attributes: thunk

sub_420FC0: ;SUBROUTINE
	jmp sub_423490
;sub_420FC0 endp

sub_420FD0: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 4
	mov ecx, eax
	mov eax, dword [dword_513408+2]
	sar eax, 10h
	call sub_463DC0
	mov ebx, eax
	cwde
	cmp eax, 0FFFFFFFFh
	jz loc_421034
	test ecx, ecx
	jz loc_42102C
	test edx, edx
	jz loc_4211A2
	cmp ecx, 8
	jnz loc_421038

loc_420FFD:
	movsx eax, bx
	mov edx, ecx
	call sub_420F80
	test eax, eax
	jz loc_421027
	mov ah, 8
	mov edx, esp
	mov [esp+1], bl
	mov ebx, 4
	mov [esp], ah
	xor eax, eax
	mov [esp+2], cx
	call sub_464070

loc_421027:
	mov ecx, 1

loc_42102C:
	mov eax, ecx
	add esp, 4
	pop ecx
	pop ebx
	ret

loc_421034:
	xor ecx, ecx
	jmp loc_42102C

loc_421038:
	cmp ecx, 5300h
	jz loc_420FFD
	cmp ecx, 4700h
	jz loc_420FFD
	cmp ecx, 20h
	jl loc_421052
	cmp ecx, 22h
	jle loc_420FFD

loc_421052:
	cmp ecx, 26h
	jl loc_42105C
	cmp ecx, 3Bh
	jle loc_420FFD

loc_42105C:
	cmp ecx, 3Dh
	jz loc_420FFD
	cmp ecx, 3Fh
	jz loc_420FFD
	cmp ecx, 41h
	jl loc_421070
	cmp ecx, 7Dh
	jle loc_420FFD

loc_421070:
	cmp ecx, 91h
	jz loc_420FFD
	cmp ecx, 92h
	jz loc_420FFD
	cmp ecx, 0A1h
	jz loc_420FFD
	cmp ecx, 0B0h
	jz loc_420FFD
	cmp ecx, 0BFh
	jz loc_420FFD
	cmp ecx, 0C1h
	jz loc_420FFD
	cmp ecx, 0E1h
	jz loc_420FFD
	cmp ecx, 0C4h
	jz loc_420FFD
	cmp ecx, 0E4h
	jz loc_420FFD
	cmp ecx, 0C7h
	jz loc_420FFD
	cmp ecx, 0E7h
	jz loc_420FFD
	cmp ecx, 0C9h
	jz loc_420FFD
	cmp ecx, 0E9h
	jz loc_420FFD
	cmp ecx, 0CDh
	jz loc_420FFD
	cmp ecx, 0EDh
	jz loc_420FFD
	cmp ecx, 0D1h
	jz loc_420FFD
	cmp ecx, 0F1h
	jz loc_420FFD
	cmp ecx, 0D3h
	jz loc_420FFD
	cmp ecx, 0F3h
	jz loc_420FFD
	cmp ecx, 0D6h
	jz loc_420FFD
	cmp ecx, 0F6h
	jz loc_420FFD
	cmp ecx, 0DAh
	jz loc_420FFD
	cmp ecx, 0FAh
	jz loc_420FFD
	cmp ecx, 0DCh
	jz loc_420FFD
	cmp ecx, 0FCh
	jz loc_420FFD
	xor ecx, ecx
	mov eax, ecx
	add esp, 4
	pop ecx
	pop ebx
	ret

loc_4211A2:
	cmp ecx, 20h
	jge loc_420FFD
	cmp ecx, 8
	jz loc_420FFD
	cmp ecx, 5300h
	jz loc_420FFD
	cmp ecx, 4700h
	jz loc_420FFD
	xor ecx, ecx
	mov eax, ecx
	add esp, 4
	pop ecx
	pop ebx
	ret
;sub_420FD0 endp

sub_4211E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov [esp+18h], eax
	cmp byte [byte_51345F], 1
	jz loc_4212AE
	mov dword [esp+20h], 2

loc_421202:
	xor ebx, ebx
	mov esi, [esp+20h]
	mov [esp+14h], ebx
	test esi, esi
	jle loc_4212A4
	mov edi, byte_512E84
	mov [esp+0Ch], ebx
	mov [esp+10h], ebx
	mov [esp+4], ebx
	mov [esp+8], edi

loc_421229:
	mov eax, [esp+14h]
	mov edi, [esp+4]
	call sub_4230A0
	mov edi, dword dword_51340C[edi]
	sar edi, 10h
	mov [esp+24h], eax
	cmp edi, 0FFFFFFFFh
	jz loc_42125E
	cmp dword [esp+18h], 0
	jz loc_42130F
	cmp word word_513448[edi*2], 0
	jz loc_4212BB

loc_42125E:
	mov eax, [esp+14h]
	call sub_423430

loc_421267:
	mov edi, [esp+4]
	mov ebp, [esp+8]
	mov eax, [esp+0Ch]
	mov edx, [esp+10h]
	mov ecx, [esp+14h]
	mov ebx, [esp+20h]
	add edi, 2
	add ebp, 9
	add eax, 4
	add edx, 10h
	inc ecx
	mov [esp+4], edi
	mov [esp+8], ebp
	mov [esp+0Ch], eax
	mov [esp+10h], edx
	mov [esp+14h], ecx
	cmp ecx, ebx
	jl loc_421229

loc_4212A4:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4212AE:
	mov dword [esp+20h], 8
	jmp loc_421202

loc_4212BB:
	cmp dword [esp+20h], 2
	jnz loc_421385
	mov ebx, [esp+10h]
	mov edx, 86h
	mov eax, [esp+8]

loc_4212D3:
	mov ebx, dword dword_4D4C04[ebx]
	call sub_47BDC0
	mov ebx, [esp+24h]
	mov edi, 0FFFFFFFFh
	mov esi, [ebx]
	xor eax, eax
	test esi, esi
	jle loc_421306
	mov esi, ebx
	mov ebx, [esp+24h]

loc_4212F5:
	cmp byte [esi+4], 0
	jz loc_4212FC
	inc edi

loc_4212FC:
	inc eax
	mov ebp, [ebx]
	add esi, 26h
	cmp eax, ebp
	jl loc_4212F5

loc_421306:
	cmp edi, 4
	jge loc_42139B

loc_42130F:
	xor edi, edi

loc_421311:
	mov eax, [esp+24h]
	cmp edi, [eax]
	jge loc_421267
	imul esi, edi, 26h
	add eax, 4
	add esi, eax
	imul eax, edi, 14h
	mov ebx, [esp+10h]
	mov [esp+1Ch], ebx
	mov ebx, [esp+0Ch]
	xor ebp, ebp
	mov [esp], ebx
	mov [esp+28h], eax

loc_42133D:
	cmp dword [esp+18h], 0
	jz loc_4213B5
	cmp dword [esp+20h], 2
	jnz loc_4213A3
	mov ebx, [esp+1Ch]
	mov edx, 0D6h
	mov ebx, dword dword_4D4C04[ebx]
	mov eax, esi
	add ebx, ebp

loc_42135E:
	call sub_47BDC0

loc_421363:
	mov ebx, [esp+28h]
	mov eax, [esp+24h]
	add esi, 26h
	inc edi
	add ebp, 0Fh
	add ebx, 14h
	mov ecx, [eax]
	mov [esp+28h], ebx
	cmp edi, ecx
	jge loc_421267
	jmp loc_42133D

loc_421385:
	mov ebx, [esp+0Ch]
	lea eax, [edi+edi*8]
	mov edx, 86h
	add eax, byte_512E84
	jmp loc_4212D3

loc_42139B:
	sub edi, 3
	jmp loc_421311

loc_4213A3:
	mov ebx, [esp]
	mov edx, 0D6h
	mov eax, esi
	mov ebx, dword dword_4D4C04[ebx]
	jmp loc_42135E

loc_4213B5:
	mov eax, [esp+20h]
	cmp eax, 2
	jnz loc_4213EB
	push eax
	mov eax, [esp+20h]
	mov ecx, [esp+2Ch]
	mov edx, 0FDh
	mov ax, word word_4D4C24[eax]
	push 3
	add eax, ecx
	mov ecx, 0Eh
	movsx ebx, ax
	mov eax, esi
	call sub_4054E0
	jmp loc_421363

loc_4213EB:
	push 2
	mov ebx, [esp+4]
	mov ecx, 0Eh
	mov edx, 0FDh
	mov eax, esi
	mov ebx, dword word_4D4C22[ebx]
	push 3
	sar ebx, 10h
	call sub_4054E0
	jmp loc_421363
;sub_4211E0 endp

;	Attributes: thunk

sub_421420: ;SUBROUTINE
	jmp sub_4234C0
;sub_421420 endp

sub_421430: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 20h
	cmp byte [byte_51345F], 1
	jnz loc_42147F
	mov ebx, 1
	mov esi, 25h
	mov ecx, 8
	xor edi, edi
	mov [esp+4], ebx
	mov [esp+8], esi
	mov [esp+0Ch], edi
	mov [esp+10h], edi
	mov [esp+14h], edi
	mov [esp+18h], edi
	mov [esp+1Ch], ebx
	mov [esp], ecx
	mov eax, esp
	call sub_423520
	add esp, 20h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_42147F:
	push edx
	mov edx, 2
	mov ecx, 0Ah
	mov ebx, 25h
	mov eax, 7
	xor esi, esi
	mov [esp+4], edx
	mov [esp+8], ecx
	mov [esp+0Ch], ebx
	mov [esp+10h], esi
	mov [esp+14h], esi
	mov [esp+18h], esi
	mov edx, 1
	mov [esp+1Ch], eax
	mov [esp+20h], edx
	pop edx
	mov eax, esp
	call sub_423520
	add esp, 20h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_421430 endp

sub_4214D0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, edx
	mov ebp, ebx
	mov [esp], edx
	cmp word [word_513458], 0
	jz loc_421534
	cmp byte [byte_51345F], 1
	jnz loc_421534
	mov esi, 4
	mov ecx, 1

loc_4214FB:
	mov eax, dword [dword_513408]
	sar eax, 10h
	cmp ecx, eax
	jge loc_421534
	mov edx, [esp]
	xor eax, eax
	mov al, [edx+1]
	mov eax, dword dword_51340C[eax*2]
	sar eax, 10h
	cmp ecx, eax
	jnz loc_421523

loc_42151D:
	inc ecx
	add esi, 4
	jmp loc_4214FB

loc_421523:
	mov ebx, ebp
	mov edx, edi
	mov eax, dword dword_513080[esi]
	call sub_464070
	jmp loc_42151D

loc_421534:
	mov edx, [esp]
	mov ecx, [esp]
	xor eax, eax
	mov edx, [edx]
	mov al, [ecx+1]
	sar edx, 10h
	mov ebx, 1
	call sub_420F80
	mov word [word_513434], bx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4214D0 endp

;ForceFeedback
off_421560: dd dword_4E2718
	dd dword_4E2728
	dd dword_4E2738
	dd dword_4E2748
	dd dword_4E2758
	dd dword_4E2768
	dd dword_4E2778
	dd dword_4E2788
	dd dword_4E2798
	dd dword_4E2798
	dd dword_4E27A8
	dd dword_4E27B8
	dd dword_4E27C8
dword_421594: dd 0
	dd 4, 8, 14h, 18h, 1Ch, 0

sub_4215B0: ;SUBROUTINE
	test eax, eax
	jz loc_4215CA
	cmp eax, 1
	jz locret_4215C9
	cmp eax, 80070057h
	jz loc_4215C7
	cmp eax, 80070005h
	jnz loc_4215D0

loc_4215C7:
	xor eax, eax

locret_4215C9:
	ret

loc_4215CA:
	mov eax, 1
	ret

loc_4215D0:
	push ecx
	push ebx
	push edx
	mov ecx, aCNfs2seFront_7 ; "c:\\nfs2se\\frontend\\pc\\eaInput.c"
	mov ebx, 774h
	push aUnknownErrorAc ; "Unknown Error acquiring device %d\n"
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], ebx
	call sub_4840F0
	add esp, 8
	xor eax, eax
	pop ebx
	pop ecx
	ret
;sub_4215B0 endp

sub_421600: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_4D4C44]
	xor edi, edi
	test edx, edx
	jz loc_42164C
	cmp al, 13h
	jz loc_421655
	cmp al, 11h
	jnb loc_42167B
	cmp al, 10h
	jnz loc_4216D0
	xor esi, esi
	xor ebx, ebx

loc_421626:
	mov ebp, dword dword_4E7348[esi]
	test ebp, ebp
	jz loc_421643
	push ebp
	mov edx, [ebp+0]
	call dword [edx+1Ch]
	mov edx, ebx
	call sub_4215B0
	test eax, eax
	jz loc_421643
	inc edi

loc_421643:
	inc ebx
	add esi, 4
	cmp ebx, 10h
	jl loc_421626

loc_42164C:
	mov eax, edi

loc_42164E:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_421655:
	mov eax, 11h
	call sub_421600
	mov edx, eax
	mov eax, 12h
	call sub_421600
	add edx, eax
	mov eax, 10h
	call sub_421600
	add eax, edx
	jmp loc_42164E

loc_42167B:
	ja loc_42168F
	cmp dword [lpEventAttributes], 0
	jnz loc_4216B4
	mov eax, edi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42168F:
	cmp al, 12h
	jnz loc_4216D0
	mov ecx, dword [dword_4D4C4C]
	test ecx, ecx
	jz loc_42164C
	push ecx
	mov edx, [ecx]
	movsx ebx, al
	call dword [edx+1Ch]
	mov edx, ebx
	call sub_4215B0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4216B4:
	movsx ebx, al
	mov eax, dword [lpEventAttributes]
	push eax
	mov edx, [eax]
	call dword [edx+1Ch]
	mov edx, ebx
	call sub_4215B0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4216D0:
	cmp al, 13h
	jg loc_421700
	movsx ebx, al
	lea eax, 0[ebx*4]
	mov esi, dword dword_4E7348[eax]
	test esi, esi
	jz loc_42164C
	push esi
	mov edx, [esi]
	call dword [edx+1Ch]
	mov edx, ebx
	call sub_4215B0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_421700:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_421600 endp

sub_421710: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp], al
	mov ebx, edx
	call getHwnd
	test eax, eax
	jz loc_42175B
	mov ah, [esp]
	cmp ah, 10h
	jge loc_421764
	mov esi, [esp-3]
	sar esi, 18h
	shl esi, 2
	mov edi, dword dword_4E7348[esi]
	test edi, edi
	jz loc_421788
	push ebx
	mov edi, [edi]
	call getHwnd
	push eax
	mov ebp, dword dword_4E7348[esi]
	push ebp
	call dword [edi+34h]
	test eax, eax
	jz loc_421788
	xor eax, eax

loc_42175B:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_421764:
	jnz loc_421796
	xor ch, ch
	mov [esp+4], ch

loc_42176C:
	mov eax, [esp+1]
	mov edx, ebx
	sar eax, 18h
	call sub_421710
	inc dword [esp+4]
	cmp byte [esp+4], 10h
	jl loc_42176C

loc_421788:
	mov eax, 1
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_421796:
	cmp ah, 11h
	jz loc_4217C7
	cmp ah, 12h
	jnz loc_421788
	mov eax, dword [dword_4D4C4C]
	push ebx
	mov esi, [eax]
	call getHwnd
	push eax
	mov edx, dword [dword_4D4C4C]
	push edx
	call dword [esi+34h]
	test eax, eax
	jz loc_421788
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4217C7:
	mov eax, dword [lpEventAttributes]
	push ebx
	mov esi, [eax]
	call getHwnd
	push eax
	mov ecx, dword [lpEventAttributes]
	push ecx
	call dword [esi+34h]
	test eax, eax
	jz loc_421788
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_421710 endp

sub_4217F0: ;SUBROUTINE
	push ebx
	push esi
	push ebp
	sub esp, 4
	mov esi, [esp+14h]
	mov edx, dword [dword_4D4C5C]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	shl eax, 2
	xor dl, dl
	mov ebx, 50h
	mov byte byte_4E7391[eax], dl
	add eax, dword_4E7388
	lea edx, [esi+12Ch]
	add eax, 9
	call strncpy_
	mov edx, dword [dword_4D4C5C]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	lea edx, 0[eax*4]
	xor bl, bl
	xor eax, eax
	mov byte byte_4E73E0[edx], bl
	mov ax, [esi+24h]
	sar eax, 8
	and eax, 0FFh
	mov ecx, [esp+18h]
	cmp al, 4
	jb loc_4218A3
	ja loc_421896
	mov byte byte_4E7390[edx], 4

loc_421873:
	push 0
	lea eax, [esp+4]
	push eax
	add esi, 4
	push esi
	mov edx, [ecx]
	push ecx
	call dword [edx+0Ch]
	test eax, eax
	jz loc_4218C1
	mov eax, 1
	add esp, 4
	pop ebp
	pop esi
	pop ebx
	ret 8

loc_421896:
	cmp al, 6
	jnz loc_4218A3
	mov byte byte_4E7390[edx], 2
	jmp loc_421873

loc_4218A3:
	mov edx, dword [dword_4D4C5C]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	mov byte byte_4E7390[eax*4], 1
	jmp loc_421873

loc_4218C1:
	push dword_4C4EA0
	mov edx, [esp+4]
	mov eax, [esp+4]
	push edx
	mov eax, [eax]
	call dword [eax+2Ch]
	test eax, eax
	jnz loc_42191B
	mov eax, dword [dword_4D4C5C]
	shl eax, 2
	add eax, dword_4E7348
	push eax
	mov edx, [esp+4]
	push dword_4E27E8
	mov ecx, [esp+8]
	mov edx, [edx]
	push ecx
	call dword [edx]
	test eax, eax
	jnz loc_421935
	mov eax, dword [dword_4D4C58+1]
	mov edx, 9
	sar eax, 18h
	call sub_421710
	test eax, eax
	jnz loc_421953
	add esp, 4
	pop ebp
	pop esi
	pop ebx
	ret 8

loc_42191B:
	mov ebp, [esp]
	mov eax, [esp]
	push ebp
	mov eax, [eax]
	call dword [eax+8]
	mov eax, 1
	add esp, 4
	pop ebp
	pop esi
	pop ebx
	ret 8

loc_421935:
	push edi
	mov edi, [esp+4]
	mov eax, [esp+4]
	push edi
	mov eax, [eax]
	call dword [eax+8]
	mov eax, 1
	pop edi
	add esp, 4
	pop ebp
	pop esi
	pop ebx
	ret 8

loc_421953:
	mov ebx, [esp]
	mov eax, [esp]
	push ebx
	mov eax, [eax]
	call dword [eax+8]
	mov eax, 1
	add dword [dword_4D4C5C], eax
	add esp, 4
	pop ebp
	pop esi
	pop ebx
	ret 8
;sub_4217F0 endp

sub_421980: ;SUBROUTINE
	push esi
	push ebp
	cmp dword [dword_4D4C44], 0
	jz loc_421A1D
	push edx
	push ecx
	push ebx
	cmp dword [lpEventAttributes], 0
	jz loc_4219CD
	mov ebx, dword [hObject]
	test ebx, ebx
	jz loc_4219AD
	push ebx ; hObject
	call CloseHandle_wrap

loc_4219AD:
	push edi
	mov eax, dword [lpEventAttributes]
	push eax
	mov edx, [eax]
	call dword [edx+20h]
	mov eax, dword [lpEventAttributes]
	push eax
	mov edx, [eax]
	xor edi, edi
	call dword [edx+8]
	mov dword [lpEventAttributes], edi
	pop edi

loc_4219CD:
	mov ebp, dword [dword_4D4C4C]
	test ebp, ebp
	jnz loc_421A2E

loc_4219D7:
	xor ebx, ebx

loc_4219D9:
	mov edx, dword dword_4E7348[ebx]
	test edx, edx
	jz loc_4219FF
	mov eax, edx
	push eax
	mov edx, [edx]
	call dword [edx+20h]
	mov eax, dword dword_4E7348[ebx]
	push eax
	mov edx, [eax]
	call dword [edx+8]
	xor ecx, ecx
	mov dword dword_4E7348[ebx], ecx

loc_4219FF:
	add ebx, 4
	cmp ebx, 40h
	jnz loc_4219D9
	mov eax, dword [dword_4D4C44]
	push eax
	mov edx, [eax]
	xor ebx, ebx
	call dword [edx+8]
	mov dword [dword_4D4C44], ebx
	pop ebx
	pop ecx
	pop edx

loc_421A1D:
	xor esi, esi
	mov dword [dword_4D4C5C], esi
	mov dword [dword_4D4C58], esi
	pop ebp
	pop esi
	ret

loc_421A2E:
	push ebp
	mov edx, [ebp+0]
	call dword [edx+20h]
	mov eax, dword [dword_4D4C4C]
	push eax
	mov edx, [eax]
	call dword [edx+8]
	xor eax, eax
	mov dword [dword_4D4C4C], eax
	jmp loc_4219D7
;sub_421980 endp

sub_421A50: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 54h
	mov esi, edx
	mov [esp+50h], ebx
	mov ebp, ecx
	movsx ebx, al
	lea edi, 0[ebx*4]
	mov edx, dword dword_4E7348[edi]
	test edx, edx
	jnz loc_421A93
	mov ecx, [esp+74h]
	test ecx, ecx
	jnz loc_421A8F

loc_421A7A:
	test esi, esi
	jz loc_421A84
	mov dword [esi], 0

loc_421A84:
	xor eax, eax
	add esp, 54h
	pop ebp
	pop edi
	pop esi
	ret 14h

loc_421A8F:
	mov [ecx], edx
	jmp loc_421A7A

loc_421A93:
	mov eax, edx
	push eax
	mov edx, [edx]
	call dword [edx+64h]
	test eax, eax
	jz loc_421ABF
	cmp eax, 8007001Eh
	jz loc_421AAD
	cmp eax, 8007000Ch
	jnz loc_421A84

loc_421AAD:
	mov eax, ebx
	call sub_421600
	xor eax, eax
	add esp, 54h
	pop ebp
	pop edi
	pop esi
	ret 14h

loc_421ABF:
	mov eax, dword dword_4E7348[edi]
	mov edi, esp
	push edi
	push 50h
	mov edx, [eax]
	push eax
	call dword [edx+24h]
	test eax, eax
	jz loc_421AED
	cmp eax, 8007001Eh
	jnz loc_421A84
	mov eax, ebx
	call sub_421600
	xor eax, eax
	add esp, 54h
	pop ebp
	pop edi
	pop esi
	ret 14h

loc_421AED:
	mov ecx, [esp+50h]
	test ecx, ecx
	jz loc_421AFA
	mov eax, [esp]
	mov [ecx], eax

loc_421AFA:
	test ebp, ebp
	jz loc_421B05
	mov eax, [esp+4]
	mov [ebp+0], eax

loc_421B05:
	mov ebx, [esp+64h]
	test ebx, ebx
	jz loc_421B13
	mov eax, [esp+8]
	mov [ebx], eax

loc_421B13:
	mov edi, [esp+68h]
	test edi, edi
	jz loc_421B21
	mov eax, [esp+14h]
	mov [edi], eax

loc_421B21:
	mov ebp, [esp+6Ch]
	test ebp, ebp
	jz loc_421B30
	mov eax, [esp+18h]
	mov [ebp+0], eax

loc_421B30:
	cmp dword [esp+70h], 0
	jz loc_421B41
	mov edx, [esp+70h]
	mov eax, [esp+1Ch]
	mov [edx], eax

loc_421B41:
	mov edx, [esp+74h]
	test edx, edx
	jz loc_421B4F
	mov eax, [esp+20h]
	mov [edx], eax

loc_421B4F:
	test esi, esi
	jz loc_421B77
	mov dword [esi], 0
	xor eax, eax

loc_421B5B:
	test byte [esp+eax+30h], 80h
	jz loc_421B71
	mov edx, 1
	mov cl, al
	mov ebx, [esi]
	shl edx, cl
	or ebx, edx
	mov [esi], ebx

loc_421B71:
	inc eax
	cmp eax, 20h
	jl loc_421B5B

loc_421B77:
	mov eax, 1
	add esp, 54h
	pop ebp
	pop edi
	pop esi
	ret 14h
;sub_421A50 endp

sub_421B90: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, [esp+20h]
	push esi
	mov edi, [esp+20h]
	push edi
	mov ebp, [esp+20h]
	push ebp
	mov esi, [esp+20h]
	push esi
	mov edi, [esp+20h]
	push edi
	movsx eax, al
	call sub_421A50
	test eax, eax
	jz loc_421BBD
	mov eax, 1

loc_421BBD:
	pop ebp
	pop edi
	pop esi
	ret 14h
;sub_421B90 endp

sub_421BD0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18Ch
	mov [esp+188h], al
	mov ebp, edx
	mov [esp+180h], ebx
	mov ecx, 6
	lea edi, [esp+168h]
	mov esi, dword_421594
	rep movsd
	test edx, edx
	jnz loc_421C6D

loc_421C01:
	mov edx, [esp+180h]
	test edx, edx
	jz loc_421C12
	mov dword [edx], 0

loc_421C12:
	cmp byte [esp+188h], 10h
	jnz loc_421C75
	mov dword [esp+184h], 0Fh

loc_421C27:
	mov eax, [esp+181h]
	mov ebx, [esp+180h]
	mov edx, ebp
	sar eax, 18h
	call sub_421BD0
	mov eax, [esp+184h]
	dec eax
	mov [esp+184h], eax
	test eax, eax
	jg loc_421C27
	mov ebx, [esp+180h]
	mov edx, ebp
	xor eax, eax
	call sub_421BD0
	add esp, 18Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_421C6D:
	mov dword [edx], 0
	jmp loc_421C01

loc_421C75:
	cmp dword [dword_4D4C44], 0
	jz loc_421CA5

loc_421C7E:
	mov edx, [esp+185h]
	sar edx, 18h
	lea ecx, 0[edx*4]
	cmp dword dword_4E7348[ecx], 0
	jnz loc_421CC0
	xor eax, eax
	add esp, 18Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_421CA5:
	call sub_422530
	cmp dword [dword_4D4C44], 0
	jnz loc_421C7E

loc_421CB3:
	xor eax, eax
	add esp, 18Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_421CC0:
	mov eax, edx
	call sub_421600
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	shl eax, 2
	cmp dword dword_4E7388[eax], 0
	jz loc_421D62

loc_421CE5:
	test ebp, ebp
	jz loc_421D0B
	mov edx, [esp+185h]
	sar edx, 18h
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_4E7388[eax*4]
	mov [ebp+0], eax

loc_421D0B:
	mov ecx, [esp+180h]
	test ecx, ecx
	jz loc_421D37
	mov edx, [esp+185h]
	sar edx, 18h
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_4E738C[eax*4]
	mov [ecx], eax

loc_421D37:
	mov edx, [esp+185h]
	sar edx, 18h
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	shl eax, 2
	add eax, dword_4E7388
	add esp, 18Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_421D62:
	cmp dword dword_4E738C[eax], 0
	jnz loc_421CE5
	mov ebx, 2Ch
	mov eax, dword dword_4E7348[ecx]
	lea ecx, [esp+13Ch]
	mov [esp+13Ch], ebx
	push ecx
	mov edx, [eax]
	push eax
	call dword [edx+0Ch]
	test eax, eax
	jnz loc_421CB3
	test byte [esp+141h], 1
	jz loc_421DC0
	mov ecx, [esp+185h]
	mov eax, 1
	sar ecx, 18h
	mov esi, dword [dword_4D4C58]
	shl eax, cl
	or esi, eax
	mov dword [dword_4D4C58], esi

loc_421DC0:
	mov edi, 13Ch
	mov edx, [esp+14Ch]
	xor eax, eax
	xor ebx, ebx
	mov [esp+184h], eax
	mov [esp], edi
	test edx, edx
	jbe loc_421E47
	mov esi, 30h

loc_421DE3:
	cmp ebx, 20h
	jge loc_421E47
	push 1
	mov edi, [esp+189h]
	lea ecx, [esp+4]
	push esi
	sar edi, 18h
	push ecx
	mov eax, dword dword_4E7348[edi*4]
	push eax
	mov edx, [eax]
	call dword [edx+38h]
	test eax, eax
	jnz loc_421E33
	imul eax, edi, 5Ch
	mov cl, bl
	mov edi, 1
	mov edx, dword dword_4E7388[eax]
	shl edi, cl
	or edx, edi
	mov dword dword_4E7388[eax], edx
	test ebp, ebp
	jz loc_421E2C
	mov [ebp+0], edx

loc_421E2C:
	inc dword [esp+184h]

loc_421E33:
	mov eax, [esp+184h]
	mov edi, [esp+14Ch]
	inc esi
	inc ebx
	cmp eax, edi
	jb loc_421DE3

loc_421E47:
	mov eax, [esp+148h]
	xor ebp, ebp
	xor ebx, ebx
	mov [esp+184h], ebp
	test eax, eax
	jbe loc_421ED6
	xor esi, esi

loc_421E63:
	cmp ebx, 6
	jge loc_421ED6
	mov ebp, [esp+185h]
	push 1
	mov edx, [esp+esi+16Ch]
	sar ebp, 18h
	push edx
	lea edx, [esp+8]
	mov eax, dword dword_4E7348[ebp*4]
	push edx
	mov ecx, [eax]
	push eax
	call dword [ecx+38h]
	test eax, eax
	jnz loc_421EC0
	imul ebp, 5Ch
	mov eax, 1
	mov cl, bl
	shl eax, cl
	mov ecx, dword dword_4E738C[ebp]
	or ecx, eax
	mov edi, [esp+180h]
	mov dword dword_4E738C[ebp], ecx
	test edi, edi
	jz loc_421EB9
	mov [edi], ecx

loc_421EB9:
	inc dword [esp+184h]

loc_421EC0:
	mov eax, [esp+184h]
	mov edi, [esp+148h]
	add esi, 4
	inc ebx
	cmp eax, edi
	jb loc_421E63

loc_421ED6:
	mov edx, [esp+185h]
	sar edx, 18h
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	sub eax, edx
	shl eax, 2
	add eax, dword_4E7388
	add esp, 18Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_421BD0 endp

sub_421F10: ;SUBROUTINE
	cmp dword [dword_4D4C44], 0
	jz loc_421F7C
	cmp dword [dword_4D4C64], 0
	jnz loc_421F8D

loc_421F22:
	push edi
	push esi
	mov esi, 1
	mov edi, dword [dword_4D4C5C]
	mov dword [dword_4D4C64], esi
	test edi, edi
	jnz loc_421F61
	push edx
	push ecx
	push ebx
	push esi
	mov eax, dword [dword_4D4C44]
	push eax
	push sub_4217F0
	push 4
	mov edx, [eax]
	push eax
	xor ebx, ebx
	call dword [edx+10h]
	mov eax, 10h
	xor edx, edx
	call sub_421BD0
	pop ebx
	pop ecx
	pop edx

loc_421F61:
	cmp dword [dword_4D4C5C], 0
	jz loc_421F74
	mov eax, 10h
	call sub_421600

loc_421F74:
	mov eax, dword [dword_4D4C5C]
	pop esi
	pop edi
	ret

loc_421F7C:
	call sub_422530
	cmp dword [dword_4D4C44], 0
	jnz loc_421F22
	xor eax, eax
	ret

loc_421F8D:
	mov eax, dword [dword_4D4C5C]
	ret
;sub_421F10 endp

sub_421FA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov dl, al
	cmp al, 13h
	jz loc_421FC5

loc_421FAA:
	cmp dl, 10h
	jnz loc_421FE5
	xor edx, edx

loc_421FB1:
	movsx eax, dl
	inc edx
	call sub_421FA0
	cmp edx, 10h
	jl loc_421FB1
	nop

loc_421FC0:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_421FC5:
	mov eax, 11h
	call sub_421FA0
	mov eax, 12h
	call sub_421FA0
	mov eax, 10h
	call sub_421FA0
	jmp loc_421FAA

loc_421FE5:
	cmp dl, 11h
	jnz loc_421FFF
	mov esi, dword [lpEventAttributes]
	test esi, esi
	jz loc_421FC0
	push esi
	mov edx, [esi]
	call dword [edx+20h]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_421FFF:
	cmp dl, 12h
	jnz loc_422019
	mov ebx, dword [dword_4D4C4C]
	test ebx, ebx
	jz loc_421FC0
	push ebx
	mov edx, [ebx]
	call dword [edx+20h]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_422019:
	jnz loc_422030
	mov ecx, dword [dword_4D4C4C]
	test ecx, ecx
	jz loc_421FC0
	push ecx
	mov edx, [ecx]
	call dword [edx+20h]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_422030:
	test dl, dl
	jl loc_421FC0
	cmp dl, 10h
	jge loc_421FC0
	movsx eax, dl
	shl eax, 2
	mov edx, dword dword_4E7348[eax]
	test edx, edx
	jz loc_421FC0
	mov eax, edx
	push eax
	mov edx, [edx]
	call dword [edx+20h]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_421FA0 endp

sub_422060: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 204h
	mov ebp, eax
	mov edi, edx
	mov esi, ebx
	push 0
	lea ecx, [esp+204h]
	push ecx
	lea ecx, [esp+8]
	mov edx, 20h
	push ecx
	mov eax, dword [lpEventAttributes]
	mov [esp+20Ch], edx
	push 10h
	mov edx, [eax]
	push eax
	call dword [edx+28h] ;GetDeviceData()
	mov edx, eax
	test eax, eax
	jnz loc_422122
	mov ecx, [esp+200h]
	test ecx, ecx
	jbe loc_4220E2
	mov ebx, ecx
	shl ebx, 4

loc_4220B2:
	mov ecx, [esp+eax]
	cmp ecx, 0Ch
	jnz loc_422187
	test byte [esp+eax+4], 80h
	jz loc_422178
	mov ch, byte [dword_4E8950]
	or ch, 1
	or dl, 1

loc_4220D5:
	mov byte [dword_4E8950], ch

loc_4220DB:
	add eax, 10h
	cmp eax, ebx
	jl loc_4220B2

loc_4220E2:
	test ebp, ebp
	jz loc_4220F0
	mov eax, dword [dword_4E8950]
	or eax, edx
	mov [ebp+0], eax

loc_4220F0:
	test edi, edi
	jz loc_4220FB
	mov eax, dword [mousePositionX]
	mov [edi], eax

loc_4220FB:
	test esi, esi
	jz loc_422106
	mov eax, dword [mousePositionY]
	mov [esi], eax

loc_422106:
	cmp dword [off_4DAC4C], 0
	jz loc_422117
	test edx, edx
	jnz loc_4222A4

loc_422117:
	add esp, 204h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_422122:
	xor ebx, ebx
	mov dword [dword_4E8950], ebx
	test ebp, ebp
	jz loc_422131
	mov [ebp+0], ebx

loc_422131:
	test edi, edi
	jz loc_42213C
	mov eax, dword [mousePositionX]
	mov [edi], eax

loc_42213C:
	test esi, esi
	jz loc_422147
	mov eax, dword [mousePositionY]
	mov [esi], eax

loc_422147:
	cmp edx, 80040207h
	jb loc_422117
	jbe loc_422117
	cmp edx, 8007000Ch
	jb loc_422117
	jbe loc_422163
	cmp edx, 8007001Eh
	jnz loc_422117

loc_422163:
	mov eax, 11h
	call sub_421600
	add esp, 204h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_422178:
	and dword [dword_4E8950], 0FEh
	jmp loc_4220DB

loc_422187:
	cmp ecx, 0Dh
	jnz loc_4221B3
	test byte [esp+eax+4], 80h
	jz loc_4221A4
	mov ch, byte [dword_4E8950]
	or ch, 2
	or dl, 2
	jmp loc_4220D5

loc_4221A4:
	and dword [dword_4E8950], 0FDh
	jmp loc_4220DB

loc_4221B3:
	cmp ecx, 0Eh
	jnz loc_4221DF
	test byte [esp+eax+4], 80h
	jz loc_4221D0
	mov ch, byte [dword_4E8950]
	or ch, 4
	or dl, 4
	jmp loc_4220D5

loc_4221D0:
	and dword [dword_4E8950], 0FBh
	jmp loc_4220DB

loc_4221DF:
	cmp ecx, 0Fh
	jnz loc_42220B
	test byte [esp+eax+4], 80h
	jz loc_4221FC
	mov ch, byte [dword_4E8950]
	or ch, 8
	or dl, 8
	jmp loc_4220D5

loc_4221FC:
	and dword [dword_4E8950], 0F7h
	jmp loc_4220DB

loc_42220B:
	test ecx, ecx
	jnz loc_422255
	mov ecx, [esp+eax+4] ;Mouse X from GetDeviceData()
	add dword [mousePositionX], ecx
	mov ecx, dword [mousePositionX]
	cmp ecx, dword [dword_4E8938]
	jge loc_422238
	mov ecx, dword [dword_4E8938]
	mov dword [mousePositionX], ecx
	jmp loc_4220DB

loc_422238:
	cmp ecx, dword [dword_4E8940]
	jle loc_4220DB
	mov ecx, dword [dword_4E8940]
	mov dword [mousePositionX], ecx
	jmp loc_4220DB

loc_422255:
	cmp ecx, 4
	jnz loc_4220DB
	mov ecx, [esp+eax+4] ;Mouse Y from GetDeviceData()
	add dword [mousePositionY], ecx
	mov ecx, dword [mousePositionY]
	cmp ecx, dword [dword_4E893C]
	jge loc_422287
	mov ecx, dword [dword_4E893C]
	mov dword [mousePositionY], ecx
	jmp loc_4220DB

loc_422287:
	cmp ecx, dword [dword_4E8944]
	jle loc_4220DB
	mov ecx, dword [dword_4E8944]
	mov dword [mousePositionY], ecx
	jmp loc_4220DB

loc_4222A4:
	mov eax, dword [dword_4E8950]
	or eax, edx
	call dword [off_4DAC4C]
	add esp, 204h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_422060 endp

sub_4222C0: ;SUBROUTINE
	mov dword [dword_4E8938], eax
	mov dword [dword_4E893C], edx
	mov dword [dword_4E8940], ebx
	mov edx, dword [mousePositionY]
	mov eax, dword [mousePositionX]
	mov dword [dword_4E8944], ecx
	jmp sub_4222F0
;sub_4222C0 endp

sub_4222F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ebx, edx
	push 0
	lea ecx, [esp+4]
	push ecx
	mov edx, 0FFFFFFFFh
	push 0
	mov eax, dword [lpEventAttributes]
	mov [esp+0Ch], edx
	push 10h
	mov edx, [eax]
	push eax
	call dword [edx+28h]
	mov ecx, dword [dword_4E8938]
	cmp esi, ecx
	jl loc_422356
	mov edi, dword [dword_4E8940]
	cmp esi, edi
	jle loc_42235E
	mov dword [mousePositionX], edi

loc_422335:
	mov ebp, dword [dword_4E893C]
	cmp ebx, ebp
	jl loc_422366
	mov eax, dword [dword_4E8944]
	cmp ebx, eax
	jle loc_42236E
	mov dword [mousePositionY], eax

loc_42234D:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_422356:
	mov dword [mousePositionX], ecx
	jmp loc_422335

loc_42235E:
	mov dword [mousePositionX], esi
	jmp loc_422335

loc_422366:
	mov dword [mousePositionY], ebp
	jmp loc_42234D

loc_42236E:
	mov dword [mousePositionY], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4222F0 endp

sub_422380: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 14h
	cmp dword [dword_4D4C44], 0
	jz loc_4223D7

loc_422391:
	mov ebx, dword [lpEventAttributes]
	test ebx, ebx
	jz loc_4223E9

loc_42239B:
	cmp dword [lpEventAttributes], 0
	jz loc_4223AE
	mov eax, 11h
	call sub_421600

loc_4223AE:
	mov ecx, 1E0h
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	mov dword [dword_4E8950], ebx
	mov ebx, 280h
	call sub_4222C0
	mov eax, 1

loc_4223CE:
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4223D7:
	call sub_422530
	cmp dword [dword_4D4C44], 0
	jnz loc_422391
	xor eax, eax
	jmp loc_4223CE

loc_4223E9:
	push ebx
	push lpEventAttributes
	mov eax, dword [dword_4D4C44]
	push dword_4E27D8
	mov edx, [eax]
	push eax
	call dword [edx+0Ch]
	test eax, eax
	jz loc_42240E
	xor eax, eax
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42240E:
	push dword_4C4BC0
	mov eax, dword [lpEventAttributes]
	push eax
	mov edx, [eax]
	call dword [edx+2Ch]
	test eax, eax
	jz loc_42242D
	xor eax, eax
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42242D:
	mov edx, 5
	mov eax, 11h
	call sub_421710
	test eax, eax
	jz loc_4223CE
	push ebx ; lpName
	push ebx ; bInitialState
	push ebx ; bManualReset
	push ebx ; lpEventAttributes
	call CreateEventA_wrap
	mov dword [hObject], eax
	test eax, eax
	jz loc_4223CE
	push eax
	mov edx, dword [lpEventAttributes]
	push edx
	mov ecx, [edx]
	call dword [ecx+30h]
	test eax, eax
	jnz loc_42249F
	mov esi, 14h
	mov edi, 10h
	mov edx, 20h
	mov ecx, esp
	mov eax, dword [lpEventAttributes]
	mov [esp+8], ebx
	mov [esp+0Ch], ebx
	mov [esp], esi
	push ecx
	mov [esp+8], edi
	mov [esp+14h], edx
	push 1
	mov edx, [eax]
	push eax
	call dword [edx+18h]
	test eax, eax
	jz loc_4224AA

loc_42249F:
	xor eax, eax
	add esp, 14h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4224AA:
	push 20h
	call sub_482360
	push sub_4224D0
	push 20h
	mov dword [dword_4D4C54], eax
	call sub_482270
	jmp loc_42239B
;sub_422380 endp

sub_4224D0: ;SUBROUTINE
	push ebp
	cmp dword [dword_4D4C54], 0
	jnz loc_4224F5

loc_4224DA:
	mov eax, 1
	pop ebp
	ret 18h

loc_4224F5:
	push edi
	push esi
	push ebx
	mov ecx, [esp+28h]
	push ecx
	mov ebx, [esp+28h]
	push ebx
	mov esi, [esp+28h]
	push esi
	mov edi, [esp+28h]
	push edi
	mov ebp, [esp+28h]
	push ebp
	mov eax, [esp+28h]
	push eax
	call dword [dword_4D4C54]
	pop ebx
	pop esi
	pop edi
	jmp loc_4224DA
;sub_4224D0 endp

sub_422530: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_4D4C44]
	test edx, edx
	jnz loc_4225A4
	xor eax, eax
	xor ecx, ecx

loc_422540:
	add eax, 5Ch
	mov dword dword_4E732C[eax], ecx
	mov dword dword_4E7330[eax], ecx
	mov byte byte_4E7334[eax], cl
	add edx, 4
	mov byte byte_4E7335[eax], cl
	mov dword dword_4E7344[edx], ecx
	cmp edx, 40h
	jnz loc_422540
	xor eax, eax

loc_42256B:
	add eax, 4
	xor ecx, ecx
	mov dword dword_4E88BC[eax], ecx
	cmp eax, 78h
	jnz loc_42256B
	push ecx
	push dword_4D4C44
	push 500h
	push ecx ; lpModuleName
	mov dword [dword_4D4C58], ecx
	mov dword [dword_4D4C5C], ecx
	call GetModuleHandleA_wrap
	push eax
	call DirectInputCreateA_wrap
	test eax, eax
	jnz loc_4225A7

loc_4225A4:
	pop edx
	pop ecx
	ret

loc_4225A7:
	push edi
	xor edi, edi
	mov dword [dword_4D4C44], edi
	pop edi
	pop edx
	pop ecx
	ret
;sub_422530 endp

sub_4225C0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, [esp+20h]
	mov ebp, [esp+2Ch]
	mov [esp+8], ax
	mov [esp+0Ch], dl
	xor edx, edx
	test ebx, ebx
	jz loc_422632
	mov edi, [ebx]
	cmp edi, 168h
	jle loc_4227ED
	mov dword [ebx], 168h

loc_4225F1:
	mov eax, [ebx]
	mov [esp], eax
	mov edi, [esp]
	shl eax, 2
	sub eax, edi
	shl eax, 3
	add eax, edi
	shl eax, 2
	mov [ebx], eax
	mov eax, [esp+6]
	sar eax, 10h
	mov [esp], eax
	mov edi, [esp]
	shl eax, 5
	add eax, edi
	shl eax, 2
	mov edi, dword dword_4E79C0[eax]
	cmp edi, [ebx]
	jz loc_422632
	mov ebx, [ebx]
	or dl, 40h
	mov dword dword_4E79C0[eax], ebx

loc_422632:
	test ecx, ecx
	jz loc_42266D
	mov eax, [ecx]
	cmp eax, 0FFFFFFh
	jnz loc_4227FC
	mov dword [ecx], 0FFFFFFFFh

loc_422649:
	mov ebx, [esp+6]
	sar ebx, 10h
	mov eax, ebx
	shl eax, 5
	add eax, ebx
	shl eax, 2
	mov edi, [ecx]
	cmp edi, dword dword_4E7950[eax]
	jz loc_42266D
	or dl, 1
	mov dword dword_4E7950[eax], edi

loc_42266D:
	test esi, esi
	jz loc_4226A3
	cmp dword [esi], 2710h
	jbe loc_42267F
	mov dword [esi], 2710h

loc_42267F:
	mov ecx, [esp+6]
	sar ecx, 10h
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	shl eax, 2
	mov ebx, [esi]
	cmp ebx, dword dword_4E7958[eax]
	jz loc_4226A3
	or dl, 4
	mov dword dword_4E7958[eax], ebx

loc_4226A3:
	mov esi, [esp+24h]
	test esi, esi
	jz loc_422706
	mov ecx, [esp+6]
	sar ecx, 10h
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	mov ebx, dword_4E7948
	shl eax, 2
	add ebx, eax
	mov edi, esi
	add ebx, 34h
	mov ecx, dword dword_4E7974[eax]
	mov esi, ebx
	mov [esp+4], eax
	xor eax, eax
	repe cmpsb
	jz loc_4226DF
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_4226DF:
	test eax, eax
	jz loc_422706
	mov ecx, [esp+4]
	mov esi, [esp+24h]
	mov edi, ebx
	mov ecx, dword dword_4E7974[ecx]
	or dh, 1
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi

loc_422706:
	mov eax, [esp+28h]
	test eax, eax
	jz loc_42273B
	mov bl, [eax]
	cmp bl, 20h
	jge loc_42273B
	movsx eax, bl
	cmp eax, 0FFFFFFFFh
	jnz loc_42282A
	mov ebx, eax

loc_422723:
	mov ecx, [esp+6]
	sar ecx, 10h
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	or dl, 8
	mov dword dword_4E795C[eax*4], ebx

loc_42273B:
	test ebp, ebp
	jz loc_422798
	mov ecx, [esp+6]
	sar ecx, 10h
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	shl eax, 2
	mov ebx, [ebp+0]
	cmp ebx, dword dword_4E79B0[eax]
	jz loc_422839

loc_42275F:
	mov ecx, [esp+6]
	sar ecx, 10h
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	mov ecx, [ebp+0]
	mov dword dword_4E79B0[eax*4], ecx
	mov ecx, [ebp+4]
	mov dword dword_4E79B4[eax*4], ecx
	mov ecx, [ebp+8]
	mov dword dword_4E79B8[eax*4], ecx
	mov ecx, [ebp+0Ch]
	or dl, 80h
	mov dword dword_4E79BC[eax*4], ecx

loc_422798:
	test edx, edx
	jnz loc_42286B
	cmp byte [esp+0Ch], 1
	jnz loc_4227C7
	mov edx, [esp+6]
	sar edx, 10h
	mov eax, edx
	shl eax, 5
	add eax, edx
	mov eax, dword dword_4E79C8[eax*4]
	test eax, eax
	jnz loc_4227C7
	mov eax, edx
	call sub_4229B0

loc_4227C7:
	cmp byte [esp+0Ch], 3
	jnz loc_4227E2
	mov eax, [esp+6]
	sar eax, 10h
	mov eax, dword dword_4E88C0[eax*4]
	push eax
	mov edx, [eax]
	call dword [edx+28h]

loc_4227E2:
	xor eax, eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4227ED:
	test edi, edi
	jge loc_4225F1
	mov [ebx], edx
	jmp loc_4225F1

loc_4227FC:
	cmp eax, 5DCh
	jbe loc_422809
	mov dword [ecx], 5DCh

loc_422809:
	mov ebx, [ecx]
	lea eax, 0[ebx*4]
	sub eax, ebx
	shl eax, 3
	add eax, ebx
	shl eax, 3
	mov ebx, eax
	shl eax, 2
	add eax, ebx
	mov [ecx], eax
	jmp loc_422649

loc_42282A:
	mov ebx, [esp+28h]
	movsx ebx, byte [ebx]
	add ebx, 30h
	jmp loc_422723

loc_422839:
	mov esi, [ebp+4]
	cmp esi, dword dword_4E79B4[eax]
	jnz loc_42275F
	mov edi, [ebp+8]
	cmp edi, dword dword_4E79B8[eax]
	jnz loc_42275F
	mov ecx, [ebp+0Ch]
	cmp ecx, dword dword_4E79BC[eax]
	jnz loc_42275F
	jmp loc_422798

loc_42286B:
	mov eax, [esp+6]
	sar eax, 10h
	push edx
	mov edx, eax
	mov ecx, dword dword_4E88C0[eax*4]
	shl eax, 5
	add eax, edx
	shl eax, 2
	add eax, dword_4E7948
	push eax
	mov ebx, [ecx]
	push ecx
	call dword [ebx+18h]
	mov bh, [esp+0Ch]
	cmp bh, 1
	jnz loc_4228C7

loc_422899:
	mov edx, [esp+6]
	sar edx, 10h
	mov eax, edx
	shl eax, 5
	add eax, edx
	mov eax, dword dword_4E79C8[eax*4]
	test eax, eax
	jnz loc_4228CE
	mov eax, edx
	call sub_4229B0

loc_4228B9:
	mov eax, 1
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4228C7:
	cmp bh, 2
	jz loc_422899
	jmp loc_4228B9

loc_4228CE:
	cmp byte [esp+0Ch], 3
	jnz loc_4228B9
	mov eax, dword dword_4E88C0[edx*4]
	push eax
	mov edx, [eax]
	call dword [edx+28h]
	mov eax, 1
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_4225C0 endp

sub_4228F0: ;SUBROUTINE
	push ecx
	push edx
	cwde
	mov eax, dword dword_4E88C0[eax*4]
	push eax
	mov edx, [eax]
	call dword [edx+2Ch]
	pop edx
	pop ecx
	ret
;sub_4228F0 endp

sub_422910: ;SUBROUTINE
	push edx
	push esi
	cmp al, 10h
	jnz loc_422929
	xor edx, edx

loc_422918:
	movsx eax, dl
	inc edx
	call sub_422910
	cmp edx, 10h
	jl loc_422918
	pop esi
	pop edx
	ret

loc_422929:
	push ecx
	push ebx
	movsx edx, al
	shl edx, 2
	cmp dword dword_4E7348[edx], 0
	jnz loc_422957

loc_42293A:
	xor edx, edx
	pop ebx
	pop ecx

loc_42293E:
	add edx, 84h
	xor esi, esi
	mov dword dword_4E7944[edx], esi
	cmp edx, 0F78h
	jnz loc_42293E
	pop esi
	pop edx
	ret

loc_422957:
	movsx ecx, al
	mov eax, 1
	mov ebx, dword [dword_4D4C58]
	shl eax, cl
	test eax, ebx
	jz loc_42293A
	push 2
	mov eax, dword dword_4E7348[edx]
	push eax
	mov edx, [eax]
	call dword [edx+58h]
	jmp loc_42293A
;sub_422910 endp

sub_422980: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	movsx ebx, ax
	mov eax, dword dword_4E88C0[ebx*4]
	push eax
	mov edx, [eax]
	call dword [edx+20h]
	mov eax, ebx
	shl eax, 5
	mov edx, ebx
	add eax, ebx
	xor edx, ebx
	mov dword dword_4E79C8[eax*4], edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_422980 endp

sub_4229B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push 0
	movsx ebx, ax
	push 1
	mov eax, dword dword_4E88C0[ebx*4]
	push eax
	mov edx, [eax]
	call dword [edx+1Ch]
	mov ecx, eax
	mov eax, ebx
	shl eax, 5
	add eax, ebx
	shl eax, 2
	test ecx, ecx
	jnz loc_4229E5
	mov dword dword_4E79C8[eax], 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_4229E5:
	xor edx, edx
	mov dword dword_4E79C8[eax], edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4229B0 endp

off_422A00: dd loc_422BCA
	dd loc_422CCC ; jump table for switch statement
	dd loc_422CDB
	dd loc_422CEA
	dd loc_422CEA
	dd loc_422CEA
	dd loc_422CEA
	dd loc_422CEA
	dd loc_422D07
	dd loc_422D24
	dd loc_422D07
	dd loc_422D07
	dd loc_422D07

sub_422A34: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov bl, al
	cmp dword [dword_4D4C60], 1Eh
	jge loc_422C1D
	movsx eax, al
	cmp dword dword_4E7348[eax*4], 0
	jz loc_422C1D
	mov eax, 1
	movsx ecx, bl
	mov edi, dword [dword_4D4C58]
	shl eax, cl
	test eax, edi
	jz loc_422C1D
	mov ebp, [edx+34h]
	cmp ebp, 0FFFFFFh
	jnz loc_422C28
	mov ecx, 0FFFFFFFFh

loc_422A85:
	mov esi, dword [dword_4D4C60]
	mov eax, esi
	shl eax, 5
	add eax, esi
	mov dword dword_4E7950[eax*4], ecx
	mov ecx, [edx+38h]
	mov dword dword_4E7958[eax*4], ecx
	mov eax, [edx+3Ah]
	sar eax, 18h
	cmp eax, 0FFFFFFFFh
	jnz loc_422C45
	mov esi, eax

loc_422AB4:
	mov eax, dword [dword_4D4C60]
	mov ecx, eax
	shl ecx, 5
	add ecx, eax
	shl ecx, 2
	mov dword dword_4E795C[ecx], esi
	mov eax, [edx+40h]
	mov dword dword_4E7960[ecx], eax
	mov esi, [edx+44h]
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 3
	add eax, esi
	shl eax, 2
	mov dword dword_4E79C0[ecx], eax
	cmp byte [edx+3Ch], 0
	jnz loc_422C53

loc_422AF6:
	mov ecx, dword [dword_4D4C60]
	mov eax, ecx
	shl eax, 5
	mov ebp, 1
	add eax, ecx
	xor esi, esi
	mov ecx, dword_4E7340
	mov dword dword_4E7964[eax*4], ebp
	mov dword [dword_4E7340], esi
	mov dword dword_4E7968[eax*4], ecx

loc_422B23:
	mov ecx, dword [dword_4D4C60]
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	mov edi, dword_4E7948
	shl eax, 2
	lea esi, [edx+4]
	add edi, eax
	mov ecx, 30h
	add edi, 34h
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, dword [dword_4D4C60]
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	shl eax, 2
	xor ecx, ecx
	mov ebp, 22h
	mov dword dword_4E7954[eax], ecx
	mov ecx, dword_4E7948
	mov edi, 34h
	add ecx, eax
	mov dword dword_4E7948[eax], edi
	lea esi, [ecx+edi]
	mov dword dword_4E794C[eax], ebp
	add ecx, 78h
	mov dword dword_4E7978[eax], esi
	xor edi, edi
	mov dword dword_4E796C[eax], ecx
	mov dword dword_4E79C4[eax], edi
	mov dword dword_4E7970[eax], edi
	mov dword dword_4E7978[eax], esi
	mov dword dword_4E79C8[eax], edi
	mov cl, [edx]
	cmp cl, 0Ch
	ja loc_422C1D
	and ecx, 0FFh ; switch 13 cases
	jmp off_422A00[ecx*4] ; switch jump

loc_422BCA:
	mov dword dword_4E7974[eax], 4 ; jumptable 00422BC3 case 0

loc_422BD4:
	movsx eax, bl
	mov esi, dword dword_4E7348[eax*4]
	mov eax, dword [dword_4D4C60]
	shl eax, 2
	push 0
	add eax, dword_4E88C0
	mov ecx, dword [dword_4D4C60]
	push eax
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	shl eax, 2
	add eax, dword_4E7948
	push eax
	movsx eax, byte [edx]
	mov ebp, dword off_421560[eax*4]
	push ebp
	mov edi, [esi]
	push esi
	call dword [edi+48h]
	test eax, eax
	jz loc_422D33

loc_422C1D:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_422C28:
	lea eax, 0[ebp*4]
	sub eax, ebp
	shl eax, 3
	add eax, ebp
	shl eax, 3
	mov ecx, eax
	shl eax, 2
	add ecx, eax
	jmp loc_422A85

loc_422C45:
	mov esi, [edx+3Ah]
	sar esi, 18h
	add esi, 30h
	jmp loc_422AB4

loc_422C53:
	movsx esi, bl
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 3
	sub eax, esi
	test byte byte_4E7390[eax*4], 2
	jnz loc_422AF6
	cmp byte [edx+3Ch], 1
	jnz loc_422C9E
	mov esi, dword_4E7340
	mov edi, 4
	mov eax, 1
	mov dword dword_4E7968[ecx], esi
	mov dword [dword_4E7340], edi
	mov dword dword_4E7964[ecx], eax
	jmp loc_422B23

loc_422C9E:
	mov esi, dword_4E7340
	mov ebp, 4
	xor edi, edi
	mov eax, 2
	mov dword [dword_4E7340], edi
	mov dword dword_4E7968[ecx], esi
	mov dword [dword_4E7344], ebp
	mov dword dword_4E7964[ecx], eax
	jmp loc_422B23

loc_422CCC:
	mov dword dword_4E7974[eax], 8 ; jumptable 00422BC3 case 1
	jmp loc_422BD4

loc_422CDB:
	mov dword dword_4E7974[eax], 10h ; jumptable 00422BC3 case 2
	jmp loc_422BD4

loc_422CEA:
	mov ecx, dword [dword_4D4C60] ; jumptable 00422BC3 cases 3-7
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	mov dword dword_4E7974[eax*4], 10h
	jmp loc_422BD4

loc_422D07:
	mov ecx, dword [dword_4D4C60] ; jumptable 00422BC3 cases 8,10-12
	mov eax, ecx
	shl eax, 5
	add eax, ecx
	mov dword dword_4E7974[eax*4], 18h
	jmp loc_422BD4

loc_422D24:
	mov dword dword_4E7974[eax], 30h ; jumptable 00422BC3 case 9
	jmp loc_422BD4

loc_422D33:
	mov ax, word [dword_4D4C60]
	cwde
	mov eax, dword dword_4E88C0[eax*4]
	push eax
	mov edx, [eax]
	call dword [edx+2Ch]
	mov eax, dword [dword_4D4C60]
	lea edx, [eax+1]
	mov dword [dword_4D4C60], edx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_422A34 endp

sub_422D60: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp+14h], al
	mov esi, edx
	cmp al, 10h
	jnz loc_422D8D
	xor ebx, ebx

loc_422D74:
	movsx eax, bl
	mov edx, esi
	inc ebx
	call sub_422D60
	cmp ebx, 10h
	jl loc_422D74

loc_422D84:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_422D8D:
	mov ecx, [esp+11h]
	mov eax, 1
	sar ecx, 18h
	mov edx, dword [dword_4D4C58]
	shl eax, cl
	test eax, edx
	jz loc_422E47

loc_422DA9:
	mov edi, 10h
	mov ebx, 14h
	xor ebp, ebp
	mov [esp+4], edi
	mov [esp+8], ebp
	mov [esp+0Ch], ebp
	mov [esp], ebx
	cmp esi, 64h
	jle loc_422E65
	mov dword [esp+10h], 2710h

loc_422DD5:
	mov esi, dword [dword_4D4C60]
	xor ebx, ebx
	test esi, esi
	jle loc_422DFC

loc_422DE1:
	movsx eax, bx
	mov eax, dword dword_4E88C0[eax*4]
	push eax
	mov esi, [eax]
	inc ebx
	call dword [esi+2Ch]
	cmp ebx, dword [dword_4D4C60]
	jl loc_422DE1

loc_422DFC:
	mov ecx, esp
	mov eax, [esp+11h]
	push ecx
	sar eax, 18h
	push 7
	mov eax, dword dword_4E7348[eax*4]
	push eax
	mov ebx, [eax]
	call dword [ebx+18h]
	mov ebp, dword [dword_4D4C60]
	xor ebx, ebx
	test ebp, ebp
	jle loc_422D84

loc_422E25:
	movsx eax, bx
	mov eax, dword dword_4E88C0[eax*4]
	push eax
	mov esi, [eax]
	inc ebx
	call dword [esi+28h]
	cmp ebx, dword [dword_4D4C60]
	jl loc_422E25
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_422E47:
	mov eax, [esp+11h]
	sar eax, 18h
	cmp dword dword_4E7348[eax*4], 0
	jnz loc_422DA9
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_422E65:
	test esi, esi
	jl loc_422E83
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 3
	add eax, esi
	shl eax, 2
	mov [esp+10h], eax
	jmp loc_422DD5

loc_422E83:
	mov [esp+10h], ebp
	jmp loc_422DD5
;sub_422D60 endp

sub_422E90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp al, 10h
	jnz loc_422EAC
	xor edx, edx

loc_422E99:
	movsx eax, dl
	inc edx
	call sub_422E90
	cmp edx, 10h
	jl loc_422E99
	nop

loc_422EA8:
	pop edx
	pop ecx
	pop ebx
	ret

loc_422EAC:
	movsx edx, al
	shl edx, 2
	cmp dword dword_4E7348[edx], 0
	jz loc_422EA8
	movsx ecx, al
	mov eax, 1
	mov ebx, dword [dword_4D4C58]
	shl eax, cl
	test eax, ebx
	jz loc_422EA8
	push 20h
	mov eax, dword dword_4E7348[edx]
	push eax
	mov edx, [eax]
	call dword [edx+58h]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_422E90 endp

sub_422EF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	cmp al, 10h
	jnz loc_422F19
	xor ecx, ecx

loc_422EFA:
	movsx edx, cl
	mov eax, edx
	call sub_422910
	mov eax, edx
	inc ecx
	call sub_422EF0
	cmp ecx, 10h
	jl loc_422EFA

loc_422F14:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_422F19:
	movsx edx, al
	lea ebx, 0[edx*4]
	cmp dword dword_4E7348[ebx], 0
	jz loc_422F14
	movsx ecx, al
	mov eax, 1
	mov esi, dword [dword_4D4C58]
	shl eax, cl
	test eax, esi
	jz loc_422F14
	mov eax, edx
	call sub_422910
	push 10h
	mov edx, dword dword_4E7348[ebx]
	push edx
	mov eax, [edx]
	call dword [eax+58h]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_422EF0 endp

sub_422F60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp al, 10h
	jnz loc_422F7C
	xor edx, edx

loc_422F69:
	movsx eax, dl
	inc edx
	call sub_422F60
	cmp edx, 10h
	jl loc_422F69
	nop

loc_422F78:
	pop edx
	pop ecx
	pop ebx
	ret

loc_422F7C:
	movsx edx, al
	shl edx, 2
	cmp dword dword_4E7348[edx], 0
	jz loc_422F78
	movsx ecx, al
	mov eax, 1
	mov ebx, dword [dword_4D4C58]
	shl eax, cl
	test eax, ebx
	jz loc_422F78
	push 8
	mov eax, dword dword_4E7348[edx]
	push eax
	mov edx, [eax]
	call dword [edx+58h]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_422F60 endp

sub_422FC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp al, 10h
	jnz loc_422FDC
	xor edx, edx

loc_422FC9:
	movsx eax, dl
	inc edx
	call sub_422FC0
	cmp edx, 10h
	jl loc_422FC9
	nop

loc_422FD8:
	pop edx
	pop ecx
	pop ebx
	ret

loc_422FDC:
	movsx edx, al
	shl edx, 2
	cmp dword dword_4E7348[edx], 0
	jz loc_422FD8
	movsx ecx, al
	mov eax, 1
	mov ebx, dword [dword_4D4C58]
	shl eax, cl
	test eax, ebx
	jz loc_422FD8
	push 4
	mov eax, dword dword_4E7348[edx]
	push eax
	mov edx, [eax]
	call dword [edx+58h]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_422FC0 endp

sub_423020: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	cmp dword [dword_4D4C5C], 0
	jz loc_423076

loc_42302F:
	cmp dword [dword_4D4C58], 0
	jz loc_42306A
	xor esi, esi
	xor ebx, ebx

loc_42303C:
	mov edi, dword dword_4E7348[esi]
	test edi, edi
	jz loc_423061
	mov eax, 1
	mov cl, bl
	mov ebp, dword [dword_4D4C58]
	shl eax, cl
	test eax, ebp
	jz loc_423061
	push 1
	mov edx, [edi]
	push edi
	call dword [edx+58h]

loc_423061:
	inc ebx
	add esi, 4
	cmp ebx, 10h
	jl loc_42303C

loc_42306A:
	mov eax, dword [dword_4D4C58]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423076:
	call sub_421F10
	jmp loc_42302F
;sub_423020 endp

;	Attributes: thunk

sub_423080: ;SUBROUTINE
	jmp sub_422380
;sub_423080 endp

sub_4230A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edx, eax
	shl edx, 5
	add edx, eax
	shl edx, 2
	mov ebx, dword [dword_4D4C6C]
	add edx, eax
	mov ecx, [ebx]
	shl edx, 2
	cmp ecx, 1
	jnz loc_423162
	mov ebx, dword [dword_4D4C68]
	mov esi, [ebx+10h]
	mov edi, [edx+ebx+34h]
	add esi, ecx
	lea edx, [edi+esi]
	mov ecx, esi
	cmp edx, esi
	jle loc_4230E6
	mov ecx, [ebx]
	sub ecx, edi
	inc ecx

loc_4230E6:
	mov edx, eax
	shl edx, 5
	add edx, eax
	mov ebp, dword [dword_4D4C6C]
	shl edx, 2
	mov ebx, dword [dword_4D4C68]
	add edx, eax
	add ebp, 4
	shl edx, 2
	lea eax, [ebx+28h]
	mov [esp+4], edx
	add eax, edx
	mov ebx, ecx
	add eax, 18h
	mov edx, ebp
	add eax, edi
	call sub_48A980
	cmp ecx, esi
	jl loc_42312E

loc_42311F:
	mov eax, dword [dword_4D4C6C]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42312E:
	mov eax, dword [dword_4D4C6C]
	add eax, 4
	lea edx, [eax+ecx]
	mov ebx, esi
	mov eax, dword [dword_4D4C68]
	mov esi, [esp+4]
	add eax, 28h
	add eax, esi
	sub ebx, ecx
	add eax, 18h
	call sub_48A980
	mov eax, dword [dword_4D4C6C]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423162:
	mov eax, dword [dword_4D4C68]
	mov [esp+8], edx
	xor ebp, ebp
	xor ecx, ecx
	mov ebx, [edx+eax+28h]

loc_423173:
	mov esi, dword [dword_4D4C6C]
	cmp ebp, [esi]
	jge loc_42311F
	mov edi, dword [dword_4D4C68]
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv dword [edi+4]
	imul edx, 34h
	mov eax, [esp+8]
	mov [esp], edx
	lea edx, [edi+28h]
	add edx, eax
	mov edi, [esp]
	add edx, 0Ch
	add edx, edi
	add esi, 4
	add edx, 0Ch
	lea edi, [esi+ecx]
	inc ebp
	mov esi, edx
	inc ebx
	push edi

loc_4231B2:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4231CA
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4231B2

loc_4231CA:
	pop edi
	add ecx, 26h
	jmp loc_423173
;sub_4230A0 endp

sub_4231D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, dword [dword_4D4C68]
	mov edi, eax
	cmp dword [dword_4D4C70], 0
	jz loc_42326C
	shl eax, 5
	add eax, edi
	shl eax, 2
	add eax, edi
	lea ecx, [esi+28h]
	shl eax, 2
	add ecx, eax
	mov eax, [ecx+8]
	cmp eax, [ecx+4]
	jz loc_423211

loc_423204:
	imul edx, eax, 34h
	mov ebx, [ecx+edx+14h]
	cmp ebx, [ecx+edx+10h]
	jz loc_423270

loc_423211:
	lea edx, 0[eax*4]
	sub edx, eax
	shl edx, 2
	add edx, eax
	lea ebx, [ecx+0Ch]
	shl edx, 2
	add edx, ebx
	mov ebx, [edx+8]
	cmp ebx, [edx+4]
	jz loc_42326C
	dec ebx
	mov [edx+8], ebx
	test ebx, ebx
	jl loc_423282

loc_423237:
	mov [ecx+8], eax
	add edx, [edx+8]
	mov byte [edx+0Ch], 0
	mov edx, [esi+20h]
	mov dword [dword_4D4C68], esi
	test edx, edx
	jz loc_423255
	mov eax, edi

loc_423255:
	mov eax, 1
	mov esi, dword [dword_4D4C68]

loc_423260:
	mov dword [dword_4D4C68], esi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42326C:
	xor eax, eax
	jmp loc_423260

loc_423270:
	dec eax
	test eax, eax
	jl loc_42327C

loc_423275:
	cmp eax, [ecx+4]
	jnz loc_423204
	jmp loc_423211

loc_42327C:
	mov eax, [esi+4]
	dec eax
	jmp loc_423275

loc_423282:
	mov ebx, [esi]
	mov [edx+8], ebx
	jmp loc_423237
;sub_4231D0 endp

sub_423290: ;SUBROUTINE
	push ebx
	push ebp
	sub esp, 4
	mov ebx, eax
	mov [esp], dl
	cmp dword [dword_4D4C70], 0
	jz loc_423341
	push edi
	push esi
	push ecx
	mov ebp, eax
	shl ebp, 5
	add ebp, eax
	shl ebp, 2
	add ebp, eax
	mov esi, dword [dword_4D4C68]
	shl ebp, 2
	lea edi, [esi+ebp]
	mov edx, [edi+30h]
	lea ecx, 0[edx*4]
	sub ecx, edx
	lea eax, [esi+28h]
	shl ecx, 2
	add eax, ebp
	add ecx, edx
	add eax, 0Ch
	shl ecx, 2
	add ecx, eax
	mov eax, [ecx+8]
	lea edx, [eax+1]
	mov [ecx+8], edx
	mov dl, [esp+0Ch]
	mov [ecx+eax+0Ch], dl
	cmp dword [esi+0Ch], 1
	jnz loc_423345
	mov ebx, [esi]
	cmp ebx, [ecx+8]
	jge loc_423305
	mov dword [ecx+8], 0

loc_423305:
	mov esi, [ecx+4]
	cmp esi, [ecx+8]
	jnz loc_423327
	lea edi, [esi+1]
	mov eax, dword [dword_4D4C68]
	mov [ecx+4], edi
	mov edx, edi
	mov ebx, [eax]
	sar edx, 1Fh
	inc ebx
	mov eax, edi
	idiv ebx
	mov [ecx+4], edx

loc_423327:
	mov eax, [ecx+4]
	mov [ecx], eax

loc_42332C:
	add ecx, [ecx+8]
	mov eax, 1
	mov byte [ecx+0Ch], 0
	pop ecx
	pop esi
	pop edi

loc_42333B:
	add esp, 4
	pop ebp
	pop ebx
	ret

loc_423341:
	xor eax, eax
	jmp loc_42333B

loc_423345:
	mov edx, [esi]
	cmp edx, [ecx+8]
	jnz loc_42338D
	mov eax, [edi+30h]
	inc eax
	mov edx, eax
	mov [edi+30h], eax
	sar edx, 1Fh
	idiv dword [esi+4]
	mov eax, ebx
	mov [edi+30h], edx
	call sub_4233D0
	mov edi, dword [dword_4D4C68]
	lea esi, [edi+ebp]
	mov eax, [esi+30h]
	mov edx, [esi+2Ch]
	cmp eax, edx
	jnz loc_42338D
	lea ebp, [edx+1]
	mov edx, ebp
	mov eax, ebp
	mov [esi+2Ch], ebp
	sar edx, 1Fh
	mov ebp, [edi+4]
	idiv ebp
	mov [esi+2Ch], edx

loc_42338D:
	mov eax, dword [dword_4D4C68]
	cmp dword [eax+20h], 0
	jz loc_42339F
	mov eax, ebx

loc_42339F:
	mov eax, ebx
	shl eax, 5
	add eax, ebx
	shl eax, 2
	add eax, ebx
	mov edx, dword [dword_4D4C68]
	shl eax, 2
	add eax, edx
	mov edx, [eax+2Ch]
	mov [eax+28h], edx
	jmp loc_42332C
;sub_423290 endp

sub_4233D0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, edx
	mov edx, eax
	shl eax, 5
	add eax, edx
	shl eax, 2
	add eax, edx
	mov ebx, dword [dword_4D4C68]
	shl eax, 2
	lea edx, [ebx+28h]
	lea ebx, [edx+eax]
	mov edx, ecx
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	add eax, edx
	lea edx, [ebx+0Ch]
	mov dword [edx+eax*4], 0
	mov dword [edx+eax*4+4], 0
	mov dword [edx+eax*4+8], 0
	mov byte [edx+eax*4+0Ch], 0
	pop ecx
	pop ebx
	ret
;sub_4233D0 endp

sub_423430: ;SUBROUTINE
	push ebx
	push esi
	mov ebx, eax
	mov esi, dword [dword_4D4C70]
	test esi, esi
	jz loc_423480
	push edx
	push ecx
	xor edx, edx
	xor ecx, ecx
	mov dword [dword_4D4C70], edx

loc_42344A:
	mov eax, dword [dword_4D4C68]
	cmp ecx, [eax+4]
	jl loc_423483
	mov ecx, ebx
	shl ecx, 5
	add ecx, ebx
	shl ecx, 2
	add ecx, ebx
	mov dword [eax+ecx*4+28h], 0
	mov dword [eax+ecx*4+2Ch], 0
	mov dword [eax+ecx*4+30h], 0
	mov dword [dword_4D4C70], esi
	pop ecx
	pop edx

loc_423480:
	pop esi
	pop ebx
	ret

loc_423483:
	mov edx, ecx
	mov eax, ebx
	call sub_4233D0
	inc ecx
	jmp loc_42344A
;sub_423430 endp

sub_423490: ;SUBROUTINE
	push edx
	xor edx, edx
	mov eax, dword [dword_4D4C68]
	cmp edx, [eax+8]
	jl loc_42349F
	pop edx
	ret

loc_42349F:
	mov eax, edx
	call sub_423430
	inc edx
	mov eax, dword [dword_4D4C68]
	cmp edx, [eax+8]
	jl loc_42349F
	pop edx
	ret
;sub_423490 endp

sub_4234C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	xor edx, edx
	mov ecx, dword [dword_4D4C68]
	mov dword [dword_4D4C70], edx
	test ecx, ecx
	jnz loc_4234F3

loc_4234D6:
	mov ebx, dword [dword_4D4C6C]
	test ebx, ebx
	jnz loc_4234FC
	xor esi, esi
	mov dword [dword_4D4C68], esi
	mov dword [dword_4D4C6C], esi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4234F3:
	mov eax, ecx
	call sub_4848FC
	jmp loc_4234D6

loc_4234FC:
	mov eax, ebx
	call sub_4848FC
	xor esi, esi
	mov dword [dword_4D4C68], esi
	mov dword [dword_4D4C6C], esi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4234C0 endp

sub_423520: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [dword_4D4C68], 0
	jnz loc_423632

loc_423535:
	mov edi, [ecx+8]
	mov ebp, [ecx+0Ch]
	mov esi, [ecx+4]
	test ebp, ebp
	jz loc_42354D
	cmp esi, 1
	jle loc_42365A
	add esi, ebp

loc_42354D:
	mov ebx, aCNfs2seFron_12 ; "c:\\nfs2se\\frontend\\pc\\editor.c"
	mov ebp, 74h
	mov edx, 10C8h
	mov eax, aEdit ; "edit"
	mov dword [dword_4DB1D8], ebx
	mov ebx, 20h
	mov dword [dword_4DB1DC], ebp
	call sub_484498
	mov dword [dword_4D4C68], eax
	test eax, eax
	jnz loc_4235A7
	push 10C8h
	mov eax, aCNfs2seFron_12 ; "c:\\nfs2se\\frontend\\pc\\editor.c"
	mov edx, 76h
	push aOutOfMemoryReq ; "Out of Memory, requested (%d)\n"
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], edx
	call sub_4840F0
	add esp, 8

loc_4235A7:
	mov edx, 10C8h
	mov eax, dword [dword_4D4C68]
	mov ebx, 20h
	call sub_48A01C
	mov edx, dword [dword_4D4C68]
	mov eax, ecx
	add edx, 8
	call sub_48A980
	mov eax, dword [dword_4D4C68]
	mov ebx, aCNfs2seFron_12 ; "c:\\nfs2se\\frontend\\pc\\editor.c"
	mov edx, 180h
	mov [eax+4], esi
	mov dword [dword_4DB1D8], ebx
	mov [eax], edi
	mov esi, 80h
	mov ebx, 20h
	mov eax, aEdittext ; "edittext"
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov dword [dword_4D4C6C], eax
	test eax, eax
	jz loc_423661

loc_423608:
	mov edx, 180h
	mov eax, dword [dword_4D4C6C]
	call sub_48A01C
	mov eax, dword [dword_4D4C6C]
	mov edx, [ecx+4]
	mov [eax], edx
	mov dword [dword_4D4C70], 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423632:
	mov ebx, aCNfs2seFron_12 ; "c:\\nfs2se\\frontend\\pc\\editor.c"
	mov esi, 5Fh
	push aEditorAlreadyO ; "Editor already open - "
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 4
	jmp loc_423535

loc_42365A:
	add edi, ebp
	jmp loc_42354D

loc_423661:
	push 180h
	mov edi, aCNfs2seFron_12 ; "c:\\nfs2se\\frontend\\pc\\editor.c"
	mov ebp, 82h
	push aOutOfMemoryReq ; "Out of Memory, requested (%d)\n"
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], ebp
	call sub_4840F0
	add esp, 8
	jmp loc_423608
;sub_423520 endp

sub_423690: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 900h
	mov edx, esp
	mov eax, a_num ; "*.num"
	xor ebx, ebx
	call sub_4099A0
	xor edx, edx
	call sub_401090
	mov edx, eax
	shl eax, 3
	mov ecx, esp
	add eax, edx
	add ecx, eax
	push ecx
	mov ebx, dword [dword_5134C0]
	push ebx
	push aSS_num ; "%s%s.num"
	lea eax, [esp+8D8h]
	push eax
	call sprintf_
	add esp, 10h
	cmp edx, 0FFFFFFFFh
	jnz loc_4236E5

loc_4236DB:
	add esp, 900h
	pop edx
	pop ecx
	pop ebx
	ret

loc_4236E5:
	push 2F7h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_4236DB
	lea eax, [esp+8CCh]
	call sub_4879AE
	mov eax, 2F8h
	mov edx, word_512F86
	call sub_402CD0
	mov eax, ecx
	call strcmp_
	test eax, eax
	jnz loc_4236DB
	push edi
	push esi
	mov esi, dword_4C9BA4
	mov edi, byte_512F5E
	push edi

loc_42372B:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_423743
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_42372B

loc_423743:
	pop edi
	pop esi
	pop edi
	add esp, 900h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_423690 endp

sub_423750: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 0A74h
	mov eax, 2EAh
	mov edx, esp
	call sub_41B710
	mov ebx, eax
	mov eax, a_num ; "*.num"
	call sub_4099A0
	xor edx, edx
	call sub_401090
	cmp eax, 0FFFFFFFFh
	jz loc_4237B6
	test eax, eax
	jnz loc_423917
	mov ecx, 1
	mov ebx, 14h
	xor ah, ah
	mov edx, 2EBh
	mov [esp+9D4h], ah
	mov [esp+0A24h], ah
	lea eax, [esp+0A24h]
	call sub_402460
	test eax, eax
	jnz loc_4237C2

loc_4237B6:
	add esp, 0A74h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4237C2:
	mov ecx, 2
	mov ebx, 8
	xor dh, dh
	lea eax, [esp+9D4h]
	mov [esp+9D4h], dh
	mov edx, 2E7h
	call sub_402460
	test eax, eax
	jz loc_4237B6
	lea eax, [esp+9D4h]
	push eax
	mov ecx, dword [dword_5134C0]
	push ecx
	push aSS_num ; "%s%s.num"
	lea eax, [esp+8E0h]
	push eax
	call sprintf_
	add esp, 10h
	lea eax, [esp+8D4h]
	call sub_488570
	test eax, eax
	jz loc_4238AC
	push 2F9h
	push 1
	call sub_401AE0
	add esp, 8
	test eax, eax
	jz loc_4237B6
	lea eax, [esp+8D4h]
	lea edx, [esp+0A24h]
	lea esi, [esp+0A24h]
	call sub_4879AE
	lea eax, [esp+8D4h]
	mov edi, byte_512F5E
	call sub_4239F0
	push edi

loc_423861:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_423879
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_423861

loc_423879:
	pop edi
	lea esi, [esp+9D4h]
	mov edi, word_512F86
	push edi

loc_423887:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_42389F
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_423887

loc_42389F:
	pop edi
	add esp, 0A74h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4238AC:
	lea edx, [esp+0A24h]
	lea eax, [esp+8D4h]
	lea esi, [esp+0A24h]
	mov edi, byte_512F5E
	call sub_4239F0
	push edi

loc_4238CC:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4238E4
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4238CC

loc_4238E4:
	pop edi
	lea esi, [esp+9D4h]
	mov edi, word_512F86
	push edi

loc_4238F2:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_42390A
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4238F2

loc_42390A:
	pop edi
	add esp, 0A74h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423917:
	mov edx, eax
	shl eax, 3
	mov ecx, esp
	add eax, edx
	add ecx, eax
	push ecx
	mov edx, dword [dword_5134C0]
	push edx
	push aSS_num ; "%s%s.num"
	lea eax, [esp+8E0h]
	push eax
	lea esi, [esp+0A34h]
	lea edx, [esp+0A34h]
	call sprintf_
	add esp, 10h
	lea eax, [esp+8D4h]
	mov edi, byte_512F5E
	call sub_4239B0
	push edi

loc_42395F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_423977
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_42395F

loc_423977:
	pop edi
	mov edi, word_512F86
	mov esi, ecx
	push edi

loc_423980:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_423998
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_423980

loc_423998:
	pop edi
	add esp, 0A74h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_423750 endp

sub_4239B0: ;SUBROUTINE
	push edi
	mov edi, edx
	xor edx, edx
	call sub_486F40
	mov edx, eax
	test eax, eax
	jnz loc_4239C2
	pop edi
	ret

loc_4239C2:
	push esi
	mov esi, eax
	push edi

loc_4239C6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4239DE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4239C6

loc_4239DE:
	pop edi
	mov eax, edx
	call sub_4848FC
	pop esi
	pop edi
	ret
;sub_4239B0 endp

sub_4239F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	lea ebx, [ecx+1]
	mov eax, esi
	call sub_4875B0
	test eax, eax
	jz loc_423A15
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_423A15:
	mov eax, 2F3h
	call sub_402CD0
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4239F0 endp

sub_423B70: ;SUBROUTINE
	mov eax, dword [dword_4E8960]
	ret
;sub_423B70 endp

sub_423B90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, dword_4D4C80
	mov edx, dword_4D4C7C
	mov eax, dword_4D4C84
	call sub_422060
	cmp dword [dword_4E8AF8], 0
	jz loc_423BCC
	mov ecx, dword [dword_4D4C7C]
	cmp ecx, dword [dword_4E8B00]
	jnz loc_423BE4
	mov ebx, dword [dword_4D4C80]
	cmp ebx, dword [dword_4E8B04]
	jnz loc_423BE4

loc_423BCC:
	mov eax, dword [dword_4D4C7C]
	mov dword [dword_4E8B00], eax
	mov eax, dword [dword_4D4C80]
	mov dword [dword_4E8B04], eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_423BE4:
	push 2
	call sub_497680
	call sub_49769C
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0
	call sub_4976B8
	jmp loc_423BCC
;sub_423B90 endp

sub_423C40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov edx, dword [dword_4D4C78]
	test edx, edx
	jnz loc_423C7A

loc_423C4F:
	mov ebx, dword [dword_4E8AF8]
	test ebx, ebx
	jz loc_423C6A
	push esi
	mov eax, ebx
	xor esi, esi
	call sub_482DA0
	mov dword [dword_4E8AF8], esi
	pop esi

loc_423C6A:
	mov edi, dword [dword_4E8AFC]
	test edi, edi
	jnz loc_423C8B
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423C7A:
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D4C78], ecx
	jmp loc_423C4F

loc_423C8B:
	mov eax, edi
	xor ebp, ebp
	call sub_482DA0
	mov dword [dword_4E8AFC], ebp
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_423C40 endp

sub_423CA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, dword [dword_4D4C7C]
	mov esi, dword [dword_4D4C80]
	mov di, word [word_4E8C06]
	mov ebp, eax
	xor eax, eax
	xor ecx, ecx

loc_423CBF:
	movsx edx, di
	cmp ecx, edx
	jge loc_423D79
	mov edx, dword dword_4E8AA6[eax]
	sar edx, 10h
	cmp esi, edx
	jg loc_423CDD

loc_423CD7:
	inc ecx
	add eax, 2
	jmp loc_423CBF

loc_423CDD:
	mov edx, dword (dword_4E8964+2)[eax]
	sar edx, 10h
	cmp esi, edx
	jge loc_423CD7
	mov edx, dword dword_4E8A56[eax]
	sar edx, 10h
	cmp ebx, edx
	jle loc_423CD7
	mov edx, dword dword_4E8A06[eax]
	sar edx, 10h
	cmp ebx, edx
	jge loc_423CD7
	mov dword [dword_4D4C7C], ebx
	mov dword [dword_4D4C80], esi
	mov word [word_4E8C06], di
	mov edx, [ebp+8]
	mov eax, dword dword_4E89B6[eax]
	sar edx, 10h
	sar eax, 10h
	cmp eax, edx
	jz loc_423D39
	mov eax, [ebp+eax*4+0Ch]
	cmp byte [eax], 2
	jnz loc_423D4A
	test byte [eax+8], 1
	jz loc_423D4A

loc_423D39:
	xor ecx, ecx
	mov ebx, dword [dword_4D4C7C]
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423D4A:
	mov edx, 2Dh
	mov eax, 1
	call sub_4423F0
	mov ax, word (dword_4E89B6+2)[ecx*2]
	mov ecx, 1
	mov [ebp+0Ah], ax
	mov ebx, dword [dword_4D4C7C]
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423D79:
	cmp word [ebp+0Ah], 64h
	jz loc_423D91
	mov eax, [ebp+8]
	sar eax, 10h
	mov word [ebp+0Ah], 64h
	mov dword [dword_4E8B08], eax

loc_423D91:
	mov dword [dword_4D4C7C], ebx
	mov dword [dword_4D4C80], esi
	mov word [word_4E8C06], di
	xor ecx, ecx
	mov ebx, dword [dword_4D4C7C]
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_423CA0 endp

sub_423DC0: ;SUBROUTINE
	push esi
	push ebp
	mov esi, dword [dword_4D4C80]
	cmp edx, esi
	jge loc_423DEA
	add edx, ecx
	cmp edx, esi
	jle loc_423DEA
	mov ebp, dword [dword_4D4C7C]
	cmp eax, ebp
	jge loc_423DEA
	add eax, ebx
	cmp eax, ebp
	jle loc_423DEA
	mov eax, 1
	pop ebp
	pop esi
	ret

loc_423DEA:
	xor eax, eax
	pop ebp
	pop esi
	ret
;sub_423DC0 endp

sub_423DF0: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov edx, dword [dword_4D4C80]
	cmp eax, edx
	jle loc_423E04
	mov eax, 0FFFFFFFFh
	pop ecx
	ret

loc_423E04:
	sub edx, eax
	dec edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	pop ecx
	ret
;sub_423DF0 endp

sub_423E10: ;SUBROUTINE
	push ebx
	push edx
	mov edx, [eax+8]
	sar edx, 10h
	mov edx, [eax+edx*4+0Ch]
	cmp byte [edx], 2
	jz loc_423E34

loc_423E21:
	mov edx, dword [dword_4D4C80]
	mov eax, dword [dword_4D4C7C]
	call sub_4222F0
	pop edx
	pop ebx
	ret

loc_423E34:
	mov eax, [edx]
	sar eax, 10h
	call sub_41B670
	add eax, 3
	mov dword [dword_4D4C7C], eax
	mov eax, [edx]
	sar eax, 10h
	call sub_41B650
	add eax, 0Dh
	mov bl, [edx+9]
	mov dword [dword_4D4C80], eax
	cmp bl, 0Dh
	jnz loc_423E73
	cmp byte [byte_512DA8], 0
	jz loc_423E73
	add dword [dword_4D4C7C], 9Fh

loc_423E73:
	test byte [edx+8], 10h
	jz loc_423E21
	add dword [dword_4D4C7C], 2Eh
	mov edx, dword [dword_4D4C80]
	mov eax, dword [dword_4D4C7C]
	call sub_4222F0
	pop edx
	pop ebx
	ret
;sub_423E10 endp

sub_423EA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov ebp, eax
	cmp dword [dword_4D4C78], 0
	jz loc_423F92

loc_423EBB:
	mov edx, aPtr0 ; "ptr0"
	mov eax, dword [dword_4D4C78]
	call sub_482EB4
	mov edx, ebp
	mov ecx, eax
	call sub_426890
	mov ebx, dword [dword_4E8AF8]
	mov edi, [ecx+2]
	mov ecx, [ecx+4]
	sar edi, 10h
	sar ecx, 10h
	inc edi
	inc ecx
	test ebx, ebx
	jz loc_423EF2
	mov eax, ebx
	call sub_482DA0

loc_423EF2:
	lea edx, [ecx+0Ah]
	lea eax, [edi+0Ah]
	xor ebx, ebx
	call sub_482474
	mov esi, dword [dword_4E8AFC]
	mov dword [dword_4E8AF8], eax
	test esi, esi
	jz loc_423F15
	mov eax, esi
	call sub_482DA0

loc_423F15:
	lea edx, [ecx+0Ah]
	lea eax, [edi+0Ah]
	xor ebx, ebx
	call sub_482474
	mov dword [dword_4E8AFC], eax
	mov ebx, ebp
	xor edx, edx
	mov eax, dword [dword_4E8AF8]
	xor edi, edi
	call sub_4825A8
	mov [esp+100h], edi
	mov eax, [ebp+0Ch]
	mov word [word_4E8C06], dx
	test eax, eax
	jz loc_423F6E

loc_423F4C:
	mov edx, [ebx+0Ch]
	mov al, [edx]
	cmp al, 1
	jnb loc_423FC4

loc_423F55:
	mov edx, [esp+100h]
	mov ecx, [ebx+10h]
	inc edx
	add ebx, 4
	mov [esp+100h], edx
	test ecx, ecx
	jnz loc_423F4C

loc_423F6E:
	call sub_4824BC
	mov eax, ebp
	mov edi, sub_4242E0
	call sub_423E10
	mov dword [off_4DAC4C], edi
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_423F92:
	mov ecx, dword [dword_5134B4]
	push ecx
	push aSmouse_fsh ; "%smouse.fsh"
	push dword_4E8B0C
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, dword_4E8B0C
	call sub_486F40
	mov dword [dword_4D4C78], eax
	jmp loc_423EBB

loc_423FC4:
	ja loc_424072
	test byte [edx+2], 1
	jnz loc_423F55
	mov eax, dword [byte_4E8C04]
	mov ecx, [esp+100h]
	sar eax, 10h
	add edx, 4
	mov word (dword_4E89B6+2)[eax*2], cx
	mov eax, dword [dword_4D40B8]
	call sub_482EB4
	mov ecx, eax
	cmp ebp, off_4D3CFC
	jnz loc_424230
	call sub_41A210

loc_424007:
	mov edx, [ecx+0Ch]
	shl edx, 4
	movsx edi, ax
	sar edx, 14h
	add edx, edi
	mov esi, edx
	mov edx, dword [byte_4E8C04]
	sar edx, 10h
	mov word (dword_4E8AA6+2)[edx*2], si
	add si, [ecx+6]
	add eax, esi
	mov word word_4E8968[edx*2], ax
	mov eax, [ecx+0Ch]
	shl eax, 14h
	sar eax, 14h
	mov word (dword_4E8A56+2)[edx*2], ax
	add ax, [ecx+4]
	mov di, word [word_4E8C06]
	mov word (dword_4E8A06+2)[edx*2], ax
	cmp di, 28h
	jge loc_423F55
	mov eax, edi
	inc eax
	mov word [word_4E8C06], ax
	jmp loc_423F55

loc_424072:
	cmp al, 2
	jnz loc_423F55
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	mov ecx, [esp+100h]
	mov word (dword_4E89B6+2)[eax*2], cx
	mov eax, [edx]
	sar eax, 10h
	mov edi, esp
	call sub_41B710
	mov esi, eax
	push edi

loc_4240A0:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4240B8
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4240A0

loc_4240B8:
	pop edi
	mov eax, [edx]
	sar eax, 10h
	call sub_41B650
	mov ecx, dword [byte_4E8C04]
	sar ecx, 10h
	mov word (dword_4E8AA6+2)[ecx*2], ax
	mov eax, [edx]
	sar eax, 10h
	call sub_41B6F0
	mov si, word (dword_4E8AA6+2)[ecx*2]
	mov ecx, eax
	mov eax, dword [byte_4E8C04]
	add ecx, esi
	sar eax, 10h
	add ecx, 0Ch
	mov word word_4E8968[eax*2], cx
	mov eax, [edx]
	sar eax, 10h
	call sub_41B6F0
	call sub_4056F0
	mov eax, [edx]
	sar eax, 10h
	call sub_41B690
	cmp eax, 1
	jnz loc_4241E6

loc_42411F:
	mov eax, [edx]
	sar eax, 10h
	call sub_41B670
	mov ecx, dword [byte_4E8C04]
	sar ecx, 10h
	add eax, 0Ch
	mov word (dword_4E8A06+2)[ecx*2], ax
	mov eax, esp
	call sub_482424
	mov cx, word (dword_4E8A06+2)[ecx*2]
	sub ecx, eax
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	sub ecx, 0Ch
	mov word (dword_4E8A56+2)[eax*2], cx

loc_424163:
	cmp byte [edx+9], 12h
	jnz loc_42417B
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	add word (dword_4E8A06+2)[eax*2], 12Ch

loc_42417B:
	cmp byte [edx+9], 0Dh
	jnz loc_424193
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	add word (dword_4E8A06+2)[eax*2], 0F0h

loc_424193:
	cmp dword [edx+0Ch], 0
	jz loc_4241B0
	test byte [edx+8], 8
	jnz loc_4241B0
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	add word (dword_4E8A06+2)[eax*2], 78h

loc_4241B0:
	cmp byte [edx+9], 5
	jnz loc_4241C7
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	add word (dword_4E8A06+2)[eax*2], 6Eh

loc_4241C7:
	mov ax, word [word_4E8C06]
	cmp ax, 28h
	jge loc_423F55
	mov edx, eax
	inc edx
	mov word [word_4E8C06], dx
	jmp loc_423F55

loc_4241E6:
	cmp eax, 4
	jz loc_42411F
	mov eax, [edx]
	sar eax, 10h
	call sub_41B670
	mov ecx, dword [byte_4E8C04]
	sar ecx, 10h
	mov word (dword_4E8A56+2)[ecx*2], ax
	mov eax, esp
	call sub_482424
	mov cx, word (dword_4E8A56+2)[ecx*2]
	add ecx, eax
	mov eax, dword [byte_4E8C04]
	sar eax, 10h
	mov word (dword_4E8A06+2)[eax*2], cx
	jmp loc_424163

loc_424230:
	xor eax, eax
	jmp loc_424007
;sub_423EA0 endp

sub_424240: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, dword_4D4C80
	mov edx, dword_4D4C7C
	mov eax, dword_4D4C84
	call sub_422060
	cmp dword [dword_4D4C88], 0
	jnz loc_424264
	xor eax, eax
	pop edx
	pop ebx
	ret

loc_424264:
	push ecx
	xor ecx, ecx
	mov eax, 1
	mov dword [dword_4D4C88], ecx
	pop ecx
	pop edx
	pop ebx
	ret
;sub_424240 endp

sub_424280: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, dword_4D4C80
	mov edx, dword_4D4C7C
	mov eax, dword_4D4C84
	call sub_422060
	cmp dword [dword_4D4C88], 0
	jnz loc_4242A4
	xor eax, eax
	pop edx
	pop ebx
	ret

loc_4242A4:
	push ecx
	xor ecx, ecx
	mov eax, 1
	mov dword [dword_4D4C88], ecx
	pop ecx
	pop edx
	pop ebx
	ret
;sub_424280 endp

sub_4242C0: ;SUBROUTINE
	mov dword [dword_4E8B00], eax
	mov dword [dword_4D4C7C], eax
	mov dword [dword_4E8B04], edx
	mov dword [dword_4D4C80], edx
	jmp sub_4222F0
;sub_4242C0 endp

sub_4242E0: ;SUBROUTINE
	inc dword [dword_4D4C88]
	ret
;sub_4242E0 endp

sub_4242F0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0FCh
	mov edx, eax
	mov edi, esp
	mov esi, dword [dword_5134D8]
	push edi

loc_424306:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_42431E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_424306

loc_42431E:
	pop edi
	mov edi, esp
	mov esi, edx
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_42432C:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_424344
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_42432C

loc_424344:
	pop edi
	mov eax, esp
	call sub_488570
	test eax, eax
	jz loc_42454B
	push ebx
	call sub_486F28
	call sub_428730
	lea edx, [esp+4]
	lea eax, [esp+4]
	call sub_493728
	mov edx, 2000h
	mov eax, 80000h
	mov ebx, dword [dword_4DABE8]
	call sub_493718
	mov ebx, 40000h
	mov edx, 0FFFF0000h
	mov ecx, dword [dword_4DABE8]
	mov esi, eax
	mov edi, eax
	mov eax, 53430000h
	call sub_493E90
	lea edx, [esp+4]
	mov ebp, eax
	mov eax, esi
	call sub_493BB4
	mov eax, dword [dword_5637F4]
	mov dword [dword_4EB570], eax

loc_4243B6:
	mov eax, edi
	call sub_4246A0
	mov esi, eax
	test eax, eax
	jnz loc_4243DD
	mov eax, dword [dword_5637F4]
	mov ebx, dword [dword_4EB570]
	mov edx, eax
	mov eax, dword [dword_4DABCC]
	sub edx, ebx
	add eax, eax
	cmp edx, eax
	jle loc_4243B6

loc_4243DD:
	test esi, esi
	jnz loc_42457F

loc_4243E5:
	mov eax, aCNfs2seFron_10 ; "c:\\nfs2se\\frontend\\pc\\movilite.c"
	mov edx, 185h
	push aShowdctNoDctCh ; "SHOWDCT: No DCT chunks found!\n"
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], edx
	call sub_4840F0
	add esp, 4

loc_424407:
	mov ebx, 0C8h
	mov edx, [esi+0Ch]
	mov eax, [esi+0Ah]
	sar edx, 10h
	sar eax, 10h
	xor ecx, ecx
	call sub_424970
	mov edx, 0Fh
	mov dword [dword_4EB580], ecx
	mov dword [dword_4EB560], ecx
	mov dword [dword_4EB558], ecx
	mov dword [dword_4EB550], ecx
	mov dword [dword_4EB55C], ecx
	push ecx
	mov eax, ebp
	mov ecx, 40000h
	call sub_495780
	mov dword [dword_4EB568], eax
	cmp eax, 2
	jle loc_42459D
	mov edx, 0FFFFFFFFh
	mov eax, 0Fh
	call sub_495854
	mov ecx, eax
	mov eax, dword [dword_5637F4]
	mov dword [dword_4EB570], eax
	xor ebx, ebx

loc_42447A:
	mov eax, ecx
	call sub_486040
	test eax, eax
	jnz loc_424598
	mov eax, dword [dword_4EB55C]
	cmp ebx, eax
	jnz loc_424598
	call sub_483EB0
	call sub_4958A0
	cmp eax, dword [dword_4EB580]
	jle loc_4244B7
	mov dword [dword_4EB580], eax
	mov eax, dword [dword_5637F4]
	mov dword [dword_4EB570], eax

loc_4244B7:
	test esi, esi
	jnz loc_4244C4
	mov eax, edi
	call sub_4246A0
	mov esi, eax

loc_4244C4:
	test esi, esi
	jz loc_424514
	cmp esi, 0FFFFFFFFh
	jz loc_424514
	mov edx, dword [dword_4EB580]
	mov eax, dword [dword_4EB560]
	sub eax, edx
	cmp eax, 1
	jge loc_424514
	mov eax, edx
	sub eax, dword [dword_4EB560]
	cmp eax, 2
	jge loc_42458D
	mov eax, esi
	call sub_4248D0
	call sub_424710

loc_4244FC:
	mov edx, esi
	mov eax, edi
	call sub_495500
	mov edx, dword [dword_4EB560]
	inc edx
	mov esi, ebx
	mov dword [dword_4EB560], edx

loc_424514:
	call sub_424DE0
	mov eax, dword [dword_5637F4]
	mov edx, dword [dword_4EB570]
	sub eax, edx
	mov edx, eax
	mov eax, dword [dword_4DABCC]
	add eax, eax
	cmp edx, eax
	jle loc_42447A
	mov eax, 1
	mov dword [dword_4EB55C], eax
	mov dword [dword_4EB550], eax
	jmp loc_42447A

loc_42454B:
	mov edx, aCNfs2seFron_10 ; "c:\\nfs2se\\frontend\\pc\\movilite.c"
	mov ecx, 16Bh
	push aMovieFileNotFo ; "MOVIE FILE NOT FOUND"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	mov eax, 1
	add esp, 4
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_42457F:
	cmp esi, 0FFFFFFFFh
	jz loc_4243E5
	jmp loc_424407

loc_42458D:
	inc dword [dword_4EB558]
	jmp loc_4244FC

loc_424598:
	call sub_495990

loc_42459D:
	xor eax, eax
	call sub_4833E7
	mov eax, dword [dword_5637F4]
	mov dword [dword_4EB570], eax
	cmp esi, 0FFFFFFFFh
	jz loc_424675

loc_4245B7:
	cmp dword [dword_4EB55C], 0
	jnz loc_424675
	mov eax, ebp
	call sub_4246E0
	test eax, eax
	jz loc_4245DD
	cmp eax, 0FFFFFFFFh
	jz loc_4245DD
	mov edx, eax
	mov eax, ebp
	call sub_495500

loc_4245DD:
	test esi, esi
	jnz loc_4245EA
	mov eax, edi
	call sub_4246A0
	mov esi, eax

loc_4245EA:
	test esi, esi
	jz loc_42463C
	cmp esi, 0FFFFFFFFh
	jz loc_42463C
	call sub_4833F3
	mov eax, dword [dword_4DABCC]
	mov edx, eax
	mov ecx, 0Fh
	sar edx, 1Fh
	idiv ecx
	call sub_4833E7
	mov eax, dword [dword_5637F4]
	mov dword [dword_4EB570], eax
	mov eax, esi
	mov edx, esi
	call sub_4248D0
	call sub_424710
	mov eax, edi
	call sub_495500
	mov ebx, dword [dword_4EB560]
	inc ebx
	xor esi, esi
	mov dword [dword_4EB560], ebx

loc_42463C:
	call sub_424DE0
	mov eax, dword [dword_5637F4]
	mov edx, dword [dword_4EB570]
	sub eax, edx
	mov edx, eax
	mov eax, dword [dword_4DABCC]
	add eax, eax
	cmp edx, eax
	jle loc_42466C
	mov ecx, 1
	mov dword [dword_4EB55C], ecx
	mov dword [dword_4EB550], ecx

loc_42466C:
	cmp esi, 0FFFFFFFFh
	jnz loc_4245B7

loc_424675:
	call sub_424890
	mov eax, edi
	call sub_4939AC
	call sub_4286B0
	call sub_486F28
	mov eax, dword [dword_4EB55C]
	pop ebx
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_4242F0 endp

sub_4246A0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	call sub_4246E0
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jz loc_4246BF
	test eax, eax
	jz loc_4246BF
	cmp dword [eax], 4443546Dh
	jnz loc_4246C4
	pop edx
	pop ecx
	ret

loc_4246BF:
	mov eax, edx
	pop edx
	pop ecx
	ret

loc_4246C4:
	mov edx, eax
	mov eax, ecx
	call sub_495500
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_4246A0 endp

sub_4246E0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	call sub_4953DC
	cmp eax, 0FFFFFFFFh
	jz loc_4246F2
	test eax, eax
	jz loc_4246F5

loc_4246F2:
	pop edx
	pop ecx
	ret

loc_4246F5:
	mov edx, eax
	mov eax, ecx
	call sub_49558C
	test eax, eax
	jz loc_4246F2
	mov eax, 0FFFFFFFFh
	pop edx
	pop ecx
	ret
;sub_4246E0 endp

sub_424710: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov eax, dword [dword_4EB54C]
	call sub_4825A8
	push 2
	call sub_497680
	call sub_49769C
	xor edx, edx
	mov ecx, dword [dword_4EB554]
	mov [esp], edx
	test ecx, ecx
	jle loc_424877
	mov ecx, dword_4E8D4C
	mov [esp+8], edx
	mov [esp+4], edx
	mov [esp+0Ch], ecx

loc_424755:
	mov ebp, dword [dword_4EB564]
	xor edi, edi
	test ebp, ebp
	jle loc_42483E
	mov eax, [esp+4]
	mov [esp+14h], eax
	mov eax, [esp+0Ch]
	mov ebp, [esp+0Ch]
	mov [esp+10h], eax
	add eax, 20h
	mov esi, [esp+8]
	mov [esp+20h], eax
	mov eax, [esp+0Ch]
	mov [esp+1Ch], edi
	add eax, 40h
	add ebp, 60h
	mov [esp+18h], eax

loc_424796:
	push 0
	mov edx, [esp+18h]
	mov eax, dword [dword_4EB56C]
	mov ecx, dword [dword_4EB578]
	mov ebx, dword [dword_4EB574]
	push eax
	mov eax, [esp+24h]
	neg edx
	neg eax
	call sub_492F98
	mov eax, dword [dword_4EB54C]
	mov eax, [eax+20h]
	push 0
	add eax, 10h
	push eax
	mov edx, dword dword_4E8C0C[esi]
	push edx
	call sub_49755C
	mov ecx, dword dword_4E8C0C[esi]
	push ecx
	add esi, 4
	mov ebx, [esp+14h]
	call sub_4975E8
	mov edx, [esp+18h]
	push ebp
	mov ecx, [esp+24h]
	mov eax, edi
	push edx
	shl eax, 7
	push ecx
	add eax, ebx
	add ebp, 80h
	push eax
	inc edi
	mov ebx, [esp+30h]
	call sub_497B24
	mov eax, [esp+18h]
	mov edx, [esp+1Ch]
	add ebx, 80h
	mov ecx, dword [dword_4EB564]
	mov [esp+20h], ebx
	add eax, 80h
	add edx, 40h
	mov [esp+18h], eax
	mov [esp+1Ch], edx
	cmp edi, ecx
	jl loc_424796

loc_42483E:
	mov ebx, [esp+0Ch]
	mov esi, [esp+8]
	mov edi, [esp+4]
	mov ebp, [esp]
	mov edx, dword [dword_4EB554]
	add ebx, 500h
	add esi, 28h
	add edi, 40h
	inc ebp
	mov [esp+0Ch], ebx
	mov [esp+8], esi
	mov [esp+4], edi
	mov [esp], ebp
	cmp ebp, edx
	jl loc_424755

loc_424877:
	call sub_4976B8
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_424710 endp

sub_424890: ;SUBROUTINE
	push ecx
	push edx
	mov eax, dword [dword_4EB574]
	call sub_4848FC
	mov eax, dword [dword_4EB57C]
	call sub_4848FC
	push 0
	call sub_4976C8
	call sub_4975B0
	mov eax, dword [dword_4EB54C]
	call sub_482DA0
	pop edx
	pop ecx
	ret
;sub_424890 endp

sub_4248D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov edx, dword [dword_4EB57C]
	mov ebx, [eax+14h]
	add eax, 18h
	sar ebx, 10h
	call sub_492A1C
	mov eax, [ecx+12h]
	sar eax, 10h
	xor esi, esi
	call sub_4929D4
	mov edx, dword [dword_4EB578]
	xor ebp, ebp
	test edx, edx
	jle loc_42495D

loc_424905:
	mov ebx, dword [dword_4EB56C]
	xor ecx, ecx
	test ebx, ebx
	jle loc_424950

loc_424911:
	mov ebx, dword [dword_4EB578]
	mov edx, ecx
	imul edx, ebx
	add edx, ebp
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4EB574]
	shl eax, 2
	lea edi, [esi+esi]
	add edx, eax
	mov eax, dword [dword_4EB57C]
	add eax, edi
	add ecx, 10h
	call sub_492A40
	mov edi, dword [dword_4EB56C]
	add esi, eax
	cmp ecx, edi
	jl loc_424911

loc_424950:
	mov ecx, dword [dword_4EB578]
	add ebp, 10h
	cmp ebp, ecx
	jl loc_424905

loc_42495D:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4248D0 endp

sub_424970: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 3Ch
	and esp, 0FFFFFFF8h
	mov [esp+4], eax
	mov [esp+8], edx
	mov dword [dword_4EB578], eax
	mov dword [dword_4EB56C], edx
	mov edx, 280h
	lea esi, [eax+eax]
	sub edx, esi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8]
	mov [esp+1Ch], eax
	mov eax, 1E0h
	add edx, edx
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edi, [esp+8]
	imul esi, edi
	mov ecx, 7Fh
	mov ebx, dword [dword_4DABE8]
	mov edx, aCNfs2seFron_10 ; "c:\\nfs2se\\frontend\\pc\\movilite.c"
	mov [esp], eax
	mov eax, aShowdct ; "SHOWDCT"
	mov dword [dword_4DB1D8], edx
	mov edx, esi
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov edx, 80h
	mov ebx, dword [dword_4DABE8]
	mov dword [dword_4EB574], eax
	mov eax, aCNfs2seFron_10 ; "c:\\nfs2se\\frontend\\pc\\movilite.c"
	mov dword [dword_4DB1DC], edx
	mov dword [dword_4DB1D8], eax
	mov edx, esi
	mov eax, aShowdct ; "SHOWDCT"
	call sub_484498
	mov ebx, 10h
	mov edx, 40h
	mov ecx, dword [dword_4DABE8]
	mov dword [dword_4EB57C], eax
	mov eax, edx
	call sub_492820
	push 0
	mov dword [dword_4EB54C], eax
	call sub_4976C8
	call sub_4975B0
	mov edx, [esp+4]
	add edx, 3Fh
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	lea edx, [edi+3Fh]
	mov dword [dword_4EB564], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	xor ecx, ecx
	mov [esp+18h], ecx
	mov dword [dword_4EB554], eax
	test eax, eax
	jle loc_424C86
	mov eax, [esp]
	mov [esp+14h], ecx
	mov [esp+0Ch], ecx
	mov [esp+10h], eax

loc_424A95:
	mov eax, dword [dword_4EB564]
	xor esi, esi
	test eax, eax
	jle loc_424C48
	mov eax, [esp+10h]
	mov [esp+20h], eax
	mov eax, [esp+1Ch]
	mov ebx, [esp+14h]
	add eax, 80h
	mov edi, [esp+0Ch]
	mov [esp+30h], eax

loc_424AC1:
	push 0
	push 0
	push 4
	push 40h
	push 40h
	add ebx, 80h
	call sub_497464
	xor ecx, ecx
	mov dword dword_4E8CD4[ebx], ecx
	mov dword dword_4E8CE0[ebx], ecx
	mov edx, [esp+1Ch]
	mov dword dword_4E8CE4[ebx], ecx
	mov dword dword_4E8C0C[edi], eax
	mov dword dword_4E8CE8[ebx], ecx
	mov eax, esi
	mov dword dword_4E8CF4[ebx], ecx
	shl eax, 7
	mov dword dword_4E8D00[ebx], ecx
	add eax, edx
	mov dword dword_4E8D08[ebx], ecx
	mov [esp+38h], eax
	mov dword dword_4E8D14[ebx], ecx
	fild dword [esp+38h]
	fstp dword [esp+28h]
	mov eax, [esp+28h]
	mov dword dword_4E8CCC[ebx], eax
	mov eax, [esp+20h]
	mov dword dword_4E8D20[ebx], ecx
	mov [esp+38h], eax
	mov dword dword_4E8D34[ebx], ecx
	fild dword [esp+38h]
	fstp dword [esp+34h]
	mov eax, [esp+34h]
	mov dword dword_4E8CD0[ebx], eax
	mov dword dword_4E8CD8[ebx], 3F800000h
	mov eax, [esp+30h]
	mov dword dword_4E8D40[ebx], ecx
	mov [esp+38h], eax
	mov dword dword_4E8D44[ebx], ecx
	fild dword [esp+38h]
	fstp dword [esp+24h]
	mov eax, [esp+24h]
	mov dword dword_4E8CEC[ebx], eax
	mov eax, [esp+34h]
	mov dword dword_4E8CF0[ebx], eax
	mov eax, 3F800000h
	mov dword dword_4E8CF8[ebx], eax
	mov dword dword_4E8D04[ebx], eax
	mov eax, [esp+24h]
	mov edx, 0FFFFFFFFh
	mov dword dword_4E8D0C[ebx], eax
	mov eax, [esp+20h]
	mov dword dword_4E8CDC[ebx], edx
	add eax, 80h
	mov dword dword_4E8CFC[ebx], edx
	mov [esp+38h], eax
	mov dword dword_4E8D1C[ebx], edx
	fild dword [esp+38h]
	fstp dword [esp+2Ch]
	mov eax, [esp+2Ch]
	mov dword dword_4E8D10[ebx], eax
	mov eax, 3F800000h
	add edi, 4
	mov dword dword_4E8D18[ebx], eax
	mov ecx, [esp+30h]
	mov dword dword_4E8D24[ebx], eax
	mov edx, eax
	mov dword dword_4E8D28[ebx], eax
	mov eax, [esp+28h]
	inc esi
	mov dword dword_4E8D2C[ebx], eax
	mov eax, [esp+2Ch]
	add ecx, 80h
	mov dword dword_4E8D30[ebx], eax
	mov eax, edx
	mov edx, 0FFFFFFFFh
	mov dword dword_4E8D38[ebx], eax
	mov [esp+30h], ecx
	mov dword dword_4E8D3C[ebx], edx
	mov edx, eax
	mov eax, dword [dword_4EB564]
	mov dword dword_4E8D48[ebx], edx
	cmp esi, eax
	jl loc_424AC1

loc_424C48:
	mov esi, [esp+10h]
	mov edi, [esp+14h]
	mov eax, [esp+0Ch]
	mov edx, [esp+18h]
	mov ecx, dword [dword_4EB554]
	add esi, 80h
	add edi, 500h
	add eax, 28h
	inc edx
	mov [esp+10h], esi
	mov [esp+14h], edi
	mov [esp+0Ch], eax
	mov [esp+18h], edx
	cmp edx, ecx
	jl loc_424A95

loc_424C86:
	mov eax, [esp+4]
	mov edx, eax
	mov ecx, 40h
	sar edx, 1Fh
	idiv ecx
	test edx, edx
	jle loc_424D2F
	cmp dword [dword_4EB554], 0
	jle loc_424D2F
	mov eax, [esp+4]
	mov ecx, [esp+1Ch]
	add eax, eax
	add eax, ecx
	lea edi, [eax-1]
	mov eax, dword [dword_4EB554]
	fld qword [dbl_4C9C1C]
	lea esi, 0[eax*4]
	fld qword [dbl_4C9C24]
	add esi, eax
	xor ebx, ebx
	shl esi, 8

loc_424CD9:
	mov eax, dword [dword_4EB564]
	mov [esp+38h], edi
	mov [esp+34h], edx
	add ebx, 500h
	fild dword [esp+34h]
	fild dword [esp+38h]
	fstp dword [esp+34h]
	shl eax, 7
	mov ecx, [esp+34h]
	fadd st0, st1
	mov dword dword_4E87EC[ebx+eax], ecx
	fmul st0, st2
	mov dword dword_4E880C[ebx+eax], ecx
	fstp dword [esp+34h]
	mov ecx, [esp+34h]
	mov dword dword_4E8804[ebx+eax], ecx
	mov dword dword_4E8824[ebx+eax], ecx
	cmp ebx, esi
	jl loc_424CD9
	fstp st0
	fstp st0

loc_424D2F:
	mov eax, [esp+8]
	mov edx, eax
	mov ecx, 40h
	sar edx, 1Fh
	idiv ecx
	test edx, edx
	jle loc_424DD1
	cmp dword [dword_4EB564], 0
	jle loc_424DD1
	fld qword [dbl_4C9C1C]
	mov edi, [esp+8]
	mov esi, [esp]
	fld qword [dbl_4C9C24]
	add edi, edi
	xor ebx, ebx
	add edi, esi
	mov esi, dword [dword_4EB564]
	dec edi
	shl esi, 7

loc_424D77:
	mov eax, dword [dword_4EB554]
	dec eax
	imul eax, 500h
	mov [esp+34h], edi
	mov [esp+38h], edx
	add ebx, 80h
	fild dword [esp+38h]
	fild dword [esp+34h]
	fstp dword [esp+34h]
	fadd st0, st1
	mov ecx, [esp+34h]
	fmul st0, st2
	mov dword dword_4E8D10[ebx+eax], ecx
	fstp dword [esp+34h]
	mov dword dword_4E8D30[ebx+eax], ecx
	mov ecx, [esp+34h]
	mov dword dword_4E8D28[ebx+eax], ecx
	mov dword dword_4E8D48[ebx+eax], ecx
	cmp ebx, esi
	jl loc_424D77
	fstp st0
	fstp st0

loc_424DD1:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_424970 endp

sub_424DE0: ;SUBROUTINE
	call sub_405960
	test eax, eax
	jz locret_424E05
	cmp eax, 4800h
	jz locret_424E05
	cmp eax, 5000h
	jz locret_424E05
	cmp eax, 4B00h
	jz locret_424E05
	cmp eax, 4D00h
	jnz loc_424E06

locret_424E05:
	ret

loc_424E06:
	mov dword [dword_4EB55C], 1
	ret
;sub_424DE0 endp

off_424E20: dd aEsta
	dd aGsta ; "gsta"
	dd aFsta ; "fsta"
	dd aSsta ; "ssta"
	dd aIsta ; "ista"
	dd aWsta ; "wsta"
off_424E38: dd aPrh01
	dd aPrh02 ; "prh02"
	dd aPrh03 ; "prh03"
	dd aPrh04 ; "prh04"
	dd aPrh05 ; "prh05"
	dd aPrh06 ; "prh06"
	dd aPrh07 ; "prh07"
	dd aPrh08 ; "prh08"

sub_424E60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 7Ch
	mov [esp+5Ch], eax
	mov ecx, dword [dword_512208]
	xor edx, edx
	xor edi, edi
	mov [esp+54h], edx
	cmp ecx, 1
	jl loc_424F08
	mov ax, word [dword_51220C]

loc_424E8A:
	cwde
	mov [esp+74h], eax
	imul eax, 684h
	mov edx, [esp+5Ch]
	add edx, eax
	mov eax, [edx+21Ch]
	mov eax, [eax]
	mov esi, [edx+280h]
	mov [esp+78h], edx
	cmp esi, 2
	jnz loc_424EFC
	cwde
	xor edx, edx
	mov [esp+6Ch], eax
	mov dl, byte [byte_512DBD]
	mov ebp, [esp+6Ch]
	lea eax, [edx+0Ch]
	cmp eax, ebp
	jle loc_424EFC
	cmp dword [dword_512204], 0
	jnz loc_424EFC
	cmp byte [byte_512DAA], 3
	jz loc_424EFC
	cmp byte [byte_512DD0], 1
	jz loc_424EFC
	cmp byte [byte_512DEB], 1
	jz loc_424EFC
	cmp byte [byte_512DAF], 1
	jz loc_424F0F

loc_424EFC:
	mov eax, edi
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_424F08:
	xor eax, eax
	jmp loc_424E8A

loc_424F0F:
	mov edx, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	mov ecx, 3D6h
	mov ebx, 20h
	mov eax, aFilebufr ; "filebufr"
	mov dword [dword_4DB1D8], edx
	mov edx, 0C8h
	mov dword [dword_4DB1DC], ecx
	call sub_4844B0
	mov ebp, eax
	mov [esp+70h], eax
	test eax, eax
	jz loc_424EFC
	mov eax, dword [dword_51221C]
	mov edx, esp
	call sub_41A3A0
	movsx esi, ax
	lea ecx, [esp+58h]
	mov eax, esi
	lea ebx, [esp+54h]
	call sub_425F90
	lea edx, [esp+50h]
	mov eax, esp
	call sub_4877BC
	cmp dword [esp+50h], 0
	jz loc_42510C
	mov esi, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	mov edi, 3EDh
	mov edx, [esp+58h]
	mov eax, aPrhbuf ; "prhbuf"
	xor ebx, ebx
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_4844B0
	mov ebx, [esp+58h]
	mov [esp+60h], eax
	mov [esp+64h], eax
	mov edx, eax
	mov eax, [esp+50h]
	call sub_487958
	mov eax, [esp+50h]
	call sub_487950
	mov eax, dword [dword_5121F8+2]
	sar eax, 10h
	call sub_41A000
	mov edx, eax
	mov eax, [esp+6Ch]
	add eax, eax
	mov ecx, eax
	shl ecx, 4
	movsx edx, dx
	sub ecx, eax
	lea eax, 0[edx*4]
	add eax, edx
	add eax, eax
	lea edx, [ecx+eax]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, [esp+60h]
	shl eax, 2
	lea edi, [ebp+14h]
	add edx, eax
	mov ecx, 0B4h
	mov esi, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+78h]
	mov eax, [eax+21Ch]
	mov ax, [eax]
	mov [ebp+0], ax
	mov ax, word [dword_5121FC]
	mov [ebp+2], ax
	mov eax, [esp+78h]
	mov ebx, esp
	mov [esp+68h], edx
	mov ax, [eax+27Ch]
	mov edx, [esp+74h]
	mov [ebp+4], ax
	mov eax, [esp+5Ch]
	call sub_41A040
	cwde
	mov edx, [esp+78h]
	shl eax, 2
	add eax, edx
	mov eax, [eax+238h]
	mov [ebp+8], eax
	mov ebx, esp
	mov eax, [edx+234h]
	mov edx, [esp+74h]
	mov [ebp+0Ch], eax
	mov eax, [esp+5Ch]
	call sub_41A0B0
	cwde
	mov ecx, [esp+78h]
	shl eax, 2
	add eax, ecx
	mov edi, [esp+68h]
	mov esi, ebp
	mov eax, [eax+258h]
	mov ecx, 0C8h
	mov [ebp+10h], eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov edx, esp
	mov al, byte [byte_512DB0]
	call sub_425F90
	mov eax, [esp+60h]
	mov edx, [esp+60h]
	call sub_484D94
	mov ebx, eax
	mov eax, esp
	call sub_4875B0
	test ax, ax
	jnz loc_4250DF
	mov eax, 2F3h
	call sub_402CD0

loc_4250DF:
	mov ebx, [esp+64h]
	test ebx, ebx
	jz loc_4250EE
	mov eax, ebx
	call sub_4848FC

loc_4250EE:
	mov esi, [esp+70h]
	test esi, esi
	jz loc_4250FD
	mov eax, esi
	call sub_4848FC

loc_4250FD:
	mov eax, 1
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42510C:
	mov eax, esi
	call sub_425DD0
	mov eax, edi
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_424E60 endp

off_425120: dd loc_425542
	dd loc_42558C ; jump table for switch statement
	dd loc_425874
	dd loc_4258BB

sub_425130: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0E4h
	and esp, 0FFFFFFF8h
	mov [esp+0B4h], eax
	mov [esp+0ACh], edx
	mov [esp+0D0h], bx
	mov [esp+0E0h], cx
	mov esi, 1
	xor edx, edx
	mov edi, 0F3h
	mov [esp+0CCh], dx

loc_425170:
	mov [esp+0D8h], esi
	fild word [esp+0D8h]
	fmul qword [dbl_4C9DCC]
	fsubr qword [dbl_4C9E24]
	fmul qword [dbl_4C9DD4]
	push 0FFAAAAAAh
	mov ebx, 273h
	call __CHP
	fistp dword [esp+0B4h]
	mov ecx, [esp+0B4h]
	mov eax, edi
	mov edx, ecx
	inc esi
	call sub_4967E0
	cmp si, 0Ah
	jle loc_425170
	mov esi, 1
	mov edi, 8Fh

loc_4251C7:
	mov [esp+0D8h], esi
	fild word [esp+0D8h]
	fmul qword [dbl_4C9DDC]
	fadd qword [dbl_4C9E2C]
	fmul qword [dbl_4C9DE4]
	push 0FFAAAAAAh
	mov edx, 1B0h
	call __CHP
	fistp dword [esp+0B4h]
	mov ebx, [esp+0B4h]
	mov ecx, edi
	mov eax, ebx
	inc esi
	call sub_4967E0
	cmp si, 0Ah
	jl loc_4251C7
	mov eax, 0FFFFFF50h
	mov ecx, 126h
	mov ebx, 5
	call sub_48266C
	push eax
	mov edx, 8Fh
	mov eax, 0F1h
	call sub_488620
	mov eax, 0FFFFFF50h
	mov ecx, 5
	mov ebx, 180h
	call sub_48266C
	push eax
	mov edx, 1B0h
	mov eax, 0F3h
	call sub_488620
	mov ah, byte [byte_512DFB]
	cmp ah, 2
	jnz loc_425415

loc_42526B:
	cmp word [esp+0E0h], 1
	jnz loc_42541E

loc_42527A:
	mov eax, [esp+0DEh]
	sar eax, 10h
	add eax, 0C4h
	call sub_41B710
	push eax
	push aS_5 ; "%s"
	lea eax, [esp+5Ch]
	push eax
	lea edi, [esp+60h]
	call sprintf_
	add esp, 0Ch
	mov dl, 20h
	lea esi, [esp+54h]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx

loc_4252B5:
	mov al, [esi]
	cmp al, dl
	jz loc_4252CD
	cmp al, 0
	jz loc_4252CB
	inc esi
	mov al, [esi]
	cmp al, dl
	jz loc_4252CD
	inc esi
	cmp al, 0
	jnz loc_4252B5

loc_4252CB:
	sub esi, esi

loc_4252CD:
	mov edx, asc_4C9D9C ; " "
	lea eax, [esp+54h]
	call strtok_
	push eax
	push aS_5 ; "%s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	mov ebx, 0A7h
	push 4
	mov ecx, 10h
	mov edx, 0C6h
	push 3
	lea eax, [esp+0Ch]
	inc esi
	call sub_4053A0
	push 4
	mov ecx, 10h
	mov ebx, 0A7h
	push 3
	mov edx, 0E0h
	mov eax, esi

loc_425320:
	call sub_4053A0
	mov eax, 0CEh
	call sub_41B710
	push eax
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 8
	push 4
	mov ecx, 12h
	mov ebx, 1B9h
	push 3
	mov edx, 0F3h
	lea eax, [esp+0Ch]
	call sub_4054E0
	mov eax, 0CDh
	call sub_41B710
	push eax
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 8
	push 4
	mov ecx, 12h
	mov ebx, 1B9h
	push 4
	mov edx, 273h
	lea eax, [esp+0Ch]
	call sub_4054E0
	mov eax, [esp+0DEh]
	sar eax, 10h
	add eax, 0C8h
	call sub_41B710
	push eax
	push aS_5 ; "%s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 5
	push 3
	mov eax, 0CCh
	mov ecx, 12h
	call sub_41B650
	add eax, 19h
	mov edx, 0F3h
	movsx ebx, ax
	lea eax, [esp+0Ch]
	call sub_4054E0

loc_4253DD:
	mov eax, [esp+0CAh]
	sar eax, 10h
	imul eax, 14h
	add eax, [esp+0ACh]
	cmp dword [eax+8], 0
	jz loc_425479
	mov esi, [esp+0CCh]
	cmp si, 0Ah
	jge loc_425479
	mov edx, esi
	inc edx
	mov [esp+0CCh], dx
	jmp loc_4253DD

loc_425415:
	cmp ah, 1
	jz loc_42526B

loc_42541E:
	cmp byte [byte_512DFB], 4
	jnz loc_425436
	cmp word [esp+0E0h], 0
	jz loc_42527A

loc_425436:
	mov eax, [esp+0DEh]
	sar eax, 10h
	add eax, 0C4h
	call sub_41B710
	push eax
	push aS_5 ; "%s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	push 4
	mov ecx, 10h
	mov ebx, 0A7h
	push 3
	mov edx, 0E0h
	lea eax, [esp+0Ch]
	jmp loc_425320

loc_425479:
	cmp word [esp+0CCh], 1
	jl loc_425571
	mov eax, [esp+0CEh]
	lea edx, [esp+54h]
	mov ebx, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	mov esi, 2D4h
	mov ecx, [esp+0CAh]
	sar eax, 10h
	mov edi, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	call sub_41B230
	sar ecx, 10h
	lea eax, [esp+54h]
	mov edx, [esp+0B4h]
	mov dword [dword_4DB1D8], ebx
	mov ebx, 20h
	mov [edx], eax
	mov eax, aPrhdumi ; "prhdumi"
	lea edx, 0[ecx*4]
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov ebx, 20h
	mov esi, eax
	mov eax, 2D5h
	lea edx, 0[ecx*8]
	mov dword [dword_4DB1DC], eax
	mov eax, aPrhfdumi ; "prhfdumi"
	mov dword [dword_4DB1D8], edi
	call sub_484498
	mov ebx, 2D6h
	mov [esp+0B8h], eax
	lea edx, [ecx+ecx]
	mov eax, aPrhrank ; "prhrank"
	mov dword [dword_4DB1DC], ebx
	mov ebx, 20h
	mov dword [dword_4DB1D8], edi
	call sub_484498
	mov edi, eax
	cmp word [esp+0E0h], 3 ; switch 4 cases
	jbe loc_42557B

loc_425542:
	mov ebx, [esp+0ACh] ; jumptable 00425585 default case
	xor edx, edx

loc_42554B:
	mov ecx, [esp+0CAh]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_4255BE
	imul ecx, eax, 14h
	add ecx, ebx
	mov ecx, [ecx+2]
	sar ecx, 10h
	mov [esi+eax*4], ecx
	mov [edi+eax*2], dx
	inc edx
	jmp loc_42554B

loc_425571:
	xor edx, edx
	mov eax, edx
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_42557B:
	xor eax, eax
	mov ax, [esp+0E0h]
	jmp off_425120[eax*4] ; switch jump

loc_42558C:
	xor edx, edx ; jumptable 00425585 case 1

loc_42558E:
	mov ecx, [esp+0CAh]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_4255BE
	imul ecx, eax, 14h
	add ecx, [esp+0ACh]
	lea ebx, 0[eax*4]
	add ebx, esi
	mov ecx, [ecx+8]
	mov [ebx], ecx
	mov [edi+eax*2], dx
	inc edx
	jmp loc_42558E

loc_4255BE:
	mov ebx, edi
	mov edx, esi
	mov eax, ecx
	call sub_41B2D0
	mov ebx, [esp+0E0h]
	test bx, bx
	jbe loc_425902
	cmp bx, 3
	jnz loc_425A69
	cmp byte [byte_512DFA], 1
	jnz loc_4259AF
	mov ecx, 471Ch

loc_4255F5:
	movsx eax, word [edi]
	mov [esp+0C8h], ecx
	fild dword [esi+eax*4]
	fild dword [esp+0C8h]
	fld1
	fdivrp st1, st0
	fstp dword [esp+0C4h]
	fmul dword [esp+0C4h]
	sub esp, 8
	fstp qword [esp]
	call floor_
	mov [esp+0C8h], ecx
	mov eax, [esp+0CAh]
	fild dword [esp+0C8h]
	sar eax, 10h
	fstp qword [esp+0A4h]
	movsx eax, word [edi+eax*2-2]
	fmul qword [esp+0A4h]
	fild dword [esi+eax*4]
	fmul dword [esp+0C4h]
	fxch st1
	call __CHP
	fistp dword [esp]
	sub esp, 8
	fstp qword [esp]
	call ceil_
	fmul qword [esp+0A4h]
	mov eax, [esp]
	call __CHP
	fistp dword [esp+0BCh]
	mov edx, [esp+0BCh]
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	test eax, eax
	jnz loc_4259B9
	add [esp+0BCh], ecx

loc_4256A5:
	mov eax, [esp]
	mov [esp+0C4h], eax
	mov [esp+0C8h], ecx
	fild dword [esp+0C4h]
	fild dword [esp+0C8h]
	fld1
	fdivrp st1, st0
	fstp dword [esp+0C4h]
	fmul dword [esp+0C4h]
	sub esp, 8
	fstp qword [esp]
	push a5_0f ; "%5.0f"
	lea eax, [esp+60h]
	push eax
	call sprintf_
	add esp, 10h
	mov eax, [esp+0BCh]
	mov [esp+0C8h], eax
	fild dword [esp+0C8h]
	fmul dword [esp+0C4h]
	sub esp, 8
	fstp qword [esp]
	push a5_0f ; "%5.0f"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 10h

loc_425722:
	push 4
	mov ecx, 12h
	mov ebx, 1B0h
	push 1
	mov edx, 0ECh
	lea eax, [esp+5Ch]
	call sub_4054E0
	push 4
	mov ecx, 12h
	mov ebx, 86h
	push 1
	mov edx, 0ECh
	lea eax, [esp+0Ch]
	call sub_4054E0
	mov eax, [esp]
	mov edx, [esp+0BCh]
	sub edx, eax
	xor eax, eax
	mov [esp+0BCh], edx
	mov [esp+0DCh], ax

loc_425777:
	mov eax, [esp+0CAh]
	mov ecx, [esp+0DAh]
	sar eax, 10h
	sar ecx, 10h
	mov [esp+0C0h], eax
	cmp ecx, eax
	jge loc_425B97
	mov eax, [esp+0B8h]
	lea edx, 0[ecx*8]
	add edx, eax
	mov dword [edx], 0
	mov dword [edx+4], 0
	mov eax, [esp]
	mov ebx, [esi+ecx*4]
	sub ebx, eax
	mov eax, [esp+0BCh]
	mov [esi+ecx*4], ebx
	mov [esp+0C8h], eax
	fild dword [esi+ecx*4]
	fild dword [esp+0C8h]
	fdivp st1, st0
	fld qword [dbl_4C9E0C]
	fxch st1
	fmul st0, st1
	fstp qword [edx]
	fsub qword [edx]
	fadd qword [dbl_4C9E34]
	fstp qword [edx]
	mov eax, [edx+4]
	mov ebx, [edx]
	mov edx, [esp+0C0h]
	sub edx, ecx
	push eax
	dec edx
	push ebx
	mov [esp+0D0h], edx
	call floor_
	fild dword [esp+0C8h]
	fmul qword [dbl_4C9E14]
	fmul qword [dbl_4C9E1C]
	fxch st1
	call __CHP
	fistp dword [esp+0B0h]
	mov eax, [esp+0B0h]
	mov edx, 0C00h
	sub eax, 3
	fadd qword [dbl_4C9E3C]
	mov ecx, eax
	call __CHP
	fistp dword [esp+0B0h]
	mov ebx, [esp+0B0h]
	mov eax, aDot ; "dot "
	sub ebx, 3
	call sub_405B30
	inc word [esp+0DCh]
	jmp loc_425777

loc_425874:
	xor edx, edx ; jumptable 00425585 case 2

loc_425876:
	mov ecx, [esp+0CAh]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_4255BE
	imul ecx, eax, 14h
	mov ebx, [esp+0ACh]
	add ebx, ecx
	lea ecx, 0[eax*4]
	mov [esp+0B0h], ebx
	lea ebx, [esi+ecx]
	mov ecx, [esp+0B0h]
	mov ecx, [ecx+0Ch]
	mov [ebx], ecx
	mov [edi+eax*2], dx
	inc edx
	jmp loc_425876

loc_4258BB:
	xor edx, edx ; jumptable 00425585 case 3

loc_4258BD:
	mov ecx, [esp+0CAh]
	movsx eax, dx
	sar ecx, 10h
	cmp eax, ecx
	jge loc_4255BE
	imul ecx, eax, 14h
	mov ebx, [esp+0ACh]
	add ebx, ecx
	lea ecx, 0[eax*4]
	mov [esp+0C4h], ebx
	lea ebx, [esi+ecx]
	mov ecx, [esp+0C4h]
	mov ecx, [ecx+10h]
	mov [ebx], ecx
	mov [edi+eax*2], dx
	inc edx
	jmp loc_4258BD

loc_425902:
	movsx eax, word [edi]
	mov eax, [esi+eax*4]
	mov [esp], eax
	mov eax, [esp+0CAh]
	sar eax, 10h
	movsx eax, word [edi+eax*2-2]
	mov eax, [esi+eax*4]
	mov ecx, [esp]
	mov [esp+0BCh], eax
	sub eax, ecx
	jnz loc_425967
	inc dword [esp+0BCh]

loc_425932:
	mov eax, [esp]
	push eax
	push aD_5 ; "%d"
	lea eax, [esp+5Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, [esp+0BCh]
	push edx
	push aD_5 ; "%d"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_425722

loc_425967:
	cmp eax, 2
	jle loc_42597D
	cmp eax, 5
	jge loc_42597D
	lea eax, [ecx+5]
	mov [esp+0BCh], eax
	jmp loc_425932

loc_42597D:
	cmp eax, 5
	jle loc_425996
	cmp eax, 0Ah
	jge loc_425996
	mov eax, [esp]
	add eax, 0Ah
	mov [esp+0BCh], eax
	jmp loc_425932

loc_425996:
	cmp eax, 0Ah
	jle loc_425932
	cmp eax, 14h
	jge loc_425932
	mov eax, [esp]
	add eax, 14h
	mov [esp+0BCh], eax
	jmp loc_425932

loc_4259AF:
	mov ecx, 7271h
	jmp loc_4255F5

loc_4259B9:
	cmp eax, 2
	jle loc_4259DD
	cmp eax, 5
	jg loc_4259DD
	lea eax, 0[ecx*4]
	mov edx, [esp]
	add eax, ecx
	add edx, eax
	mov [esp+0BCh], edx
	jmp loc_4256A5

loc_4259DD:
	cmp eax, 5
	jle loc_425A03
	cmp eax, 0Ah
	jg loc_425A03
	lea eax, 0[ecx*4]
	add eax, ecx
	mov edx, [esp]
	add eax, eax
	add edx, eax
	mov [esp+0BCh], edx
	jmp loc_4256A5

loc_425A03:
	cmp eax, 0Ah
	jle loc_4256A5
	mov [esp+0C4h], eax
	fild dword [esp+0C4h]
	fmul dword [flt_4C9DEC]
	sub esp, 8
	fstp qword [esp]
	call floor_
	fld1
	faddp st1, st0
	fmul qword [dbl_4C9DF4]
	mov [esp+0C8h], ecx
	mov eax, [esp]
	fild dword [esp+0C8h]
	fmulp st1, st0
	mov [esp+0C8h], eax
	fild dword [esp+0C8h]
	faddp st1, st0
	call __CHP
	fistp dword [esp+0BCh]
	jmp loc_4256A5

loc_425A69:
	movsx eax, word [edi]
	fild dword [esi+eax*4]
	fmul dword [flt_4C9DFC]
	sub esp, 8
	fstp qword [esp]
	call floor_
	mov eax, [esp+0CAh]
	sar eax, 10h
	movsx eax, word [edi+eax*2-2]
	fmul qword [dbl_4C9E04]
	fild dword [esi+eax*4]
	fmul dword [flt_4C9DFC]
	fxch st1
	call __CHP
	fistp dword [esp]
	sub esp, 8
	fstp qword [esp]
	call ceil_
	fmul qword [dbl_4C9E04]
	mov ecx, [esp]
	call __CHP
	fistp dword [esp+0BCh]
	mov edx, [esp+0BCh]
	sub edx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	test eax, eax
	jnz loc_425B0B
	add dword [esp+0BCh], 40h

loc_425AEA:
	lea edx, [esp+54h]
	mov eax, [esp]
	call sub_41B150
	lea edx, [esp+4]
	mov eax, [esp+0BCh]
	call sub_41B150
	jmp loc_425722

loc_425B0B:
	cmp eax, 2
	jle loc_425B24
	cmp eax, 5
	jg loc_425B24
	lea eax, [ecx+140h]
	mov [esp+0BCh], eax
	jmp loc_425AEA

loc_425B24:
	cmp eax, 5
	jle loc_425B3F
	cmp eax, 0Ah
	jg loc_425B3F
	mov eax, [esp]
	add eax, 280h
	mov [esp+0BCh], eax
	jmp loc_425AEA

loc_425B3F:
	cmp eax, 0Ah
	jle loc_425AEA
	mov [esp+0C8h], eax
	fild dword [esp+0C8h]
	fmul dword [flt_4C9DEC]
	sub esp, 8
	fstp qword [esp]
	call floor_
	fld1
	faddp st1, st0
	fmul qword [dbl_4C9DF4]
	mov eax, [esp]
	fmul qword [dbl_4C9E04]
	mov [esp+0C8h], eax
	fild dword [esp+0C8h]
	faddp st1, st0
	call __CHP
	fistp dword [esp+0BCh]
	jmp loc_425AEA

loc_425B97:
	mov eax, [esp+0CCh]
	dec eax
	mov [esp+0D4h], ax
	test ax, ax
	jle loc_425CA8

loc_425BB0:
	mov ecx, [esp+0D2h]
	sar ecx, 10h
	mov eax, [esp+0B8h]
	lea edx, 0[ecx*8]
	add edx, eax
	push 0FFFFFF50h
	mov ebx, [edx-4]
	push ebx
	mov eax, [edx-8]
	push eax
	call floor_
	mov eax, [esp+0CEh]
	sar eax, 10h
	sub eax, ecx
	mov [esp+0CCh], eax
	fild dword [esp+0CCh]
	fmul qword [dbl_4C9E14]
	fmul qword [dbl_4C9E1C]
	fxch st1
	call __CHP
	mov ebx, [edx+4]
	fistp dword [esp+0B4h]
	push ebx
	mov ecx, eax
	mov eax, [edx]
	dec ecx
	push eax
	fadd qword [dbl_4C9E3C]
	mov [esp+0D4h], ecx
	call __CHP
	fistp dword [esp+0D0h]
	call floor_
	fild dword [esp+0CCh]
	fmul qword [dbl_4C9E14]
	fmul qword [dbl_4C9E1C]
	mov ecx, [esp+0B4h]
	fxch st1
	call __CHP
	mov ebx, [esp+0C8h]
	fistp dword [esp+0C8h]
	fadd qword [dbl_4C9E3C]
	mov edx, [esp+0C8h]
	call __CHP
	fistp dword [esp+0C8h]
	mov eax, [esp+0C8h]
	call sub_4967E0
	mov ecx, [esp+0D4h]
	dec ecx
	mov [esp+0D4h], cx
	test cx, cx
	jg loc_425BB0

loc_425CA8:
	mov eax, edi
	mov edx, [esp+0B8h]
	call sub_4848FC
	test edx, edx
	jz loc_425CC1
	mov eax, edx
	call sub_4848FC

loc_425CC1:
	test esi, esi
	jz loc_425CCC
	mov eax, esi
	call sub_4848FC

loc_425CCC:
	mov edx, 1
	mov eax, edx
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret
;sub_425130 endp

sub_425CE0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 5Ch
	mov edi, eax
	mov esi, ecx
	lea ecx, [esp+58h]
	xor edx, edx
	movsx ebp, bx
	mov [esp+54h], edx
	mov eax, ebp
	mov edx, esp
	lea ebx, [esp+54h]
	call sub_425F90
	lea edx, [esp+50h]
	mov eax, esp
	call sub_4877BC
	cmp dword [esp+50h], 0
	jnz loc_425D26
	mov eax, ebp
	call sub_425DD0
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_425D26:
	mov ebx, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	mov ebp, 229h
	mov edx, [esp+58h]
	mov eax, aPrhbuf ; "prhbuf"
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], ebp
	call sub_484498
	mov ebx, [esp+58h]
	mov ebp, eax
	mov edx, eax
	mov eax, [esp+50h]
	call sub_487958
	mov eax, [esp+50h]
	call sub_487950
	mov eax, [esp+6Ah]
	sar eax, 10h
	call sub_41A000
	mov ecx, eax
	movsx eax, si
	add eax, eax
	mov ebx, eax
	shl ebx, 4
	movsx edx, cx
	sub ebx, eax
	lea eax, 0[edx*4]
	add eax, edx
	add eax, eax
	lea edx, [ebx+eax]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 2
	mov ecx, 0C8h
	lea esi, [eax+ebp]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, ebp
	call sub_4848FC
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_425CE0 endp

sub_425DD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 2394h
	mov [esp+2390h], ax
	add eax, 14h
	lea edx, [esp+233Ch]
	cwde
	call sub_425F90
	mov edx, aR_2 ; "r"
	lea eax, [esp+233Ch]
	mov esi, 14h
	call fopen_wrap
	mov ecx, eax
	test eax, eax
	jnz loc_425F00
	xor ebx, ebx
	xor edx, edx

loc_425E1A:
	movsx eax, bx
	imul eax, 14h
	mov [esp+eax], dx
	mov [esp+eax+2], dx
	mov [esp+eax+4], dx
	mov [esp+eax+8], edx
	mov [esp+eax+0Ch], edx
	inc ebx
	mov [esp+eax+10h], edx
	cmp bx, 1C2h
	jl loc_425E1A

loc_425E44:
	test ecx, ecx
	jz loc_425E4F
	push edx

	push ecx
	call fclose_wrap
	pop ecx

	pop edx

loc_425E4F:
	mov dword [dword_4DB1D8], aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	imul edx, esi, 1C3h
	mov ecx, 1EDh
	mov eax, aRecords_1 ; "records"
	xor ebx, ebx
	mov dword [dword_4DB1DC], ecx
	lea ecx, 0[esi*8]
	call sub_484498
	sub ecx, esi
	mov ebp, eax
	shl ecx, 5
	mov edi, eax
	add ecx, esi
	mov esi, esp
	add ecx, ecx
	mov [esp+238Ch], eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+238Eh]
	lea edx, [esp+233Ch]
	sar eax, 10h
	call sub_425F90
	mov eax, ebp
	call sub_484D94
	mov edx, ebp
	mov ebx, eax
	lea eax, [esp+233Ch]
	call sub_4875B0
	test ax, ax
	jnz loc_425EDF
	mov eax, 2F3h
	call sub_402CD0

loc_425EDF:
	mov ebx, [esp+238Ch]
	test ebx, ebx
	jnz loc_425F73
	mov eax, 1
	add esp, 2394h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_425F00:
	xor ebx, ebx
	mov ebp, aD_5 ; "%d"

loc_425F07:
	movsx eax, bx
	imul eax, 14h
	mov edx, esp
	add edx, eax

	push edx
	push ebp
	push ecx
	call fscanf_wrap
	pop ecx
	add esp, 4
	pop edx

	lea eax, [edx+2]
	push edx

	push eax
	push ebp
	push ecx
	call fscanf_wrap
	pop ecx
	add esp, 8

	pop edx

	lea eax, [edx+4]
	push edx

	push eax
	push ebp
	push ecx
	call fscanf_wrap
	pop ecx
	add esp, 8

	pop edx

	lea eax, [edx+8]
	push edx

	push eax
	push ebp
	push ecx
	call fscanf_wrap
	pop ecx
	add esp, 8

	pop edx

	lea eax, [edx+0Ch]
	push edx

	push eax
	push ebp
	push ecx
	call fscanf_wrap
	pop ecx
	add esp, 8

	pop edx

	add edx, 10h
	push edx
	push aD_6 ; "%d\n"
	push ecx
	inc ebx
	call fscanf_wrap
	pop ecx
	add esp, 4
	pop edx

	cmp bx, 1C2h
	jl loc_425F07
	jmp loc_425E44

loc_425F73:
	mov eax, ebx
	call sub_4848FC
	mov eax, 1
	add esp, 2394h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_425DD0 endp

sub_425F90: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebx, eax
	mov eax, edx
	mov ecx, 8
	mov edi, esp
	mov esi, off_424E38
	rep movsd
	cmp bx, 14h
	jl loc_426001
	cmp dword [dword_512228], 1
	jnz loc_425FE6
	movsx edx, bx
	push a_ssf_0 ; ".ssf"
	mov edi, [esp+edx*4-4Ch]

loc_425FC5:
	push edi
	mov ebp, dword [dword_5134DC]
	push ebp
	push aSbSS ; "%sb%s%s"

loc_425FD2:
	push eax
	call sprintf_
	add esp, 14h
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_425FE6:
	movsx edx, bx
	push a_ssf_0 ; ".ssf"
	mov ecx, [esp+edx*4-4Ch]
	push ecx
	mov esi, dword [dword_5134DC]
	push esi
	push aSSS_0 ; "%s%s%s"
	jmp loc_425FD2

loc_426001:
	cmp dword [dword_512228], 1
	jnz loc_426018
	movsx edx, bx
	push a_stf_0 ; ".stf"
	mov edi, [esp+edx*4+4]
	jmp loc_425FC5

loc_426018:
	movsx edx, bx
	push a_stf_0 ; ".stf"
	mov ecx, [esp+edx*4+4]
	push ecx
	mov esi, dword [dword_5134DC]
	push esi
	push aSSS_0 ; "%s%s%s"
	push eax
	call sprintf_
	add esp, 14h
	mov eax, ebx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_425F90 endp

sub_426050: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 98h
	mov ebp, eax
	mov esi, dword_512F4C
	mov ebx, 14h
	lea edi, [esp+50h]
	xor eax, eax
	xor edx, edx
	xor ecx, ecx
	mov al, byte [byte_512DBF]
	mov [esp+6Ch], edx
	mov [esp+68h], ecx
	mov [esp+74h], ecx
	mov [esp+70h], esi
	mov edx, 1
	mov esi, off_424E20
	mov [esp+88h], ax
	xor ecx, ecx
	xor eax, eax
	mov [esp+7Ch], edx
	mov al, byte [byte_512DB8]
	mov [esp+80h], edx
	mov [esp+8Ch], ax
	xor eax, eax
	mov [esp+84h], cx
	mov al, byte [byte_512DB0]
	mov ecx, 6
	mov [esp+94h], ax
	mov ah, byte [byte_512DBC]
	rep movsd
	test ah, 1
	jnz loc_426520
	mov word [esp+78h], 7

loc_4260E9:
	xor edx, edx
	mov eax, [esp+86h]
	mov dl, byte [byte_512DBD]
	sar eax, 10h
	add edx, 0Ch
	cmp eax, edx
	jl loc_42610C
	xor eax, eax
	mov [esp+88h], ax

loc_42610C:
	mov edi, aCNfs2seFron_11 ; "c:\\nfs2se\\frontend\\pc\\prhstat.c"
	lea edx, 0[ebx*4]
	mov eax, 70h
	sub edx, ebx
	mov dword [dword_4DB1DC], eax
	shl edx, 2
	mov eax, aPrhdata ; "prhdata"
	sub edx, ebx
	mov ebx, 20h
	mov dword [dword_4DB1D8], edi
	call sub_4844B0
	mov edi, eax
	test eax, eax
	jz loc_42652C
	mov eax, [esp+78h]
	dec eax
	mov [esp+90h], eax

loc_426154:
	cmp dword [esp+6Ch], 0
	jnz loc_426774
	cmp word [esp+7Ch], 0
	jz loc_4261B0
	mov ecx, [esp+92h]
	mov edx, esp
	sar ecx, 10h
	xor ebx, ebx
	mov eax, ecx
	mov [esp+7Ch], ebx
	call sub_41B230
	mov eax, esp
	xor ebx, ebx
	mov [ebp+0], eax
	mov eax, ebp
	mov dword [dword_4D2098], ebx
	call sub_410E80
	push ebx
	mov eax, ecx
	mov edx, aRec6_1 ; "rec6"
	call sub_419FD0
	mov ebx, 1
	movsx ecx, ax
	xor eax, eax
	call sub_428140

loc_4261B0:
	cmp word [esp+80h], 0
	jz loc_426209
	mov ecx, [esp+86h]
	xor eax, eax
	mov ebx, [esp+92h]
	mov al, byte [byte_512DBA]
	mov si, word [dword_512228]
	mov dword [dword_512228], eax
	mov eax, [esp+8Ah]
	mov edx, [esp+70h]
	sar eax, 10h
	sar ecx, 10h
	push eax
	sar ebx, 10h
	mov eax, edi
	call sub_425CE0
	movsx eax, si
	xor esi, esi
	mov dword [dword_512228], eax
	mov [esp+80h], esi

loc_426209:
	call sub_4833C7
	mov esi, [esp+74h]
	mov edx, 400h
	xor ecx, ecx
	xor ebx, ebx
	add esi, eax
	call sub_428A20
	mov eax, [ebp+4]
	call sub_405B30
	xor eax, eax
	mov edx, 400h
	mov al, byte [byte_512DFB]
	xor ecx, ecx
	xor ebx, ebx
	mov eax, [esp+eax*4+50h]
	call sub_405B30
	mov dl, byte [byte_512DFB]
	mov [esp+74h], esi
	cmp dl, 5
	jnz loc_42656A
	cmp byte [byte_512DBA], 1
	jnz loc_42653D
	mov eax, 0Dh
	call sub_41B710
	push eax
	mov eax, [esp+8Eh]
	sar eax, 10h
	push eax
	mov eax, 2B8h
	call sub_41B710
	push eax
	push aSDS_0 ; "%s %d (%s)"

loc_426289:
	lea eax, [esp+10h]
	push eax
	call sprintf_
	add esp, 14h

loc_426296:
	push 2
	push 1
	mov eax, 2B8h
	call sub_41B650
	movsx ebx, ax
	mov eax, 2B8h
	call sub_41B670
	add eax, 1Eh
	mov ecx, 18h
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov eax, [esp+86h]
	sar eax, 10h
	call sub_41A420
	push eax
	push aS_5 ; "%s"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push 2
	push 1
	mov eax, 0CCh
	call sub_41B650
	add eax, 19h
	movsx ebx, ax
	mov eax, 2B8h
	call sub_41B670
	add eax, 1Eh
	mov ecx, 18h
	movsx edx, ax
	lea eax, [esp+8]
	call sub_4054E0
	mov ecx, [esp+82h]
	mov ebx, [esp+92h]
	mov edx, edi
	mov eax, ebp
	sar ecx, 10h
	sar ebx, 10h
	call sub_425130
	mov eax, ebp
	call sub_40FA90
	mov eax, dword [dword_4D4D24]
	mov edx, esi
	xor ecx, ecx
	mov eax, [eax+20h]
	xor ebx, ebx
	call sub_426B70
	mov eax, 12h
	call sub_4274F0
	cmp dword [dword_4D2310], 0
	jz loc_42637C
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0

loc_42637C:
	call sub_4976B8
	mov eax, ebp
	call sub_423CA0
	call sub_405960
	mov esi, eax
	test ax, ax
	jz loc_426154
	mov edx, [esp+74h]
	cmp edx, [esp+68h]
	jle loc_426154
	add edx, 0Fh
	mov [esp+68h], edx
	cmp word [ebp+0Ah], 0
	jnz loc_4265DF
	cmp ax, 4B00h
	jnz loc_4265DF
	mov edx, [esp+94h]
	mov eax, 1
	sub edx, eax
	mov [esp+80h], eax
	mov [esp+94h], dx
	test dx, dx
	jl loc_4265CB

loc_4263EF:
	mov edx, 7Fh
	xor eax, eax
	mov ecx, 1
	call sub_4423F0
	xor ebx, ebx
	xor eax, eax
	mov [esp+7Ch], ecx
	call sub_403550
	xor edx, edx
	mov eax, 12h
	xor ecx, ecx
	call sub_4274F0

loc_42641B:
	mov ax, [ebp+0Ah]
	cmp ax, 1
	jnz loc_426642
	cmp si, 4B00h
	jnz loc_426642
	mov edx, [esp+8Ah]
	sar edx, 10h
	mov [esp+80h], eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+8Ch], ax
	cmp ax, 2
	jge loc_426466
	mov word [esp+8Ch], 8

loc_426466:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor eax, eax
	call sub_403550

loc_426479:
	cmp word [ebp+0Ah], 2
	jnz loc_4266AE
	cmp si, 4B00h
	jnz loc_4266AE
	mov eax, [esp+88h]
	mov ecx, 1
	sub eax, ecx
	mov [esp+80h], ecx
	mov [esp+88h], ax
	test ax, ax
	jl loc_426695

loc_4264B5:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor eax, eax
	call sub_403550

loc_4264C8:
	mov bx, [ebp+0Ah]
	cmp bx, 3
	jnz loc_426720
	cmp si, 4B00h
	jnz loc_426720
	mov ecx, [esp+84h]
	dec ecx
	mov [esp+84h], cx
	test cx, cx
	jl loc_426713

loc_4264FA:
	mov edx, 7Fh
	xor eax, eax
	call sub_4423F0
	xor eax, eax
	call sub_403550

loc_42650D:
	movsx edx, si
	mov eax, ebp
	call sub_410414
	mov [esp+6Ch], eax
	jmp loc_426154

loc_426520:
	mov word [esp+78h], 8
	jmp loc_4260E9

loc_42652C:
	mov eax, [esp+6Ch]
	add esp, 98h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42653D:
	mov eax, [esp+8Ah]
	sar eax, 10h
	push eax
	mov eax, 2B8h
	call sub_41B710
	push eax
	push aSD_2 ; "%s %d"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	jmp loc_426296

loc_42656A:
	cmp byte [byte_512DBA], 1
	jnz loc_42659E
	mov eax, 0Dh
	call sub_41B710
	push eax
	mov eax, 2B8h
	call sub_41B710
	push eax
	mov eax, [esp+92h]
	sar eax, 10h
	push eax
	push aDSS ; "%d %s (%s)"
	jmp loc_426289

loc_42659E:
	mov eax, 2B8h
	call sub_41B710
	push eax
	mov eax, [esp+8Eh]
	sar eax, 10h
	push eax
	push aDS_1 ; "%d %s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	jmp loc_426296

loc_4265CB:
	mov eax, [esp+90h]
	mov [esp+94h], ax
	jmp loc_4263EF

loc_4265DF:
	cmp word [ebp+0Ah], 0
	jnz loc_42641B
	cmp si, 4D00h
	jnz loc_426637

loc_4265F1:
	mov edx, [esp+94h]
	mov ecx, 1
	add edx, ecx
	mov eax, [esp+76h]
	mov [esp+94h], dx
	sar eax, 10h
	mov edx, [esp+92h]
	dec eax
	sar edx, 10h
	mov [esp+80h], ecx
	cmp edx, eax
	jle loc_4263EF
	xor ebx, ebx
	mov [esp+94h], bx
	jmp loc_4263EF

loc_426637:
	cmp si, 0Dh
	jz loc_4265F1
	jmp loc_42641B

loc_426642:
	cmp word [ebp+0Ah], 1
	jnz loc_426479
	cmp si, 4D00h
	jnz loc_42668A

loc_426654:
	mov ecx, [esp+8Ch]
	mov ebx, 1
	add ecx, ecx
	mov [esp+80h], ebx
	mov [esp+8Ch], cx
	cmp cx, 8
	jle loc_426466
	mov word [esp+8Ch], 2
	jmp loc_426466

loc_42668A:
	cmp si, 0Dh
	jz loc_426654
	jmp loc_426479

loc_426695:
	xor eax, eax
	mov al, byte [byte_512DBD]
	add eax, 0Bh
	mov [esp+88h], ax
	jmp loc_4264B5

loc_4266AE:
	cmp word [ebp+0Ah], 2
	jnz loc_4264C8
	cmp si, 4D00h
	jnz loc_426708

loc_4266C0:
	mov edx, [esp+88h]
	mov ecx, 1
	add edx, ecx
	xor eax, eax
	mov [esp+88h], dx
	mov al, byte [byte_512DBD]
	mov edx, [esp+86h]
	add eax, 0Ch
	sar edx, 10h
	mov [esp+80h], ecx
	cmp edx, eax
	jl loc_4264B5
	xor ebx, ebx
	mov [esp+88h], bx
	jmp loc_4264B5

loc_426708:
	cmp si, 0Dh
	jz loc_4266C0
	jmp loc_4264C8

loc_426713:
	mov [esp+84h], bx
	jmp loc_4264FA

loc_426720:
	cmp word [ebp+0Ah], 3
	jnz loc_42650D
	cmp si, 4D00h
	jnz loc_42675B

loc_426732:
	mov eax, [esp+84h]
	inc eax
	mov [esp+84h], ax
	cmp ax, 3
	jle loc_4264FA
	xor ebx, ebx
	mov [esp+84h], bx
	jmp loc_4264FA

loc_42675B:
	cmp si, 0Dh
	jz loc_426732
	movsx edx, si
	mov eax, ebp
	call sub_410414
	mov [esp+6Ch], eax
	jmp loc_426154

loc_426774:
	test edi, edi
	jz loc_42677F
	mov eax, edi
	call sub_4848FC

loc_42677F:
	xor eax, eax
	call sub_403550
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 12h
	call sub_4274F0
	xor ecx, ecx
	mov eax, [esp+6Ch]
	mov dword [dword_4D2098], ecx
	add esp, 98h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_426050 endp

dword_4267B0: dd 0
	dd 1, 2, 3

sub_4267C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 18h
	mov edi, esp
	mov esi, dword_4267B0
	mov ecx, dword [dword_4D4D30]
	movsd
	movsd
	movsd
	movsd
	test ecx, ecx
	jnz loc_4267E2
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	ret

loc_4267E2:
	push ebx
	fild dword [dword_4EC4BC]
	mov ebx, 0FFFFFFFFh
	mov [esp+14h], eax
	mov [esp+18h], edx
	push ecx
	fild dword [esp+18h]
	fild dword [esp+1Ch]
	push 1
	mov dword [dword_4D4CFC], ebx
	mov dword [dword_4D4CDC], ebx
	mov dword [dword_4D4CBC], ebx
	mov dword [dword_4D4C9C], ebx
	fxch st1
	fstp dword [flt_4D4C8C]
	fstp dword [flt_4D4C90]
	fld dword [flt_4D4C8C]
	fld st0
	fld dword [flt_4D4C90]
	fxch st1
	fstp dword [flt_4D4CEC]
	fstp dword [flt_4D4CB0]
	fadd st0, st1
	fld dword [flt_4D4CB0]
	fxch st1
	fst dword [flt_4D4CAC]
	fxch st1
	faddp st2, st0
	fstp dword [flt_4D4CCC]
	fst dword [flt_4D4CD0]
	fstp dword [flt_4D4CF0]
	call sub_497738
	lea eax, [esp+4]
	push eax
	push flt_4D4C8C
	push 1
	call sub_497D6C
	pop ebx
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	ret
;sub_4267C0 endp

sub_426890: ;SUBROUTINE
	push ecx
	push edi
	mov edi, eax
	mov ecx, dword [dword_4D2098]
	test ecx, ecx
	jz loc_4268A1
	pop edi
	pop ecx
	ret

loc_4268A1:
	push esi
	push ebx
	mov ebx, 1
	mov esi, 20h
	mov dword [dword_4D2098], ebx
	mov dword [dword_4EC4BC], esi
	call sub_4289F0
	mov eax, edx
	call sub_4284B0
	push ecx
	push ecx
	push 7
	push esi
	push esi
	mov ebx, esi
	call sub_497464
	mov dword [dword_4D4D30], eax
	mov edx, esi
	xor ecx, ecx
	mov eax, esi
	call sub_492820
	mov esi, eax
	call sub_4825A8
	cmp byte [byte_4DB25C], 8
	jnz loc_426949
	mov eax, 0FFh

loc_4268F8:
	call sub_482740
	mov eax, edi
	xor ebx, ebx
	xor edx, edx
	mov ecx, 1
	call sub_483460
	call sub_4824BC
	mov edx, 6Dh
	mov eax, [esi+20h]
	xor ebx, ebx
	call sub_49A118
	push 0
	mov ebx, eax
	add eax, 10h
	push eax
	mov edi, dword [dword_4D4D30]
	push edi
	call sub_49755C
	mov eax, ebx
	call sub_4848FC
	mov eax, esi
	call sub_482DA0
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_426949:
	xor eax, eax
	jmp loc_4268F8
;sub_426890 endp

sub_426950: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edx, 0FFFFFFFFh
	xor edi, edi
	mov dword [dword_4D4CFC], edx
	mov dword [dword_4D4CDC], edx
	mov dword [dword_4D4CBC], edx
	mov dword [dword_4D4C9C], edx
	mov ebp, 1

loc_42697D:
	mov [esp], edi
	xor esi, esi
	fild dword [esp]
	fst dword [flt_4D4C8C]
	fld st0
	fadd dword [flt_4C9F10]
	fxch st1
	fstp dword [flt_4D4CEC]
	fst dword [flt_4D4CAC]
	fstp dword [flt_4D4CCC]

loc_4269A7:
	fld dword [flt_4D4C8C]
	mov eax, dword [dword_4D4D28]
	mov [esp], esi
	mov ebx, esi
	call __CHP
	fild dword [esp]
	fxch st1
	fistp dword [esp]
	fstp dword [flt_4D4C90]
	mov eax, [eax+20h]
	mov edx, dword [flt_4D4C90]
	mov dword [flt_4D4CB0], edx
	fld dword [flt_4D4CB0]
	fadd dword [flt_4C9F10]
	mov edx, [esp]
	fst dword [flt_4D4CD0]
	fstp dword [flt_4D4CF0]
	call sub_4850B0
	mov eax, dword [dword_4D4D28]
	mov eax, [eax+20h]
	push 0
	add eax, 10h
	push eax
	mov eax, dword [dword_4D4D2C]
	push eax
	call sub_49755C
	mov edx, dword [dword_4D4D2C]
	push edx
	push ebp
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push ebp
	add esi, 20h
	call sub_497D6C
	cmp esi, 1E0h
	jnz loc_4269A7
	add edi, 20h
	cmp edi, 280h
	jnz loc_42697D
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_426950 endp

sub_426A60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov [esp+4], edx
	mov [esp], ebx
	push 0
	push 0
	push 4
	push 20h
	push 20h
	mov ebx, 10h
	call sub_497464
	mov edx, 20h
	mov ebp, eax
	xor ecx, ecx
	mov eax, edx
	call sub_492820
	mov ecx, 20h
	mov esi, eax
	call sub_4825A8
	xor ebx, ebx
	push 20h
	xor edx, edx
	mov eax, edi
	call sub_49A4A0
	fild word [edi+4]
	fild word [edi+6]
	mov edx, 0FFFFFFFFh
	mov eax, [esp+4]
	push 0
	mov edi, [esi+20h]
	mov dword [dword_4D4CFC], edx
	mov dword [dword_4D4CDC], edx
	mov dword [dword_4D4CBC], edx
	mov [esp+0Ch], eax
	mov dword [dword_4D4C9C], edx
	fild dword [esp+0Ch]
	add edi, 10h
	mov eax, [esp+4]
	fst dword [flt_4D4C8C]
	fld st0
	push edi
	mov [esp+10h], eax
	fstp dword [flt_4D4CEC]
	fild dword [esp+10h]
	push ebp
	fstp dword [flt_4D4C90]
	faddp st2, st0
	fld dword [flt_4D4C90]
	fxch st2
	fst dword [flt_4D4CAC]
	fxch st2
	fst dword [flt_4D4CB0]
	faddp st1, st0
	fxch st1
	fstp dword [flt_4D4CCC]
	fst dword [flt_4D4CD0]
	fstp dword [flt_4D4CF0]
	call sub_49755C
	push ebp
	push 1
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	call sub_497D6C
	mov eax, esi
	call sub_482DA0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_426A60 endp

sub_426B70: ;SUBROUTINE
	cmp word [eax+4], 280h
	jnz loc_426B84
	cmp word [eax+6], 1E0h
	jz sub_426950

loc_426B84:
	push edx
	push ebx
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_426A60
	pop ebx
	pop edx
	ret
;sub_426B70 endp

sub_426C50: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 2Ch
	and esp, 0FFFFFFF8h
	mov [esp+10h], eax
	mov [esp+20h], edx
	mov edi, ebx
	mov [esp+18h], ecx
	mov ebx, [ebp+14h]
	mov ecx, [ebp+18h]
	mov eax, [esp+20h]
	mov edx, 3B800000h
	inc eax
	mov [esp+4], edx
	mov [esp+14h], eax
	mov eax, dword [dword_4E54AC]
	mov [esp+8], edx
	cmp eax, 24h
	jz loc_426EB3
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+1Ch], eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4E54AC]
	mov esi, eax
	cmp edx, 10h
	jnz loc_426ECF
	mov edx, [esp+14h]
	mov [esp+20h], edx
	mov edx, [ebp+10h]
	mov eax, [esp+1Ch]
	add edx, 3
	add edi, 4

loc_426CD3:
	mov [ebp+10h], edx

loc_426CD6:
	mov [esp+24h], edi
	mov edx, [esp+20h]
	fild dword [esp+24h]
	mov edi, dword [dword_4E54AC]
	mov [esp+24h], edx
	fstp dword [esp+0Ch]
	fild dword [esp+24h]
	fstp dword [esp]
	cmp edi, 12h
	jnz loc_426D29
	cmp byte [ebp+20h], 45h
	jnz loc_426D0E
	fld dword [esp]
	fadd qword [dbl_4C9F00]
	fstp dword [esp]

loc_426D0E:
	mov dh, [ebp+20h]
	cmp dh, 41h
	jb loc_426D29
	cmp dh, 5Ah
	ja loc_426D29
	fld dword [esp+0Ch]
	fadd qword [dbl_4C9F00]
	fstp dword [esp+0Ch]

loc_426D29:
	fld dword [esp]
	fld st0
	fld dword [esp+0Ch]
	fld st0
	fxch st2
	fld qword [dbl_4C9F08]
	fxch st1
	fadd st0, st1
	fxch st3
	faddp st1, st0
	fld dword [esp+8]
	fmul st3, st0
	fld dword [esp+4]
	fmulp st2, st0
	mov [esp+24h], ebx
	mov [esp+28h], ecx
	fild dword [esp+28h]
	fild dword [esp+24h]
	faddp st6, st0
	faddp st3, st0
	fmulp st4, st0
	fxch st1
	fmul dword [esp+4]
	mov edx, [ebp+1Ch]
	mov ecx, [esp+10h]
	mov dword [dword_4D4CFC], edx
	mov dword [dword_4D4CDC], edx
	mov dword [dword_4D4CBC], edx
	mov dword [dword_4D4C9C], edx
	mov edx, [esp+18h]
	push ecx
	mov [esp+28h], edx
	push 1
	fild dword [esp+2Ch]
	fxch st3
	fstp dword [flt_4D4D04]
	fxch st1
	fstp dword [flt_4D4CC8]
	fld dword [flt_4D4D04]
	fld dword [flt_4D4CC8]
	fxch st3
	fstp dword [flt_4D4CEC]
	fxch st3
	fstp dword [flt_4D4CE4]
	fstp dword [flt_4D4D08]
	lea edi, [edx+esi]
	fld dword [flt_4D4CEC]
	fld dword [flt_4D4CE4]
	fld dword [flt_4D4D08]
	fxch st4
	fstp dword [flt_4D4CA4]
	fxch st2
	fstp dword [flt_4D4CA8]
	mov edx, [ebp+10h]
	fstp dword [flt_4D4C8C]
	mov [esp+2Ch], edi
	fstp dword [flt_4D4CC4]
	fstp dword [flt_4D4CE8]
	fild dword [esp+2Ch]
	fstp dword [flt_4D4CCC]
	mov [esp+2Ch], edx
	add eax, edx
	fild dword [esp+2Ch]
	mov edx, dword [flt_4D4CCC]
	mov dword [flt_4D4CAC], edx
	mov [esp+2Ch], eax
	fstp dword [flt_4D4CB0]
	fild dword [esp+2Ch]
	mov eax, dword [flt_4D4CB0]
	mov dword [flt_4D4C90], eax
	fst dword [flt_4D4CF0]
	fstp dword [flt_4D4CD0]
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	xor ebx, ebx
	call sub_497D6C
	mov ecx, 3F800000h
	mov edx, dword [dword_4E54AC]
	mov dword [flt_4D4D04], ebx
	mov dword [flt_4D4CC8], ebx
	mov dword [flt_4D4CA8], ebx
	mov dword [flt_4D4CA4], ebx
	mov dword [flt_4D4D08], ecx
	mov dword [flt_4D4CE8], ecx
	mov dword [flt_4D4CE4], ecx
	mov dword [flt_4D4CC4], ecx
	cmp edx, 24h
	jnz loc_426EA9
	inc esi

loc_426EA9:
	mov eax, esi
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 14h

loc_426EB3:
	mov edx, [esp+14h]
	lea eax, [ecx-1]
	mov [esp+20h], edx
	mov edx, [ebp+10h]
	add edi, 3
	add edx, 4
	lea esi, [ebx-1]
	jmp loc_426CD3

loc_426ECF:
	cmp edx, 0Dh
	jnz loc_426EFD
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, ecx
	add esi, eax
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	add eax, [esp+1Ch]
	jmp loc_426CD6

loc_426EFD:
	mov edx, [esp+14h]
	mov eax, ecx
	mov esi, ebx
	mov [esp+20h], edx
	jmp loc_426CD6
;sub_426C50 endp

sub_426F10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 100h
	mov ebx, 20h
	mov edx, 100h
	xor ecx, ecx
	mov eax, edx
	call sub_492820
	mov dword [dword_4EC4A8], eax
	call sub_4825A8
	cmp byte [byte_4DB25C], 8
	jnz loc_4270F7
	mov eax, 0FFh

loc_426F4B:
	call sub_482740
	mov esi, dword [dword_5134B8]
	push esi
	xor edx, edx
	push aSswiss36a_ffn ; "%sswiss36a.ffn"
	lea eax, [esp+8]
	mov dword [dword_4EC4AC], edx
	push eax
	mov dword [dword_4EC0B0], edx
	mov dword [dword_4EC0B4], edx
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov esi, eax
	call sub_487060
	xor eax, eax
	call sub_48266C
	mov edx, eax
	mov eax, 0FFFFFFh
	mov ecx, 41h
	call sub_48266C
	call sub_486560
	xor dl, dl
	mov ebx, 0E0h
	mov [esp+1], dl

loc_426FB8:
	mov eax, esp
	mov edx, ebx
	mov [esp], cl
	call sub_427100
	mov edi, dword [dword_4EC0B4]
	inc ebx
	add edi, eax
	inc ecx
	mov dword [dword_4EC0B4], edi
	cmp ecx, 5Ah
	jle loc_426FB8
	mov dh, 20h
	mov eax, esp
	mov [esp], dh
	mov edx, 0FAh
	mov bl, 0D6h
	call sub_427100
	mov edx, 0FBh
	mov ebp, dword [dword_4EC0B4]
	mov [esp], bl
	add ebp, eax
	mov eax, esp
	mov dword [dword_4EC0B4], ebp
	call sub_427100
	mov edx, dword [dword_4EC0B4]
	add edx, eax
	mov eax, esi
	mov dword [dword_4EC0B4], edx
	call sub_4848FC
	mov ecx, dword [dword_5134B8]
	push ecx
	push aSswiss18_ffn_0 ; "%sswiss18.ffn"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov edx, 20h
	mov eax, esp
	call sub_486F40
	mov esi, eax
	call sub_487060
	xor eax, eax
	xor bh, bh
	call sub_48266C
	mov edx, eax
	mov eax, 0FFFFFFh
	mov ecx, 20h
	call sub_48266C
	call sub_486560
	mov [esp+1], bh
	xor ebx, ebx

loc_42706F:
	mov eax, esp
	mov edx, ebx
	mov [esp], cl
	call sub_427100
	mov edi, dword [dword_4EC0B4]
	inc ebx
	add edi, eax
	inc ecx
	mov dword [dword_4EC0B4], edi
	cmp ecx, 100h
	jl loc_42706F
	call sub_4824BC
	mov ecx, 1
	mov eax, dword [dword_4EC4A8]
	mov edx, 6Dh
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_49A118
	push 0
	mov dword [dword_4EC0AC], eax
	add eax, 10h
	push eax
	mov eax, dword [dword_4EC4AC]
	mov ebp, dword dword_4EC4B0[eax*4]
	push ebp
	call sub_49755C
	mov eax, dword [dword_4EC0AC]
	call sub_4848FC
	mov eax, dword [dword_4EC4A8]
	call sub_482DA0
	mov eax, esi
	call sub_4848FC
	add esp, 100h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4270F7:
	xor eax, eax
	jmp loc_426F4B
;sub_426F10 endp

sub_427100: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov edx, 1
	call sub_4823E0
	mov byte byte_4EC3AC[esi], al
	xor eax, eax
	mov edx, dword [dword_4EC0B4]
	mov al, byte byte_4EC3AC[esi]
	add eax, edx
	cmp eax, 0FFh
	jle loc_4271C4
	mov eax, dword [dword_4EC0B0]
	mov ebx, dword [dword_4EC0B0]
	xor ecx, ecx
	add eax, 66h
	add ebx, 33h
	mov dword [dword_4EC0B4], ecx
	mov dword [dword_4EC0B0], ebx
	cmp eax, 0FFh
	jle loc_4271C4
	mov edx, 6Dh
	mov eax, dword [dword_4EC4A8]
	mov dword [dword_4EC0B0], ecx
	xor ebx, ebx
	mov ecx, 1
	mov eax, [eax+20h]
	xor ebp, ebp
	call sub_49A118
	push ebp
	mov dword [dword_4EC0AC], eax
	add eax, 10h
	push eax
	mov eax, dword [dword_4EC4AC]
	mov edx, dword dword_4EC4B0[eax*4]
	push edx
	call sub_49755C
	mov eax, dword [dword_4EC0AC]
	call sub_4848FC
	mov ecx, dword [dword_4EC4AC]
	inc ecx
	mov ah, byte [byte_4DB25C]
	mov dword [dword_4EC4AC], ecx
	cmp ah, 8
	jnz loc_427206
	mov eax, 0FFh

loc_4271BF:
	call sub_482740

loc_4271C4:
	mov al, byte [dword_4EC4AC]
	mov byte byte_4EC0B8[esi], al
	mov al, byte [dword_4EC0B4]
	mov ebx, dword [dword_4EC0B0]
	mov byte byte_4EC2B0[esi], al
	mov al, byte [dword_4EC0B0]
	mov edx, dword [dword_4EC0B4]
	mov byte byte_4EC1B4[esi], al
	mov eax, edi
	call sub_486A30
	xor eax, eax
	mov al, byte byte_4EC3AC[esi]
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_427206:
	xor eax, eax
	jmp loc_4271BF
;sub_427100 endp

sub_427210: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, 0FAh
	mov ebp, 1
	xor edi, edi

loc_427222:
	push 2
	call sub_497680
	call sub_49769C
	push esi
	push ebp
	mov ebx, 20h
	mov ecx, edi
	push 0FFh
	mov edx, edi
	mov eax, ebp
	call sub_427C70
	push esi
	mov ebx, 20h
	push ebp
	mov ecx, edi
	mov edx, edi
	push 0FFh
	mov eax, edi
	sub esi, 0Ah
	call sub_427C70
	call sub_4976B8
	cmp esi, 14h
	jge loc_427222
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_427210 endp

sub_427280: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, eax
	mov edi, edx
	mov [esp+4], ebx
	mov [esp], ecx
	mov esi, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+8], eax
	cmp ebp, eax
	jl loc_42730A

loc_4272A4:
	push 2
	call sub_497680
	call sub_49769C
	push esi
	mov ebx, [esp+8]
	push ebx
	mov eax, 1
	mov ecx, edi
	push ebp
	xor edx, edx
	mov ebx, 20h
	call sub_427C70
	push 0FFFFFFFFh
	mov ecx, 20h
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	call sub_427B30
	cmp dword [esp], 0
	jz loc_4272F3
	mov eax, dword [byte_4D3ECC]
	xor edx, edx
	sar eax, 10h
	call sub_4276F0

loc_4272F3:
	call sub_4976B8
	mov ecx, [esp+8]
	sub esi, 0Ah
	cmp esi, ecx
	jge loc_4272A4

loc_42730A:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_427280 endp

sub_427320: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edi, eax
	mov ebp, edx
	mov [esp], ebx
	mov [esp+4], ecx
	mov esi, eax
	cmp eax, 0FFh
	jg loc_4273A1

loc_42733A:
	push 2
	call sub_497680
	call sub_49769C
	push esi
	mov edx, [esp+4]
	push edx
	mov ebx, 20h
	mov eax, 1
	push ebp
	mov ecx, edi
	xor edx, edx
	call sub_427C70
	push 0FFFFFFFFh
	mov ecx, 20h
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	call sub_427B30
	cmp dword [esp+4], 0
	jz loc_42738A
	mov eax, dword [byte_4D3ECC]
	xor edx, edx
	sar eax, 10h
	call sub_4276F0

loc_42738A:
	add esi, 0Ah
	call sub_4976B8
	cmp esi, 0FFh
	jle loc_42733A

loc_4273A1:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_427320 endp

sub_4273B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov eax, 1Fh
	call sub_486550
	test eax, eax
	jz loc_427408
	mov ebp, 20h
	xor esi, esi

loc_4273CD:
	push 2
	call sub_497680
	call sub_49769C
	xor ebx, ebx
	push 0FFFFFFFFh
	mov ecx, ebp
	mov edx, esi
	mov eax, edi
	call sub_427B30
	sub esi, 0Ch
	call sub_4976B8
	cmp esi, 0FFFFFEBBh
	jg loc_4273CD
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_427408:
	mov esi, 20h
	xor ebp, ebp

loc_42740F:
	push 2
	mov ebx, ebp
	call sub_497680
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, esi
	mov edx, ebp
	mov eax, edi
	call sub_427B30
	dec esi
	call sub_4976B8
	test esi, esi
	jge loc_42740F
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4273B0 endp

sub_427450: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	push 0
	push 4
	call sub_497738
	mov eax, 1Fh
	call sub_486550
	test eax, eax
	jz loc_4274B1
	mov esi, 0FFFFFEC8h
	xor ebp, ebp

loc_427477:
	push 2
	mov ebx, ebp
	call sub_497680
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, 20h
	mov edx, esi
	mov eax, edi
	call sub_427B30
	add esi, 0Ch
	call sub_4976B8
	test esi, esi
	jle loc_427477
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4274B1:
	xor esi, esi
	xor ebp, ebp

loc_4274B5:
	push 2
	mov ebx, ebp
	call sub_497680
	call sub_49769C
	push 0FFFFFFFFh
	mov ecx, esi
	mov edx, ebp
	mov eax, edi
	call sub_427B30
	inc esi
	call sub_4976B8
	cmp esi, 20h
	jle loc_4274B5
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_427450 endp

sub_4274F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0Ch
	and esp, 0FFFFFFF8h
	mov edi, ebx
	mov esi, ecx
	cmp edx, dword [dword_4D4E64]
	jle loc_427695

loc_42750B:
	sub edx, dword [dword_4D4E64]
	cmp edx, 28h
	jle loc_42752D
	mov ebx, dword [dword_4D4E60]
	cmp ebx, 400h
	jge loc_42752D
	lea edx, [ebx+eax]
	mov dword [dword_4D4E60], edx

loc_42752D:
	mov ebx, dword [dword_4D4E60]
	mov eax, ebx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 9
	sbb eax, edx
	sar eax, 9
	mov ecx, eax
	cmp dword [dword_4D4E60], 400h
	jl loc_4276A8
	mov edx, 0FFh
	mov ecx, 80h

loc_427581:
	mov ebx, dword [dword_4D4E60]
	cmp ebx, 100h
	jle loc_4275A6
	cmp ebx, 300h
	jge loc_4275A6
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax

loc_4275A6:
	mov eax, edx
	mov [esp], edi
	mov [esp+4], ecx
	mov [esp+8], esi
	fild dword [esp]
	fild dword [esp+4]
	fild dword [esp+8]
	shl eax, 10h
	mov esi, dword [dword_4D4E44]
	sub eax, 1000000h
	fadd qword [dbl_4C9ED0]
	push esi
	fstp dword [flt_4D4CB0]
	push 1
	fld dword [flt_4D4CB0]
	mov [esp+0Ch], eax
	fxch st2
	fadd dword [flt_4C9EC8]
	fxch st2
	fstp dword [flt_4D4C90]
	mov ebx, [esp+0Ch]
	fld st1
	mov eax, edx
	fld dword [flt_4D4C90]
	shl eax, 8
	fxch st1
	fsub st0, st2
	fxch st3
	faddp st2, st0
	fadd dword [flt_4C9ED8]
	fxch st2
	fstp dword [flt_4D4CEC]
	fstp dword [flt_4D4CCC]
	fstp dword [flt_4D4CF0]
	add eax, ebx
	fld dword [flt_4D4CEC]
	fld dword [flt_4D4CCC]
	fld dword [flt_4D4CF0]
	fxch st2
	fstp dword [flt_4D4C8C]
	fstp dword [flt_4D4CAC]
	add eax, edx
	fstp dword [flt_4D4CD0]
	mov dword [dword_4D4CFC], eax
	mov dword [dword_4D4CDC], eax
	mov dword [dword_4D4CBC], eax
	mov dword [dword_4D4C9C], eax
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	call sub_497D6C
	cmp dword [dword_4D4E60], 400h
	jge loc_4276E3
	mov eax, 1
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_427695:
	xor ebx, ebx
	mov dword [dword_4D4E64], edx
	mov dword [dword_4D4E60], ebx
	jmp loc_42750B

loc_4276A8:
	cmp ebx, 100h
	jge loc_4276C6

loc_4276B0:
	mov edx, ebx
	mov eax, 0FFh
	and edx, 0FFh
	sub eax, edx
	mov edx, eax
	jmp loc_427581

loc_4276C6:
	cmp ebx, 200h
	jle loc_4276D6
	cmp ebx, 300h
	jl loc_4276B0

loc_4276D6:
	mov edx, ebx
	and edx, 0FFh
	jmp loc_427581

loc_4276E3:
	xor eax, eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret
;sub_4274F0 endp

sub_4276F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, dword [dword_4D4E4C]
	mov edi, eax
	cmp byte [byte_512DA9], 1
	jnz loc_4278A4

loc_42770D:
	cmp edi, dword [dword_4D4E50]
	jz loc_42771A
	mov ebp, 400h

loc_42771A:
	cmp edx, dword [dword_4D4E54]
	jg loc_4278B1

loc_427726:
	xor eax, eax
	mov al, byte [byte_512DA9]
	mov dword [dword_4D4E54], edx
	mov dword [dword_4D4E58], eax
	xor eax, eax
	mov dword [dword_4D4E50], edi
	mov al, byte [byte_512DAA]
	xor ebp, ebp
	mov dword [dword_4D4E5C], eax

loc_42774C:
	sub edx, dword [dword_4D4E54]
	cmp edx, 28h
	jg loc_4278E0

loc_42775B:
	lea eax, [edi+1]
	xor esi, esi
	xor ebx, ebx
	mov [esp+4], eax

loc_427766:
	mov eax, dword dword_4EB58C[ebx]
	mov dword [dword_4D4E4C], ebp
	test eax, eax
	jz loc_427871
	cmp edi, 0FFFFFFFFh
	jz loc_4278F4
	cmp esi, [esp+4]
	jnz loc_4278F4

loc_42778D:
	cmp ebp, 400h
	jl loc_42792D
	mov edx, 0FFh
	mov ecx, 40h

loc_4277A3:
	mov eax, edx
	shl eax, 10h
	sub eax, 1000000h
	mov [esp], eax
	mov eax, edx
	shl eax, 8
	mov [esp+8], eax
	mov eax, [esp]
	add eax, [esp+8]
	add eax, edx
	mov dword [dword_4D4E4C], ebp
	mov dword [dword_4D4CFC], eax
	mov dword [dword_4D4CDC], eax
	mov dword [dword_4D4CBC], eax
	mov dword [dword_4D4C9C], eax

loc_4277DC:
	fld dword [flt_4C9EC0]
	fld st0
	fild dword dword_4EB58C[ebx]
	mov [esp+8], ecx
	fstp dword [flt_4D4CB0]
	mov eax, dword dword_4EB5A4[ebx]
	fild dword [esp+8]
	mov edx, dword [flt_4D4CB0]
	mov dword [flt_4D4C90], edx
	push eax
	fld dword [flt_4D4C90]
	fxch st2
	fsub st0, st1
	push 1
	fstp dword [flt_4D4CEC]
	faddp st2, st0
	fadd dword [flt_4C9EC4]
	fld dword [flt_4D4CEC]
	fxch st2
	fstp dword [flt_4D4CCC]
	fstp dword [flt_4D4CF0]
	fld dword [flt_4D4CCC]
	fld dword [flt_4D4CF0]
	fxch st2
	fstp dword [flt_4D4C8C]
	fstp dword [flt_4D4CAC]
	fstp dword [flt_4D4CD0]
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	call sub_497D6C

loc_427871:
	mov ebp, dword [dword_4D4E4C]
	inc esi
	add ebx, 4
	cmp esi, 6
	jl loc_427766
	cmp ebp, 400h
	jge loc_4279CC
	mov eax, 1
	mov dword [dword_4D4E4C], ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4278A4:
	xor ecx, ecx
	mov dword [dword_4EB59C], ecx
	jmp loc_42770D

loc_4278B1:
	xor eax, eax
	mov ecx, dword [dword_4D4E58]
	mov al, byte [byte_512DA9]
	cmp eax, ecx
	jnz loc_427726
	xor eax, ecx
	mov ebx, dword [dword_4D4E5C]
	mov al, byte [byte_512DAA]
	cmp eax, ebx
	jnz loc_427726
	jmp loc_42774C

loc_4278E0:
	cmp ebp, 400h
	jge loc_42775B
	add ebp, 0Ah
	jmp loc_42775B

loc_4278F4:
	test esi, esi
	jnz loc_427900
	test edi, edi
	jz loc_42778D

loc_427900:
	mov ecx, 0FF815412h
	mov dword [dword_4D4E4C], ebp
	mov dword [dword_4D4CDC], ecx
	mov dword [dword_4D4CBC], ecx
	mov dword [dword_4D4C9C], ecx
	mov dword [dword_4D4CFC], ecx
	mov ecx, 40h
	jmp loc_4277DC

loc_42792D:
	mov eax, ebp
	mov dword [dword_4D4E4C], ebp
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	mov ebp, dword [dword_4D4E4C]
	mov ecx, eax
	cmp ebp, 100h
	jge loc_4279B2

loc_427975:
	mov edx, ebp
	mov eax, 0FFh
	and edx, 0FFh
	sub eax, edx
	mov edx, eax

loc_427986:
	cmp ebp, 100h
	jle loc_4277A3
	cmp ebp, 300h
	jge loc_4277A3
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	jmp loc_4277A3

loc_4279B2:
	cmp ebp, 200h
	jl loc_4279C2
	cmp ebp, 300h
	jl loc_427975

loc_4279C2:
	mov edx, ebp
	and edx, 0FFh
	jmp loc_427986

loc_4279CC:
	xor eax, eax
	mov dword [dword_4D4E4C], ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4276F0 endp

sub_4279E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov [esp+10h], eax
	mov [esp+0Ch], edx
	mov edx, 0FFFFFFFFh
	mov ebp, 14h
	xor edi, edi
	mov dword [dword_4D4CFC], edx
	mov dword [dword_4D4CDC], edx
	mov dword [dword_4D4CBC], edx
	mov dword [dword_4D4C9C], edx
	mov [esp+8], edi
	mov [esp+4], ebp
	mov [esp], edi

loc_427A1F:
	mov edi, [esp]
	mov edx, [esp+8]
	mov ebp, [esp+4]
	xor esi, esi
	imul ebx, edx, 14h

loc_427A2F:
	mov eax, [esp+10h]
	mov [esp+14h], edi
	mov [esp+18h], esi
	mov ecx, dword dword_4EB5BC[ebx]
	fild dword [esp+14h]
	fild dword [esp+18h]
	mov [esp+18h], eax
	push ecx
	fild dword [esp+1Ch]
	mov eax, [esp+10h]
	push 1
	mov [esp+20h], eax
	faddp st2, st0
	fild dword [esp+20h]
	fxch st2
	fst dword [flt_4D4CEC]
	fstp dword [flt_4D4C8C]
	faddp st1, st0
	fld dword [flt_4D4C8C]
	fxch st1
	fst dword [flt_4D4CB0]
	fstp dword [flt_4D4C90]
	fadd dword [flt_4C9EB4]
	fld dword [flt_4D4C90]
	fxch st1
	fst dword [flt_4D4CCC]
	fxch st1
	fadd dword [flt_4C9EB4]
	fxch st1
	fstp dword [flt_4D4CAC]
	fst dword [flt_4D4CF0]
	fstp dword [flt_4D4CD0]
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	call sub_497D6C
	mov eax, dword dword_4EB684[ebx]
	push eax
	push 1
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	add ebx, 4
	add esi, 20h
	call sub_497D6C
	cmp ebx, ebp
	jnz loc_427A2F
	mov ecx, [esp]
	mov ebx, [esp+8]
	mov edx, [esp+4]
	add ecx, 20h
	inc ebx
	add edx, 14h
	mov [esp], ecx
	mov [esp+8], ebx
	mov [esp+4], edx
	cmp ebx, 0Ah
	jl loc_427A1F
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4279E0 endp

sub_427B30: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov esi, eax
	mov [esp+8], edx
	mov [esp], ebx
	mov [esp+10h], ecx
	mov ebx, [esp+38h]
	mov dword [dword_4D4CFC], ebx
	mov dword [dword_4D4CDC], ebx
	mov dword [dword_4D4CBC], ebx
	mov dword [dword_4D4C9C], ebx
	lea ebx, 0[eax*4]
	add ebx, eax
	shl ebx, 4
	mov esi, ebx
	shl ebx, 4
	sub ebx, esi
	mov [esp+0Ch], ebx
	add ebx, 3Ch
	xor ebp, ebp
	mov [esp+18h], ebx
	mov ebx, ecx
	imul ebx, ebp
	mov [esp+4], ecx
	mov [esp+14h], ebx

loc_427B8C:
	mov ebx, [esp+14h]
	mov [esp+1Ch], ebx
	mov ebx, [esp+8]
	mov [esp+20h], ebx
	mov ebx, [esp+10h]
	mov [esp+24h], ebx
	imul ebx, ebp, 3Ch
	mov ecx, [esp+0Ch]
	mov esi, [esp]
	fild dword [esp+1Ch]
	fild dword [esp+20h]
	faddp st1, st0
	fild dword [esp+24h]
	fxch st1
	fst dword [flt_4D4CEC]
	fst dword [flt_4D4C8C]
	faddp st1, st0
	mov edi, [esp+18h]
	fst dword [flt_4D4CCC]
	fstp dword [flt_4D4CAC]
	add ebx, ecx

loc_427BDE:
	mov [esp+24h], esi
	mov eax, dword dword_4EB74C[ebx]
	fild dword [esp+24h]
	fstp dword [flt_4D4CB0]
	push eax
	fld dword [flt_4D4CB0]
	fld st0
	push 1
	fadd dword [flt_4C9EB0]
	fxch st1
	fstp dword [flt_4D4C90]
	fst dword [flt_4D4CF0]
	fstp dword [flt_4D4CD0]
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	add ebx, 4
	add esi, 20h
	call sub_497D6C
	cmp ebx, edi
	jnz loc_427BDE
	mov ebx, [esp+4]
	mov ecx, [esp+14h]
	mov edx, [esp+18h]
	inc ebp
	add ecx, ebx
	add edx, 3Ch
	mov [esp+14h], ecx
	mov [esp+18h], edx
	cmp ebp, 14h
	jl loc_427B8C
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_427B30 endp

sub_427C70: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov esi, eax
	mov [esp], edx
	mov [esp+0Ch], ebx
	mov ebp, ecx
	lea ebx, 0[eax*4]
	add ebx, eax
	shl ebx, 4
	mov esi, ebx
	shl ebx, 4
	sub ebx, esi
	mov esi, 0F0h
	mov [esp+8], ebx
	mov [esp+24h], esi
	mov esi, [esp+8]
	add esi, 3Ch
	mov [esp+18h], esi
	mov esi, [esp+0Ch]
	xor edx, edx
	mov [esp+4], esi
	imul esi, edx
	mov edi, 0Ch
	mov [esp+30h], edx
	mov [esp+20h], edx
	mov ebx, [esp+58h]
	mov [esp+28h], edi
	add ebx, ebx
	mov eax, 0E4h
	sub ebx, 0F7h
	mov [esp+1Ch], eax
	mov [esp+14h], ebx
	mov [esp+10h], ebx
	mov [esp+2Ch], esi

loc_427CEB:
	mov ecx, [esp+58h]
	cmp ecx, 0FFFFFFFFh
	jz loc_427E8E
	cmp dword [esp+54h], 0
	jz loc_427EAB
	mov ebx, [esp+10h]
	add ebx, [esp+24h]

loc_427D0B:
	cmp ebx, ebp
	jge loc_427D11
	mov ebx, ebp

loc_427D11:
	mov eax, [esp+50h]
	cmp ebx, eax
	jle loc_427D1B
	mov ebx, eax

loc_427D1B:
	mov esi, ebx
	shl esi, 10h
	lea edi, [esi-1000000h]
	mov esi, ebx
	shl esi, 8
	add esi, edi
	add esi, ebx
	mov edx, [esp+54h]
	mov dword [dword_4D4CFC], esi
	mov dword [dword_4D4C9C], esi
	test edx, edx
	jz loc_427EB8
	mov ebx, [esp+14h]
	add ebx, [esp+1Ch]

loc_427D4F:
	cmp ebx, ebp
	jge loc_427D55
	mov ebx, ebp

loc_427D55:
	mov edi, [esp+50h]
	cmp ebx, edi
	jle loc_427D5F
	mov ebx, edi

loc_427D5F:
	mov esi, ebx
	shl esi, 10h
	lea edi, [esi-1000000h]
	mov esi, ebx
	shl esi, 8
	add esi, edi
	add esi, ebx
	mov dword [dword_4D4CDC], esi
	mov dword [dword_4D4CBC], esi

loc_427D7F:
	mov ebx, [esp+2Ch]
	mov [esp+34h], ebx
	mov ebx, [esp]
	mov [esp+38h], ebx
	mov ebx, [esp+0Ch]
	mov esi, [esp+30h]
	mov [esp+3Ch], ebx
	imul ebx, esi, 3Ch
	fild dword [esp+34h]
	fild dword [esp+38h]
	faddp st1, st0
	fild dword [esp+3Ch]
	fxch st1
	fst dword [flt_4D4CEC]
	fst dword [flt_4D4C8C]
	faddp st1, st0
	mov edi, [esp+8]
	fst dword [flt_4D4CCC]
	fstp dword [flt_4D4CAC]
	add ebx, edi
	xor esi, esi
	mov edi, [esp+18h]

loc_427DD3:
	mov [esp+3Ch], esi
	mov eax, dword dword_4EB74C[ebx]
	fild dword [esp+3Ch]
	fstp dword [flt_4D4CB0]
	push eax
	fld dword [flt_4D4CB0]
	fld st0
	push 1
	fadd dword [flt_4C9EAC]
	fxch st1
	fstp dword [flt_4D4C90]
	fst dword [flt_4D4CF0]
	fstp dword [flt_4D4CD0]
	call sub_497738
	push dword_4D4D0C
	push flt_4D4C8C
	push 1
	add ebx, 4
	add esi, 20h
	call sub_497D6C
	cmp ebx, edi
	jnz loc_427DD3
	mov ebx, [esp+28h]
	mov edx, [esp+20h]
	mov ecx, [esp+24h]
	mov esi, [esp+1Ch]
	mov edi, [esp+18h]
	mov eax, [esp+2Ch]
	add ebx, 0Ch
	add edx, 0Ch
	sub ecx, 0Ch
	sub esi, 0Ch
	add edi, 3Ch
	mov [esp+28h], ebx
	mov [esp+20h], edx
	mov [esp+24h], ecx
	mov [esp+1Ch], esi
	mov [esp+18h], edi
	mov ebx, [esp+4]
	mov edx, [esp+30h]
	add eax, ebx
	inc edx
	mov [esp+2Ch], eax
	mov [esp+30h], edx
	cmp edx, 14h
	jl loc_427CEB
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_427E8E:
	mov dword [dword_4D4CDC], ecx
	mov dword [dword_4D4CBC], ecx
	mov dword [dword_4D4C9C], ecx
	mov dword [dword_4D4CFC], ecx
	jmp loc_427D7F

loc_427EAB:
	mov ebx, [esp+10h]
	add ebx, [esp+20h]
	jmp loc_427D0B

loc_427EB8:
	mov ebx, [esp+14h]
	add ebx, [esp+28h]
	jmp loc_427D4F
;sub_427C70 endp

sub_427ED0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov [esp], eax
	mov ebx, 20h
	xor ecx, ecx
	mov edx, ebx
	mov eax, ebx
	call sub_492820
	mov ebx, 20h
	mov edx, 0A0h
	mov [esp+28h], eax
	xor ecx, ecx
	mov eax, 180h
	call sub_492820
	mov [esp+4], eax
	call sub_4825A8
	xor ebx, ebx
	xor eax, eax
	xor edx, edx
	call sub_482740
	mov eax, [esp]
	mov ecx, 14h
	call sub_40CD70
	xor edx, edx
	mov [esp+0Ch], ecx
	mov [esp+18h], edx
	mov [esp+14h], edx

loc_427F35:
	imul esi, [esp+18h], 14h
	mov eax, [esp+0Ch]
	mov ebp, [esp+14h]
	mov [esp+24h], eax
	xor edi, edi

loc_427F48:
	mov eax, [esp+28h]
	mov ebx, edi
	mov edx, ebp
	mov eax, [eax+20h]
	mov ecx, 1
	call sub_4850B0
	mov eax, [esp+28h]
	mov edx, 6Dh
	xor ebx, ebx
	mov eax, [eax+20h]
	call sub_49A118
	push 0
	mov ebx, eax
	add eax, 10h
	push eax
	mov eax, dword dword_4EB5BC[esi]
	push eax
	add esi, 4
	add edi, 20h
	call sub_49755C
	mov eax, ebx
	mov edx, [esp+24h]
	call sub_4848FC
	cmp esi, edx
	jnz loc_427F48
	mov ebx, [esp+14h]
	mov esi, [esp+18h]
	mov ecx, [esp+0Ch]
	add ebx, 20h
	inc esi
	add ecx, 14h
	mov [esp+14h], ebx
	mov [esp+18h], esi
	mov [esp+0Ch], ecx
	cmp esi, 0Ah
	jl loc_427F35
	mov eax, [esp+4]
	mov ebx, 10h
	mov edx, 0A0h
	call sub_482DA0
	mov eax, [esp+28h]
	xor ecx, ecx
	call sub_482DA0
	mov eax, 180h
	xor ebp, ebp
	call sub_492820
	mov [esp+4], eax
	call sub_4825A8
	xor ebx, ebx
	xor eax, eax
	xor edx, edx
	call sub_482740
	mov eax, [esp]
	mov [esp+1Ch], ebp
	call sub_40CD70
	mov eax, 14h
	mov [esp+10h], ebp
	mov [esp+8], eax

loc_428019:
	mov ecx, [esp+1Ch]
	mov eax, [esp+8]
	mov ebp, [esp+10h]
	xor edi, edi
	mov [esp+20h], eax
	imul esi, ecx, 14h

loc_42802E:
	mov eax, dword [dword_4D4D28]
	mov ebx, edi
	mov edx, ebp
	mov eax, [eax+20h]
	call sub_4850B0
	mov eax, dword [dword_4D4D28]
	mov eax, [eax+20h]
	call sub_428440
	mov eax, dword [dword_4D4D28]
	mov eax, [eax+20h]
	push 0
	add eax, 10h
	push eax
	mov ebx, dword dword_4EB684[esi]
	push ebx
	add esi, 4
	call sub_49755C
	mov eax, [esp+20h]
	add edi, 20h
	cmp esi, eax
	jnz loc_42802E
	mov ecx, [esp+10h]
	mov ebx, [esp+1Ch]
	mov edx, [esp+8]
	add ecx, 20h
	inc ebx
	add edx, 14h
	mov [esp+10h], ecx
	mov [esp+1Ch], ebx
	mov [esp+8], edx
	cmp ebx, 0Ah
	jl loc_428019
	mov eax, [esp+4]
	call sub_482DA0
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_427ED0 endp

sub_4280B0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, edx
	mov [esp], ebx
	mov ebp, ecx
	mov ebx, 20h
	mov edx, 100h
	xor ecx, ecx
	mov eax, edx
	call sub_492820
	mov edi, eax
	call sub_4825A8
	xor eax, eax
	mov edx, [esp]
	call sub_482740
	test edx, edx
	jnz loc_42812A
	mov ebx, [esp+14h]
	mov edx, ebp
	mov eax, esi
	call sub_486C60

loc_4280F2:
	call sub_4824BC
	mov edx, 0C8h
	mov eax, [edi+20h]
	call sub_4283A0
	mov eax, [edi+20h]
	push 0
	add eax, 10h
	push eax
	mov ecx, dword [dword_4D4E44]
	push ecx
	call sub_49755C
	mov eax, edi
	call sub_482DA0
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_42812A:
	mov eax, esi
	call sub_486D10
	jmp loc_4280F2
;sub_4280B0 endp

sub_428140: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, edx
	mov edi, ecx
	mov ebx, 20h
	mov edx, 100h
	xor ecx, ecx
	mov eax, edx
	call sub_492820
	mov ecx, [esp+10h]
	mov edx, 1900h
	mov esi, eax
	call sub_4825A8
	xor eax, eax
	mov ebx, edi
	call sub_482740
	mov eax, ebp
	call sub_405B30
	call sub_4824BC
	mov edx, 0C8h
	mov eax, [esi+20h]
	call sub_4283A0
	mov eax, [esi+20h]
	push 0
	add eax, 10h
	push eax
	mov edx, dword [dword_4D4E44]
	push edx
	call sub_49755C
	mov eax, esi
	call sub_482DA0
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_428140 endp

sub_4281B0: ;SUBROUTINE
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov [esp], ecx
	lea edi, 0[eax*4]
	mov eax, [esp+10h]
	mov dword dword_4EB58C[edi], eax
	test eax, eax
	jnz loc_4281D7
	add esp, 4
	pop ebp
	pop edi
	ret 4

loc_4281D7:
	push esi
	mov ebx, 10h
	mov edx, 80h
	xor ecx, ecx
	mov eax, edx
	call sub_492820
	mov ebx, [esp+4]
	mov edx, 2500h
	mov esi, eax
	call sub_4825A8
	xor eax, eax
	xor ecx, ecx
	call sub_482740
	sub ebx, 1FEh
	mov eax, ebp
	call sub_405B30
	call sub_4824BC
	mov eax, [esi+20h]
	call sub_428440
	mov eax, [esi+20h]
	push 0
	add eax, 10h
	push eax
	mov ecx, dword dword_4EB5A4[edi]
	push ecx
	call sub_49755C
	mov eax, esi
	call sub_482DA0
	pop esi
	add esp, 4
	pop ebp
	pop edi
	ret 4
;sub_4281B0 endp

sub_428250: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov esi, eax
	mov edi, edx
	mov edx, dword dword_4EB584[edx*4]
	cmp eax, edx
	jnz loc_42827D
	mov eax, dword [dword_4D231C]
	cmp edx, [eax+20h]
	jz loc_42827D
	mov eax, dword [dword_4D2320]
	cmp edx, [eax+20h]
	jnz loc_42838E

loc_42827D:
	push ecx
	push ebx
	mov ebx, 10h
	mov edx, 1E0h
	mov eax, 280h
	xor ecx, ecx
	mov dword dword_4EB584[edi*4], esi
	call sub_492820
	mov [esp+8], eax
	call sub_4825A8
	cmp byte [byte_4DB25C], 8
	jnz loc_428395
	mov eax, 0FFh

loc_4282B7:
	call sub_482740
	mov eax, esi
	call sub_483470
	call sub_4824BC
	mov eax, [esp+8]
	call sub_4825A8
	lea eax, 0[edi*4]
	add eax, edi
	xor esi, esi
	shl eax, 4
	mov [esp+18h], esi
	mov esi, eax
	shl eax, 4
	sub eax, esi
	xor edi, edi
	mov [esp+0Ch], eax
	add eax, 3Ch
	mov [esp+10h], edi
	mov [esp+14h], eax

loc_4282FB:
	imul esi, [esp+18h], 3Ch
	mov edx, [esp+0Ch]
	mov ebp, [esp+10h]
	xor edi, edi
	mov eax, [esp+14h]
	add esi, edx
	mov [esp+1Ch], eax

loc_428314:
	mov eax, dword [dword_4D4D28]
	mov ebx, edi
	mov edx, ebp
	mov eax, [eax+20h]
	call sub_4850B0
	mov eax, dword [dword_4D4D28]
	mov eax, [eax+20h]
	call sub_428440
	mov eax, dword [dword_4D4D28]
	mov eax, [eax+20h]
	push 0
	add eax, 10h
	push eax
	mov ecx, dword dword_4EB74C[esi]
	add esi, 4
	push ecx
	add edi, 20h
	mov ebx, [esp+28h]
	call sub_49755C
	cmp esi, ebx
	jnz loc_428314
	mov edi, [esp+10h]
	mov ebp, [esp+18h]
	mov esi, [esp+14h]
	add edi, 20h
	inc ebp
	add esi, 3Ch
	mov [esp+10h], edi
	mov [esp+18h], ebp
	mov [esp+14h], esi
	cmp ebp, 14h
	jl loc_4282FB
	mov eax, [esp+8]
	call sub_482DA0
	pop ebx
	pop ecx

loc_42838E:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_428395:
	xor eax, eax
	jmp loc_4282B7
;sub_428250 endp

sub_4283A0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+8], edx
	lea ecx, [eax+10h]
	mov ebx, [eax+2]
	mov eax, [eax+4]
	sar ebx, 10h
	sar eax, 10h
	imul ebx, eax
	mov [esp+0Ch], ebx
	mov edx, ecx
	mov esi, [esp+0Ch]
	xor ebx, ebx
	test esi, esi
	jle loc_428429

loc_4283CE:
	mov eax, [ecx]
	mov esi, eax
	mov ebp, eax
	shr esi, 18h
	mov edi, eax
	and esi, 0FFh
	shr ebp, 13h
	mov [esp], esi
	mov esi, eax
	shr edi, 3
	shr esi, 0Bh
	and ebp, 1Fh
	and esi, 1Fh
	and edi, 1Fh
	mov [esp+4], esi
	mov esi, ebp
	mov eax, [esp+4]
	shl esi, 0Ah
	shl eax, 5
	mov ebp, [esp+8]
	or eax, esi
	mov esi, [esp]
	or eax, edi
	cmp esi, ebp
	jge loc_428432
	mov word [edx], 0

loc_42841A:
	mov edi, [esp+0Ch]
	add ecx, 4
	inc ebx
	add edx, 2
	cmp ebx, edi
	jl loc_4283CE

loc_428429:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_428432:
	or ah, 80h
	mov [edx], ax
	jmp loc_42841A
;sub_4283A0 endp

sub_428440: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, eax
	mov ecx, [edx+2]
	mov ebp, [edx+4]
	sar ecx, 10h
	sar ebp, 10h
	imul ebp, ecx
	add eax, 10h
	xor ecx, ecx
	test ebp, ebp
	jle loc_42849A

loc_428460:
	mov dx, [eax]
	and edx, 0FFFFh
	mov esi, edx
	mov ebx, edx
	mov edi, edx
	sar esi, 0Bh
	sar ebx, 5
	and esi, 1Fh
	and ebx, 3Fh
	mov edx, esi
	sar ebx, 1
	shl edx, 0Ah
	shl ebx, 5
	and edi, 1Fh
	or edx, ebx
	or dx, di
	jnz loc_4284A1

loc_42848F:
	mov [eax], dx
	inc ecx
	add eax, 2
	cmp ecx, ebp
	jl loc_428460

loc_42849A:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4284A1:
	or dh, 80h
	jmp loc_42848F
;sub_428440 endp

sub_4284B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov [esp], eax
	mov ebp, 3Ch
	xor edx, edx
	xor edi, edi
	mov dword [dword_4EB588], edx
	mov dword [dword_4EB584], edx

loc_4284D1:
	mov esi, ebp
	imul ebx, edi, 3Ch

loc_4284D6:
	push 0
	push 0
	push 3
	push 20h
	push 20h
	call sub_497464
	push 0
	push 0
	push 3
	push 20h
	add ebx, 4
	push 20h
	mov dword dword_4EB748[ebx], eax
	call sub_497464
	mov dword dword_4EBBF8[ebx], eax
	cmp ebx, esi
	jnz loc_4284D6
	inc edi
	add ebp, 3Ch
	cmp edi, 14h
	jl loc_4284D1
	push 0
	push 0
	push 7
	push 100h
	push 100h
	call sub_497464
	push 0
	push 0
	push 7
	push 100h
	push 100h
	mov dword [dword_4EC4B0], eax
	call sub_497464
	push 0
	push 0
	push 7
	push 100h
	push 100h
	mov ebx, [esp+14h]
	mov dword [dword_4EC4B4], eax
	call sub_497464
	mov dword [dword_4EC4B8], eax
	call sub_426F10
	cmp ebx, dword_4D2E78
	jz loc_42867B
	cmp ebx, dword_4D2944
	jz loc_42867B
	cmp ebx, dword_4D2870
	jz loc_42867B
	cmp ebx, off_4D3D90
	jz loc_42867B
	cmp ebx, off_4D3CFC
	jz loc_42867B
	cmp ebx, off_4D3DB8
	jz loc_42867B
	cmp ebx, dword_4D28C4
	jz loc_42867B
	cmp ebx, off_4D3C50
	jz loc_42867B
	cmp ebx, off_4D3BE4
	jz loc_42867B
	cmp ebx, off_4D3B74
	jz loc_42867B
	cmp ebx, off_4D3B08
	jz loc_42867B
	cmp ebx, dword_4D2824
	jz loc_42867B
	mov ebp, 14h
	xor edi, edi

loc_428603:
	mov esi, ebp
	imul ebx, edi, 14h

loc_428608:
	push 0
	push 0
	push 7
	push 20h
	push 20h
	call sub_497464
	push 0
	push 0
	push 3
	push 20h
	add ebx, 4
	push 20h
	mov dword dword_4EB5B8[ebx], eax
	call sub_497464
	mov dword dword_4EB680[ebx], eax
	cmp ebx, esi
	jnz loc_428608
	inc edi
	add ebp, 14h
	cmp edi, 0Ah
	jl loc_428603
	xor ebx, esi
	mov esi, 80h
	xor edi, edi

loc_42864D:
	push edi
	push edi
	push 3
	push esi
	push esi
	add ebx, 4
	call sub_497464
	mov dword dword_4EB5A0[ebx], eax
	cmp ebx, 18h
	jnz loc_42864D
	push 0
	push 2
	call sub_497738
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42867B:
	push 0
	push 0
	push 3
	push 100h
	push 100h
	call sub_497464
	mov dword [dword_4D4E44], eax
	push 0
	push 2
	call sub_497738
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4284B0 endp

sub_4286B0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	call sub_4287C0
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	call sub_4976B8
	call sub_4289F0
	finit
	wait
	fstcw word [dword_4EC4C4]
	wait
	mov eax, dword [dword_4EC4C4]
	mov dword [dword_4EC4C0], eax
	and eax, 0FFFFFCFFh
	mov dword [dword_4EC4C4], eax
	fldcw word [dword_4EC4C4]
	wait
	call sub_4287C0
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	mov eax, dword [dword_4D4D20]
	mov [esp], eax
	mov edx, [esp]
	push edx
	push 65h
	call sub_497738
	add esp, 4
	pop edx
	pop ecx
	ret
;sub_4286B0 endp

sub_428730: ;SUBROUTINE
	push ecx
	push edx
	call sub_4287C0
	call sub_4976B8
	call sub_4287C0
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	finit
	wait
	fldcw word [dword_4EC4C0]
	wait
	pop edx
	pop ecx
	ret
;sub_428730 endp

sub_428770: ;SUBROUTINE
	push ecx
	push edx
	mov eax, dword [dword_4D4D24]
	mov eax, [eax+20h]
	call sub_426B70
	cmp dword [dword_4D2310], 0
	jnz loc_428797
	call sub_4976B8
	pop edx
	pop ecx
	ret

loc_428797:
	mov eax, dword [dword_4D4C7C]
	mov edx, dword [dword_4D4C80]
	sub eax, 7
	call sub_4267C0
	call sub_4976B8
	pop edx
	pop ecx
	ret
;sub_428770 endp

sub_4287C0: ;SUBROUTINE
	push ecx
	push edx
	mov eax, dword [dword_4D4D24]
	call sub_4825A8
	push 0
	call sub_4976C8
	push 2
	call sub_497680
	call sub_49769C
	pop edx
	pop ecx
	ret
;sub_4287C0 endp

sub_4287F0: ;SUBROUTINE
	push edx
	finit
	wait
	fldcw word [dword_4EC4C0]
	wait
	xor edx, edx
	mov eax, dword [dword_4D4D28]
	mov dword [dword_4D4D1C], edx
	call sub_482DA0
	mov eax, dword [dword_4D4D24]
	call sub_482DA0
	mov dword [dword_4D4D28], edx
	mov dword [dword_4D4D24], edx
	pop edx
	ret
;sub_4287F0 endp

sub_428830: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, edx
	mov dword [dword_4D4D1C], 1
	test eax, eax
	jnz loc_4288F0

loc_428846:
	push 2
	call sub_497680
	test ebx, ebx
	jz loc_428858
	call sub_49769C

loc_428858:
	push 1
	call sub_497680
	test ebx, ebx
	jnz loc_4288FA

loc_428868:
	mov ecx, 20h
	mov ebx, 10h
	mov edx, 1E0h
	mov eax, 280h
	call sub_492820
	mov ecx, 20h
	mov dword [dword_4D4D24], eax
	call sub_4825A8
	mov eax, 0FF000000h
	mov ebx, 10h
	call sub_48266C
	call sub_482740
	mov edx, ecx
	mov eax, ecx
	call sub_492820
	mov dword [dword_4D4D28], eax
	call sub_4825A8
	mov eax, 0FF000000h
	call sub_48266C
	call sub_482740
	finit
	wait
	fstcw word [dword_4EC4C4]
	wait
	mov eax, dword [dword_4EC4C4]
	mov dword [dword_4EC4C0], eax
	and eax, 0FFFFFCFFh
	mov dword [dword_4EC4C4], eax
	fldcw word [dword_4EC4C4]
	wait
	pop ecx
	pop ebx
	ret

loc_4288F0:
	call sub_4289F0
	jmp loc_428846

loc_4288FA:
	call sub_49769C
	jmp loc_428868
;sub_428830 endp

sub_428910: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	test eax, eax
	jz loc_42895A
	fld dword [dword_4D4D20]
	fadd dword [flt_4C9E74]
	fstp dword [dword_4D4D20]
	cmp dword [dword_4D4D20], 3F800000h
	jge loc_428941
	mov dword [dword_4D4D20], 40133333h

loc_428941:
	mov eax, dword [dword_4D4D20]
	mov [esp], eax
	mov edx, [esp]
	push edx
	push 65h
	call sub_497738
	add esp, 4
	pop edx
	pop ecx
	ret

loc_42895A:
	fld dword [dword_4D4D20]
	fadd dword [flt_4C9E6C]
	fst dword [dword_4D4D20]
	fcomp dword [flt_4C9E70]
	fnstsw ax
	sahf
	jbe loc_428941
	mov dword [dword_4D4D20], 3F800000h
	jmp loc_428941
;sub_428910 endp

sub_428990: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	fld dword [dword_4D4D20]
	fcomp dword [flt_4C9E50]
	fnstsw ax
	sahf
	ja loc_4289D5
	cmp dword [dword_4D4D20], 3F800000h
	jge loc_4289BC
	mov dword [dword_4D4D20], 3F800000h

loc_4289BC:
	mov eax, dword [dword_4D4D20]
	mov [esp], eax
	mov edx, [esp]
	push edx
	push 65h
	call sub_497738
	add esp, 4
	pop edx
	pop ecx
	ret

loc_4289D5:
	mov dword [dword_4D4D20], 40133333h
	jmp loc_4289BC
;sub_428990 endp

sub_4289F0: ;SUBROUTINE
	push ecx
	push edx
	call sub_4975B0
	push 0
	push 0
	push 4
	push 20h
	push 20h
	call sub_497464
	xor edx, edx
	mov dword [dword_4D4D2C], eax
	mov dword [dword_4D4D30], edx
	pop edx
	pop ecx
	ret
;sub_4289F0 endp

sub_428A20: ;SUBROUTINE
	cmp dword [dword_4D4D1C], 0
	jnz sub_4287C0
	ret
;sub_428A20 endp

sub_428A30: ;SUBROUTINE
	push ebx
	mov ebx, eax
	mov ah, byte [byte_4D4E84]
	test ah, ah
	jnz loc_428A46
	jz loc_428A6B
	mov eax, 1
	pop ebx
	ret

loc_428A46:
	push edx
	push ecx
	call sub_4972BC
	test ebx, ebx
	jz loc_428A61
	call sub_480BA0

loc_428A61:
	xor dh, dh
	mov byte [byte_4D4E84], dh
	pop ecx
	pop edx

loc_428A6B:
	xor eax, eax
	pop ebx
	ret
;sub_428A30 endp

sub_428A70: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov esi, eax
	cmp byte [byte_4D4E84], 0
	jnz loc_428AA3
	cmp dword [dword_4DB6A0], 0
	jz loc_428AAE

loc_428A87:
	test esi, esi
	jnz loc_428ABA
	mov ebx, 1

loc_428A90:
	mov edx, 1E0h
	mov eax, 280h
	call sub_480C60
	test eax, eax
	jnz loc_428ABE

loc_428AA3:
	xor eax, eax
	mov al, byte [byte_4D4E84]
	pop esi
	pop edx
	pop ebx
	ret

loc_428AAE:
	call sub_489EF8
	mov dword [dword_4DB6A0], eax
	jmp loc_428A87

loc_428ABA:
	xor ebx, ebx
	jmp loc_428A90

loc_428ABE:
	push ecx
	push off_4D4E68
	push 13h
	call sub_497738
	push esi
	push 12h
	call sub_497738
	cmp byte [byte_4D4E85], 0
	jnz loc_428B0A
	mov eax, sub_428B30
	mov dh, 1
	call atexit_
	mov byte [byte_4D4E85], dh

loc_428B0A:
	mov byte [byte_4D4E84], 1
	mov dword [dword_4DAC04], sub_428B40
	pop ecx
	xor eax, eax
	mov al, byte [byte_4D4E84]
	pop esi
	pop edx
	pop ebx
	ret
;sub_428A70 endp

sub_428B30: ;SUBROUTINE
	mov eax, 1
	jmp sub_428A30
;sub_428B30 endp

sub_428B40: ;SUBROUTINE
	push edx
	mov eax, 1
	xor edx, edx
	call sub_428A30
	mov dword [dword_4DAC04], edx
	pop edx
	ret
;sub_428B40 endp

sub_428C40: ;SUBROUTINE
	xor eax, eax
	jmp sub_483EB0
;sub_428C40 endp

sub_428C60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [dword_4DB1F8], 0
	jz loc_428D7F

loc_428C73:
	test ecx, ecx
	jnz loc_428DA7
	mov ecx, 280h

loc_428C80:
	test edx, edx
	jnz loc_428DBA
	mov edx, 1E0h

loc_428C8D:
	test ebx, ebx
	jnz loc_428DCD

loc_428C95:
	mov ebx, 10h

loc_428C9A:
	mov eax, ecx
	call sub_49AFA0
	cmp dword [dword_4DAB5C], 0
	jnz loc_428CE0
	test byte [dword_4DAB88], 1
	jnz loc_428DE4
	mov eax, 1

loc_428CC6:
	call sub_428A70
	mov eax, sub_428E20
	mov edx, sub_428E10
	call atexit_
	mov dword [dword_4DAC04], edx

loc_428CE0:
	mov ecx, dword [dword_4DB2A4]
	test ecx, ecx
	jz loc_428CF1
	mov eax, ecx
	call sub_49B24C

loc_428CF1:
	mov ebx, dword [dword_4DB2A8]
	test ebx, ebx
	jz loc_428D02
	mov eax, ebx
	call sub_49B24C

loc_428D02:
	xor esi, esi
	mov ebp, dword [dword_4DB2DC]
	mov dword [dword_4DB2A4], esi
	mov dword [dword_4DB2A8], esi
	test ebp, ebp
	jz loc_428D21
	mov eax, ebp
	call sub_49B24C

loc_428D21:
	mov eax, dword [dword_4DB2E0]
	test eax, eax
	jz loc_428D2F
	call sub_49B24C

loc_428D2F:
	xor edx, edx
	mov ebx, dword [dword_4DABD4]
	mov dword [dword_4DB2DC], edx
	mov dword [dword_4DB2E0], edx
	test ebx, ebx
	jz loc_428D54
	mov eax, ebx
	call sub_482DA0
	mov dword [dword_4DABD4], edx

loc_428D54:
	mov edi, 1
	mov ebx, dword_4DB278
	xor edx, edx
	mov eax, edi
	mov dword [dword_4DAB5C], edi
	call sub_49AE90
	cmp edi, dword [dword_4DAB8C]
	jl loc_428DEB
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_428D7F:
	mov edi, aCNfs2seGame3_2 ; "c:\\nfs2se\\game\\3rash\\initgrf.c"
	mov ebp, 2Ch
	push aInitgraphicsIn ; "initgraphics - INITMEMMAN REQUIRED BEFO"...
	mov dword [dword_4DB1D8], edi
	mov dword [dword_4DB1DC], ebp
	call sub_4840F0
	add esp, 4
	jmp loc_428C73

loc_428DA7:
	cmp ecx, 0FFFFFFFFh
	jnz loc_428C80
	mov ecx, 400h
	jmp loc_428C80

loc_428DBA:
	cmp edx, 0FFFFFFFFh
	jnz loc_428C8D
	mov edx, 300h
	jmp loc_428C8D

loc_428DCD:
	cmp ebx, 0FFFFFFFFh
	jz loc_428C95
	cmp ebx, 0Fh
	jnz loc_428C9A
	jmp loc_428C95

loc_428DE4:
	xor eax, eax
	jmp loc_428CC6

loc_428DEB:
	mov ebx, dword_4DB2B0
	mov eax, 2
	xor edx, edx
	call sub_49AE90
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_428C60 endp

sub_428E10: ;SUBROUTINE
	call sub_428E20
	xor eax, eax
	ret
;sub_428E10 endp

sub_428E20: ;SUBROUTINE
	cmp dword [dword_4DAB5C], 0
	jnz loc_428E2A
	ret

loc_428E2A:
	push ecx
	xor eax, eax
	call sub_49AE1C
	mov eax, 1
	xor ecx, ecx
	call sub_428A30
	mov dword [dword_4DAB5C], ecx
	mov dword [dword_4DAC04], ecx
	pop ecx
	ret
;sub_428E20 endp

sub_428E50: ;SUBROUTINE
	push ecx
	push edx
	push 1E0h
	push 280h
	push 0
	push 0
	call sub_497714
	call sub_4976B8
	pop edx
	pop ecx
	ret
;sub_428E50 endp

sub_428E80: ;SUBROUTINE
	push ecx
	push edx
	xor edx, edx
	push edx
	mov dword [dword_4EC638], edx
	mov dword [dword_4EC63C], edx
	call sub_4976C8
	push 2
	call sub_497680
	pop edx
	pop ecx
	ret
;sub_428E80 endp

sub_428EB0: ;SUBROUTINE
	mov dword [dword_4EC648], 1
	ret
;sub_428EB0 endp

sub_428F20: ;SUBROUTINE
	push ecx
	push edx
	xor eax, eax
	mov al, byte [byte_4EF3EE]
	mov edx, eax
	xor eax, eax
	shl edx, 10h
	mov al, byte [byte_4EF3ED]
	or edx, 0FF000000h
	shl eax, 8
	or edx, eax
	xor eax, eax
	mov al, byte [byte_4EF3EC]
	or eax, edx
	push eax
	push 4
	call sub_497738
	pop edx
	pop ecx
	ret
;sub_428F20 endp

sub_428F60: ;SUBROUTINE
	push ebx
	push ecx
	cmp dword [dword_512208], 1
	jnz loc_428F9A
	xor ecx, ecx
	mov dword [dword_4EC644], ecx

loc_428F73:
	mov eax, dword [dword_51224C]
	mov ebx, 1
	call sub_4466B0
	mov eax, dword [dword_512244]
	mov dword [dword_4EC648], ebx
	mov dword [dword_4EC640], eax
	call sub_42A170
	pop ecx
	pop ebx
	ret

loc_428F9A:
	mov eax, dword [dword_512240]
	mov dword [dword_4EC644], eax
	jmp loc_428F73
;sub_428F60 endp

sub_428FB0: ;SUBROUTINE
	inc dword [dword_4EC64C]
	ret
;sub_428FB0 endp

sub_428FC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, eax
	mov ebx, edx
	call sub_42A2A0
	push 2
	call sub_497680
	test esi, esi
	jnz loc_428FFB

loc_428FDC:
	push 2
	call sub_497680
	call sub_42D820
	call sub_49769C
	pop esi
	pop ecx
	pop ebx
	ret

loc_428FFB:
	call sub_4976B8
	jmp loc_428FDC
;sub_428FC0 endp

sub_429010: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov edx, eax
	mov ecx, [eax]
	test ecx, ecx
	jnz loc_429093

loc_429020:
	mov esi, [edx]
	cmp esi, 1
	jnz loc_42909A
	mov eax, esi

loc_42902D:
	call sub_429170

loc_429032:
	mov edi, [edx]
	cmp edi, 1
	jnz loc_42909E
	xor ecx, ecx
	mov dword [dword_4EC63C], ecx
	mov dword [dword_4EC638], ecx

loc_429047:
	mov eax, edx
	call sub_42A010
	mov esi, [edx]
	cmp esi, 1
	jnz loc_42912F
	mov eax, esi

loc_42905B:
	mov ecx, dword [dword_51222C]
	xor eax, ecx
	mov dword [dword_4D4E88], eax
	mov eax, [esp+14h]
	call sub_42A3C0
	cmp dword [edx], 0
	jnz loc_42908C
	cmp dword [dword_540F28], 0
	jnz loc_42908C
	cmp dword [dword_5222D0], 0
	jz loc_429136

loc_42908C:
	pop edi
	pop esi
	pop edx
	pop ecx
	ret 8

loc_429093:
	cmp ecx, 1
	jz loc_429020
	jmp loc_429032

loc_42909A:
	xor eax, eax
	jmp loc_42902D

loc_42909E:
	cmp edi, 3
	jnz loc_42911E
	cmp dword [dword_512208], 1
	jnz loc_429103
	cmp dword [dword_511FE0], 0
	jz loc_4290D4
	mov eax, [edx+4]
	test eax, eax
	jnz loc_4290D4
	mov dword [dword_4EC638], eax
	mov dword [dword_4EC63C], 45h
	jmp loc_429047

loc_4290D4:
	cmp dword [dword_511FE4], 0
	jz loc_429047
	cmp dword [edx+4], 1
	jnz loc_429047
	mov edi, 135h
	xor esi, esi
	mov dword [dword_4EC63C], edi
	mov dword [dword_4EC638], esi
	jmp loc_429047

loc_429103:
	mov edi, 13Eh
	mov esi, 214h
	mov dword [dword_4EC63C], edi
	mov dword [dword_4EC638], esi
	jmp loc_429047

loc_42911E:
	xor eax, eax
	mov dword [dword_4EC63C], eax
	mov dword [dword_4EC638], eax
	jmp loc_429047

loc_42912F:
	xor eax, eax
	jmp loc_42905B

loc_429136:
	mov eax, [edx+4]
	call sub_47B930
	pop edi
	pop esi
	pop edx
	pop ecx
	ret 8
;sub_429010 endp

off_429150: dd loc_42918D
	dd loc_429FD1 ; jump table for switch statement
	dd loc_429FD1
	dd loc_429FD1
	dd loc_4296CC
	dd loc_429530
	dd loc_429FD1
	dd loc_4291CB

sub_429170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov eax, dword [dword_5117B0]
	cmp eax, 7 ; switch 8 cases
	ja loc_429FD1 ; jumptable 00429186 default case
	jmp off_429150[eax*4] ; switch jump

loc_42918D:
	mov eax, dword [dword_5117C4] ; jumptable 00429186 case 0
	cmp eax, 224h
	jle loc_429336
	cmp eax, 247h
	jge loc_429336
	mov eax, 0FF3E3E3Eh

loc_4291AD:
	call sub_42CF10
	test ecx, ecx
	jz loc_429328

loc_4291BA:
	mov eax, 13h
	call sub_42CEB0

loc_4291C4:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4291CB:
	test ecx, ecx ; jumptable 00429186 case 7
	jnz loc_4291BA
	mov edx, dword [dword_5117C4]
	cmp edx, 55Fh
	jle loc_4291E9
	cmp edx, 5F5h
	jl loc_4292B1

loc_4291E9:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 546h
	jle loc_429203
	cmp ebx, 60Eh
	jl loc_4292C2

loc_429203:
	mov edi, dword [dword_5117C4]
	cmp edi, 52Dh
	jle loc_42921D
	cmp edi, 627h
	jl loc_4292D3

loc_42921D:
	mov eax, dword [dword_5117C4]
	cmp eax, 514h
	jle loc_429234
	cmp eax, 640h
	jl loc_4292E4

loc_429234:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 4FBh
	jle loc_42924E
	cmp ecx, 659h
	jl loc_4292F5

loc_42924E:
	mov esi, dword [dword_5117C4]
	cmp esi, 4E2h
	jle loc_429268
	cmp esi, 672h
	jl loc_429306

loc_429268:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 4C9h
	jle loc_429282
	cmp ebp, 68Bh
	jl loc_429317

loc_429282:
	mov edx, dword [dword_5117C4]
	cmp edx, 4B5h
	jle loc_429328
	cmp edx, 6D6h
	jge loc_429328
	mov eax, 1
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4292B1:
	mov eax, 9
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4292C2:
	mov eax, 8
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4292D3:
	mov eax, 7
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4292E4:
	mov eax, 6
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4292F5:
	mov eax, 4
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429306:
	mov eax, 3
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429317:
	mov eax, 2
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429328:
	xor eax, eax
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429336:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 223h
	jle loc_429350
	cmp ebx, 248h
	jl loc_4294A4

loc_429350:
	mov edi, dword [dword_5117C4]
	cmp edi, 221h
	jle loc_42936A
	cmp edi, 249h
	jl loc_4294AE

loc_42936A:
	mov eax, dword [dword_5117C4]
	cmp eax, 21Ch
	jle loc_429381
	cmp eax, 24Eh
	jl loc_4294B8

loc_429381:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 212h
	jle loc_42939B
	cmp ebx, 258h
	jl loc_4294C2

loc_42939B:
	mov edi, dword [dword_5117C4]
	cmp edi, 208h
	jle loc_4293B5
	cmp edi, 262h
	jl loc_4294CC

loc_4293B5:
	mov eax, dword [dword_5117C4]
	cmp eax, 203h
	jle loc_4293CC
	cmp eax, 267h
	jl loc_4294D6

loc_4293CC:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 1FEh
	jle loc_4293E6
	cmp ebx, 26Ch
	jl loc_4294E0

loc_4293E6:
	mov edi, dword [dword_5117C4]
	cmp edi, 1FCh
	jle loc_429400
	cmp edi, 273h
	jl loc_4294EA

loc_429400:
	mov eax, dword [dword_5117C4]
	cmp eax, 1F9h
	jle loc_429417
	cmp eax, 271h
	jl loc_4294F4

loc_429417:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 1F4h
	jle loc_429431
	cmp ebx, 276h
	jl loc_4294FE

loc_429431:
	mov edi, dword [dword_5117C4]
	cmp edi, 1EFh
	jle loc_42944B
	cmp edi, 280h
	jl loc_429508

loc_42944B:
	mov eax, dword [dword_5117C4]
	cmp eax, 1EAh
	jle loc_429462
	cmp eax, 285h
	jl loc_429512

loc_429462:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 1E5h
	jle loc_42947C
	cmp ebx, 28Fh
	jl loc_42951C

loc_42947C:
	mov edi, dword [dword_5117C4]
	cmp edi, 1E0h
	jle loc_429526
	cmp edi, 28Ah
	jge loc_429526
	mov eax, 0FF060606h
	jmp loc_4291AD

loc_4294A4:
	mov eax, 0FF3D3D3Dh
	jmp loc_4291AD

loc_4294AE:
	mov eax, 0FF3C3C3Ch
	jmp loc_4291AD

loc_4294B8:
	mov eax, 0FF3B3B3Bh
	jmp loc_4291AD

loc_4294C2:
	mov eax, 0FF383838h
	jmp loc_4291AD

loc_4294CC:
	mov eax, 0FF2E2E2Eh
	jmp loc_4291AD

loc_4294D6:
	mov eax, 0FF282828h
	jmp loc_4291AD

loc_4294E0:
	mov eax, 0FF202020h
	jmp loc_4291AD

loc_4294EA:
	mov eax, 0FF181818h
	jmp loc_4291AD

loc_4294F4:
	mov eax, 0FF101010h
	jmp loc_4291AD

loc_4294FE:
	mov eax, 0FF0E0E0Eh
	jmp loc_4291AD

loc_429508:
	mov eax, 0FF0D0D0Dh
	jmp loc_4291AD

loc_429512:
	mov eax, 0FF0C0C0Ch
	jmp loc_4291AD

loc_42951C:
	mov eax, 0FF080808h
	jmp loc_4291AD

loc_429526:
	mov eax, 0FF000204h
	jmp loc_4291AD

loc_429530:
	mov ebx, dword [dword_5117C4] ; jumptable 00429186 case 5
	cmp ebx, 5FDh
	jle loc_42956B
	cmp ebx, 6ABh
	jge loc_42956B
	mov eax, 0FF25282Ch

loc_42954B:
	xor edx, edx
	call sub_42CF00
	test ecx, ecx
	jz loc_4291C4
	mov eax, 13h
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42956B:
	mov edi, dword [dword_5117C4]
	cmp edi, 5FCh
	jle loc_429585
	cmp edi, 6ACh
	jl loc_429668

loc_429585:
	mov eax, dword [dword_5117C4]
	cmp eax, 5FBh
	jle loc_42959C
	cmp eax, 6ADh
	jl loc_429672

loc_42959C:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 5FAh
	jle loc_4295B6
	cmp ebx, 6AEh
	jl loc_42967C

loc_4295B6:
	mov edi, dword [dword_5117C4]
	cmp edi, 5F9h
	jle loc_4295D0
	cmp edi, 6AFh
	jl loc_429686

loc_4295D0:
	mov eax, dword [dword_5117C4]
	cmp eax, 5F8h
	jle loc_4295E7
	cmp eax, 6B0h
	jl loc_429690

loc_4295E7:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 5F7h
	jle loc_429601
	cmp ebx, 6B1h
	jl loc_42969A

loc_429601:
	mov edi, dword [dword_5117C4]
	cmp edi, 5F6h
	jle loc_42961B
	cmp edi, 6B2h
	jl loc_4296A4

loc_42961B:
	mov eax, dword [dword_5117C4]
	cmp eax, 5F5h
	jle loc_429632
	cmp eax, 6B3h
	jl loc_4296AE

loc_429632:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 5F4h
	jle loc_429648
	cmp ebx, 6B4h
	jl loc_4296B8

loc_429648:
	mov edi, dword [dword_5117C4]
	cmp edi, 5F3h
	jle loc_4296C2
	cmp edi, 6B5h
	jge loc_4296C2
	mov eax, 0FF75787Ch
	jmp loc_42954B

loc_429668:
	mov eax, 0FF2D3034h
	jmp loc_42954B

loc_429672:
	mov eax, 0FF35383Ch
	jmp loc_42954B

loc_42967C:
	mov eax, 0FF3D4044h
	jmp loc_42954B

loc_429686:
	mov eax, 0FF45484Ch
	jmp loc_42954B

loc_429690:
	mov eax, 0FF4D5054h
	jmp loc_42954B

loc_42969A:
	mov eax, 0FF55585Ch
	jmp loc_42954B

loc_4296A4:
	mov eax, 0FF5D6064h
	jmp loc_42954B

loc_4296AE:
	mov eax, 0FF65686Ch
	jmp loc_42954B

loc_4296B8:
	mov eax, 0FF6D7074h
	jmp loc_42954B

loc_4296C2:
	mov eax, 0FF7D8084h
	jmp loc_42954B

loc_4296CC:
	mov eax, dword [dword_5117C4] ; jumptable 00429186 case 4
	cmp eax, 25Dh
	jle loc_4296E3
	cmp eax, 2F1h
	jl loc_429BC8

loc_4296E3:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 25Bh
	jle loc_4296FD
	cmp ecx, 2F2h
	jl loc_429BDE

loc_4296FD:
	mov esi, dword [dword_5117C4]
	cmp esi, 258h
	jle loc_429717
	cmp esi, 2F3h
	jl loc_429BF4

loc_429717:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 256h
	jle loc_429731
	cmp ebp, 2F4h
	jl loc_429C0A

loc_429731:
	mov edx, dword [dword_5117C4]
	cmp edx, 253h
	jle loc_42974B
	cmp edx, 2F5h
	jl loc_429C20

loc_42974B:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 251h
	jle loc_429765
	cmp ebx, 2F6h
	jl loc_429C36

loc_429765:
	mov edi, dword [dword_5117C4]
	cmp edi, 24Eh
	jle loc_42977F
	cmp edi, 2F7h
	jl loc_429C4C

loc_42977F:
	mov eax, dword [dword_5117C4]
	cmp eax, 24Ch
	jle loc_429796
	cmp eax, 2F8h
	jl loc_429C62

loc_429796:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 249h
	jle loc_4297B0
	cmp ecx, 2F9h
	jl loc_429C78

loc_4297B0:
	mov esi, dword [dword_5117C4]
	cmp esi, 247h
	jle loc_4297CA
	cmp esi, 2FAh
	jl loc_429C8E

loc_4297CA:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 244h
	jle loc_4297E4
	cmp ebp, 2FBh
	jl loc_429CA4

loc_4297E4:
	mov edx, dword [dword_5117C4]
	cmp edx, 242h
	jle loc_4297FE
	cmp edx, 2FCh
	jl loc_429CBA

loc_4297FE:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 23Fh
	jle loc_429818
	cmp ebx, 2FDh
	jl loc_429CD0

loc_429818:
	mov edi, dword [dword_5117C4]
	cmp edi, 509h
	jle loc_429832
	cmp edi, 53Dh
	jl loc_429CE6

loc_429832:
	mov eax, dword [dword_5117C4]
	cmp eax, 508h
	jle loc_429849
	cmp eax, 53Eh
	jl loc_429CFC

loc_429849:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 507h
	jle loc_429863
	cmp ecx, 53Fh
	jl loc_429D12

loc_429863:
	mov esi, dword [dword_5117C4]
	cmp esi, 506h
	jle loc_42987D
	cmp esi, 540h
	jl loc_429D28

loc_42987D:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 505h
	jle loc_429897
	cmp ebp, 541h
	jl loc_429D3E

loc_429897:
	mov edx, dword [dword_5117C4]
	cmp edx, 504h
	jle loc_4298B1
	cmp edx, 542h
	jl loc_429D54

loc_4298B1:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 503h
	jle loc_4298CB
	cmp ebx, 543h
	jl loc_429D6A

loc_4298CB:
	mov edi, dword [dword_5117C4]
	cmp edi, 502h
	jle loc_4298E5
	cmp edi, 544h
	jl loc_429D80

loc_4298E5:
	mov eax, dword [dword_5117C4]
	cmp eax, 501h
	jle loc_4298FC
	cmp eax, 545h
	jl loc_429D96

loc_4298FC:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 500h
	jle loc_429916
	cmp ecx, 546h
	jl loc_429DAC

loc_429916:
	mov esi, dword [dword_5117C4]
	cmp esi, 426h
	jle loc_429930
	cmp esi, 556h
	jl loc_429DC2

loc_429930:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 425h
	jle loc_42994A
	cmp ebp, 557h
	jl loc_429DD8

loc_42994A:
	mov edx, dword [dword_5117C4]
	cmp edx, 424h
	jle loc_429964
	cmp edx, 558h
	jl loc_429DEE

loc_429964:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 423h
	jle loc_42997E
	cmp ebx, 559h
	jl loc_429E04

loc_42997E:
	mov edi, dword [dword_5117C4]
	cmp edi, 422h
	jle loc_429998
	cmp edi, 55Ah
	jl loc_429E1A

loc_429998:
	mov eax, dword [dword_5117C4]
	cmp eax, 421h
	jle loc_4299AF
	cmp eax, 55Bh
	jl loc_429E30

loc_4299AF:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 420h
	jle loc_4299C9
	cmp ecx, 55Ch
	jl loc_429E46

loc_4299C9:
	mov esi, dword [dword_5117C4]
	cmp esi, 41Fh
	jle loc_4299E3
	cmp esi, 55Dh
	jl loc_429E5C

loc_4299E3:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 41Eh
	jle loc_4299FD
	cmp ebp, 55Eh
	jl loc_429E72

loc_4299FD:
	mov edx, dword [dword_5117C4]
	cmp edx, 41Dh
	jle loc_429A17
	cmp edx, 55Fh
	jl loc_429E88

loc_429A17:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 41Ch
	jle loc_429A31
	cmp ebx, 560h
	jl loc_429E9E

loc_429A31:
	mov edi, dword [dword_5117C4]
	cmp edi, 41Bh
	jle loc_429A4B
	cmp edi, 561h
	jl loc_429EB4

loc_429A4B:
	mov eax, dword [dword_5117C4]
	cmp eax, 41Ah
	jle loc_429A62
	cmp eax, 562h
	jl loc_429EC7

loc_429A62:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 419h
	jle loc_429A7C
	cmp ecx, 563h
	jl loc_429EDA

loc_429A7C:
	mov esi, dword [dword_5117C4]
	cmp esi, 418h
	jle loc_429A96
	cmp esi, 563h
	jl loc_429EED

loc_429A96:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 417h
	jle loc_429AB0
	cmp ebp, 564h
	jl loc_429F00

loc_429AB0:
	mov edx, dword [dword_5117C4]
	cmp edx, 416h
	jle loc_429ACA
	cmp edx, 565h
	jl loc_429F13

loc_429ACA:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 415h
	jle loc_429AE4
	cmp ebx, 566h
	jl loc_429F26

loc_429AE4:
	mov edi, dword [dword_5117C4]
	cmp edi, 414h
	jle loc_429AFE
	cmp edi, 567h
	jl loc_429F39

loc_429AFE:
	mov eax, dword [dword_5117C4]
	cmp eax, 413h
	jle loc_429B15
	cmp eax, 568h
	jl loc_429F4C

loc_429B15:
	mov ecx, dword [dword_5117C4]
	cmp ecx, 412h
	jle loc_429B2F
	cmp ecx, 569h
	jl loc_429F5F

loc_429B2F:
	mov esi, dword [dword_5117C4]
	cmp esi, 411h
	jle loc_429B49
	cmp esi, 56Ah
	jl loc_429F72

loc_429B49:
	mov ebp, dword [dword_5117C4]
	cmp ebp, 410h
	jle loc_429B63
	cmp ebp, 56Bh
	jl loc_429F85

loc_429B63:
	mov edx, dword [dword_5117C4]
	cmp edx, 40Fh
	jle loc_429B7D
	cmp edx, 56Ch
	jl loc_429F98

loc_429B7D:
	mov ebx, dword [dword_5117C4]
	cmp ebx, 40Eh
	jle loc_429B97
	cmp ebx, 56Dh
	jl loc_429FAB

loc_429B97:
	mov edi, dword [dword_5117C4]
	cmp edi, 40Dh
	jle loc_429FBE
	cmp edi, 56Eh
	jge loc_429FBE
	mov eax, 0FF838283h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429BC8:
	mov edx, 0Eh
	mov eax, 0FF828490h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429BDE:
	mov edx, 0Dh
	mov eax, 0FF82848Fh
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429BF4:
	mov edx, 0Ch
	mov eax, 0FF82848Eh
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C0A:
	mov edx, 0Bh
	mov eax, 0FF82848Dh
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C20:
	mov edx, 0Ah
	mov eax, 0FF82848Ch
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C36:
	mov edx, 9
	mov eax, 0FF82848Bh
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C4C:
	mov edx, 8
	mov eax, 0FF82848Ah
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C62:
	mov edx, 7
	mov eax, 0FF828489h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C78:
	mov edx, 6
	mov eax, 0FF828488h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429C8E:
	mov edx, 4
	mov eax, 0FF828487h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429CA4:
	mov edx, 3
	mov eax, 0FF828486h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429CBA:
	mov edx, 2
	mov eax, 0FF828485h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429CD0:
	mov edx, 1
	mov eax, 0FF828484h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429CE6:
	mov edx, 0Ah
	mov eax, 0FFA82906h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429CFC:
	mov edx, 0Ah
	mov eax, 0FF982506h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D12:
	mov edx, 0Ah
	mov eax, 0FF882106h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D28:
	mov edx, 0Ah
	mov eax, 0FF781D06h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D3E:
	mov edx, 0Ah
	mov eax, 0FF681906h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D54:
	mov edx, 0Ah
	mov eax, 0FF581506h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D6A:
	mov edx, 0Ah
	mov eax, 0FF481106h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D80:
	mov edx, 0Ah
	mov eax, 0FF380D06h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429D96:
	mov edx, 0Ah
	mov eax, 0FF280906h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429DAC:
	mov edx, 0Ah
	mov eax, 0FF180506h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429DC2:
	mov edx, 0Bh
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429DD8:
	mov edx, 0Ah
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429DEE:
	mov edx, 9
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E04:
	mov edx, 8
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E1A:
	mov edx, 7
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E30:
	mov edx, 6
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E46:
	mov edx, 5
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E5C:
	mov edx, 4
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E72:
	mov edx, 3
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E88:
	mov edx, 2
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429E9E:
	mov edx, 1
	mov eax, 0FF030303h
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429EB4:
	mov eax, 0FF030303h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429EC7:
	mov eax, 0FF070707h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429EDA:
	mov eax, 0FF131313h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429EED:
	mov eax, 0FF1F1F1Fh
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F00:
	mov eax, 0FF2B2B2Bh
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F13:
	mov eax, 0FF373737h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F26:
	mov eax, 0FF434343h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F39:
	mov eax, 0FF4F4F4Fh
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F4C:
	mov eax, 0FF5B5B5Bh
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F5F:
	mov eax, 0FF676767h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F72:
	mov eax, 0FF737373h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F85:
	mov eax, 0FF7F7F7Fh
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429F98:
	mov eax, 0FF818081h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429FAB:
	mov eax, 0FF828182h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429FBE:
	mov eax, 0FF848284h
	xor edx, edx
	call sub_42CF00
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_429FD1:
	test ecx, ecx ; jumptable 00429186 default case
	jnz loc_4291BA
	xor eax, eax
	call sub_42CEB0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_429170 endp

sub_429FF0: ;SUBROUTINE
	push ecx
	push edx
	push 1E0h
	push 280h
	push 0
	push 0
	call sub_497714
	pop edx
	pop ecx
	ret
;sub_429FF0 endp

sub_42A010: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov edx, eax
	xor eax, eax
	call sub_44B660
	test eax, eax
	jnz loc_42A02B
	cmp dword [edx], 0
	jz loc_42A0D4

loc_42A02B:
	mov ecx, [edx+4]
	mov eax, [edx]
	mov ebx, [edx+68h]
	shl ecx, 5
	shl eax, 3
	add ecx, word_4EC588
	mov esi, [edx+6Ch]
	add eax, ecx
	or ebx, esi
	jz loc_42A141
	mov ecx, [edx+68h]
	movsx ebx, word [eax]
	add ebx, ecx
	mov ecx, [eax]
	sar ecx, 10h
	add ecx, esi
	mov dword [dword_4EC664], ecx
	mov ecx, [eax+2]
	sar ecx, 10h
	mov dword [dword_4EC658], ebx
	lea edx, [ebx+ecx]

loc_42A070:
	mov dword [dword_4EC65C], edx
	mov edx, [eax+4]
	mov eax, dword [dword_4EC664]
	sar edx, 10h
	add eax, edx
	mov dword [dword_4EC668], eax
	mov eax, dword [dword_4EC668]
	mov dword [dword_4EC650], eax

loc_42A092:
	mov eax, dword [dword_4EC63C]
	add eax, dword [dword_4EC668]
	mov ebp, dword [dword_4EC65C]
	push eax
	mov eax, dword [dword_4EC638]
	add eax, ebp
	mov edx, dword [dword_4EC664]
	push eax
	mov eax, dword [dword_4EC63C]
	add eax, edx
	mov ecx, dword [dword_4EC658]
	push eax
	mov eax, dword [dword_4EC638]
	add eax, ecx
	push eax
	call sub_497714
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A0D4:
	push edi
	call sub_477700
	mov bl, byte [byte_4EC66C]
	movsx edi, word [eax]
	mov cl, bl
	mov edx, edi
	mov esi, [eax]
	sar edx, cl
	sar esi, 10h
	mov dword [dword_4EC658], edx
	mov dl, byte [byte_4EC66D]
	mov ebp, esi
	mov cl, dl
	sar ebp, cl
	mov ecx, [eax+2]
	mov eax, [eax+4]
	sar ecx, 10h
	sar eax, 10h
	add edi, ecx
	mov cl, bl
	add eax, esi
	sar edi, cl
	mov cl, dl
	mov dword [dword_4EC664], ebp
	sar eax, cl
	mov dword [dword_4EC65C], edi
	mov dword [dword_4EC668], eax
	call sub_4776C0
	mov cl, byte [byte_4EC66D]
	sar eax, cl
	mov dword [dword_4EC650], eax
	pop edi
	jmp loc_42A092

loc_42A141:
	movsx edx, word [eax]
	mov dword [dword_4EC658], edx
	mov edx, [eax]
	mov ecx, [eax+2]
	sar edx, 10h
	sar ecx, 10h
	mov dword [dword_4EC664], edx
	mov edx, dword [dword_4EC658]
	add edx, ecx
	jmp loc_42A070
;sub_42A010 endp

sub_42A170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp dword [dword_512208], 1
	jnz loc_42A1E7
	push 0F0h
	push 280h
	xor ecx, ecx
	xor ebx, ebx
	push 0F0h
	xor edx, edx
	xor eax, eax
	call sub_42A210
	push 0
	push 0

loc_42A19C:
	mov eax, 1
	xor ecx, ecx
	push 0
	xor ebx, ebx
	xor edx, edx
	call sub_42A210
	push 1E0h
	push 280h
	mov eax, 2
	xor ecx, ecx
	push 0
	xor ebx, ebx
	xor edx, edx
	call sub_42A210
	push 87h
	push 6Ch
	mov eax, 3
	xor ecx, ecx
	push 0
	xor ebx, ebx
	xor edx, edx
	call sub_42A210
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A1E7:
	push 1E0h
	push 280h
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	xor eax, eax
	call sub_42A210
	push 46h
	push 96h
	jmp loc_42A19C
;sub_42A170 endp

sub_42A210: ;SUBROUTINE
	mov word word_4EC588[eax*8], dx
	mov word word_4EC58A[eax*8], bx
	mov word word_4EC5A8[eax*8], cx
	mov edx, [esp+8]
	mov word word_4EC58C[eax*8], dx
	mov edx, [esp+0Ch]
	mov word word_4EC58E[eax*8], dx
	mov edx, [esp+4]
	mov word word_4EC5AA[eax*8], dx
	mov edx, [esp+8]
	mov word word_4EC5AC[eax*8], dx
	mov edx, [esp+0Ch]
	mov word word_4EC5AE[eax*8], dx
	ret 0Ch
;sub_42A210 endp

sub_42A270: ;SUBROUTINE
	push esi
	shl eax, 5
	add eax, word_4EC588
	movsx esi, word [eax]
	mov [edx], esi
	mov edx, [eax]
	sar edx, 10h
	mov [ebx], edx
	mov edx, [eax+2]
	sar edx, 10h
	mov [ecx], edx
	mov eax, [eax+4]
	mov edx, [esp+8]
	sar eax, 10h
	mov [edx], eax
	pop esi
	ret 4
;sub_42A270 endp

sub_42A2A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov eax, dword [dword_4EC640]
	mov dl, byte byte_4D524C[eax*2]
	mov byte [byte_4EC66C], dl
	mov al, byte byte_4D524D[eax*2]
	mov edx, dword [dword_512208]
	mov byte [byte_4EC66D], al
	cmp edx, 1
	jnz loc_42A315
	mov eax, dword [dword_4EC644]
	mov cl, byte [byte_4EC66C]
	mov edx, dword dword_4D5234[eax*8]
	sar edx, cl
	mov word [word_4EC5AC], dx
	mov dl, byte [byte_4EC66D]
	inc dl
	mov eax, dword dword_4D5238[eax*8]
	mov cl, dl
	mov byte [byte_4EC66D], dl
	sar eax, cl
	xor edx, edx
	mov word [word_4EC5AE], ax
	mov word [word_4EC5A8], dx
	mov word [word_4EC5AA], ax

loc_42A315:
	mov eax, dword [dword_4EC644]
	mov cl, byte [byte_4EC66C]
	xor ebx, ebx
	mov edx, dword dword_4D5234[eax*8]
	mov eax, dword dword_4D5238[eax*8]
	sar edx, cl
	mov cl, byte [byte_4EC66D]
	mov word [word_4EC58C], dx
	mov bl, cl
	xor edx, edx
	sar eax, cl
	mov dl, byte [byte_4EC66C]
	mov word [word_4EC58E], ax
	mov eax, dword [dword_4EC644]
	call sub_434DA0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42A2A0 endp

sub_42A360: ;SUBROUTINE
	mov eax, 1
	ret
;sub_42A360 endp

sub_42A370: ;SUBROUTINE
	mov eax, dword [dword_4EC644]
	ret
;sub_42A370 endp

;	Attributes: thunk

sub_42A380: ;SUBROUTINE
	jmp sub_438110
;sub_42A380 endp

sub_42A390: ;SUBROUTINE
	xor eax, eax
	ret
;sub_42A390 endp

sub_42A3A0: ;SUBROUTINE
	cmp dword [dword_512248], 0
	jnz loc_42A3B4
	mov eax, 1
	mov dword [dword_512248], eax
	ret

loc_42A3B4:
	xor eax, eax
	mov dword [dword_512248], eax
	ret
;sub_42A3A0 endp

sub_42A3C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	push 0
	push 2
	call sub_497738
	call sub_42A3F0
	test ebx, ebx
	jz loc_42A3EC

loc_42A3D8:
	mov edx, [ebx+4]
	mov eax, ebx
	call dword dword_4EC500[edx*4]
	mov ebx, [ebx]
	test ebx, ebx
	jnz loc_42A3D8

loc_42A3EC:
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42A3C0 endp

sub_42A3F0: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov edx, sub_42B6B0
	mov ebx, sub_42B970
	mov esi, sub_42BBA0
	mov dword [dword_4EC524], edx
	mov dword [dword_4EC528], ebx
	mov dword [dword_4EC52C], esi
	mov dword [dword_4EC520], edx
	pop esi
	pop edx
	pop ebx
	ret
;sub_42A3F0 endp

nullsub_9: ;SUBROUTINE
	ret
;nullsub_9 endp

sub_42A5B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 8
	mov esi, eax
	mov edx, dword [dword_4EC660]
	xor ecx, ecx
	test edx, edx
	jle loc_42A5E6
	xor ebx, ebx

loc_42A5C8:
	mov edx, 0Ch
	mov eax, esp
	call sub_46FEA0
	test eax, eax
	jnz loc_42A60B

loc_42A5D8:
	mov edi, dword [dword_4EC660]
	inc ecx
	add ebx, 4
	cmp ecx, edi
	jl loc_42A5C8

loc_42A5E6:
	cmp dword [esi], 0
	jnz loc_42A631
	mov ecx, 0A0000h

loc_42A5F0:
	mov edx, 0Ch
	lea eax, [esp+4]
	call sub_46FEA0
	test eax, eax
	jnz loc_42A638
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A60B:
	mov eax, [esp]
	mov dword [eax+4], 17h
	mov edx, [esp]
	mov al, byte byte_4EC5E8[ecx]
	mov [edx+8], al
	mov edx, [esp]
	mov eax, dword dword_4EC5F8[ebx]
	call sub_471390
	jmp loc_42A5D8

loc_42A631:
	mov ecx, 40000h
	jmp loc_42A5F0

loc_42A638:
	mov eax, [esp+4]
	mov dword [eax+4], 19h
	mov eax, [esp+4]
	mov byte [eax+8], 1
	mov eax, ecx
	mov edx, [esp+4]
	call sub_4713C0
	call sub_471390
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42A5B0 endp

nullsub_10: ;SUBROUTINE
	ret
;nullsub_10 endp

sub_42A680: ;SUBROUTINE
	push ecx
	push edx
	mov edx, [eax+0Ch]
	cmp edx, 8
	jb loc_42A6B4
	ja loc_42A69E
	mov ecx, [eax+8]
	cmp ecx, 1
	jnz loc_42A6B0
	push ecx

loc_42A695:
	call grChromakeyMode
	pop edx
	pop ecx
	ret

loc_42A69E:
	cmp edx, 0Bh
	jnz loc_42A6B4
	mov edx, [eax+8]
	push edx
	call grChromakeyValue
	pop edx
	pop ecx
	ret

loc_42A6B0:
	push 0
	jmp loc_42A695

loc_42A6B4:
	push esi
	push ebx
	mov ebx, [eax+0Ch]
	push ebx
	mov esi, [eax+8]
	push esi
	call sub_497738
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret
;sub_42A680 endp

sub_42A6D0: ;SUBROUTINE
	mov al, [eax+8]
	and eax, 0FFh
	shl eax, 0Ah
	add eax, dword_545944
	cmp eax, dword [dword_4D4E8C]
	jnz loc_42CD29
	ret

loc_42CD29:
	push edx
	push ecx
	push eax
	push 0
	push 0
	mov dword [dword_4D4E8C], eax
	call sub_49755C
	pop ecx
	pop edx
	ret
;sub_42A6D0 endp

sub_42A6F0: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov edx, sub_42B6B0
	mov ebx, sub_42B970
	mov esi, sub_42BBA0
	mov dword [dword_4EC524], edx
	mov dword [dword_4EC528], ebx
	mov dword [dword_4EC52C], esi
	mov dword [dword_4EC520], edx
	pop esi
	pop edx
	pop ebx
	ret
;sub_42A6F0 endp

sub_42A700: ;SUBROUTINE
	mov al, [eax+8]
	and eax, 0FFh
	mov dword [dword_4EC654], eax
	ret
;sub_42A700 endp

sub_42A710: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp word [eax+8], 1
	jz loc_42A75B
	cmp word [eax+0Ah], 0
	jl loc_42A787
	mov edx, [eax+0Eh]
	mov ecx, dword [dword_4EC63C]
	sar edx, 10h
	add edx, ecx
	push edx
	mov edx, [eax+0Ch]
	mov ebx, dword [dword_4EC638]
	sar edx, 10h
	add edx, ebx
	push edx
	mov edx, [eax+0Ah]
	sar edx, 10h
	mov eax, [eax+8]
	add edx, ecx
	sar eax, 10h
	push edx
	add eax, ebx
	push eax
	call sub_497714
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A75B:
	mov edx, [eax+0Eh]
	sar edx, 10h
	push edx
	mov edx, [eax+0Ch]
	sar edx, 10h
	push edx
	mov edx, [eax+0Ah]
	sar edx, 10h
	mov eax, [eax+8]
	push edx
	sar eax, 10h
	push eax
	call sub_497714
	call sub_49769C
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A787:
	mov eax, dword [dword_4EC63C]
	add eax, dword [dword_4EC668]
	mov edx, dword [dword_4EC65C]
	push eax
	mov eax, dword [dword_4EC638]
	add eax, edx
	mov ecx, dword [dword_4EC664]
	push eax
	mov eax, dword [dword_4EC63C]
	add eax, ecx
	mov ebx, dword [dword_4EC658]
	push eax
	mov eax, dword [dword_4EC638]
	add eax, ebx
	push eax
	call sub_497714
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42A710 endp

sub_42A7D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 8
	mov edx, [eax+6]
	mov ecx, dword [dword_4EC638]
	sar edx, 10h
	add edx, ecx
	mov [esp], edx
	mov edx, [eax+8]
	mov ebx, dword [dword_4EC63C]
	sar edx, 10h
	add edx, ebx
	mov [esp+4], edx
	xor edx, edx
	mov dl, [eax+10h]
	mov ecx, edx
	xor edx, edx
	mov dl, [eax+11h]
	shl ecx, 18h
	shl edx, 10h
	or ecx, edx
	xor edx, edx
	mov esi, dword [dword_4EC638]
	mov dl, [eax+12h]
	mov ebp, dword [dword_4D4EB0]
	shl edx, 8
	fild dword [esp]
	or ecx, edx
	xor edx, edx
	fstp dword [flt_4D51F4]
	mov dl, [eax+13h]
	fild dword [esp+4]
	or ecx, edx
	fstp dword [flt_4D51F8]
	mov dword [dword_4D5204], ecx
	mov edx, [eax+0Ah]
	mov dword [dword_4D5224], ecx
	sar edx, 10h
	mov eax, [eax+0Ch]
	add edx, esi
	sar eax, 10h
	mov [esp+4], edx
	add eax, ebx
	fild dword [esp+4]
	mov [esp+4], eax
	fstp dword [flt_4D5214]
	fild dword [esp+4]
	fstp dword [flt_4D5218]
	test ebp, ebp
	jnz loc_42A894

loc_42A87B:
	push flt_4D5214
	push flt_4D51F4
	call sub_498EE0
	add esp, 8
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A894:
	xor eax, eax
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738
	jmp loc_42A87B
;sub_42A7D0 endp

sub_42A8B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edx, eax
	mov eax, [eax+8]
	mov ecx, dword [dword_4EC638]
	sar eax, 10h
	add eax, ecx
	mov [esp], eax
	mov eax, [edx+0Ah]
	mov ebx, dword [dword_4EC63C]
	sar eax, 10h
	fild dword [esp]
	add eax, ebx
	fstp dword [flt_4D51B4]
	mov [esp], eax
	xor eax, eax
	fild dword [esp]
	mov al, [edx+8]
	fstp dword [flt_4D51B8]
	call sub_49B2E0
	mov esi, dword [dword_4EC638]
	mov edi, dword [dword_4EC63C]
	mov ebp, dword [dword_4D4EB0]
	mov dword [dword_4D51C4], eax
	mov ecx, [edx+0Ch]
	mov dword [dword_4D51E4], eax
	sar ecx, 10h
	mov edx, [edx+0Eh]
	add ecx, esi
	sar edx, 10h
	mov [esp], ecx
	add edx, edi
	fild dword [esp]
	mov [esp], edx
	fstp dword [flt_4D51D4]
	fild dword [esp]
	fstp dword [flt_4D51D8]
	test ebp, ebp
	jnz loc_42A95B

loc_42A941:
	push flt_4D51D4
	push flt_4D51B4
	call sub_498EE0
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42A95B:
	xor eax, eax
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738
	jmp loc_42A941
;sub_42A8B0 endp

nullsub_11: ;SUBROUTINE
	ret
;nullsub_11 endp

sub_42A980: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	xor ecx, ecx
	xor edx, edx
	mov cl, [eax+28h]
	mov dl, [eax+29h]
	shl ecx, 18h
	shl edx, 10h
	or ecx, edx
	xor edx, edx
	mov dl, [eax+2Ah]
	shl edx, 8
	or ecx, edx
	xor edx, edx
	mov ebx, [eax+0Ch]
	mov dl, [eax+2Bh]
	mov esi, [eax+10h]
	or ecx, edx
	mov edx, dword [dword_4EC638]
	mov dword [dword_4D5144], ecx
	mov ecx, [eax+8]
	mov edi, [eax+14h]
	add edx, ecx
	mov ebp, [eax+18h]
	mov [esp], edx
	mov ecx, [eax+1Ch]
	mov edx, dword [dword_4EC63C]
	fild dword [esp]
	add edx, ebx
	fstp dword [flt_4D5134]
	mov [esp], edx
	mov ebx, [eax+20h]
	mov edx, dword [dword_4EC638]
	fild dword [esp]
	add edx, esi
	fstp dword [flt_4D5138]
	mov [esp], edx
	mov esi, [eax+24h]
	fild dword [esp]
	mov edx, dword [dword_4EC63C]
	mov eax, dword [dword_4D5144]
	fstp dword [flt_4D5154]
	mov dword [dword_4D5164], eax
	mov dword [dword_4D5184], eax
	add edx, edi
	mov dword [dword_4D51A4], eax
	mov [esp], edx
	mov edx, dword [dword_4EC638]
	mov edi, dword [dword_4D4EB0]
	add edx, ebp
	fild dword [esp]
	mov [esp], edx
	mov edx, dword [dword_4EC63C]
	fstp dword [flt_4D5158]
	add edx, ecx
	fild dword [esp]
	mov [esp], edx
	mov edx, dword [dword_4EC638]
	fstp dword [flt_4D5174]
	add edx, ebx
	fild dword [esp]
	mov [esp], edx
	mov edx, dword [dword_4EC63C]
	fstp dword [flt_4D5178]
	add edx, esi
	fild dword [esp]
	mov [esp], edx
	fstp dword [flt_4D5194]
	fild dword [esp]
	fstp dword [flt_4D5198]
	test edi, edi
	jnz loc_42AAAC

loc_42AA88:
	push flt_4D5194
	push flt_4D5174
	push flt_4D5154
	push flt_4D5134
	call sub_497B24
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42AAAC:
	xor ebp, ebp
	push ebp
	push 1
	mov dword [dword_4D4EB0], ebp
	call sub_497738
	jmp loc_42AA88
;sub_42A980 endp

sub_42AAC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edx, eax
	xor eax, eax
	mov al, [edx+28h]
	call sub_49B2E0
	mov ecx, dword [dword_4EC638]
	mov dword [dword_4D50C4], eax
	mov dword [dword_4D50E4], eax
	mov dword [dword_4D5104], eax
	mov dword [dword_4D5124], eax
	mov ebx, [edx+8]
	mov esi, [edx+0Ch]
	mov edi, [edx+10h]
	mov ebp, [edx+14h]
	add ecx, ebx
	mov eax, dword [dword_4D4EB0]
	mov [esp], ecx
	mov ebx, [edx+18h]
	mov ecx, dword [dword_4EC63C]
	fild dword [esp]
	add ecx, esi
	fstp dword [flt_4D50B4]
	mov [esp], ecx
	mov esi, [edx+1Ch]
	mov ecx, dword [dword_4EC638]
	fild dword [esp]
	add ecx, edi
	fstp dword [flt_4D50B8]
	mov [esp], ecx
	mov edi, [edx+20h]
	mov ecx, dword [dword_4EC63C]
	fild dword [esp]
	add ecx, ebp
	fstp dword [flt_4D50D4]
	mov [esp], ecx
	mov ecx, dword [dword_4EC638]
	mov ebp, [edx+24h]
	add ecx, ebx
	fild dword [esp]
	mov [esp], ecx
	mov ecx, dword [dword_4EC63C]
	fstp dword [flt_4D50D8]
	add ecx, esi
	fild dword [esp]
	mov [esp], ecx
	mov ecx, dword [dword_4EC638]
	fstp dword [flt_4D50F4]
	add ecx, edi
	fild dword [esp]
	mov [esp], ecx
	mov ecx, dword [dword_4EC63C]
	fstp dword [flt_4D50F8]
	add ecx, ebp
	fild dword [esp]
	mov [esp], ecx
	fstp dword [flt_4D5114]
	fild dword [esp]
	fstp dword [flt_4D5118]
	test eax, eax
	jnz loc_42ABCE

loc_42ABAA:
	push flt_4D5114
	push flt_4D50F4
	push flt_4D50D4
	push flt_4D50B4
	call sub_497B24
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42ABCE:
	xor edx, edx
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738
	jmp loc_42ABAA
;sub_42AAC0 endp

sub_42ABF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 10h
	mov ecx, dword [dword_4EC638]
	mov edx, [eax+8]
	mov ebx, [eax+0Ch]
	add ecx, edx
	mov edx, dword [dword_4EC63C]
	add edx, ebx
	mov esi, [eax+14h]
	mov [esp+0Ch], edx
	mov ebx, [eax+10h]
	add esi, edx
	mov edx, [eax+20h]
	mov [esp+8], ecx
	add ebx, ecx
	mov ecx, [edx]
	fild word [ecx+4]
	fld1
	fdivrp st1, st0
	fild dword [eax+18h]
	fild dword [eax+1Ch]
	fild dword [eax+14h]
	fild dword [eax+10h]
	faddp st3, st0
	faddp st1, st0
	fild word [ecx+6]
	fld1
	fxch st3
	fmul st0, st4
	fxch st3
	fdivrp st1, st0
	fxch st1
	fmul st0, st1
	fild dword [eax+1Ch]
	fld qword [dbl_4C9F74]
	fild dword [eax+18h]
	fadd st0, st1
	fxch st2
	faddp st1, st0
	fxch st5
	fmulp st1, st0
	fxch st2
	fmulp st4, st0
	fild dword [esp+8]
	fst dword [flt_4D5034]
	fstp dword [flt_4D5094]
	fild dword [esp+0Ch]
	fstp dword [flt_4D5038]
	mov [esp+0Ch], esi
	mov ecx, dword [flt_4D5038]
	mov dword [dword_4D5058], ecx
	fild dword [esp+0Ch]
	mov esi, dword [dword_4D4EB0]
	mov [esp+0Ch], ebx
	fstp dword [flt_4D5078]
	mov eax, [eax+24h]
	fild dword [esp+0Ch]
	fstp dword [flt_4D5054]
	mov ecx, dword [flt_4D5078]
	mov dword [dword_4D5098], ecx
	mov dword [dword_4D50A4], eax
	mov dword [dword_4D5084], eax
	mov dword [dword_4D5064], eax
	mov dword [dword_4D5044], eax
	mov eax, dword [flt_4D5054]
	mov dword [dword_4D5074], eax
	mov eax, [edx+14h]
	fxch st2
	fstp dword [flt_4D506C]
	fxch st1
	fstp dword [flt_4D5090]
	fld dword [flt_4D506C]
	fld dword [flt_4D5090]
	fxch st2
	fstp dword [flt_4D504C]
	fxch st2
	fst dword [flt_4D5050]
	fld dword [flt_4D504C]
	fxch st3
	fstp dword [flt_4D508C]
	fxch st1
	fstp dword [flt_4D50B0]
	fstp dword [flt_4D5070]
	fstp dword [flt_4D50AC]
	cmp eax, esi
	jnz loc_42AD52

loc_42AD30:
	push flt_4D5094
	push dword_4D5074
	push flt_4D5054
	push flt_4D5034
	call sub_497B24
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42AD52:
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738
	jmp loc_42AD30
;sub_42ABF0 endp

sub_42AD80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 10h
	mov ecx, dword [dword_4EC638]
	mov edx, [eax+8]
	mov ebx, [eax+0Ch]
	add ecx, edx
	mov edx, dword [dword_4EC63C]
	mov esi, [eax+14h]
	add edx, ebx
	mov ebx, [eax+10h]
	mov [esp+8], ecx
	add ebx, ecx
	mov ecx, [eax+20h]
	mov [esp+0Ch], edx
	add esi, edx
	mov edx, [ecx]
	fild word [edx+4]
	fld1
	fdivrp st1, st0
	fild dword [eax+18h]
	fild dword [eax+1Ch]
	fild dword [eax+14h]
	fild dword [eax+10h]
	faddp st3, st0
	faddp st1, st0
	fild word [edx+6]
	fld1
	fxch st3
	fmul st0, st4
	fxch st3
	fdivrp st1, st0
	fxch st1
	fmul st0, st1
	fild dword [eax+1Ch]
	fld qword [dbl_4C9F6C]
	fild dword [eax+18h]
	fadd st0, st1
	fxch st2
	faddp st1, st0
	fxch st5
	fmulp st1, st0
	fxch st2
	fmulp st4, st0
	fild dword [esp+8]
	fst dword [flt_4D4FB4]
	fstp dword [flt_4D5014]
	fild dword [esp+0Ch]
	fstp dword [flt_4D4FB8]
	mov [esp+0Ch], esi
	mov eax, dword [flt_4D4FB8]
	mov dword [dword_4D4FD8], eax
	fild dword [esp+0Ch]
	mov esi, dword [dword_4D4EB0]
	mov [esp+0Ch], ebx
	fstp dword [flt_4D4FF8]
	fild dword [esp+0Ch]
	fstp dword [flt_4D4FD4]
	mov eax, dword [flt_4D4FF8]
	mov dword [dword_4D5018], eax
	mov eax, [ecx+14h]
	mov edx, dword [flt_4D4FD4]
	mov dword [dword_4D4FF4], edx
	fxch st2
	fstp dword [flt_4D4FEC]
	fxch st1
	fstp dword [flt_4D5010]
	fld dword [flt_4D4FEC]
	fld dword [flt_4D5010]
	fxch st2
	fstp dword [flt_4D4FCC]
	fxch st2
	fst dword [flt_4D4FD0]
	fld dword [flt_4D4FCC]
	fxch st3
	fstp dword [flt_4D500C]
	fxch st1
	fstp dword [flt_4D5030]
	fstp dword [flt_4D4FF0]
	fstp dword [flt_4D502C]
	cmp eax, esi
	jnz loc_42AEC9

loc_42AEA7:
	push flt_4D5014
	push dword_4D4FF4
	push flt_4D4FD4
	push flt_4D4FB4
	call sub_497B24
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42AEC9:
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738
	jmp loc_42AEA7
;sub_42AD80 endp

off_42AEE0: dd loc_42B099
	dd loc_42B122
	dd loc_42B12D
	dd loc_42B122
off_42AEF0: dd loc_42B0D6
	dd loc_42B13A
	dd loc_42B150
	dd loc_42B13A

sub_42AF00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ecx, [eax+0Ch]
	mov edx, eax
	add ecx, 10h
	mov ebp, [eax+10h]
	mov [esp+24h], ecx
	mov ecx, [eax+14h]
	mov bx, [eax+0Ah]
	add ecx, 10h
	add ebp, 10h
	mov [esp+28h], ecx
	cmp bx, 3
	jnz loc_42AF71
	cmp dword [dword_4D4E88], 0
	jz loc_42B0EC
	mov eax, [esp+28h]
	fld dword [eax+4]
	fsub dword [ebp+4]
	mov eax, [esp+24h]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fld dword [eax+4]
	fsub dword [ebp+4]
	mov eax, [esp+28h]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	ja loc_42B0E2

loc_42AF71:
	mov esi, [esp+24h]
	mov edi, esp
	lea esi, [esi+18h]
	movsd
	movsd
	lea edi, [esp+8]
	lea esi, [ebp+18h]
	movsd
	movsd
	mov esi, [esp+28h]
	lea edi, [esp+10h]
	lea esi, [esi+18h]
	mov eax, [esp+24h]
	movsd
	movsd
	mov eax, [eax+10h]
	mov [esp+18h], eax
	mov eax, [ebp+10h]
	mov [esp+1Ch], eax
	mov eax, [esp+28h]
	mov eax, [eax+10h]
	mov [esp+20h], eax
	mov eax, [esp+18h]
	mov ecx, [esp+24h]
	or eax, 0FF000000h
	mov [ecx+10h], eax
	or byte [ebp+13h], 0FFh
	mov eax, [esp+28h]
	or byte [eax+13h], 0FFh
	mov eax, [edx+1Ch]
	mov edi, ecx
	mov esi, [eax+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+8]
	lea edi, [ebp+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp+28h]
	mov esi, [eax+0Ch]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov eax, [edx+1Ch]
	mov ebx, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, ebx
	jz loc_42B020
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42B020:
	mov ebx, [esp+28h]
	mov eax, [esp+24h]
	mov edi, [esp+24h]
	mov edx, ebp
	mov esi, esp
	call sub_432670
	lea edi, [edi+18h]
	movsd
	movsd
	lea esi, [esp+8]
	lea edi, [ebp+18h]
	movsd
	movsd
	mov edi, [esp+28h]
	lea esi, [esp+10h]
	lea edi, [edi+18h]
	mov eax, [esp+18h]
	mov edx, [esp+24h]
	movsd
	movsd
	mov [edx+10h], eax
	mov eax, [esp+1Ch]
	mov edx, [esp+28h]
	mov [ebp+10h], eax
	mov eax, [esp+20h]
	mov [edx+10h], eax
	mov eax, dword [dword_500F5C]
	mov edi, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, edi
	jz loc_42B08E
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42B08E:
	mov eax, 0Ch
	jmp off_42AEE0[eax]

loc_42B099:
	push 0
	push 0
	push 5

loc_42B09F:
	push 1

loc_42B0A1:
	call grAlphaBlendFunction
	push 0
	push 0
	push 0
	mov ebx, [esp+34h]
	call grTexClampMode
	mov eax, [esp+24h]
	mov edx, ebp
	call sub_432670
	push 1
	push 1
	push 0
	call grTexClampMode
	xor eax, eax
	jmp off_42AEF0[eax]

loc_42B0D6:
	push eax
	push eax
	push 5
	push 1
	call grAlphaBlendFunction

loc_42B0E2:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B0EC:
	mov eax, [esp+28h]
	fld dword [eax+4]
	fsub dword [ebp+4]
	mov eax, [esp+24h]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fld dword [eax+4]
	fsub dword [ebp+4]
	mov eax, [esp+28h]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B0E2
	jmp loc_42AF71

loc_42B122:
	push 0
	push 0
	push 4
	jmp loc_42B09F

loc_42B12D:
	push 0
	push 0
	push 5
	push 0
	jmp loc_42B0A1

loc_42B13A:
	push eax
	push eax
	push 4
	push 1
	call grAlphaBlendFunction
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B150:
	push eax
	push eax
	push 5
	push eax
	call grAlphaBlendFunction
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42AF00 endp

sub_42B170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	sub esp, 8
	mov ecx, eax
	mov edx, [eax+0Ch]
	mov ebp, [eax+10h]
	mov ebx, [eax+14h]
	add edx, 10h
	add ebp, 10h
	mov [esp+4], edx
	mov dx, [eax+0Ah]
	add ebx, 10h
	cmp dx, 3
	jnz loc_42B1D3
	cmp dword [dword_4D4E88], 0
	jz loc_42B2D2
	fld dword [ebx+4]
	fsub dword [ebp+4]
	mov eax, [esp+4]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fld dword [eax+4]
	fsub dword [ebp+4]
	fld dword [ebx]
	fsub dword [ebp+0]
	fmulp st1, st0
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	ja loc_42B2CA

loc_42B1D3:
	push edi
	push esi
	mov eax, [ecx+1Ch]
	mov edi, [esp+0Ch]
	mov esi, [eax+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+8]
	lea edi, [ebp+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	lea edi, [ebx+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edx, [ecx+20h]
	shr edx, 4
	mov eax, edx
	and eax, 7
	mov esi, eax
	shl esi, 4
	shl eax, 3
	add eax, esi
	add eax, 32h
	mov esi, eax
	mov edi, eax
	shl esi, 10h
	shl edi, 8
	or esi, 0FF000000h
	or edi, esi
	mov esi, edi
	or esi, eax
	mov eax, [esp+0Ch]
	shr edx, 3
	mov [eax+10h], esi
	mov eax, edx
	and eax, 7
	mov esi, eax
	shl esi, 4
	shl eax, 3
	add eax, esi
	add eax, 32h
	mov esi, eax
	shl esi, 10h
	or esi, 0FF000000h
	mov [esp+8], esi
	mov esi, eax
	mov edi, [esp+8]
	shl esi, 8
	or esi, edi
	or esi, eax
	mov eax, edx
	shr eax, 3
	and eax, 7
	mov edx, eax
	shl edx, 4
	shl eax, 3
	add eax, edx
	add eax, 32h
	mov [ebp+10h], esi
	mov esi, eax
	mov edx, eax
	shl esi, 10h
	shl edx, 8
	or esi, 0FF000000h
	or edx, esi
	or edx, eax
	mov [ebx+10h], edx
	mov eax, [ecx+1Ch]
	mov ecx, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, ecx
	jz loc_42B2BD
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42B2BD:
	mov eax, [esp+0Ch]
	mov edx, ebp
	call sub_432670
	pop esi
	pop edi

loc_42B2CA:
	add esp, 8
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B2D2:
	fld dword [ebx+4]
	fsub dword [ebp+4]
	mov eax, [esp+4]
	fld dword [eax]
	fsub dword [ebp+0]
	fmulp st1, st0
	fld dword [eax+4]
	fsub dword [ebp+4]
	fld dword [ebx]
	fsub dword [ebp+0]
	fmulp st1, st0
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B2CA
	jmp loc_42B1D3
;sub_42B170 endp

off_42B300: dd loc_42B579
	dd loc_42B66C
	dd loc_42B677
	dd loc_42B66C
off_42B310: dd loc_42B5BA
	dd loc_42B684
	dd loc_42B69A
	dd loc_42B684

sub_42B320: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov edx, eax
	mov eax, [eax+0Ch]
	add eax, 10h
	mov [esp+4Ch], eax
	mov eax, [edx+10h]
	add eax, 10h
	mov ebp, [edx+14h]
	mov [esp+50h], eax
	mov eax, [edx+18h]
	mov bx, [edx+0Ah]
	add eax, 10h
	add ebp, 10h
	mov [esp+54h], eax
	cmp bx, 3
	jnz loc_42B3FD
	cmp dword [dword_4D4E88], 0
	jz loc_42B5D0
	mov eax, [esp+4Ch]
	fld dword [eax+4]
	fsub dword [ebp+4]
	call __CHP
	fistp dword [esp+28h]
	mov eax, [esp+28h]
	mov [esp+28h], eax
	mov eax, [esp+50h]
	fild dword [esp+28h]
	fld dword [eax]
	fsub dword [ebp+0]
	fxch st1
	fstp dword [esp+44h]
	fmul dword [esp+44h]
	mov eax, [esp+4Ch]
	fld dword [eax]
	fsub dword [ebp+0]
	call __CHP
	fistp dword [esp+28h]
	mov eax, [esp+28h]
	mov [esp+28h], eax
	fild dword [esp+28h]
	mov eax, [esp+50h]
	fstp dword [esp+3Ch]
	fld dword [eax+4]
	fsub dword [ebp+4]
	fmul dword [esp+3Ch]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B3FD
	mov eax, [esp+54h]
	fld dword [eax+4]
	fsub dword [ebp+4]
	fmul dword [esp+3Ch]
	fld dword [eax]
	fsub dword [ebp+0]
	fmul dword [esp+44h]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B5C6

loc_42B3FD:
	mov esi, [esp+4Ch]
	mov edi, esp
	lea esi, [esi+18h]
	movsd
	movsd
	mov esi, [esp+50h]
	lea edi, [esp+8]
	lea esi, [esi+18h]
	movsd
	movsd
	lea edi, [esp+10h]
	lea esi, [ebp+18h]
	movsd
	movsd
	mov esi, [esp+54h]
	lea edi, [esp+18h]
	lea esi, [esi+18h]
	mov eax, [esp+4Ch]
	movsd
	movsd
	mov eax, [eax+10h]
	mov [esp+2Ch], eax
	mov eax, [esp+50h]
	mov eax, [eax+10h]
	mov [esp+34h], eax
	mov eax, [ebp+10h]
	mov [esp+30h], eax
	mov eax, [esp+54h]
	mov eax, [eax+10h]
	mov [esp+38h], eax
	mov eax, [esp+2Ch]
	mov esi, [esp+4Ch]
	or eax, 0FF000000h
	mov [esi+10h], eax
	mov eax, [esp+50h]
	or byte [eax+13h], 0FFh
	mov bh, [ebp+13h]
	or bh, 0FFh
	mov eax, [esp+54h]
	mov [ebp+13h], bh
	or byte [eax+13h], 0FFh
	mov eax, [edx+1Ch]
	mov edi, [esp+4Ch]
	mov esi, [eax+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp+50h]
	mov esi, [eax+8]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	lea edi, [ebp+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp+54h]
	mov esi, [eax+10h]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov eax, [edx+1Ch]
	mov ebx, dword [dword_4D4EB0]
	mov eax, [eax+14h]
	cmp eax, ebx
	jz loc_42B4E5
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738

loc_42B4E5:
	mov ecx, [esp+54h]
	mov edx, [esp+50h]
	mov eax, [esp+4Ch]
	mov edi, [esp+4Ch]
	mov ebx, ebp
	mov esi, esp
	call sub_432580
	lea edi, [edi+18h]
	movsd
	movsd
	mov edi, [esp+50h]
	lea esi, [esp+8]
	lea edi, [edi+18h]
	movsd
	movsd
	lea esi, [esp+10h]
	lea edi, [ebp+18h]
	movsd
	movsd
	mov edi, [esp+54h]
	lea esi, [esp+18h]
	lea edi, [edi+18h]
	mov eax, [esp+2Ch]
	mov edx, [esp+4Ch]
	movsd
	movsd
	mov [edx+10h], eax
	mov edx, [esp+50h]
	mov eax, [esp+34h]
	mov [edx+10h], eax
	mov eax, [esp+30h]
	mov edx, [esp+54h]
	mov [ebp+10h], eax
	mov eax, [esp+38h]
	mov [edx+10h], eax
	mov eax, dword [dword_500F5C]
	mov esi, dword [dword_4D4EB0]
	mov eax, [eax+14h]
	cmp eax, esi
	jz loc_42B56E
	push eax
	push 1
	mov dword [dword_4D4EB0], eax
	call sub_497738

loc_42B56E:
	mov eax, 0Ch
	jmp off_42B300[eax]

loc_42B579:
	push 0
	push 0
	push 5

loc_42B57F:
	push 1

loc_42B581:
	call grAlphaBlendFunction
	push 0
	push 0
	push 0
	mov ebx, ebp
	call grTexClampMode
	mov ecx, [esp+54h]
	mov edx, [esp+50h]
	mov eax, [esp+4Ch]
	call sub_432580
	push 1
	push 1
	push 0
	call grTexClampMode
	xor eax, eax
	jmp off_42B310[eax]

loc_42B5BA:
	push eax
	push eax
	push 5
	push 1
	call grAlphaBlendFunction

loc_42B5C6:
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B5D0:
	mov eax, [esp+4Ch]
	fld dword [eax+4]
	fsub dword [ebp+4]
	call __CHP
	fistp dword [esp+20h]
	mov eax, [esp+20h]
	mov [esp+28h], eax
	mov eax, [esp+50h]
	fild dword [esp+28h]
	fld dword [eax]
	fsub dword [ebp+0]
	fxch st1
	fstp dword [esp+40h]
	fmul dword [esp+40h]
	mov eax, [esp+4Ch]
	fld dword [eax]
	fsub dword [ebp+0]
	call __CHP
	fistp dword [esp+24h]
	mov eax, [esp+24h]
	mov [esp+28h], eax
	fild dword [esp+28h]
	mov eax, [esp+50h]
	fstp dword [esp+48h]
	fld dword [eax+4]
	fsub dword [ebp+4]
	fmul dword [esp+48h]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42B3FD
	mov eax, [esp+54h]
	fld dword [eax+4]
	fsub dword [ebp+4]
	fmul dword [esp+48h]
	fld dword [eax]
	fsub dword [ebp+0]
	fmul dword [esp+40h]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42B5C6
	jmp loc_42B3FD

loc_42B66C:
	push 0
	push 0
	push 4
	jmp loc_42B57F

loc_42B677:
	push 0
	push 0
	push 5
	push 0
	jmp loc_42B581

loc_42B684:
	push eax
	push eax
	push 4
	push 1
	call grAlphaBlendFunction
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B69A:
	push eax
	push eax
	push 5
	push eax
	call grAlphaBlendFunction
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42B320 endp

sub_42B6B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	sub esp, 24h
	mov ecx, eax
	mov eax, [eax+0Ch]
	mov ebx, [ecx+14h]
	mov ebp, [ecx+18h]
	add eax, 10h
	mov dx, [ecx+0Ah]
	mov [esp+1Ch], eax
	mov eax, [ecx+10h]
	add ebx, 10h
	add eax, 10h
	add ebp, 10h
	mov [esp+18h], eax
	cmp dx, 3
	jnz loc_42B781
	cmp dword [dword_4D4E88], 0
	jz loc_42B8D1
	mov eax, [esp+1Ch]
	fld dword [eax+4]
	fsub dword [ebx+4]
	call __CHP
	fistp dword [esp+20h]
	mov eax, [esp+20h]
	mov [esp+20h], eax
	mov eax, [esp+18h]
	fild dword [esp+20h]
	fld dword [eax]
	fsub dword [ebx]
	fxch st1
	fstp dword [esp+10h]
	fmul dword [esp+10h]
	mov eax, [esp+1Ch]
	fld dword [eax]
	fsub dword [ebx]
	call __CHP
	fistp dword [esp+20h]
	mov eax, [esp+20h]
	mov [esp+20h], eax
	fild dword [esp+20h]
	mov eax, [esp+18h]
	fstp dword [esp+0Ch]
	fld dword [eax+4]
	fsub dword [ebx+4]
	fmul dword [esp+0Ch]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B781
	fld dword [ebp+4]
	fsub dword [ebx+4]
	fmul dword [esp+0Ch]
	fld dword [ebp+0]
	fsub dword [ebx]
	fmul dword [esp+10h]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42B8C9

loc_42B781:
	push edi
	push esi
	mov eax, [ecx+1Ch]
	mov edi, [esp+24h]
	mov esi, [eax+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp+20h]
	mov esi, [eax+8]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	lea edi, [ebx+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+10h]
	lea edi, [ebp+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edx, [ecx+20h]
	shr edx, 4
	mov eax, edx
	and eax, 7
	mov esi, eax
	shl esi, 4
	shl eax, 3
	add eax, esi
	add eax, 32h
	mov esi, eax
	mov edi, eax
	shl esi, 10h
	shl edi, 8
	or esi, 0FF000000h
	or edi, esi
	mov esi, edi
	or esi, eax
	mov eax, [esp+24h]
	shr edx, 3
	mov [eax+10h], esi
	mov eax, edx
	and eax, 7
	mov esi, eax
	shl esi, 4
	shl eax, 3
	add eax, esi
	add eax, 32h
	mov esi, eax
	shl esi, 10h
	or esi, 0FF000000h
	mov [esp+28h], esi
	mov esi, eax
	mov edi, [esp+28h]
	shl esi, 8
	or edi, esi
	mov esi, edi
	or esi, eax
	mov eax, [esp+20h]
	shr edx, 3
	mov [eax+10h], esi
	mov eax, edx
	and eax, 7
	mov esi, eax
	shl esi, 4
	shl eax, 3
	add eax, esi
	add eax, 32h
	mov esi, eax
	shl esi, 10h
	or esi, 0FF000000h
	mov [esp+28h], esi
	mov esi, eax
	mov edi, [esp+28h]
	shl esi, 8
	or esi, edi
	or esi, eax
	mov eax, edx
	shr eax, 3
	and eax, 7
	mov edx, eax
	shl edx, 4
	shl eax, 3
	add eax, edx
	add eax, 32h
	mov [ebx+10h], esi
	mov edx, eax
	mov esi, eax
	shl edx, 10h
	shl esi, 8
	or edx, 0FF000000h
	or edx, esi
	or edx, eax
	mov [ebp+10h], edx
	mov eax, [ecx+1Ch]
	mov ecx, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, ecx
	jz loc_42B8B8
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42B8B8:
	mov edx, [esp+20h]
	mov eax, [esp+24h]
	mov ecx, ebp
	call sub_432580
	pop esi
	pop edi

loc_42B8C9:
	add esp, 24h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_42B8D1:
	mov eax, [esp+1Ch]
	fld dword [eax+4]
	fsub dword [ebx+4]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	mov [esp+20h], eax
	mov eax, [esp+18h]
	fild dword [esp+20h]
	fld dword [eax]
	fsub dword [ebx]
	fxch st1
	fstp dword [esp+14h]
	fmul dword [esp+14h]
	mov eax, [esp+1Ch]
	fld dword [eax]
	fsub dword [ebx]
	call __CHP
	fistp dword [esp+4]
	mov eax, [esp+4]
	mov [esp+20h], eax
	fild dword [esp+20h]
	mov eax, [esp+18h]
	fstp dword [esp+8]
	fld dword [eax+4]
	fsub dword [ebx+4]
	fmul dword [esp+8]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42B781
	fld dword [ebp+4]
	fsub dword [ebx+4]
	fmul dword [esp+8]
	fld dword [ebp+0]
	fsub dword [ebx]
	fmul dword [esp+14h]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42B8C9
	jmp loc_42B781
;sub_42B6B0 endp

sub_42B970: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	sub esp, 24h
	mov edx, eax
	mov eax, [eax+0Ch]
	mov ebx, [edx+14h]
	mov ebp, [edx+18h]
	add eax, 10h
	mov cx, [edx+0Ah]
	mov [esp+1Ch], eax
	mov eax, [edx+10h]
	add ebx, 10h
	add eax, 10h
	add ebp, 10h
	mov [esp+18h], eax
	cmp cx, 3
	jnz loc_42BA41
	cmp dword [dword_4D4E88], 0
	jz loc_42BADF
	mov eax, [esp+1Ch]
	fld dword [eax+4]
	fsub dword [ebx+4]
	call __CHP
	fistp dword [esp+20h]
	mov eax, [esp+20h]
	mov [esp+20h], eax
	mov eax, [esp+18h]
	fild dword [esp+20h]
	fld dword [eax]
	fsub dword [ebx]
	fxch st1
	fstp dword [esp+14h]
	fmul dword [esp+14h]
	mov eax, [esp+1Ch]
	fld dword [eax]
	fsub dword [ebx]
	call __CHP
	fistp dword [esp+20h]
	mov eax, [esp+20h]
	mov [esp+20h], eax
	fild dword [esp+20h]
	mov eax, [esp+18h]
	fstp dword [esp+10h]
	fld dword [eax+4]
	fsub dword [ebx+4]
	fmul dword [esp+10h]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42BA41
	fld dword [ebp+4]
	fsub dword [ebx+4]
	fmul dword [esp+10h]
	fld dword [ebp+0]
	fsub dword [ebx]
	fmul dword [esp+14h]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jb loc_42BAD7

loc_42BA41:
	push edi
	push esi
	mov eax, [edx+1Ch]
	mov edi, [esp+24h]
	mov esi, [eax+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp+20h]
	mov esi, [eax+8]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	lea edi, [ebx+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+10h]
	lea edi, [ebp+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [edx+20h]
	test esi, esi
	jz loc_42BAA7
	mov eax, esi
	mov esi, [esp+24h]
	mov [esi+10h], eax
	mov esi, [esp+20h]
	mov [esi+10h], eax
	mov [ebx+10h], eax
	mov [ebp+10h], eax

loc_42BAA7:
	mov eax, [edx+1Ch]
	mov edi, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, edi
	jz loc_42BAC6
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42BAC6:
	mov edx, [esp+20h]
	mov eax, [esp+24h]
	mov ecx, ebp
	call sub_432580
	pop esi
	pop edi

loc_42BAD7:
	add esp, 24h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_42BADF:
	mov eax, [esp+1Ch]
	fld dword [eax+4]
	fsub dword [ebx+4]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	mov [esp+20h], eax
	mov eax, [esp+18h]
	fild dword [esp+20h]
	fld dword [eax]
	fsub dword [ebx]
	fxch st1
	fstp dword [esp+0Ch]
	fmul dword [esp+0Ch]
	mov eax, [esp+1Ch]
	fld dword [eax]
	fsub dword [ebx]
	call __CHP
	fistp dword [esp+4]
	mov eax, [esp+4]
	mov [esp+20h], eax
	fild dword [esp+20h]
	mov eax, [esp+18h]
	fstp dword [esp+8]
	fld dword [eax+4]
	fsub dword [ebx+4]
	fmul dword [esp+8]
	fsubp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42BA41
	fld dword [ebp+4]
	fsub dword [ebx+4]
	fmul dword [esp+8]
	fld dword [ebp+0]
	fsub dword [ebx]
	fmul dword [esp+0Ch]
	fsubrp st1, st0
	fldz
	fcompp
	fnstsw ax
	sahf
	jnb loc_42BAD7
	jmp loc_42BA41
;sub_42B970 endp

off_42BB80: dd loc_42BC3F
	dd loc_42BC8E
	dd loc_42BC95
	dd loc_42BC8E
off_42BB90: dd loc_42BC63
	dd loc_42BC9F
	dd loc_42BCB5
	dd loc_42BC9F

sub_42BBA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edx, [eax+0Ch]
	add edx, 10h
	mov [esp+4], edx
	mov edx, [eax+18h]
	add edx, 10h
	mov [esp], edx
	mov edx, [eax+1Ch]
	mov edi, [esp+4]
	mov esi, [edx+4]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	mov ebp, [eax+10h]
	mov ebx, [eax+14h]
	movsd
	movsd
	mov esi, [edx+8]
	lea edi, [ebp+28h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [edx+0Ch]
	lea edi, [ebx+28h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, [esp]
	mov esi, [edx+10h]
	lea edi, [edi+18h]
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	add ebp, 10h
	mov edx, [eax+20h]
	add ebx, 10h
	test edx, edx
	jnz loc_42BC79

loc_42BC15:
	mov eax, [eax+1Ch]
	mov ecx, dword [dword_4D4EB0]
	mov edx, [eax+14h]
	cmp edx, ecx
	jz loc_42BC34
	push edx
	push 1
	mov dword [dword_4D4EB0], edx
	call sub_497738

loc_42BC34:
	mov eax, 4
	jmp off_42BB80[eax]

loc_42BC3F:
	push 0
	push 0
	push 5

loc_42BC45:
	push 1

loc_42BC47:
	call grAlphaBlendFunction
	mov ecx, [esp]
	mov eax, [esp+4]
	mov edx, ebp
	call sub_432580
	xor eax, eax
	jmp off_42BB90[eax]

loc_42BC63:
	push eax
	push eax
	push 5
	push 1
	call grAlphaBlendFunction
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42BC79:
	mov esi, [esp+4]
	mov [esi+10h], edx
	mov [ebp+10h], edx
	mov esi, [esp]
	mov [ebx+10h], edx
	mov [esi+10h], edx
	jmp loc_42BC15

loc_42BC8E:
	push 0
	push 0
	push eax
	jmp loc_42BC45

loc_42BC95:
	push 0
	push 0
	push 5
	push 0
	jmp loc_42BC47

loc_42BC9F:
	push eax
	push eax
	push 4
	push 1
	call grAlphaBlendFunction
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42BCB5:
	push eax
	push eax
	push 5
	push eax
	call grAlphaBlendFunction
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42BBA0 endp

sub_42BCD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	fld dword [ebp+3Ch]
	mov edx, flt_4D4F34
	mov ecx, flt_4D4F54
	mov ebx, flt_4D4F74
	mov esi, flt_4D4F94
	mov eax, dword [dword_4EC638]
	fstp dword [flt_4D4FA0]
	mov edi, [ebp+8]
	fld dword [flt_4D4FA0]
	mov [esp+0Ch], edx
	mov [esp+4], ecx
	mov [esp+8], ebx
	mov [esp], esi
	fstp dword [flt_4D4F80]
	add eax, edi
	fld dword [flt_4D4F80]
	mov [esp+10h], eax
	fstp dword [flt_4D4F60]
	mov edx, [ebp+0Ch]
	mov ecx, [ebp+10h]
	mov ebx, [ebp+14h]
	mov esi, [ebp+18h]
	mov edi, [ebp+1Ch]
	fild dword [esp+10h]
	fld dword [flt_4D4F60]
	mov eax, dword [dword_4EC63C]
	fxch st1
	fstp dword [flt_4D4F34]
	add eax, edx
	fstp dword [flt_4D4F40]
	mov [esp+10h], eax
	mov edx, [ebp+20h]
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, ecx
	fstp dword [flt_4D4F38]
	mov [esp+10h], eax
	mov ecx, [ebp+24h]
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, ebx
	fstp dword [flt_4D4F54]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, esi
	fstp dword [flt_4D4F58]
	mov [esp+10h], eax
	mov esi, flt_4D4F34
	fild dword [esp+10h]
	mov eax, dword [dword_4EC63C]
	fstp dword [flt_4D4F74]
	add eax, edi
	mov edi, flt_4D4F34
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, edx
	fstp dword [flt_4D4F78]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	add edi, 14h
	add eax, ecx
	fild dword [esp+10h]
	mov [esp+10h], eax
	fstp dword [flt_4D4F94]
	fild dword [esp+10h]
	fstp dword [flt_4D4F98]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42BE62
	cmp eax, ecx
	jge loc_42BE62
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42BE36
	cmp eax, ecx
	jl loc_42BE36
	cmp eax, edx
	jle loc_42BE3A
	or ebx, 4
	jmp loc_42BE3A

loc_42BE36:
	or ebx, 8
	nop

loc_42BE3A:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42BE5D
	cmp eax, ecx
	jl loc_42BE5D
	cmp eax, edx
	jle loc_42BE67
	or ebx, 2
	jmp loc_42BE67

loc_42BE5D:
	or ebx, 1
	jmp loc_42BE67

loc_42BE62:
	mov ebx, 10h

loc_42BE67:
	mov [edi], bl
	mov edi, flt_4D4F54
	mov esi, flt_4D4F54
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42BEDE
	cmp eax, ecx
	jge loc_42BEDE
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42BEB2
	cmp eax, ecx
	jl loc_42BEB2
	cmp eax, edx
	jle loc_42BEB6
	or ebx, 4
	jmp loc_42BEB6

loc_42BEB2:
	or ebx, 8
	nop

loc_42BEB6:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42BED9
	cmp eax, ecx
	jl loc_42BED9
	cmp eax, edx
	jle loc_42BEE3
	or ebx, 2
	jmp loc_42BEE3

loc_42BED9:
	or ebx, 1
	jmp loc_42BEE3

loc_42BEDE:
	mov ebx, 10h

loc_42BEE3:
	mov [edi], bl
	mov edi, flt_4D4F74
	mov esi, flt_4D4F74
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42BF5A
	cmp eax, ecx
	jge loc_42BF5A
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42BF2E
	cmp eax, ecx
	jl loc_42BF2E
	cmp eax, edx
	jle loc_42BF32
	or ebx, 4
	jmp loc_42BF32

loc_42BF2E:
	or ebx, 8
	nop

loc_42BF32:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42BF55
	cmp eax, ecx
	jl loc_42BF55
	cmp eax, edx
	jle loc_42BF5F
	or ebx, 2
	jmp loc_42BF5F

loc_42BF55:
	or ebx, 1
	jmp loc_42BF5F

loc_42BF5A:
	mov ebx, 10h

loc_42BF5F:
	mov [edi], bl
	mov edi, flt_4D4F94
	mov esi, flt_4D4F94
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42BFD6
	cmp eax, ecx
	jge loc_42BFD6
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42BFAA
	cmp eax, ecx
	jl loc_42BFAA
	cmp eax, edx
	jle loc_42BFAE
	or ebx, 4
	jmp loc_42BFAE

loc_42BFAA:
	or ebx, 8
	nop

loc_42BFAE:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42BFD1
	cmp eax, ecx
	jl loc_42BFD1
	cmp eax, edx
	jle loc_42BFDB
	or ebx, 2
	jmp loc_42BFDB

loc_42BFD1:
	or ebx, 1
	jmp loc_42BFDB

loc_42BFD6:
	mov ebx, 10h

loc_42BFDB:
	mov [edi], bl
	xor eax, eax
	movzx edi, byte [ebp+29h]
	mov al, [ebp+28h]
	shl edi, 10h
	shl eax, 18h
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Ah]
	shl eax, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Bh]
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Ch]
	mov dword [dword_4D4F44], edi
	mov edi, eax
	xor eax, eax
	mov al, [ebp+2Dh]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Eh]
	shl eax, 8
	or eax, edi
	movzx edi, byte [ebp+2Fh]
	or eax, edi
	mov dword [dword_4D4F64], eax
	xor eax, eax
	movzx edi, byte [ebp+30h]
	mov al, [ebp+31h]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+32h]
	shl eax, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+33h]
	or edi, eax
	mov dword [dword_4D4F84], edi
	xor eax, eax
	mov al, [ebp+34h]
	mov edi, eax
	xor eax, eax
	mov al, [ebp+35h]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+36h]
	shl eax, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+37h]
	or edi, eax
	mov ebx, dword [dword_4D4EB0]
	mov dword [dword_4D4FA4], edi
	test ebx, ebx
	jnz loc_42C0AE

loc_42C08B:
	mov edi, [esp]
	push edi
	mov ebp, [esp+0Ch]
	push ebp
	mov eax, [esp+0Ch]
	push eax
	mov edx, [esp+18h]
	push edx
	call sub_497B24
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42C0AE:
	xor esi, esi
	push esi
	push 1
	mov dword [dword_4D4EB0], esi
	call sub_497738
	jmp loc_42C08B
;sub_42BCD0 endp

sub_42C0D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	fld dword [ebp+3Ch]
	mov edx, flt_4D4F34
	mov ecx, flt_4D4F54
	mov ebx, flt_4D4F74
	mov esi, flt_4D4F94
	mov eax, dword [dword_4EC638]
	fstp dword [flt_4D4FA0]
	mov edi, [ebp+8]
	fld dword [flt_4D4FA0]
	mov [esp+0Ch], edx
	mov [esp+4], ecx
	mov [esp+8], ebx
	mov [esp], esi
	fstp dword [flt_4D4F80]
	add eax, edi
	fld dword [flt_4D4F80]
	mov [esp+10h], eax
	fstp dword [flt_4D4F60]
	mov edx, [ebp+0Ch]
	mov ecx, [ebp+10h]
	mov ebx, [ebp+14h]
	mov esi, [ebp+18h]
	mov edi, [ebp+1Ch]
	fild dword [esp+10h]
	fld dword [flt_4D4F60]
	mov eax, dword [dword_4EC63C]
	fxch st1
	fstp dword [flt_4D4F34]
	add eax, edx
	fstp dword [flt_4D4F40]
	mov [esp+10h], eax
	mov edx, [ebp+20h]
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, ecx
	fstp dword [flt_4D4F38]
	mov [esp+10h], eax
	mov ecx, [ebp+24h]
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, ebx
	fstp dword [flt_4D4F54]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, esi
	fstp dword [flt_4D4F58]
	mov [esp+10h], eax
	mov esi, flt_4D4F34
	fild dword [esp+10h]
	mov eax, dword [dword_4EC63C]
	fstp dword [flt_4D4F74]
	add eax, edi
	mov edi, flt_4D4F34
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, edx
	fstp dword [flt_4D4F78]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	add edi, 14h
	add eax, ecx
	fild dword [esp+10h]
	mov [esp+10h], eax
	fstp dword [flt_4D4F94]
	fild dword [esp+10h]
	fstp dword [flt_4D4F98]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C262
	cmp eax, ecx
	jge loc_42C262
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C236
	cmp eax, ecx
	jl loc_42C236
	cmp eax, edx
	jle loc_42C23A
	or ebx, 4
	jmp loc_42C23A

loc_42C236:
	or ebx, 8
	nop

loc_42C23A:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C25D
	cmp eax, ecx
	jl loc_42C25D
	cmp eax, edx
	jle loc_42C267
	or ebx, 2
	jmp loc_42C267

loc_42C25D:
	or ebx, 1
	jmp loc_42C267

loc_42C262:
	mov ebx, 10h

loc_42C267:
	mov [edi], bl
	mov edi, flt_4D4F54
	mov esi, flt_4D4F54
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C2DE
	cmp eax, ecx
	jge loc_42C2DE
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C2B2
	cmp eax, ecx
	jl loc_42C2B2
	cmp eax, edx
	jle loc_42C2B6
	or ebx, 4
	jmp loc_42C2B6

loc_42C2B2:
	or ebx, 8
	nop

loc_42C2B6:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C2D9
	cmp eax, ecx
	jl loc_42C2D9
	cmp eax, edx
	jle loc_42C2E3
	or ebx, 2
	jmp loc_42C2E3

loc_42C2D9:
	or ebx, 1
	jmp loc_42C2E3

loc_42C2DE:
	mov ebx, 10h

loc_42C2E3:
	mov [edi], bl
	mov edi, flt_4D4F74
	mov esi, flt_4D4F74
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C35A
	cmp eax, ecx
	jge loc_42C35A
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C32E
	cmp eax, ecx
	jl loc_42C32E
	cmp eax, edx
	jle loc_42C332
	or ebx, 4
	jmp loc_42C332

loc_42C32E:
	or ebx, 8
	nop

loc_42C332:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C355
	cmp eax, ecx
	jl loc_42C355
	cmp eax, edx
	jle loc_42C35F
	or ebx, 2
	jmp loc_42C35F

loc_42C355:
	or ebx, 1
	jmp loc_42C35F

loc_42C35A:
	mov ebx, 10h

loc_42C35F:
	mov [edi], bl
	mov edi, flt_4D4F94
	mov esi, flt_4D4F94
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C3D6
	cmp eax, ecx
	jge loc_42C3D6
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C3AA
	cmp eax, ecx
	jl loc_42C3AA
	cmp eax, edx
	jle loc_42C3AE
	or ebx, 4
	jmp loc_42C3AE

loc_42C3AA:
	or ebx, 8
	nop

loc_42C3AE:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C3D1
	cmp eax, ecx
	jl loc_42C3D1
	cmp eax, edx
	jle loc_42C3DB
	or ebx, 2
	jmp loc_42C3DB

loc_42C3D1:
	or ebx, 1
	jmp loc_42C3DB

loc_42C3D6:
	mov ebx, 10h

loc_42C3DB:
	mov [edi], bl
	xor eax, eax
	movzx edi, byte [ebp+28h]
	mov al, [ebp+29h]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Ah]
	shl eax, 8
	or eax, edi
	movzx edi, byte [ebp+2Bh]
	or eax, edi
	mov dword [dword_4D4F44], eax
	xor eax, eax
	movzx edi, byte [ebp+2Ch]
	mov al, [ebp+2Dh]
	shl edi, 18h
	shl eax, 10h
	or eax, edi
	movzx edi, byte [ebp+2Eh]
	shl edi, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+2Fh]
	or edi, eax
	mov dword [dword_4D4F64], edi
	xor eax, eax
	movzx edi, byte [ebp+30h]
	mov al, [ebp+31h]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+32h]
	shl eax, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+33h]
	or edi, eax
	mov dword [dword_4D4F84], edi
	xor eax, eax
	movzx edi, byte [ebp+34h]
	mov al, [ebp+35h]
	shl edi, 18h
	shl eax, 10h
	or edi, eax
	xor eax, eax
	mov al, [ebp+36h]
	shl eax, 8
	or edi, eax
	xor eax, eax
	mov al, [ebp+37h]
	or edi, eax
	mov ebx, dword [dword_4D4EB0]
	mov dword [dword_4D4FA4], edi
	test ebx, ebx
	jnz loc_42C4A2

loc_42C484:
	mov ecx, [esp]
	mov ebx, [esp+8]
	mov edx, [esp+4]
	mov eax, [esp+0Ch]
	call sub_430B80
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42C4A2:
	xor esi, esi
	push esi
	push 1
	mov dword [dword_4D4EB0], esi
	call sub_497738
	jmp loc_42C484
;sub_42C0D0 endp

sub_42C4C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	fld dword [ebp+34h]
	mov edx, flt_4D4EB4
	mov ecx, flt_4D4ED4
	mov ebx, flt_4D4EF4
	mov esi, flt_4D4F14
	mov eax, dword [dword_4EC638]
	fstp dword [flt_4D4F20]
	mov edi, [ebp+8]
	fld dword [flt_4D4F20]
	mov [esp+8], edx
	mov [esp+0Ch], ecx
	mov [esp], ebx
	mov [esp+4], esi
	fstp dword [flt_4D4F00]
	add eax, edi
	fld dword [flt_4D4F00]
	mov [esp+10h], eax
	fstp dword [flt_4D4EE0]
	mov edx, [ebp+0Ch]
	mov ecx, [ebp+10h]
	mov ebx, [ebp+14h]
	mov esi, [ebp+18h]
	mov edi, [ebp+1Ch]
	fild dword [esp+10h]
	fld dword [flt_4D4EE0]
	mov eax, dword [dword_4EC63C]
	fxch st1
	fstp dword [flt_4D4EB4]
	add eax, edx
	fstp dword [flt_4D4EC0]
	mov [esp+10h], eax
	mov edx, [ebp+20h]
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, ecx
	fstp dword [flt_4D4EB8]
	mov [esp+10h], eax
	mov ecx, [ebp+24h]
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, ebx
	fstp dword [flt_4D4ED4]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, esi
	fstp dword [flt_4D4ED8]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, edi
	fstp dword [flt_4D4EF4]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	mov edi, dword_4D4ECC
	add eax, edx
	fild dword [esp+10h]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	fstp dword [flt_4D4EF8]
	add eax, ecx
	fild dword [esp+10h]
	mov [esp+10h], eax
	mov eax, [ebp+28h]
	fstp dword [flt_4D4F14]
	mov esi, [eax+4]
	fild dword [esp+10h]
	lea esi, dword dword_4D4E90[esi*8]
	fstp dword [flt_4D4F18]
	movsd
	movsd
	mov esi, [eax+8]
	mov edi, dword_4D4EEC
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	mov edi, dword_4D4F0C
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+10h]
	mov edi, dword_4D4F2C
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, flt_4D4EB4
	mov esi, flt_4D4EB4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C699
	cmp eax, ecx
	jge loc_42C699
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C66D
	cmp eax, ecx
	jl loc_42C66D
	cmp eax, edx
	jle loc_42C671
	or ebx, 4
	jmp loc_42C671

loc_42C66D:
	or ebx, 8
	nop

loc_42C671:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C694
	cmp eax, ecx
	jl loc_42C694
	cmp eax, edx
	jle loc_42C69E
	or ebx, 2
	jmp loc_42C69E

loc_42C694:
	or ebx, 1
	jmp loc_42C69E

loc_42C699:
	mov ebx, 10h

loc_42C69E:
	mov [edi], bl
	mov edi, flt_4D4ED4
	mov esi, flt_4D4ED4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C715
	cmp eax, ecx
	jge loc_42C715
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C6E9
	cmp eax, ecx
	jl loc_42C6E9
	cmp eax, edx
	jle loc_42C6ED
	or ebx, 4
	jmp loc_42C6ED

loc_42C6E9:
	or ebx, 8
	nop

loc_42C6ED:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C710
	cmp eax, ecx
	jl loc_42C710
	cmp eax, edx
	jle loc_42C71A
	or ebx, 2
	jmp loc_42C71A

loc_42C710:
	or ebx, 1
	jmp loc_42C71A

loc_42C715:
	mov ebx, 10h

loc_42C71A:
	mov [edi], bl
	mov edi, flt_4D4EF4
	mov esi, flt_4D4EF4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C791
	cmp eax, ecx
	jge loc_42C791
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C765
	cmp eax, ecx
	jl loc_42C765
	cmp eax, edx
	jle loc_42C769
	or ebx, 4
	jmp loc_42C769

loc_42C765:
	or ebx, 8
	nop

loc_42C769:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C78C
	cmp eax, ecx
	jl loc_42C78C
	cmp eax, edx
	jle loc_42C796
	or ebx, 2
	jmp loc_42C796

loc_42C78C:
	or ebx, 1
	jmp loc_42C796

loc_42C791:
	mov ebx, 10h

loc_42C796:
	mov [edi], bl
	mov edi, flt_4D4F14
	mov esi, flt_4D4F14
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42C80D
	cmp eax, ecx
	jge loc_42C80D
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42C7E1
	cmp eax, ecx
	jl loc_42C7E1
	cmp eax, edx
	jle loc_42C7E5
	or ebx, 4
	jmp loc_42C7E5

loc_42C7E1:
	or ebx, 8
	nop

loc_42C7E5:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42C808
	cmp eax, ecx
	jl loc_42C808
	cmp eax, edx
	jle loc_42C812
	or ebx, 2
	jmp loc_42C812

loc_42C808:
	or ebx, 1
	jmp loc_42C812

loc_42C80D:
	mov ebx, 10h

loc_42C812:
	mov [edi], bl
	xor eax, eax
	mov al, [ebp+2Ch]
	mov esi, eax
	xor eax, eax
	mov al, [ebp+2Dh]
	shl esi, 18h
	shl eax, 10h
	or esi, eax
	xor eax, eax
	mov al, [ebp+2Eh]
	shl eax, 8
	or esi, eax
	xor eax, eax
	mov al, [ebp+2Fh]
	or esi, eax
	mov ebx, dword [dword_4D4EB0]
	mov dword [dword_4D4F24], esi
	mov dword [dword_4D4F04], esi
	mov eax, [ebp+28h]
	mov dword [dword_4D4EE4], esi
	mov dword [dword_4D4EC4], esi
	mov esi, [eax+14h]
	cmp esi, ebx
	jnz loc_42C87F

loc_42C861:
	mov ecx, [esp+4]
	mov ebx, [esp]
	mov edx, [esp+0Ch]
	mov eax, [esp+8]
	call sub_432580
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42C87F:
	push esi
	push 1
	mov dword [dword_4D4EB0], esi
	call sub_497738
	jmp loc_42C861
;sub_42C4C0 endp

off_42C890: dd loc_42CC5C
	dd loc_42CCB6
	dd loc_42CCBD
	dd loc_42CCB6
off_42C8A0: dd loc_42CC86
	dd loc_42CCC7
	dd loc_42CCDD
	dd loc_42CCC7

sub_42C8B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	fld dword [ebp+34h]
	mov edx, flt_4D4EB4
	mov ecx, flt_4D4ED4
	mov ebx, flt_4D4EF4
	mov esi, flt_4D4F14
	mov eax, dword [dword_4EC638]
	fstp dword [flt_4D4F20]
	mov edi, [ebp+8]
	fld dword [flt_4D4F20]
	mov [esp+8], edx
	mov [esp+0Ch], ecx
	mov [esp], ebx
	mov [esp+4], esi
	fstp dword [flt_4D4F00]
	add eax, edi
	fld dword [flt_4D4F00]
	mov [esp+10h], eax
	fstp dword [flt_4D4EE0]
	mov edx, [ebp+0Ch]
	mov ecx, [ebp+10h]
	mov ebx, [ebp+14h]
	mov esi, [ebp+18h]
	mov edi, [ebp+1Ch]
	fild dword [esp+10h]
	fld dword [flt_4D4EE0]
	mov eax, dword [dword_4EC63C]
	fxch st1
	fstp dword [flt_4D4EB4]
	add eax, edx
	fstp dword [flt_4D4EC0]
	mov [esp+10h], eax
	mov edx, [ebp+20h]
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, ecx
	fstp dword [flt_4D4EB8]
	mov [esp+10h], eax
	mov ecx, [ebp+24h]
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, ebx
	fstp dword [flt_4D4ED4]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	fild dword [esp+10h]
	add eax, esi
	fstp dword [flt_4D4ED8]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	fild dword [esp+10h]
	add eax, edi
	fstp dword [flt_4D4EF4]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC638]
	mov edi, dword_4D4ECC
	add eax, edx
	fild dword [esp+10h]
	mov [esp+10h], eax
	mov eax, dword [dword_4EC63C]
	fstp dword [flt_4D4EF8]
	add eax, ecx
	fild dword [esp+10h]
	mov [esp+10h], eax
	mov eax, [ebp+28h]
	fstp dword [flt_4D4F14]
	mov esi, [eax+4]
	fild dword [esp+10h]
	lea esi, dword dword_4D4E90[esi*8]
	fstp dword [flt_4D4F18]
	movsd
	movsd
	mov esi, [eax+8]
	mov edi, dword_4D4EEC
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+0Ch]
	mov edi, dword_4D4F0C
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov esi, [eax+10h]
	mov edi, dword_4D4F2C
	lea esi, dword dword_4D4E90[esi*8]
	movsd
	movsd
	mov edi, flt_4D4EB4
	mov esi, flt_4D4EB4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42CA89
	cmp eax, ecx
	jge loc_42CA89
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42CA5D
	cmp eax, ecx
	jl loc_42CA5D
	cmp eax, edx
	jle loc_42CA61
	or ebx, 4
	jmp loc_42CA61

loc_42CA5D:
	or ebx, 8
	nop

loc_42CA61:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42CA84
	cmp eax, ecx
	jl loc_42CA84
	cmp eax, edx
	jle loc_42CA8E
	or ebx, 2
	jmp loc_42CA8E

loc_42CA84:
	or ebx, 1
	jmp loc_42CA8E

loc_42CA89:
	mov ebx, 10h

loc_42CA8E:
	mov [edi], bl
	mov edi, flt_4D4ED4
	mov esi, flt_4D4ED4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42CB05
	cmp eax, ecx
	jge loc_42CB05
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42CAD9
	cmp eax, ecx
	jl loc_42CAD9
	cmp eax, edx
	jle loc_42CADD
	or ebx, 4
	jmp loc_42CADD

loc_42CAD9:
	or ebx, 8
	nop

loc_42CADD:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42CB00
	cmp eax, ecx
	jl loc_42CB00
	cmp eax, edx
	jle loc_42CB0A
	or ebx, 2
	jmp loc_42CB0A

loc_42CB00:
	or ebx, 1
	jmp loc_42CB0A

loc_42CB05:
	mov ebx, 10h

loc_42CB0A:
	mov [edi], bl
	mov edi, flt_4D4EF4
	mov esi, flt_4D4EF4
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42CB81
	cmp eax, ecx
	jge loc_42CB81
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42CB55
	cmp eax, ecx
	jl loc_42CB55
	cmp eax, edx
	jle loc_42CB59
	or ebx, 4
	jmp loc_42CB59

loc_42CB55:
	or ebx, 8
	nop

loc_42CB59:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42CB7C
	cmp eax, ecx
	jl loc_42CB7C
	cmp eax, edx
	jle loc_42CB86
	or ebx, 2
	jmp loc_42CB86

loc_42CB7C:
	or ebx, 1
	jmp loc_42CB86

loc_42CB81:
	mov ebx, 10h

loc_42CB86:
	mov [edi], bl
	mov edi, flt_4D4F14
	mov esi, flt_4D4F14
	add edi, 14h
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42CBFD
	cmp eax, ecx
	jge loc_42CBFD
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42CBD1
	cmp eax, ecx
	jl loc_42CBD1
	cmp eax, edx
	jle loc_42CBD5
	or ebx, 4
	jmp loc_42CBD5

loc_42CBD1:
	or ebx, 8
	nop

loc_42CBD5:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42CBF8
	cmp eax, ecx
	jl loc_42CBF8
	cmp eax, edx
	jle loc_42CC02
	or ebx, 2
	jmp loc_42CC02

loc_42CBF8:
	or ebx, 1
	jmp loc_42CC02

loc_42CBFD:
	mov ebx, 10h

loc_42CC02:
	mov [edi], bl
	xor eax, eax
	mov al, [ebp+2Ch]
	mov esi, eax
	xor eax, eax
	mov al, [ebp+2Dh]
	shl esi, 18h
	shl eax, 10h
	or esi, eax
	xor eax, eax
	mov al, [ebp+2Eh]
	shl eax, 8
	or esi, eax
	xor eax, eax
	mov al, [ebp+2Fh]
	or esi, eax
	mov ebx, dword [dword_4D4EB0]
	mov dword [dword_4D4F24], esi
	mov dword [dword_4D4F04], esi
	mov eax, [ebp+28h]
	mov dword [dword_4D4EE4], esi
	mov dword [dword_4D4EC4], esi
	mov esi, [eax+14h]
	cmp esi, ebx
	jnz loc_42CC9C
	mov eax, 4
	jmp off_42C890[eax]

loc_42CC5C:
	push 0
	push 0
	push 5

loc_42CC62:
	push 1

loc_42CC64:
	call grAlphaBlendFunction
	mov ecx, [esp+4]
	mov ebx, [esp]
	mov edx, [esp+0Ch]
	mov eax, [esp+8]
	call sub_432580
	xor eax, eax
	jmp off_42C8A0[eax]

loc_42CC86:
	push eax
	push eax
	push 5
	push 1
	call grAlphaBlendFunction
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CC9C:
	push esi
	push 1
	mov dword [dword_4D4EB0], esi
	call sub_497738
	mov eax, 4
	jmp off_42C890[eax]

loc_42CCB6:
	push 0
	push 0
	push eax
	jmp loc_42CC62

loc_42CCBD:
	push 0
	push 0
	push 5
	push 0
	jmp loc_42CC64

loc_42CCC7:
	push eax
	push eax
	push 4
	push 1
	call grAlphaBlendFunction
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CCDD:
	push eax
	push eax
	push 5
	push eax
	call grAlphaBlendFunction
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42C8B0 endp

off_42CD40: dd loc_42CD90
	dd loc_42CDB4 ; jump table for switch statement
	dd loc_42CDD8
	dd loc_42CDB4
	dd loc_42CDFC
	dd loc_42CE44
	dd loc_42CE20
	dd loc_42CE68
	dd loc_42CE8C

sub_42CD64: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	mov edx, 0FFFFFFFFh
	push 2
	xor ecx, ecx
	mov dword [dword_4D5258], edx
	mov dword [dword_4D525C], ecx
	call grFogMode
	cmp ebx, 8 ; switch 9 cases
	ja loc_42CDB4 ; jumptable 0042CD89 default case
	jmp off_42CD40[ebx*4] ; switch jump

loc_42CD90:
	mov eax, 0FF000204h ; jumptable 0042CD89 case 0
	call sub_42CF10
	push 3CE56042h
	push 3C03126Fh
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CDB4:
	mov eax, 0FF848284h ; jumptable 0042CD89 default case
	call sub_42CF10
	push 3CBC6A7Fh
	push 3B449BA6h
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CDD8:
	mov eax, 0FFCC6134h ; jumptable 0042CD89 case 2
	call sub_42CF10
	push 3CB43958h
	push 3B03126Fh
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CDFC:
	mov eax, 0FF848284h ; jumptable 0042CD89 case 4
	call sub_42CF10
	push 3CB43958h
	push 3B03126Fh
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CE20:
	mov eax, 0FFBDBD86h ; jumptable 0042CD89 case 6
	call sub_42CF10
	push 3CB43958h
	push 3B03126Fh
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CE44:
	mov eax, 0FF7D8084h ; jumptable 0042CD89 case 5
	call sub_42CF10
	push 3CBC6A7Fh
	push 3B449BA6h
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CE68:
	mov eax, 0FF848284h ; jumptable 0042CD89 case 7
	call sub_42CF10
	push 3CCCCCCDh
	push 3BA3D70Ah
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret

loc_42CE8C:
	mov eax, 0FF000204h ; jumptable 0042CD89 case 8
	call sub_42CF10
	push 3CBC6A7Fh
	push 3B449BA6h
	call sub_42CF30
	xor eax, eax
	call sub_42CEB0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42CD64 endp

sub_42CEB0: ;SUBROUTINE
	cmp eax, dword [dword_4D5258]
	jz locret_42CEDA
	mov dword [dword_4D5258], eax
	cmp eax, 14h
	jl loc_42CEDB
	mov eax, 13h

loc_42CEC7:
	push edx
	push ecx
	shl eax, 6
	add eax, dword_4EC670
	push eax
	call grFogTable
	pop ecx
	pop edx

locret_42CEDA:
	ret

loc_42CEDB:
	test eax, eax
	jge loc_42CEC7
	xor eax, eax
	push edx
	push ecx
	shl eax, 6
	add eax, dword_4EC670
	push eax
	call grFogTable
	pop ecx
	pop edx
	ret
;sub_42CEB0 endp

sub_42CF00: ;SUBROUTINE
	call sub_42CF10
	mov eax, edx
	jmp sub_42CEB0
;sub_42CF00 endp

sub_42CF10: ;SUBROUTINE
	cmp eax, dword [dword_4D525C]
	jnz loc_42CF19
	ret

loc_42CF19:
	push edx
	push ecx
	push eax
	mov dword [dword_4D525C], eax
	call grFogColorValue
	pop ecx
	pop edx
	ret
;sub_42CF10 endp

sub_42CF30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 8
	mov ebx, [esp+1Ch]
	fld dword [esp+20h]
	mov [esp+4], ebx
	fsub dword [esp+1Ch]
	mov ebx, dword_4EC670
	fmul dword [flt_4CA018]
	lea esi, [ebx+500h]
	fstp dword [esp]

loc_42CF5B:
	push dword [esp+4]
	push ebx
	call guFogGenerateExp
	fld dword [esp]
	fadd dword [esp+4]
	add ebx, 40h
	fstp dword [esp+4]
	cmp ebx, esi
	jnz loc_42CF5B
	add esp, 8
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 8
;sub_42CF30 endp

sub_42CF90: ;SUBROUTINE
	mov eax, dword [dword_4D525C]
	ret
;sub_42CF90 endp

dword_42CFA0: dd 0

sub_42CFB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 80h
	cmp dword [dword_4EF3E8], 0
	jz loc_42D6B9
	cmp dword [dword_51221C], 7
	jnz loc_42D6C6
	mov edx, 1

loc_42CFDB:
	push dword_4EF438
	mov ecx, dword_4ECB70
	mov ebx, dword_4EEBFC
	mov esi, 1D40h
	mov [esp+70h], edx
	mov edx, 0A9h
	mov edi, 0Ch
	call sub_42D730
	mov [esp+5Ch], esi
	mov [esp+54h], edi
	xor ebx, ebx
	mov eax, 30h
	mov [esp+64h], ebx
	mov [esp+60h], ebx
	mov [esp+58h], eax

loc_42D01D:
	imul ebp, [esp+64h], 30h
	mov eax, [esp+54h]
	add eax, 9Ch
	mov [esp+74h], eax
	mov eax, [esp+60h]
	mov [esp+70h], eax
	mov eax, [esp+58h]
	add eax, 270h
	mov [esp+78h], eax
	mov eax, [esp+5Ch]
	mov [esp+68h], eax

loc_42D04C:
	mov esi, [esp+70h]
	mov edi, esp
	lea esi, dword dword_4EF438[esi]
	movsd
	movsd
	movsd
	mov esi, [esp+70h]
	lea edi, [esp+0Ch]
	lea esi, dword dword_4EF4D4[esi]
	movsd
	movsd
	movsd
	mov esi, [esp+74h]
	lea edi, [esp+18h]
	lea esi, dword dword_4EF438[esi]
	movsd
	movsd
	movsd
	mov esi, [esp+74h]
	lea edi, [esp+24h]
	lea esi, dword dword_4EF39C[esi]
	movsd
	movsd
	movsd
	cmp dword [esp+8], 0
	jl loc_42D6CD

loc_42D099:
	cmp dword [esp+14h], 0
	jle loc_42D6F3

loc_42D0A4:
	mov edx, 0E4h
	lea eax, [esp+30h]
	call sub_46FD30
	test eax, eax
	jz loc_42D640
	mov edi, [esp+30h]
	mov ecx, 0Ch
	lea esi, dword dword_4ECB70[ebp]
	lea edi, [edi+24h]
	rep movsd
	mov edi, [esp+30h]
	mov ecx, 0Ch
	lea esi, dword dword_4ECDE0[ebp]
	lea edi, [edi+54h]
	rep movsd
	mov edi, [esp+30h]
	mov esi, [esp+78h]
	mov ecx, 0Ch
	lea edi, [edi+84h]
	lea esi, dword dword_4ECB70[esi]
	rep movsd
	mov edi, [esp+30h]
	mov esi, [esp+78h]
	mov ecx, 0Ch
	lea edi, [edi+0B4h]
	lea esi, dword dword_4EC900[esi]
	rep movsd
	mov esi, [esp+30h]
	mov edi, [esp+8]
	add esi, 34h
	test edi, edi
	jnz loc_42D12F
	mov dword [esp+8], 1

loc_42D12F:
	mov eax, [esp+8]
	mov [esp+7Ch], eax
	lea edx, [esp+38h]
	fild dword [esp+7Ch]
	lea eax, [esp+34h]
	fstp dword [esp+34h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+38h]
	mov eax, esp
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42D239
	cmp eax, ecx
	jge loc_42D239
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42D20D
	cmp eax, ecx
	jl loc_42D20D
	cmp eax, edx
	jle loc_42D211
	or ebx, 4
	jmp loc_42D211

loc_42D20D:
	or ebx, 8
	nop

loc_42D211:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42D234
	cmp eax, ecx
	jl loc_42D234
	cmp eax, edx
	jle loc_42D23E
	or ebx, 2
	jmp loc_42D23E

loc_42D234:
	or ebx, 1
	jmp loc_42D23E

loc_42D239:
	mov ebx, 10h

loc_42D23E:
	mov [edi], bl
	mov esi, [esp+30h]
	mov edx, [esp+14h]
	add esi, 64h
	test edx, edx
	jnz loc_42D257
	mov dword [esp+14h], 1

loc_42D257:
	mov eax, [esp+14h]
	mov [esp+7Ch], eax
	lea edx, [esp+40h]
	fild dword [esp+7Ch]
	lea eax, [esp+3Ch]
	fstp dword [esp+3Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+40h]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42D363
	cmp eax, ecx
	jge loc_42D363
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42D337
	cmp eax, ecx
	jl loc_42D337
	cmp eax, edx
	jle loc_42D33B
	or ebx, 4
	jmp loc_42D33B

loc_42D337:
	or ebx, 8
	nop

loc_42D33B:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42D35E
	cmp eax, ecx
	jl loc_42D35E
	cmp eax, edx
	jle loc_42D368
	or ebx, 2
	jmp loc_42D368

loc_42D35E:
	or ebx, 1
	jmp loc_42D368

loc_42D363:
	mov ebx, 10h

loc_42D368:
	mov [edi], bl
	mov esi, [esp+30h]
	mov ebx, [esp+20h]
	add esi, 94h
	test ebx, ebx
	jnz loc_42D384
	mov dword [esp+20h], 1

loc_42D384:
	mov eax, [esp+20h]
	mov [esp+7Ch], eax
	lea edx, [esp+48h]
	fild dword [esp+7Ch]
	lea eax, [esp+44h]
	fstp dword [esp+44h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+48h]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42D490
	cmp eax, ecx
	jge loc_42D490
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42D464
	cmp eax, ecx
	jl loc_42D464
	cmp eax, edx
	jle loc_42D468
	or ebx, 4
	jmp loc_42D468

loc_42D464:
	or ebx, 8
	nop

loc_42D468:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42D48B
	cmp eax, ecx
	jl loc_42D48B
	cmp eax, edx
	jle loc_42D495
	or ebx, 2
	jmp loc_42D495

loc_42D48B:
	or ebx, 1
	jmp loc_42D495

loc_42D490:
	mov ebx, 10h

loc_42D495:
	mov [edi], bl
	mov esi, [esp+30h]
	mov eax, [esp+2Ch]
	add esi, 0C4h
	test eax, eax
	jnz loc_42D4B1
	mov dword [esp+2Ch], 1

loc_42D4B1:
	mov eax, [esp+2Ch]
	mov [esp+7Ch], eax
	lea edx, [esp+50h]
	fild dword [esp+7Ch]
	lea eax, [esp+4Ch]
	fstp dword [esp+4Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+50h]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_42D5BD
	cmp eax, ecx
	jge loc_42D5BD
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_42D591
	cmp eax, ecx
	jl loc_42D591
	cmp eax, edx
	jle loc_42D595
	or ebx, 4
	jmp loc_42D595

loc_42D591:
	or ebx, 8
	nop

loc_42D595:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_42D5B8
	cmp eax, ecx
	jl loc_42D5B8
	cmp eax, edx
	jle loc_42D5C2
	or ebx, 2
	jmp loc_42D5C2

loc_42D5B8:
	or ebx, 1
	jmp loc_42D5C2

loc_42D5BD:
	mov ebx, 10h

loc_42D5C2:
	mov [edi], bl
	cmp dword [esp+6Ch], 0
	jz loc_42D719
	mov eax, 0Ah

loc_42D5D4:
	mov edx, [esp+30h]
	mov [edx+4], eax
	mov eax, [esp+30h]
	mov ebx, [esp+6Ch]
	mov dword [eax+1Ch], dword_4EFC24
	test ebx, ebx
	jz loc_42D723
	mov eax, 7FFFFFFFh

loc_42D5F7:
	mov edx, [esp+30h]
	mov [edx+20h], eax
	mov eax, [esp+30h]
	mov word [eax+0Ah], 2
	mov eax, [esp+30h]
	mov word [eax+8], 2
	mov eax, [esp+30h]
	lea edx, [eax+24h]
	mov [eax+0Ch], edx
	mov eax, [esp+30h]
	lea edx, [eax+54h]
	mov [eax+10h], edx
	mov eax, [esp+30h]
	lea edx, [eax+84h]
	mov [eax+14h], edx
	mov eax, [esp+30h]
	lea edx, [eax+0B4h]
	mov [eax+18h], edx

loc_42D640:
	mov edi, [esp+70h]
	mov eax, [esp+78h]
	mov esi, [esp+74h]
	mov edx, [esp+68h]
	add ebp, 270h
	add edi, 9Ch
	add eax, 270h
	add esi, 9Ch
	mov [esp+70h], edi
	mov [esp+78h], eax
	mov [esp+74h], esi
	cmp ebp, edx
	jnz loc_42D04C
	mov ebx, [esp+54h]
	mov esi, [esp+60h]
	mov edi, [esp+58h]
	mov ebp, [esp+64h]
	mov ecx, [esp+5Ch]
	add ebx, 0Ch
	add esi, 0Ch
	add edi, 30h
	inc ebp
	add ecx, 30h
	mov [esp+54h], ebx
	mov [esp+60h], esi
	mov [esp+58h], edi
	mov [esp+64h], ebp
	mov [esp+5Ch], ecx
	cmp ebp, 0Ch
	jl loc_42D01D

loc_42D6B9:
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42D6C6:
	xor edx, edx
	jmp loc_42CFDB

loc_42D6CD:
	cmp dword [esp+14h], 0
	jge loc_42D099
	cmp dword [esp+20h], 0
	jge loc_42D099
	cmp dword [esp+2Ch], 0
	jl loc_42D640
	jmp loc_42D099

loc_42D6F3:
	cmp dword [esp+8], 0
	jg loc_42D0A4
	cmp dword [esp+2Ch], 0
	jg loc_42D0A4
	cmp dword [esp+20h], 0
	jg loc_42D0A4
	jmp loc_42D640

loc_42D719:
	mov eax, 0Bh
	jmp loc_42D5D4

loc_42D723:
	mov eax, 0FFFFFFFFh
	jmp loc_42D5F7
;sub_42CFB0 endp

sub_42D730: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 40h
	and esp, 0FFFFFFF8h
	mov edi, [ebp+10h]
	mov [esp+30h], eax
	mov [esp+34h], edx
	mov [esp+38h], ebx
	mov esi, ecx
	mov edx, [esp+30h]
	xor eax, eax
	fld qword [dbl_4CA22C]

loc_42D758:
	fild dword [edx+44h]
	fmul st0, st1
	inc eax
	add edx, 4
	fstp dword [esp+eax*4-4]
	cmp eax, 9
	jl loc_42D758
	fstp st0
	xor edx, edx
	mov ecx, [esp+34h]
	mov [esp+3Ch], edx
	test ecx, ecx
	jle loc_42D804

loc_42D77E:
	lea ecx, [esp+24h]
	mov ebx, esp
	mov edx, [esp+38h]
	mov eax, 1
	call sub_49C46C
	fld dword [esp+24h]
	fmul qword [dbl_4CA234]
	call __CHP
	fistp dword [esi]
	mov eax, [esi]
	mov [edi], eax
	fld dword [esp+28h]
	fmul qword [dbl_4CA234]
	call __CHP
	fistp dword [esi+4]
	mov eax, [esi+4]
	mov [edi+4], eax
	fld dword [esp+2Ch]
	fmul qword [dbl_4CA234]
	add esi, 30h
	add edi, 0Ch
	mov ebx, [esp+38h]
	mov edx, [esp+34h]
	call __CHP
	fistp dword [esi-28h]
	mov eax, [esi-28h]
	add ebx, 0Ch
	mov [edi-4], eax
	mov eax, [esp+3Ch]
	mov [esp+38h], ebx
	inc eax
	mov word [esi-24h], 0
	mov [esp+3Ch], eax
	cmp eax, edx
	jl loc_42D77E
	nop

loc_42D804:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_42D730 endp

sub_42D810: ;SUBROUTINE
	mov eax, dword [dword_540F48]
	mov dword [dword_4D5270], eax
	ret
;sub_42D810 endp

sub_42D820: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 18h
	test byte [byte_512219], 2
	jz loc_42D84C
	mov edx, dword [dword_51221C]
	test edx, edx
	jz loc_42D84C
	cmp edx, 8
	jz loc_42D84C
	mov ebx, dword [dword_4D5270]
	mov eax, dword [dword_540F48]
	cmp eax, ebx
	jnz loc_42D852

loc_42D84C:
	add esp, 18h
	pop edx
	pop ebx
	ret

loc_42D852:
	push ecx
	mov dword [dword_4D5270], eax
	xor eax, eax
	mov al, byte [byte_4EF3F2]
	mov [esp+10h], eax
	xor eax, eax
	mov al, byte [byte_4EF3F1]
	mov [esp+14h], eax
	xor eax, eax
	mov al, byte [byte_4EF3F0]
	mov [esp+18h], eax
	lea eax, [esp+0Ch]
	lea ecx, [esp+4]
	push eax
	lea eax, [esp+0Ch]
	mov edx, [esp+18h]
	push eax
	mov ebx, [esp+20h]
	mov eax, [esp+18h]
	call sub_458200
	lea eax, [esp+18h]
	push eax
	lea eax, [esp+18h]
	push eax
	mov al, [esp+0Ch]
	add al, 4
	lea ecx, [esp+18h]
	mov ebx, [esp+14h]
	mov edx, [esp+10h]
	and eax, 0FFh
	call sub_457FA8
	mov al, [esp+10h]
	mov byte [byte_4EF3F2], al
	mov byte [byte_4EF3EE], al
	mov al, [esp+14h]
	mov byte [byte_4EF3F1], al
	mov byte [byte_4EF3ED], al
	mov al, [esp+18h]
	mov byte [byte_4EF3F0], al
	mov byte [byte_4EF3EC], al
	xor eax, eax
	mov al, [esp+10h]
	mov ecx, eax
	xor eax, eax
	shl ecx, 10h
	mov al, [esp+14h]
	or ecx, 0FF000000h
	shl eax, 8
	or ecx, eax
	xor eax, eax
	mov al, [esp+18h]
	or eax, ecx
	push eax
	push 4
	call sub_497738
	pop ecx
	add esp, 18h
	pop edx
	pop ebx
	ret
;sub_42D820 endp

sub_42D920: ;SUBROUTINE
	mov eax, dword [dword_540F48]
	mov dword [dword_4D5270], eax
	ret
;sub_42D920 endp

sub_42D930: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0Ch
	and esp, 0FFFFFFF8h
	mov edx, 0FC180000h
	xor edi, edi
	mov [esp], edx

loc_42D948:
	mov ecx, 0FC180000h
	mov esi, [esp]
	mov edx, edi
	mov ebx, edi
	add edx, dword_4EEBFC

loc_42D95A:
	mov [esp+4], ecx
	mov [esp+8], esi
	fild dword [esp+4]
	fmul qword [dbl_4CA224]
	fild dword [esp+8]
	fmul qword [dbl_4CA224]
	mov eax, edx
	add ebx, 9Ch
	add edx, 9Ch
	add ecx, 960000h
	fxch st1
	fstp dword flt_4EEB60[ebx]
	fstp dword flt_4EEB68[ebx]
	call sub_42D9D0
	cmp ecx, 3B60000h
	jnz loc_42D95A
	add word [esp+2], 96h
	mov ecx, [esp]
	add edi, 0Ch
	cmp ecx, 3B60000h
	jnz loc_42D948
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42D930 endp

sub_42D9D0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 0Ch
	mov edx, eax
	mov eax, [eax]
	xor ecx, ecx
	mov [esp], eax
	mov [esp+4], ecx
	mov eax, [edx+8]
	mov [esp+8], eax
	mov eax, esp
	call sub_49C264
	fmul qword [dbl_4CA214]
	fmul qword [dbl_4CA21C]
	sub esp, 4
	fstp dword [esp]
	call sub_49C2C4
	fmul dword [flt_4D5264]
	fadd dword [flt_4D5260]
	fstp dword [edx+4]
	add esp, 0Ch
	pop edx
	pop ecx
	ret
;sub_42D9D0 endp

sub_42DA20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 120h
	xor ah, ah
	mov dl, 1
	mov byte [byte_4EFC40], ah
	mov byte [byte_4EFC42], dl
	mov byte [byte_4EFC44], dl
	mov byte [byte_4EFC43], dl
	mov byte [byte_4EFC45], dl
	mov byte [byte_4EFC48], ah
	mov eax, dword [dword_51221C]
	mov byte [byte_4EFC46], dl
	mov byte [byte_4EFC47], dl
	mov al, byte byte_4EFC40[eax]
	mov edx, dword [dword_513480]
	push edx
	and eax, 0FFh
	push aSsky_fsh ; "%ssky.fsh"
	mov dword [dword_4EF3E8], eax
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	xor edx, edx
	mov eax, esp
	call sub_486F40
	mov ecx, dword [dword_51221C]
	push ecx
	push aCldD ; "CLD%d"
	mov esi, eax
	lea eax, [esp+108h]
	push eax
	xor ebx, ebx
	lea edx, [esp+10Ch]
	call sprintf_
	add esp, 0Ch
	mov ecx, dword_4EFC24
	mov eax, esi
	call sub_4352C0
	mov eax, esi
	call sub_438140
	mov eax, esi
	call sub_4848FC
	call sub_42D930
	add esp, 120h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42DA20 endp

sub_42DAF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 434h
	mov [esp+414h], esi
	mov edi, eax
	mov edx, 107AEh
	mov ecx, dword [dword_51221C]
	mov [esp+410h], edx
	test ecx, ecx
	jz loc_42DC5F
	mov eax, 1

loc_42DB23:
	mov [esp+420h], eax
	mov eax, edi
	call sub_42E510
	call sub_42E4C0
	cmp dword [edi], 1
	jz loc_42DC66

loc_42DB3F:
	mov esi, dword [dword_4EEB40]
	test esi, esi
	jnz loc_42DB58
	mov eax, edi
	call sub_42E280
	test eax, eax
	jz loc_42DD37

loc_42DB58:
	mov edx, 40h
	lea eax, [esp+418h]
	call sub_46FD30
	test eax, eax
	jz loc_42DC30
	mov eax, dword [dword_5127B0]
	mov [esp+3B8h], eax
	mov eax, dword [dword_5127B4]
	mov [esp+3BCh], eax
	mov eax, dword [dword_5127A8]
	mov [esp+3C0h], eax
	mov eax, [esp+3BCh]
	mov [esp+3C4h], eax
	mov eax, [esp+3C0h]
	mov [esp+3C8h], eax
	mov eax, dword [byte_5127BC]
	mov [esp+3CCh], eax
	mov eax, [esp+3B8h]
	mov [esp+3D0h], eax
	mov eax, [esp+3CCh]
	push 0
	mov [esp+3D8h], eax
	mov eax, dword [dword_42CFA0]
	push eax
	push eax
	push eax
	push eax
	mov esi, [esp+3E8h]
	push esi
	mov edi, [esp+3E8h]
	push edi
	mov ebp, [esp+3E8h]
	push ebp
	mov eax, [esp+3E8h]
	push eax
	mov edx, [esp+3E8h]
	push edx
	mov ecx, [esp+3E8h]
	push ecx
	mov ebx, [esp+3E8h]
	push ebx
	mov esi, [esp+3E8h]
	push esi

loc_42DC24:
	mov eax, [esp+44Ch]
	call sub_42E580

loc_42DC30:
	lea esi, [esp+400h]
	call sub_42E460
	mov edi, [esp+414h]
	lea esi, [esp+400h]
	movsd
	movsd
	mov eax, [esp+414h]
	add esp, 434h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42DC5F:
	xor eax, eax
	jmp loc_42DB23

loc_42DC66:
	mov eax, [edi+4]
	call sub_449A20
	test eax, eax
	jz loc_42DB3F
	call sub_42CF90
	mov edx, 40h
	mov ecx, eax
	lea eax, [esp+418h]
	call sub_46FD30
	test eax, eax
	jz loc_42DC30
	mov eax, dword [dword_5127B0]
	mov [esp+3D8h], eax
	mov eax, dword [dword_5127B4]
	mov [esp+3DCh], eax
	mov eax, dword [dword_5127A8]
	push 0
	mov [esp+3E4h], eax
	mov eax, [esp+3E0h]
	push ecx
	mov [esp+3ECh], eax
	mov eax, [esp+3E8h]
	push ecx
	mov [esp+3F4h], eax
	mov eax, dword [byte_5127BC]
	push ecx
	mov [esp+3FCh], eax
	mov eax, [esp+3E8h]
	push ecx
	mov [esp+404h], eax
	mov eax, [esp+400h]
	push eax
	mov ebp, [esp+408h]
	push ebp
	push eax
	mov edx, [esp+408h]
	push edx
	mov ecx, [esp+408h]
	push ecx
	mov ebx, [esp+408h]
	push ebx
	mov esi, [esp+408h]
	push esi
	mov edi, [esp+408h]
	push edi
	mov [esp+428h], eax
	jmp loc_42DC24

loc_42DD37:
	cmp dword [dword_4EEBE8], 0
	jnz loc_42DC30
	mov edx, 0CCh
	lea eax, [esp+41Ch]
	call sub_46FEA0
	test eax, eax
	jz loc_42DC30
	mov ecx, [esp+41Ch]
	mov edx, 11h
	mov ebx, dword [dword_5127AC]
	mov eax, edi
	call sub_45B840
	mov edx, 0CCh
	lea eax, [esp+408h]
	call sub_46FEA0
	test eax, eax
	jz loc_42DC30
	mov ecx, [esp+408h]
	mov edx, 11h
	mov ebx, dword [dword_5127B8]
	mov eax, edi
	call sub_45B840
	lea edx, [esp+2A8h]
	mov eax, [esp+41Ch]
	call sub_42E660
	lea edx, [esp+110h]
	mov eax, [esp+408h]
	call sub_42E660
	push esi
	mov ecx, dword_4EEB48
	lea ebx, [esp+2ACh]
	push 11h
	lea edx, [esp+118h]
	lea eax, [esp+90h]
	call sub_45B5A0
	push esi
	mov ecx, dword_4EEB4C
	lea ebx, [esp+2ACh]
	push 11h
	lea edx, [esp+118h]
	lea eax, [esp+228h]
	call sub_45B5A0
	push 1
	mov ecx, dword_4EEB98
	lea ebx, [esp+2ACh]
	push 11h
	lea edx, [esp+118h]
	lea eax, [esp+8]
	call sub_45B5A0
	push 1
	mov ecx, dword_4EEB98
	lea ebx, [esp+2B4h]
	push 11h
	lea edx, [esp+120h]
	lea eax, [esp+1A0h]
	call sub_45B5A0
	mov esi, [esp+408h]
	mov ecx, dword [dword_4EEBEC]
	xor eax, eax
	sar ecx, 2
	lea edx, [esi+0Ch]
	mov ebp, 1
	xor ebx, ebx

loc_42DE71:
	mov [esp+eax+330h], ebx
	mov [esp+eax+374h], ebx
	cmp ecx, [esi+8]
	jle loc_42E1A0
	cmp ecx, [edx+8]
	jle loc_42E1A0

loc_42DE91:
	add edx, 0Ch
	add eax, 4
	add esi, 0Ch
	cmp eax, 40h
	jnz loc_42DE71
	xor ebp, ebp
	xor ecx, ecx
	xor ebx, ebx
	xor esi, esi

loc_42DEA7:
	cmp esi, [esp+ebp+374h]
	jz loc_42DF40
	mov edx, 40h
	lea eax, [esp+418h]
	call sub_46FD30
	test eax, eax
	jz loc_42DF40
	cmp esi, dword [dword_4EEBDC]
	jz loc_42E1B3
	cmp ebx, 7
	jle loc_42E1B3
	push esi
	mov eax, dword byte_4EF3F4[ebp]
	push eax
	mov edx, dword dword_4EF3F8[ebp]
	push edx
	mov eax, dword [byte_4EF3F0]
	push eax
	push eax
	mov eax, [esp+ecx+0A0h]
	push eax
	mov edx, [esp+ecx+0A0h]
	push edx
	mov eax, [esp+ecx+0B0h]
	push eax
	mov edx, [esp+ecx+0B0h]
	push edx
	mov eax, [esp+ecx+2D8h]
	push eax
	mov edx, [esp+ecx+2D8h]
	push edx
	mov eax, [esp+ecx+2D8h]
	push eax
	mov edx, [esp+ecx+2D8h]

loc_42DF33:
	push edx
	mov eax, [esp+44Ch]
	call sub_42E580

loc_42DF40:
	add ecx, 8
	inc ebx
	add ebp, 4
	cmp ebx, 10h
	jl loc_42DEA7
	cmp dword [edi], 1
	jnz loc_42E20E

loc_42DF59:
	xor ecx, ecx
	xor ebx, ebx
	mov esi, 40h
	xor edi, edi

loc_42DF64:
	cmp edi, [esp+ebx+374h]
	jz loc_42DFE2
	lea eax, [esp+418h]
	mov edx, esi
	call sub_46FD30
	test eax, eax
	jz loc_42DFE2
	mov eax, [esp+420h]
	push eax
	mov edx, dword [byte_4EEBF8]
	push edx
	push edx
	mov eax, dword [byte_4EEBF4]
	push eax
	push eax
	mov ebp, [esp+ecx+128h]
	push ebp
	mov eax, [esp+ecx+128h]
	push eax
	mov edx, [esp+ecx+138h]
	push edx
	mov ebp, [esp+ecx+138h]
	push ebp
	mov eax, [esp+ecx+0B8h]
	push eax
	mov edx, [esp+ecx+0B8h]
	push edx
	mov ebp, [esp+ecx+0B8h]
	push ebp
	mov eax, [esp+ecx+0B8h]
	push eax
	mov eax, [esp+44Ch]
	call sub_42E580

loc_42DFE2:
	add ebx, 4
	add ecx, 8
	cmp ebx, 40h
	jnz loc_42DF64
	mov eax, esp
	xor edx, edx
	xor ebp, ebp
	mov [esp+430h], edx
	mov [esp+428h], eax
	lea eax, [esp+198h]
	mov [esp+42Ch], edx
	mov [esp+424h], eax

loc_42E01A:
	mov eax, [esp+42Ch]
	cmp dword [esp+eax+330h], 0
	jz loc_42E14D
	mov edx, 38h
	lea eax, [esp+40Ch]
	call sub_46FD30
	test eax, eax
	jz loc_42E14D
	push 0
	lea ecx, [esp+414h]
	mov ebx, [esp+428h]
	push 1
	mov edx, [esp+430h]
	lea eax, [esp+400h]
	call sub_45B5A0
	mov eax, [esp+40Ch]
	mov dword [eax+4], 3
	mov eax, [esp+40Ch]
	mov esi, [esp+420h]
	mov dword [eax+30h], 0
	test esi, esi
	jz loc_42E21A
	mov eax, [esp+40Ch]
	mov dword [eax+34h], 3C23D666h

loc_42E0A6:
	mov eax, [esp+40Ch]
	mov byte [eax+2Ch], 0FFh
	mov eax, [esp+40Ch]
	mov byte [eax+2Dh], 0FFh
	mov eax, [esp+40Ch]
	mov byte [eax+2Eh], 0FFh
	mov eax, [esp+40Ch]
	mov byte [eax+2Fh], 0FFh
	mov edx, [esp+42Ch]
	mov eax, [esp+40Ch]
	mov edx, dword dword_4EEB50[edx]
	mov edi, dword [dword_4EEBDC]
	mov [eax+28h], edx
	test edi, edi
	jz loc_42E22D
	cmp dword [esp+430h], 7
	jle loc_42E22D
	mov edi, [esp+40Ch]
	lea esi, [esp+3F8h]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp]
	lea edi, [edi+10h]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp+220h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp+228h]

loc_42E148:
	lea edi, [edi+20h]
	movsd
	movsd

loc_42E14D:
	mov ecx, [esp+424h]
	mov ebx, [esp+42Ch]
	mov esi, [esp+430h]
	mov edx, [esp+428h]
	add ebp, 8
	add ecx, 8
	add ebx, 4
	inc esi
	add edx, 8
	mov [esp+424h], ecx
	mov [esp+42Ch], ebx
	mov [esp+430h], esi
	mov [esp+428h], edx
	cmp esi, 10h
	jl loc_42E01A
	jmp loc_42DC30

loc_42E1A0:
	mov [esp+eax+330h], ebp
	mov [esp+eax+374h], ebp
	jmp loc_42DE91

loc_42E1B3:
	push esi
	mov eax, dword dword_4EF3F8[ebp]
	push eax
	mov edx, dword [byte_4EF3F0]
	push edx
	push edx
	mov edx, dword byte_4EF3F4[ebp]
	push edx
	mov eax, [esp+ecx+0A8h]
	push eax
	mov edx, [esp+ecx+0A8h]
	push edx
	mov eax, [esp+ecx+2D0h]
	push eax
	mov edx, [esp+ecx+2D0h]
	push edx
	mov eax, [esp+ecx+2D0h]
	push eax
	mov edx, [esp+ecx+2D0h]
	push edx
	mov eax, [esp+ecx+0B8h]
	push eax
	mov edx, [esp+ecx+0B8h]
	jmp loc_42DF33

loc_42E20E:
	mov eax, edi
	call sub_42CFB0
	jmp loc_42DF59

loc_42E21A:
	mov eax, [esp+40Ch]
	mov dword [eax+34h], 3F7FFF00h
	jmp loc_42E0A6

loc_42E22D:
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+3F8h]
	lea edi, [edi+10h]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp+228h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov edi, [esp+40Ch]
	lea esi, [esp+ebp+220h]
	jmp loc_42E148
;sub_42DAF0 endp

sub_42E280: ;SUBROUTINE
	push ebx
	push edx
	push edi
	mov edx, eax
	cmp dword [dword_51221C], 4
	jnz loc_42E2D9
	mov ebx, dword [dword_5117C4]
	cmp ebx, 447h
	jle loc_42E2A4
	cmp ebx, 556h
	jl loc_42E2DF

loc_42E2A4:
	mov edi, dword [dword_5117C4]
	cmp edi, 3F5h
	jle loc_42E2C6
	cmp edi, 446h
	jge loc_42E2C6
	lea eax, [edx+14h]
	call sub_42E3B0
	test eax, eax
	jnz loc_42E2DF

loc_42E2C6:
	mov eax, dword [dword_5117C4]
	cmp eax, 555h
	jle loc_42E2D9
	cmp eax, 59Ah
	jl loc_42E2E8

loc_42E2D9:
	xor eax, eax
	pop edi
	pop edx
	pop ebx
	ret

loc_42E2DF:
	mov eax, 1
	pop edi
	pop edx
	pop ebx
	ret

loc_42E2E8:
	lea eax, [edx+14h]
	call sub_42E300
	test eax, eax
	jz loc_42E2D9
	mov eax, 1
	pop edi
	pop edx
	pop ebx
	ret
;sub_42E280 endp

sub_42E300: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	sub esp, 18h
	mov edx, dword [dword_5117C4]
	lea esi, [eax+18h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edi, esp
	add eax, edx
	movsd
	movsd
	movsd
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+0Ch], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	mov eax, [eax+0Eh]
	shl edx, 9
	sar eax, 18h
	mov [esp+10h], edx
	shl eax, 9
	mov edx, [esp+0Ch]
	mov [esp+14h], eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	test eax, eax
	jl loc_42E398
	xor eax, eax
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_42E398:
	mov eax, 1
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_42E300 endp

sub_42E3B0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	sub esp, 18h
	mov edx, dword [dword_5117C4]
	lea esi, [eax+18h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edi, esp
	add eax, edx
	movsd
	movsd
	movsd
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+0Ch], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	mov eax, [eax+0Eh]
	shl edx, 9
	sar eax, 18h
	mov [esp+10h], edx
	shl eax, 9
	mov edx, [esp+0Ch]
	mov [esp+14h], eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	test eax, eax
	jle loc_42E44B
	mov eax, 1
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_42E44B:
	xor eax, eax
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_42E3B0 endp

sub_42E460: ;SUBROUTINE
	push ecx
	push edx
	push edi
	sub esp, 0Ch
	mov ecx, esi
	mov edx, 10h
	lea eax, [esp+8]
	call sub_46FD30
	test eax, eax
	jz loc_42E4A5
	mov eax, [esp+8]
	mov dword [eax+4], 1Bh
	mov eax, [esp+8]
	mov dword [eax], 0
	mov eax, [esp+8]
	mov dword [eax+8], 0Ah
	mov eax, [esp+8]
	mov dword [eax+0Ch], 2

loc_42E4A5:
	mov esi, esp
	mov edi, ecx
	call sub_46FCF0
	mov esi, esp
	movsd
	movsd
	mov eax, ecx
	add esp, 0Ch
	pop edi
	pop edx
	pop ecx
	ret
;sub_42E460 endp

sub_42E4C0: ;SUBROUTINE
	push edx
	sub esp, 4
	call sub_46FD80
	mov edx, 10h
	mov eax, esp
	call sub_46FD30
	test eax, eax
	jnz loc_42E4DE
	add esp, 4
	pop edx
	ret

loc_42E4DE:
	mov eax, [esp]
	mov dword [eax+4], 1Bh
	mov eax, [esp]
	mov dword [eax], 0
	mov eax, [esp]
	mov dword [eax+8], 0Ah
	mov eax, [esp]
	mov dword [eax+0Ch], 0
	add esp, 4
	pop edx
	ret
;sub_42E4C0 endp

sub_42E510: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	cmp dword [eax], 1
	jnz loc_42E54A
	mov esi, 6Eh
	mov edi, 1E6h
	mov ebp, 27Ch
	mov ebx, 28h
	mov dword [byte_5127BC], esi
	mov dword [dword_5127B0], edi
	mov dword [dword_5127A8], ebp
	mov dword [dword_5127B4], ebx
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_42E54A:
	push edx
	push ecx
	push byte_5127BC
	mov ecx, dword_5127A8
	mov ebx, dword_5127B4
	mov edx, dword_5127B0
	mov eax, [eax+4]
	call sub_42A270
	mov eax, dword [dword_5127B4]
	add dword [byte_5127BC], eax
	pop ecx
	pop edx
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_42E510 endp

sub_42E580: ;SUBROUTINE
	push edx
	push esi
	push edi
	mov edx, [esp+40h]
	mov dword [eax+4], 7
	test edx, edx
	jz loc_42E632
	mov dword [eax+3Ch], 3C23D666h
	mov dword [eax+38h], 0

loc_42E5A4:
	lea esi, [esp+10h]
	lea edi, [eax+8]
	movsd
	movsd
	lea esi, [esp+18h]
	lea edi, [eax+10h]
	movsd
	movsd
	lea esi, [esp+20h]
	lea edi, [eax+18h]
	movsd
	movsd
	lea esi, [esp+28h]
	lea edi, [eax+20h]
	movsd
	movsd
	mov byte [eax+28h], 0FFh
	mov byte [eax+2Ch], 0FFh
	mov byte [eax+30h], 0FFh
	mov dl, [esp+32h]
	mov byte [eax+34h], 0FFh
	mov [eax+29h], dl
	mov dl, [esp+31h]
	mov [eax+2Ah], dl
	mov dl, [esp+30h]
	mov [eax+2Bh], dl
	mov dl, [esp+36h]
	mov [eax+2Dh], dl
	mov dl, [esp+35h]
	mov [eax+2Eh], dl
	mov dl, [esp+34h]
	mov [eax+2Fh], dl
	mov dl, [esp+3Ah]
	mov [eax+31h], dl
	mov dl, [esp+39h]
	mov [eax+32h], dl
	mov dl, [esp+38h]
	mov [eax+33h], dl
	mov dl, [esp+3Eh]
	mov [eax+35h], dl
	mov dl, [esp+3Dh]
	mov [eax+36h], dl
	mov dl, [esp+3Ch]
	mov [eax+37h], dl
	pop edi
	pop esi
	pop edx
	ret 34h

loc_42E632:
	mov dword [eax+3Ch], 3F7FFF00h
	mov [eax+38h], edx
	jmp loc_42E5A4
;sub_42E580 endp

sub_42E650: ;SUBROUTINE
	xor byte [dword_4EEBE8], 1
	ret
;sub_42E650 endp

sub_42E660: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	sub esp, 44h
	mov esi, eax
	mov ebx, edx
	xor edx, edx

loc_42E66C:
	mov ecx, [eax+8]
	add eax, 0Ch
	mov [esp+edx], ecx
	mov ecx, dword [dword_4EEBE4]
	add edx, 4
	mov [eax-4], ecx
	cmp edx, 44h
	jnz loc_42E66C
	mov ecx, dword_4D5268
	mov eax, 11h
	mov edx, esi
	call sub_45B690
	mov edx, esi
	xor eax, eax

loc_42E69B:
	add edx, 0Ch
	mov ecx, [esp+eax]
	add eax, 4
	mov [edx-4], ecx
	cmp eax, 44h
	jnz loc_42E69B
	add esp, 44h
	pop esi
	pop ecx
	pop ebx
	ret
;sub_42E660 endp

sub_42E6C0: ;SUBROUTINE
	mov eax, dword [dword_5127AC]
	call sub_4848FC
	mov eax, dword [dword_5127B8]
	jmp sub_4848FC
;sub_42E6C0 endp

sub_42E6E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, aCNfs2seGame3_1 ; "c:\\nfs2se\\game\\3rash\\hrzsku.c"
	mov ecx, 167h
	mov esi, 169h
	mov eax, dword [dword_512250]
	xor ebx, ebx
	mov dword [dword_4EEBE8], eax
	mov dword [dword_4DB1D8], edx
	mov edx, 180h
	mov eax, aGrngcoordtop ; "gRngCoordTop"
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ebx, aCNfs2seGame3_1 ; "c:\\nfs2se\\game\\3rash\\hrzsku.c"
	mov edx, 180h
	mov dword [dword_5127AC], eax
	mov eax, aGrngcoordbotto ; "gRngCoordBottom"
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov dword [dword_5127B8], eax
	call sub_42E750
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42E6E0 endp

sub_42E750: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 4Ch
	push edi
	push ebx
	xor ecx, ecx
	xor esi, esi

loc_42E75D:
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov ebx, dword [dword_4EEB44]
	add ebx, eax
	mov eax, ebx
	mov edx, dword [dword_4EEBEC]
	call sub_49C150
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, dword [dword_5127B8]
	mov [esi+eax], edx
	mov edx, dword [dword_4EEBF0]
	mov [esi+eax+4], edx
	mov eax, ebx
	mov edx, dword [dword_4EEBEC]
	call sub_49C1C0
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, dword [dword_5127B8]
	mov [esi+eax+8], edx
	mov edi, dword [dword_5127AC]
	mov edx, [esi+eax]
	mov [edi+esi], edx
	mov edx, dword [dword_4EEB94]
	mov ebx, [esi+eax+4]
	add esi, 0Ch
	add ebx, edx
	mov [edi+esi-8], ebx
	mov eax, [esi+eax-4]
	add ecx, 10000h
	mov [edi+esi-4], eax
	cmp ecx, 200000h
	jnz loc_42E75D
	mov ecx, 1
	mov esi, 0Fh
	lea edi, [esp+8]
	mov [esp+50h], ecx
	xor ecx, ecx

loc_42E80E:
	cmp dword [dword_4EEBDC], 0
	jz loc_42E8B5
	cmp ecx, 7
	jle loc_42E8B5
	mov ebx, 8
	mov edx, esi
	mov eax, esi

loc_42E82D:
	sar edx, 1Fh
	idiv ebx
	mov edx, dword dword_4EEB20[edx*4]
	mov dword dword_4EEB50[ecx*4], edx
	lea ebp, 0[ecx*4]
	lea edx, [esp+4Ch]
	mov ebx, edi
	mov eax, dword dword_4EEB50[ebp]
	call sub_42ED00
	mov edx, [esp+50h]
	mov eax, [esp+ebp+8]
	cmp eax, edx
	jle loc_42E868
	mov [esp+50h], eax

loc_42E868:
	add edi, 4
	inc ecx
	dec esi
	cmp ecx, 10h
	jl loc_42E80E
	mov ecx, dword [dword_4EEB4C]
	mov edx, dword [dword_4EEBE0]
	sub edx, ecx
	mov ebx, [esp+50h]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov esi, dword [dword_4EEB4C]
	xor ecx, ecx
	mov edx, eax
	pop ebx
	pop edi

loc_42E897:
	mov eax, [esp+ecx]
	imul eax, edx
	add ecx, 4
	add eax, esi
	mov dword dword_4EEB94[ecx], eax
	cmp ecx, 44h
	jnz loc_42E897
	add esp, 4Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	ret

loc_42E8B5:
	mov ebx, 8
	mov edx, ecx
	mov eax, ecx
	jmp loc_42E82D
;sub_42E750 endp

sub_42E8F0: ;SUBROUTINE
	push edx
	mov edx, eax
	xor eax, eax

loc_42E8F5:
	mov dword dword_4EEB20[eax], edx
	add eax, 4
	add edx, 1Ch
	cmp eax, 20h
	jnz loc_42E8F5
	pop edx
	ret
;sub_42E8F0 endp

sub_42E910: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 12Ch
	mov edx, dword [dword_51221C]
	push edx
	mov ecx, dword [dword_513480]
	push ecx
	push aS3tr02d_hrz ; "%s3Tr%02d.hrz"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_486F40
	mov ecx, eax
	mov [esp+100h], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+120h], eax
	fild dword [esp+120h]
	lea eax, [esp+100h]
	fstp dword [flt_4D5260]
	call sub_470EC0
	mov [esp+120h], eax
	fild dword [esp+120h]
	lea eax, [esp+100h]
	fstp dword [flt_4D5264]
	call sub_470EC0
	mov dword [dword_4EEB40], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEBDC], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEBEC], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEB44], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEBE4], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEBF0], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov dword [dword_4EEB94], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov edi, eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov ebp, eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov esi, eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBF6], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBF5], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBF4], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBFA], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBF9], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EEBF8], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EF3F2], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EF3F1], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov byte [byte_4EF3F0], al
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+110h], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+104h], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+108h], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov ebx, eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+10Ch], eax
	lea eax, [esp+100h]
	call sub_470EC0
	mov [esp+120h], eax
	mov eax, ecx
	call sub_4848FC
	call sub_42DA20
	mov edx, dword [dword_4EEB44]
	shl edx, 10h
	mov ecx, 168h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4EEB44], eax
	mov eax, 10000h
	mov edx, eax
	mov ecx, dword [dword_4EEB94]
	sar edx, 1Fh
	idiv ecx
	imul edi, eax
	imul ebp, eax
	imul esi, eax
	xor ecx, ecx
	xor eax, eax
	mov cl, [esp+110h]
	mov al, bl
	mov dword [dword_4EEB48], edi
	sub eax, ecx
	mov dword [dword_4EEBE0], ebp
	shl eax, 0Dh
	xor ebx, ebx
	mov [esp+128h], eax
	xor eax, eax
	mov bl, [esp+104h]
	mov al, [esp+10Ch]
	mov dword [dword_4EEB4C], esi
	sub eax, ebx
	movzx esi, byte [esp+108h]
	shl eax, 0Dh
	mov ebp, 40h
	mov [esp+11Ch], eax
	xor eax, eax
	xor edi, edi
	mov al, [esp+120h]
	shl ecx, 10h
	sub eax, esi
	shl ebx, 10h
	shl eax, 0Dh
	shl esi, 10h
	mov [esp+124h], eax

loc_42EBEC:
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+114h], eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+118h], eax
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ah, [esp+114h]
	mov byte byte_4EF3F6[edi], ah
	mov ah, [esp+118h]
	mov byte byte_4EF3F5[edi], ah
	sub ebp, 4
	mov byte byte_4EF3F4[edi], al
	mov ah, [esp+114h]
	mov byte byte_4EF3F6[ebp], ah
	mov ah, [esp+118h]
	mov byte byte_4EF3F5[ebp], ah
	add edi, 4
	mov byte byte_4EF3F4[ebp], al
	mov eax, [esp+128h]
	mov edx, [esp+11Ch]
	add ecx, eax
	mov eax, [esp+124h]
	add ebx, edx
	add esi, eax
	cmp edi, 20h
	jnz loc_42EBEC
	mov eax, dword [byte_4EF3F4]
	mov edx, dword [dword_4EEB40]
	mov dword [dword_4EF434], eax
	test edx, edx
	jz loc_42ECCC
	xor dl, dl
	mov byte [byte_4EF3EE], dl
	mov byte [byte_4EF3ED], dl
	mov byte [byte_4EF3EC], dl
	mov byte [byte_4EF3EF], dl
	add esp, 12Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42ECCC:
	mov byte [byte_4EF3EF], 0FFh
	mov al, byte [byte_4EF3F2]
	mov byte [byte_4EF3EE], al
	mov al, byte [byte_4EF3F1]
	mov byte [byte_4EF3ED], al
	mov al, byte [byte_4EF3F0]
	mov byte [byte_4EF3EC], al
	add esp, 12Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42E910 endp

sub_42ED00: ;SUBROUTINE
	push ecx
	mov ecx, [eax]
	mov ecx, [ecx+2]
	sar ecx, 10h
	mov [edx], ecx
	mov eax, [eax]
	mov eax, [eax+4]
	sar eax, 10h
	mov [ebx], eax
	pop ecx
	ret
;sub_42ED00 endp

sub_42ED30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 0Ch
	mov ecx, dword [dword_512234]
	push ecx
	mov edx, 100h
	push aPazD ; "paz%d"
	lea eax, [esp+8]
	xor ebx, ebx
	push eax
	mov dword [dword_4D9944], edx
	mov ecx, dword_4EFC74
	call sprintf_
	add esp, 0Ch
	mov edx, esp
	mov eax, dword [dword_512AAC]
	call sub_4352C0
	xor ebx, ebx
	mov dword [dword_4D9944], ebx
	add esp, 0Ch
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42ED30 endp

off_42ED80: dd loc_42F446
	dd loc_42F4D3
	dd loc_42F511
	dd loc_42F55A
	dd loc_42F5A3
	dd loc_42F5EF
off_42ED98: dd loc_42F64A
	dd loc_42F68E
	dd loc_42F6CC
	dd loc_42F715
	dd loc_42F75E
	dd loc_42F7AA

sub_42EDB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, 7FFFFFFFh
	mov edx, dword_4EFC74
	mov ebx, dword [dword_512AB4]
	mov dword [dword_4EFC70], ecx
	mov dword [dword_4EFC6C], edx
	test ebx, ebx
	jnz loc_42F055
	call sub_42F9F0
	mov edx, 4Dh

loc_42EDE7:
	mov ah, 20h
	mov esi, 40h
	mov edi, 1B0h
	mov ebp, 23Dh
	xor bl, bl
	mov byte [byte_4EFCB8], ah
	mov byte [byte_4EFCB9], bl
	mov byte [byte_4EFCBA], bl
	mov byte [byte_4EFCBB], bl
	mov dword [dword_4EFC98], esi
	mov dword [dword_4EFC9C], edi
	mov dword [dword_4EFCA0], ebp
	mov dword [dword_4EFCA4], edi
	mov dword [dword_4EFCA8], ebp
	mov ebx, 1ADh
	mov esi, 43h
	mov eax, dword_4EFC90
	mov ebp, 240h
	mov dword [dword_4EFCAC], ebx
	mov dword [dword_4EFCB0], esi
	mov dword [dword_4EFCB4], ebx
	call sub_42A980
	mov ebx, 23Dh
	mov eax, dword_4EFC90
	mov dword [dword_4EFC98], ebp
	mov dword [dword_4EFC9C], edx
	mov dword [dword_4EFCA0], ebp
	mov dword [dword_4EFCA4], edi
	mov dword [dword_4EFCAC], edi
	mov ebp, 40h
	mov dword [dword_4EFCA8], ebx
	lea ecx, [edx+3]
	mov dword [dword_4EFCB0], ebx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov ebx, esi
	mov al, 10h
	mov dword [dword_4EFC98], ebp
	mov dword [dword_4EFC9C], edi
	mov dword [dword_4EFCA0], esi
	mov dword [dword_4EFCA8], ebx
	mov dword [dword_4EFCAC], edx
	mov dword [dword_4EFCB0], ebp
	mov dword [dword_4EFCB4], edx
	mov esi, 1ADh
	mov byte [byte_4EFCB8], al
	mov edi, ebx
	mov ah, 0FFh
	mov ebx, 23Dh
	mov dword [dword_4EFCA4], esi
	mov byte [byte_4EFCB9], ah
	mov byte [byte_4EFCBA], ah
	mov byte [byte_4EFCBB], ah
	mov eax, dword_4EFC90
	mov esi, edi
	call sub_42A980
	mov eax, 240h
	mov dword [dword_4EFC9C], edx
	mov dword [dword_4EFCA0], ebx
	mov dword [dword_4EFCA4], ecx
	mov dword [dword_4EFCA8], esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB0], edi
	mov dword [dword_4EFC98], eax
	mov eax, dword_4EFC90
	mov dword [dword_4EFCB4], edx
	call sub_42A980
	mov ebp, dword [dword_512AB4]
	cmp ebp, 1
	jnz loc_42F064

loc_42EF54:
	cmp dword [dword_5121F8], 2
	jnz loc_42F34D
	mov ebp, 0BEh
	mov eax, 80h
	mov edx, 0FFh
	mov ecx, 1Bh
	mov esi, 93h
	xor ebx, ebx
	mov dword [dword_4EFC54], ebp
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], edx
	mov dword [dword_4EFC60], ecx
	mov dword [dword_4EFC64], ebx
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC68], esi

loc_42EFA4:
	call sub_42ABF0
	cmp dword [dword_512AA8], 0
	jz loc_42F395
	mov ebp, 0C3h
	mov eax, 0E6h
	mov edx, 5Dh
	mov ecx, 27h
	mov ebx, 0A3h
	mov edi, 0B0FFFFFFh
	xor esi, esi
	mov dword [dword_4EFC54], ebp
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], edx
	mov dword [dword_4EFC60], ecx
	mov dword [dword_4EFC64], ebx
	mov dword [dword_4EFC68], esi
	mov dword [dword_4EFC70], edi
	mov eax, dword_4EFC4C
	mov ebp, 15Ch
	mov edi, 7F5F5F5Fh
	call sub_42ABF0
	mov eax, 0E6h
	mov dword [dword_4EFC54], ebp
	mov dword [dword_4EFC5C], edx
	mov dword [dword_4EFC60], ecx
	mov dword [dword_4EFC64], ebx
	mov dword [dword_4EFC68], ecx

loc_42F036:
	mov dword [dword_4EFC58], eax
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC70], edi
	call sub_42ABF0

loc_42F04B:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42F055:
	call sub_42FCB0
	mov edx, 30h
	jmp loc_42EDE7

loc_42F064:
	cmp ebp, 2
	jz loc_42EF54
	mov edx, 6
	mov ecx, 24h
	mov ebx, dword [dword_512208]
	mov [esp], edx
	cmp ebx, 1
	jle loc_42F08F
	mov esi, 5
	xor ecx, ecx
	mov [esp], esi

loc_42F08F:
	mov edi, [esp]
	xor edx, edx
	test edi, edi
	jle loc_42F12E
	lea esi, [ecx+7Bh]
	lea ebx, [ecx+9Eh]
	lea edi, [ecx+58h]
	lea ebp, [ecx+0C1h]
	lea eax, [ecx+0E4h]
	add ecx, 108h
	mov [esp+4], eax
	mov [esp+8], ecx
	xor ecx, ecx

loc_42F0C4:
	cmp edx, 1
	jnz loc_42F41C
	cmp dword [dword_512ABC], 0
	jz loc_42F41C
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 19h
	mov dword [dword_4EFC70], 2F5F5F5Fh

loc_42F113:
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], esi

loc_42F11E:
	call sub_42ABF0

loc_42F123:
	mov eax, [esp]
	inc edx
	add ecx, 4
	cmp edx, eax
	jl loc_42F0C4

loc_42F12E:
	mov edx, dword [dword_512208]
	test edx, edx
	jz loc_42F04B
	cmp edx, 1
	jz loc_42F04B
	cmp dword [dword_512214], 1
	jg loc_42F04B
	cmp byte [byte_51345F], 1
	jnz loc_42F7F6
	xor edx, edx
	mov ebp, 0D1h
	mov bh, 8Fh
	mov bl, 0FFh
	mov esi, dword_4EFC90

loc_42F16F:
	mov ecx, 81h
	mov eax, 0CBh
	mov byte [byte_4EFCB8], bl
	mov byte [byte_4EFCB9], bl
	mov byte [byte_4EFCBA], bl
	mov byte [byte_4EFCBB], bl
	add edx, 4
	mov dword [dword_4EFC98], ecx
	mov dword [dword_4EFCA0], eax
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCA8], eax
	sub ecx, 0Ah
	mov eax, 81h
	mov dword [dword_4EFC9C], ecx
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCB0], eax
	sub ecx, 9
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov ah, 7Fh
	mov ecx, 81h
	mov byte [byte_4EFCB9], bh
	mov byte [byte_4EFCBA], bh
	mov byte [byte_4EFCBB], bh
	mov byte [byte_4EFCB8], ah
	mov dword [dword_4EFC98], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov eax, 0CBh
	sub ecx, 9
	mov dword [dword_4EFCA0], eax
	mov dword [dword_4EFCA8], eax
	mov eax, 81h
	mov dword [dword_4EFC9C], ecx
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCB0], eax
	add ecx, 2
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov eax, 203h
	mov byte [byte_4EFCB8], bl
	mov byte [byte_4EFCB9], bl
	mov ecx, dword dword_4D4C00[edx]
	mov byte [byte_4EFCBA], bl
	sub ecx, 0Ah
	mov byte [byte_4EFCBB], bl
	mov dword [dword_4EFC9C], ecx
	mov ecx, 203h
	mov dword [dword_4EFC98], ebp
	mov dword [dword_4EFCA0], ecx
	mov ecx, dword [dword_4EFC9C]
	mov dword [dword_4EFCB0], ebp
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCA8], eax
	sub ecx, 9
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov cl, 7Fh
	mov eax, 203h
	mov byte [byte_4EFCB9], bh
	mov byte [byte_4EFCB8], cl
	mov ecx, dword dword_4D4C00[edx]
	mov byte [byte_4EFCBA], bh
	sub ecx, 9
	mov byte [byte_4EFCBB], bh
	mov dword [dword_4EFC9C], ecx
	mov ecx, 203h
	mov dword [dword_4EFC98], ebp
	mov dword [dword_4EFCA0], ecx
	mov ecx, dword [dword_4EFC9C]
	mov dword [dword_4EFCB0], ebp
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCA8], eax
	add ecx, 2
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	cmp edx, 20h
	jnz loc_42F16F
	mov eax, 1
	call sub_4211E0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_42F34D:
	mov eax, 0BEh
	mov edx, 80h
	mov ecx, 0FFh
	mov ebx, 1Bh
	mov edi, 78h
	xor esi, esi
	mov dword [dword_4EFC54], eax
	mov dword [dword_4EFC58], edx
	mov dword [dword_4EFC5C], ecx
	mov dword [dword_4EFC60], ebx
	mov dword [dword_4EFC64], esi
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC68], edi
	jmp loc_42EFA4

loc_42F395:
	mov ebp, 15Ch
	mov eax, 0E6h
	mov edx, 5Dh
	mov ecx, 27h
	mov ebx, 0A3h
	mov edi, 0B0FFFFFFh
	mov dword [dword_4EFC54], ebp
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], edx
	mov dword [dword_4EFC60], ecx
	mov dword [dword_4EFC64], ebx
	mov esi, ecx
	mov dword [dword_4EFC68], ecx
	mov dword [dword_4EFC70], edi
	mov eax, dword_4EFC4C
	mov ebp, 0C3h
	mov edi, 7F5F5F5Fh
	call sub_42ABF0
	xor esi, ecx
	mov eax, 0E6h
	mov dword [dword_4EFC54], ebp
	mov dword [dword_4EFC5C], edx
	mov dword [dword_4EFC60], ecx
	mov dword [dword_4EFC64], ebx
	mov dword [dword_4EFC68], esi
	jmp loc_42F036

loc_42F41C:
	cmp edx, 2
	jnz loc_42F42A
	cmp dword [dword_512AB8], 0
	jnz loc_42F48A

loc_42F42A:
	mov eax, dword [dword_512AA8]
	cmp edx, eax
	jnz loc_42F63B
	cmp eax, 5
	ja loc_42F123
	jmp off_42ED80[ecx]

loc_42F446:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], eax
	mov dword [dword_4EFC70], 7FFFFFFFh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], edi
	jmp loc_42F11E

loc_42F48A:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 49h
	mov dword [dword_4EFC70], 2F5F5F5Fh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], ebx
	jmp loc_42F11E

loc_42F4D3:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 19h
	mov dword [dword_4EFC70], 7FFFFFFFh
	jmp loc_42F113

loc_42F511:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 49h
	mov dword [dword_4EFC70], 7FFFFFFFh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], ebx
	jmp loc_42F11E

loc_42F55A:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 0FFh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 61h
	mov dword [dword_4EFC70], 7FFFFFFFh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], ebp
	jmp loc_42F11E

loc_42F5A3:
	mov dword [dword_4EFC54], 86h
	mov eax, [esp+4]
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 31h
	mov dword [dword_4EFC70], 7FFFFFFFh
	mov eax, dword_4EFC4C
	jmp loc_42F11E

loc_42F5EF:
	mov dword [dword_4EFC54], 86h
	mov eax, [esp+8]
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], 0FFh
	mov dword [dword_4EFC60], 1Ch
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 0C7h
	mov dword [dword_4EFC70], 7FFFFFFFh
	mov eax, dword_4EFC4C
	jmp loc_42F11E

loc_42F63B:
	cmp edx, 5
	ja loc_42F123
	jmp off_42ED98[ecx]

loc_42F64A:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], eax
	mov dword [dword_4EFC70], 7F5F5F5Fh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], edi
	jmp loc_42F11E

loc_42F68E:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 19h
	mov dword [dword_4EFC70], 7F5F5F5Fh
	jmp loc_42F113

loc_42F6CC:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 49h
	mov dword [dword_4EFC70], 7F5F5F5Fh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], ebx
	jmp loc_42F11E

loc_42F715:
	mov dword [dword_4EFC54], 86h
	mov dword [dword_4EFC5C], 0FFh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 61h
	mov dword [dword_4EFC70], 7F5F5F5Fh
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC58], ebp
	jmp loc_42F11E

loc_42F75E:
	mov dword [dword_4EFC54], 86h
	mov eax, [esp+4]
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], 9Bh
	mov dword [dword_4EFC60], 18h
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 31h
	mov dword [dword_4EFC70], 7F5F5F5Fh
	mov eax, dword_4EFC4C
	jmp loc_42F11E

loc_42F7AA:
	mov dword [dword_4EFC54], 86h
	mov eax, [esp+8]
	mov dword [dword_4EFC58], eax
	mov dword [dword_4EFC5C], 0FFh
	mov dword [dword_4EFC60], 1Ch
	xor eax, eax
	mov dword [dword_4EFC64], eax
	mov dword [dword_4EFC68], 0C7h
	mov dword [dword_4EFC70], 7F5F5F5Fh
	mov eax, dword_4EFC4C
	jmp loc_42F11E

loc_42F7F6:
	xor edx, edx
	mov edi, 0D1h
	mov bh, 8Fh
	mov bl, 0FFh
	mov esi, dword_4EFC90

loc_42F806:
	mov ecx, 81h
	mov eax, 0CBh
	mov byte [byte_4EFCB8], bl
	mov byte [byte_4EFCB9], bl
	mov byte [byte_4EFCBA], bl
	mov byte [byte_4EFCBB], bl
	add edx, 10h
	mov dword [dword_4EFC98], ecx
	mov dword [dword_4EFCA0], eax
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFCA8], eax
	sub ecx, 0Ah
	mov eax, 81h
	mov dword [dword_4EFC9C], ecx
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFCB0], eax
	sub ecx, 9
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov ch, 7Fh
	mov eax, 0CBh
	mov byte [byte_4EFCB9], bh
	mov byte [byte_4EFCBA], bh
	mov byte [byte_4EFCBB], bh
	mov byte [byte_4EFCB8], ch
	mov ecx, 81h
	mov dword [dword_4EFCA0], eax
	mov dword [dword_4EFC98], ecx
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFCA8], eax
	sub ecx, 9
	mov eax, 81h
	mov dword [dword_4EFC9C], ecx
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFCB0], eax
	add ecx, 2
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov eax, 203h
	mov byte [byte_4EFCB8], bl
	mov byte [byte_4EFCB9], bl
	mov ecx, dword off_4D4BF4[edx]
	mov byte [byte_4EFCBA], bl
	sub ecx, 0Ah
	mov byte [byte_4EFCBB], bl
	mov dword [dword_4EFC9C], ecx
	mov ecx, 203h
	mov dword [dword_4EFC98], edi
	mov dword [dword_4EFCA0], ecx
	mov ecx, dword [dword_4EFC9C]
	mov dword [dword_4EFCB0], edi
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFCA8], eax
	sub ecx, 9
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov al, 7Fh
	mov byte [byte_4EFCB9], bh
	mov byte [byte_4EFCBA], bh
	mov byte [byte_4EFCBB], bh
	mov ecx, dword off_4D4BF4[edx]
	mov dword [dword_4EFC98], edi
	sub ecx, 9
	mov dword [dword_4EFCB0], edi
	mov dword [dword_4EFC9C], ecx
	mov ecx, 203h
	mov byte [byte_4EFCB8], al
	mov dword [dword_4EFCA0], ecx
	mov ecx, dword [dword_4EFC9C]
	mov eax, 203h
	mov dword [dword_4EFCA4], ecx
	mov ecx, dword dword_4D4C00[edx]
	mov dword [dword_4EFCA8], eax
	add ecx, 2
	mov eax, esi
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	cmp edx, 20h
	jnz loc_42F806
	mov eax, 1
	call sub_4211E0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42EDB0 endp

sub_42F9F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_512208]
	mov ecx, 24h
	cmp edx, 1
	jle loc_42FA08
	xor ecx, ecx

loc_42FA08:
	call sub_42FCB0
	mov ebx, 26h
	mov esi, 1Dh
	mov edi, 0D1h
	mov ebp, 0E3h
	mov eax, 7FFFFFFFh
	xor edx, edx
	mov dword [dword_4EFC5C], ebx
	mov dword [dword_4EFC60], esi
	mov dword [dword_4EFC64], edi
	mov dword [dword_4EFC68], ebp
	mov dword [dword_4EFC70], eax
	mov ebx, dword_4EFC4C
	mov esi, 30h

loc_42FA4F:
	imul eax, edx, 26h
	add eax, 40h
	mov dword [dword_4EFC58], esi
	mov dword [dword_4EFC54], eax
	mov eax, ebx
	inc edx
	call sub_42ABF0
	cmp edx, 0Eh
	jl loc_42FA4F
	mov edi, 0FFh
	mov eax, 82h
	mov edx, 1Dh
	mov ebp, 14Eh
	mov dword [dword_4EFC58], esi
	xor ebx, ebx
	mov esi, 0E5h
	mov dword [dword_4EFC54], edi
	mov dword [dword_4EFC5C], eax
	mov dword [dword_4EFC60], edx
	mov dword [dword_4EFC64], ebx
	mov edi, 0FFFFFFFFh
	mov eax, dword_4EFC4C
	mov edx, 1Ch
	mov dword [dword_4EFC68], esi
	mov esi, 0ACh
	mov dword [dword_4EFC70], edi
	call sub_42ABF0
	mov edi, 7FFFFFFFh
	mov dword [dword_4EFC54], ebp
	lea eax, [ecx+9Eh]
	mov dword [dword_4EFC60], edx
	mov dword [dword_4EFC64], ebx
	mov dword [dword_4EFC58], eax
	mov eax, 0AAh
	mov dword [dword_4EFC68], esi
	mov dword [dword_4EFC5C], eax
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC70], edi
	call sub_42ABF0
	lea eax, [ecx+0C2h]
	mov dword [dword_4EFC58], eax
	mov eax, dword_4EFC4C
	mov dword [dword_4EFC54], ebp
	call sub_42ABF0
	mov eax, dword [dword_512AA0]
	add eax, 163h
	mov dword [dword_4EFC98], eax
	lea eax, [ecx+0A6h]
	xor dl, dl
	mov dword [dword_4EFC9C], eax
	mov eax, 1E5h
	mov byte [byte_4EFCB9], dl
	mov dword [dword_4EFCA0], eax
	mov dword [dword_4EFCA8], eax
	lea eax, [ecx+0B2h]
	mov byte [byte_4EFCBA], dl
	mov dword [dword_4EFCAC], eax
	mov eax, dword [dword_4EFC98]
	mov esi, dword [dword_4EFC9C]
	mov dword [dword_4EFCB0], eax
	mov ah, 7Fh
	mov dword [dword_4EFCA4], esi
	mov byte [byte_4EFCB8], ah
	mov al, 0FFh
	mov ebx, dword [dword_4EFCAC]
	mov byte [byte_4EFCBB], al
	mov eax, dword_4EFC90
	mov dword [dword_4EFCB4], ebx
	call sub_42A980
	mov eax, dword [dword_512AA4]
	mov edi, 1E5h
	add eax, 163h
	mov dword [dword_4EFCA0], edi
	mov dword [dword_4EFC98], eax
	lea eax, [ecx+0CAh]
	mov dword [dword_4EFCA8], edi
	mov dword [dword_4EFC9C], eax
	mov edx, eax
	mov dword [dword_4EFCA4], eax
	add ecx, 0D6h
	mov eax, dword [dword_4EFC98]
	mov dword [dword_4EFCAC], ecx
	mov dword [dword_4EFCB0], eax
	mov eax, dword_4EFC90
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	mov eax, 163h
	mov dword [dword_4EFC9C], esi
	mov dword [dword_4EFCA4], esi
	mov dword [dword_4EFCAC], ebx
	mov dword [dword_4EFCB4], ebx
	mov dword [dword_4EFC98], eax
	mov eax, dword [dword_512AA0]
	mov esi, 163h
	add eax, 163h
	mov bl, 0FFh
	mov dword [dword_4EFCA0], eax
	mov dword [dword_4EFCA8], eax
	mov ah, 7Fh
	mov dword [dword_4EFCB0], esi
	mov byte [byte_4EFCB8], ah
	xor al, al
	mov byte [byte_4EFCB9], bl
	mov byte [byte_4EFCBB], al
	mov eax, dword_4EFC90
	mov byte [byte_4EFCBA], bl
	call sub_42A980
	mov eax, dword [dword_512AA4]
	mov dword [dword_4EFC98], esi
	mov dword [dword_4EFC9C], edx
	mov dword [dword_4EFCA4], edx
	mov dword [dword_4EFCAC], ecx
	add eax, esi
	mov dword [dword_4EFCB0], esi
	mov dword [dword_4EFCA0], eax
	mov dword [dword_4EFCA8], eax
	mov eax, dword_4EFC90
	mov dword [dword_4EFCB4], ecx
	call sub_42A980
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42F9F0 endp

sub_42FCB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov edx, 40h
	mov ecx, 30h
	mov ebp, 1B0h
	mov ebx, 240h
	push ebp
	mov dword [dword_4EFC98], edx
	mov dword [dword_4EFC9C], ecx
	push ebx
	mov dword [dword_4EFCA0], ebx
	mov dword [dword_4EFCA4], ecx
	push ecx
	mov dword [dword_4EFCA8], ebx
	mov dword [dword_4EFCAC], ebp
	push edx
	mov dword [dword_4EFCB0], edx
	mov dword [dword_4EFCB4], ebp
	call sub_497714
	mov ah, 3Fh
	mov dl, 10h
	mov byte [byte_4EFCB8], ah
	mov byte [byte_4EFCB9], dl
	mov byte [byte_4EFCBB], ah
	mov dh, 6
	mov eax, dword_4EFC90
	mov byte [byte_4EFCBA], dh
	call sub_42A980
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_42FCB0 endp

sub_4301B0: ;SUBROUTINE
	push ecx
	push edx
	call sub_4307F0
	call sub_478020
	call sub_476250
	call sub_476CA0
	call sub_4642D0
	mov eax, dword_4EFCC8
	call sub_489B70
	call sub_478340
	call sub_421980
	call sub_4972BC
	jmp ExitProcess0
;sub_4301B0 endp

sub_430200: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov ecx, 1E0h
	mov edx, 0A00000h
	mov eax, 3E8h
	mov ebx, 10h
	call sub_49CABC
	mov edx, 280h
	mov dword [dword_51304C], eax
	mov dword [dword_4DAB84], ebx
	mov dword [dword_4DAB7C], edx
	mov dword [dword_4DAB80], ecx
	call sub_49D020
	mov edx, sub_430760
	mov eax, 1
	push sub_430380
	push 218h
	call sub_482270
	cmp dword [dword_4DAB5C], 0
	jz loc_430366
	xor edi, edi
	mov ebp, 1
	mov dword [dword_4DB2EC], edi
	mov dword [dword_4DB208], ebp
	call sub_47F010
	mov eax, 80h
	call sub_483C18
	mov eax, 80h
	xor edx, edx
	mov dword [dword_4DABCC], eax
	mov eax, ebp
	xor ebx, ebx
	call sub_4642F0
	call sub_430780
	mov edx, 2000h
	mov eax, 14h
	call sub_48550C
	call sub_422530
	call sub_408730
	call sub_476DC0
	call sub_4769D0
	mov eax, ebp
	mov ecx, 0FFFFFFFFh
	call sub_464030
	mov ebx, ebp
	push dword_4EFCC8
	xor edx, edx
	mov eax, sub_453840
	call sub_489AE0
	call sub_478040
	mov edx, ebp
	mov eax, ebp
	call sub_428830
	push edi
	call grChromakeyMode
	call sub_49769C
	push 2
	push 0Ah
	call sub_497738
	push edi
	push 2
	call sub_497738
	call sub_433B30
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_430366:
	jmp ExitProcess0
;sub_430200 endp

sub_430380: ;SUBROUTINE
	mov eax, [esp+10h]
	test eax, eax
	jz loc_43038D
	cmp eax, 1
	jnz loc_430395

loc_43038D:
	mov eax, 424D5144h
	ret 18h

loc_430395:
	mov eax, 1
	ret 18h
;sub_430380 endp

sub_430760: ;SUBROUTINE
	cmp edx, 2Ch
	jz loc_43076B
	mov eax, 1
	ret

loc_43076B:
	mov byte [byte_4DB32B], 1
	mov eax, 1
	ret
;sub_430760 endp

sub_430780: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 104h
	mov edx, dword [dword_5134C8]
	push edx
	push aSplatcfg_dat ; "%splatcfg.dat"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+100h]
	mov eax, esp
	call sub_49C628
	test eax, eax
	jz loc_4307CA
	mov ecx, [esp+100h]
	cmp ecx, 40133333h
	jg loc_4307CA
	cmp ecx, 3F800000h
	jge loc_4307D3

loc_4307CA:
	add esp, 104h
	pop edx
	pop ecx
	ret

loc_4307D3:
	mov dword [dword_4D4D20], ecx
	add esp, 104h
	pop edx
	pop ecx
	ret
;sub_430780 endp

sub_4307F0: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 104h
	mov edx, dword [dword_5134C8]
	push edx
	mov eax, dword [dword_4D4D20]
	push aSplatcfg_dat ; "%splatcfg.dat"
	mov [esp+108h], eax
	lea eax, [esp+8]
	push eax
	mov ebx, 4
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+100h]
	mov eax, esp
	call sub_4875B0
	add esp, 104h
	pop edx
	pop ebx
	ret
;sub_4307F0 endp

sub_430840: ;SUBROUTINE
	mov eax, 1
	jmp sub_435500
;sub_430840 endp

sub_430850: ;SUBROUTINE
	xor eax, eax
	jmp sub_435500
;sub_430850 endp

;	Attributes: thunk

sub_430860: ;SUBROUTINE
	jmp sub_4848FC
;sub_430860 endp

sub_430870: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, aCNfs2seGame3ra ; "c:\\nfs2se\\game\\3rash\\platform.c"
	mov ecx, 0B9h
	mov dword [eax], 0AF000h
	xor ebx, ebx
	mov eax, aDynamicRenderi ; "Dynamic rendering buffer"
	mov dword [dword_4DB1D8], edx
	mov edx, 0AF000h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	pop edx
	pop ecx
	pop ebx
	ret
;sub_430870 endp

sub_430B80: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov esi, ebx
	mov ebp, ecx
	mov al, [eax+14h]
	mov [esp+0Ch], al
	mov al, [edx+14h]
	mov [esp+0Dh], al
	mov al, [ebx+14h]
	mov [esp+0Eh], al
	mov al, [ecx+14h]
	mov [esp+0Fh], al
	mov al, [esp+0Ch]
	and al, [esp+0Dh]
	mov ah, [esp+0Eh]
	and ah, al
	mov al, [esp+0Fh]
	and al, ah
	jnz loc_430C0A
	mov al, [esp+0Ch]
	or al, [esp+0Dh]
	or al, [esp+0Eh]
	mov bl, [esp+0Fh]
	or bl, al
	jz loc_430C11
	test ah, ah
	jnz loc_430BE3
	test al, al
	jnz loc_430C1D
	push esi
	push edx
	push edi
	call sub_4983B0

loc_430BE3:
	mov al, [esp+0Ch]
	mov cl, [esp+0Eh]
	and al, cl
	mov ch, [esp+0Fh]
	and al, ch
	jnz loc_430C0A
	mov al, [esp+0Ch]
	or al, cl
	mov ah, ch
	or ah, al
	jnz loc_430C39
	push ebp
	push esi
	push edi
	call sub_4983B0

loc_430C0A:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_430C11:
	push ecx
	push esi
	push edx
	push edi
	call sub_497B24
	jmp loc_430C0A

loc_430C1D:
	mov [esp], edi
	mov [esp+4], edx
	xor ebx, ebx
	lea edx, [esp+0Ch]
	mov bl, al
	mov eax, esp
	mov [esp+8], esi
	call sub_430C70
	jmp loc_430BE3

loc_430C39:
	lea edx, [esp+0Ch]
	mov [esp], edi
	mov [esp+4], esi
	mov [esp+8], ebp
	xor ebx, ebx
	mov [esp+0Dh], cl
	mov bl, ah
	mov eax, esp
	mov [esp+0Eh], ch
	call sub_430C70
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret
;sub_430B80 endp

sub_430C70: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov [esp+100h], bl
	mov ecx, off_4D52C0
	mov edi, dword_4F1E7C
	xor esi, esi
	mov [esp], ecx
	mov [esp+0F8h], esi
	mov ecx, 8
	mov [esp+14h], esi
	mov esi, [eax]
	rep movsd
	mov ecx, 8
	mov edi, dword_4F1E9C
	mov esi, [eax+4]
	rep movsd
	mov ecx, 8
	mov edi, dword_4F1EBC
	mov esi, [eax+8]
	mov ebx, 3
	rep movsd
	xor eax, eax
	mov edi, dword_4F16C4
	mov esi, dword_4F15FC
	mov dword [dword_4F1E90], eax
	mov dword [dword_4F1EB0], eax
	mov dword [dword_4F1ED0], eax
	mov ah, [esp+100h]
	mov [esp+10h], edi
	test ah, 30h
	jz loc_4314B8
	test ah, 10h
	jz loc_43108C
	mov eax, 2
	mov edi, off_4D52C0
	mov [esp+78h], edx
	xor ebp, ebp
	xor ecx, ecx
	mov [esp+0ECh], eax
	mov [esp+4], ebp
	mov [esp+7Ch], edi

loc_430D20:
	mov eax, [esp+0ECh]
	add eax, edx
	mov [esp+44h], eax
	test byte [eax], 10h
	jnz loc_430D71
	lea eax, 0[ebp*4]
	mov edi, [esp+0ECh]
	mov [esp+0D0h], eax
	shl edi, 2
	mov eax, dword_4F16C4
	add edi, off_4D52C0
	add eax, [esp+0D0h]
	mov edi, [edi]
	mov [eax], edi
	mov edi, ebp
	mov eax, [esp+44h]
	add edi, dword_4F15FC
	mov al, [eax]
	inc ebp
	mov [edi], al

loc_430D71:
	mov eax, [esp+0ECh]
	mov al, [edx+eax]
	and eax, 0FFh
	mov edi, [esp+78h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 10h
	jz loc_431033
	mov eax, [esp+0ECh]
	mov edi, off_4D52C0
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+7Ch]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fld dword [dword_4F1E00]
	fld dword [edi+0Ch]
	fsub st0, st1
	fdivrp st2, st0
	fld dword [edi]
	fsub dword [eax]
	fxch st2
	fstp dword [esp+0F0h]
	fxch st1
	fmul dword [esp+0F0h]
	fld dword [edi+4]
	fsub dword [eax+4]
	fmul dword [esp+0F0h]
	fxch st1
	fsubr dword [edi]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFCFC[ecx]
	mov eax, [eax]
	fsubr dword [eax+4]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD00[ecx]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+2Ch], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+24h], eax
	mov eax, [edi+10h]
	mov edi, [edi+10h]
	shr edi, 18h
	and edi, 0FFh
	shr eax, 10h
	mov [esp+18h], edi
	mov edi, [esp+7Ch]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+1Ch], eax
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+30h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+28h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+20h], eax
	mov eax, [esp+18h]
	sub eax, edi
	mov edi, [esp+20h]
	mov [esp+0FCh], eax
	mov eax, [esp+1Ch]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul dword [esp+0F0h]
	mov [esp+0FCh], eax
	mov edi, [esp+24h]
	fild dword [esp+0FCh]
	mov eax, [esp+28h]
	fmul dword [esp+0F0h]
	sub edi, eax
	mov eax, [esp+30h]
	mov [esp+0FCh], edi
	mov edi, [esp+2Ch]
	sub edi, eax
	fild dword [esp+0FCh]
	mov [esp+0FCh], edi
	fmul dword [esp+0F0h]
	fild dword [esp+0FCh]
	fmul dword [esp+0F0h]
	fxch st3
	call __CHP
	fistp dword [esp+0D0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D4h]
	mov eax, [esp+0D0h]
	call __CHP
	mov edi, [esp+18h]
	fistp dword [esp+0D0h]
	sub edi, eax
	mov eax, [esp+0D4h]
	mov [esp+18h], edi
	mov edi, [esp+1Ch]
	call __CHP
	sub edi, eax
	mov eax, [esp+0D0h]
	mov [esp+1Ch], edi
	mov edi, [esp+24h]
	fistp dword [esp+0D0h]
	sub edi, eax
	mov eax, [esp+0D0h]
	mov [esp+24h], edi
	sub [esp+2Ch], eax
	mov edi, [esp+1Ch]
	mov eax, [esp+18h]
	shl edi, 10h
	shl eax, 18h
	or edi, eax
	mov eax, [esp+24h]
	shl eax, 8
	or eax, edi
	mov edi, [esp+2Ch]
	or eax, edi
	mov dword dword_4EFD0C[ecx], eax
	xor eax, eax
	mov edi, dword_4F15FC
	mov dword dword_4EFD04[ecx], eax
	add edi, ebp
	fstp dword flt_4EFD08[ecx]
	mov byte [edi], 10h
	fld dword flt_4EFD00[ecx]
	fcomp dword [dword_4F1DF4]
	fnstsw ax
	sahf
	jnb loc_4324BF
	or byte [edi], 8

loc_430FEA:
	mov edi, dword_4F15FC
	fld dword flt_4EFCFC[ecx]
	add edi, ebp
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_4324DC
	or byte [edi], 1

loc_431009:
	mov edi, [esp+0F8h]
	inc edi
	mov eax, ecx
	mov [esp+0F8h], edi
	mov edi, flt_4EFCFC
	add edi, eax
	lea eax, 0[ebp*4]
	add ecx, 20h
	add eax, dword_4F16C4
	inc ebp
	mov [eax], edi

loc_431033:
	mov eax, [esp+4]
	mov [esp+0ECh], eax
	mov eax, [esp+78h]
	mov edi, [esp+7Ch]
	inc eax
	dec ebx
	mov [esp+78h], eax
	mov eax, [esp+4]
	add edi, 4
	inc eax
	mov [esp+7Ch], edi
	mov [esp+4], eax
	test ebx, ebx
	jg loc_430D20
	cmp ebp, 3
	jl loc_4324F9
	mov edx, dword_4F16C4
	mov ecx, [esp+10h]
	mov ebx, ebp
	lea eax, 0[ebp*4]
	mov [esp], edx
	add ecx, eax
	mov edx, esi
	mov [esp+10h], ecx
	add esi, ebp

loc_43108C:
	test byte [esp+100h], 20h
	jz loc_431491
	mov ecx, [esp+0F8h]
	lea eax, [ebx-1]
	mov [esp+80h], edx
	xor ebp, ebp
	mov [esp+0B8h], eax
	mov [esp+0CCh], ebp
	mov eax, [esp]
	shl ecx, 5
	mov [esp+84h], eax

loc_4310C8:
	mov eax, [esp+0B8h]
	add eax, edx
	mov [esp+48h], eax
	test byte [eax], 20h
	jnz loc_431114
	mov eax, [esp+0B8h]
	mov edi, [esp]
	shl eax, 2
	add eax, edi
	lea edi, 0[ebp*4]
	mov [esp+0D0h], edi
	mov edi, [esp+10h]
	add edi, [esp+0D0h]
	mov eax, [eax]
	mov [edi], eax
	mov eax, ebp
	lea edi, [esi+eax]
	mov eax, [esp+48h]
	inc ebp
	mov al, [eax]
	mov [edi], al

loc_431114:
	mov eax, [esp+0B8h]
	mov al, [edx+eax]
	and eax, 0FFh
	mov edi, [esp+80h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 20h
	jz loc_431424
	mov eax, [esp+0B8h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+84h]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fld dword [edi]
	fld dword [dword_4F1DF8]
	fld dword [edi+0Ch]
	fsub st0, st1
	fxch st2
	fsub dword [eax]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+4]
	fsub dword [eax+4]
	fmul st0, st3
	fxch st1
	fsubr dword [edi]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFCFC[ecx]
	mov eax, [eax]
	fsubr dword [eax+4]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD00[ecx]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E4h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0DCh], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D4h], eax
	mov eax, [esp+84h]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E8h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0E0h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	and eax, 0FFh
	mov [esp+0D8h], eax
	mov eax, [edi+10h]
	shr eax, 18h
	mov edi, [esp+0D0h]
	and eax, 0FFh
	sub edi, eax
	mov eax, [esp+0D4h]
	mov [esp+0FCh], edi
	mov edi, [esp+0D8h]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul st0, st2
	mov [esp+0FCh], eax
	mov edi, [esp+0DCh]
	fild dword [esp+0FCh]
	mov eax, [esp+0E0h]
	fmul st0, st3
	sub edi, eax
	mov eax, [esp+0E8h]
	mov [esp+0FCh], edi
	mov edi, [esp+0E4h]
	sub edi, eax
	fild dword [esp+0FCh]
	mov [esp+0FCh], edi
	fmul st0, st4
	fild dword [esp+0FCh]
	fmulp st5, st0
	fxch st2
	call __CHP
	fistp dword [esp+0D8h]
	call __CHP
	fistp dword [esp+0E0h]
	mov eax, [esp+0D8h]
	call __CHP
	mov edi, [esp+0D0h]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0E0h]
	mov [esp+0D0h], edi
	mov edi, [esp+0D4h]
	fxch st1
	call __CHP
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0D4h], edi
	mov edi, [esp+0DCh]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0DCh], edi
	mov edi, [esp+0E4h]
	sub edi, eax
	mov eax, [esp+0D0h]
	shl eax, 18h
	mov [esp+0E4h], edi
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	mov edi, [esp+0D0h]
	shl eax, 10h
	or edi, eax
	mov eax, [esp+0DCh]
	shl eax, 8
	or eax, edi
	mov edi, [esp+0E4h]
	or eax, edi
	mov dword dword_4EFD0C[ecx], eax
	mov dword dword_4EFD04[ecx], 3F800000h
	lea edi, [esi+ebp]
	fstp dword flt_4EFD08[ecx]
	mov byte [edi], 10h
	fld dword flt_4EFD00[ecx]
	fcomp dword [dword_4F1DF4]
	fnstsw ax
	sahf
	jnb loc_43250B
	or byte [edi], 8

loc_4313D0:
	fld dword flt_4EFCFC[ecx]
	lea edi, [esi+ebp]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_432528
	or byte [edi], 1

loc_4313EB:
	mov edi, [esp+0F8h]
	inc edi
	mov eax, ecx
	mov [esp+0F8h], edi
	mov edi, flt_4EFCFC
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ebp*4]
	mov edi, [esp+10h]
	add ecx, 20h
	add eax, edi
	mov edi, [esp+0D0h]
	inc ebp
	mov [eax], edi

loc_431424:
	mov eax, [esp+0CCh]
	mov [esp+0B8h], eax
	mov eax, [esp+80h]
	mov edi, [esp+84h]
	inc eax
	dec ebx
	mov [esp+80h], eax
	mov eax, [esp+0CCh]
	add edi, 4
	inc eax
	mov [esp+84h], edi
	mov [esp+0CCh], eax
	test ebx, ebx
	jg loc_4310C8
	cmp ebp, 3
	jl loc_4324F9
	mov eax, [esp+10h]
	mov ecx, [esp+10h]
	mov ebx, ebp
	mov [esp], eax
	lea eax, 0[ebp*4]
	mov edx, esi
	add ecx, eax
	add esi, ebp
	mov [esp+10h], ecx

loc_431491:
	dec ebp
	lea ecx, [edx+ebp]
	mov al, [ecx]
	mov [esp+100h], al

loc_43149E:
	mov al, [ecx-1]
	mov ah, [esp+100h]
	dec ebp
	or ah, al
	dec ecx
	mov [esp+100h], ah
	test ebp, ebp
	jg loc_43149E
	nop

loc_4314B8:
	mov cl, [esp+100h]
	test cl, 0Ch
	jz loc_431CA0
	test cl, 4
	jz loc_43189E
	mov ecx, [esp+0F8h]
	lea eax, [ebx-1]
	mov [esp+88h], edx
	xor ebp, ebp
	mov [esp+0B4h], eax
	mov [esp+0C8h], ebp
	mov eax, [esp]
	shl ecx, 5
	mov [esp+8Ch], eax

loc_4314FF:
	mov eax, [esp+0B4h]
	add eax, edx
	mov [esp+4Ch], eax
	test byte [eax], 4
	jnz loc_43154D
	mov eax, [esp+0B4h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ebp*4]
	mov edi, [esp+10h]
	add edi, eax
	mov eax, [esp+0D0h]
	mov eax, [eax]
	mov [edi], eax
	mov eax, ebp
	lea edi, [esi+eax]
	mov eax, [esp+4Ch]
	inc ebp
	mov al, [eax]
	mov [edi], al

loc_43154D:
	mov eax, [esp+0B4h]
	add eax, edx
	mov [esp+50h], eax
	mov edi, [esp+50h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+88h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 4
	jz loc_431831
	mov eax, [esp+0B4h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+8Ch]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi+4]
	fsub dword [eax+4]
	fld dword [edi]
	fld dword [dword_4F1DEC]
	fld dword [edi+4]
	fsub st0, st1
	fxch st2
	fsub dword [eax]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fxch st1
	fsubr dword [edi]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFCFC[ecx]
	mov eax, [eax]
	fsubr dword [eax+0Ch]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD08[ecx]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E4h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0DCh], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D4h], eax
	mov eax, [esp+8Ch]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E8h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0E0h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D8h], eax
	mov eax, [esp+0D0h]
	sub eax, edi
	mov edi, [esp+0D8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0D4h]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul st0, st2
	mov [esp+0FCh], eax
	mov edi, [esp+0E0h]
	fild dword [esp+0FCh]
	mov eax, [esp+0DCh]
	fmul st0, st3
	sub eax, edi
	mov edi, [esp+0E8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0E4h]
	sub eax, edi
	fild dword [esp+0FCh]
	mov [esp+0FCh], eax
	fmul st0, st4
	fild dword [esp+0FCh]
	fmulp st5, st0
	fxch st2
	call __CHP
	fistp dword [esp+0D8h]
	call __CHP
	fistp dword [esp+0E0h]
	mov edi, [esp+0D0h]
	call __CHP
	mov eax, [esp+0D8h]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0E0h]
	mov [esp+0D0h], edi
	mov edi, [esp+0D4h]
	fxch st1
	call __CHP
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0D4h], edi
	mov edi, [esp+0DCh]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0DCh], edi
	sub [esp+0E4h], eax
	mov edi, [esp+0D4h]
	mov eax, [esp+0D0h]
	shl edi, 10h
	shl eax, 18h
	or edi, eax
	mov eax, [esp+0DCh]
	shl eax, 8
	or eax, edi
	mov edi, [esp+0E4h]
	or eax, edi
	mov dword dword_4EFD0C[ecx], eax
	mov edi, [esp+50h]
	fstp dword flt_4EFD00[ecx]
	mov al, [edi]
	and al, 0F0h
	lea edi, [esi+ebp]
	or al, 4
	mov [edi], al
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_432545
	or byte [edi], 1

loc_4317F8:
	mov edi, [esp+0F8h]
	inc edi
	mov eax, ecx
	mov [esp+0F8h], edi
	mov edi, flt_4EFCFC
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ebp*4]
	mov edi, [esp+10h]
	add ecx, 20h
	add eax, edi
	mov edi, [esp+0D0h]
	inc ebp
	mov [eax], edi

loc_431831:
	mov eax, [esp+0C8h]
	mov [esp+0B4h], eax
	mov eax, [esp+88h]
	mov edi, [esp+8Ch]
	inc eax
	dec ebx
	mov [esp+88h], eax
	mov eax, [esp+0C8h]
	add edi, 4
	inc eax
	mov [esp+8Ch], edi
	mov [esp+0C8h], eax
	test ebx, ebx
	jg loc_4314FF
	cmp ebp, 3
	jl loc_4324F9
	mov eax, [esp+10h]
	mov ecx, [esp+10h]
	mov ebx, ebp
	mov [esp], eax
	lea eax, 0[ebp*4]
	mov edx, esi
	add ecx, eax
	add esi, ebp
	mov [esp+10h], ecx

loc_43189E:
	test byte [esp+100h], 8
	jz loc_431C79
	mov ecx, [esp+0F8h]
	lea eax, [ebx-1]
	mov [esp+90h], edx
	xor ebp, ebp
	mov [esp+0B0h], eax
	mov [esp+0C4h], ebp
	mov eax, [esp]
	shl ecx, 5
	mov [esp+94h], eax

loc_4318DA:
	mov eax, [esp+0B0h]
	add eax, edx
	mov [esp+54h], eax
	test byte [eax], 8
	jnz loc_431928
	mov eax, [esp+0B0h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ebp*4]
	mov edi, [esp+10h]
	add edi, eax
	mov eax, [esp+0D0h]
	mov eax, [eax]
	mov [edi], eax
	mov eax, ebp
	lea edi, [esi+eax]
	mov eax, [esp+54h]
	inc ebp
	mov al, [eax]
	mov [edi], al

loc_431928:
	mov eax, [esp+0B0h]
	add eax, edx
	mov [esp+58h], eax
	mov edi, [esp+58h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+90h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 8
	jz loc_431C0C
	mov eax, [esp+0B0h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+94h]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi+4]
	fsub dword [eax+4]
	fld dword [edi]
	fld dword [dword_4F1DF4]
	fld dword [edi+4]
	fsub st0, st1
	fxch st2
	fsub dword [eax]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fxch st1
	fsubr dword [edi]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFCFC[ecx]
	mov eax, [eax]
	fsubr dword [eax+0Ch]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD08[ecx]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E4h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0DCh], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D4h], eax
	mov eax, [esp+94h]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E8h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0E0h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D8h], eax
	mov eax, [esp+0D0h]
	sub eax, edi
	mov edi, [esp+0D8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0D4h]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul st0, st2
	mov [esp+0FCh], eax
	mov edi, [esp+0E0h]
	fild dword [esp+0FCh]
	mov eax, [esp+0DCh]
	fmul st0, st3
	sub eax, edi
	mov edi, [esp+0E8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0E4h]
	sub eax, edi
	fild dword [esp+0FCh]
	mov [esp+0FCh], eax
	fmul st0, st4
	fild dword [esp+0FCh]
	fmulp st5, st0
	fxch st2
	call __CHP
	fistp dword [esp+0D8h]
	call __CHP
	fistp dword [esp+0E0h]
	mov edi, [esp+0D0h]
	call __CHP
	mov eax, [esp+0D8h]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0E0h]
	mov [esp+0D0h], edi
	mov edi, [esp+0D4h]
	fxch st1
	call __CHP
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0D4h], edi
	mov edi, [esp+0DCh]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0DCh], edi
	sub [esp+0E4h], eax
	mov edi, [esp+0D4h]
	mov eax, [esp+0D0h]
	shl edi, 10h
	shl eax, 18h
	or eax, edi
	mov edi, [esp+0DCh]
	shl edi, 8
	or eax, edi
	mov edi, [esp+0E4h]
	or eax, edi
	mov dword dword_4EFD0C[ecx], eax
	mov edi, [esp+58h]
	fstp dword flt_4EFD00[ecx]
	mov al, [edi]
	and al, 0F0h
	lea edi, [esi+ebp]
	or al, 8
	mov [edi], al
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_432562
	or byte [edi], 1

loc_431BD3:
	mov edi, [esp+0F8h]
	inc edi
	mov eax, ecx
	mov [esp+0F8h], edi
	mov edi, flt_4EFCFC
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ebp*4]
	mov edi, [esp+10h]
	add ecx, 20h
	add eax, edi
	mov edi, [esp+0D0h]
	inc ebp
	mov [eax], edi

loc_431C0C:
	mov eax, [esp+0C4h]
	mov [esp+0B0h], eax
	mov eax, [esp+90h]
	mov edi, [esp+94h]
	inc eax
	dec ebx
	mov [esp+90h], eax
	mov eax, [esp+0C4h]
	add edi, 4
	inc eax
	mov [esp+94h], edi
	mov [esp+0C4h], eax
	test ebx, ebx
	jg loc_4318DA
	cmp ebp, 3
	jl loc_4324F9
	mov eax, [esp+10h]
	mov ecx, [esp+10h]
	mov ebx, ebp
	mov [esp], eax
	lea eax, 0[ebp*4]
	mov edx, esi
	add ecx, eax
	add esi, ebp
	mov [esp+10h], ecx

loc_431C79:
	dec ebp
	lea ecx, [edx+ebp]
	mov al, [ecx]
	mov [esp+100h], al

loc_431C86:
	mov al, [ecx-1]
	mov ah, [esp+100h]
	dec ebp
	or ah, al
	dec ecx
	mov [esp+100h], ah
	test ebp, ebp
	jg loc_431C86
	nop

loc_431CA0:
	mov cl, [esp+100h]
	test cl, 3
	jz loc_432440
	test cl, 1
	jz loc_432079
	mov ebp, [esp+0F8h]
	lea eax, [ebx-1]
	mov [esp+98h], edx
	xor ecx, ecx
	mov [esp+0ACh], eax
	mov [esp+0C0h], ecx
	mov eax, [esp]
	shl ebp, 5
	mov [esp+9Ch], eax

loc_431CE7:
	mov eax, [esp+0ACh]
	add eax, edx
	mov [esp+5Ch], eax
	test byte [eax], 1
	jnz loc_431D35
	mov eax, [esp+0ACh]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ecx*4]
	mov edi, [esp+10h]
	add edi, eax
	mov eax, [esp+0D0h]
	mov eax, [eax]
	mov [edi], eax
	mov eax, ecx
	lea edi, [esi+eax]
	mov eax, [esp+5Ch]
	inc ecx
	mov al, [eax]
	mov [edi], al

loc_431D35:
	mov eax, [esp+0ACh]
	add eax, edx
	mov [esp+60h], eax
	mov edi, [esp+60h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+98h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 1
	jz loc_43200C
	mov eax, [esp+0ACh]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+9Ch]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi]
	fsub dword [eax]
	fld dword [edi+4]
	fld dword [dword_4F1DF0]
	fld dword [edi]
	fsub st0, st1
	fxch st2
	fsub dword [eax+4]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fxch st1
	fsubr dword [edi+4]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFD00[ebp]
	mov eax, [eax]
	fsubr dword [eax+0Ch]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD08[ebp]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E4h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0DCh], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D4h], eax
	mov eax, [esp+9Ch]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E8h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0E0h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D8h], eax
	mov eax, [esp+0D0h]
	sub eax, edi
	mov edi, [esp+0D8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0D4h]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul st0, st2
	mov [esp+0FCh], eax
	mov edi, [esp+0E0h]
	fild dword [esp+0FCh]
	mov eax, [esp+0DCh]
	fmul st0, st3
	sub eax, edi
	mov edi, [esp+0E8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0E4h]
	sub eax, edi
	fild dword [esp+0FCh]
	mov [esp+0FCh], eax
	fmul st0, st4
	fild dword [esp+0FCh]
	fmulp st5, st0
	fxch st2
	call __CHP
	fistp dword [esp+0D8h]
	call __CHP
	fistp dword [esp+0E0h]
	mov edi, [esp+0D0h]
	call __CHP
	mov eax, [esp+0D8h]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0E0h]
	mov [esp+0D0h], edi
	mov edi, [esp+0D4h]
	fxch st1
	call __CHP
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0D4h], edi
	mov edi, [esp+0DCh]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0DCh], edi
	mov edi, [esp+0E4h]
	sub edi, eax
	mov eax, [esp+0D4h]
	mov [esp+0E4h], edi
	mov edi, [esp+0D0h]
	shl eax, 10h
	shl edi, 18h
	or eax, edi
	mov edi, [esp+0DCh]
	shl edi, 8
	or edi, eax
	mov eax, [esp+0E4h]
	or edi, eax
	mov dword dword_4EFD0C[ebp], edi
	mov edi, [esp+60h]
	fstp dword flt_4EFCFC[ebp]
	mov al, [edi]
	and al, 0FCh
	lea edi, [esi+ecx]
	or al, 1
	mov [edi], al
	mov edi, [esp+0F8h]
	mov [esp+64h], ebp
	inc edi
	mov eax, flt_4EFCFC
	mov [esp+0F8h], edi
	add eax, [esp+64h]
	lea edi, 0[ecx*4]
	mov [esp+0D0h], edi
	mov edi, [esp+10h]
	add edi, [esp+0D0h]
	add ebp, 20h
	inc ecx
	mov [edi], eax

loc_43200C:
	mov eax, [esp+0C0h]
	mov [esp+0ACh], eax
	mov eax, [esp+98h]
	mov edi, [esp+9Ch]
	inc eax
	dec ebx
	mov [esp+98h], eax
	mov eax, [esp+0C0h]
	add edi, 4
	inc eax
	mov [esp+9Ch], edi
	mov [esp+0C0h], eax
	test ebx, ebx
	jg loc_431CE7
	cmp ecx, 3
	jl loc_4324F9
	mov eax, [esp+10h]
	mov edi, [esp+10h]
	mov ebx, ecx
	mov [esp], eax
	lea eax, 0[ecx*4]
	mov edx, esi
	add edi, eax
	add esi, ecx
	mov [esp+10h], edi

loc_432079:
	test byte [esp+100h], 2
	jz loc_432440
	mov ebp, [esp+0F8h]
	lea eax, [ebx-1]
	mov [esp+0A0h], edx
	xor ecx, ecx
	mov [esp+0A8h], eax
	mov [esp+0BCh], ecx
	mov eax, [esp]
	shl ebp, 5
	mov [esp+0A4h], eax

loc_4320B5:
	mov eax, [esp+0A8h]
	add eax, edx
	mov [esp+68h], eax
	test byte [eax], 2
	jnz loc_4320FF
	mov eax, [esp+0A8h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov [esp+0D0h], edi
	lea eax, 0[ecx*4]
	add eax, [esp+10h]
	mov edi, [esp+0D0h]
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+68h]
	mov edi, ecx
	mov al, [eax]
	inc ecx
	mov [edi+esi], al

loc_4320FF:
	mov eax, [esp+0A8h]
	add eax, edx
	mov [esp+6Ch], eax
	mov edi, [esp+6Ch]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0A0h]
	mov [esp+0D4h], eax
	xor eax, eax
	mov al, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	xor eax, [esp+0D0h]
	test al, 2
	jz loc_4323E8
	mov eax, [esp+0A8h]
	mov edi, [esp]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0D0h], eax
	mov eax, [esp+0A4h]
	mov [esp+0D4h], edi
	mov edi, [esp+0D0h]
	mov eax, [eax]
	fld dword [edi]
	fsub dword [eax]
	fld dword [edi+4]
	fld dword [dword_4F1DFC]
	fld dword [edi]
	fsub st0, st1
	fxch st2
	fsub dword [eax+4]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fxch st1
	fsubr dword [edi+4]
	mov eax, [esp+0D4h]
	fstp dword flt_4EFD00[ebp]
	mov eax, [eax]
	fsubr dword [eax+0Ch]
	mov edi, [esp+0D4h]
	fstp dword flt_4EFD08[ebp]
	mov edi, [edi]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E4h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0DCh], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D4h], eax
	mov eax, [esp+0A4h]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [edi+10h]
	and eax, 0FFh
	mov [esp+0E8h], eax
	mov eax, [edi+10h]
	shr eax, 8
	and eax, 0FFh
	mov [esp+0E0h], eax
	mov eax, [edi+10h]
	shr eax, 10h
	mov edi, [edi+10h]
	shr edi, 18h
	and eax, 0FFh
	and edi, 0FFh
	mov [esp+0D8h], eax
	mov eax, [esp+0D0h]
	sub eax, edi
	mov edi, [esp+0D8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0D4h]
	fild dword [esp+0FCh]
	sub eax, edi
	fmul st0, st2
	mov [esp+0FCh], eax
	mov edi, [esp+0E0h]
	fild dword [esp+0FCh]
	mov eax, [esp+0DCh]
	fmul st0, st3
	sub eax, edi
	mov edi, [esp+0E8h]
	mov [esp+0FCh], eax
	mov eax, [esp+0E4h]
	sub eax, edi
	fild dword [esp+0FCh]
	mov [esp+0FCh], eax
	fmul st0, st4
	fild dword [esp+0FCh]
	fmulp st5, st0
	fxch st2
	call __CHP
	fistp dword [esp+0D8h]
	call __CHP
	fistp dword [esp+0E0h]
	mov edi, [esp+0D0h]
	call __CHP
	mov eax, [esp+0D8h]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0E0h]
	mov [esp+0D0h], edi
	mov edi, [esp+0D4h]
	fxch st1
	call __CHP
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0D4h], edi
	mov edi, [esp+0DCh]
	fistp dword [esp+0D8h]
	sub edi, eax
	mov eax, [esp+0D8h]
	mov [esp+0DCh], edi
	mov edi, [esp+0E4h]
	sub edi, eax
	mov eax, [esp+0D0h]
	shl eax, 18h
	mov [esp+0E4h], edi
	mov [esp+0D0h], eax
	mov eax, [esp+0D4h]
	mov edi, [esp+0D0h]
	shl eax, 10h
	or edi, eax
	mov eax, [esp+0DCh]
	shl eax, 8
	or eax, edi
	mov edi, [esp+0E4h]
	or eax, edi
	mov dword dword_4EFD0C[ebp], eax
	mov edi, [esp+6Ch]
	fstp dword flt_4EFCFC[ebp]
	mov al, [edi]
	and al, 0FCh
	lea edi, [esi+ecx]
	or al, 2
	mov [esp+70h], ebp
	mov [edi], al
	mov eax, [esp+0F8h]
	inc eax
	mov edi, [esp+70h]
	mov [esp+0F8h], eax
	mov eax, flt_4EFCFC
	add eax, edi
	mov edi, [esp+10h]
	mov [esp+0D0h], eax
	lea eax, 0[ecx*4]
	add ebp, 20h
	add eax, edi
	mov edi, [esp+0D0h]
	inc ecx
	mov [eax], edi

loc_4323E8:
	mov eax, [esp+0BCh]
	mov [esp+0A8h], eax
	mov eax, [esp+0A0h]
	mov edi, [esp+0A4h]
	inc eax
	dec ebx
	mov [esp+0A0h], eax
	mov eax, [esp+0BCh]
	add edi, 4
	inc eax
	mov [esp+0A4h], edi
	mov [esp+0BCh], eax
	test ebx, ebx
	jg loc_4320B5
	cmp ecx, 3
	jl loc_4324F9
	mov eax, [esp+10h]
	mov ebx, ecx
	mov [esp], eax

loc_432440:
	xor esi, esi
	test ebx, ebx
	jle loc_43246C
	mov edx, [esp]

loc_432449:
	mov ecx, [edx]
	fld1
	fld dword [ecx+18h]
	fxch st1
	fdiv dword [ecx+0Ch]
	fxch st1
	fmul st0, st1
	fstp dword [ecx+18h]
	mov ecx, [edx]
	fmul dword [ecx+1Ch]
	add edx, 4
	inc esi
	fstp dword [ecx+1Ch]
	cmp esi, ebx
	jl loc_432449

loc_43246C:
	dec ebx
	mov edx, [esp]
	lea eax, 0[ebx*4]
	mov ecx, [esp]
	dec ebx
	mov ebp, [esp]
	lea esi, 0[ebx*4]
	add eax, edx
	add esi, ecx
	mov ebp, [ebp+0]
	mov edx, [eax]
	mov edi, [esi]

loc_432490:
	push edx
	mov eax, [esp+18h]
	push edi
	sub esi, 4
	inc eax
	push ebp
	dec ebx
	mov [esp+20h], eax
	call sub_4983B0
	mov edx, edi
	mov edi, [esi]
	test ebx, ebx
	jg loc_432490
	mov ebx, [esp+14h]
	mov eax, ebx
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4324BF:
	fld dword flt_4EFD00[ecx]
	fcomp dword [dword_4F1DEC]
	fnstsw ax
	sahf
	jbe loc_430FEA
	or byte [edi], 4
	jmp loc_430FEA

loc_4324DC:
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_431009
	or byte [edi], 2
	jmp loc_431009

loc_4324F9:
	mov ebx, 0FFFFFFFFh
	mov eax, ebx
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_43250B:
	fld dword flt_4EFD00[ecx]
	fcomp dword [dword_4F1DEC]
	fnstsw ax
	sahf
	jbe loc_4313D0
	or byte [edi], 4
	jmp loc_4313D0

loc_432528:
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_4313EB
	or byte [edi], 2
	jmp loc_4313EB

loc_432545:
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_4317F8
	or byte [edi], 2
	jmp loc_4317F8

loc_432562:
	fld dword flt_4EFCFC[ecx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_431BD3
	or byte [edi], 2
	jmp loc_431BD3
;sub_430C70 endp

sub_432580: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov esi, ebx
	mov ebp, ecx
	mov al, [eax+14h]
	mov [esp+0Ch], al
	mov al, [edx+14h]
	mov [esp+0Dh], al
	mov al, [ebx+14h]
	mov [esp+0Eh], al
	mov al, [ecx+14h]
	mov [esp+0Fh], al
	mov al, [esp+0Ch]
	and al, [esp+0Dh]
	mov ah, [esp+0Eh]
	and ah, al
	mov al, [esp+0Fh]
	and al, ah
	jnz loc_43260A
	mov al, [esp+0Ch]
	or al, [esp+0Dh]
	or al, [esp+0Eh]
	mov bl, [esp+0Fh]
	or bl, al
	jz loc_432611
	test ah, ah
	jnz loc_4325E3
	test al, al
	jnz loc_43261D
	push esi
	push edx
	push edi
	call sub_4983B0

loc_4325E3:
	mov al, [esp+0Ch]
	mov cl, [esp+0Eh]
	and al, cl
	mov ch, [esp+0Fh]
	and al, ch
	jnz loc_43260A
	mov al, [esp+0Ch]
	or al, cl
	mov ah, ch
	or ah, al
	jnz loc_432639
	push ebp
	push esi
	push edi
	call sub_4983B0

loc_43260A:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_432611:
	push ecx
	push esi
	push edx
	push edi
	call sub_497B24
	jmp loc_43260A

loc_43261D:
	mov [esp], edi
	mov [esp+4], edx
	xor ebx, ebx
	lea edx, [esp+0Ch]
	mov bl, al
	mov eax, esp
	mov [esp+8], esi
	call sub_4326E0
	jmp loc_4325E3

loc_432639:
	lea edx, [esp+0Ch]
	mov [esp], edi
	mov [esp+4], esi
	mov [esp+8], ebp
	xor ebx, ebx
	mov [esp+0Dh], cl
	mov bl, ah
	mov eax, esp
	mov [esp+0Eh], ch
	call sub_4326E0
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret
;sub_432580 endp

sub_432670: ;SUBROUTINE
	push ecx
	sub esp, 10h
	mov ecx, eax
	mov al, [eax+14h]
	mov [esp+0Ch], al
	mov al, [edx+14h]
	mov [esp+0Dh], al
	mov al, [ebx+14h]
	mov [esp+0Eh], al
	mov al, [esp+0Ch]
	and al, [esp+0Dh]
	and al, [esp+0Eh]
	jnz loc_4326B0
	mov al, [esp+0Ch]
	or al, [esp+0Dh]
	or al, [esp+0Eh]
	jnz loc_4326B5
	push ebx
	push edx
	push ecx
	call sub_4983B0

loc_4326B0:
	add esp, 10h
	pop ecx
	ret

loc_4326B5:
	mov [esp+4], edx
	mov [esp+8], ebx
	xor ebx, ebx
	lea edx, [esp+0Ch]
	mov bl, al
	mov eax, esp
	mov [esp], ecx
	call sub_4326E0
	add esp, 10h
	pop ecx
	ret
;sub_432670 endp

sub_4326E0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0D8h
	mov [esp+0D4h], bl
	xor esi, esi
	mov ecx, off_4D52B4
	mov [esp+14h], esi
	mov [esp+0C8h], esi
	mov esi, [eax]
	mov [esp+0B4h], ecx
	mov ecx, [esi+10h]
	and ecx, 0FF000000h
	mov edi, dword_4F1E1C
	mov [esp+1Ch], ecx
	mov ecx, 8
	rep movsd
	mov ecx, 8
	mov edi, dword_4F1E3C
	mov esi, [eax+4]
	rep movsd
	mov ecx, 8
	mov edi, dword_4F1E5C
	mov esi, [eax+8]
	xor eax, eax
	rep movsd
	mov dword [dword_4F1E30], eax
	mov dword [dword_4F1E50], eax
	mov dword [dword_4F1E70], eax
	mov eax, dword [off_4D52B4]
	fld dword [eax+0Ch]
	fmul dword [eax+18h]
	fld dword [eax+0Ch]
	fmul dword [eax+1Ch]
	fxch st1
	fstp dword [eax+18h]
	fstp dword [eax+1Ch]
	mov eax, dword [off_4D52B8]
	fld dword [eax+0Ch]
	fmul dword [eax+18h]
	fld dword [eax+0Ch]
	fmul dword [eax+1Ch]
	fxch st1
	fstp dword [eax+18h]
	fstp dword [eax+1Ch]
	mov eax, dword [off_4D52BC]
	fld dword [eax+0Ch]
	fmul dword [eax+18h]
	fld dword [eax+0Ch]
	fmul dword [eax+1Ch]
	mov ebx, 3
	mov [esp], edx
	mov esi, dword_4F16C4
	fxch st1
	fstp dword [eax+18h]
	fstp dword [eax+1Ch]
	mov ah, [esp+0D4h]
	mov ecx, dword_4F15FC
	test ah, 30h
	jz loc_432D14
	test ah, 10h
	jz loc_432A54
	mov edi, 2
	mov [esp+58h], edx
	xor ebp, ebp
	mov edx, off_4D52B4
	mov [esp+4], edi
	mov [esp+0B8h], ebp
	mov [esp+5Ch], edx
	xor edx, edx

loc_4327EB:
	mov eax, [esp]
	mov edi, [esp+4]
	add eax, edi
	mov [esp+30h], eax
	test byte [eax], 10h
	jnz loc_432835
	lea eax, 0[ebp*4]
	shl edi, 2
	mov [esp+0B0h], eax
	mov eax, dword_4F16C4
	add edi, off_4D52B4
	add eax, [esp+0B0h]
	mov edi, [edi]
	mov [eax], edi
	mov edi, ebp
	mov eax, [esp+30h]
	add edi, dword_4F15FC
	mov al, [eax]
	inc ebp
	mov [edi], al

loc_432835:
	mov edi, [esp]
	add edi, [esp+4]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+58h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 10h
	jz loc_4329F8
	mov eax, [esp+4]
	mov edi, off_4D52B4
	shl eax, 2
	add edi, eax
	mov [esp+0B0h], edi
	mov eax, [edi]
	mov edi, [esp+5Ch]
	mov edi, [edi]
	fld dword [eax+0Ch]
	fsub dword [edi+0Ch]
	fld dword [dword_4F1E00]
	fld dword [eax+0Ch]
	fsub st0, st1
	fdivrp st2, st0
	fld dword [eax]
	fsub dword [edi]
	fxch st2
	fstp dword [esp+8]
	fxch st1
	fmul dword [esp+8]
	fld dword [eax+4]
	fsub dword [edi+4]
	fmul dword [esp+8]
	fld dword [eax+1Ch]
	fld dword [eax+18h]
	fsub dword [edi+18h]
	fxch st1
	fsub dword [edi+1Ch]
	fxch st3
	fsubr dword [eax]
	mov edi, [esp+0B0h]
	fstp dword flt_4EFCFC[edx]
	mov edi, [edi]
	fmul dword [esp+8]
	fxch st1
	fsubr dword [edi+4]
	mov edi, [esp+0B0h]
	fstp dword flt_4EFD00[edx]
	mov edi, [edi]
	fxch st1
	fmul dword [esp+8]
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0B0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0B0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+5Ch]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+18h], eax
	mov eax, [edi+10h]
	mov edi, [esp+18h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmul dword [esp+8]
	mov [esp+0CCh], eax
	mov edi, [esp+18h]
	call __CHP
	fistp dword [esp+0B0h]
	sub edi, [esp+0B0h]
	mov eax, [esp+1Ch]
	mov [esp+18h], edi
	shl edi, 10h
	or eax, edi
	mov edi, [esp+18h]
	shl edi, 8
	or edi, eax
	mov eax, [esp+18h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	xor edi, edi
	mov dword dword_4EFD04[edx], edi
	mov edi, dword_4F15FC
	add edi, ebp
	fstp dword flt_4EFD08[edx]
	mov byte [edi], 10h
	fld dword flt_4EFD00[edx]
	fcomp dword [dword_4F1DF4]
	fnstsw ax
	sahf
	jnb loc_43384C
	or byte [edi], 8

loc_4329B4:
	mov edi, dword_4F15FC
	fld dword flt_4EFCFC[edx]
	add edi, ebp
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_433869
	or byte [edi], 1

loc_4329D3:
	mov eax, [esp+14h]
	inc eax
	mov edi, edx
	mov [esp+14h], eax
	mov eax, flt_4EFCFC
	add eax, edi
	lea edi, 0[ebp*4]
	add edx, 20h
	add edi, dword_4F16C4
	inc ebp
	mov [edi], eax

loc_4329F8:
	mov eax, [esp+0B8h]
	mov edi, [esp+58h]
	dec ebx
	mov [esp+4], eax
	inc edi
	mov eax, [esp+5Ch]
	mov [esp+58h], edi
	mov edi, [esp+0B8h]
	add eax, 4
	inc edi
	mov [esp+5Ch], eax
	mov [esp+0B8h], edi
	test ebx, ebx
	jg loc_4327EB
	cmp ebp, 3
	jl loc_433886
	mov eax, dword_4F16C4
	mov ebx, ebp
	mov [esp+0B4h], eax
	lea eax, 0[ebp*4]
	mov [esp], ecx
	add esi, eax
	add ecx, ebp

loc_432A54:
	test byte [esp+0D4h], 20h
	jz loc_432CEA
	mov edx, [esp+14h]
	lea eax, [ebx-1]
	xor ebp, ebp
	mov [esp+98h], eax
	mov eax, [esp]
	mov [esp+0ACh], ebp
	mov [esp+60h], eax
	mov eax, [esp+0B4h]
	shl edx, 5
	mov [esp+64h], eax

loc_432A8E:
	mov eax, [esp]
	mov edi, [esp+98h]
	add eax, edi
	mov [esp+24h], eax
	test byte [eax], 20h
	jnz loc_432AC8
	mov eax, [esp+0B4h]
	shl edi, 2
	add edi, eax
	lea eax, 0[ebp*4]
	add eax, esi
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+24h]
	mov edi, ebp
	mov al, [eax]
	inc ebp
	mov [ecx+edi], al

loc_432AC8:
	mov edi, [esp]
	add edi, [esp+98h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+60h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 20h
	jz loc_432C90
	mov eax, [esp+98h]
	mov edi, [esp+0B4h]
	shl eax, 2
	add edi, eax
	mov [esp+0D0h], edi
	mov eax, [edi]
	mov edi, [esp+64h]
	mov edi, [edi]
	fld dword [eax+0Ch]
	fsub dword [edi+0Ch]
	fld dword [eax]
	fld dword [dword_4F1DF8]
	fld dword [eax+0Ch]
	fsub st0, st1
	fxch st2
	fsub dword [edi]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [eax+4]
	fsub dword [edi+4]
	fmul st0, st3
	fld dword [eax+1Ch]
	fld dword [eax+18h]
	fsub dword [edi+18h]
	fxch st1
	fsub dword [edi+1Ch]
	fxch st3
	fsubr dword [eax]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFCFC[edx]
	mov edi, [edi]
	fmul st0, st4
	fxch st1
	fsubr dword [edi+4]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD00[edx]
	mov edi, [edi]
	fxch st1
	fmul st0, st3
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+64h]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+0B0h], eax
	mov eax, [edi+10h]
	mov edi, [esp+0B0h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmulp st2, st0
	mov [esp+0CCh], eax
	mov edi, [esp+0B0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D0h]
	sub edi, [esp+0D0h]
	mov eax, [esp+1Ch]
	mov [esp+0B0h], edi
	shl edi, 10h
	or eax, edi
	mov edi, [esp+0B0h]
	shl edi, 8
	or edi, eax
	mov eax, [esp+0B0h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	mov dword dword_4EFD04[edx], 3F800000h
	lea edi, [ecx+ebp]
	fstp dword flt_4EFD08[edx]
	mov byte [edi], 10h
	fld dword flt_4EFD00[edx]
	fcomp dword [dword_4F1DF4]
	fnstsw ax
	sahf
	jnb loc_433898
	or byte [edi], 8

loc_432C55:
	fld dword flt_4EFCFC[edx]
	lea edi, [ecx+ebp]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_4338B5
	or byte [edi], 1

loc_432C70:
	mov eax, [esp+14h]
	mov edi, edx
	inc eax
	add edx, 20h
	mov [esp+14h], eax
	lea eax, 0[ebp*4]
	add edi, flt_4EFCFC
	add eax, esi
	inc ebp
	mov [eax], edi

loc_432C90:
	mov eax, [esp+0ACh]
	mov edi, [esp+60h]
	dec ebx
	mov [esp+98h], eax
	inc edi
	mov eax, [esp+64h]
	mov [esp+60h], edi
	mov edi, [esp+0ACh]
	add eax, 4
	inc edi
	mov [esp+64h], eax
	mov [esp+0ACh], edi
	test ebx, ebx
	jg loc_432A8E
	cmp ebp, 3
	jl loc_433886
	mov ebx, ebp
	mov [esp+0B4h], esi
	lea eax, 0[ebp*4]
	mov [esp], ecx
	add esi, eax
	add ecx, ebp

loc_432CEA:
	mov edx, [esp]
	dec ebp
	add edx, ebp
	mov al, [edx]
	mov [esp+0D4h], al

loc_432CF9:
	mov al, [edx-1]
	mov ah, [esp+0D4h]
	dec ebp
	or ah, al
	dec edx
	mov [esp+0D4h], ah
	test ebp, ebp
	jg loc_432CF9

loc_432D14:
	mov dl, [esp+0D4h]
	test dl, 0Ch
	jz loc_43327C
	test dl, 4
	jz loc_432FC0
	mov edx, [esp+14h]
	lea eax, [ebx-1]
	xor ebp, ebp
	mov [esp+94h], eax
	mov eax, [esp]
	mov [esp+0A8h], ebp
	mov [esp+68h], eax
	mov eax, [esp+0B4h]
	shl edx, 5
	mov [esp+6Ch], eax

loc_432D59:
	mov eax, [esp]
	mov edi, [esp+94h]
	add eax, edi
	mov [esp+28h], eax
	test byte [eax], 4
	jnz loc_432DA2
	mov eax, [esp+0B4h]
	shl edi, 2
	add eax, edi
	lea edi, 0[ebp*4]
	mov [esp+0B0h], eax
	lea eax, [esi+edi]
	mov edi, [esp+0B0h]
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+28h]
	mov edi, ebp
	mov al, [eax]
	inc ebp
	mov [ecx+edi], al

loc_432DA2:
	mov eax, [esp]
	mov edi, [esp+94h]
	add eax, edi
	mov [esp+2Ch], eax
	mov edi, [esp+2Ch]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+68h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 4
	jz loc_432F66
	mov eax, [esp+94h]
	mov edi, [esp+0B4h]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0B0h], eax
	mov eax, [esp+6Ch]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [esp+0B0h]
	fld dword [eax+4]
	fsub dword [edi+4]
	fld dword [eax]
	fld dword [dword_4F1DEC]
	fld dword [eax+4]
	fsub st0, st1
	fxch st2
	fsub dword [edi]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [eax+0Ch]
	fsub dword [edi+0Ch]
	fmul st0, st3
	fld dword [eax+1Ch]
	fld dword [eax+18h]
	fsub dword [edi+18h]
	fxch st1
	fsub dword [edi+1Ch]
	fxch st3
	fsubr dword [eax]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFCFC[edx]
	mov edi, [edi]
	fmul st0, st4
	fxch st1
	fsubr dword [edi+0Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD08[edx]
	mov edi, [edi]
	fxch st1
	fmul st0, st3
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+6Ch]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+0B0h], eax
	mov eax, [edi+10h]
	mov edi, [esp+0B0h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmulp st2, st0
	mov [esp+0CCh], eax
	mov edi, [esp+0B0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D0h]
	sub edi, [esp+0D0h]
	mov eax, [esp+1Ch]
	mov [esp+0B0h], edi
	shl edi, 10h
	or eax, edi
	mov edi, [esp+0B0h]
	shl edi, 8
	or edi, eax
	mov eax, [esp+0B0h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	mov edi, [esp+2Ch]
	fstp dword flt_4EFD00[edx]
	mov al, [edi]
	and al, 0F0h
	lea edi, [ecx+ebp]
	or al, 4
	mov [edi], al
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_4338D2
	or byte [edi], 1

loc_432F46:
	mov eax, [esp+14h]
	inc eax
	mov edi, edx
	mov [esp+14h], eax
	mov eax, flt_4EFCFC
	add edx, 20h
	add eax, edi
	lea edi, 0[ebp*4]
	inc ebp
	mov [edi+esi], eax

loc_432F66:
	mov eax, [esp+0A8h]
	mov edi, [esp+68h]
	dec ebx
	mov [esp+94h], eax
	inc edi
	mov eax, [esp+6Ch]
	mov [esp+68h], edi
	mov edi, [esp+0A8h]
	add eax, 4
	inc edi
	mov [esp+6Ch], eax
	mov [esp+0A8h], edi
	test ebx, ebx
	jg loc_432D59
	cmp ebp, 3
	jl loc_433886
	mov ebx, ebp
	mov [esp+0B4h], esi
	lea eax, 0[ebp*4]
	mov [esp], ecx
	add esi, eax
	add ecx, ebp

loc_432FC0:
	test byte [esp+0D4h], 8
	jz loc_433252
	mov edx, [esp+14h]
	lea eax, [ebx-1]
	xor ebp, ebp
	mov [esp+90h], eax
	mov eax, [esp]
	mov [esp+0A4h], ebp
	mov [esp+70h], eax
	mov eax, [esp+0B4h]
	shl edx, 5
	mov [esp+74h], eax

loc_432FFA:
	mov eax, [esp]
	mov edi, [esp+90h]
	add eax, edi
	mov [esp+34h], eax
	test byte [eax], 8
	jnz loc_433034
	mov eax, [esp+0B4h]
	shl edi, 2
	add edi, eax
	lea eax, 0[ebp*4]
	add eax, esi
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+34h]
	mov edi, ebp
	mov al, [eax]
	inc ebp
	mov [ecx+edi], al

loc_433034:
	mov eax, [esp]
	mov edi, [esp+90h]
	add eax, edi
	mov [esp+38h], eax
	mov edi, [esp+38h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+70h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 8
	jz loc_4331F8
	mov eax, [esp+90h]
	mov edi, [esp+0B4h]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0B0h], eax
	mov eax, [esp+74h]
	mov [esp+0D0h], edi
	mov edi, [eax]
	mov eax, [esp+0B0h]
	fld dword [eax+4]
	fsub dword [edi+4]
	fld dword [eax]
	fld dword [dword_4F1DF4]
	fld dword [eax+4]
	fsub st0, st1
	fxch st2
	fsub dword [edi]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [eax+0Ch]
	fsub dword [edi+0Ch]
	fmul st0, st3
	fld dword [eax+1Ch]
	fld dword [eax+18h]
	fsub dword [edi+18h]
	fxch st1
	fsub dword [edi+1Ch]
	fxch st3
	fsubr dword [eax]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFCFC[edx]
	mov edi, [edi]
	fmul st0, st4
	fxch st1
	fsubr dword [edi+0Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD08[edx]
	mov edi, [edi]
	fxch st1
	fmul st0, st3
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+74h]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+0B0h], eax
	mov eax, [edi+10h]
	mov edi, [esp+0B0h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmulp st2, st0
	mov [esp+0CCh], eax
	mov edi, [esp+0B0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D0h]
	sub edi, [esp+0D0h]
	mov eax, [esp+1Ch]
	mov [esp+0B0h], edi
	shl edi, 10h
	or edi, eax
	mov eax, [esp+0B0h]
	shl eax, 8
	or edi, eax
	mov eax, [esp+0B0h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	mov edi, [esp+38h]
	fstp dword flt_4EFD00[edx]
	mov al, [edi]
	and al, 0F0h
	lea edi, [ecx+ebp]
	or al, 8
	mov [edi], al
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DF0]
	fnstsw ax
	sahf
	jnb loc_4338EF
	or byte [edi], 1

loc_4331D8:
	mov eax, [esp+14h]
	mov edi, edx
	inc eax
	add edx, 20h
	mov [esp+14h], eax
	lea eax, 0[ebp*4]
	add edi, flt_4EFCFC
	add eax, esi
	inc ebp
	mov [eax], edi

loc_4331F8:
	mov eax, [esp+0A4h]
	mov edi, [esp+70h]
	dec ebx
	mov [esp+90h], eax
	inc edi
	mov eax, [esp+74h]
	mov [esp+70h], edi
	mov edi, [esp+0A4h]
	add eax, 4
	inc edi
	mov [esp+74h], eax
	mov [esp+0A4h], edi
	test ebx, ebx
	jg loc_432FFA
	cmp ebp, 3
	jl loc_433886
	mov ebx, ebp
	mov [esp+0B4h], esi
	lea eax, 0[ebp*4]
	mov [esp], ecx
	add esi, eax
	add ecx, ebp

loc_433252:
	mov edx, [esp]
	dec ebp
	add edx, ebp
	mov al, [edx]
	mov [esp+0D4h], al

loc_433261:
	mov al, [edx-1]
	mov ah, [esp+0D4h]
	dec ebp
	or ah, al
	dec edx
	mov [esp+0D4h], ah
	test ebp, ebp
	jg loc_433261

loc_43327C:
	mov dl, [esp+0D4h]
	test dl, 3
	jz loc_4337B3
	test dl, 1
	jz loc_433517
	mov edx, [esp+14h]
	lea eax, [ebx-1]
	xor ebp, ebp
	mov [esp+8Ch], eax
	mov eax, [esp]
	mov [esp+0A0h], ebp
	mov [esp+78h], eax
	mov eax, [esp+0B4h]
	shl edx, 5
	mov [esp+7Ch], eax

loc_4332C1:
	mov eax, [esp]
	mov edi, [esp+8Ch]
	add eax, edi
	mov [esp+3Ch], eax
	test byte [eax], 1
	jnz loc_43330A
	mov eax, [esp+0B4h]
	shl edi, 2
	add eax, edi
	lea edi, 0[ebp*4]
	mov [esp+0B0h], eax
	lea eax, [esi+edi]
	mov edi, [esp+0B0h]
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+3Ch]
	mov edi, ebp
	mov al, [eax]
	inc ebp
	mov [ecx+edi], al

loc_43330A:
	mov eax, [esp]
	mov edi, [esp+8Ch]
	add eax, edi
	mov [esp+40h], eax
	mov edi, [esp+40h]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+78h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 1
	jz loc_4334BD
	mov eax, [esp+8Ch]
	mov edi, [esp+0B4h]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0B0h], eax
	mov eax, [esp+7Ch]
	mov [esp+0D0h], edi
	mov edi, [esp+0B0h]
	mov eax, [eax]
	fld dword [edi]
	fsub dword [eax]
	fld dword [edi+4]
	fld dword [dword_4F1DF0]
	fld dword [edi]
	fsub st0, st1
	fxch st2
	fsub dword [eax+4]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fld dword [edi+1Ch]
	fld dword [edi+18h]
	fsub dword [eax+18h]
	fxch st1
	fsub dword [eax+1Ch]
	fxch st3
	fsubr dword [edi+4]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD00[edx]
	mov edi, [edi]
	fmul st0, st4
	fxch st1
	fsubr dword [edi+0Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD08[edx]
	mov edi, [edi]
	fxch st1
	fmul st0, st3
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+7Ch]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+0B0h], eax
	mov eax, [edi+10h]
	mov edi, [esp+0B0h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmulp st2, st0
	mov [esp+0CCh], eax
	mov edi, [esp+0B0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D0h]
	sub edi, [esp+0D0h]
	mov eax, [esp+1Ch]
	mov [esp+0B0h], edi
	shl edi, 10h
	or eax, edi
	mov edi, [esp+0B0h]
	shl edi, 8
	or edi, eax
	mov eax, [esp+0B0h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	mov edi, [esp+40h]
	fstp dword flt_4EFCFC[edx]
	mov al, [edi]
	and al, 0FCh
	lea edi, [ecx+ebp]
	or al, 1
	mov [edi], al
	mov edi, [esp+14h]
	mov [esp+44h], edx
	inc edi
	mov eax, [esp+44h]
	mov [esp+14h], edi
	mov edi, flt_4EFCFC
	add edi, eax
	lea eax, 0[ebp*4]
	add edx, 20h
	add eax, esi
	inc ebp
	mov [eax], edi

loc_4334BD:
	mov eax, [esp+0A0h]
	mov edi, [esp+78h]
	dec ebx
	mov [esp+8Ch], eax
	inc edi
	mov eax, [esp+7Ch]
	mov [esp+78h], edi
	mov edi, [esp+0A0h]
	add eax, 4
	inc edi
	mov [esp+7Ch], eax
	mov [esp+0A0h], edi
	test ebx, ebx
	jg loc_4332C1
	cmp ebp, 3
	jl loc_433886
	mov ebx, ebp
	mov [esp+0B4h], esi
	lea eax, 0[ebp*4]
	mov [esp], ecx
	add esi, eax
	add ecx, ebp

loc_433517:
	test byte [esp+0D4h], 2
	jz loc_4337B3
	mov edx, [esp+14h]
	lea eax, [ebx-1]
	xor ebp, ebp
	mov [esp+88h], eax
	mov eax, [esp]
	mov [esp+9Ch], ebp
	mov [esp+80h], eax
	mov eax, [esp+0B4h]
	shl edx, 5
	mov [esp+84h], eax

loc_433557:
	mov eax, [esp]
	mov edi, [esp+88h]
	add eax, edi
	mov [esp+48h], eax
	test byte [eax], 2
	jnz loc_4335A0
	mov eax, [esp+0B4h]
	shl edi, 2
	add eax, edi
	lea edi, 0[ebp*4]
	mov [esp+0B0h], eax
	lea eax, [esi+edi]
	mov edi, [esp+0B0h]
	mov edi, [edi]
	mov [eax], edi
	mov eax, [esp+48h]
	mov edi, ebp
	mov al, [eax]
	inc ebp
	mov [ecx+edi], al

loc_4335A0:
	mov eax, [esp]
	mov edi, [esp+88h]
	add eax, edi
	mov [esp+4Ch], eax
	mov edi, [esp+4Ch]
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+80h]
	mov [esp+0B0h], eax
	xor eax, eax
	mov al, [edi]
	mov edi, [esp+0B0h]
	xor edi, eax
	test di, 2
	jz loc_43375B
	mov eax, [esp+88h]
	mov edi, [esp+0B4h]
	shl eax, 2
	add edi, eax
	mov eax, [edi]
	mov [esp+0B0h], eax
	mov eax, [esp+84h]
	mov [esp+0D0h], edi
	mov edi, [esp+0B0h]
	mov eax, [eax]
	fld dword [edi]
	fsub dword [eax]
	fld dword [edi+4]
	fld dword [dword_4F1DFC]
	fld dword [edi]
	fsub st0, st1
	fxch st2
	fsub dword [eax+4]
	fxch st2
	fdivrp st3, st0
	fxch st1
	fmul st0, st2
	fld dword [edi+0Ch]
	fsub dword [eax+0Ch]
	fmul st0, st3
	fld dword [edi+1Ch]
	fld dword [edi+18h]
	fsub dword [eax+18h]
	fxch st1
	fsub dword [eax+1Ch]
	fxch st3
	fsubr dword [edi+4]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD00[edx]
	mov edi, [edi]
	fmul st0, st4
	fxch st1
	fsubr dword [edi+0Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD08[edx]
	mov edi, [edi]
	fxch st1
	fmul st0, st3
	fxch st1
	fsubr dword [edi+18h]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD14[edx]
	mov edi, [edi]
	fsubr dword [edi+1Ch]
	mov edi, [esp+0D0h]
	fstp dword flt_4EFD18[edx]
	mov edi, [edi]
	mov eax, [edi+10h]
	mov edi, [esp+84h]
	and eax, 0FFh
	mov edi, [edi]
	mov [esp+0B0h], eax
	mov eax, [edi+10h]
	mov edi, [esp+0B0h]
	and eax, 0FFh
	sub edi, eax
	mov [esp+0D0h], edi
	fild dword [esp+0D0h]
	fmulp st2, st0
	mov [esp+0CCh], eax
	mov edi, [esp+0B0h]
	fxch st1
	call __CHP
	fistp dword [esp+0D0h]
	sub edi, [esp+0D0h]
	mov eax, [esp+1Ch]
	mov [esp+0B0h], edi
	shl edi, 10h
	or edi, eax
	mov eax, [esp+0B0h]
	shl eax, 8
	or edi, eax
	mov eax, [esp+0B0h]
	or edi, eax
	mov dword dword_4EFD0C[edx], edi
	mov edi, [esp+4Ch]
	fstp dword flt_4EFCFC[edx]
	mov al, [edi]
	and al, 0FCh
	lea edi, [ecx+ebp]
	or al, 2
	mov [edi], al
	mov edi, [esp+14h]
	mov [esp+50h], edx
	inc edi
	mov eax, flt_4EFCFC
	mov [esp+14h], edi
	mov edi, [esp+50h]
	add edx, 20h
	add eax, edi
	lea edi, 0[ebp*4]
	inc ebp
	mov [edi+esi], eax

loc_43375B:
	mov eax, [esp+9Ch]
	mov [esp+88h], eax
	mov eax, [esp+80h]
	mov edi, [esp+84h]
	inc eax
	dec ebx
	mov [esp+80h], eax
	mov eax, [esp+9Ch]
	add edi, 4
	inc eax
	mov [esp+84h], edi
	mov [esp+9Ch], eax
	test ebx, ebx
	jg loc_433557
	cmp ebp, 3
	jl loc_433886
	mov ebx, ebp
	mov [esp+0B4h], esi

loc_4337B3:
	xor esi, esi
	test ebx, ebx
	jle loc_4337E4
	mov edx, [esp+0B4h]

loc_4337C0:
	mov ecx, [edx]
	fld1
	fld dword [ecx+18h]
	fxch st1
	fdiv dword [ecx+0Ch]
	fxch st1
	fmul st0, st1
	fstp dword [ecx+18h]
	mov ecx, [edx]
	fmul dword [ecx+1Ch]
	add edx, 4
	inc esi
	fstp dword [ecx+1Ch]
	cmp esi, ebx
	jl loc_4337C0
	nop

loc_4337E4:
	dec ebx
	mov edx, [esp+0B4h]
	lea eax, 0[ebx*4]
	mov ecx, [esp+0B4h]
	dec ebx
	mov ebp, [esp+0B4h]
	lea esi, 0[ebx*4]
	add eax, edx
	add esi, ecx
	mov ebp, [ebp+0]
	mov edx, [eax]
	mov edi, [esi]

loc_433814:
	push edx
	mov eax, [esp+0CCh]
	push edi
	sub esi, 4
	inc eax
	push ebp
	dec ebx
	mov [esp+0D4h], eax
	call sub_4983B0
	mov edx, edi
	mov edi, [esi]
	test ebx, ebx
	jg loc_433814
	mov ebp, [esp+0C8h]
	mov eax, ebp
	add esp, 0D8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_43384C:
	fld dword flt_4EFD00[edx]
	fcomp dword [dword_4F1DEC]
	fnstsw ax
	sahf
	jbe loc_4329B4
	or byte [edi], 4
	jmp loc_4329B4

loc_433869:
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_4329D3
	or byte [edi], 2
	jmp loc_4329D3

loc_433886:
	mov ebp, 0FFFFFFFFh
	mov eax, ebp
	add esp, 0D8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_433898:
	fld dword flt_4EFD00[edx]
	fcomp dword [dword_4F1DEC]
	fnstsw ax
	sahf
	jbe loc_432C55
	or byte [edi], 4
	jmp loc_432C55

loc_4338B5:
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_432C70
	or byte [edi], 2
	jmp loc_432C70

loc_4338D2:
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_432F46
	or byte [edi], 2
	jmp loc_432F46

loc_4338EF:
	fld dword flt_4EFCFC[edx]
	fcomp dword [dword_4F1DFC]
	fnstsw ax
	sahf
	jbe loc_4331D8
	or byte [edi], 2
	jmp loc_4331D8
;sub_4326E0 endp

sub_433910: ;SUBROUTINE
	push edx
	push ebp
	mov ebp, esp
	sub esp, 10h
	and esp, 0FFFFFFF8h
	fld dword [flt_4CB6C4]
	fld dword [ebp+1Ch]
	fmul st0, st1
	fld dword [ebp+20h]
	fmulp st2, st0
	fld dword [ebp+14h]
	mov eax, [ebp+1Ch]
	fldz
	mov dword [dword_4D5294], eax
	fxch st2
	fstp dword [flt_4D52A4]
	fxch st2
	fst dword [flt_4D52A8]
	fld dword [flt_4D52A4]
	fadd dword [ebp+0Ch]
	fxch st1
	fadd dword [ebp+10h]
	fxch st1
	fstp dword [flt_4D529C]
	fstp dword [flt_4D52A0]
	fcompp
	fnstsw ax
	sahf
	jz loc_4339F5
	fld dword [ebp+18h]
	fld dword [ebp+14h]
	fmul dword [flt_4CB6C8]
	fstp dword [esp]
	fldz
	fcompp
	fnstsw ax
	sahf
	jz loc_433A01
	fld dword [esp]
	fptan
	fstp st0
	fld dword [ebp+18h]
	fmul dword [flt_4CB6C8]
	fptan
	fstp st0
	fld dword [ebp+1Ch]
	fdivrp st2, st0
	fdivr dword [ebp+20h]
	fxch st1

loc_4339A8:
	fstp dword [dword_4D5294]

loc_4339AE:
	fstp dword [flt_4D5298]
	mov ah, byte [flt_4D5298+3]
	fld dword [dword_4D5294]
	xor ah, 80h
	fld dword [flt_4CB6C4]
	fxch st1
	fmul st0, st1
	mov byte [flt_4D5298+3], ah
	fld dword [flt_4D5298]
	fmulp st2, st0
	mov edx, [ebp+24h]
	fstp dword [dword_4D5294]
	fstp dword [flt_4D5298]
	test edx, edx
	jnz loc_433A26
	mov esp, ebp
	pop ebp
	pop edx
	ret 1Ch

loc_4339F5:
	fld dword [ebp+20h]
	fld dword [ebp+1Ch]
	fdiv st0, st1
	fmulp st1, st0
	jmp loc_4339AE

loc_433A01:
	fld dword [esp]
	fptan
	fstp st0
	fld dword [ebp+1Ch]
	fld st0
	fld1
	fdivrp st3, st0
	fxch st1
	fld dword [ebp+20h]
	fxch st1
	fdiv st0, st1
	fmulp st1, st0
	fxch st1
	fmul st0, st2
	fxch st1
	fmulp st2, st0
	jmp loc_4339A8

loc_433A26:
	xor byte [dword_4D5294+3], 80h
	mov esp, ebp
	pop ebp
	pop edx
	ret 1Ch
;sub_433910 endp

sub_433A40: ;SUBROUTINE
	push ecx
	push edx
	mov eax, [esp+0Ch]
	mov dword [dword_4F1DF0], eax
	mov eax, [esp+14h]
	mov dword [dword_4F1DFC], eax
	mov eax, [esp+10h]
	mov dword [dword_4F1DF4], eax
	mov eax, [esp+18h]
	mov dword [dword_4F1DEC], eax
	mov eax, [esp+20h]
	mov dword [dword_4F1DF8], eax
	mov eax, [esp+1Ch]
	mov dword [dword_4F1E00], eax
	mov eax, [esp+0Ch]
	mov dword [dword_4F1E08], eax
	mov eax, [esp+14h]
	mov dword [dword_4F1E18], eax
	mov eax, [esp+10h]
	mov dword [dword_4F1E10], eax
	mov eax, [esp+18h]
	mov edx, 3F800000h
	mov dword [dword_4F1E0C], eax
	mov eax, dword [dword_4F1DF8]
	mov dword [dword_4F1DE4], edx
	mov dword [dword_4F1DE8], eax
	mov eax, dword [dword_4F1E00]
	mov dword [dword_4F1E04], eax
	xor eax, eax

loc_433ABD:
	add eax, 20h
	xor ecx, ecx
	mov dword dword_4EFCF0[eax], ecx
	cmp eax, 1900h
	jnz loc_433ABD
	pop edx
	pop ecx
	ret 18h
;sub_433A40 endp

sub_433AE0: ;SUBROUTINE
	push ebp
	mov ebp, esp
	sub esp, 8
	and esp, 0FFFFFFF8h
	test eax, eax
	jnz loc_433B15
	mov dword [esp], 322BCC77h

loc_433AF4:
	fld dword [esp]
	fld st0
	fld1
	fdivrp st1, st0
	fxch st1
	fadd dword [flt_4CB6BC]
	fmul dword [flt_4CB6C0]
	fxch st1
	fstp dword [ebx]
	fstp dword [edx]
	mov esp, ebp
	pop ebp
	ret

loc_433B15:
	mov [esp+4], eax
	fild dword [esp+4]
	fmul dword [flt_4CB6B8]
	fstp dword [esp]
	jmp loc_433AF4
;sub_433AE0 endp

sub_433B30: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	mov ebp, esp
	sub esp, 4
	and esp, 0FFFFFFF8h
	xor eax, eax
	xor edx, edx

loc_433B3F:
	mov ecx, edx
	or ecx, 3F804000h
	mov [esp], ecx
	fld dword [esp]
	fld1
	fdivrp st1, st0
	fstp dword [esp]
	mov ecx, [esp]
	and ecx, 7FFFFFh
	add eax, 4
	or ecx, 7E800000h
	add edx, 8000h
	mov dword dword_4F19E0[eax], ecx
	cmp eax, 400h
	jnz loc_433B3F
	mov esp, ebp
	pop ebp
	pop edx
	pop ecx
	ret
;sub_433B30 endp

off_433B80: dd loc_433BBB
	dd loc_433BBB ; jump table for switch statement
	dd loc_433BBB
	dd loc_433BC4
	dd loc_433BC4
	dd loc_433BCD
	dd loc_433BD6
	dd loc_433BD6
	dd loc_433BDF

sub_433BA4: ;SUBROUTINE
	push edx
	mov dl, [eax]
	dec dl
	cmp dl, 8
	ja loc_433BC2
	and edx, 0FFh ; switch 9 cases
	jmp off_433B80[edx*4] ; switch jump

loc_433BBB:
	mov dword [eax+4], 20h ; jumptable 00433BB4 cases 0-2

loc_433BC2:
	pop edx
	ret

loc_433BC4:
	mov dword [eax+4], 8 ; jumptable 00433BB4 cases 3,4
	pop edx
	ret

loc_433BCD:
	mov dword [eax+4], 10h ; jumptable 00433BB4 case 5
	pop edx
	ret

loc_433BD6:
	mov dword [eax+4], 3 ; jumptable 00433BB4 cases 6,7
	pop edx
	ret

loc_433BDF:
	mov dword [eax+4], 4 ; jumptable 00433BB4 case 8
	pop edx
	ret
;sub_433BA4 endp

off_433BF0: dd loc_433C8D
	dd loc_433EEB ; jump table for switch statement
	dd loc_433F6D
	dd loc_433D8B
	dd loc_433DFA
	dd loc_433E6C
	dd loc_434114
	dd loc_434004
	dd loc_43408C

sub_433C14: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov edx, 11Ch
	mov eax, esp
	call sub_46FE70
	test eax, eax
	jz loc_433C56
	mov ah, [esi]
	cmp ah, 4
	jnz loc_433C5E

loc_433C36:
	mov eax, [esp]
	add eax, 0C0h

loc_433C3E:
	push eax
	lea eax, [esi+28h]
	push 0B8000h
	mov ecx, eax
	mov ebx, eax
	mov edx, eax
	call sub_471170
	test eax, eax
	jnz loc_433C6D

loc_433C56:
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433C5E:
	cmp ah, 5
	jz loc_433C36
	mov eax, [esp]
	add eax, 0E4h
	jmp loc_433C3E

loc_433C6D:
	mov edx, 11Ch
	mov eax, esp
	call sub_46FEA0
	mov al, [esi]
	dec al
	cmp al, 8
	ja loc_433C56
	and eax, 0FFh ; switch 9 cases
	jmp off_433BF0[eax*4] ; switch jump

loc_433C8D:
	mov dh, [esi+1] ; jumptable 00433C86 case 0
	test dh, 3
	jnz loc_433D24
	test dh, 1
	jz loc_433D3A
	mov ebx, 20h
	sub ebx, [esi+4]
	mov edx, [esp]
	add ebx, 10h

loc_433CB0:
	mov eax, esi
	call sub_434B50
	mov eax, [esp]
	mov dword [eax+0E8h], 5
	mov eax, 20h
	sub eax, [esi+4]
	sar eax, 2
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov ebx, dword_4F209C
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+10Ch], ebx

loc_433CEE:
	mov al, [esi+4]
	add al, al
	mov edx, [esp]
	add al, 40h
	mov [edx+110h], al
	mov eax, [esp]
	mov byte [eax+111h], 0FFh
	mov eax, [esp]
	mov byte [eax+112h], 0FFh
	mov eax, [esp]
	mov byte [eax+113h], 0FFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433D24:
	mov eax, 20h
	sub eax, [esi+4]
	shl eax, 2
	lea ebx, [eax+8]
	mov edx, [esp]
	jmp loc_433CB0

loc_433D3A:
	mov eax, 20h
	sub eax, [esi+4]
	add eax, eax
	lea ebx, [eax+10h]
	mov edx, [esp]
	mov eax, esi
	call sub_434B50
	mov eax, [esp]
	mov dword [eax+0E8h], 5
	mov eax, 20h
	sub eax, [esi+4]
	sar eax, 2
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	mov ebx, dword_4F209C
	sub eax, edx
	mov edx, [esp]
	add ebx, eax
	mov [edx+10Ch], ebx
	jmp loc_433CEE

loc_433D8B:
	mov ebx, [esp] ; jumptable 00433C86 case 3
	mov edx, esi
	mov eax, edi
	xor ecx, ecx
	call sub_4341A0
	mov eax, [esp]
	mov dword [eax+0C4h], 0Bh
	mov eax, [esp]
	mov word [eax+0C8h], 3
	mov eax, [esp]
	mov word [eax+0CAh], 2
	mov eax, 8
	sub eax, [esi+4]
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov ebx, dword_4F1EDC
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+0DCh], ebx
	mov eax, [esp]
	mov dword [eax+0E0h], 0E2FFFFFFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433DFA:
	mov ecx, 1 ; jumptable 00433C86 case 4
	mov ebx, [esp]
	mov edx, esi
	mov eax, edi
	call sub_4341A0
	mov eax, [esp]
	mov dword [eax+0C4h], 0Bh
	mov eax, [esp]
	mov word [eax+0C8h], 3
	mov eax, [esp]
	mov word [eax+0CAh], 2
	mov eax, 8
	sub eax, [esi+4]
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov ebx, dword_4F1EDC
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+0DCh], ebx
	mov eax, [esp]
	mov dword [eax+0E0h], 0E2FFFFFFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433E6C:
	mov eax, 10h ; jumptable 00433C86 case 5
	sub eax, [esi+4]
	add eax, eax
	lea ebx, [eax+20h]
	mov edx, [esp]
	mov eax, esi
	call sub_4348E0
	mov eax, [esp]
	mov dword [eax+0E8h], 5
	mov eax, 10h
	mov ecx, [esi+4]
	mov esi, eax
	sub esi, ecx
	sar esi, 1
	and esi, 7
	shl esi, 2
	mov eax, esi
	shl esi, 3
	mov edx, dword_4F1FBC
	sub esi, eax
	mov eax, [esp]
	add edx, esi
	mov [eax+10Ch], edx
	mov eax, [esp]
	mov byte [eax+110h], 90h
	mov eax, [esp]
	mov byte [eax+111h], 0FFh
	mov eax, [esp]
	mov byte [eax+112h], 0FFh
	mov eax, [esp]
	mov byte [eax+113h], 0FFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433EEB:
	mov eax, 20h ; jumptable 00433C86 case 1
	sub eax, [esi+4]
	add eax, eax
	lea ebx, [eax+10h]
	mov edx, [esp]
	mov eax, esi
	call sub_434B50
	mov eax, [esp]
	mov dword [eax+0E8h], 5
	mov eax, 20h
	sub eax, [esi+4]
	sar eax, 2
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	mov ebx, dword_4F209C
	sub eax, edx
	mov edx, [esp]
	add ebx, eax
	mov [edx+10Ch], ebx
	mov eax, [esp]
	mov byte [eax+110h], 80h
	mov dl, [esi+4]
	mov dh, 0FFh
	mov eax, [esp]
	sub dh, dl
	mov [eax+111h], dh
	mov eax, [esp]
	mov byte [eax+112h], 0AFh
	mov eax, [esp]
	mov byte [eax+113h], 0AFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_433F6D:
	mov ebx, 20h ; jumptable 00433C86 case 2
	sub ebx, [esi+4]
	mov edx, [esp]
	add ebx, ebx
	mov eax, esi
	add ebx, 10h
	call sub_434B50
	mov eax, [esp]
	mov dword [eax+0E8h], 5
	mov eax, 20h
	sub eax, [esi+4]
	sar eax, 2
	and eax, 7
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov ebx, dword_4F209C
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+10Ch], ebx
	mov dl, [esi+4]
	shl dl, 2
	mov eax, [esp]
	add dl, 30h
	mov [eax+110h], dl
	mov dl, [esi+4]
	add dl, 1Fh
	mov eax, [esp]
	add dl, dl
	mov [eax+111h], dl
	mov eax, [esp]
	mov dl, [eax+111h]
	mov [eax+112h], dl
	mov eax, [esp]
	mov dl, [eax+112h]
	mov [eax+113h], dl
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_434004:
	mov eax, [esp] ; jumptable 00433C86 case 7
	mov dword [eax+0E8h], 4
	mov eax, 3
	sub eax, [esi+4]
	add eax, eax
	lea ebx, [eax+10h]
	mov edx, [esp]
	mov eax, esi
	call sub_434B50
	mov edx, 3
	sub edx, [esi+4]
	sar edx, 1
	mov ebx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	shl edx, 2
	lea eax, 0[edx*8]
	sub eax, edx
	mov ebx, dword_4F21D0
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+10Ch], ebx
	mov eax, [esp]
	mov byte [eax+110h], 0FFh
	mov eax, [esp]
	mov byte [eax+111h], 0EFh
	mov eax, [esp]
	mov byte [eax+112h], 0FFh
	mov eax, [esp]
	mov byte [eax+113h], 0EFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43408C:
	mov eax, [esp] ; jumptable 00433C86 case 8
	mov dword [eax+0E8h], 5
	mov ebx, 4
	mov edx, [esi+4]
	mov eax, esi
	sub ebx, edx
	mov edx, [esp]
	add ebx, 10h
	call sub_434B50
	mov edx, 4
	sub edx, [esi+4]
	sar edx, 1
	mov ebx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	shl edx, 2
	lea eax, 0[edx*8]
	sub eax, edx
	mov ebx, dword_4F217C
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+10Ch], ebx
	mov eax, [esp]
	mov byte [eax+110h], 80h
	mov eax, [esp]
	mov byte [eax+111h], 80h
	mov eax, [esp]
	mov byte [eax+112h], 80h
	mov eax, [esp]
	mov byte [eax+113h], 80h
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_434114:
	mov eax, [esp] ; jumptable 00433C86 case 6
	mov dword [eax+0E8h], 5
	mov eax, 3
	sub eax, [esi+4]
	add eax, eax
	lea ebx, [eax+10h]
	mov edx, [esp]
	mov eax, esi
	call sub_434B50
	mov edx, 3
	sub edx, [esi+4]
	sar edx, 1
	mov ebx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	shl edx, 2
	lea eax, 0[edx*8]
	sub eax, edx
	mov ebx, dword_4F2228
	mov edx, eax
	mov eax, [esp]
	add ebx, edx
	mov [eax+10Ch], ebx
	mov eax, [esp]
	mov byte [eax+110h], 0FFh
	mov eax, [esp]
	mov byte [eax+111h], 0FFh
	mov eax, [esp]
	mov byte [eax+112h], 0FFh
	mov eax, [esp]
	mov byte [eax+113h], 0FFh
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_433C14 endp

sub_4341A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 98h
	mov [esp+8Ch], eax
	mov ebp, edx
	mov [esp+90h], ebx
	lea edi, [esp+30h]
	lea esi, [ebp+1Ch]
	lea eax, [esp+30h]
	movsd
	movsd
	movsd
	call sub_45E810
	mov esi, [esp+8Ch]
	mov eax, [esp+8Ch]
	add esi, 44h
	add eax, 38h
	test ecx, ecx
	jnz loc_4347E9
	mov edx, [esp+30h]
	mov ecx, [ebp+10h]
	shl edx, 2
	sub ecx, edx
	mov edx, [esp+34h]
	mov [esp+30h], ecx
	shl edx, 2
	mov ecx, [ebp+14h]
	sub ecx, edx
	mov edx, [esp+38h]
	mov [esp+34h], ecx
	shl edx, 2
	mov ecx, [ebp+18h]
	mov ebx, 1
	sub ecx, edx
	mov edx, esp
	mov [esp+38h], ecx
	lea ecx, [esp+30h]
	push edx
	mov edx, eax
	mov eax, esi
	call sub_480540
	mov eax, [esp]
	sub eax, [ebp+28h]
	test eax, eax
	jle loc_4348CA

loc_43423B:
	cmp eax, 8000h
	jge loc_434259
	mov eax, [esp]
	mov ecx, [ebp+28h]
	cmp eax, ecx
	jle loc_4348D1
	lea eax, [ecx+8000h]

loc_434256:
	mov [esp], eax

loc_434259:
	mov eax, [ebp+28h]
	mov [esp+60h], eax
	mov eax, [ebp+2Ch]
	add eax, 4CCCh
	mov [esp+64h], eax
	mov eax, [ebp+30h]
	mov [esp+68h], eax
	mov eax, [ebp+28h]
	mov [esp+3Ch], eax
	mov eax, [ebp+2Ch]
	sub eax, 4CCCh
	mov [esp+40h], eax
	mov eax, [ebp+30h]
	mov [esp+44h], eax
	mov eax, [esp]
	mov [esp+48h], eax
	mov eax, [esp+4]
	add eax, 4CCCh
	mov [esp+4Ch], eax
	mov eax, [esp+8]
	mov [esp+50h], eax
	mov eax, [esp]
	mov [esp+54h], eax
	mov eax, [esp+4]
	sub eax, 4CCCh

loc_4342B9:
	mov [esp+58h], eax
	mov eax, [esp+8]
	mov [esp+5Ch], eax
	mov eax, [esp+90h]
	mov [eax+0CCh], eax
	lea edx, [eax+30h]
	mov [eax+0D0h], edx
	lea edx, [eax+60h]
	mov [eax+0D4h], edx
	lea edx, [eax+90h]
	mov [eax+0D8h], edx
	mov esi, [eax+0CCh]
	mov edi, [esp+68h]
	add esi, 10h
	test edi, edi
	jnz loc_434309
	mov dword [esp+68h], 1

loc_434309:
	mov eax, [esp+68h]
	mov [esp+94h], eax
	lea edx, [esp+70h]
	fild dword [esp+94h]
	lea eax, [esp+6Ch]
	fstp dword [esp+6Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+70h]
	lea eax, [esp+60h]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_43441B
	cmp eax, ecx
	jge loc_43441B
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4343EF
	cmp eax, ecx
	jl loc_4343EF
	cmp eax, edx
	jle loc_4343F3
	or ebx, 4
	jmp loc_4343F3

loc_4343EF:
	or ebx, 8
	nop

loc_4343F3:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_434416
	cmp eax, ecx
	jl loc_434416
	cmp eax, edx
	jle loc_434420
	or ebx, 2
	jmp loc_434420

loc_434416:
	or ebx, 1
	jmp loc_434420

loc_43441B:
	mov ebx, 10h

loc_434420:
	mov [edi], bl
	mov esi, [esp+90h]
	mov esi, [esi+0D0h]
	mov eax, [esp+50h]
	add esi, 10h
	test eax, eax
	jnz loc_434442
	mov dword [esp+50h], 1

loc_434442:
	mov eax, [esp+50h]
	mov [esp+94h], eax
	lea edx, [esp+78h]
	fild dword [esp+94h]
	lea eax, [esp+74h]
	fstp dword [esp+74h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+78h]
	lea eax, [esp+48h]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_434554
	cmp eax, ecx
	jge loc_434554
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_434528
	cmp eax, ecx
	jl loc_434528
	cmp eax, edx
	jle loc_43452C
	or ebx, 4
	jmp loc_43452C

loc_434528:
	or ebx, 8
	nop

loc_43452C:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_43454F
	cmp eax, ecx
	jl loc_43454F
	cmp eax, edx
	jle loc_434559
	or ebx, 2
	jmp loc_434559

loc_43454F:
	or ebx, 1
	jmp loc_434559

loc_434554:
	mov ebx, 10h

loc_434559:
	mov [edi], bl
	mov esi, [esp+90h]
	mov esi, [esi+0D4h]
	mov ecx, [esp+5Ch]
	add esi, 10h
	test ecx, ecx
	jnz loc_43457B
	mov dword [esp+5Ch], 1

loc_43457B:
	mov eax, [esp+5Ch]
	mov [esp+94h], eax
	lea edx, [esp+80h]
	fild dword [esp+94h]
	lea eax, [esp+7Ch]
	fstp dword [esp+7Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+80h]
	lea eax, [esp+54h]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_434693
	cmp eax, ecx
	jge loc_434693
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_434667
	cmp eax, ecx
	jl loc_434667
	cmp eax, edx
	jle loc_43466B
	or ebx, 4
	jmp loc_43466B

loc_434667:
	or ebx, 8
	nop

loc_43466B:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_43468E
	cmp eax, ecx
	jl loc_43468E
	cmp eax, edx
	jle loc_434698
	or ebx, 2
	jmp loc_434698

loc_43468E:
	or ebx, 1
	jmp loc_434698

loc_434693:
	mov ebx, 10h

loc_434698:
	mov [edi], bl
	mov esi, [esp+90h]
	mov esi, [esi+0D8h]
	mov edi, [esp+44h]
	add esi, 10h
	test edi, edi
	jnz loc_4346BA
	mov dword [esp+44h], 1

loc_4346BA:
	mov eax, [esp+44h]
	mov [esp+94h], eax
	lea edx, [esp+88h]
	fild dword [esp+94h]
	lea eax, [esp+84h]
	fstp dword [esp+84h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+88h]
	lea eax, [esp+3Ch]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_4347D8
	cmp eax, ecx
	jge loc_4347D8
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4347AC
	cmp eax, ecx
	jl loc_4347AC
	cmp eax, edx
	jle loc_4347B0
	or ebx, 4
	jmp loc_4347B0

loc_4347AC:
	or ebx, 8
	nop

loc_4347B0:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_4347D3
	cmp eax, ecx
	jl loc_4347D3
	cmp eax, edx
	jle loc_4347DD
	or ebx, 2
	jmp loc_4347DD

loc_4347D3:
	or ebx, 1
	jmp loc_4347DD

loc_4347D8:
	mov ebx, 10h

loc_4347DD:
	mov [edi], bl
	add esp, 98h
	pop ebp
	pop edi
	pop esi
	ret

loc_4347E9:
	mov edx, [esp+30h]
	mov ecx, [ebp+10h]
	add edx, edx
	sub ecx, edx
	mov [esp+30h], ecx
	mov edx, [esp+34h]
	mov ecx, [ebp+14h]
	add edx, edx
	sub ecx, edx
	mov [esp+34h], ecx
	mov edx, [esp+38h]
	mov ecx, [ebp+18h]
	add edx, edx
	mov ebx, 1
	sub ecx, edx
	mov edx, esp
	mov [esp+38h], ecx
	lea ecx, [esp+30h]
	push edx
	mov edx, eax
	mov eax, esi
	call sub_480540
	mov eax, [esp+4]
	sub eax, [ebp+2Ch]
	test eax, eax
	jle loc_4348BB

loc_43483A:
	cmp eax, 8000h
	jge loc_434856
	mov eax, [esp+4]
	mov esi, [ebp+2Ch]
	cmp eax, esi
	jle loc_4348C2
	lea eax, [esi+8000h]

loc_434852:
	mov [esp+4], eax

loc_434856:
	mov eax, [ebp+28h]
	add eax, 8000h
	mov [esp+60h], eax
	mov eax, [ebp+2Ch]
	mov [esp+64h], eax
	mov eax, [ebp+30h]
	mov [esp+68h], eax
	mov eax, [ebp+28h]
	add eax, 0FFFF8000h
	mov [esp+3Ch], eax
	mov eax, [ebp+2Ch]
	mov [esp+40h], eax
	mov eax, [ebp+30h]
	mov [esp+44h], eax
	mov eax, [esp]
	add eax, 8000h
	mov [esp+48h], eax
	mov eax, [esp+4]
	mov [esp+4Ch], eax
	mov eax, [esp+8]
	mov [esp+50h], eax
	mov eax, [esp]
	add eax, 0FFFF8000h
	mov [esp+54h], eax
	mov eax, [esp+4]
	jmp loc_4342B9

loc_4348BB:
	neg eax
	jmp loc_43483A

loc_4348C2:
	lea eax, [esi-8000h]
	jmp loc_434852

loc_4348CA:
	neg eax
	jmp loc_43423B

loc_4348D1:
	lea eax, [ecx-8000h]
	jmp loc_434256
;sub_4341A0 endp

sub_4348E0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	cmp dword [eax+30h], 10000h
	jl loc_434AEA

loc_4348FA:
	cmp dword [dword_4DAC24], 1F4h
	jle loc_434AF6
	mov edx, 19999h
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+10h], ax
	mov edx, eax

loc_434922:
	mov eax, [esi+8]
	movsx ebp, dx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, [esi+8]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [esp+0Eh]
	mov [esp+4], eax
	mov eax, [esi+8]
	sar ebp, 10h
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	mov eax, [esi+8]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	lea ebx, [edi+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	lea edx, [edi+114h]
	mov eax, [esi+30h]
	call sub_433AE0
	fld dword [esi+38h]
	mov ebx, [esp]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	add eax, ebx
	mov [edi+104h], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	sub eax, ebp
	add eax, ecx
	mov [edi+108h], eax
	mov edx, [esp+4]
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	add eax, edx
	mov [edi+0FCh], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	mov ebx, [esp+8]
	sub eax, ebp
	sub eax, ebx
	mov [edi+100h], eax
	mov edx, [esp]
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	sub eax, edx
	mov [edi+0F4h], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	sub eax, ebp
	sub eax, ecx
	mov [edi+0F8h], eax
	mov ecx, [esp+4]
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	sub eax, ecx
	mov [edi+0ECh], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	sub eax, ebp
	lea edx, [ebx+eax]
	mov [edi+0F0h], edx
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_434AEA:
	mov dword [eax+30h], 10000h
	jmp loc_4348FA

loc_434AF6:
	mov ebx, [esi+30h]
	mov eax, dword [dword_4F2224]
	add ebx, ebx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov cl, byte [byte_4F2285]
	mov edx, eax
	sar dx, cl
	mov cl, byte [byte_4F2284]
	sar ax, cl
	mov [esp+10h], ax
	jmp loc_434922
;sub_4348E0 endp

sub_434B50: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	cmp dword [eax+30h], 10000h
	jl loc_434D43

loc_434B6A:
	cmp dword [dword_4DAC24], 1F4h
	jle loc_434D4F
	mov edx, 19999h
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, eax

loc_434B8F:
	mov eax, [esi+8]
	movsx ebp, dx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	mov eax, [esi+8]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, [esi+8]
	movsx ebp, bx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	mov eax, [esi+8]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, ebp
	lea ebx, [edi+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	lea edx, [edi+114h]
	mov eax, [esi+30h]
	call sub_433AE0
	fld dword [esi+38h]
	mov ebx, [esp+8]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	add eax, ebx
	mov [edi+104h], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	add eax, ebp
	mov [edi+108h], eax
	mov edx, [esp]
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	add eax, edx
	mov [edi+0FCh], eax
	mov ecx, [esp+4]
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	sub eax, ecx
	mov [edi+100h], eax
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	sub eax, ebx
	mov [edi+0F4h], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	sub eax, ebp
	mov [edi+0F8h], eax
	fld dword [esi+38h]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	sub eax, edx
	mov [edi+0ECh], eax
	fld dword [esi+3Ch]
	call __CHP
	fistp dword [esp+8]
	mov eax, [esp+8]
	add eax, ecx
	mov [edi+0F0h], eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_434D43:
	mov dword [eax+30h], 10000h
	jmp loc_434B6A

loc_434D4F:
	mov eax, dword [dword_4F2224]
	mov ebx, [esi+30h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov cl, byte [byte_4F2285]
	mov edx, eax
	mov ebx, eax
	sar dx, cl
	mov cl, byte [byte_4F2284]
	sar bx, cl
	jmp loc_434B8F
;sub_434B50 endp

sub_434DA0: ;SUBROUTINE
	mov byte [byte_4F2285], dl
	mov eax, dword dword_4D52CC[eax*4]
	mov byte [byte_4F2284], bl
	mov dword [dword_4F2224], eax
	ret
;sub_434DA0 endp

sub_434DD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, 8
	mov ebx, dword_4F209C
	mov eax, aSm ; "sm"
	mov edx, dword [dword_4F227C]
	call sub_434EA0
	mov ecx, 8
	mov ebx, dword_4F1FBC
	mov eax, aDi ; "di"
	mov edx, dword [dword_4F227C]
	call sub_434EA0
	mov ecx, 3
	mov ebx, dword_4F21D0
	mov eax, aGa ; "ga"
	mov edx, dword [dword_4F2280]
	call sub_434EA0
	mov ecx, 3
	mov ebx, dword_4F217C
	mov eax, aSn ; "sn"
	mov edx, dword [dword_4F2280]
	call sub_434EA0
	mov ecx, 3
	mov ebx, dword_4F2228
	mov eax, aGr ; "gr"
	mov edx, dword [dword_4F2280]
	call sub_434EA0
	cmp dword [dword_51221C], 8
	jnz loc_434E7C
	mov ecx, 8
	mov ebx, dword_4F1EDC
	mov eax, aMs ; "ms"
	mov edx, dword [dword_4F2280]
	call sub_434EA0
	pop edx
	pop ecx
	pop ebx
	ret

loc_434E7C:
	mov ecx, 8
	mov ebx, dword_4F1EDC
	mov eax, aSp ; "sp"
	mov edx, dword [dword_4F2280]
	call sub_434EA0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_434DD0 endp

sub_434EA0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+8], eax
	mov edi, edx
	mov esi, ebx
	mov [esp+0Ch], ecx
	xor ebp, ebp
	test ecx, ecx
	jle loc_434EF7

loc_434EB8:
	push ebp
	mov ebx, [esp+0Ch]
	push ebx
	push aS02d ; "%s%02d"
	lea edx, [esp+0Ch]
	push edx
	call sprintf_
	mov ah, byte [byte_512218]
	add esp, 10h
	test ah, 80h
	jz loc_434EFE
	mov edx, aMooo ; "mooo"

loc_434EE0:
	mov ecx, esi
	mov eax, edi
	xor ebx, ebx
	call sub_4352C0
	mov ecx, [esp+0Ch]
	inc ebp
	add esi, 1Ch
	cmp ebp, ecx
	jl loc_434EB8

loc_434EF7:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_434EFE:
	mov edx, esp
	jmp loc_434EE0
;sub_434EA0 endp

sub_434F10: ;SUBROUTINE
	jmp sub_435470
;sub_434F10 endp

;	Attributes: thunk

sub_434F20: ;SUBROUTINE
	jmp sub_428F20
;sub_434F20 endp

sub_434F30: ;SUBROUTINE
	call sub_434F60
	call sub_434DD0
	jmp sub_435530
;sub_434F30 endp

sub_434F60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov esi, dword_500D2C
	xor ebp, ebp
	xor edi, edi

loc_434F75:
	push edi
	push aLinD ; "lin%d"
	lea eax, [esp+8]
	push eax
	call sprintf_
	imul eax, edi, 1Ch
	lea edx, [esp+0Ch]
	mov ecx, esi
	add esp, 0Ch
	mov ebx, dword [dword_500D20]
	mov [esp+100h], eax
	mov eax, dword [dword_500D28]
	add ebp, 4
	call sub_4352C0
	mov eax, [esp+100h]
	mov edx, 1
	mov dword dword_500CEC[ebp], esi
	add esi, 1Ch
	add edi, edx
	mov dword dword_500D44[eax], edx
	cmp edi, 8
	jl loc_434F75
	mov ecx, dword_500E0C
	mov edx, aShad ; "shad"
	mov ebx, dword [dword_500D20]
	mov eax, dword [dword_500D28]
	call sub_4352C0
	mov ecx, dword_500E0C
	mov edx, aSkd0 ; "skd0"
	mov ebx, dword [dword_500D20]
	mov eax, dword [dword_500D28]
	mov dword [dword_500F40], ecx
	mov ecx, dword_500E28
	mov esi, dword_500E44
	call sub_4352C0
	mov ebx, dword_500E28
	mov ecx, dword_500E44
	mov edx, aSkd1 ; "skd1"
	mov eax, dword [dword_500D28]
	mov dword [dword_500D10], ebx
	mov ebx, dword [dword_500D20]
	mov edi, dword_500E60
	call sub_4352C0
	mov ecx, dword_500E60
	mov edx, aSkd2 ; "skd2"
	mov ebx, dword [dword_500D20]
	mov eax, dword [dword_500D28]
	mov dword [dword_500D14], esi
	call sub_4352C0
	mov ecx, dword_500E7C
	mov edx, aSkd3 ; "skd3"
	mov ebx, dword [dword_500D20]
	mov eax, dword [dword_500D28]
	mov dword [dword_500D18], edi
	call sub_4352C0
	mov eax, 1
	mov ebp, dword_500E7C
	mov dword [dword_4D52E0], eax
	mov ah, byte [byte_512219]
	mov dword [dword_500D1C], ebp
	test ah, 2
	jz loc_4350D5
	mov ecx, dword_500E98
	mov edx, aChr1 ; "chr1"

loc_4350A5:
	mov ebx, dword [dword_500D20]
	mov eax, dword [dword_500D28]
	call sub_4352C0
	mov ecx, dword_500E98
	xor edx, edx
	mov dword [dword_500F5C], ecx
	mov dword [dword_4D52E0], edx
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4350D5:
	mov ecx, dword_500E98
	mov edx, aChr0 ; "chr0"
	jmp loc_4350A5
;sub_434F60 endp

off_4350F0: dd loc_43511E
	dd loc_43513A ; jump table for switch statement
	dd loc_435156
	dd loc_435172
	dd loc_43518E

sub_435104: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 7
	mov edi, ebx
	mov esi, eax
	rep movsd
	cmp edx, 4 ; switch 5 cases
	ja loc_435136 ; jumptable 00435117 default case
	jmp off_4350F0[edx*4] ; switch jump

loc_43511E:
	mov edx, [eax+10h] ; jumptable 00435117 case 0
	mov [ebx+4], edx
	mov edx, [eax+0Ch]
	mov [ebx+8], edx
	mov edx, [eax+8]
	mov [ebx+0Ch], edx
	mov eax, [eax+4]
	mov [ebx+10h], eax

loc_435136:
	pop edi ; jumptable 00435117 default case
	pop esi
	pop ecx
	ret

loc_43513A:
	mov edx, [eax+8] ; jumptable 00435117 case 1
	mov [ebx+4], edx
	mov edx, [eax+4]
	mov [ebx+8], edx
	mov edx, [eax+10h]
	mov [ebx+0Ch], edx
	mov eax, [eax+0Ch]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_435156:
	mov edx, [eax+10h] ; jumptable 00435117 case 2
	mov [ebx+4], edx
	mov edx, [eax+4]
	mov [ebx+8], edx
	mov edx, [eax+8]
	mov [ebx+0Ch], edx
	mov eax, [eax+0Ch]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_435172:
	mov edx, [eax+0Ch] ; jumptable 00435117 case 3
	mov [ebx+4], edx
	mov edx, [eax+10h]
	mov [ebx+8], edx
	mov edx, [eax+4]
	mov [ebx+0Ch], edx
	mov eax, [eax+8]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_43518E:
	mov edx, [eax+8] ; jumptable 00435117 case 4
	mov [ebx+4], edx
	mov edx, [eax+0Ch]
	mov [ebx+8], edx
	mov edx, [eax+10h]
	mov [ebx+0Ch], edx
	mov eax, [eax+4]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret
;sub_435104 endp

off_4351B0: dd loc_4351DE
	dd loc_4351FA ; jump table for switch statement
	dd loc_435272
	dd loc_435256
	dd loc_435216

sub_4351C4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 7
	mov edi, ebx
	mov esi, eax
	rep movsd
	cmp edx, 4 ; switch 5 cases
	ja loc_4351F6 ; jumptable 004351D7 default case
	jmp off_4351B0[edx*4] ; switch jump

loc_4351DE:
	mov edx, [eax+8] ; jumptable 004351D7 case 0
	mov [ebx+4], edx
	mov edx, [eax+4]
	mov [ebx+8], edx
	mov edx, [eax+10h]
	mov [ebx+0Ch], edx
	mov eax, [eax+0Ch]
	mov [ebx+10h], eax

loc_4351F6:
	pop edi ; jumptable 004351D7 default case
	pop esi
	pop ecx
	ret

loc_4351FA:
	mov edx, [eax+10h] ; jumptable 004351D7 case 1
	mov [ebx+4], edx
	mov edx, [eax+0Ch]
	mov [ebx+8], edx
	mov edx, [eax+8]
	mov [ebx+0Ch], edx
	mov eax, [eax+4]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_435216:
	mov ecx, [ebx+8] ; jumptable 004351D7 case 4
	cmp ecx, [ebx+4]
	jge loc_43523A

loc_43521E:
	mov edx, [eax+10h]
	mov [ebx+4], edx
	mov edx, [eax+4]
	mov [ebx+8], edx
	mov edx, [eax+8]
	mov [ebx+0Ch], edx
	mov eax, [eax+0Ch]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_43523A:
	mov edx, [eax+8]
	mov [ebx+4], edx
	mov edx, [eax+0Ch]
	mov [ebx+8], edx
	mov edx, [eax+10h]
	mov [ebx+0Ch], edx
	mov eax, [eax+4]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_435256:
	mov edx, [eax+0Ch] ; jumptable 004351D7 case 3
	mov [ebx+4], edx
	mov edx, [eax+10h]
	mov [ebx+8], edx
	mov edx, [eax+4]
	mov [ebx+0Ch], edx
	mov eax, [eax+8]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret

loc_435272:
	mov esi, [ebx+8] ; jumptable 004351D7 case 2
	cmp esi, [ebx+4]
	jge loc_43521E
	mov edx, [eax+8]
	mov [ebx+4], edx
	mov edx, [eax+0Ch]
	mov [ebx+8], edx
	mov edx, [eax+10h]
	mov [ebx+0Ch], edx
	mov eax, [eax+4]
	mov [ebx+10h], eax
	pop edi
	pop esi
	pop ecx
	ret
;sub_4351C4 endp

sub_4352A0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 7
	mov edi, ebx
	mov esi, eax
	rep movsd
	pop edi
	pop esi
	pop ecx
	ret
;sub_4352A0 endp

sub_4352C0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov [esp], eax
	mov ebp, edx
	test eax, eax
	jnz loc_43537A
	mov ebx, edx

loc_4352D5:
	mov esi, dword [dword_4D52F0]
	lea eax, 0[esi*4]
	add eax, esi
	inc esi
	shl eax, 2
	mov dword [dword_4D52F0], esi
	mov esi, dword_4F2290
	add esi, eax
	mov [ecx], esi
	cmp dword [dword_4D52F0], 0BB8h
	jl loc_43530B
	xor edi, edi
	mov dword [dword_4D52F0], edi

loc_43530B:
	mov esi, ebx
	mov edi, [ecx]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov dword [ecx+4], 0
	mov eax, [esp]
	mov dword [ecx+8], 1
	mov edx, dword [dword_500D28]
	mov dword [ecx+0Ch], 2
	lea esi, [ecx+18h]
	mov dword [ecx+10h], 3
	cmp eax, edx
	jnz loc_43538F
	mov edx, aPaz ; "paz"
	mov eax, ebp
	call strstr_
	test eax, eax
	jnz loc_435386
	mov edx, aTpg ; "tpg"
	mov eax, ebp
	call strstr_
	test eax, eax
	jz loc_43538F
	mov eax, ebx
	xor edx, edx

loc_435364:
	call sub_4354C0
	mov dword [ecx+18h], 1
	mov [ecx+14h], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret

loc_43537A:
	call sub_482EB4
	mov ebx, eax
	jmp loc_4352D5

loc_435386:
	mov edx, 1
	mov eax, ebx
	jmp loc_435364

loc_43538F:
	mov edx, esi
	mov eax, ebx
	call sub_4353B0
	mov [ecx+14h], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret
;sub_4352C0 endp

sub_4353B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov ebp, edx
	mov edx, aCNfs2seGame3_0 ; "c:\\nfs2se\\game\\3rash\\Texture.c"
	mov ecx, 173h
	mov eax, aGlideshape ; "glideShape"
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, 20014h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ecx, eax
	mov ebx, ebp
	mov edx, edi
	mov esi, eax
	call sub_4355B0
	mov ebx, [edi]
	and ebx, 0FFh
	cmp ebx, 7Bh
	jb loc_435457
	ja loc_43543E
	mov ebx, dword [dword_4D97B8]
	test ebx, ebx
	jz loc_43544E
	push 0
	push 4
	mov ebx, [ecx+4]
	push 2

loc_43540F:
	sar ebx, 10h
	mov ecx, [ecx+2]
	push ebx

loc_435416:
	sar ecx, 10h
	push ecx
	call sub_497464
	mov ebx, eax
	push 0
	lea ecx, [esi+10h]
	push ecx
	push ebx
	call sub_49755C
	mov eax, esi
	call sub_4848FC
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43543E:
	cmp ebx, 7Dh
	jnz loc_435457
	push 0
	push 0
	mov ebx, [ecx+4]
	push 7
	jmp loc_43540F

loc_43544E:
	push ebx
	push ebx
	mov ebx, [ecx+4]
	push 3
	jmp loc_43540F

loc_435457:
	push 0
	push 0
	mov ecx, [esi+4]
	push 3
	sar ecx, 10h
	push ecx
	mov ecx, [esi+2]
	jmp loc_435416
;sub_4353B0 endp

sub_435470: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, dword [dword_4D52E4]
	test edx, edx
	jnz loc_43548B
	mov ebx, dword [dword_4D52E8]
	test ebx, ebx
	jnz loc_4354A8
	pop edx
	pop ecx
	pop ebx
	ret

loc_43548B:
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D52E4], ecx
	mov ebx, dword [dword_4D52E8]
	test ebx, ebx
	jnz loc_4354A8
	pop edx
	pop ecx
	pop ebx
	ret

loc_4354A8:
	push esi
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4D52E8], esi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_435470 endp

sub_4354C0: ;SUBROUTINE
	push ecx
	sub esp, 4
	mov ecx, edx
	cmp edx, 2
	jle loc_4354D2
	xor eax, eax
	add esp, 4
	pop ecx
	ret

loc_4354D2:
	push esi
	push ebx
	lea ebx, [esp+8]
	mov esi, dword dword_4D52E4[edx*4]
	mov edx, eax
	mov eax, esi
	call sub_4355B0
	test ecx, ecx
	jnz loc_4354F3
	mov eax, ecx
	call sub_435500

loc_4354F3:
	mov eax, dword [dword_4D52EC]
	pop ebx
	pop esi
	add esp, 4
	pop ecx
	ret
;sub_4354C0 endp

sub_435500: ;SUBROUTINE
	cmp eax, 2
	jle loc_435506
	ret

loc_435506:
	push edx
	push ecx
	mov eax, dword dword_4D52E4[eax*4]
	push 0
	add eax, 10h
	push eax
	mov edx, dword [dword_4D52EC]
	push edx
	call sub_49755C
	pop ecx
	pop edx
	ret
;sub_435500 endp

sub_435530: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, aCNfs2seGame3_0 ; "c:\\nfs2se\\game\\3rash\\Texture.c"
	mov ecx, 140h
	mov eax, aSwapshape ; "swapShape"
	mov esi, 141h
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, 20014h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ebx, aCNfs2seGame3_0 ; "c:\\nfs2se\\game\\3rash\\Texture.c"
	mov edx, 20014h
	mov dword [dword_4D52E4], eax
	mov eax, aSwapshape ; "swapShape"
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], esi
	call sub_484498
	push 0
	push 0
	push 3
	push 100h
	push 100h
	mov dword [dword_4D52E8], eax
	call sub_497464
	mov dword [dword_4D52EC], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_435530 endp

sub_4355B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov eax, edx
	mov esi, [edx+2]
	mov edx, dword [dword_4D9944]
	sar esi, 10h
	test edx, edx
	jz loc_435617
	mov esi, edx

loc_4355CA:
	mov ecx, [eax]
	and ecx, 0FFh
	cmp ecx, 7Bh
	jb loc_4356D5
	lea edx, [eax+10h]
	lea edi, [ebp+10h]
	ja loc_43568A
	cmp dword [dword_4D97B8], 0
	jz loc_4356B2
	push ebx
	mov ecx, [eax+4]
	push esi
	sar ecx, 10h
	mov ebx, [eax+2]
	push esi
	sar ebx, 10h
	mov eax, edi
	call sub_4359D0
	mov [ebp+6], si
	mov [ebp+4], si
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_435617:
	cmp dword [dword_4D5C40], 0
	jz loc_43562F
	cmp esi, 80h
	jl loc_43562F
	mov esi, 80h
	jmp loc_4355CA

loc_43562F:
	cmp dword [dword_4D5C40], 0
	jz loc_435644
	cmp esi, 40h
	jl loc_435644
	mov esi, 40h
	jmp loc_4355CA

loc_435644:
	cmp esi, 20h
	jl loc_435653
	mov esi, 20h
	jmp loc_4355CA

loc_435653:
	cmp esi, 10h
	jl loc_435662
	mov esi, 10h
	jmp loc_4355CA

loc_435662:
	cmp esi, 8
	jl loc_435671
	mov esi, 8
	jmp loc_4355CA

loc_435671:
	cmp esi, 4
	jl loc_435680
	mov esi, 4
	jmp loc_4355CA

loc_435680:
	mov esi, 2
	jmp loc_4355CA

loc_43568A:
	cmp ecx, 7Dh
	jnz loc_4356D5
	push ebx
	mov ecx, [eax+4]
	push esi
	sar ecx, 10h
	mov ebx, [eax+2]
	push esi
	sar ebx, 10h
	mov eax, edi
	call sub_435850
	mov [ebp+6], si
	mov [ebp+4], si
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4356B2:
	push ebx
	mov ecx, [eax+4]
	push esi
	sar ecx, 10h
	mov ebx, [eax+2]
	push esi
	sar ebx, 10h
	mov eax, edi
	call sub_435AD0
	mov [ebp+6], si
	mov [ebp+4], si
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4356D5:
	push ebx
	lea edx, [eax+10h]
	mov ecx, [eax+4]
	push esi
	sar ecx, 10h
	mov ebx, [eax+2]
	push esi
	sar ebx, 10h
	lea eax, [ebp+10h]
	call sub_435700
	mov [ebp+6], si
	mov [ebp+4], si
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4355B0 endp

sub_435700: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov ebp, [esp+38h]
	mov [esp+14h], edx
	mov [esp], ebx
	mov [esp+0Ch], ebx
	mov [esp+24h], ebp
	fild dword [esp+0Ch]
	fild dword [esp+24h]
	fdivp st1, st0
	mov edx, [esp+40h]
	mov dword [edx], 0
	mov edx, [esp+3Ch]
	mov [esp+0Ch], ecx
	mov [esp+24h], edx
	fild dword [esp+0Ch]
	fild dword [esp+24h]
	fdivp st1, st0
	xor edx, edx
	mov ecx, [esp+3Ch]
	mov [esp+4], edx
	fxch st1
	fstp dword [esp+10h]
	fstp dword [esp+18h]
	test ecx, ecx
	jle loc_43582C

loc_43575F:
	mov edx, [esp+4]
	mov [esp+24h], edx
	fild dword [esp+24h]
	fmul dword [esp+18h]
	mov ecx, [esp]
	call __CHP
	fistp dword [esp+24h]
	mov edx, [esp+24h]
	imul edx, ecx
	mov ecx, [esp+14h]
	add edx, edx
	xor edi, edi
	add ecx, edx
	mov [esp+1Ch], edi
	mov [esp+8], ecx
	xor ecx, ecx
	test ebp, ebp
	jle loc_435817

loc_43579E:
	fld dword [esp+1Ch]
	call __CHP
	fistp dword [esp+20h]
	mov edx, [esp+20h]
	mov ebx, [esp+8]
	add edx, edx
	add edx, ebx
	mov bx, [edx]
	cmp bx, 7C0h
	jz loc_435835
	xor bl, bl
	and bh, 0F8h
	and ebx, 0FFFFh
	sar ebx, 0Bh
	mov esi, ebx
	mov bx, [edx]
	and ebx, 7C0h
	and ebx, 0FFFFh
	shl esi, 0Ah
	sar ebx, 6
	or esi, 8000h
	mov edi, ebx
	mov bx, [edx]
	shl edi, 5
	xor bh, bh
	mov edx, esi
	and bl, 1Fh
	or edx, edi
	add eax, 2
	or edx, ebx
	mov [eax-2], dx

loc_435806:
	fld dword [esp+1Ch]
	fadd dword [esp+10h]
	inc ecx
	fstp dword [esp+1Ch]
	cmp ecx, ebp
	jl loc_43579E

loc_435817:
	mov ebx, [esp+4]
	inc ebx
	mov esi, [esp+3Ch]
	mov [esp+4], ebx
	cmp ebx, esi
	jl loc_43575F

loc_43582C:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_435835:
	mov edx, [esp+40h]
	mov word [eax], 0
	add eax, 2
	mov dword [edx], 1
	jmp loc_435806
;sub_435700 endp

sub_435850: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov esi, [esp+38h]
	mov [esp+4], ebx
	mov [esp], ecx
	mov ebx, [esp+40h]
	mov edi, [esp]
	xor ecx, ecx
	mov dword [ebx], 0
	mov [esp+0Ch], ecx
	test edi, edi
	jle loc_43598F
	mov ebp, 0F000h

loc_435881:
	mov edi, [esp+4]
	xor ecx, ecx
	test edi, edi
	jle loc_4358B3

loc_43588B:
	mov edi, [edx]
	test edi, edi
	jz loc_4358CC
	cmp edi, 0FF00F800h
	jnz loc_4358D3

loc_435899:
	mov dword [ebx], 1
	mov word [eax], 0

loc_4358A4:
	add eax, 2
	mov edi, [esp+4]
	inc ecx
	add edx, 4
	cmp ecx, edi
	jl loc_43588B

loc_4358B3:
	cmp ecx, esi
	jge loc_43597B
	mov dword [ebx], 1
	inc ecx
	mov word [eax], 0
	add eax, 2
	jmp loc_4358B3

loc_4358CC:
	mov word [eax], 0F000h
	jmp loc_4358A4

loc_4358D3:
	cmp edi, 0FF00FB00h
	jz loc_435899
	and edi, 0F0000000h
	shr edi, 1Ch
	mov [esp+8], edi
	mov edi, [esp+8]
	mov [esp+14h], edi
	mov edi, [edx]
	and edi, 0F00000h
	shr edi, 14h
	mov [esp+8], edi
	mov edi, [esp+8]
	mov [esp+10h], edi
	mov edi, [edx]
	and edi, 0F000h
	shr edi, 0Ch
	mov [esp+8], edi
	mov edi, [esp+8]
	mov [esp+24h], edi
	mov edi, [edx]
	and edi, 0F0h
	shr edi, 4
	mov [esp+8], edi
	mov edi, [esp+8]
	mov [esp+20h], edi
	mov edi, [esp+14h]
	shl edi, 0Ch
	mov [esp+1Ch], edi
	mov edi, [esp+10h]
	shl edi, 8
	mov [esp+18h], edi
	mov edi, [esp+1Ch]
	or edi, [esp+18h]
	mov [esp+1Ch], edi
	mov edi, [esp+24h]
	shl edi, 4
	mov [esp+18h], edi
	mov edi, [esp+1Ch]
	or edi, [esp+18h]
	or edi, [esp+20h]
	mov [eax], di
	cmp di, 0F000h
	jmp loc_4358A4

loc_43597B:
	mov ecx, [esp+0Ch]
	inc ecx
	mov edi, [esp]
	mov [esp+0Ch], ecx
	cmp ecx, edi
	jl loc_435881

loc_43598F:
	mov ebp, 1
	mov edi, [esp+3Ch]
	xor ecx, ecx

loc_43599A:
	cmp edi, [esp+0Ch]
	jle loc_4359BA
	mov edx, ecx
	test esi, esi
	jle loc_4359B4

loc_4359A6:
	add eax, 2
	mov [ebx], ebp
	inc edx
	mov [eax-2], cx
	cmp edx, esi
	jl loc_4359A6

loc_4359B4:
	inc dword [esp+0Ch]
	jmp loc_43599A

loc_4359BA:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_435850 endp

sub_4359D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov edi, [esp+30h]
	mov ebp, [esp+38h]
	mov esi, eax
	mov [esp+8], edx
	mov [esp+0Ch], ebx
	mov [esp+18h], ebx
	mov [esp+1Ch], edi
	fild dword [esp+18h]
	fild dword [esp+1Ch]
	fdivp st1, st0
	mov eax, [esp+34h]
	mov [esp+1Ch], ecx
	mov [esp+18h], eax
	fild dword [esp+1Ch]
	fild dword [esp+18h]
	fdivp st1, st0
	xor edx, edx
	mov dword [ebp+0], 0
	mov [esp], edx
	fxch st1
	fstp dword [esp+10h]
	fstp dword [esp+4]
	test eax, eax
	jle loc_435AB4

loc_435A2E:
	mov eax, [esp]
	mov [esp+1Ch], eax
	fild dword [esp+1Ch]
	fmul dword [esp+4]
	mov ebx, [esp+0Ch]
	call __CHP
	fistp dword [esp+18h]
	mov edx, [esp+18h]
	imul edx, ebx
	xor ecx, ecx
	mov eax, [esp+8]
	mov [esp+14h], ecx
	add edx, eax
	xor eax, eax
	test edi, edi
	jle loc_435AA1

loc_435A63:
	fld dword [esp+14h]
	call __CHP
	fistp dword [esp+18h]
	mov ebx, [esp+18h]
	cmp byte [edx+ebx], 0FFh
	jz loc_435ABD

loc_435A7A:
	fld dword [esp+14h]
	fld st0
	call __CHP
	inc esi
	inc eax
	fistp dword [esp+18h]
	mov ebx, [esp+18h]
	fadd dword [esp+10h]
	mov bl, [edx+ebx]
	fstp dword [esp+14h]
	mov [esi-1], bl
	cmp eax, edi
	jl loc_435A63

loc_435AA1:
	mov ebx, [esp]
	inc ebx
	mov edx, [esp+34h]
	mov [esp], ebx
	cmp ebx, edx
	jl loc_435A2E

loc_435AB4:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_435ABD:
	mov dword [ebp+0], 1
	jmp loc_435A7A
;sub_4359D0 endp

sub_435AD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov edi, [esp+3Ch]
	mov [esp+10h], edx
	mov [esp+14h], ebx
	mov edx, [esp+44h]
	mov dword [edx], 0
	mov edx, dword [off_4DA200]
	mov [esp+8], edx
	test edx, edx
	jz loc_435BC2
	mov [esp+20h], ebx
	mov [esp+24h], edi
	fild dword [esp+20h]
	fild dword [esp+24h]
	fdivp st1, st0
	mov edx, [esp+40h]
	mov [esp+20h], ecx
	mov [esp+24h], edx
	fild dword [esp+20h]
	fild dword [esp+24h]
	fdivp st1, st0
	xor ecx, ecx
	mov [esp+18h], ecx
	fxch st1
	fstp dword [esp+4]
	fstp dword [esp]
	test edx, edx
	jle loc_435BC2

loc_435B3D:
	xor edx, edx
	mov [esp+0Ch], edx
	mov edx, [esp+18h]
	mov [esp+20h], edx
	fild dword [esp+20h]
	fmul dword [esp]
	mov ecx, [esp+14h]
	call __CHP
	fistp dword [esp+20h]
	mov ebp, [esp+20h]
	imul ebp, ecx
	add ebp, [esp+10h]
	xor ecx, ecx
	test edi, edi
	jle loc_435BAD

loc_435B70:
	fld dword [esp+0Ch]
	call __CHP
	fistp dword [esp+1Ch]
	mov edx, [esp+1Ch]
	add edx, ebp
	mov bl, [edx]
	cmp bl, 0FFh
	jnz loc_435BCB
	mov edx, [esp+44h]
	mov dword [edx], 1
	mov word [eax], 0
	add eax, 2

loc_435B9C:
	fld dword [esp+0Ch]
	fadd dword [esp+4]
	inc ecx
	fstp dword [esp+0Ch]
	cmp ecx, edi
	jl loc_435B70

loc_435BAD:
	mov esi, [esp+18h]
	inc esi
	mov ebp, [esp+40h]
	mov [esp+18h], esi
	cmp esi, ebp
	jl loc_435B3D

loc_435BC2:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_435BCB:
	mov dl, bl
	and edx, 0FFh
	mov esi, [esp+8]
	shl edx, 2
	add edx, esi
	xor ebx, ebx
	mov bl, [edx+2]
	sar ebx, 3
	mov [esp+20h], ebx
	mov bl, [esp+20h]
	mov [esp+28h], bl
	xor ebx, ebx
	mov bl, [edx+1]
	sar ebx, 3
	mov [esp+20h], ebx
	mov dl, [edx]
	mov bl, [esp+20h]
	and edx, 0FFh
	sar edx, 3
	mov bh, dl
	xor dh, dh
	mov dl, [esp+28h]
	shl edx, 0Ah
	or dh, 80h
	mov esi, edx
	xor dh, dh
	mov dl, bl
	shl edx, 5
	or esi, edx
	xor dh, dh
	mov dl, bh
	add eax, 2
	or edx, esi
	mov [eax-2], dx
	jmp loc_435B9C
;sub_435AD0 endp

off_435C40: dd loc_435CC9
	dd loc_435D2B ; jump table for switch statement
	dd loc_435D41
	dd loc_435D57

sub_435C50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 8
	mov ebx, esi
	mov esi, eax
	call sub_46FD80
	mov edx, [esi]
	xor edi, edi
	test edx, edx
	jnz loc_435D0F
	mov ecx, dword [dword_50A8A4]
	test ecx, ecx
	jz loc_435D0F
	cmp dword [dword_4D52FC], 0
	jz loc_435D13
	cmp ecx, 3
	jz loc_435D21

loc_435C90:
	mov eax, [esi+4]
	call sub_44B2C0
	mov eax, [eax+14h]
	call sub_437B70
	call sub_437C20
	mov ecx, eax
	mov edx, eax
	mov eax, esi
	call sub_437690
	mov eax, esi
	call sub_480830
	mov eax, dword [dword_50A8A4]
	dec eax
	cmp eax, 3 ; switch 4 cases
	ja loc_435CF1 ; jumptable 00435CC2 default case
	jmp off_435C40[eax*4] ; switch jump

loc_435CC9:
	mov eax, [esi+4] ; jumptable 00435CC2 case 0
	call sub_437AA0
	test ecx, ecx
	jz loc_435CE0
	mov edx, ecx
	mov eax, esi
	call sub_435D70
	mov edi, eax

loc_435CE0:
	mov eax, esi
	call sub_4371E0
	mov eax, edi
	mov edx, [esi+4]
	call sub_437B20

loc_435CF1:
	mov eax, esi ; jumptable 00435CC2 default case
	mov esi, esp
	call sub_480730

loc_435CFA:
	call sub_46FCF0
	mov esi, esp
	mov edi, ebx
	movsd
	movsd
	mov eax, ebx
	add esp, 8
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_435D0F:
	mov esi, esp
	jmp loc_435CFA

loc_435D13:
	mov eax, [esi+4]
	mov esi, esp
	mov dword dword_4D52F4[eax*4], edi
	jmp loc_435CFA

loc_435D21:
	call sub_437CD0
	jmp loc_435C90

loc_435D2B:
	test ecx, ecx ; jumptable 00435CC2 case 1
	jz loc_435D38
	mov edx, ecx
	mov eax, esi
	call sub_436730

loc_435D38:
	mov eax, esi
	call sub_4371E0
	jmp loc_435CF1 ; jumptable 00435CC2 default case

loc_435D41:
	test ecx, ecx ; jumptable 00435CC2 case 2
	jz loc_435D4E
	mov edx, ecx
	mov eax, esi
	call sub_436BA0

loc_435D4E:
	mov eax, esi
	call sub_4371E0
	jmp loc_435CF1 ; jumptable 00435CC2 default case

loc_435D57:
	mov eax, [esi+4] ; jumptable 00435CC2 case 3
	call sub_437AA0
	test ecx, ecx
	jz loc_435CF1 ; jumptable 00435CC2 default case
	mov edx, ecx
	mov eax, esi
	call sub_436280
	jmp loc_435CF1 ; jumptable 00435CC2 default case
;sub_435C50 endp

sub_435D70: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0ACh
	and esp, 0FFFFFFF8h
	mov [esp+9Ch], eax
	mov [esp+8Ch], edx
	mov ebx, [esp+8Ch]
	mov eax, [eax+4]
	xor edx, edx
	xor ecx, ecx
	mov [esp+94h], eax
	mov [esp+90h], edx
	mov eax, [esp+9Ch]
	mov edx, esp
	add eax, 44h
	mov [esp+98h], ecx
	call sub_4370F0
	test ebx, ebx
	jle loc_435E22
	mov edx, [esp+94h]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 8
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov [esp+0A4h], eax

loc_435DE7:
	mov eax, [esp+0A4h]
	cmp byte byte_501294[eax], 0
	jz loc_435E31

loc_435DF7:
	mov esi, [esp+0A4h]
	mov edi, [esp+98h]
	mov edx, [esp+8Ch]
	add esi, 18h
	inc edi
	mov [esp+0A4h], esi
	mov [esp+98h], edi
	cmp edi, edx
	jl loc_435DE7

loc_435E22:
	mov eax, [esp+90h]
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_435E31:
	fld qword [dbl_4CB7F4]
	fild dword dword_501280[eax]
	fmul st0, st1
	fild dword dword_501284[eax]
	fmul st0, st2
	fild dword dword_501288[eax]
	fmulp st3, st0
	mov ecx, [esp+90h]
	mov ebx, esp
	lea edx, [esp+68h]
	mov eax, 1
	inc ecx
	fxch st1
	fstp dword [esp+68h]
	fstp dword [esp+6Ch]
	mov [esp+90h], ecx
	lea ecx, [esp+44h]
	fstp dword [esp+70h]
	call sub_49C46C
	fld qword [dbl_4CB7FC]
	fld dword [esp+44h]
	fmul st0, st1
	fld dword [esp+48h]
	fmul st0, st2
	fld dword [esp+4Ch]
	mov edx, [esp+9Ch]
	fmulp st3, st0
	mov ebx, [edx+38h]
	fxch st1
	call __CHP
	fistp dword [esp+5Ch]
	mov eax, [esp+5Ch]
	call __CHP
	add eax, ebx
	fistp dword [esp+60h]
	mov [esp+50h], eax
	mov eax, [esp+60h]
	mov esi, [edx+3Ch]
	call __CHP
	add eax, esi
	fistp dword [esp+64h]
	mov [esp+54h], eax
	mov eax, [esp+64h]
	mov edi, [edx+40h]
	add eax, edi
	mov [esp+58h], eax
	cmp eax, 0FFFD0000h
	jle loc_435EEE
	test eax, eax
	jl loc_435F12

loc_435EEE:
	mov ecx, [esp+58h]
	test ecx, ecx
	jle loc_435EFE
	cmp ecx, dword [dword_50A8D0]
	jle loc_435F3B

loc_435EFE:
	mov eax, [esp+0A4h]
	xor dl, dl
	mov byte byte_501295[eax], dl
	jmp loc_435DF7

loc_435F12:
	mov eax, [esp+94h]
	mov ebx, edx
	mov edx, [esp+98h]
	call sub_437120
	mov eax, [esp+0A4h]
	xor dh, dh
	mov byte byte_501295[eax], dh
	jmp loc_435DF7

loc_435F3B:
	cmp ecx, 30000h
	jl loc_4360BE

loc_435F47:
	cmp dword [esp+58h], 0
	jnz loc_435F56
	mov dword [esp+58h], 1

loc_435F56:
	mov eax, [esp+58h]
	lea edx, [esp+88h]
	mov [esp+0A8h], eax
	lea edi, [esp+38h]
	fild dword [esp+0A8h]
	lea eax, [esp+84h]
	fstp dword [esp+84h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+88h]
	lea ebx, [esp+24h]
	lea eax, [esp+50h]
	lea esi, [esp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_43607B
	cmp eax, ecx
	jge loc_43607B
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_43604F
	cmp eax, ecx
	jl loc_43604F
	cmp eax, edx
	jle loc_436053
	or ebx, 4
	jmp loc_436053

loc_43604F:
	or ebx, 8
	nop

loc_436053:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_436076
	cmp eax, ecx
	jl loc_436076
	cmp eax, edx
	jle loc_436080
	or ebx, 2
	jmp loc_436080

loc_436076:
	or ebx, 1
	jmp loc_436080

loc_43607B:
	mov ebx, 10h

loc_436080:
	mov [edi], bl
	fld dword [esp+24h]
	fld dword [esp+28h]
	mov dh, [esp+38h]
	fxch st1
	call __CHP
	fxch st1
	call __CHP
	fxch st1
	fistp dword [esp+74h]
	fistp dword [esp+78h]
	test dh, dh
	jz loc_43611C
	mov eax, [esp+0A4h]
	xor cl, cl
	mov byte byte_501295[eax], cl
	jmp loc_435DF7

loc_4360BE:
	push ecx
	mov eax, [esp+58h]
	push eax
	mov edx, [esp+58h]
	push edx
	mov eax, [esp+0A0h]
	call sub_4373B0
	test eax, eax
	jz loc_435F47
	mov edx, 0FFFFFFFFh
	mov eax, [esp+94h]
	mov ebx, [esp+9Ch]
	call sub_444B40
	mov edx, [esp+98h]
	mov eax, [esp+94h]
	call sub_437120
	mov eax, [esp+0A4h]
	xor ch, ch
	mov byte byte_501295[eax], ch
	jmp loc_435DF7

loc_43611C:
	mov eax, [esp+0A4h]
	cmp byte byte_501295[eax], 0
	jz loc_43625F
	mov edx, [esp+0A4h]
	mov eax, [esp+74h]
	add eax, dword dword_50128C[edx]
	sar eax, 1
	mov edi, dword dword_501290[edx]
	mov [esp+7Ch], eax
	mov eax, [esp+78h]
	add eax, edi
	sar eax, 1
	mov [esp+80h], eax

loc_43615C:
	mov edx, [esp+0A4h]
	mov eax, [esp+74h]
	add eax, dword dword_50128C[edx]
	sar eax, 1
	mov ebx, dword dword_501290[edx]
	mov dword dword_50128C[edx], eax
	mov eax, [esp+78h]
	add eax, ebx
	sar eax, 1
	mov bh, 1
	mov dword dword_501290[edx], eax
	mov byte byte_501295[edx], bh
	mov edx, 38h
	lea eax, [esp+0A0h]
	call sub_46FD30
	test eax, eax
	jz loc_435E22
	mov eax, [esp+0A0h]
	mov dword [eax+4], 6
	mov eax, [esp+0A0h]
	mov dword [eax+28h], dword_50A888
	mov edi, [esp+0A0h]
	lea esi, [esp+7Ch]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+0A0h]
	lea esi, [esp+7Ch]
	lea edi, [edi+10h]
	movsd
	movsd
	mov edi, [esp+0A0h]
	lea esi, [esp+74h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov eax, [esp+0A0h]
	add dword [eax+18h], 2
	mov edi, [esp+0A0h]
	lea esi, [esp+74h]
	lea edi, [edi+20h]
	movsd
	movsd
	mov edx, [esp+0A0h]
	mov al, byte [dword_50A8B0]
	mov [edx+2Ch], al
	mov edx, [esp+0A0h]
	mov [edx+2Dh], al
	mov edx, [esp+0A0h]
	mov [edx+2Eh], al
	mov edx, [esp+0A0h]
	mov [edx+2Fh], al
	mov edx, [esp+0A0h]
	mov eax, [esp+2Ch]
	mov [edx+30h], eax
	mov edx, [esp+0A0h]
	mov eax, [esp+30h]
	mov [edx+34h], eax
	jmp loc_435DF7

loc_43625F:
	lea edi, [esp+7Ch]
	lea esi, [esp+74h]
	movsd
	movsd
	mov edi, eax
	lea esi, [esp+74h]
	lea edi, dword dword_50128C[edi]
	movsd
	movsd
	jmp loc_43615C
;sub_435D70 endp

sub_436280: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0A4h
	and esp, 0FFFFFFF8h
	mov [esp+98h], eax
	mov [esp+94h], edx
	add eax, 44h
	mov edx, esp
	mov ecx, [eax-40h]
	call sub_4370F0
	xor edx, edx
	mov ebx, [esp+94h]
	mov [esp+9Ch], edx
	test ebx, ebx
	jle loc_43653C
	lea eax, 0[ecx*4]
	add eax, ecx
	shl eax, 8
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov [esp+0A0h], eax

loc_4362DD:
	mov eax, [esp+0A0h]
	fld qword [dbl_4CB7E4]
	fild dword dword_501280[eax]
	fmul st0, st1
	fild dword dword_501284[eax]
	fmul st0, st2
	fild dword dword_501288[eax]
	fmulp st3, st0
	lea ecx, [esp+44h]
	mov ebx, esp
	lea edx, [esp+50h]
	mov eax, 1
	fxch st1
	fstp dword [esp+50h]
	fstp dword [esp+54h]
	fstp dword [esp+58h]
	call sub_49C46C
	fld qword [dbl_4CB7EC]
	fld dword [esp+44h]
	fmul st0, st1
	fld dword [esp+48h]
	fmul st0, st2
	fld dword [esp+4Ch]
	mov edx, [esp+98h]
	fmulp st3, st0
	mov ecx, [edx+38h]
	fxch st1
	call __CHP
	fistp dword [esp+5Ch]
	mov eax, [esp+5Ch]
	call __CHP
	add eax, ecx
	fistp dword [esp+60h]
	mov [esp+68h], eax
	mov eax, [esp+60h]
	mov ebx, [edx+3Ch]
	call __CHP
	add eax, ebx
	fistp dword [esp+64h]
	mov [esp+6Ch], eax
	mov eax, [esp+64h]
	mov esi, [edx+40h]
	add eax, esi
	mov [esp+70h], eax
	test eax, eax
	jle loc_436544
	cmp eax, dword [dword_50A8D0]
	jg loc_436544
	test eax, eax
	jnz loc_4363A7
	mov dword [esp+70h], 1

loc_4363A7:
	mov eax, [esp+70h]
	lea edx, [esp+90h]
	mov [esp+88h], eax
	lea edi, [esp+38h]
	fild dword [esp+88h]
	lea eax, [esp+8Ch]
	fstp dword [esp+8Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+90h]
	lea ebx, [esp+24h]
	lea eax, [esp+68h]
	lea esi, [esp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_4364CC
	cmp eax, ecx
	jge loc_4364CC
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4364A0
	cmp eax, ecx
	jl loc_4364A0
	cmp eax, edx
	jle loc_4364A4
	or ebx, 4
	jmp loc_4364A4

loc_4364A0:
	or ebx, 8
	nop

loc_4364A4:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_4364C7
	cmp eax, ecx
	jl loc_4364C7
	cmp eax, edx
	jle loc_4364D1
	or ebx, 2
	jmp loc_4364D1

loc_4364C7:
	or ebx, 1
	jmp loc_4364D1

loc_4364CC:
	mov ebx, 10h

loc_4364D1:
	mov [edi], bl
	fld dword [esp+24h]
	fld dword [esp+28h]
	mov ah, [esp+38h]
	fxch st1
	call __CHP
	fxch st1
	call __CHP
	fxch st1
	fistp dword [esp+7Ch]
	fistp dword [esp+80h]
	test ah, ah
	jz loc_436555
	mov eax, [esp+0A0h]
	xor bl, bl
	mov byte byte_501295[eax], bl

loc_43650D:
	mov esi, [esp+0A0h]
	mov edi, [esp+9Ch]
	mov edx, [esp+94h]
	add esi, 18h
	inc edi
	mov [esp+0A0h], esi
	mov [esp+9Ch], edi
	cmp edi, edx
	jl loc_4362DD

loc_43653C:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_436544:
	mov eax, [esp+0A0h]
	xor bh, bh
	mov byte byte_501295[eax], bh
	jmp loc_43650D

loc_436555:
	mov eax, [esp+0A0h]
	cmp byte byte_501295[eax], 0
	jz loc_4366FF
	mov edx, [esp+0A0h]
	mov eax, [esp+7Ch]
	add eax, dword dword_50128C[edx]
	sar eax, 1
	mov edi, dword dword_501290[edx]
	mov [esp+74h], eax
	mov eax, [esp+80h]
	add eax, edi
	sar eax, 1
	mov [esp+78h], eax

loc_436595:
	mov edx, [esp+0A0h]
	mov eax, [esp+7Ch]
	add eax, dword dword_50128C[edx]
	sar eax, 1
	mov ebx, dword dword_501290[edx]
	mov dword dword_50128C[edx], eax
	mov eax, [esp+80h]
	add eax, ebx
	sar eax, 1
	mov dword dword_501290[edx], eax
	mov eax, edx
	mov dh, 1
	mov esi, dword [dword_50A8A8]
	mov byte byte_501295[eax], dh
	mov edx, [esp+70h]
	imul edx, esi
	mov edi, dword [dword_50A8D0]
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov edx, esi
	sub edx, eax
	mov eax, edx
	cmp edx, 1
	jge loc_43671C
	mov ebx, 1

loc_4365FD:
	mov eax, [esp+9Ch]
	mov edx, eax
	mov ecx, 50h
	sar edx, 1Fh
	idiv ecx
	lea eax, [esp+84h]
	mov ecx, edx
	mov edx, 38h
	call sub_46FD30
	test eax, eax
	jz loc_43653C
	mov eax, [esp+84h]
	mov dword [eax+4], 6
	mov eax, [esp+84h]
	mov dword [eax+28h], dword_50A888
	mov edi, [esp+84h]
	lea esi, [esp+74h]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+84h]
	lea esi, [esp+74h]
	lea edi, [edi+10h]
	movsd
	movsd
	mov edi, [esp+84h]
	lea esi, [esp+7Ch]
	lea edi, [edi+18h]
	movsd
	movsd
	mov eax, [esp+84h]
	add [eax+18h], ebx
	mov edi, [esp+84h]
	lea esi, [esp+7Ch]
	lea edi, [edi+20h]
	movsd
	movsd
	mov al, byte [dword_50A8B0]
	mov edx, [esp+84h]
	sub al, cl
	mov [edx+2Ch], al
	mov eax, [esp+84h]
	mov edx, [esp+84h]
	mov al, [eax+2Ch]
	mov [edx+2Dh], al
	mov eax, [esp+84h]
	mov edx, [esp+84h]
	mov al, [eax+2Dh]
	mov [edx+2Eh], al
	mov eax, [esp+84h]
	mov edx, [esp+84h]
	mov al, [eax+2Eh]
	mov [edx+2Fh], al
	mov edx, [esp+84h]
	mov eax, [esp+2Ch]
	mov [edx+30h], eax
	mov edx, [esp+84h]
	mov eax, [esp+30h]
	mov [edx+34h], eax
	jmp loc_43650D

loc_4366FF:
	lea edi, [esp+74h]
	lea esi, [esp+7Ch]
	movsd
	movsd
	mov edi, eax
	lea esi, [esp+7Ch]
	lea edi, dword dword_50128C[edi]
	movsd
	movsd
	jmp loc_436595

loc_43671C:
	mov ebx, edx
	jmp loc_4365FD
;sub_436280 endp

sub_436730: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0A4h
	and esp, 0FFFFFFF8h
	mov [esp+94h], eax
	mov [esp+84h], edx
	mov eax, [eax+4]
	mov [esp+88h], eax
	mov eax, [esp+94h]
	mov edx, esp
	add eax, 44h
	call sub_4370F0
	xor edx, edx
	mov ecx, [esp+84h]
	mov [esp+90h], edx
	test ecx, ecx
	jle loc_4367D9
	mov edx, [esp+88h]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 8
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov [esp+9Ch], eax

loc_43679E:
	mov eax, [esp+9Ch]
	cmp byte byte_501294[eax], 0
	jz loc_4367E1

loc_4367AE:
	mov ebx, [esp+9Ch]
	mov esi, [esp+90h]
	mov edi, [esp+84h]
	add ebx, 18h
	inc esi
	mov [esp+9Ch], ebx
	mov [esp+90h], esi
	cmp esi, edi
	jl loc_43679E

loc_4367D9:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4367E1:
	fld qword [dbl_4CB7D4]
	fild dword dword_501280[eax]
	fmul st0, st1
	fild dword dword_501284[eax]
	fmul st0, st2
	fild dword dword_501288[eax]
	fmulp st3, st0
	lea ecx, [esp+5Ch]
	mov ebx, esp
	lea edx, [esp+68h]
	mov eax, 1
	fxch st1
	fstp dword [esp+68h]
	fstp dword [esp+6Ch]
	fstp dword [esp+70h]
	call sub_49C46C
	fld qword [dbl_4CB7DC]
	fld dword [esp+5Ch]
	fmul st0, st1
	fld dword [esp+60h]
	fmul st0, st2
	fld dword [esp+64h]
	mov edx, [esp+94h]
	fmulp st3, st0
	mov ecx, [edx+38h]
	fxch st1
	call __CHP
	fistp dword [esp+44h]
	mov eax, [esp+44h]
	call __CHP
	add eax, ecx
	fistp dword [esp+48h]
	mov [esp+50h], eax
	mov eax, [esp+48h]
	mov ebx, [edx+3Ch]
	call __CHP
	add eax, ebx
	fistp dword [esp+4Ch]
	mov [esp+54h], eax
	mov eax, [esp+4Ch]
	mov esi, [edx+40h]
	add eax, esi
	mov [esp+58h], eax
	cmp eax, 0FFFD0000h
	jle loc_436893
	test eax, eax
	jl loc_436B40

loc_436893:
	mov edx, [esp+58h]
	test edx, edx
	jle loc_4367AE
	cmp edx, dword [dword_50A8D0]
	jg loc_4367AE
	cmp edx, 30000h
	jl loc_436B5A

loc_4368B7:
	mov edx, [esp+58h]
	mov ecx, dword [dword_50A8A8]
	imul edx, ecx
	mov ebx, dword [dword_50A8D0]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, ecx
	sub edx, eax
	lea eax, [edx+edx]
	cmp eax, 1
	jge loc_4368E2
	mov eax, 1

loc_4368E2:
	mov esi, [esp+58h]
	mov [esp+8Ch], eax
	test esi, esi
	jnz loc_4368F9
	mov dword [esp+58h], 1

loc_4368F9:
	mov eax, [esp+58h]
	lea edx, [esp+80h]
	mov [esp+0A0h], eax
	lea edi, [esp+38h]
	fild dword [esp+0A0h]
	lea eax, [esp+7Ch]
	fstp dword [esp+7Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+80h]
	lea ebx, [esp+24h]
	lea eax, [esp+50h]
	lea esi, [esp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_436A18
	cmp eax, ecx
	jge loc_436A18
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4369EC
	cmp eax, ecx
	jl loc_4369EC
	cmp eax, edx
	jle loc_4369F0
	or ebx, 4
	jmp loc_4369F0

loc_4369EC:
	or ebx, 8
	nop

loc_4369F0:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_436A13
	cmp eax, ecx
	jl loc_436A13
	cmp eax, edx
	jle loc_436A1D
	or ebx, 2
	jmp loc_436A1D

loc_436A13:
	or ebx, 1
	jmp loc_436A1D

loc_436A18:
	mov ebx, 10h

loc_436A1D:
	mov [edi], bl
	fld dword [esp+24h]
	fld dword [esp+28h]
	mov dh, [esp+38h]
	fxch st1
	call __CHP
	fxch st1
	call __CHP
	fxch st1
	fistp dword [esp+74h]
	fistp dword [esp+78h]
	test dh, dh
	jnz loc_4367AE
	mov edx, 38h
	lea eax, [esp+98h]
	call sub_46FD30
	test eax, eax
	jz loc_4367D9
	mov eax, [esp+98h]
	mov dword [eax+4], 6
	mov eax, [esp+98h]
	mov dword [eax+28h], dword_50A888
	mov edi, [esp+98h]
	lea esi, [esp+74h]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+98h]
	lea esi, [esp+74h]
	lea edi, [edi+10h]
	movsd
	movsd
	mov eax, [esp+98h]
	mov edx, [esp+8Ch]
	add [eax+8], edx
	mov edi, [esp+98h]
	lea esi, [esp+74h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov eax, [esp+98h]
	add [eax+1Ch], edx
	mov edi, [esp+98h]
	lea esi, [esp+74h]
	lea edi, [edi+20h]
	movsd
	movsd
	mov eax, [esp+98h]
	add [eax+24h], edx
	mov eax, [esp+98h]
	add [eax+20h], edx
	mov eax, [esp+98h]
	mov dl, byte [dword_50A8B0]
	mov [eax+2Ch], dl
	mov al, dl
	mov edx, [esp+98h]
	mov [edx+2Dh], al
	mov edx, [esp+98h]
	mov [edx+2Eh], al
	mov edx, [esp+98h]
	mov [edx+2Fh], al
	mov edx, [esp+98h]
	mov eax, [esp+2Ch]
	mov [edx+30h], eax
	mov edx, [esp+98h]
	mov eax, [esp+30h]
	mov [edx+34h], eax
	jmp loc_4367AE

loc_436B40:
	mov eax, [esp+88h]
	mov ebx, edx
	mov edx, [esp+90h]
	call sub_437120
	jmp loc_4367AE

loc_436B5A:
	push edx
	mov edi, [esp+58h]
	push edi
	mov eax, [esp+58h]
	push eax
	mov eax, [esp+94h]
	call sub_4373B0
	test eax, eax
	jz loc_4368B7
	mov ebx, [esp+94h]
	mov edx, [esp+90h]
	mov eax, [esp+88h]
	call sub_437120
	jmp loc_4367AE
;sub_436730 endp

sub_436BA0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0A4h
	and esp, 0FFFFFFF8h
	mov [esp+90h], eax
	mov [esp+88h], edx
	mov eax, [eax+4]
	mov [esp+8Ch], eax
	mov eax, [esp+90h]
	mov edx, esp
	add eax, 44h
	call sub_4370F0
	cmp dword [dword_4D54DC], 0
	jnz loc_436C68
	mov eax, 1

loc_436BEB:
	mov ebx, [esp+88h]
	xor ecx, ecx
	mov dword [dword_4D54DC], eax
	mov [esp+98h], ecx
	test ebx, ebx
	jle loc_436C60
	mov edx, [esp+8Ch]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 8
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov [esp+94h], eax

loc_436C25:
	mov eax, [esp+94h]
	cmp byte byte_501294[eax], 0
	jz loc_436C6F

loc_436C35:
	mov esi, [esp+94h]
	mov edi, [esp+98h]
	mov edx, [esp+88h]
	add esi, 18h
	inc edi
	mov [esp+94h], esi
	mov [esp+98h], edi
	cmp edi, edx
	jl loc_436C25

loc_436C60:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_436C68:
	xor eax, eax
	jmp loc_436BEB

loc_436C6F:
	fld qword [dbl_4CB7C4]
	fild dword dword_501280[eax]
	fmul st0, st1
	fild dword dword_501284[eax]
	fmul st0, st2
	fild dword dword_501288[eax]
	fmulp st3, st0
	lea ecx, [esp+50h]
	mov ebx, esp
	lea edx, [esp+44h]
	mov eax, 1
	fxch st1
	fstp dword [esp+44h]
	fstp dword [esp+48h]
	fstp dword [esp+4Ch]
	call sub_49C46C
	fld qword [dbl_4CB7CC]
	fld dword [esp+50h]
	fmul st0, st1
	fld dword [esp+54h]
	fmul st0, st2
	fld dword [esp+58h]
	mov edx, [esp+90h]
	fmulp st3, st0
	mov ecx, [edx+38h]
	fxch st1
	call __CHP
	fistp dword [esp+68h]
	mov eax, [esp+68h]
	call __CHP
	add eax, ecx
	fistp dword [esp+6Ch]
	mov [esp+5Ch], eax
	mov eax, [esp+6Ch]
	mov ebx, [edx+3Ch]
	call __CHP
	add eax, ebx
	fistp dword [esp+70h]
	mov [esp+60h], eax
	mov eax, [esp+70h]
	mov esi, [edx+40h]
	add eax, esi
	mov [esp+64h], eax
	cmp eax, 0FFFD0000h
	jle loc_436D21
	test eax, eax
	jl loc_437001

loc_436D21:
	mov edx, [esp+64h]
	test edx, edx
	jle loc_436C35
	cmp edx, dword [dword_50A8D0]
	jg loc_436C35
	cmp edx, 11999h
	jge loc_43701B
	mov eax, 11999h

loc_436D4A:
	mov [esp+64h], eax
	cmp eax, 30000h
	jl loc_437022

loc_436D59:
	mov eax, [esp+64h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ecx, eax
	mov eax, dword [dword_50A8A8]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	cmp eax, 1
	jge loc_437071
	mov edx, 1

loc_436D86:
	mov ecx, dword [dword_50A8A8]
	cmp edx, ecx
	jge loc_437078
	cmp eax, 1
	jge loc_436D9E
	mov eax, 1

loc_436D9E:
	mov ebx, [esp+64h]
	mov [esp+9Ch], eax
	test ebx, ebx
	jnz loc_436DB5
	mov dword [esp+64h], 1

loc_436DB5:
	mov eax, [esp+64h]
	lea edx, [esp+84h]
	mov [esp+0A0h], eax
	lea edi, [esp+38h]
	fild dword [esp+0A0h]
	lea eax, [esp+80h]
	fstp dword [esp+80h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+84h]
	lea ebx, [esp+24h]
	lea eax, [esp+5Ch]
	lea esi, [esp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_436EDA
	cmp eax, ecx
	jge loc_436EDA
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_436EAE
	cmp eax, ecx
	jl loc_436EAE
	cmp eax, edx
	jle loc_436EB2
	or ebx, 4
	jmp loc_436EB2

loc_436EAE:
	or ebx, 8
	nop

loc_436EB2:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_436ED5
	cmp eax, ecx
	jl loc_436ED5
	cmp eax, edx
	jle loc_436EDF
	or ebx, 2
	jmp loc_436EDF

loc_436ED5:
	or ebx, 1
	jmp loc_436EDF

loc_436EDA:
	mov ebx, 10h

loc_436EDF:
	mov [edi], bl
	fld dword [esp+24h]
	fld dword [esp+28h]
	mov dh, [esp+38h]
	fxch st1
	call __CHP
	fxch st1
	call __CHP
	fxch st1
	fistp dword [esp+74h]
	fistp dword [esp+78h]
	test dh, dh
	jnz loc_436C35
	mov edx, 38h
	lea eax, [esp+7Ch]
	call sub_46FD30
	test eax, eax
	jz loc_436C60
	mov eax, [esp+7Ch]
	mov dword [eax+4], 4
	mov eax, [esp+7Ch]
	mov dword [eax+28h], dword_50A888
	mov eax, [esp+98h]
	mov edi, dword [dword_4D54DC]
	and eax, 1
	xor eax, edi
	jnz loc_43707F
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+8]
	movsd
	movsd
	mov eax, [esp+7Ch]
	mov edx, [esp+9Ch]
	add [eax+8], edx
	mov eax, [esp+7Ch]
	sub [eax+0Ch], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+10h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	sub [eax+10h], edx
	mov eax, [esp+7Ch]
	sub [eax+14h], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	sub [eax+18h], edx
	mov eax, [esp+7Ch]
	add [eax+1Ch], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+20h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	add [eax+20h], edx

loc_436FBD:
	mov eax, [esp+7Ch]
	add [eax+24h], edx
	mov eax, [esp+7Ch]
	mov dl, byte [dword_50A8B0]
	mov [eax+2Ch], dl
	mov eax, [esp+7Ch]
	mov [eax+2Dh], dl
	mov eax, [esp+7Ch]
	mov [eax+2Eh], dl
	mov eax, [esp+7Ch]
	mov [eax+2Fh], dl
	mov edx, [esp+7Ch]
	mov eax, [esp+2Ch]
	mov [edx+30h], eax
	mov edx, [esp+7Ch]
	mov eax, [esp+30h]
	mov [edx+34h], eax
	jmp loc_436C35

loc_437001:
	mov eax, [esp+8Ch]
	mov ebx, edx
	mov edx, [esp+98h]
	call sub_437120
	jmp loc_436C35

loc_43701B:
	mov eax, edx
	jmp loc_436D4A

loc_437022:
	push eax
	mov edi, [esp+64h]
	push edi
	mov eax, [esp+64h]
	push eax
	mov eax, [esp+98h]
	call sub_4373B0
	test eax, eax
	jz loc_436D59
	mov ebx, [esp+90h]
	mov edx, [esp+98h]
	mov eax, [esp+8Ch]
	call sub_437120
	mov edx, 5
	mov eax, [esp+8Ch]
	call sub_444B40
	jmp loc_436C35

loc_437071:
	mov edx, eax
	jmp loc_436D86

loc_437078:
	mov eax, ecx
	jmp loc_436D9E

loc_43707F:
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+8]
	movsd
	movsd
	mov eax, [esp+7Ch]
	mov edx, [esp+9Ch]
	sub [eax+8], edx
	mov eax, [esp+7Ch]
	sub [eax+0Ch], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+10h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	add [eax+10h], edx
	mov eax, [esp+7Ch]
	sub [eax+14h], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	add [eax+18h], edx
	mov eax, [esp+7Ch]
	add [eax+1Ch], edx
	mov edi, [esp+7Ch]
	lea esi, [esp+74h]
	lea edi, [edi+20h]
	movsd
	movsd
	mov eax, [esp+7Ch]
	sub [eax+20h], edx
	jmp loc_436FBD
;sub_436BA0 endp

sub_4370F0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	lea ecx, [eax+24h]
	fld qword [dbl_4CB7BC]

loc_4370FC:
	fild dword [eax]
	fmul st0, st1
	add edx, 4
	add eax, 4
	fstp dword [edx-4]
	cmp eax, ecx
	jnz loc_4370FC
	fstp st0
	pop ecx
	ret
;sub_4370F0 endp

sub_437120: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	shl eax, 2
	add eax, ecx
	shl eax, 8
	mov ecx, eax
	shl eax, 4
	sub eax, ecx
	mov ecx, eax
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add ecx, eax
	mov eax, dword [dword_50A8D8]
	mov dword dword_501284[ecx], eax
	call sub_488074
	mov edx, eax
	mov esi, dword [dword_50A8D0]
	shl edx, 10h
	add esi, esi
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov esi, dword [dword_50A8D0]
	sub edx, esi
	mov dword dword_501280[ecx], edx
	call sub_488074
	mov edx, eax
	mov esi, dword [dword_50A8D0]
	shl edx, 10h
	add esi, esi
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov edi, dword [dword_50A8D0]
	sub edx, edi
	mov dword dword_501288[ecx], edx
	mov ebp, dword dword_501280[ecx]
	mov eax, [ebx+8]
	add eax, ebp
	mov dword dword_501280[ecx], eax
	mov edx, dword dword_501284[ecx]
	mov eax, [ebx+0Ch]
	add eax, edx
	mov dword dword_501284[ecx], eax
	mov eax, [ebx+10h]
	mov ebx, dword dword_501288[ecx]
	add eax, ebx
	mov dword dword_501288[ecx], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_437120 endp

sub_4371E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov ebx, dword [dword_50A8F0]
	xor ecx, ecx
	mov edx, [eax+4]
	mov [esp+30h], ecx
	test ebx, ebx
	jle loc_43724A
	lea ecx, 0[edx*4]
	sub ecx, edx
	shl ecx, 3
	add ecx, edx
	shl ecx, 4

loc_43720D:
	lea edi, [esp+20h]
	mov eax, dword dword_500F70[ecx]
	lea esi, dword dword_500F60[ecx]
	movzx ebp, byte byte_500F6C[ecx]
	mov [esp+2Ch], eax
	mov eax, dword dword_500F68[ecx]
	movsd
	movsd
	test eax, eax
	jnz loc_437254

loc_437234:
	mov esi, [esp+30h]
	mov edi, dword [dword_50A8F0]
	inc esi
	add ecx, 14h
	mov [esp+30h], esi
	cmp esi, edi
	jl loc_43720D

loc_43724A:
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_437254:
	mov edx, dword [dword_50A8FC]
	imul edx, eax
	mov esi, dword [dword_50A8F4]
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov edi, dword [dword_50A8A4]
	mov [esp+34h], eax
	cmp edi, 1
	jnz loc_43728B
	mov edx, dword dword_500F68[ecx]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov ebp, eax

loc_43728B:
	mov eax, [esp+2Ch]
	call sub_49C1C0
	imul eax, ebp
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, eax
	mov eax, [esp+2Ch]
	call sub_49C150
	imul eax, ebp
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [esp+20h]
	sub edx, eax
	mov [esp], edx
	mov edx, [esp+24h]
	add edx, ebx
	mov [esp+4], edx
	mov edx, [esp+20h]
	add edx, ebx
	mov [esp+8], edx
	mov edx, [esp+24h]
	add edx, eax
	mov [esp+0Ch], edx
	mov edx, [esp+20h]
	add edx, eax
	mov [esp+10h], edx
	mov edx, [esp+24h]
	sub edx, ebx
	mov [esp+14h], edx
	mov edx, [esp+20h]
	sub edx, ebx
	mov [esp+18h], edx
	mov edx, [esp+24h]
	sub edx, eax
	lea eax, [esp+28h]
	mov [esp+1Ch], edx
	mov edx, 38h
	call sub_46FD30
	test eax, eax
	jz loc_43724A
	mov eax, [esp+28h]
	mov dword [eax+4], 6
	mov eax, [esp+28h]
	mov dword [eax+28h], dword_50A900
	mov edi, [esp+28h]
	lea esi, [esp+8]
	lea edi, [edi+8]
	movsd
	movsd
	mov edi, [esp+28h]
	mov esi, esp
	lea edi, [edi+10h]
	movsd
	movsd
	mov edi, [esp+28h]
	lea esi, [esp+18h]
	lea edi, [edi+18h]
	movsd
	movsd
	mov edi, [esp+28h]
	lea esi, [esp+10h]
	lea edi, [edi+20h]
	movsd
	movsd
	mov eax, [esp+28h]
	mov dl, [esp+34h]
	mov [eax+2Ch], dl
	mov eax, [esp+28h]
	mov [eax+2Dh], dl
	mov eax, [esp+28h]
	mov [eax+2Eh], dl
	mov eax, [esp+28h]
	mov [eax+2Fh], dl
	mov ebx, [esp+28h]
	mov edx, [esp+28h]
	mov eax, 11999h
	add ebx, 34h
	add edx, 30h
	call sub_433AE0
	jmp loc_437234
;sub_4371E0 endp

sub_4373B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov [esp+30h], eax
	cmp dword [dword_540F28], 0
	jnz loc_437658
	mov ecx, dword [dword_50A8F0]
	xor ebp, ebp
	test ecx, ecx
	jle loc_43767A
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add eax, edx
	mov ebx, dword [dword_50A8F0]
	shl eax, 4

loc_4373EF:
	cmp dword dword_500F68[eax], 0
	jnz loc_43766E
	cmp dword [esp+58h], 0
	jnz loc_43740B
	mov dword [esp+58h], 1

loc_43740B:
	fild dword [esp+58h]
	lea edx, [esp+2Ch]
	lea eax, [esp+28h]
	lea edi, [esp+14h]
	fstp dword [esp+28h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+2Ch]
	mov ebx, esp
	lea eax, [esp+50h]
	mov esi, esp
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_437512
	cmp eax, ecx
	jge loc_437512
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4374E6
	cmp eax, ecx
	jl loc_4374E6
	cmp eax, edx
	jle loc_4374EA
	or ebx, 4
	jmp loc_4374EA

loc_4374E6:
	or ebx, 8
	nop

loc_4374EA:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_43750D
	cmp eax, ecx
	jl loc_43750D
	cmp eax, edx
	jle loc_437517
	or ebx, 2
	jmp loc_437517

loc_43750D:
	or ebx, 1
	jmp loc_437517

loc_437512:
	mov ebx, 10h

loc_437517:
	mov [edi], bl
	fld dword [esp]
	fld dword [esp+4]
	mov ah, [esp+14h]
	fxch st1
	call __CHP
	fxch st1
	call __CHP
	fxch st1
	fistp dword [esp+20h]
	fistp dword [esp+24h]
	test ah, ah
	jnz loc_437658
	mov ecx, dword [dword_50A8F4]
	sar ecx, 2
	cmp ecx, 1
	jle loc_43765C

loc_437556:
	xor edx, edx
	call sub_488074
	div ecx
	mov ecx, dword [dword_50A8F4]
	sub ecx, edx
	mov edx, [esp+30h]
	lea esi, 0[edx*4]
	sub esi, edx
	shl esi, 3
	add esi, edx
	mov edx, ebp
	lea eax, 0[ebp*4]
	shl esi, 4
	add eax, ebp
	lea edi, dword dword_500F60[esi+eax*4]
	mov dword dword_500F68[esi+eax*4], ecx
	lea esi, [esp+20h]
	xor edx, ebp
	movsd
	movsd
	call sub_488074
	div dword [dword_50A8F8]
	mov eax, dword [dword_50A8F8]
	mov ecx, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp ecx, eax
	jbe loc_4375CD
	call sub_488074
	mov ebx, dword [dword_50A8F8]
	xor edx, edx
	div ebx
	mov eax, edx

loc_4375CD:
	mov esi, dword [dword_50A8F8]
	cmp eax, esi
	jnb loc_43766A
	call sub_488074
	mov edi, dword [dword_50A8F8]
	xor edx, edx
	div edi
	mov ecx, edx
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp ecx, eax
	jbe loc_437666
	call sub_488074
	mov ecx, dword [dword_50A8F8]
	xor edx, edx
	div ecx

loc_43760A:
	mov eax, edx

loc_43760C:
	mov edx, [esp+30h]
	mov bl, al
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add edx, eax
	lea eax, 0[ebp*4]
	add eax, ebp
	shl edx, 4
	shl eax, 2
	add edx, eax
	mov byte byte_500F6C[edx], bl
	call sub_488074
	and eax, 0FFFFh
	mov dword dword_500F70[edx], eax
	mov eax, 1

loc_43764C:
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 0Ch

loc_437658:
	xor eax, eax
	jmp loc_43764C

loc_43765C:
	mov ecx, 1
	jmp loc_437556

loc_437666:
	mov edx, eax
	jmp loc_43760A

loc_43766A:
	mov eax, esi
	jmp loc_43760C

loc_43766E:
	inc ebp
	add eax, 14h
	cmp ebp, ebx
	jl loc_4373EF

loc_43767A:
	xor eax, eax
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 0Ch
;sub_4373B0 endp

sub_437690: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov ebp, edx
	mov edx, [eax+4]
	lea edi, [esp+0Ch]
	mov ecx, dword [dword_540F48]
	mov ebx, dword dword_50A880[edx*4]
	lea esi, [eax+8]
	sub ecx, ebx
	movsd
	movsd
	movsd
	cmp ecx, 1
	jg loc_4376C4

loc_4376BB:
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4376C4:
	call sub_449830
	test eax, eax
	jz loc_437869
	cmp dword [dword_50A8A4], 3
	jge loc_437869
	mov eax, 1

loc_4376E3:
	mov edi, dword [dword_50A8F0]
	mov [esp+18h], eax
	mov eax, dword [dword_540F48]
	xor ebx, ebx
	mov dword dword_50A880[edx*4], eax
	test edi, edi
	jle loc_437731
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	lea ecx, [edx+eax]
	mov eax, dword [dword_50A8F0]
	shl ecx, 4

loc_437716:
	mov esi, dword dword_500F68[ecx]
	test esi, esi
	jz loc_437729
	lea edi, [esi-1]
	mov dword dword_500F68[ecx], edi

loc_437729:
	inc ebx
	add ecx, 14h
	cmp ebx, eax
	jl loc_437716

loc_437731:
	mov ecx, dword [dword_50A8AC]
	xor ebx, ebx
	test ecx, ecx
	jle loc_4376BB
	lea ecx, 0[edx*4]
	add ecx, edx
	shl ecx, 8
	mov eax, ecx
	shl ecx, 4
	xor esi, esi
	sub ecx, eax

loc_437756:
	mov edi, dword [dword_50A8E4]
	add dword dword_501280[ecx], edi
	mov eax, dword [dword_50A8E8]
	add dword dword_501284[ecx], eax
	mov edi, dword [dword_50A8EC]
	mov edx, dword dword_501288[ecx]
	add edx, edi
	mov eax, dword [dword_50A8A4]
	mov dword dword_501288[ecx], edx
	cmp eax, 2
	jnz loc_437870
	cmp ebx, ebp
	jge loc_437870
	cmp byte byte_501294[ecx], 0
	jnz loc_437870
	mov edx, dword [dword_540F48]
	shl edx, 8
	add edx, esi
	mov eax, edx
	call sub_49C150
	sar eax, 4
	mov edi, dword dword_501280[ecx]
	add edi, eax
	mov eax, edx
	mov dword dword_501280[ecx], edi
	call sub_49C1C0
	sar eax, 4
	add dword dword_501288[ecx], eax

loc_4377D7:
	mov edi, [esp+0Ch]
	mov eax, dword dword_501280[ecx]
	sub eax, edi
	mov edx, [esp+10h]
	mov [esp], eax
	mov eax, dword dword_501284[ecx]
	sub eax, edx
	mov edi, [esp+14h]
	mov [esp+4], eax
	mov eax, dword dword_501288[ecx]
	sub eax, edi
	mov edx, dword [dword_50A8D4]
	mov [esp+8], eax
	mov eax, [esp+4]
	cmp eax, edx
	jl loc_4378BC
	cmp eax, dword [dword_50A8D8]
	jg loc_4378BC
	mov eax, [esp]
	test eax, eax
	jle loc_4378AF

loc_43782F:
	cmp eax, dword [dword_50A8D0]
	jg loc_4378BC
	mov edi, [esp+8]
	test edi, edi
	jle loc_4378B6
	mov eax, edi

loc_437845:
	cmp eax, dword [dword_50A8D0]
	jg loc_4378BC

loc_43784D:
	mov eax, dword [dword_50A8AC]
	add esi, 100h
	inc ebx
	add ecx, 18h
	cmp ebx, eax
	jge loc_4376BB
	jmp loc_437756

loc_437869:
	xor eax, eax
	jmp loc_4376E3

loc_437870:
	cmp dword [dword_50A8A4], 3
	jnz loc_4377D7
	cmp ebx, ebp
	jge loc_4377D7
	cmp byte byte_501294[ecx], 0
	jnz loc_4377D7
	mov eax, dword [dword_540F48]
	shl eax, 8
	add eax, esi
	call sub_49C150
	sar eax, 4
	add dword dword_501284[ecx], eax
	jmp loc_4377D7

loc_4378AF:
	neg eax
	jmp loc_43782F

loc_4378B6:
	mov eax, edi
	neg eax
	jmp loc_437845

loc_4378BC:
	mov al, [esp+18h]
	mov edi, dword [dword_50A8D0]
	mov byte byte_501294[ecx], al
	cmp edi, [esp]
	jge loc_437A34
	mov edx, edi
	mov [esp], edi
	xor al, al
	neg edx
	mov byte byte_501295[ecx], al
	call sub_488074
	shl eax, 10h
	mov [esp], edx

loc_4378EF:
	mov edx, eax
	mov edi, dword [dword_50A8DC]
	sar edx, 1Fh
	idiv edi
	mov eax, dword [dword_50A8D4]
	add eax, edx
	mov [esp+4], eax
	call sub_488074
	mov edx, eax
	mov edi, dword [dword_50A8D0]
	shl edx, 10h
	add edi, edi
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov eax, dword [dword_50A8D0]
	sub edx, eax
	mov [esp+8], edx

loc_43792B:
	mov eax, [esp+8]
	mov edx, dword [dword_50A8D0]
	cmp eax, edx
	jle loc_437A5B
	mov eax, dword [dword_50A8D0]
	xor dl, dl
	mov [esp+8], eax
	mov byte byte_501295[ecx], dl
	mov edx, eax
	call sub_488074
	neg edx

loc_437957:
	shl eax, 10h
	mov [esp+8], edx
	mov edx, eax
	mov edi, dword [dword_50A8DC]
	sar edx, 1Fh
	idiv edi
	mov eax, dword [dword_50A8D4]
	add eax, edx
	mov [esp+4], eax
	call sub_488074
	mov edx, eax
	mov edi, dword [dword_50A8D0]
	shl edx, 10h
	add edi, edi
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov eax, dword [dword_50A8D0]
	sub edx, eax
	mov [esp+8], edx

loc_43799A:
	mov eax, [esp+4]
	cmp eax, dword [dword_50A8D8]
	jle loc_437A7D
	xor al, al
	mov byte byte_501295[ecx], al
	mov eax, dword [dword_50A8D4]
	mov [esp+4], eax

loc_4379BB:
	call sub_488074
	mov edx, eax
	mov edi, dword [dword_50A8D0]
	shl edx, 10h
	add edi, edi
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	sub edx, dword [dword_50A8D0]
	call sub_488074
	mov [esp], edx
	mov edx, eax
	mov edi, dword [dword_50A8D0]
	shl edx, 10h
	add edi, edi
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov edi, dword [dword_50A8D0]
	sub edx, edi
	mov [esp+8], edx

loc_437A02:
	mov eax, [esp+0Ch]
	add eax, [esp]
	mov edi, [esp+4]
	mov dword dword_501280[ecx], eax
	mov eax, [esp+10h]
	add eax, edi
	mov edx, [esp+8]
	mov dword dword_501284[ecx], eax
	mov eax, [esp+14h]
	add eax, edx
	mov dword dword_501288[ecx], eax
	jmp loc_43784D

loc_437A34:
	mov eax, edi
	mov edx, [esp]
	neg eax
	cmp eax, edx
	jle loc_43792B
	xor dh, dh
	mov byte byte_501295[ecx], dh
	call sub_488074
	shl eax, 10h
	mov [esp], edi
	jmp loc_4378EF

loc_437A5B:
	mov eax, edx
	mov edi, [esp+8]
	neg eax
	cmp eax, edi
	jle loc_43799A
	xor ah, ah
	mov byte byte_501295[ecx], ah
	call sub_488074
	jmp loc_437957

loc_437A7D:
	cmp eax, dword [dword_50A8D4]
	jge loc_437A02
	mov eax, dword [dword_50A8D8]
	xor dh, dh
	mov [esp+4], eax
	mov byte byte_501295[ecx], dh
	jmp loc_4379BB
;sub_437690 endp

sub_437AA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	call sub_44B660
	mov esi, eax
	cmp eax, 3
	jg loc_437AC9
	cmp eax, 1
	jl loc_437AC9
	cmp dword dword_5128C8[ecx*4], 0
	jz loc_437AC9
	and esi, 0FF000000h

loc_437AC9:
	cmp esi, dword dword_50A91C[ecx*4]
	jz loc_437B08
	mov edi, dword [dword_50A8AC]
	xor edx, edx
	test edi, edi
	jle loc_437B08
	lea eax, 0[ecx*4]
	add eax, ecx
	shl eax, 8
	mov ebx, eax
	shl eax, 4
	mov ebp, dword [dword_50A8AC]
	sub eax, ebx

loc_437AF7:
	add eax, 18h
	xor bl, bl
	inc edx
	mov byte byte_50127D[eax], bl
	cmp edx, ebp
	jl loc_437AF7
	nop

loc_437B08:
	mov dword dword_50A91C[ecx*4], esi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_437AA0 endp

sub_437B20: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, edx
	cmp dword [dword_50A8AC], 0
	jz loc_437B57
	test eax, eax
	jz loc_437B57
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add edx, eax
	shl edx, 2
	mov esi, dword [dword_50A8AC]
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov dword dword_4D52F4[ecx*4], eax
	pop esi
	pop ecx
	ret

loc_437B57:
	push ebx
	xor ebx, ebx
	mov dword dword_4D52F4[ecx*4], ebx
	pop ebx
	pop esi
	pop ecx
	ret
;sub_437B20 endp

sub_437B70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, dword [dword_50A8B0+2]
	mov edx, dword [dword_50A8BC]
	sar esi, 10h
	add esi, edx
	mov edx, dword [dword_50A8B4]
	mov ecx, dword [dword_50A8BC]
	sar edx, 10h
	add edx, ecx
	mov ecx, dword [dword_50A8B4+2]
	sar ecx, 10h
	mov ebx, edx
	lea edi, [esi+ecx]
	sub ebx, ecx
	cmp esi, edx
	jnz loc_437BB0
	test ecx, ecx
	jz loc_437C07

loc_437BB0:
	cmp esi, edx
	jle loc_437BC8
	cmp eax, edx
	jge loc_437BBE
	add eax, dword [dword_5118A0]

loc_437BBE:
	mov ebp, dword [dword_5118A0]
	add ebx, ebp
	add edx, ebp

loc_437BC8:
	cmp eax, esi
	jl loc_437C0E
	cmp eax, edx
	jg loc_437C0E
	test ecx, ecx
	jz loc_437C07
	cmp eax, edi
	jle loc_437BDC
	cmp eax, ebx
	jl loc_437C07

loc_437BDC:
	cmp eax, edi
	jl loc_437C12
	cmp eax, ebx
	jle loc_437C07
	mov edx, dword [dword_50A8AC]
	sub eax, ebx

loc_437BEC:
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, dword [dword_50A8AC]
	sub edx, eax
	mov eax, edx

loc_437C00:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_437C07:
	mov eax, dword [dword_50A8AC]
	jmp loc_437C00

loc_437C0E:
	xor eax, eax
	jmp loc_437C00

loc_437C12:
	mov edx, edi
	sub edx, eax
	mov eax, dword [dword_50A8AC]
	jmp loc_437BEC
;sub_437B70 endp

sub_437C20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov edx, dword [dword_51221C]
	lea eax, 0[edx*4]
	sub eax, edx
	mov ebp, dword [dword_50A8C0]
	mov edi, dword dword_4D540C[eax*8]
	mov ebx, dword dword_4D5410[eax*8]
	mov esi, dword dword_4D5414[eax*8]
	mov edx, dword dword_4D5418[eax*8]
	mov eax, dword [dword_540F48]
	sub eax, ebp
	test edi, edi
	jz loc_437C96
	test ebx, ebx
	jz loc_437C96
	test esi, esi
	jz loc_437C96
	test edx, edx
	jz loc_437C96
	cmp eax, edi
	jl loc_437C96
	cmp eax, ebx
	jl loc_437C9F
	cmp eax, esi
	jl loc_437CB1
	cmp eax, edx
	jge loc_437CB5
	mov ebx, edx
	sub ebx, eax
	imul ebx, ecx
	sub edx, esi
	mov esi, edx
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv esi
	sub ecx, eax

loc_437C96:
	mov eax, ecx

loc_437C98:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_437C9F:
	mov edx, ebx
	sub edx, eax
	imul edx, ecx
	sub ebx, edi
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	jmp loc_437C98

loc_437CB1:
	xor eax, eax
	jmp loc_437C98

loc_437CB5:
	mov eax, dword [dword_540F48]
	mov dword [dword_50A8C0], eax
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_437C20 endp

sub_437CD0: ;SUBROUTINE
	test byte [dword_540F48], 1
	jnz loc_437CDA
	ret

loc_437CDA:
	push edx
	mov eax, dword [dword_540F48]
	shl eax, 2
	call sub_49C150
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add edx, eax
	shl edx, 3
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov dword [dword_50A8BC], eax
	pop edx
	ret
;sub_437CD0 endp

sub_437D10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, 5Ch
	mov eax, dword_50A8A4
	call sub_48A01C
	mov edx, 9600h
	mov eax, dword_501280
	call sub_48A01C
	mov edx, 320h
	mov eax, dword_500F60
	call sub_48A01C
	xor edx, edx
	mov dword [dword_4D52F4], edx
	mov dword [dword_4D52F8], edx
	mov edx, dword [dword_51221C]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	xor edx, edx
	mov dl, byte byte_4D5404[eax]
	mov dword [dword_50A8A4], edx
	test edx, edx
	jnz loc_437D7F

loc_437D78:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_437D7F:
	mov dx, word word_4D5406[eax]
	mov word [dword_50A8B4], dx
	mov dx, word word_4D5408[eax]
	mov word [dword_50A8B4+2], dx
	mov edx, dword [dword_50A8A4]
	lea ecx, 0[edx*4]
	mov ebx, 64h
	sub ecx, edx
	mov ax, word word_4D540A[eax]
	shl ecx, 2
	mov word [word_50A8B8], ax
	add ecx, edx
	mov eax, dword [dword_540F48]
	shl ecx, 2
	mov dword [dword_50A8C0], eax
	mov edx, dword dword_4D5308[ecx]
	mov eax, dword dword_4D5304[ecx]
	shl edx, 10h
	mov dword [dword_50A8A8], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add edx, eax
	shl edx, 5
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov dword [dword_50A8AC], eax
	mov eax, dword dword_4D530C[ecx]
	mov dword [dword_50A8C4], eax
	mov eax, dword dword_4D5310[ecx]
	mov ebx, 0Ah
	mov dword [dword_50A8C8], eax
	mov eax, dword dword_4D5314[ecx]
	mov edx, dword dword_4D5300[ecx]
	mov dword [dword_50A8CC], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, dword dword_4D5318[ecx]
	mov ebx, 168h
	shl edx, 10h
	mov dword [dword_50A8E0], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword [dword_4D52FC], 1
	mov edx, dword dword_4D531C[ecx]
	mov esi, eax
	shl edx, 10h
	mov ecx, 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ebx, dword_50A8EC
	mov edx, dword_50A8E4
	mov ecx, eax
	mov eax, esi
	xor edi, edi
	call sub_49D2C0
	mov edx, dword [dword_50A8E4]
	mov eax, ecx
	mov dword [dword_50A8E8], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_50A8E8]
	mov dword [dword_50A8E4], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_50A8EC]
	mov dword [dword_50A8E8], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_50A8A4]
	lea ecx, 0[edx*4]
	mov ebx, 64h
	sub ecx, edx
	mov dword [dword_50A8EC], eax
	shl ecx, 2
	mov eax, dword [dword_50A8E0]
	add ecx, edx
	mov dword [dword_50A8E8], eax
	shl ecx, 2
	mov ebp, eax
	mov eax, dword dword_4D5320[ecx]
	mov edx, dword dword_4D5330[ecx]
	mov dword [dword_50A8B0], eax
	mov eax, dword [dword_540F48]
	shl edx, 10h
	mov dword [dword_50A880], eax
	mov dword [dword_50A884], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, eax
	shl eax, 2
	add edx, eax
	shl edx, 2
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov dword [dword_50A8F0], eax
	mov eax, dword dword_4D5324[ecx]
	mov dword [dword_50A8F4], eax
	mov eax, dword dword_4D5328[ecx]
	mov dword [dword_50A8F8], eax
	mov eax, dword dword_4D532C[ecx]
	mov dword [dword_50A8FC], eax
	mov eax, dword [dword_50A8C4]
	shl eax, 10h
	mov dword [dword_50A8BC], edi
	mov dword [dword_50A8D0], eax
	mov eax, dword [dword_50A8CC]
	neg ebp
	shl eax, 10h
	mov dword [dword_50A8E8], ebp
	mov dword [dword_50A8D4], eax
	mov edx, eax
	mov eax, dword [dword_50A8C8]
	mov ebx, dword [dword_50A8A4]
	shl eax, 10h
	neg edx
	mov dword [dword_50A8D8], eax
	sub eax, edx
	mov dword [dword_50A8D4], edx
	mov dword [dword_50A8DC], eax
	test ebx, ebx
	jz loc_437D78
	mov esi, 0FFFFFFFFh
	xor ecx, ecx

loc_437FC2:
	call sub_488074
	mov edx, eax
	mov ebx, dword [dword_50A8D0]
	shl edx, 10h
	add ebx, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edi, dword [dword_50A8D0]
	sub edx, edi
	mov dword dword_501280[ecx], edx
	call sub_488074
	shl eax, 10h
	mov edx, eax
	mov ebp, dword [dword_50A8DC]
	sar edx, 1Fh
	idiv ebp
	mov eax, dword [dword_50A8D4]
	add edx, eax
	mov dword dword_501284[ecx], edx
	call sub_488074
	mov edx, eax
	mov ebx, dword [dword_50A8D0]
	shl edx, 10h
	add ebx, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov ebx, dword [dword_50A8D0]
	sub edx, ebx
	mov dword dword_501288[ecx], edx
	call sub_488074
	mov edx, eax
	mov ebx, dword [dword_50A8D0]
	shl edx, 10h
	add ebx, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edi, dword [dword_50A8D0]
	sub edx, edi
	mov dword dword_505D80[ecx], edx
	call sub_488074
	shl eax, 10h
	mov edx, eax
	mov ebp, dword [dword_50A8DC]
	sar edx, 1Fh
	idiv ebp
	mov eax, dword [dword_50A8D4]
	add edx, eax
	mov dword dword_505D84[ecx], edx
	call sub_488074
	mov edx, eax
	mov ebx, dword [dword_50A8D0]
	shl edx, 10h
	add ebx, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	add ecx, 18h
	mov dword dword_501274[ecx], esi
	mov dword dword_501278[ecx], esi
	mov dword dword_505D74[ecx], esi
	mov dword dword_505D78[ecx], esi
	xor ah, ah
	mov byte byte_50127D[ecx], ah
	mov byte byte_505D7D[ecx], ah
	mov ebx, dword [dword_50A8D0]
	mov byte byte_50127C[ecx], ah
	sub edx, ebx
	mov byte byte_505D7C[ecx], ah
	mov dword dword_505D70[ecx], edx
	cmp ecx, 4B00h
	jnz loc_437FC2
	xor ecx, ecx
	xor eax, eax

loc_4380E7:
	add ecx, 14h
	mov dword dword_5010E4[ecx], eax
	mov dword dword_500F54[ecx], eax
	cmp ecx, 190h
	jnz loc_4380E7
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_437D10 endp

sub_438110: ;SUBROUTINE
	cmp dword [dword_50A8A4], 0
	jz locret_43812C
	cmp dword [dword_4D52FC], 0
	jnz loc_43812D
	mov eax, 1
	mov dword [dword_4D52FC], eax

locret_43812C:
	ret

loc_43812D:
	xor eax, eax
	mov dword [dword_4D52FC], eax
	ret
;sub_438110 endp

sub_438140: ;SUBROUTINE
	push edx
	push esi
	push edi
	sub esp, 40h
	mov esi, eax
	mov edx, dword [dword_51221C]
	lea eax, 0[edx*4]
	sub eax, edx
	movzx edi, byte byte_4D5404[eax*8]
	test edi, edi
	jnz loc_43816A
	add esp, 40h
	pop edi
	pop esi
	pop edx
	ret

loc_43816A:
	push ecx
	push ebx
	push edi
	push aDrpD ; "DRP%d"
	lea eax, [esp+10h]
	push eax
	mov ecx, dword_50A888
	lea edx, [esp+14h]
	call sprintf_
	add esp, 0Ch
	xor ebx, ebx
	mov eax, esi
	call sub_4352C0
	push edi
	push aSplD ; "SPL%d"
	lea eax, [esp+10h]
	push eax
	mov ecx, dword_50A900
	lea edx, [esp+14h]
	call sprintf_
	add esp, 0Ch
	xor ebx, ebx
	mov eax, esi
	call sub_4352C0
	pop ebx
	pop ecx
	add esp, 40h
	pop edi
	pop esi
	pop edx
	ret
;sub_438140 endp

;	Attributes: thunk

sub_4381C0: ;SUBROUTINE
	jmp sub_437D10
;sub_4381C0 endp

dword_438390: dd 0
	dd 640000h, 0
dword_43839C: times 3 dd 0
dword_4383A8: times 3 dd 0
dword_4383B4: times 3 dd 1

sub_4383C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [dword_512210], 0
	jnz loc_438567
	mov ebx, 1

loc_4383DA:
	mov edx, [ecx+14h]
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4D5794]
	movzx esi, byte [edx+eax*2]
	mov edx, esi
	mov eax, ecx
	shl edx, 10h
	call sub_4385C0
	mov esi, eax
	mov edx, ebx
	mov eax, ecx
	call sub_438700
	mov ebp, eax
	mov edx, ebx
	mov eax, ecx
	call sub_438B30
	mov edi, eax
	mov edx, ebx
	mov eax, ecx
	call sub_438810
	mov edx, eax
	mov eax, ecx
	call sub_4385F0
	mov ebx, eax
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov [ecx+558h], eax
	mov eax, ecx
	call sub_438680
	mov dx, [ecx+6]
	mov [ecx+558h], eax
	cmp dx, 41h
	jnb loc_43849F
	xor eax, eax
	mov ax, dx
	mov edx, 41h
	sub edx, eax
	shl edx, 4
	mov eax, edx
	shl eax, 6
	sub eax, edx
	lea edx, [eax+10000h]
	mov eax, [ecx+558h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+558h], eax

loc_43849F:
	mov ebx, [ecx+558h]
	cmp ebx, 10000h
	jle loc_43856E
	mov [ecx+94h], ebx

loc_4384B7:
	mov eax, esi
	mov edx, [ecx+558h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test byte [ecx+1F4h], 1
	jz loc_438555
	cmp dword [ecx+280h], 2
	jnz loc_438555
	mov edi, dword [dword_512228]
	mov edx, [ecx+14h]
	test edi, edi
	jz loc_438581
	mov eax, dword [dword_5118A0]
	sub eax, 3Ch
	cmp edx, eax
	jge loc_43857D

loc_438500:
	mov eax, 1

loc_438505:
	mov edi, eax
	mov ebp, [ecx+108h]
	mov eax, [ecx+3ACh]
	mov esi, [ecx+3ACh]
	lea ecx, [eax+ebp]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	mov ebx, edx
	xor edx, edx
	sar ebx, 4
	mov dl, [eax+20h]
	and ebx, 0Fh
	shl edx, 0Fh
	imul edx, ebx
	sub esi, ebp
	neg edx
	cmp esi, edx
	jge loc_438591

loc_438550:
	mov eax, 1

loc_438555:
	cmp dword [dword_512228], 0
	jz loc_438560
	neg eax

loc_438560:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_438567:
	xor ebx, ebx
	jmp loc_4383DA

loc_43856E:
	mov dword [ecx+94h], 10000h
	jmp loc_4384B7

loc_43857D:
	xor eax, eax
	jmp loc_438505

loc_438581:
	cmp edx, 3Ch
	jg loc_438500
	xor eax, eax
	jmp loc_438505

loc_438591:
	xor ebx, ebx
	mov bl, [eax+21h]
	shl ebx, 0Fh
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	imul eax, ebx
	cmp esi, eax
	jg loc_438550
	cmp ecx, edx
	jl loc_438550
	cmp ecx, eax
	jg loc_438550
	test edi, edi
	jnz loc_438550
	mov eax, 0B0000h
	jmp loc_438555
;sub_4383C0 endp

sub_4385C0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	mov edx, [ecx+21Ch]
	mov ecx, [edx]
	cmp ecx, 0Fh
	jge loc_4385E7
	push ebx
	lea edx, 0[ecx*4]
	mov ebx, dword dword_4D5F74[edx]
	cmp eax, ebx
	jle loc_4385E6
	mov eax, ebx

loc_4385E6:
	pop ebx

loc_4385E7:
	pop ecx
	ret
;sub_4385C0 endp

sub_4385F0: ;SUBROUTINE
	push edx
	cmp dword [dword_51221C], 0Ah
	jl loc_438601

loc_4385FA:
	mov eax, 10000h
	pop edx
	ret

loc_438601:
	xor edx, edx
	mov dx, [eax+6]
	call sub_43D7A0
	cmp edx, eax
	jl loc_4385FA
	cmp dword [dword_512204], 0
	jnz loc_438620
	call sub_43D800
	pop edx
	ret

loc_438620:
	call sub_43D7D0
	pop edx
	ret
;sub_4385F0 endp

sub_438630: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, dword [dword_4D6A80]
	mov eax, dword [dword_4D6A78]
	imul ecx, eax
	mov eax, ecx
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	mov eax, ecx
	and eax, 0FFFF00h
	shr eax, 8
	and eax, 3
	mov eax, dword dword_50AB64[eax*4]
	mov dword [dword_4D6A7C], ecx
	mov [edx+3C8h], eax
	pop edx
	pop ecx
	ret
;sub_438630 endp

sub_438680: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov ebp, edx
	mov esi, 2710h
	mov edx, dword [dword_511E40]
	xor ebx, ebx
	test edx, edx
	jle loc_4386C4
	xor ecx, ecx

loc_43869C:
	mov edx, dword dword_511D08[ecx]
	mov eax, [edi+14h]
	mov edx, [edx+14h]
	call sub_43D400
	test eax, eax
	jle loc_4386DE

loc_4386B1:
	cmp eax, esi
	jge loc_4386B7
	mov esi, eax

loc_4386B7:
	mov eax, dword [dword_511E40]
	inc ebx
	add ecx, 4
	cmp ebx, eax
	jl loc_43869C

loc_4386C4:
	cmp esi, 14h
	jg loc_4386D6
	cmp ebp, 14CCCh
	jle loc_4386E2
	mov ebp, 14CCCh

loc_4386D6:
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4386DE:
	neg eax
	jmp loc_4386B1

loc_4386E2:
	cmp ebp, 9999h
	jge loc_4386D6
	mov ebp, 9999h
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_438680 endp

sub_438700: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov ebx, 10000h
	mov eax, [eax+1E8h]
	mov edx, dword [dword_5121F8]
	mov esi, ebx
	mov ebp, dword dword_5126B0[eax*4]
	cmp edx, 1
	jnz loc_4387D5

loc_43872D:
	mov edi, [ecx+21Ch]
	cmp dword [edi], 0
	jnz loc_438797
	mov eax, dword [dword_511B48]
	mov eax, [eax+21Ch]
	cmp dword [eax], 0
	jz loc_438797
	cmp dword [dword_512208], 0
	jnz loc_438797
	mov eax, [ecx+14h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add eax, eax
	mov [esp], eax
	mov edx, [esp]
	mov eax, dword [dword_4D5794]
	add eax, edx
	mov al, [eax]
	mov edx, [edi]
	and eax, 0FFh
	mov edx, dword dword_4D5F74[edx*4]
	shl eax, 10h
	sub edx, 0A0000h
	cmp eax, edx
	jge loc_438797
	cmp dword [dword_51221C], 0
	jnz loc_438797
	mov esi, 0F333h

loc_438797:
	cmp dword [dword_50AD04], 0
	jz loc_4387B0
	mov ebx, dword [dword_512200]
	shl ebx, 2
	mov ebx, dword dword_4D57F8[ebx+ebp*8]

loc_4387B0:
	mov edx, esi
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov bx, [ecx+6]
	mov edx, eax
	cmp bx, 64h
	ja loc_4387E0
	mov eax, edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4387D5:
	cmp edx, 2
	jz loc_43872D
	jmp loc_438797

loc_4387E0:
	mov ecx, dword [dword_512200]
	mov edx, dword [dword_51221C]
	shl ecx, 2
	mov edx, dword dword_4D57B0[ecx+edx*8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_438700 endp

sub_438810: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebx, eax
	cmp dword [dword_512228], 0
	jz loc_43891A
	mov eax, 0FFFFFFFFh

loc_43882C:
	mov edi, dword [dword_50AC90]
	xor esi, esi
	mov [esp], eax
	mov si, [ebx+6]
	mov di, [edi+6]
	and edi, 0FFFFh
	mov ecx, esi
	sub ecx, edi
	mov ebp, 0Fh
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebp
	add eax, 0Ah
	test eax, eax
	jl loc_438924
	cmp eax, 15h
	jl loc_43886C
	mov eax, 14h

loc_43886C:
	mov edx, [ebx+1E8h]
	mov edx, dword dword_50A9D8[edx*4]
	mov eax, [edx+eax*4+4]
	test ecx, ecx
	jle loc_43892B

loc_438885:
	cmp ecx, 1Eh
	jle loc_4388A5
	cmp eax, 10000h
	jge loc_438932
	mov edx, dword [dword_50AC74]

loc_43889B:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_4388A5:
	mov edx, eax
	mov eax, dword [dword_50AC90]
	mov ebp, [esp]
	mov ecx, [eax+39Ch]
	imul ecx, ebp
	cmp ecx, 20000h
	jge loc_4388CA
	cmp word [eax+14Eh], 0
	jnz loc_438901

loc_4388CA:
	cmp esi, edi
	jge loc_4388E5
	mov eax, dword [dword_50AC90]
	cmp word [eax+14Eh], 0
	jz loc_4388E5
	cmp edx, 10000h
	jg loc_438901

loc_4388E5:
	mov eax, dword [dword_50AC90]
	mov ecx, [esp]
	mov eax, [eax+39Ch]
	imul eax, ecx
	cmp eax, 20000h
	jge loc_438906
	cmp esi, edi
	jle loc_438906

loc_438901:
	mov edx, 10000h

loc_438906:
	xor eax, eax
	mov ax, [ebx+6]
	call sub_438940
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43891A:
	mov eax, 1
	jmp loc_43882C

loc_438924:
	xor eax, eax
	jmp loc_43886C

loc_43892B:
	neg ecx
	jmp loc_438885

loc_438932:
	mov edx, dword [dword_50AC80]
	jmp loc_43889B
;sub_438810 endp

sub_438940: ;SUBROUTINE
	push ebx
	push ecx
	push edi
	mov ecx, eax
	mov ebx, edx
	mov edx, dword [dword_5121FC]
	cmp edx, 2
	jnz loc_438988
	xor edx, edx

loc_438954:
	shl edx, 4
	mov edi, dword dword_4D595C[edx]
	lea eax, [ebx-10000h]
	cmp ecx, edi
	jg loc_43899B
	cmp ecx, dword dword_4D5958[edx]
	jg loc_4389A1
	cmp ecx, dword dword_4D5954[edx]
	jg loc_4389B9
	cmp ecx, dword dword_4D5950[edx]
	jg loc_4389D1
	mov eax, 10000h
	pop edi
	pop ecx
	pop ebx
	ret

loc_438988:
	cmp edx, 4
	jnz loc_438994
	mov edx, 1
	jmp loc_438954

loc_438994:
	mov edx, 2
	jmp loc_438954

loc_43899B:
	mov eax, ebx
	pop edi
	pop ecx
	pop ebx
	ret

loc_4389A1:
	mov edx, 0C000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, 10000h
	pop edi
	pop ecx
	pop ebx
	ret

loc_4389B9:
	mov edx, 8000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, 10000h
	pop edi
	pop ecx
	pop ebx
	ret

loc_4389D1:
	mov edx, 4000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, 10000h
	pop edi
	pop ecx
	pop ebx
	ret
;sub_438940 endp

sub_4389F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [dword_512228], 0
	jz loc_438AEA
	mov eax, 0FFFFFFFFh

loc_438A09:
	mov esi, dword [dword_50AC90]
	xor ebx, ebx
	mov edi, eax
	mov bx, [ecx+6]
	mov si, [esi+6]
	and esi, 0FFFFh
	test edx, edx
	jnz loc_438ADF
	test byte [ecx+1F4h], 8
	jz loc_438ADF
	mov edx, ebx
	sub edx, esi
	mov ebp, 0Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	add eax, 0Ah
	test eax, eax
	jl loc_438AF4
	cmp eax, 15h
	jl loc_438A5B
	mov eax, 14h

loc_438A5B:
	mov edx, [ecx+1E8h]
	mov edx, dword dword_50A9D8[edx*4]
	mov eax, [edx+eax*4+58h]
	cmp eax, 10000h
	jge loc_438AFB
	mov edx, dword [dword_50AC7C]

loc_438A7D:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1E8h]
	mov ebp, dword [dword_5121F8]
	mov ecx, dword dword_5126B0[edx*4]
	cmp ebp, 1
	jz loc_438ABE
	cmp ebp, 2
	jz loc_438ABE
	mov edx, dword [dword_512200]
	shl edx, 2
	mov edx, dword dword_4D5868[edx+ecx*8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_438ABE:
	mov edx, dword [dword_50AC90]
	mov ecx, [edx+39Ch]
	imul ecx, edi
	cmp ecx, 20000h
	jge loc_438B06
	cmp word [edx+14Eh], 0
	jnz loc_438B06

loc_438ADF:
	mov eax, 10000h

loc_438AE4:
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_438AEA:
	mov eax, 1
	jmp loc_438A09

loc_438AF4:
	xor eax, eax
	jmp loc_438A5B

loc_438AFB:
	mov edx, dword [dword_50AC88]
	jmp loc_438A7D

loc_438B06:
	cmp ebx, esi
	jge loc_438AE4
	mov edx, dword [dword_50AC90]
	cmp word [edx+14Eh], 0
	jz loc_438AE4
	cmp eax, 10000h
	jg loc_438ADF
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4389F0 endp

sub_438B30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov edx, dword [dword_50A9D0]
	test edx, edx
	jle loc_438B9C

loc_438B3F:
	mov ebx, [ecx+4F0h]
	mov eax, edx
	cmp edx, ebx
	jle loc_438B4D
	mov eax, ebx

loc_438B4D:
	mov esi, [ecx+4F4h]
	cmp eax, esi
	jge loc_438B59
	mov eax, esi

loc_438B59:
	sub eax, [ecx+4F4h]
	mov edx, [ecx+4F8h]
	shl eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1E8h]
	mov edx, dword dword_50A9D8[edx*4]
	mov edx, [edx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	mov eax, edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_438B9C:
	neg edx
	jmp loc_438B3F
;sub_438B30 endp

off_438BA0: dd loc_438CA2
	dd loc_438CED ; jump table for switch statement
	dd loc_438CFE
	dd loc_438D0E

sub_438BB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov dword [eax+398h], 0
	test byte [eax+1F4h], 4
	jnz loc_438C3A
	test byte [esi+1F4h], 8
	jz loc_438D1F
	mov ebp, dword [dword_512228]
	mov eax, dword [dword_50AB58]
	test ebp, ebp
	jz loc_438C41
	mov edx, dword [dword_50AC90]
	mov edx, [edx+39Ch]
	sub edx, eax
	mov edi, [esi+398h]
	mov eax, edx
	cmp edx, edi
	jge loc_438C0B
	mov [esi+398h], edx

loc_438C0B:
	mov eax, esi
	call sub_4383C0
	mov ebp, [esi+398h]
	mov edx, eax
	cmp eax, ebp
	jge loc_438C61
	mov eax, 1

loc_438C23:
	xor eax, dword [dword_512228]
	jz loc_438C65

loc_438C2B:
	mov [esi+398h], edx
	cmp dword [esi+53Ch], 0
	jg loc_438C7E

loc_438C3A:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_438C41:
	mov edx, dword [dword_50AC90]
	mov ecx, [edx+39Ch]
	mov ebx, [esi+398h]
	add eax, ecx
	cmp eax, ebx
	jle loc_438C0B
	mov [esi+398h], eax
	jmp loc_438C0B

loc_438C61:
	xor eax, eax
	jmp loc_438C23

loc_438C65:
	test byte [esi+1F4h], 8
	jnz loc_438C2B
	cmp dword [esi+53Ch], 0
	jg loc_438C7E
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_438C7E:
	mov eax, esi
	call sub_438FA0
	test eax, eax
	jz loc_438CB8 ; jumptable 00438C9B default case
	mov eax, esi
	call sub_438E10
	mov eax, [esi+14h]
	and eax, 3
	cmp eax, 3 ; switch 4 cases
	ja loc_438CB8 ; jumptable 00438C9B default case
	jmp off_438BA0[eax*4] ; switch jump

loc_438CA2:
	mov ecx, 5 ; jumptable 00438C9B case 0
	mov ebx, 0Ah
	mov edx, 2

loc_438CB1:
	mov eax, esi

loc_438CB3:
	call sub_441BD0

loc_438CB8:
	mov edi, [esi+53Ch] ; jumptable 00438C9B default case
	dec edi
	mov [esi+53Ch], edi
	test edi, edi
	jg loc_438C3A
	mov bh, [esi+3A9h]
	mov dword [esi+540h], 0
	and bh, 0EFh
	mov [esi+3A9h], bh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_438CED:
	mov ecx, 4 ; jumptable 00438C9B case 1
	mov ebx, 32h
	mov edx, 1
	jmp loc_438CB1

loc_438CFE:
	mov ecx, 2 ; jumptable 00438C9B case 2
	mov ebx, 1Eh
	mov eax, esi
	mov edx, ecx
	jmp loc_438CB3

loc_438D0E:
	mov ecx, 28h ; jumptable 00438C9B case 3
	mov ebx, 1
	mov edx, 3
	jmp loc_438CB1

loc_438D1F:
	test byte [esi+3A9h], 10h
	jz loc_438D70
	mov eax, esi
	call sub_439080
	mov edx, eax
	neg edx
	mov eax, esi
	call sub_439030
	mov edx, [esi+560h]
	mov [esi+398h], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_438D50:
	mov [esi+398h], eax
	cmp dword [dword_512228], 0
	jz loc_438C3A
	neg dword [esi+398h]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_438D70:
	mov eax, dword [dword_50AC90]
	mov edx, [eax+39Ch]
	mov eax, dword [dword_50AB74]
	sar edx, 1
	sar eax, 1
	add eax, edx
	mov edx, eax
	mov [esi+398h], eax
	mov eax, esi
	call sub_439030
	mov [esi+398h], eax
	mov eax, [esi+14h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4D5794]
	mov al, [edx+eax*2]
	and eax, 0FFh
	mov edx, 6666h
	shl eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, esi
	call sub_439030
	cmp eax, [esi+398h]
	jge loc_438DDE
	mov [esi+398h], eax

loc_438DDE:
	mov edx, [esi+560h]
	mov eax, [esi+398h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+398h], eax
	cmp eax, 0A0000h
	jg loc_438D50
	mov eax, 0A0000h
	jmp loc_438D50
;sub_438BB0 endp

sub_438E10: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov edi, edx
	cmp dword [dword_512228], 0
	jz loc_438ED6
	mov esi, 0FFFFFFFFh

loc_438E2A:
	mov ebx, [ecx+544h]
	test ebx, ebx
	jz loc_438ED1
	mov edx, [ebx+14h]
	mov eax, [ecx+14h]
	call sub_43D400
	mov edx, eax
	imul edx, esi
	mov eax, [ebx+39Ch]
	imul eax, esi
	cmp edx, 64h
	jle loc_438EE0

loc_438E5A:
	or byte [ecx+3A9h], 10h

loc_438E61:
	cmp edx, 0FFFFFF9Ch
	jge loc_438F11

loc_438E6A:
	and byte [ecx+3A9h], 0EFh

loc_438E71:
	test byte [ecx+3A9h], 10h
	jnz loc_438F40
	mov ebx, 1

loc_438E83:
	xor ebx, dword [dword_512228]
	jz loc_438F52
	cmp edx, 64h
	jge loc_438F47
	test edx, edx
	jle loc_438F47
	test eax, eax
	jl loc_438F47
	sub eax, 80000h

loc_438EAD:
	mov [ecx+398h], eax

loc_438EB3:
	test byte [ecx+3A9h], 10h
	jz loc_438F77
	mov eax, 1
	xor eax, dword [dword_512228]
	jnz loc_438F86

loc_438ED1:
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_438ED6:
	mov esi, 1
	jmp loc_438E2A

loc_438EE0:
	test eax, eax
	jle loc_438F07

loc_438EE4:
	cmp eax, 0FFE20000h
	jle loc_438E61
	cmp eax, 1E0000h
	jge loc_438E61
	test edx, edx
	jg loc_438E5A
	jmp loc_438E61

loc_438F07:
	test edx, edx
	jg loc_438E5A
	jmp loc_438EE4

loc_438F11:
	test eax, eax
	jl loc_438F1D
	test edx, edx
	jl loc_438E6A

loc_438F1D:
	cmp eax, 0FFE20000h
	jle loc_438E71
	cmp eax, 1E0000h
	jge loc_438E71
	test edx, edx
	jl loc_438E6A
	jmp loc_438E71

loc_438F40:
	xor ebx, ebx
	jmp loc_438E83

loc_438F47:
	mov [ecx+398h], edi
	jmp loc_438EB3

loc_438F52:
	cmp edx, 0FFFFFF9Ch
	jle loc_438F5B
	test edx, edx
	jl loc_438F66

loc_438F5B:
	mov [ecx+398h], edi
	jmp loc_438EB3

loc_438F66:
	cmp eax, 0FFFE0000h
	jge loc_438F5B
	add eax, 20000h
	jmp loc_438EAD

loc_438F77:
	xor eax, eax
	xor eax, dword [dword_512228]
	jnz loc_438F86
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_438F86:
	neg dword [ecx+398h]
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_438E10 endp

sub_438FA0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	cmp dword [dword_512228], 0
	jz loc_438FE2
	mov ebx, 0FFFFFFFFh

loc_438FB3:
	mov esi, [ecx+544h]
	test esi, esi
	jz loc_438FE9
	push edx
	mov edx, [esi+14h]
	mov eax, [ecx+14h]
	call sub_43D400
	imul eax, ebx
	cmp eax, 4Bh
	jle loc_438FF5

loc_438FD1:
	mov dword [ecx+53Ch], 0

loc_438FDB:
	xor eax, eax
	pop edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_438FE2:
	mov ebx, 1
	jmp loc_438FB3

loc_438FE9:
	xor eax, eax
	mov [ecx+53Ch], esi
	pop esi
	pop ecx
	pop ebx
	ret

loc_438FF5:
	cmp byte [ecx+8Ch], 0
	jnz loc_438FD1
	test byte [ecx+1F4h], 1
	jz loc_439010
	cmp dword [ecx+280h], 2
	jz loc_438FD1

loc_439010:
	cmp dword [dword_540F44], 0
	jz loc_438FD1
	cmp dword [ecx+53Ch], 0
	jle loc_438FDB
	mov eax, 1
	pop edx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_438FA0 endp

sub_439030: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov eax, edx
	test edx, edx
	jle loc_439065
	lea ebx, [edx-0D6666h]
	mov edx, [ecx+3C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, ebx
	jge loc_439056
	mov eax, ebx

loc_439056:
	cmp eax, 8E666h
	jge loc_439062
	mov eax, 8E666h

loc_439062:
	pop ecx
	pop ebx
	ret

loc_439065:
	mov edx, [ecx+3C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	pop ecx
	pop ebx
	ret
;sub_439030 endp

sub_439080: ;SUBROUTINE
	push edx
	mov eax, [eax+3B0h]
	mov edx, dword [dword_512228]
	mov eax, [eax+39Ch]
	test edx, edx
	jz loc_439099
	neg eax

loc_439099:
	cmp eax, 0DCCCCh
	jl loc_4390AE
	cmp eax, 1BCCCCh
	jge loc_4390B5
	mov eax, 0DE666h
	pop edx
	ret

loc_4390AE:
	mov eax, 136666h
	pop edx
	ret

loc_4390B5:
	cmp eax, 29B333h
	jge loc_4390C3
	mov eax, 0B1C28h
	pop edx
	ret

loc_4390C3:
	cmp eax, 378000h
	jge loc_4390D1
	mov eax, 6E666h
	pop edx
	ret

loc_4390D1:
	cmp eax, 456666h
	jge loc_4390DF
	mov eax, 428F5h
	pop edx
	ret

loc_4390DF:
	mov eax, 2C51Eh
	pop edx
	ret
;sub_439080 endp

sub_4390F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	push dword_50AC60
	push dword_50AC6C
	mov ecx, [eax]
	mov ebx, [eax+88h]
	push dword_50AC70
	xor edx, edx
	mov eax, 1
	call sub_471620
	test eax, eax
	jz loc_4392ED
	xor edx, edx
	mov ah, [esi+3A8h]
	mov dword [dword_50A9CC], edx
	test ah, 10h
	jnz loc_4392ED
	cmp byte [esi+8Dh], 0
	jz loc_4392ED
	test byte [esi+1F4h], 4
	jnz loc_4392ED
	cmp word [esi+14Eh], 0
	jnz loc_4392ED
	test byte [esi+1F4h], 40h
	jnz loc_4392ED
	push edi
	mov ecx, dword [dword_540F48]
	cmp ecx, 480h
	jle loc_4391BF
	cmp ecx, 4C0h
	jge loc_4391BF
	mov eax, dword [dword_511B48]
	cmp byte [eax+2DCh], 0
	jz loc_4391BF
	mov ecx, dword [dword_5118A0]
	mov edi, [eax+14h]
	sub ecx, 3
	cmp ecx, edi
	jge loc_4391BF
	cmp edi, dword [dword_5118A0]
	jge loc_4391BF
	mov eax, dword [dword_511D08]
	mov dword [esi+53Ch], 0C350h
	mov [esi+544h], eax

loc_4391BF:
	test byte [byte_512219], 1
	jz loc_439211
	test byte [esi+1F4h], 8
	jz loc_439211
	mov eax, dword [dword_50AC90]
	test eax, eax
	jz loc_439211
	mov cx, [eax+6]
	xor eax, eax
	and ecx, 0FFFFh
	mov ax, [esi+6]
	sub ecx, eax
	mov eax, ecx
	cmp ecx, 0FFFFFFFEh
	jle loc_439211
	cmp ecx, 5
	jge loc_439211
	test ecx, ecx
	jle loc_4392F2

loc_439200:
	mov [esi+53Ch], eax
	mov eax, dword [dword_50AC90]
	mov [esi+544h], eax

loc_439211:
	mov eax, esi
	call sub_43A050
	mov eax, esi
	xor edx, edx
	call sub_439370
	mov dword [dword_50A958], edx
	mov dword [dword_50A954], edx
	mov al, [esi+1F4h]
	mov dword [dword_50A950], edx
	test al, 8
	jz loc_439244
	mov eax, esi
	call sub_43B620

loc_439244:
	mov eax, esi
	call sub_439400
	mov eax, esi
	call sub_43AA50
	mov eax, esi
	call sub_43A7D0
	mov eax, esi
	call sub_43A310
	mov eax, esi
	call sub_43AB10
	mov eax, esi
	call sub_43BA20
	mov eax, esi
	call sub_43B8D0
	mov eax, esi
	mov eax, esi
	call sub_43B160
	mov eax, esi
	call sub_43B3A0
	cmp byte [esi+8Ch], 0
	jnz loc_4392A1
	mov eax, esi
	call sub_43BD80
	mov eax, esi
	call sub_43A230

loc_4392A1:
	mov eax, esi
	call sub_43B520
	test byte [esi+3A9h], 10h
	jz loc_4392D7
	mov edi, dword [dword_50A954]
	test edi, edi
	jz loc_4392D7
	cmp dword [edi+39Ch], 0A0000h
	jle loc_4392D7
	mov eax, dword [dword_50AC94]
	sub dword dword_50AC58[eax*4], 1E0000h

loc_4392D7:
	mov eax, esi
	call sub_4397E0
	mov eax, esi
	call sub_439890
	mov eax, esi
	call sub_439C70
	pop edi

loc_4392ED:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4392F2:
	neg eax
	jmp loc_439200
;sub_4390F0 endp

sub_439300: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 4
	mov esi, eax
	mov eax, esp
	push eax
	push eax
	mov ecx, [esi]
	mov ebx, [esi+88h]
	push eax
	xor edx, edx
	mov eax, 1
	call sub_471620
	test eax, eax
	jz loc_439338
	test byte [esi+1F4h], 40h
	jnz loc_439338
	test byte [esi+3A8h], 10h
	jz loc_439340

loc_439338:
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439340:
	mov eax, esi
	call sub_438BB0
	mov eax, esi
	call sub_43A120
	mov eax, esi
	call sub_43D550
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_439300 endp

;	Attributes: thunk

sub_439360: ;SUBROUTINE
	jmp sub_43A1D0
;sub_439360 endp

sub_439370: ;SUBROUTINE
	push ecx
	push edx
	test byte [eax+1F4h], 8
	jz loc_4393F5
	mov ecx, dword [dword_512228]
	mov edx, [eax+148h]
	test ecx, ecx
	jz loc_4393CD
	mov eax, [eax+14h]
	dec eax
	test eax, eax
	jl loc_4393C5

loc_439397:
	call sub_463310

loc_43939C:
	sub eax, edx
	mov dword [dword_50A9D0], eax
	cmp eax, 200h
	jle loc_4393B4
	sub eax, 400h
	mov dword [dword_50A9D0], eax

loc_4393B4:
	mov edx, dword [dword_50A9D0]
	cmp edx, 0FFFFFE00h
	jl loc_4393E6
	pop edx
	pop ecx
	ret

loc_4393C5:
	add eax, dword [dword_5118A0]
	jmp loc_439397

loc_4393CD:
	push ebx
	mov eax, [eax+14h]
	mov ebx, dword [dword_5118A0]
	inc eax
	cmp eax, ebx
	jl loc_4393DE
	sub eax, ebx

loc_4393DE:
	call sub_463310
	pop ebx
	jmp loc_43939C

loc_4393E6:
	lea ecx, [edx+400h]
	mov dword [dword_50A9D0], ecx
	pop edx
	pop ecx
	ret

loc_4393F5:
	xor edx, edx
	mov dword [dword_50A9D0], edx
	pop edx
	pop ecx
	ret
;sub_439370 endp

sub_439400: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ecx, dword [dword_5118A0]
	mov ebp, dword [dword_5118A4]
	mov ebx, eax
	lea edi, [esp+0Ch]
	mov esi, dword_4383B4
	movsd
	movsd
	movsd
	mov eax, [eax+500h]
	dec eax
	call sub_43D3B0
	mov [esp], eax
	mov eax, [ebx+500h]
	call sub_43D3B0
	mov [esp+4], eax
	mov eax, [ebx+500h]
	inc eax
	call sub_43D3B0
	mov [esp+8], eax
	mov eax, [ebx+14h]
	xor edx, edx
	mov [esp+2Ch], eax
	mov ah, [ebx+3A9h]
	mov dword [dword_50A9D4], edx
	test ah, 10h
	jnz loc_439727
	mov eax, 1
	mov ebp, dword [dword_5118A4]
	mov ecx, dword [dword_5118A0]

loc_439480:
	xor eax, dword [dword_512228]
	jz loc_43973A
	mov eax, 1

loc_439491:
	mov [esp+24h], eax
	mov eax, [ebx+39Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	test eax, eax
	jle loc_439744

loc_4394B0:
	shl eax, 11h
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edi, [esp+24h]
	mov edx, eax
	imul edx, edi
	mov [esp+30h], eax
	mov eax, [esp+2Ch]
	add eax, edx
	test edx, edx
	jl loc_43974B
	cmp eax, ecx
	jl loc_4394E1
	sub eax, ecx

loc_4394E1:
	mov edx, [esp+30h]
	mov [esp+20h], eax
	mov eax, [esp+24h]
	inc edx
	imul edx, eax
	mov eax, [esp+2Ch]
	add eax, edx
	test edx, edx
	jl loc_43975A
	cmp eax, ecx
	jl loc_439505
	sub eax, ecx

loc_439505:
	mov edx, [esp+2Ch]
	mov [esp+1Ch], eax
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, ebp
	mov dx, [edx+eax*4+18h]
	mov eax, [esp]
	and edx, 0FFFFh
	and eax, edx
	jnz loc_439547
	mov edi, dword [dword_50ABE8]
	mov esi, 0FFFFFFFFh
	sub edi, 0A0000h
	mov dword [dword_50A9D4], esi
	mov dword [dword_50ABE8], edi

loc_439547:
	mov esi, [esp+2Ch]
	lea eax, 0[esi*8]
	add esi, eax
	shl esi, 2
	mov eax, ebp
	mov ax, [esi+eax+18h]
	mov esi, [esp+4]
	and eax, 0FFFFh
	and eax, esi
	jnz loc_43957A
	mov dword [dword_50A9D4], eax
	sub dword [dword_50ABEC], 0A0000h

loc_43957A:
	mov esi, [esp+2Ch]
	lea eax, 0[esi*8]
	add eax, esi
	mov esi, ebp
	mov ax, [esi+eax*4+18h]
	mov esi, [esp+8]
	and eax, 0FFFFh
	and eax, esi
	jnz loc_4395B5
	mov eax, dword [dword_50ABF0]
	mov edi, 1
	sub eax, 0A0000h
	mov dword [dword_50A9D4], edi
	mov dword [dword_50ABF0], eax

loc_4395B5:
	mov esi, [esp+20h]
	lea eax, 0[esi*8]
	add eax, esi
	mov esi, ebp
	mov ax, [esi+eax*4+18h]
	and eax, 0FFFFh
	cmp edx, eax
	jz loc_439769

loc_4395D6:
	mov dword [ebx+4FCh], 49h

loc_4395E0:
	mov edx, [esp+30h]
	mov eax, edx
	shl eax, 5
	add eax, edx
	shl eax, 2
	sub eax, edx
	add eax, eax
	mov edx, eax
	shl eax, 2
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+28h], eax
	mov edx, [ebx+4FCh]
	mov eax, dword [dword_50AC6C]
	sub edx, eax
	mov [ebx+4FCh], edx

loc_43961D:
	cmp dword [esp+28h], 0
	jnz loc_43962C
	mov dword [esp+28h], 1

loc_43962C:
	mov edi, [esp+30h]
	xor edx, edx
	test edi, edi
	jle loc_439711

loc_43963A:
	mov ebx, [esp+24h]
	imul ebx, edx
	mov eax, [esp+2Ch]
	add eax, ebx
	test ebx, ebx
	jl loc_4397CA
	cmp eax, ecx
	jl loc_439655
	sub eax, ecx

loc_439655:
	mov esi, [esp+0Ch]
	mov ebx, eax
	test esi, esi
	jz loc_439696
	imul esi, eax, 24h
	mov eax, ebp
	mov ax, [esi+eax+18h]
	mov edi, [esp]
	and eax, 0FFFFh
	and eax, edi
	jnz loc_439696
	mov esi, 0FFFFFFFFh
	mov edi, dword [dword_50ABD0]
	mov [esp+0Ch], eax
	sub edi, 280000h
	mov dword [dword_50A9D4], esi
	mov dword [dword_50ABD0], edi

loc_439696:
	cmp dword [esp+10h], 0
	jz loc_4396C2
	imul eax, ebx, 24h
	mov esi, ebp
	mov ax, [esi+eax+18h]
	mov esi, [esp+4]
	and eax, 0FFFFh
	and eax, esi
	jnz loc_4396C2
	mov [esp+10h], eax
	sub dword [dword_50ABD4], 280000h

loc_4396C2:
	cmp dword [esp+14h], 0
	jz loc_4396FF
	imul ebx, 24h
	mov eax, ebp
	add ebx, ebp
	xor eax, ebp
	mov edi, [esp+8]
	mov ax, [ebx+18h]
	and eax, edi
	jnz loc_4396FF
	mov ebx, 1
	mov esi, dword [dword_50ABD8]
	mov [esp+14h], eax
	sub esi, 280000h
	mov dword [dword_50A9D4], ebx
	mov dword [dword_50ABD8], esi

loc_4396FF:
	mov eax, [esp+28h]
	mov ebx, [esp+30h]
	add edx, eax
	cmp edx, ebx
	jl loc_43963A

loc_439711:
	mov dword [dword_5118A4], ebp
	mov dword [dword_5118A0], ecx
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439727:
	mov ebp, dword [dword_5118A4]
	mov ecx, dword [dword_5118A0]
	xor eax, eax
	jmp loc_439480

loc_43973A:
	mov eax, 0FFFFFFFFh
	jmp loc_439491

loc_439744:
	neg eax
	jmp loc_4394B0

loc_43974B:
	test eax, eax
	jge loc_4394E1
	add eax, ecx
	jmp loc_4394E1

loc_43975A:
	test eax, eax
	jge loc_439505
	add eax, ecx
	jmp loc_439505

loc_439769:
	mov eax, [esp+1Ch]
	mov [esp+18h], eax
	mov edi, [esp+18h]
	shl eax, 3
	add eax, edi
	mov ax, [esi+eax*4+18h]
	and eax, 0FFFFh
	cmp edx, eax
	jnz loc_4395D6
	cmp dword [ebx+4FCh], 0
	jnz loc_4395E0
	mov edx, [esp+30h]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	shl eax, 4
	add eax, edx
	mov edx, eax
	shl eax, 8
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+28h], eax
	jmp loc_43961D

loc_4397CA:
	test eax, eax
	jge loc_439655
	add eax, ecx
	jmp loc_439655
;sub_439400 endp

sub_4397E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	xor edx, edx
	xor eax, eax
	mov dword [dword_50A984], edx
	mov dword [dword_50A980], edx
	mov dword [dword_50A988], edx

loc_4397FE:
	mov edi, dword [dword_50A980]
	mov edx, dword dword_50AB88[eax]
	add eax, 0Ch
	mov ebp, dword [dword_50A984]
	add edi, edx
	mov edx, dword dword_50AB80[eax]
	mov ebx, dword [dword_50A988]
	add ebp, edx
	mov edx, dword dword_50AB84[eax]
	mov dword [dword_50A980], edi
	add ebx, edx
	mov dword [dword_50A984], ebp
	mov dword [dword_50A988], ebx
	cmp eax, 0D8h
	jnz loc_4397FE
	mov eax, ecx
	call sub_439FE0
	mov esi, dword [dword_50A988]
	push esi
	mov edi, dword [dword_50A984]
	push edi
	mov ebp, dword [dword_50A980]
	xor eax, eax
	push ebp
	mov al, [ecx+8Ch]
	push eax
	mov eax, [ecx]
	push eax
	push aAiPoaclXDDDDD ; "AI-POACL X (%d) [%d] [%d %d %d] "
	push 3
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4397E0 endp

sub_439890: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov esi, [eax+14h]
	mov edx, [ecx+500h]
	mov eax, dword [dword_50A9CC]
	cmp eax, edx
	jnz loc_439A15
	mov ebx, dword [dword_50A954]

loc_4398B7:
	test ebx, ebx
	jnz loc_439A2D

loc_4398BF:
	mov eax, esi
	lea ebx, 0[esi*8]
	add ebx, esi
	mov edx, dword [dword_5118A4]
	shl ebx, 2
	add edx, ebx
	xor eax, esi
	mov al, [edx+1Fh]
	sar eax, 4
	mov ebx, 6
	and eax, 0Fh
	sub ebx, eax
	mov eax, ebx
	mov ebx, dword [dword_50A9CC]
	cmp eax, ebx
	jnz loc_439B96

loc_4398F7:
	lea eax, 0[esi*8]
	add eax, esi
	mov edi, dword [dword_50A9CC]
	shl eax, 2
	cmp edi, 7
	jge loc_439BE1
	mov edx, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+20h]
	mov eax, 7
	sub eax, edi
	dec eax
	shl edx, 0Fh
	neg eax
	imul edx, eax
	mov eax, [ecx+108h]
	sub edx, eax

loc_439937:
	mov [ecx+394h], edx

loc_43993D:
	lea eax, 0[esi*8]
	lea edx, [esi+eax]
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov ax, [edx+eax+1Ch]
	and eax, 0FFFFh
	mov edx, [ecx+108h]
	shl eax, 8
	mov ebx, [ecx+394h]
	sub eax, edx
	cmp eax, ebx
	jge loc_439974
	mov [ecx+394h], eax

loc_439974:
	lea edx, 0[esi*8]
	add edx, esi
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov ax, [edx+eax+1Ah]
	and eax, 0FFFFh
	mov edx, [ecx+108h]
	shl eax, 8
	sub edx, eax
	mov esi, [ecx+394h]
	mov eax, edx
	cmp edx, esi
	jle loc_4399AC
	mov [ecx+394h], edx

loc_4399AC:
	mov edi, dword [dword_50A9D4]
	test edi, edi
	jz loc_4399D0
	jl loc_439C2E
	mov edx, [ecx+394h]
	mov eax, [ecx+108h]
	sub edx, eax
	mov [ecx+394h], edx

loc_4399D0:
	cmp dword [dword_50A9D4], 0
	jnz loc_439A0B
	test byte [ecx+3A9h], 10h
	jz loc_439C47
	mov eax, 1

loc_4399EB:
	xor eax, dword [dword_512228]
	jz loc_439C4E
	mov edx, [ecx+394h]
	mov eax, [ecx+3A4h]
	add edx, eax
	mov [ecx+394h], edx

loc_439A0B:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439A15:
	jge loc_439A22
	mov ebx, dword [dword_50A950]
	jmp loc_4398B7

loc_439A22:
	mov ebx, dword [dword_50A958]
	jmp loc_4398B7

loc_439A2D:
	mov edx, esi
	mov eax, [ebx+14h]
	call sub_43D400
	test eax, eax
	jle loc_439B10
	mov edx, esi
	mov eax, [ebx+14h]
	call sub_43D400

loc_439A49:
	cmp eax, 5
	jge loc_4398BF
	mov edx, 0FAh
	mov eax, ecx
	call sub_43B970
	test eax, eax
	jnz loc_4398BF
	mov eax, [ecx+108h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebp, [ecx+108h]
	mov edi, dword [dword_50A9CC]
	add ebp, eax
	cmp edi, 7
	jl loc_439B21
	lea eax, [edi-7]
	mov edx, [ebx+14h]
	mov [esp], eax
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	movzx edi, byte [edx+eax+21h]
	mov edx, [esp]
	shl edi, 0Fh
	imul edx, edi
	add edi, edx

loc_439AB6:
	mov eax, [ebx+3ACh]
	sub eax, [ebx+214h]
	sub eax, edx
	mov edx, eax
	mov eax, [ebx+3ACh]
	add eax, [ebx+214h]
	sub edi, eax
	cmp edi, ebp
	jle loc_439B5E

loc_439ADC:
	cmp edi, edx
	jle loc_439B6B
	mov ebp, [ebx+214h]
	mov eax, [ebx+3ACh]
	mov edx, edi
	lea ebx, [eax+ebp]
	sar edx, 1Fh
	mov eax, edi
	sub eax, edx
	sar eax, 1
	add ebx, eax
	mov [ecx+394h], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439B10:
	mov edx, esi
	mov eax, [ebx+14h]
	call sub_43D400
	neg eax
	jmp loc_439A49

loc_439B21:
	mov eax, 7
	sub eax, edi
	dec eax
	mov edx, [ebx+14h]
	mov [esp], eax
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov edi, [esp]
	mov dl, [eax+20h]
	neg edi
	shl edx, 0Fh
	imul edi, edx
	mov eax, edi
	sub eax, edx
	mov edx, eax
	jmp loc_439AB6

loc_439B5E:
	cmp edx, ebp
	jg loc_439ADC
	jmp loc_4398BF

loc_439B6B:
	mov eax, [ebx+3ACh]
	mov esi, [ebx+214h]
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub ebx, esi
	sub ebx, eax
	mov [ecx+394h], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439B96:
	mov al, [edx+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 7
	cmp eax, ebx
	jz loc_4398F7
	cmp ebx, 7
	jge loc_439C06
	mov dl, [edx+20h]
	mov eax, 7
	sub eax, ebx
	and edx, 0FFh
	lea ebx, [eax-1]
	shl edx, 0Fh
	neg ebx
	imul ebx, edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub ebx, eax
	mov [ecx+394h], ebx
	jmp loc_43993D

loc_439BE1:
	mov edx, dword [dword_5118A4]
	mov al, [edx+eax+21h]
	and eax, 0FFh
	lea edx, [edi-7]
	shl eax, 0Fh
	imul edx, eax
	mov eax, [ecx+108h]
	add edx, eax
	jmp loc_439937

loc_439C06:
	mov dl, [edx+21h]
	and edx, 0FFh
	sub ebx, 7
	shl edx, 0Fh
	imul ebx, edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ebx, eax
	mov [ecx+394h], ebx
	jmp loc_43993D

loc_439C2E:
	mov ebx, [ecx+394h]
	mov eax, [ecx+108h]
	add ebx, eax
	mov [ecx+394h], ebx
	jmp loc_4399D0

loc_439C47:
	xor eax, eax
	jmp loc_4399EB

loc_439C4E:
	mov ebp, [ecx+394h]
	mov eax, [ecx+3A4h]
	sub ebp, eax
	mov [ecx+394h], ebp
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_439890 endp

sub_439C70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	cmp dword [dword_512228], 0
	jz loc_439E51
	mov ecx, 0FFFFFFFFh

loc_439C8D:
	mov eax, dword [dword_50A9CC]
	cmp eax, [esi+500h]
	jz loc_439CB2
	mov edi, dword [dword_50A954]
	test edi, edi
	jz loc_439CB2
	cmp word [edi+14Eh], 0
	jbe loc_439E5B

loc_439CB2:
	mov edi, dword [dword_50A96C]

loc_439CB8:
	test byte [esi+1F4h], 8
	jz loc_439DA0
	mov eax, dword [dword_50A9CC]
	cmp eax, [esi+500h]
	jnz loc_439DA0
	mov eax, dword [dword_50A954]
	test eax, eax
	jz loc_439DA0
	mov dl, [eax+1F4h]
	mov ebx, eax
	test dl, 40h
	jnz loc_439DA0
	mov edx, [esi+14h]
	mov eax, [eax+14h]
	call sub_43D400
	mov ebx, [ebx+110h]
	add ebx, [esi+110h]
	mov edx, [esi+39Ch]
	imul edx, ecx
	mov ebp, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, eax
	mov dword [esp+4], 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv dword [esp+4]
	imul ebp, ecx
	imul eax, ebx
	add eax, ebx
	add ebx, ebx
	shl ebp, 12h
	cmp eax, ebx
	jge loc_439F3C

loc_439D4B:
	test ebp, ebp
	jle loc_439DA0
	cmp ebp, eax
	jge loc_439DA0
	mov edx, 0CCCCh
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edi, eax
	xor edx, edx
	mov eax, esi
	call sub_43B970
	test eax, eax
	jnz loc_439DA0
	mov eax, [esi+398h]
	imul eax, ecx
	imul ecx, ebx
	sub eax, 0F0000h
	cmp ecx, eax
	jge loc_439DA0
	mov ecx, 5
	mov ebx, 10h
	mov edx, 1
	mov eax, esi
	call sub_441BD0

loc_439DA0:
	test byte [esi+3A9h], 10h
	jnz loc_439F43
	mov eax, 1

loc_439DB2:
	xor eax, dword [dword_512228]
	jz loc_439F4A
	cmp edi, [esi+398h]
	jge loc_439DCC
	mov [esi+398h], edi

loc_439DCC:
	cmp dword [esi+398h], 0FFFEB334h
	jge loc_439DE2
	mov dword [esi+398h], 0FFFEB334h

loc_439DE2:
	mov eax, dword [dword_50A9CC]
	cmp eax, [esi+500h]
	jz loc_439E47
	mov ecx, dword [dword_50A954]
	test ecx, ecx
	jz loc_439E47
	mov ebx, [ecx+39Ch]
	mov eax, ecx
	test ebx, ebx
	jle loc_439F77
	mov eax, ebx

loc_439E0B:
	cmp eax, 0A0000h
	jge loc_439E47
	test byte [esi+3A9h], 10h
	jnz loc_439F80
	mov eax, 1

loc_439E24:
	xor eax, dword [dword_512228]
	jz loc_439F9C
	mov eax, [esi+398h]
	cmp eax, 40000h
	jle loc_439F87
	mov [esi+398h], eax

loc_439E47:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439E51:
	mov ecx, 1
	jmp loc_439C8D

loc_439E5B:
	xor edx, edx
	xor eax, eax
	mov dx, [esi+6]
	mov ax, [edi+6]
	sub edx, eax
	mov eax, edx
	test edx, edx
	jle loc_439F19

loc_439E73:
	shl eax, 12h
	mov edx, dword [dword_50A954]
	mov [esp], eax
	mov ebp, [edx+39Ch]
	mov eax, [esi+39Ch]
	sub eax, ebp
	test eax, eax
	jle loc_439F20

loc_439E95:
	mov edi, eax
	mov edx, [esi+3ACh]
	mov eax, [esi+394h]
	sub eax, edx
	test eax, eax
	jle loc_439F27

loc_439EAD:
	mov edx, 1
	mov ebp, eax
	mov ebx, [esi+39Ch]
	mov eax, esi
	call sub_440270
	test eax, eax
	jle loc_439F2B
	mov ebx, eax

loc_439EC7:
	mov edx, edi
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, ebx
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 13333h
	mov ebx, eax
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, ebx
	jge loc_439CB2
	mov eax, dword [dword_50A9CC]
	cmp eax, [esi+500h]
	jle loc_439F31
	mov edi, dword [dword_50A970]
	jmp loc_439CB8

loc_439F19:
	neg eax
	jmp loc_439E73

loc_439F20:
	neg eax
	jmp loc_439E95

loc_439F27:
	neg eax
	jmp loc_439EAD

loc_439F2B:
	mov ebx, eax
	neg ebx
	jmp loc_439EC7

loc_439F31:
	mov edi, dword [dword_50A968]
	jmp loc_439CB8

loc_439F3C:
	mov eax, ebx
	jmp loc_439D4B

loc_439F43:
	xor eax, eax
	jmp loc_439DB2

loc_439F4A:
	cmp edi, [esi+398h]
	jle loc_439F58
	mov [esi+398h], edi

loc_439F58:
	cmp dword [esi+398h], 14CCCh
	jle loc_439DE2
	mov dword [esi+398h], 14CCCh
	jmp loc_439DE2

loc_439F77:
	mov eax, ebx
	neg eax
	jmp loc_439E0B

loc_439F80:
	xor eax, eax
	jmp loc_439E24

loc_439F87:
	mov eax, 40000h
	mov [esi+398h], eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439F9C:
	mov ebp, [esi+398h]
	cmp ebp, 0FFFC0000h
	jge loc_439FBC
	mov eax, ebp
	mov [esi+398h], eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_439FBC:
	mov eax, 0FFFC0000h
	mov [esi+398h], eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_439C70 endp

sub_439FE0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov edx, [eax+500h]
	mov ecx, dword [dword_50A980]
	mov dword [dword_50A9CC], edx
	mov edx, dword [dword_50A984]
	cmp edx, ecx
	jl loc_43A026

loc_439FFF:
	cmp edx, dword [dword_50A988]
	jge loc_43A013
	mov eax, [eax+500h]
	inc eax
	mov dword [dword_50A9CC], eax

loc_43A013:
	mov esi, dword [dword_50A9CC]
	test esi, esi
	jl loc_43A037
	cmp esi, 0Eh
	jge loc_43A042
	pop esi
	pop edx
	pop ecx
	ret

loc_43A026:
	mov edx, [eax+500h]
	dec edx
	mov dword [dword_50A9CC], edx
	mov edx, ecx
	jmp loc_439FFF

loc_43A037:
	xor eax, eax
	mov dword [dword_50A9CC], eax
	pop esi
	pop edx
	pop ecx
	ret

loc_43A042:
	mov dword [dword_50A9CC], 0Dh
	pop esi
	pop edx
	pop ecx
	ret
;sub_439FE0 endp

sub_43A050: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	xor eax, eax

loc_43A056:
	add eax, 0Ch
	xor edx, edx
	mov dword dword_50AB80[eax], edx
	mov dword dword_50AB7C[eax], edx
	mov dword dword_50AB84[eax], edx
	cmp eax, 0D8h
	jnz loc_43A056
	mov eax, ecx
	call sub_43B970
	test eax, eax
	jnz loc_43A0BD
	test byte [ecx+3A9h], 10h
	jnz loc_43A0C0
	mov eax, 1

loc_43A08D:
	xor eax, dword [dword_512228]
	jz loc_43A0C4
	cmp dword [dword_50AC94], 1
	jnz loc_43A0C4

loc_43A09E:
	mov eax, [ecx+500h]
	dec eax
	cmp eax, 7
	jge loc_43A0B4
	mov dword [dword_50AC48], 0FFFF0000h

loc_43A0B4:
	cmp dword [ecx+500h], 7
	jl loc_43A113

loc_43A0BD:
	pop edx
	pop ecx
	ret

loc_43A0C0:
	xor eax, eax
	jmp loc_43A08D

loc_43A0C4:
	test byte [ecx+3A9h], 10h
	jz loc_43A10F
	mov eax, 1

loc_43A0D2:
	xor eax, dword [dword_512228]
	jz loc_43A0E3
	cmp dword [dword_50AC94], 0FFFFFFFFh
	jz loc_43A09E

loc_43A0E3:
	mov eax, [ecx+500h]
	inc eax
	cmp eax, 7
	jl loc_43A0F9
	mov dword [dword_50AC50], 0FFFF0000h

loc_43A0F9:
	cmp dword [ecx+500h], 7
	jl loc_43A0BD
	mov dword [dword_50AC48], 10000h
	pop edx
	pop ecx
	ret

loc_43A10F:
	xor eax, eax
	jmp loc_43A0D2

loc_43A113:
	mov dword [dword_50AC50], 10000h
	pop edx
	pop ecx
	ret
;sub_43A050 endp

sub_43A120: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov edi, [eax+1E8h]
	shl edi, 2
	xor edx, edx
	mov dword dword_50A98C[edi], edx
	mov edx, [eax+3ACh]
	mov eax, [eax+14h]
	call sub_43D310
	mov [ecx+500h], eax
	mov ebx, [ecx+214h]
	mov eax, [ecx+3ACh]
	sub eax, ebx
	lea edx, [eax+8000h]
	mov eax, [ecx+14h]
	call sub_43D310
	mov esi, eax
	mov ebp, [ecx+214h]
	mov eax, [ecx+3ACh]
	add eax, ebp
	lea edx, [eax-8000h]
	mov eax, [ecx+14h]
	call sub_43D310
	mov edx, eax
	mov ebx, eax
	test eax, eax
	jl loc_43A1C4
	cmp eax, 0Eh
	jge loc_43A1C4
	test esi, esi
	jl loc_43A1C4
	cmp esi, 0Eh
	jge loc_43A1C4
	mov eax, esi
	cmp esi, edx
	jg loc_43A1C4
	mov edx, edi

loc_43A1A5:
	mov esi, 1
	mov cl, al
	shl esi, cl
	mov ecx, esi
	mov esi, dword dword_50A98C[edx]
	or esi, ecx
	inc eax
	mov dword dword_50A98C[edx], esi
	cmp eax, ebx
	jle loc_43A1A5
	nop

loc_43A1C4:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43A120 endp

sub_43A1D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, dword [dword_50AC90]
	mov ebp, dword [dword_50AC84]
	mov edx, dword [dword_511E40]
	xor ebx, ebx
	test edx, edx
	jle loc_43A218
	lea esi, 0[edx*4]
	xor eax, eax

loc_43A1F7:
	mov edx, dword dword_511D08[eax]
	xor ecx, ecx
	mov cx, [edx+6]
	cmp ecx, ebx
	jle loc_43A211
	mov ebx, ecx
	mov edi, edx
	mov ebp, [edx+1E8h]

loc_43A211:
	add eax, 4
	cmp eax, esi
	jl loc_43A1F7

loc_43A218:
	mov dword [dword_50AC84], ebp
	mov dword [dword_50AC90], edi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43A1D0 endp

sub_43A230: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	call sub_43C120
	mov edi, eax
	test byte [esi+1F4h], 10h
	jz loc_43A26F
	test byte [byte_512219], 4
	jz loc_43A26F
	cmp dword [dword_50A954], 0
	jz loc_43A26F
	mov ecx, 8
	mov ebx, 20h
	mov edx, 2
	mov eax, esi
	call sub_441BD0

loc_43A26F:
	mov dh, [esi+1F4h]
	test dh, 8
	jnz loc_43A2E4
	test dh, 20h
	jnz loc_43A2E4
	test byte [esi+3A9h], 10h
	jz loc_43A2E4
	test edi, edi
	jz loc_43A2E4
	cmp dword [dword_50A96C], 0FFFD0000h
	jle loc_43A2E4
	mov ebx, dword [dword_4D6A80]
	mov eax, dword [dword_4D6A78]
	imul eax, ebx
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	mov eax, dword [dword_4D6A7C]
	and eax, 0FFFF00h
	shr eax, 8
	mov edi, dword [dword_512208]
	and eax, 0FFh
	cmp edi, 1
	jz loc_43A2E4
	cmp eax, 0Ah
	jge loc_43A2E4
	cmp dword [esi+39Ch], 0
	jnz loc_43A2EA

loc_43A2E4:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43A2EA:
	mov ecx, 8
	mov ebx, 20h
	mov edx, 2
	mov eax, esi
	call sub_441BD0
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43A230 endp

sub_43A310: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edx, dword [dword_5118A4]
	mov bl, [eax+1F4h]
	mov ecx, [eax+14h]
	test bl, 8
	jz loc_43A637
	mov esi, 0FFF40000h

loc_43A336:
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea edi, [edx+ebx]
	xor ebx, ebx
	mov bl, [edi+1Fh]
	sar ebx, 4
	mov ebp, 6
	and ebx, 0Fh
	sub ebp, ebx
	mov ebx, ebp
	mov ebp, [eax+500h]
	dec ebp
	cmp ebp, ebx
	jnz loc_43A641

loc_43A368:
	mov ebx, dword [dword_50AC0C]
	add ebx, esi
	mov edi, [eax+14h]
	mov dword [dword_50AC0C], ebx
	lea ebx, 0[edi*8]
	add ebx, edi
	shl ebx, 2
	add ebx, edx
	movzx edi, byte [ebx+1Fh]
	sar edi, 4
	and edi, 0Fh
	mov [esp], edi
	movzx edi, byte [ebx+20h]
	mov ebp, [esp]
	shl edi, 0Fh
	imul edi, ebp
	mov bx, [ebx+1Ah]
	and ebx, 0FFFFh
	shl ebx, 8
	sub ebx, edi
	cmp ebx, [eax+108h]
	jge loc_43A3C2
	sub dword [dword_50AC0C], 640000h

loc_43A3C2:
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea edi, [edx+ebx]
	xor ebx, ebx
	mov bl, [edi+1Fh]
	sar ebx, 4
	mov ebp, 6
	and ebx, 0Fh
	sub ebp, ebx
	mov ebx, ebp
	mov ebp, [eax+500h]
	cmp ebx, ebp
	jnz loc_43A65D

loc_43A3F3:
	cmp dword [eax+500h], 7
	jge loc_43A679
	mov ebx, 1

loc_43A405:
	mov ebp, ebx
	cmp dword [eax+500h], 7
	jl loc_43A680
	mov ebx, 1

loc_43A419:
	mov edi, dword [dword_50AC10]
	add edi, esi
	mov [esp+8], ebx
	mov dword [dword_50AC10], edi
	test ebp, ebp
	jz loc_43A687
	mov ebx, [eax+14h]
	mov [esp+4], ebx
	mov edi, [esp+4]
	shl ebx, 3
	add ebx, edi
	shl ebx, 2
	add ebx, edx
	movzx edi, byte [ebx+1Fh]
	sar edi, 4
	and edi, 0Fh
	mov [esp], edi
	movzx edi, byte [ebx+20h]
	shl edi, 0Fh
	imul edi, [esp]
	mov bx, [ebx+1Ah]
	and ebx, 0FFFFh
	shl ebx, 8
	sub ebx, edi
	cmp ebx, [eax+108h]
	jge loc_43A687

loc_43A47B:
	sub dword [dword_50AC10], 640000h

loc_43A485:
	test ebp, ebp
	jz loc_43A706
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea ebp, [edx+ebx]
	xor ebx, ebx
	mov bl, [ebp+1Fh]
	sar ebx, 4
	mov edi, 6
	and ebx, 0Fh
	sub edi, ebx
	mov ebx, edi
	mov edi, [eax+500h]
	inc edi
	cmp edi, ebx
	jnz loc_43A6EF

loc_43A4BF:
	mov edi, dword [dword_50AC10]
	mov ebx, dword [dword_50AC0C]
	sub edi, 640000h
	sub ebx, 640000h
	mov dword [dword_50AC10], edi
	mov dword [dword_50AC0C], ebx

loc_43A4E3:
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea ebp, [edx+ebx]
	xor ebx, ebx
	mov bl, [ebp+1Fh]
	sar ebx, 4
	mov edi, 6
	and ebx, 0Fh
	sub edi, ebx
	mov ebx, edi
	mov edi, [eax+500h]
	inc edi
	cmp edi, ebx
	jnz loc_43A75F

loc_43A515:
	mov ebp, dword [dword_50AC14]
	add ebp, esi
	mov esi, [eax+14h]
	lea ebx, 0[esi*8]
	add ebx, esi
	shl ebx, 2
	lea esi, [edx+ebx]
	mov dword [dword_50AC14], ebp
	movzx edi, byte [esi+21h]
	mov bl, [esi+1Fh]
	shl edi, 0Fh
	and bl, 0Fh
	and ebx, 0FFh
	imul edi, ebx
	xor ebx, ebx
	mov bx, [esi+1Ch]
	shl ebx, 8
	mov esi, [eax+108h]
	sub ebx, edi
	cmp ebx, esi
	jge loc_43A56C
	lea edi, [ebp-640000h]
	mov dword [dword_50AC14], edi

loc_43A56C:
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea esi, [edx+ebx]
	xor ebx, ebx
	mov bl, [esi+1Fh]
	sar ebx, 4
	mov edi, 6
	and ebx, 0Fh
	sub edi, ebx
	mov ebx, edi
	mov edi, [eax+500h]
	dec edi
	cmp edi, ebx
	jge loc_43A77B

loc_43A59E:
	sub dword [dword_50AC0C], 3E80000h

loc_43A5A8:
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea esi, [edx+ebx]
	xor ebx, ebx
	mov bl, [esi+1Fh]
	sar ebx, 4
	mov edi, 6
	and ebx, 0Fh
	sub edi, ebx
	mov ebx, edi
	mov edi, [eax+500h]
	cmp ebx, edi
	jle loc_43A797

loc_43A5D9:
	sub dword [dword_50AC10], 3E80000h

loc_43A5E3:
	mov ebx, ecx
	shl ecx, 3
	add ecx, ebx
	shl ecx, 2
	mov ebx, edx
	add ecx, edx
	xor ebx, edx
	mov bl, [ecx+1Fh]
	mov esi, 6
	sar ebx, 4
	mov eax, [eax+500h]
	and ebx, 0Fh
	inc eax
	sub esi, ebx
	cmp eax, esi
	jl loc_43A7B3
	mov bl, [ecx+1Fh]
	and bl, 0Fh
	xor ecx, ecx
	mov cl, bl
	add ecx, 7
	cmp eax, ecx
	jg loc_43A7B3
	mov dword [dword_5118A4], edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43A637:
	mov esi, 0FFDA0000h
	jmp loc_43A336

loc_43A641:
	mov bl, [edi+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp ebp, ebx
	jz loc_43A368
	jmp loc_43A3C2

loc_43A65D:
	mov bl, [edi+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp ebx, ebp
	jz loc_43A3F3
	jmp loc_43A4E3

loc_43A679:
	xor ebx, ebx
	jmp loc_43A405

loc_43A680:
	xor ebx, ebx
	jmp loc_43A419

loc_43A687:
	cmp dword [esp+8], 0
	jz loc_43A485
	mov ebx, [eax+14h]
	mov [esp+4], ebx
	mov edi, [esp+4]
	shl ebx, 3
	add ebx, edi
	shl ebx, 2
	lea edi, [edx+ebx]
	xor ebx, ebx
	mov bl, [edi+21h]
	shl ebx, 0Fh
	mov [esp], ebx
	mov bl, [edi+1Fh]
	and bl, 0Fh
	mov [esp+0Ch], bl
	xor ebx, ebx
	mov bl, [esp+0Ch]
	mov [esp+4], ebx
	mov ebx, [esp]
	imul ebx, [esp+4]
	mov di, [edi+1Ch]
	and edi, 0FFFFh
	shl edi, 8
	sub edi, ebx
	cmp edi, [eax+108h]
	jl loc_43A47B
	jmp loc_43A485

loc_43A6EF:
	mov bl, [ebp+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp edi, ebx
	jz loc_43A4BF

loc_43A706:
	cmp dword [esp+8], 0
	jz loc_43A4E3
	lea ebx, 0[ecx*8]
	add ebx, ecx
	shl ebx, 2
	lea edi, [edx+ebx]
	xor ebx, ebx
	mov bl, [edi+1Fh]
	sar ebx, 4
	mov ebp, 6
	and ebx, 0Fh
	sub ebp, ebx
	mov ebx, ebp
	mov ebp, [eax+500h]
	dec ebp
	cmp ebp, ebx
	jz loc_43A4BF
	mov bl, [edi+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp ebp, ebx
	jz loc_43A4BF
	jmp loc_43A4E3

loc_43A75F:
	mov bl, [ebp+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp edi, ebx
	jz loc_43A515
	jmp loc_43A56C

loc_43A77B:
	mov bl, [esi+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp edi, ebx
	jg loc_43A59E
	jmp loc_43A5A8

loc_43A797:
	mov bl, [esi+1Fh]
	and bl, 0Fh
	and ebx, 0FFh
	add ebx, 7
	cmp ebx, edi
	jl loc_43A5D9
	jmp loc_43A5E3

loc_43A7B3:
	sub dword [dword_50AC14], 3E80000h
	mov dword [dword_5118A4], edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43A310 endp

sub_43A7D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ecx, eax
	mov ebx, [eax+39Ch]
	mov edx, 0A000h
	test ebx, ebx
	jle loc_43A9B5
	mov eax, ebx

loc_43A7EC:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	cmp eax, 5
	jle loc_43A9BE

loc_43A80C:
	test byte [ecx+3A9h], 10h
	jnz loc_43A9C8
	mov edx, 1

loc_43A81E:
	xor edx, dword [dword_512228]
	jz loc_43A9CF

loc_43A82A:
	test eax, eax
	jl loc_43A9D6
	mov edx, [ecx+14h]
	mov ebx, dword [dword_5118A0]
	add eax, edx
	cmp eax, ebx
	jl loc_43A843
	sub eax, ebx

loc_43A843:
	mov esi, eax
	shl eax, 3
	add eax, esi
	mov ebx, dword [dword_5118A4]
	shl eax, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Fh]
	mov edi, 7
	sar ebx, 4
	mov edx, [ecx+500h]
	and ebx, 0Fh
	dec edx
	sub edi, ebx
	cmp edx, edi
	jge loc_43A9EC

loc_43A876:
	mov ebx, [ecx+14h]
	lea eax, 0[ebx*8]
	add ebx, eax
	mov eax, dword [dword_5118A4]
	shl ebx, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Fh]
	sar ebx, 4
	mov edi, 7
	and ebx, 0Fh
	sub edi, ebx
	cmp edx, edi
	jl loc_43A8BD
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jg loc_43A8BD
	sub dword [dword_50ABB8], 280000h

loc_43A8BD:
	lea eax, 0[esi*8]
	lea ebx, [esi+eax]
	mov eax, dword [dword_5118A4]
	shl ebx, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Fh]
	sar ebx, 4
	mov edi, 7
	and ebx, 0Fh
	mov edx, [ecx+500h]
	sub edi, ebx
	cmp edx, edi
	jge loc_43AA06

loc_43A8F1:
	mov ebx, [ecx+14h]
	lea eax, 0[ebx*8]
	add eax, ebx
	mov ebx, dword [dword_5118A4]
	shl eax, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Fh]
	sar ebx, 4
	mov edi, 7
	and ebx, 0Fh
	sub edi, ebx
	cmp edx, edi
	jl loc_43A939
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jg loc_43A939
	sub dword [dword_50ABBC], 280000h

loc_43A939:
	lea eax, 0[esi*8]
	add eax, esi
	mov ebx, dword [dword_5118A4]
	shl eax, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Fh]
	mov edx, [ecx+500h]
	sar ebx, 4
	mov esi, 7
	and ebx, 0Fh
	inc edx
	sub esi, ebx
	cmp edx, esi
	jge loc_43AA20

loc_43A96E:
	mov ecx, [ecx+14h]
	lea eax, 0[ecx*8]
	add ecx, eax
	mov eax, dword [dword_5118A4]
	shl ecx, 2
	add eax, ecx
	xor ecx, ecx
	mov cl, [eax+1Fh]
	sar ecx, 4
	mov ebx, 7
	and ecx, 0Fh
	sub ebx, ecx
	cmp edx, ebx
	jl loc_43A9AF
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jle loc_43AA3B

loc_43A9AF:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43A9B5:
	mov eax, ebx
	neg eax
	jmp loc_43A7EC

loc_43A9BE:
	mov eax, 5
	jmp loc_43A80C

loc_43A9C8:
	xor edx, edx
	jmp loc_43A81E

loc_43A9CF:
	neg eax
	jmp loc_43A82A

loc_43A9D6:
	add eax, [ecx+14h]
	test eax, eax
	jge loc_43A843
	add eax, dword [dword_5118A0]
	jmp loc_43A843

loc_43A9EC:
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jg loc_43A876
	jmp loc_43A8BD

loc_43AA06:
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jg loc_43A8F1
	jmp loc_43A939

loc_43AA20:
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp edx, eax
	jg loc_43A96E
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43AA3B:
	sub dword [dword_50ABC0], 280000h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43A7D0 endp

sub_43AA50: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, 0Fh
	call sub_43B970
	test eax, eax
	jnz loc_43AAA9
	cmp dword [dword_511E48], 0
	jz loc_43AAA9
	test byte [ecx+3A9h], 10h
	jnz loc_43AAAC
	mov eax, 1

loc_43AA79:
	xor eax, dword [dword_512228]
	jz loc_43AAB0
	cmp dword [dword_50AC94], 1
	jnz loc_43AAB0

loc_43AA8A:
	mov eax, [ecx+500h]
	dec eax
	cmp eax, 7
	jge loc_43AAA0
	sub dword [dword_50ABF4], 30000h

loc_43AAA0:
	cmp dword [ecx+500h], 7
	jl loc_43AAFF

loc_43AAA9:
	pop edx
	pop ecx
	ret

loc_43AAAC:
	xor eax, eax
	jmp loc_43AA79

loc_43AAB0:
	test byte [ecx+3A9h], 10h
	jz loc_43AAFB
	mov eax, 1

loc_43AABE:
	xor eax, dword [dword_512228]
	jz loc_43AACF
	cmp dword [dword_50AC94], 0FFFFFFFFh
	jz loc_43AA8A

loc_43AACF:
	cmp dword [ecx+500h], 7
	jl loc_43AAE2
	sub dword [dword_50AC04], 30000h

loc_43AAE2:
	mov eax, [ecx+500h]
	inc eax
	cmp eax, 7
	jl loc_43AAA9
	sub dword [dword_50AC08], 30000h
	pop edx
	pop ecx
	ret

loc_43AAFB:
	xor eax, eax
	jmp loc_43AABE

loc_43AAFF:
	sub dword [dword_50ABF8], 30000h
	pop edx
	pop ecx
	ret
;sub_43AA50 endp

sub_43AB10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 44h
	mov ebx, eax
	mov edx, dword [dword_512228]
	xor edi, edi
	test edx, edx
	jz loc_43ABE5
	mov ebp, 0FFFFFFFFh

loc_43AB30:
	mov eax, [ebx+398h]
	mov dword [dword_50A974], eax
	mov dword [dword_50A968], eax
	mov dword [dword_50A978], eax
	mov dword [dword_50A96C], eax
	mov dword [dword_50A97C], eax
	mov dword [dword_50A970], eax
	mov ah, [ebx+3A9h]
	mov edx, [ebx+1F0h]
	test ah, 10h
	jnz loc_43AE87
	mov eax, 1
	xor ecx, ecx
	mov esi, dword [dword_511E3C]
	mov [esp+40h], ecx
	mov [esp+14h], eax
	cmp esi, eax
	jle loc_43ABDB
	add edx, eax
	mov [esp+10h], edx

loc_43AB88:
	mov edx, [esp+10h]
	add edx, dword [dword_511E3C]
	mov ecx, dword [dword_511E3C]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov esi, dword dword_511AC8[edx*4]
	mov eax, [esi+1E8h]
	mov [esp+30h], eax
	cmp ebx, esi
	jnz loc_43ABEF

loc_43ABB4:
	mov edx, [esp+14h]
	mov eax, [esp+10h]
	mov ecx, [esp+40h]
	inc edx
	inc eax
	mov [esp+14h], edx
	mov [esp+10h], eax
	cmp ecx, 3
	jz loc_43ABDB
	mov eax, [esp+14h]
	cmp eax, dword [dword_511E3C]
	jl loc_43AB88

loc_43ABDB:
	add esp, 44h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43ABE5:
	mov ebp, 1
	jmp loc_43AB30

loc_43ABEF:
	cmp byte [esi+8Dh], 0
	jz loc_43ABB4
	test byte [esi+1F4h], 40h
	jnz loc_43ABB4
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	mov edx, eax
	imul edx, ebp
	test edx, edx
	jle loc_43AE48
	mov eax, edx

loc_43AC1B:
	cmp eax, 2
	jle loc_43AE51
	shl edx, 10h

loc_43AC27:
	test byte [ebx+1F4h], 8
	jz loc_43AE64
	test byte [esi+3A9h], 10h
	jz loc_43AE64
	mov eax, [ebx+1E8h]
	mov eax, dword dword_50A9D8[eax*4]
	mov eax, [eax+0C4h]
	mov [esp+0Ch], eax

loc_43AC58:
	mov eax, [esp+0Ch]
	mov ecx, [ebx+39Ch]
	mov [esp+28h], eax
	sub ecx, [esi+39Ch]
	test ecx, ecx
	jle loc_43AE71

loc_43AC74:
	cmp ecx, 190000h
	jle loc_43AC87
	mov eax, [esp+28h]
	lea eax, [eax+eax*4]
	mov [esp+28h], eax

loc_43AC87:
	cmp edx, [ebx+110h]
	jle loc_43ABB4
	mov eax, [esp+28h]
	shl eax, 10h
	cmp edx, eax
	jge loc_43ABB4
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ch, [ebx+1F4h]
	lea edx, [eax-2]
	test ch, 8
	jz loc_43AE78
	cmp edx, 1
	jge loc_43AE78
	mov edx, 1

loc_43ACCF:
	mov eax, [esp+30h]
	shl eax, 2
	mov cl, [ebx+500h]
	mov [esp], eax
	mov eax, 1
	shl eax, cl
	mov [esp+1Ch], eax
	mov eax, [esp]
	mov ecx, [esp+1Ch]
	mov eax, dword dword_50A98C[eax]
	mov [esp+38h], edx
	test eax, ecx
	jz loc_43AD4A
	test edi, ecx
	jnz loc_43AD4A
	imul eax, edx, 1B77Ch
	imul edx, 50000h
	imul eax, ebp
	imul edx, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov dword [dword_50A978], eax
	mov eax, [esi+39Ch]
	mov dword [dword_50A954], esi
	add eax, edx
	mov edx, [esp+40h]
	mov dword [dword_50A96C], eax
	inc edx
	mov eax, [esp+1Ch]
	mov [esp+40h], edx
	or edi, eax

loc_43AD4A:
	mov ecx, [ebx+500h]
	test ecx, ecx
	jle loc_43ADBC
	mov edx, 1
	dec ecx
	mov eax, [esp+30h]
	shl edx, cl
	test dword dword_50A98C[eax*4], edx
	jz loc_43ADBC
	test edi, edx
	jnz loc_43ADBC
	imul eax, [esp+38h], 1B77Ch
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov ecx, [esp+38h]
	mov dword [dword_50A974], eax
	imul eax, ecx, 50000h
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov dword [dword_50A968], eax
	mov eax, [esp+40h]
	mov dword [dword_50A950], esi
	inc eax
	or edi, edx
	mov [esp+40h], eax

loc_43ADBC:
	mov ecx, [ebx+500h]
	inc ecx
	test ecx, ecx
	jl loc_43ABB4
	cmp ecx, 0Eh
	jge loc_43ABB4
	mov edx, 1
	mov eax, [esp+30h]
	shl edx, cl
	test dword dword_50A98C[eax*4], edx
	jz loc_43ABB4
	test edi, edx
	jnz loc_43ABB4
	imul eax, [esp+38h], 1B77Ch
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov ecx, [esp+38h]
	mov dword [dword_50A97C], eax
	imul eax, ecx, 50000h
	imul eax, ebp
	mov dword [dword_50A958], esi
	mov [esp], eax
	or edi, edx
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	mov esi, [esp+40h]
	add eax, ecx
	inc esi
	mov dword [dword_50A970], eax
	mov [esp+40h], esi
	jmp loc_43ABB4

loc_43AE48:
	mov eax, edx
	neg eax
	jmp loc_43AC1B

loc_43AE51:
	mov edx, esi
	mov eax, ebx
	call sub_43D450
	mov edx, eax
	imul edx, ebp
	jmp loc_43AC27

loc_43AE64:
	mov dword [esp+0Ch], 1Eh
	jmp loc_43AC58

loc_43AE71:
	neg ecx
	jmp loc_43AC74

loc_43AE78:
	test edx, edx
	jge loc_43ACCF
	xor edx, edx
	jmp loc_43ACCF

loc_43AE87:
	xor ecx, ecx
	mov eax, dword [dword_511E3C]
	mov [esp+3Ch], ecx
	mov [esp+8], eax
	test eax, eax
	jle loc_43AEF3
	add eax, edx
	mov [esp+4], edx
	mov [esp+34h], eax

loc_43AEA4:
	mov eax, [esp+34h]
	mov edx, eax
	mov ecx, dword [dword_511E3C]
	sar edx, 1Fh
	idiv ecx
	mov esi, dword dword_511AC8[edx*4]
	mov eax, [esi+1E8h]
	mov [esp+20h], eax
	cmp ebx, esi
	jnz loc_43AF9A

loc_43AECE:
	mov esi, [esp+8]
	mov ecx, [esp+34h]
	mov eax, [esp+3Ch]
	dec esi
	dec ecx
	mov [esp+8], esi
	mov [esp+34h], ecx
	cmp eax, 3
	jz loc_43AEF3
	mov eax, [esp+34h]
	cmp eax, [esp+4]
	jg loc_43AEA4

loc_43AEF3:
	mov edx, dword [dword_50A954]
	test edx, edx
	jz loc_43ABDB
	test byte [ebx+1F4h], 10h
	jz loc_43ABDB
	mov edx, [edx+14h]
	mov eax, [ebx+14h]
	call sub_43D400
	imul eax, ebp
	cmp eax, 3
	jge loc_43ABDB
	mov esi, dword [dword_50A978]
	mov ecx, dword [dword_50A96C]
	mov eax, dword [dword_50A954]
	mov edi, [ebx+398h]
	sar esi, 1
	sar ecx, 1
	mov eax, [eax+39Ch]
	mov dword [dword_50A978], esi
	mov dword [dword_50A96C], ecx
	cmp eax, edi
	jg loc_43ABDB
	mov eax, dword [dword_50A974]
	mov edx, dword [dword_50A970]
	mov ecx, dword [dword_50A97C]
	mov ebp, dword [dword_50A968]
	sar eax, 1
	sar edx, 1
	sar ecx, 1
	sar ebp, 1
	mov dword [dword_50A974], eax
	mov dword [dword_50A970], edx
	mov dword [dword_50A97C], ecx
	mov dword [dword_50A968], ebp
	add esp, 44h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43AF9A:
	cmp byte [esi+8Dh], 0
	jz loc_43AECE
	test byte [esi+1F4h], 40h
	jnz loc_43AECE
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	mov edx, eax
	imul edx, ebp
	test edx, edx
	jge loc_43AECE
	mov eax, edx
	neg eax
	cmp eax, 1Eh
	jge loc_43AECE
	mov eax, [esp+20h]
	shl eax, 2
	mov cl, [ebx+500h]
	mov [esp], eax
	mov eax, 1
	shl eax, cl
	mov [esp+24h], eax
	mov eax, [esp]
	mov ecx, [esp+24h]
	mov eax, dword dword_50A98C[eax]
	add edx, 2
	test eax, ecx
	jz loc_43B059
	test edi, ecx
	jnz loc_43B059
	imul eax, edx, 1B77Ch
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov dword [dword_50A978], eax
	imul eax, edx, 50000h
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	mov dword [dword_50A954], esi
	add eax, ecx
	mov ecx, [esp+3Ch]
	mov dword [dword_50A96C], eax
	inc ecx
	mov eax, [esp+24h]
	mov [esp+3Ch], ecx
	or edi, eax

loc_43B059:
	mov eax, [ebx+500h]
	test eax, eax
	jle loc_43B0D3
	lea ecx, [eax-1]
	mov eax, 1
	shl eax, cl
	mov [esp+18h], eax
	mov eax, [esp+20h]
	mov ecx, [esp+18h]
	test dword dword_50A98C[eax*4], ecx
	jz loc_43B0D3
	test edi, ecx
	jnz loc_43B0D3
	imul eax, edx, 1B77Ch
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	add eax, ecx
	mov dword [dword_50A974], eax
	imul eax, edx, 50000h
	imul eax, ebp
	mov [esp], eax
	mov ecx, [esp]
	mov eax, [esi+39Ch]
	mov dword [dword_50A950], esi
	add eax, ecx
	mov ecx, [esp+3Ch]
	mov dword [dword_50A968], eax
	inc ecx
	mov eax, [esp+18h]
	mov [esp+3Ch], ecx
	or edi, eax

loc_43B0D3:
	mov ecx, [ebx+500h]
	inc ecx
	test ecx, ecx
	jl loc_43AECE
	cmp ecx, 0Eh
	jge loc_43AECE
	mov eax, 1
	shl eax, cl
	mov [esp+2Ch], eax
	mov eax, [esp+20h]
	mov ecx, [esp+2Ch]
	test dword dword_50A98C[eax*4], ecx
	jz loc_43AECE
	test edi, ecx
	jnz loc_43AECE
	imul eax, edx, 1B77Ch
	imul edx, 50000h
	imul eax, ebp
	imul edx, ebp
	mov ecx, [esi+39Ch]
	mov dword [dword_50A958], esi
	add eax, ecx
	add edx, ecx
	mov dword [dword_50A97C], eax
	mov dword [dword_50A970], edx
	mov edx, [esp+3Ch]
	mov eax, [esp+2Ch]
	inc edx
	or edi, eax
	mov [esp+3Ch], edx
	jmp loc_43AECE
;sub_43AB10 endp

sub_43B160: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov ecx, [eax+1F0h]
	mov ah, [eax+1F4h]
	xor ebx, ebx
	test ah, 8
	jnz loc_43B188

loc_43B17E:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B188:
	mov eax, esi
	xor edx, edx
	call sub_43B970
	test eax, eax
	jnz loc_43B17E
	mov dx, word [word_50AC26]
	mov di, word [word_50AC2A]
	mov ax, word [word_50AC2E]
	add edx, 5
	add edi, 5
	add eax, 5
	mov word [word_50AC26], dx
	mov word [word_50AC2A], di
	mov dl, [esi+3A9h]
	mov word [word_50AC2E], ax
	test dl, 10h
	jnz loc_43B27D
	mov eax, 1

loc_43B1DC:
	xor eax, dword [dword_512228]
	jz loc_43B284
	mov dword [esp+4], 1

loc_43B1F0:
	test byte [esi+3A9h], 10h
	jnz loc_43B291
	mov eax, 1

loc_43B202:
	mov edx, 1
	mov ebp, dword [dword_511E3C]
	xor edi, edi
	mov [esp+8], edx
	cmp ebp, edx
	jle loc_43B17E
	mov [esp], eax
	add eax, ecx
	mov [esp+0Ch], eax

loc_43B224:
	mov edx, [esp+0Ch]
	mov ecx, dword [dword_511E3C]
	add edx, ecx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, dword dword_511AC8[edx*4]
	mov ebp, [ecx+1E8h]
	cmp esi, ecx
	jnz loc_43B29B

loc_43B248:
	mov eax, [esp]
	mov ebp, [esp+0Ch]
	add ebp, eax
	mov eax, [esp+8]
	inc eax
	mov [esp+0Ch], ebp
	mov [esp+8], eax
	cmp edi, 3
	jz loc_43B17E
	mov eax, [esp+8]
	cmp eax, dword [dword_511E3C]
	jl loc_43B224
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B27D:
	xor eax, eax
	jmp loc_43B1DC

loc_43B284:
	mov dword [esp+4], 0FFFFFFFFh
	jmp loc_43B1F0

loc_43B291:
	mov eax, 0FFFFFFFFh
	jmp loc_43B202

loc_43B29B:
	cmp byte [ecx+8Dh], 0
	jz loc_43B248
	test byte [ecx+1F4h], 40h
	jnz loc_43B248
	mov edx, [esi+14h]
	mov eax, [ecx+14h]
	call sub_43D400
	imul eax, [esp+4]
	cmp eax, 0FFFFFFFFh
	jl loc_43B390
	cmp eax, 3
	jg loc_43B390
	mov edx, ecx
	mov eax, esi
	mov ecx, [esp+4]
	call sub_43D450
	imul eax, ecx

loc_43B2DF:
	cmp eax, 0FFFC0000h
	jl loc_43B248
	cmp eax, 6A0000h
	jge loc_43B248
	mov eax, 1
	mov cl, [esi+500h]
	mov edx, dword dword_50A98C[ebp*4]
	shl eax, cl
	test eax, edx
	jz loc_43B31C
	test ebx, eax
	jnz loc_43B31C
	inc edi
	xor ecx, ecx
	or ebx, eax
	mov dword [byte_50AC28], ecx

loc_43B31C:
	mov eax, [esi+500h]
	test eax, eax
	jle loc_43B34A
	lea ecx, [eax-1]
	mov eax, 1
	mov edx, dword dword_50A98C[ebp*4]
	shl eax, cl
	test eax, edx
	jz loc_43B34A
	test ebx, eax
	jnz loc_43B34A
	inc edi
	xor ecx, ecx
	or ebx, eax
	mov dword [byte_50AC24], ecx

loc_43B34A:
	mov ecx, [esi+500h]
	inc ecx
	test ecx, ecx
	jl loc_43B248
	cmp ecx, 0Eh
	jge loc_43B248
	mov eax, 1
	mov edx, dword dword_50A98C[ebp*4]
	shl eax, cl
	test eax, edx
	jz loc_43B248
	test ebx, eax
	jnz loc_43B248
	inc edi
	xor ecx, ecx
	or ebx, eax
	mov dword [byte_50AC2C], ecx
	jmp loc_43B248

loc_43B390:
	shl eax, 12h
	jmp loc_43B2DF
;sub_43B160 endp

sub_43B3A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov ecx, [eax+39Ch]
	test byte [eax+3A9h], 10h
	jnz loc_43B4E0
	mov eax, 1

loc_43B3C3:
	xor eax, dword [dword_512228]
	jz loc_43B4E7
	mov eax, 1

loc_43B3D4:
	mov ebx, dword [dword_511E4C]
	mov [esp], eax
	xor ebp, ebp
	test ebx, ebx
	jle loc_43B4D6
	mov [esp+4], ebp

loc_43B3EB:
	mov edi, [esp+4]
	mov edi, dword dword_511C88[edi]
	mov edx, [esi+14h]
	mov eax, [edi+14h]
	mov ebx, [esp]
	call sub_43D400
	imul ebx, eax
	test ebx, ebx
	jl loc_43B4BD
	test ecx, ecx
	jle loc_43B4F1
	mov edx, ecx

loc_43B418:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	cmp ebx, eax
	jge loc_43B4BD
	imul eax, ebx, 1B77Ch
	imul eax, [esp]
	test byte [esi+3A9h], 10h
	jnz loc_43B4FA
	mov edx, 1

loc_43B449:
	xor edx, dword [dword_512228]
	jz loc_43B508
	cmp eax, ecx
	jge loc_43B501
	mov edx, ecx
	sub edx, eax
	mov eax, edx
	mov edx, 0FFFF8000h

loc_43B468:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_43B472:
	mov ebx, eax
	test ebx, ebx
	jz loc_43B4BD
	mov eax, edi
	call sub_45FF80
	mov edi, [edi+14h]
	mov edx, eax
	mov eax, edi
	call sub_43D310
	mov edi, [esi+500h]
	dec edi
	mov edx, eax
	cmp eax, edi
	jnz loc_43B49E
	add dword [dword_50ABDC], ebx

loc_43B49E:
	cmp edx, [esi+500h]
	jnz loc_43B4AC
	add dword [dword_50ABE0], ebx

loc_43B4AC:
	mov eax, [esi+500h]
	inc eax
	cmp edx, eax
	jnz loc_43B4BD
	add dword [dword_50ABE4], ebx

loc_43B4BD:
	mov edi, [esp+4]
	mov eax, dword [dword_511E4C]
	add edi, 4
	inc ebp
	mov [esp+4], edi
	cmp ebp, eax
	jl loc_43B3EB

loc_43B4D6:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B4E0:
	xor eax, eax
	jmp loc_43B3C3

loc_43B4E7:
	mov eax, 0FFFFFFFFh
	jmp loc_43B3D4

loc_43B4F1:
	mov edx, ecx
	neg edx
	jmp loc_43B418

loc_43B4FA:
	xor edx, edx
	jmp loc_43B449

loc_43B501:
	xor eax, eax
	jmp loc_43B472

loc_43B508:
	cmp eax, ecx
	jle loc_43B501
	mov edx, 0FFFF8000h
	sub eax, ecx
	jmp loc_43B468
;sub_43B3A0 endp

sub_43B520: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebx, eax
	cmp dword [dword_512228], 0
	jz loc_43B58D
	mov ebp, 0FFFFFFFFh

loc_43B539:
	test byte [ebx+1F4h], 8
	jz loc_43B583
	mov eax, [ebx+110h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, [ebx+110h]
	add ecx, ecx
	add ecx, eax
	mov [esp], ecx
	mov ecx, dword [dword_511E3C]
	xor edi, edi
	test ecx, ecx
	jle loc_43B583
	xor esi, esi

loc_43B56C:
	mov ecx, dword dword_511B48[esi]
	cmp ebx, ecx
	jnz loc_43B594

loc_43B576:
	mov eax, dword [dword_511E3C]
	inc edi
	add esi, 4
	cmp edi, eax
	jl loc_43B56C

loc_43B583:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B58D:
	mov ebp, 1
	jmp loc_43B539

loc_43B594:
	cmp byte [ecx+8Dh], 0
	jz loc_43B576
	test byte [ecx+1F4h], 40h
	jnz loc_43B576
	mov edx, [ebx+14h]
	mov eax, [ecx+14h]
	call sub_43D400
	imul eax, ebp
	cmp eax, 2
	jg loc_43B576
	cmp eax, 0FFFFFFFEh
	jl loc_43B576
	mov edx, ecx
	mov eax, ebx
	call sub_43D450
	imul eax, ebp
	test eax, eax
	jle loc_43B5F0

loc_43B5CE:
	cmp eax, [esp]
	jge loc_43B576
	mov eax, [ebx+500h]
	mov edx, [ecx+500h]
	dec eax
	cmp eax, edx
	jnz loc_43B5F4
	sub dword [dword_50AC18], 50000h
	jmp loc_43B576

loc_43B5F0:
	neg eax
	jmp loc_43B5CE

loc_43B5F4:
	mov eax, [ebx+500h]
	inc eax
	cmp eax, edx
	jnz loc_43B576
	sub dword [dword_50AC20], 50000h
	jmp loc_43B576
;sub_43B520 endp

sub_43B620: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edx, dword [dword_511E3C]
	xor edi, edi
	test edx, edx
	jle loc_43B64E
	xor ebp, ebp

loc_43B636:
	mov ecx, dword dword_511B48[ebp]
	cmp esi, ecx
	jnz loc_43B655

loc_43B640:
	mov ecx, dword [dword_511E3C]
	inc edi
	add ebp, 4
	cmp edi, ecx
	jl loc_43B636

loc_43B64E:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B655:
	cmp byte [ecx+8Dh], 0
	jz loc_43B640
	mov dl, [ecx+1F4h]
	test dl, 40h
	jnz loc_43B640
	test dl, 4
	jz loc_43B640
	mov edx, ecx
	mov eax, esi
	mov ebx, [ecx+500h]
	call sub_43B770
	mov edx, ecx
	mov eax, esi
	mov ebx, [ecx+500h]
	call sub_43B690
	jmp loc_43B640
;sub_43B620 endp

sub_43B690: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov eax, edx
	cmp dword [dword_512228], 0
	jz loc_43B712
	mov ecx, 0FFFFFFFFh

loc_43B6A6:
	mov edx, [esi+14h]
	mov eax, [eax+14h]
	call sub_43D400
	imul eax, ecx
	test eax, eax
	jle loc_43B75F
	cmp eax, 32h
	jge loc_43B75F
	cmp ebx, [esi+500h]
	jnz loc_43B75F
	cmp dword [dword_511E48], 0
	jle loc_43B75F
	cmp word [esi+6], 64h
	jbe loc_43B75F
	mov edx, eax
	mov edi, [esi+39Ch]
	shl edx, 12h
	test edi, edi
	jle loc_43B719
	mov ecx, edi

loc_43B6FA:
	mov eax, 35555h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp ecx, eax
	jg loc_43B71F
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_43B712:
	mov ecx, 1
	jmp loc_43B6A6

loc_43B719:
	mov ecx, edi
	neg ecx
	jmp loc_43B6FA

loc_43B71F:
	mov eax, dword [dword_4D6A78]
	mov ebp, dword [dword_4D6A80]
	imul eax, ebp
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov ecx, 8
	mov dword [dword_4D6A78], eax
	mov eax, [esi+3C0h]
	mov ebx, 18h
	inc eax
	mov edx, 3
	mov [esi+3C0h], eax
	mov eax, esi
	call sub_441BD0

loc_43B75F:
	mov dword [esi+3C0h], 0
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_43B690 endp

sub_43B770: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ecx, eax
	mov esi, edx
	cmp dword [dword_512228], 0
	jz loc_43B899
	mov edi, 0FFFFFFFFh

loc_43B78D:
	mov edx, 64h
	mov eax, ecx
	call sub_43B970
	mov [esp], edi
	test eax, eax
	jnz loc_43B891
	cmp dword [dword_512200], 0
	jz loc_43B891
	cmp dword [dword_50A9D0], 5
	jge loc_43B891
	mov ebp, [esi+14h]
	mov eax, [ecx+14h]
	mov edx, ebp
	call sub_43D400
	imul eax, edi
	cmp eax, 0FFFFFFFFh
	jl loc_43B8A3
	cmp eax, 3
	jg loc_43B8A3
	mov edx, esi
	mov eax, ecx
	call sub_43D450
	imul eax, edi

loc_43B7EC:
	mov edi, [ecx+1E8h]
	mov edi, dword dword_50A9D8[edi*4]
	fild dword [edi+0B4h]
	fmul qword [dbl_4CB98C]
	fmul qword [dbl_4CB994]
	call __CHP
	fistp dword [esp+4]
	cmp eax, 0FFFC0000h
	jl loc_43B891
	cmp eax, [esp+4]
	jge loc_43B891
	cmp eax, [edi+0B8h]
	jl loc_43B891
	lea edi, 0[ebp*8]
	add edi, ebp
	mov eax, dword [dword_5118A4]
	shl edi, 2
	add eax, edi
	movzx edi, byte [eax+1Fh]
	sar edi, 4
	mov ebp, 7
	and edi, 0Fh
	sub ebp, edi
	cmp ebx, ebp
	jl loc_43B891
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 6
	cmp ebx, eax
	jg loc_43B891
	mov eax, [esi+39Ch]
	imul eax, [esp]
	cmp eax, 140000h
	jle loc_43B891
	mov edi, [ecx+500h]
	cmp ebx, edi
	jl loc_43B8AB
	jnz loc_43B8B7
	add dword [dword_50AC40], 48000h

loc_43B891:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_43B899:
	mov edi, 1
	jmp loc_43B78D

loc_43B8A3:
	shl eax, 12h
	jmp loc_43B7EC

loc_43B8AB:
	add dword [dword_50AC3C], 48000h
	jmp loc_43B891

loc_43B8B7:
	add dword [dword_50AC44], 48000h
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_43B770 endp

sub_43B8D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	test byte [eax+1F4h], 1
	jz loc_43B93B
	cmp dword [edx+280h], 2
	jnz loc_43B93B
	mov ecx, [edx+14h]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, dword [dword_5118A4]
	shl eax, 2
	add eax, ecx
	xor ecx, ecx
	mov cl, [eax+1Fh]
	sar ecx, 4
	mov ebx, 6
	and ecx, 0Fh
	sub ebx, ecx
	mov ecx, ebx
	mov ebx, [edx+500h]
	cmp ecx, ebx
	jz loc_43B93F
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 7
	cmp eax, ebx
	jz loc_43B93F
	cmp ebx, 7
	jge loc_43B94C
	add word [word_50ABC6], 96h

loc_43B93B:
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B93F:
	add word [word_50ABCA], 96h
	pop edx
	pop ecx
	pop ebx
	ret

loc_43B94C:
	add word [word_50ABCE], 96h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43B8D0 endp

sub_43B970: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebx, edx
	mov edx, [eax+14h]
	xor esi, esi
	mov edi, [eax+1F0h]
	mov si, [eax+6]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	sar edx, 4
	mov ebp, 6
	and edx, 0Fh
	sub ebp, edx
	mov edx, ebp
	mov ebp, [ecx+500h]
	cmp edx, ebp
	jz loc_43BA0C
	mov al, [eax+1Fh]
	and al, 0Fh
	and eax, 0FFh
	add eax, 7
	cmp eax, ebp
	jz loc_43BA0C
	mov ebp, dword [dword_511E30]
	mov ecx, 190h
	cmp ebp, 5
	jge loc_43B9E0
	mov ecx, 0C8h

loc_43B9E0:
	cmp dword [dword_511E30], 2
	jge loc_43B9EE
	mov ecx, 32h

loc_43B9EE:
	cmp dword [dword_512228], 0
	jz loc_43B9FA
	sub ecx, 1Ah

loc_43B9FA:
	lea eax, [edi+edi]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	add ecx, ebx
	add eax, esi
	cmp eax, ecx
	jle loc_43BA14

loc_43BA0C:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43BA14:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_43B970 endp

sub_43BA20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, 1
	mov esi, [eax+398h]
	mov dx, [eax+6]
	mov ebx, [eax+39Ch]
	cmp dx, 96h
	jnb loc_43BA44
	xor edi, edi

loc_43BA44:
	test byte [eax+3A9h], 10h
	jnz loc_43BC01
	mov ecx, dword [dword_512228]
	test ecx, ecx
	jz loc_43BB32
	xor ecx, ecx
	xor ebp, ebp

loc_43BA63:
	cmp ebx, dword dword_50A968[ecx]
	jge loc_43BA90
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BA90
	mov eax, ebx
	sub eax, dword dword_50A968[ecx]
	mov edx, 14CCCh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB88[ecx], eax

loc_43BA90:
	cmp esi, dword dword_50A968[ecx]
	jge loc_43BAC1
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BAC1
	test edi, edi
	jz loc_43BAC1
	mov eax, esi
	sub eax, dword dword_50A968[ecx]
	mov edx, 8000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB94[ecx], eax

loc_43BAC1:
	cmp ebx, dword dword_50A974[ecx]
	jge loc_43BAEE
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BAEE
	mov eax, ebx
	sub eax, dword dword_50A974[ecx]
	mov edx, 8000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABA0[ecx], eax

loc_43BAEE:
	cmp esi, dword dword_50A974[ecx]
	jge loc_43BB1F
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BB1F
	test edi, edi
	jz loc_43BB1F
	mov eax, esi
	sub eax, dword dword_50A974[ecx]
	mov edx, 1999h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABAC[ecx], eax

loc_43BB1F:
	add ecx, 4
	cmp ecx, 0Ch
	jnz loc_43BA63

loc_43BB2B:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43BB32:
	xor ebp, ebp

loc_43BB34:
	cmp ebx, dword dword_50A968[ecx]
	jle loc_43BB61
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BB61
	mov eax, ebx
	sub eax, dword dword_50A968[ecx]
	mov edx, 0FFFEB334h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB88[ecx], eax

loc_43BB61:
	cmp esi, dword dword_50A968[ecx]
	jle loc_43BB92
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BB92
	test edi, edi
	jz loc_43BB92
	mov eax, esi
	sub eax, dword dword_50A968[ecx]
	mov edx, 0FFFF8000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB94[ecx], eax

loc_43BB92:
	cmp ebx, dword dword_50A974[ecx]
	jle loc_43BBBF
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BBBF
	mov eax, ebx
	sub eax, dword dword_50A974[ecx]
	mov edx, 0FFFF8000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABA0[ecx], eax

loc_43BBBF:
	cmp esi, dword dword_50A974[ecx]
	jle loc_43BBF0
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BBF0
	test edi, edi
	jz loc_43BBF0
	mov eax, esi
	sub eax, dword dword_50A974[ecx]
	mov edx, 0FFFFE667h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABAC[ecx], eax

loc_43BBF0:
	add ecx, 4
	cmp ecx, 0Ch
	jz loc_43BB2B
	jmp loc_43BB34

loc_43BC01:
	cmp dword [dword_512228], 0
	jz loc_43BCC6
	xor ecx, ecx
	mov edi, 8000h
	xor ebp, ebp

loc_43BC17:
	mov eax, dword dword_50A968[ecx]
	cmp ebx, eax
	jle loc_43BC40
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BC40
	mov edx, 14CCCh
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB88[ecx], eax

loc_43BC40:
	mov eax, dword dword_50A968[ecx]
	cmp esi, eax
	jle loc_43BC66
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BC66
	mov edx, edi
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB94[ecx], eax

loc_43BC66:
	mov eax, dword dword_50A974[ecx]
	cmp ebx, eax
	jle loc_43BC8C
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BC8C
	mov edx, edi
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABA0[ecx], eax

loc_43BC8C:
	mov eax, dword dword_50A974[ecx]
	cmp esi, eax
	jle loc_43BCB5
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BCB5
	mov edx, 1999h
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABAC[ecx], eax

loc_43BCB5:
	add ecx, 4
	cmp ecx, 0Ch
	jz loc_43BB2B
	jmp loc_43BC17

loc_43BCC6:
	xor ecx, ecx
	mov edi, 0FFFF8000h
	xor ebp, ebp

loc_43BCCF:
	mov eax, dword dword_50A968[ecx]
	cmp ebx, eax
	jge loc_43BCF8
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BCF8
	mov edx, 0FFFEB334h
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB88[ecx], eax

loc_43BCF8:
	mov eax, dword dword_50A968[ecx]
	cmp esi, eax
	jge loc_43BD1E
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BD1E
	mov edx, edi
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50AB94[ecx], eax

loc_43BD1E:
	mov eax, dword dword_50A974[ecx]
	cmp ebx, eax
	jge loc_43BD44
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BD44
	mov edx, edi
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABA0[ecx], eax

loc_43BD44:
	mov eax, dword dword_50A974[ecx]
	cmp esi, eax
	jge loc_43BD6D
	cmp ebp, dword dword_50A950[ecx]
	jz loc_43BD6D
	mov edx, 0FFFFE667h
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_50ABAC[ecx], eax

loc_43BD6D:
	add ecx, 4
	cmp ecx, 0Ch
	jz loc_43BB2B
	jmp loc_43BCCF
;sub_43BA20 endp

sub_43BD80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov ecx, eax
	cmp dword [dword_512228], 0
	jz loc_43BE02
	mov ebx, 0FFFFFFFFh

loc_43BD98:
	test byte [ecx+1F4h], 8
	jz loc_43BDFD
	mov edx, 4CCCh
	mov eax, [ecx+39Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, eax
	imul edx, ebx
	test edx, edx
	jl loc_43BE09
	push edi
	mov edi, [ecx+14h]
	mov ebp, dword [dword_5118A0]
	add edx, edi
	cmp edx, ebp
	jl loc_43BDDE
	sub edx, ebp

loc_43BDDE:
	pop edi

loc_43BDDF:
	mov eax, dword [dword_4D5798]
	mov dl, [edx+eax]
	and edx, 0FFh
	jz loc_43BDFD
	mov ebx, [ecx+500h]
	cmp edx, ebx
	jl loc_43BE18
	jz loc_43BE25
	jg loc_43BE32

loc_43BDFD:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_43BE02:
	mov ebx, 1
	jmp loc_43BD98

loc_43BE09:
	add edx, [ecx+14h]
	test edx, edx
	jge loc_43BDDF
	add edx, dword [dword_5118A0]
	jmp loc_43BDDF

loc_43BE18:
	add word [word_50AC32], 2
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_43BE25:
	add word [word_50AC36], 2
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_43BE32:
	add word [word_50AC3A], 2
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43BD80 endp

sub_43BE40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov edx, [eax+1F0h]
	xor eax, eax
	push edx
	mov al, [esi+8Ch]
	push eax
	mov ecx, [esi]
	push ecx
	push aAel1DDD ; "AEL 1 (%d %d %d)"
	push 3
	add esp, 14h
	lea eax, [esi+9Ch]
	mov edx, [esi+3B0h]
	call sub_43C1D0
	test eax, eax
	jnz loc_43BF25
	mov ebp, [esi+3B0h]
	mov [esp+4], eax
	mov [esp], eax
	mov eax, [ebp+1E8h]
	push eax
	push aAel1cD ; "AEL 1c (%d "
	push 3
	mov eax, [esi+1F0h]
	mov edx, [ebp+1F0h]
	add esp, 0Ch
	cmp eax, edx
	jle loc_43BF9B
	and byte [esi+3A9h], 0F7h
	mov ecx, [ebp+1F0h]
	mov edx, dword [dword_511E3C]
	inc ecx
	xor edi, edi
	add ecx, edx
	test edx, edx
	jle loc_43BF04

loc_43BED9:
	mov ebx, dword [dword_511E3C]
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov ebx, dword dword_511AC8[edx*4]
	test byte [ebx+1F4h], 40h
	jz loc_43BF4A

loc_43BEF8:
	mov ebx, dword [dword_511E3C]
	inc edi
	inc ecx
	cmp edi, ebx
	jl loc_43BED9

loc_43BF04:
	cmp dword [esp+4], 0
	jnz loc_43C04E
	push aAel3Purg ; "AEL 3 purg "
	push 3
	add esp, 8
	mov eax, esi
	call sub_43C4D0

loc_43BF25:
	xor eax, eax
	mov al, [esi+8Ch]
	push eax
	mov eax, [esi]
	push eax
	push aAelXDD ; "AEL X (%d %d)"
	push 3
	add esp, 10h
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43BF4A:
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	push eax
	mov eax, [ebx+1E8h]
	push eax
	push aAel1aDD ; "AEL 1a (%d %d)"
	push 3
	mov dh, [ebx+1F4h]
	add esp, 10h
	test dh, 4
	jz loc_43BEF8
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	mov [esp+4], ebx
	cmp eax, 64h
	jle loc_43BF04
	mov dword [esp], 1
	jmp loc_43BF04

loc_43BF9B:
	mov ah, [esi+3A9h]
	and ah, 0F7h
	mov dl, ah
	mov [esi+3A9h], ah
	or dl, 8
	mov [esi+3A9h], dl
	mov ecx, [ebp+1F0h]
	mov ebx, dword [dword_511E3C]
	dec ecx
	xor edi, edi
	add ecx, ebx
	test ebx, ebx
	jle loc_43BF04

loc_43BFCE:
	mov ebx, dword [dword_511E3C]
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov ebx, dword dword_511AC8[edx*4]
	test byte [ebx+1F4h], 40h
	jz loc_43BFFD

loc_43BFED:
	mov eax, dword [dword_511E3C]
	inc edi
	dec ecx
	cmp edi, eax
	jl loc_43BFCE
	jmp loc_43BF04

loc_43BFFD:
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	push eax
	mov eax, [ebx+1E8h]
	push eax
	push aAel1bDD ; "AEL 1b (%d %d)"
	push 3
	mov ah, [ebx+1F4h]
	add esp, 10h
	test ah, 4
	jz loc_43BFED
	mov edx, [ebx+14h]
	mov eax, [esi+14h]
	call sub_43D400
	mov [esp+4], ebx
	cmp eax, 0FFFFFF9Ch
	jge loc_43BF04
	mov dword [esp], 1
	jmp loc_43BF04

loc_43C04E:
	mov eax, [esi+3B0h]
	mov ebx, [eax+0A4h]
	push ebx
	mov edi, [eax+0A0h]
	push edi
	mov edx, [eax+9Ch]
	push edx
	mov ecx, [ebp+1E8h]
	push ecx
	mov ebx, [esi+4ECh]
	mov eax, [esp+14h]
	push ebx
	mov edi, [eax+1E8h]
	push edi
	mov eax, [esi]
	push eax
	push aAel2DDDDDDD ; "AEL 2 %d (%d %d %d) (%d %d %d)"
	push 3
	add esp, 24h
	mov eax, [esp+4]
	mov [esi+3B0h], eax
	mov eax, esi
	call sub_43C120
	test eax, eax
	jnz loc_43BF25
	mov eax, [esi+3B0h]
	mov edx, ebp
	add eax, 9Ch
	call sub_43C170
	test eax, eax
	jnz loc_43C0F6

loc_43C0C3:
	mov ebx, [esi+4ECh]
	dec ebx
	push ebx
	push aAel2aD ; "AEL 2a [%d]"
	push 3
	mov [esi+4ECh], ebx
	mov ebp, [esi+4ECh]
	add esp, 0Ch
	test ebp, ebp
	jl loc_43C10A
	mov eax, esi
	call sub_43C230
	jmp loc_43BF25

loc_43C0F6:
	cmp dword [esp], 0
	jnz loc_43C0C3
	cmp dword [dword_511E40], 1
	jz loc_43C0C3
	jmp loc_43BF25

loc_43C10A:
	mov eax, esi
	call sub_43C4D0
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43BE40 endp

sub_43C120: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, dword [dword_511E40]
	lea esi, [eax+9Ch]
	xor ebx, ebx
	test edx, edx
	jle loc_43C158
	xor ecx, ecx

loc_43C139:
	mov eax, esi
	mov edx, dword dword_511D08[ecx]
	call sub_43C170
	test eax, eax
	jnz loc_43C160
	mov edi, dword [dword_511E40]
	inc ebx
	add ecx, 4
	cmp ebx, edi
	jl loc_43C139

loc_43C158:
	xor eax, eax
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43C160:
	mov eax, 1
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43C120 endp

sub_43C170: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	lea ebx, [edx+9Ch]
	mov eax, [eax+8]
	sub eax, [ebx+8]
	test eax, eax
	jle loc_43C1A3

loc_43C184:
	mov edx, eax
	mov eax, [ecx]
	sub eax, [ebx]
	test eax, eax
	jle loc_43C1A7

loc_43C18E:
	cmp eax, edx
	jle loc_43C1AB
	sar edx, 2
	add eax, edx
	cmp eax, 0C80000h
	jle loc_43C1BC
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_43C1A3:
	neg eax
	jmp loc_43C184

loc_43C1A7:
	neg eax
	jmp loc_43C18E

loc_43C1AB:
	sar eax, 2
	add eax, edx
	cmp eax, 0C80000h
	jle loc_43C1BC
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_43C1BC:
	mov eax, 1
	pop ecx
	pop ebx
	ret
;sub_43C170 endp

sub_43C1D0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	lea ebx, [edx+9Ch]
	mov eax, [eax+8]
	sub eax, [ebx+8]
	test eax, eax
	jle loc_43C203

loc_43C1E4:
	mov edx, eax
	mov eax, [ecx]
	sub eax, [ebx]
	test eax, eax
	jle loc_43C207

loc_43C1EE:
	cmp eax, edx
	jle loc_43C20B
	sar edx, 2
	add eax, edx
	cmp eax, 0F40000h
	jle loc_43C21C
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_43C203:
	neg eax
	jmp loc_43C1E4

loc_43C207:
	neg eax
	jmp loc_43C1EE

loc_43C20B:
	sar eax, 2
	add eax, edx
	cmp eax, 0F40000h
	jle loc_43C21C
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_43C21C:
	mov eax, 1
	pop ecx
	pop ebx
	ret
;sub_43C1D0 endp

sub_43C230: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ebp, eax
	mov edi, esp
	mov esi, dword_4383A8
	movsd
	movsd
	movsd
	call sub_43C5D0
	test byte [ebp+3A9h], 10h
	jnz loc_43C416
	mov eax, 1

loc_43C25C:
	xor eax, dword [dword_512228]
	jz loc_43C41D
	cmp dword [dword_50AC94], 1
	jnz loc_43C41D

loc_43C275:
	mov edx, [ebp+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov ecx, dword [dword_5118A4]
	shl eax, 2
	mov ebx, dword [dword_4D6A80]
	add ecx, eax
	mov eax, dword [dword_4D6A78]
	imul eax, ebx
	xor edx, edx
	mov dl, [ecx+21h]
	shl edx, 0Fh
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov ebx, dword [dword_4D6A7C]
	mov dword [dword_4D6A78], eax
	and ebx, 0FFFF00h
	mov al, [ecx+1Fh]
	shr ebx, 8
	and al, 0Fh
	and eax, 0FFh
	imul eax, ebx
	shr eax, 10h
	mov ecx, edx
	inc eax
	imul ecx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub ecx, eax

loc_43C2E1:
	mov [ebp+394h], ecx
	mov eax, [ebp+3A4h]
	mov esi, [ebp+394h]
	add esi, eax
	mov eax, ebp
	mov [ebp+394h], esi
	call sub_438630
	mov eax, ebp
	call sub_43D4D0
	mov eax, ebp
	mov eax, ebp
	call sub_43C870
	mov eax, [ebp+394h]
	mov edi, 10000h
	mov [esp], eax
	mov [esp+4], edi
	test byte [ebp+3A9h], 10h
	jz loc_43C4BF
	mov ecx, 1

loc_43C33B:
	mov ebx, esp
	mov eax, dword [dword_512228]
	mov edx, [ebp+14h]
	xor ecx, eax
	mov eax, ebp
	call sub_4624B0
	mov eax, ebp
	lea edi, [esp+0Ch]
	call sub_438630
	lea esi, [ebp+0DCh]
	movsd
	movsd
	movsd
	mov edx, [ebp+39Ch]
	test edx, edx
	jle loc_43C4C6
	mov ecx, edx

loc_43C372:
	mov edx, [esp+0Ch]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov [esp+0Ch], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	mov [esp+10h], eax
	mov eax, ecx
	lea esi, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edi, [ebp+0A8h]
	mov [esp+14h], eax
	movsd
	movsd
	movsd
	mov dword [ebp+0E8h], 0
	mov dword [ebp+0ECh], 0
	mov dword [ebp+0F0h], 0
	mov word [ebp+14Ch], 0
	mov dword [ebp+324h], 0
	mov dword [ebp+328h], 0
	mov dword [ebp+3B8h], 0
	mov eax, [ebp+3B8h]
	mov [ebp+3C0h], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43C416:
	xor eax, eax
	jmp loc_43C25C

loc_43C41D:
	test byte [ebp+3A9h], 10h
	jz loc_43C4B8
	mov eax, 1

loc_43C42F:
	xor eax, dword [dword_512228]
	jz loc_43C444
	cmp dword [dword_50AC94], 0FFFFFFFFh
	jz loc_43C275

loc_43C444:
	mov edx, [ebp+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov ecx, dword [dword_5118A4]
	shl eax, 2
	mov edi, dword [dword_4D6A80]
	add ecx, eax
	mov eax, dword [dword_4D6A78]
	imul eax, edi
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	xor eax, eax
	mov ebx, dword [dword_4D6A7C]
	mov al, [ecx+1Fh]
	and ebx, 0FFFF00h
	sar eax, 4
	shr ebx, 8
	and eax, 0Fh
	imul eax, ebx
	xor edx, edx
	mov dl, [ecx+20h]
	shl edx, 0Fh
	mov ecx, edx
	shr eax, 10h
	neg ecx
	inc eax
	imul ecx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ecx, eax
	jmp loc_43C2E1

loc_43C4B8:
	xor eax, eax
	jmp loc_43C42F

loc_43C4BF:
	xor ecx, ecx
	jmp loc_43C33B

loc_43C4C6:
	mov ecx, edx
	neg ecx
	jmp loc_43C372
;sub_43C230 endp

sub_43C4D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 0Ch
	mov ecx, eax
	mov eax, dword [dword_4D6A78]
	mov edx, dword [dword_4D6A80]
	imul eax, edx
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	mov eax, dword [dword_4D6A7C]
	and eax, 0FFFF00h
	mov ebx, dword [dword_50AC68]
	shr eax, 8
	imul eax, ebx
	mov edi, esp
	mov esi, dword_43839C
	movsd
	movsd
	movsd
	shr eax, 10h
	mov byte [ecx+8Dh], 0
	inc eax
	mov [ecx+3C4h], eax
	mov esi, dword [dword_5118A4]
	lea edi, [ecx+9Ch]
	lea esi, [esi+0B4h]
	movsd
	movsd
	movsd
	mov edx, [ecx+1E8h]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 11h
	mov esi, [ecx+0A0h]
	add eax, 1900000h
	lea edx, [ecx+8]
	add esi, eax
	mov eax, 5
	mov [ecx+0A0h], esi
	call sub_44A690
	mov word [ecx+6], 5
	mov dword [ecx+1F8h], 0
	mov esi, esp
	lea edi, [ecx+0A8h]
	mov dword [ecx+1FCh], 0
	movsd
	movsd
	movsd
	mov esi, esp
	lea edi, [ecx+0E8h]
	movsd
	movsd
	movsd
	mov edi, dword [dword_50AC8C]
	mov ah, [ecx+3A8h]
	inc edi
	or ah, 10h
	mov dword [dword_50AC8C], edi
	mov [ecx+3A8h], ah
	add esp, 0Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43C4D0 endp

sub_43C5D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp+14h], eax
	mov eax, [eax+3B0h]
	mov edx, [eax+39Ch]
	cmp edx, 40000h
	jl loc_43C602
	cmp dword [dword_512228], 0
	jz loc_43C63B
	cmp edx, 0FFFC0000h
	jle loc_43C63B

loc_43C602:
	mov eax, [esp+14h]
	mov dl, [eax+3A9h]
	mov dword [eax+4ECh], 0
	and dl, 0F7h
	mov [eax+3A9h], dl
	mov bl, [eax+3A9h]
	lea edx, [eax+3A8h]
	test bl, 10h
	jz loc_43C7AE
	mov eax, 800h

loc_43C639:
	or [edx], eax

loc_43C63B:
	cmp dword [dword_50AC78], 0
	jz loc_43C64F
	mov eax, [esp+14h]
	and byte [eax+3A9h], 0EFh

loc_43C64F:
	mov eax, [esp+14h]
	test byte [eax+3A9h], 8
	jnz loc_43C7BF
	cmp dword [dword_512228], 0
	jz loc_43C7B5

loc_43C66D:
	mov eax, 1

loc_43C672:
	mov [esp+0Ch], eax
	mov edx, dword [dword_4D6A80]
	mov eax, dword [dword_4D6A78]
	imul eax, edx
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	mov eax, dword [dword_4D6A7C]
	and eax, 0FFFF00h
	mov ecx, dword [dword_511E3C]
	shr eax, 8
	imul ecx, eax
	mov eax, [esp+14h]
	mov eax, [eax+3B0h]
	mov ebx, dword [dword_511E3C]
	mov eax, [eax+1F0h]
	mov esi, [esp+0Ch]
	add eax, ebx
	shr ecx, 10h
	add eax, esi
	mov ebp, 1
	add ecx, eax
	cmp ebx, ebp
	jle loc_43C71A
	mov eax, esi
	shl eax, 4
	sub eax, esi
	shl eax, 2
	add eax, esi
	mov [esp+10h], eax

loc_43C6E5:
	mov ebx, dword [dword_511E3C]
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov ebx, dword dword_511AC8[edx*4]
	mov al, [ebx+1F4h]
	test al, 40h
	jz loc_43C7D6

loc_43C709:
	mov eax, [esp+0Ch]
	mov edx, dword [dword_511E3C]
	inc ebp
	add ecx, eax
	cmp ebp, edx
	jl loc_43C6E5

loc_43C71A:
	mov ebp, dword [dword_4D6A80]
	mov eax, dword [dword_4D6A78]
	imul eax, ebp
	mov dword [dword_4D6A7C], eax
	mov edx, dword [dword_4D6A7C]
	and edx, 0FFFF00h
	and eax, 0FFFFh
	shr edx, 8
	mov dword [dword_4D6A78], eax
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	sub eax, edx
	shr eax, 10h
	mov edx, dword [dword_512228]
	add eax, 32h
	test edx, edx
	jz loc_43C775
	mov edx, [esp+14h]
	test byte [edx+3A9h], 10h
	jnz loc_43C775
	neg dword [esp+0Ch]

loc_43C775:
	imul eax, [esp+0Ch]
	test eax, eax
	jl loc_43C83D
	mov edx, [esp+14h]
	mov edx, [edx+3B0h]
	mov ebp, [edx+14h]
	mov edx, dword [dword_5118A0]
	add eax, ebp
	cmp eax, edx
	jl loc_43C79D
	sub eax, edx

loc_43C79D:
	mov edx, [esp+14h]
	mov [edx+14h], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43C7AE:
	xor eax, eax
	jmp loc_43C639

loc_43C7B5:
	mov eax, 0FFFFFFFFh
	jmp loc_43C672

loc_43C7BF:
	cmp dword [dword_512228], 0
	jz loc_43C66D
	mov eax, 0FFFFFFFFh
	jmp loc_43C672

loc_43C7D6:
	test al, 4
	jz loc_43C709
	mov eax, [esp+14h]
	mov eax, [eax+3B0h]
	mov esi, [esp+10h]
	mov eax, [eax+14h]
	add eax, esi
	test esi, esi
	jl loc_43C831
	mov esi, dword [dword_5118A0]
	cmp eax, esi
	jl loc_43C801
	sub eax, esi

loc_43C801:
	imul eax, 24h
	mov esi, dword [dword_5118A4]
	mov edi, esp
	add esi, eax
	mov edx, ebx
	mov eax, esp
	movsd
	movsd
	movsd
	call sub_43C170
	test eax, eax
	jz loc_43C71A
	mov eax, [esp+14h]
	mov [eax+3B0h], ebx
	jmp loc_43C709

loc_43C831:
	test eax, eax
	jge loc_43C801
	add eax, dword [dword_5118A0]
	jmp loc_43C801

loc_43C83D:
	mov edx, [esp+14h]
	mov edx, [edx+3B0h]
	add eax, [edx+14h]
	test eax, eax
	jge loc_43C79D
	add eax, dword [dword_5118A0]
	mov edx, [esp+14h]
	mov [edx+14h], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43C5D0 endp

sub_43C870: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov eax, [eax+3B0h]
	mov dl, [ecx+3A9h]
	mov eax, [eax+3A0h]
	test dl, 10h
	jz loc_43C8B4
	mov eax, ecx
	call sub_439080
	mov edx, eax
	mov [ecx+39Ch], eax
	neg edx
	mov [ecx+39Ch], edx
	mov [ecx+398h], edx
	cmp dword [dword_512228], 0
	jnz loc_43C906
	pop edx
	pop ecx
	ret

loc_43C8B4:
	mov edx, dword [dword_50AB74]
	sar eax, 1
	sar edx, 1
	add edx, eax
	mov eax, ecx
	mov [ecx+398h], edx
	call sub_439030
	mov dh, [ecx+1F4h]
	mov [ecx+398h], eax
	test dh, 8
	jz loc_43C8F4
	mov dword [ecx+39Ch], 0
	cmp dword [dword_512228], 0
	jnz loc_43C906
	pop edx
	pop ecx
	ret

loc_43C8F4:
	mov [ecx+39Ch], eax
	cmp dword [dword_512228], 0
	jnz loc_43C906
	pop edx
	pop ecx
	ret

loc_43C906:
	push edi
	push esi
	mov edi, [ecx+398h]
	mov esi, [ecx+39Ch]
	neg edi
	neg esi
	mov [ecx+398h], edi
	mov [ecx+39Ch], esi
	pop esi
	pop edi
	pop edx
	pop ecx
	ret
;sub_43C870 endp

sub_43C930: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	cmp dword [dword_5121F8], 2
	jnz loc_43CA60
	xor ecx, ecx
	mov dword [dword_50AD04], ecx

loc_43C948:
	push edi
	push esi
	push ebx
	call sub_43D2D0
	mov esi, dword [dword_511E3C]
	mov edi, eax
	test esi, esi
	jle loc_43C974
	lea ebx, 0[esi*4]
	xor ecx, ecx

loc_43C965:
	add ecx, 4
	xor ebp, ebp
	mov dword dword_50A9D4[ecx], ebp
	cmp ecx, ebx
	jl loc_43C965

loc_43C974:
	mov eax, dword [dword_511E30]
	xor ebx, ebx
	test eax, eax
	jle loc_43C9C4
	xor esi, esi

loc_43C981:
	mov eax, dword dword_511C48[esi]
	mov ecx, [eax+1E8h]
	mov eax, dword [dword_511E44]
	mov edx, dword dword_512670[ecx*4]
	dec eax
	sub eax, edx
	mov edx, edi
	inc ebx
	call sub_464400
	mov dword dword_5126B0[ecx*4], eax
	call sub_4643D0
	mov dword dword_50A9D8[ecx*4], eax
	mov ecx, dword [dword_511E30]
	add esi, 4
	cmp ebx, ecx
	jl loc_43C981

loc_43C9C4:
	mov eax, dword [dword_511D08]
	xor ebx, ebx
	xor ecx, ecx
	mov dword [dword_50AC90], eax
	mov dword [dword_50AC84], ebx
	mov dword [dword_50A958], ebx
	mov dword [dword_50A954], ebx
	mov dword [dword_50A950], ebx
	mov dword [dword_50A964], ebx
	mov dword [dword_50A960], ebx
	mov dword [dword_50A95C], ebx
	mov dword [dword_50A970], ebx
	mov dword [dword_50A96C], ebx
	mov dword [dword_50A968], ebx
	mov dword [dword_50A97C], ebx
	mov dword [dword_50A978], ebx
	mov dword [dword_50A974], ebx
	mov dword [dword_50A988], ebx
	mov dword [dword_50A984], ebx
	mov dword [dword_50A980], ebx
	mov dword [dword_50A9CC], ebx
	mov dword [dword_50A9D0], ebx
	mov dword [dword_50A9D4], ebx
	pop ebx
	pop esi
	pop edi

loc_43CA4C:
	add ecx, 4
	xor edx, edx
	mov dword dword_50A988[ecx], edx
	cmp ecx, 40h
	jnz loc_43CA4C
	pop ebp
	pop edx
	pop ecx
	ret

loc_43CA60:
	mov dword [dword_50AD04], 1
	jmp loc_43C948
;sub_43C930 endp

sub_43CA70: ;SUBROUTINE
	call sub_43CF10
	call sub_464440
	call sub_440420
	ret
;sub_43CA70 endp

sub_43CA90: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_50AC8C], edx
	pop edx
	ret
;sub_43CA90 endp

sub_43CAA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	call sub_440700
	mov edi, 4
	xor edx, edx
	mov esi, 10000h
	mov dword [dword_50AA18], edx

loc_43CABC:
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	add edi, 4
	mov ebx, eax
	mov eax, 10000h
	add esi, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov dword dword_50AA14[edi], eax
	cmp edi, 140h
	jnz loc_43CABC
	xor ecx, ecx
	mov dword [dword_50AC8C], ecx
	call sub_43D8E0
	mov dword [dword_50AC64], eax
	call sub_43D8B0
	mov dword [dword_50AC68], eax
	call sub_43D860
	mov dword [dword_50AC78], eax
	call sub_43D830
	mov dword [dword_50AC94], eax
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43CAA0 endp

sub_43CB40: ;SUBROUTINE
	call sub_440410
	ret
;sub_43CB40 endp

sub_43CB60: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0E8h
	mov [esp+0E4h], eax
	mov [esp+0E0h], edx
	mov eax, edx
	mov edx, [esp+0E4h]
	mov ebx, 1Ch
	call sub_475F00
	mov [edx+3B4h], eax
	add edx, 3D0h
	mov eax, [esp+0E0h]
	mov ebp, [esp+0E4h]
	call sub_475F00
	mov [edx-14h], eax
	mov eax, [esp+0E0h]
	xor edi, edi
	call sub_475E70

loc_43CBBC:
	mov edx, [esp+0E4h]
	lea esi, 0[edi*4]
	add esi, edx
	mov eax, 10000h
	mov ebx, [esi+3D0h]

loc_43CBD7:
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esi+3ECh], eax

loc_43CBF2:
	inc edi
	add esi, 4
	cmp edi, 7
	jge loc_43CC20
	cmp esi, ebp
	jz loc_43CBBC
	mov ebx, [esi+3D0h]
	test ebx, ebx
	jnz loc_43CC11
	mov [esi+3ECh], ebx
	jmp loc_43CBF2

loc_43CC11:
	mov edx, [esi+3CCh]
	mov eax, 10000h
	sub ebx, edx
	jmp loc_43CBD7

loc_43CC20:
	mov esi, [esp+0E4h]
	mov ecx, dword [dword_512204]
	add esi, 408h
	test ecx, ecx
	jnz loc_43CD60
	mov ebx, 0E0h
	mov eax, [esp+0E0h]
	mov edx, esi
	call sub_475E70
	mov eax, [esp+0E0h]
	mov edx, [esp+0E4h]
	call sub_475F00
	mov [edx+550h], eax
	mov eax, [esp+0E0h]
	mov ebx, 0E0h
	call sub_475F00
	mov [edx+554h], eax
	mov edx, esp
	mov eax, [esp+0E0h]
	call sub_475E70
	mov eax, [esp+0E0h]
	call sub_475F00
	mov eax, [esp+0E0h]
	call sub_475F00

loc_43CCA4:
	mov eax, [esp+0E0h]
	mov edx, [esp+0E4h]
	call sub_475F00
	mov [edx+4E8h], eax
	mov eax, [esp+0E0h]
	call sub_475F00
	mov [edx+4F0h], eax
	mov eax, [esp+0E0h]
	call sub_475F00
	mov [edx+4F4h], eax
	mov eax, [esp+0E0h]
	call sub_475F00
	mov ebx, [edx+4F0h]
	sub ebx, [edx+4F4h]
	shl ebx, 10h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esp+0E4h]
	mov [edx+4F8h], eax
	mov eax, [esp+0E0h]
	call sub_475F00
	mov [edx+560h], eax
	mov eax, [esp+0E0h]
	add edx, 408h
	call sub_475F00
	mov [edx+15Ch], eax
	mov eax, [esp+0E4h]
	call sub_440370
	add esp, 0E8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43CD60:
	mov ebx, 0E0h
	mov edx, esp
	mov eax, [esp+0E0h]
	call sub_475E70
	mov eax, [esp+0E0h]
	mov ebx, 0E0h
	call sub_475F00
	mov eax, [esp+0E0h]
	mov edx, esi
	call sub_475F00
	mov eax, [esp+0E0h]
	call sub_475E70
	mov eax, [esp+0E0h]
	mov edx, [esp+0E4h]
	call sub_475F00
	mov [edx+550h], eax
	mov eax, [esp+0E0h]
	call sub_475F00
	mov [edx+554h], eax
	jmp loc_43CCA4
;sub_43CB60 endp

sub_43CDD0: ;SUBROUTINE
	push ebp
	sub esp, 0Ch
	mov ebp, eax
	mov dword [eax+528h], 0
	mov dword [eax+520h], 0
	mov dword [eax+4FCh], 0
	mov dword [eax+394h], 0
	mov dword [eax+398h], 0
	mov dword [eax+39Ch], 0
	mov dword [eax+3A0h], 0
	mov dword [eax+3A4h], 0
	mov dword [eax+3ACh], 0
	mov dword [eax+3A8h], 0
	mov dword [eax+214h], 0
	mov dword [eax+3B8h], 0
	mov dword [eax+3C0h], 0
	mov dword [eax+3C4h], 0
	mov dword [eax+3C8h], 0
	mov dword [eax+3CCh], 0
	mov dword [eax+4ECh], 0
	mov dword [eax+54Ch], 0
	mov dword [eax+548h], 0
	mov dword [eax+53Ch], 0
	mov dword [eax+540h], 0
	mov dword [eax+544h], 0
	mov dword [eax+524h], 1
	mov [eax+3B0h], eax
	test byte [eax+1F4h], 10h
	jnz loc_43CED9
	test byte [ebp+1F4h], 20h
	jnz loc_43CED9
	add esp, 0Ch
	pop ebp
	ret

loc_43CED9:
	push edi
	push esi
	push edx
	push ecx
	push ebx
	lea edi, [esp+14h]
	lea ebx, [esp+14h]
	mov esi, dword_438390
	mov eax, ebp
	xor edx, edx
	movsd
	movsd
	movsd
	call sub_43C4D0
	mov ecx, dword [dword_512228]
	mov eax, ebp
	call sub_4624B0
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	add esp, 0Ch
	pop ebp
	ret
;sub_43CDD0 endp

sub_43CF10: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 0FCh
	push aTrafcfg_dat ; "trafcfg.dat"
	lea eax, [esp+4]
	push eax
	lea edx, [esp+8]
	call sprintf_
	add esp, 8
	mov eax, dword [dword_4D5EF0]
	mov ebx, 1
	call sub_49D67C
	mov edx, eax
	xor eax, eax
	call sub_475F80
	mov edx, eax
	call sub_43CF70
	mov eax, edx
	call sub_43D110
	mov eax, edx
	call sub_43CFF0
	mov eax, edx
	call sub_475F50
	add esp, 0FCh
	pop edx
	pop ebx
	ret
;sub_43CF10 endp

sub_43CF70: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	call sub_475F00
	mov dword [dword_50AB58], eax
	mov eax, ecx
	call sub_475F00
	mov dword [dword_50AB5C], eax
	mov eax, ecx
	xor edx, edx
	call sub_475F00
	mov dword [dword_50AB60], eax

loc_43CF98:
	mov eax, ecx
	add edx, 4
	call sub_475F00
	mov dword dword_50AB60[edx], eax
	cmp edx, 10h
	jnz loc_43CF98
	mov eax, ecx
	mov edx, 471Ch
	call sub_475F00
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_50AB74], eax
	xor edx, edx

loc_43CFCA:
	mov eax, ecx
	add edx, 4
	call sub_475F00
	mov dword dword_50AB74[edx], eax
	cmp edx, 10h
	jnz loc_43CFCA
	pop edx
	pop ecx
	ret
;sub_43CF70 endp

sub_43CFF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov edx, eax
	call sub_475F00
	mov dword [dword_50AC98], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_512204]
	mov dword [dword_50AC9C], eax
	test ecx, ecx
	jz loc_43D0D3
	mov eax, edx
	call sub_475F00
	mov eax, edx
	call sub_475F00
	mov eax, edx
	call sub_475F00
	mov dword [dword_50ACA0], eax
	mov eax, edx
	call sub_475F00
	mov dword [dword_50ACA4], eax

loc_43D040:
	mov eax, edx
	call sub_475F00
	xor ebx, ebx
	mov dword [dword_50ACA8], eax
	mov ebp, dword_50ACD8

loc_43D053:
	mov ecx, dword_50ACAC

loc_43D058:
	mov eax, edx
	call sub_475F00
	mov [ecx], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+4], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+8], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+0Ch], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+10h], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+14h], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+18h], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+1Ch], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+20h], eax
	mov eax, edx
	call sub_475F00
	mov [ecx+24h], eax
	mov eax, edx
	inc ebx
	call sub_475F00
	mov [ecx+28h], eax
	cmp ebx, 2
	jge loc_43D0FE
	test ebx, ebx
	jz loc_43D053
	mov ecx, ebp
	jmp loc_43D058

loc_43D0D3:
	mov eax, edx
	call sub_475F00
	mov dword [dword_50ACA0], eax
	mov eax, edx
	call sub_475F00
	mov dword [dword_50ACA4], eax
	mov eax, edx
	call sub_475F00
	mov eax, edx
	call sub_475F00
	jmp loc_43D040

loc_43D0FE:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43CFF0 endp

sub_43D110: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 12Ch
	mov ebx, 120h
	mov edx, esp
	call sub_475E70
	mov edx, dword [dword_5121FC]
	cmp edx, 2
	jnz loc_43D2A1
	xor ebx, ebx

loc_43D139:
	mov edx, dword [dword_5121F8]
	lea eax, 0[edx*4]
	sub eax, edx
	mov esi, esp
	shl eax, 5
	shl ebx, 3
	add esi, eax
	lea edi, [esi+ebx]
	xor ecx, ecx
	mov [esp+128h], esi

loc_43D15E:
	cmp dword [dword_511E30], 1
	jle loc_43D2BA
	mov eax, 1

loc_43D170:
	shl eax, 3
	lea edx, [esi+eax]
	mov ebp, dword [dword_511E48]
	mov edx, [edx+ecx*4+50h]
	test ebp, ebp
	jz loc_43D2C1
	mov eax, 1

loc_43D18D:
	shl eax, 3
	lea ebx, 0[ecx*4]
	add eax, esi
	mov eax, [ebx+eax+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512200]
	shl edx, 3
	add edx, esi
	mov ebp, [edx+ebx+30h]
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512204]
	shl edx, 3
	add edx, esi
	lea ebp, [edx+ebx]
	mov ebp, [ebp+20h]
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [edi+8]
	mov edx, eax
	mov eax, ebp
	mov ebp, [esp+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [ebp+0]
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+ebx+120h], eax
	mov eax, [esp+128h]
	add edi, 4
	add eax, 4
	inc ecx
	mov [esp+128h], eax
	cmp ecx, 2
	jl loc_43D15E
	mov eax, [esp+120h]
	mov dword [dword_50AC80], eax
	mov eax, [esp+124h]
	mov ebx, [esp+120h]
	mov dword [dword_50AC88], eax
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ebx, dword [dword_50AC88]
	mov dword [dword_50AC74], eax
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov dword [dword_50AC7C], eax
	add esp, 12Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D2A1:
	cmp edx, 4
	jnz loc_43D2B0
	mov ebx, 1
	jmp loc_43D139

loc_43D2B0:
	mov ebx, 2
	jmp loc_43D139

loc_43D2BA:
	xor eax, eax
	jmp loc_43D170

loc_43D2C1:
	xor eax, eax
	jmp loc_43D18D
;sub_43D110 endp

sub_43D2D0: ;SUBROUTINE
	mov eax, dword [dword_5121F8]
	cmp eax, 1
	jnb loc_43D2ED
	test eax, eax
	jnz loc_43D2F2
	cmp dword [dword_511E30], 1
	jg loc_43D2F8
	mov al, 2
	movsx eax, al
	ret

loc_43D2ED:
	jbe loc_43D2FE
	cmp eax, 2

loc_43D2F2:
	xor al, al
	movsx eax, al
	ret

loc_43D2F8:
	mov al, 3
	movsx eax, al
	ret

loc_43D2FE:
	mov al, 1
	movsx eax, al
	ret
;sub_43D2D0 endp

sub_43D310: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, edx
	mov edx, eax
	shl eax, 3
	add eax, edx
	shl eax, 2
	test ebx, ebx
	jl loc_43D37F
	mov edx, dword [dword_5118A4]
	mov ecx, 7
	mov dl, [edx+eax+21h]
	and edx, 0FFh

loc_43D337:
	shl edx, 0Fh
	shl edx, 2
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, dword dword_50AA18[eax*4]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	add ecx, eax
	test ecx, ecx
	jl loc_43D393
	mov eax, ecx
	cmp eax, 0Dh
	jle loc_43D37C
	mov eax, 0Dh

loc_43D37C:
	pop ecx
	pop ebx
	ret

loc_43D37F:
	mov edx, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+20h]
	mov ecx, 6
	jmp loc_43D337

loc_43D393:
	xor eax, eax
	cmp eax, 0Dh
	jle loc_43D37C
	mov eax, 0Dh
	pop ecx
	pop ebx
	ret
;sub_43D310 endp

sub_43D3B0: ;SUBROUTINE
	push ecx
	mov ecx, 7
	sub ecx, eax
	mov eax, ecx
	mov ecx, 8
	sub ecx, eax
	mov eax, ecx
	test ecx, ecx
	jl loc_43D3E1
	cmp ecx, 10h
	jl loc_43D3D1
	mov eax, 0Fh

loc_43D3D1:
	mov ecx, 0Fh
	sub ecx, eax
	mov eax, 1
	shl eax, cl
	pop ecx
	ret

loc_43D3E1:
	xor eax, ecx
	mov ecx, 0Fh
	sub ecx, eax
	mov eax, 1
	shl eax, cl
	pop ecx
	ret
;sub_43D3B0 endp

sub_43D400: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, dword [dword_5118A0]
	mov esi, eax
	mov ebx, edx
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	mov eax, esi
	sub eax, ebx
	test eax, eax
	jle loc_43D426
	cmp eax, edx
	jg loc_43D434

loc_43D426:
	test eax, eax
	jl loc_43D438

loc_43D42A:
	mov dword [dword_5118A0], ecx
	pop esi
	pop ecx
	pop ebx
	ret

loc_43D434:
	sub eax, ecx
	jmp loc_43D42A

loc_43D438:
	neg edx
	cmp eax, edx
	jge loc_43D42A
	add eax, ecx
	mov dword [dword_5118A0], ecx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_43D400 endp

sub_43D450: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 18h
	mov ecx, [edx+9Ch]
	mov ebx, [eax+9Ch]
	mov esi, [eax+0A0h]
	sub ecx, ebx
	mov edi, [eax+0A4h]
	mov [esp], ecx
	mov ecx, [edx+0A0h]
	mov edx, [edx+0A4h]
	sub ecx, esi
	lea esi, [eax+130h]
	sub edx, edi
	lea edi, [esp+0Ch]
	mov eax, [esp]
	movsd
	movsd
	movsd
	mov [esp+8], edx
	mov edx, [esp+0Ch]
	mov [esp+4], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	mov ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_43D450 endp

sub_43D4D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_4D6A80]
	mov ebx, dword [dword_4D6A78]
	imul ebx, ecx
	mov edx, ebx
	and edx, 0FFFFh
	mov dword [dword_4D6A78], edx
	mov edx, ebx
	and edx, 0FFFF00h
	shr edx, 8
	and edx, 3
	mov cl, [eax+1F4h]
	shl edx, 2
	test cl, 8
	jz loc_43D530
	mov ecx, [eax+1E8h]
	mov ecx, dword dword_50A9D8[ecx*4]
	mov edx, [ecx+edx+0C8h]
	mov [eax+3A4h], edx
	mov dword [dword_4D6A7C], ebx
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D530:
	mov edx, dword dword_50AB78[edx]
	mov [eax+3A4h], edx
	mov dword [dword_4D6A7C], ebx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43D4D0 endp

sub_43D550: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	cmp dword [dword_512228], 0
	jz loc_43D635
	mov edx, [eax+1E8h]
	add edx, edx
	mov ecx, edx
	neg ecx
	test ecx, ecx
	jl loc_43D61B
	mov ecx, [eax+14h]
	sub ecx, edx
	mov ebx, dword [dword_5118A0]
	mov edx, ecx
	cmp ecx, ebx
	jl loc_43D588
	sub edx, ebx

loc_43D588:
	mov bl, [eax+1F4h]
	test bl, 4
	jnz loc_43D616
	test bl, 8
	jz loc_43D5A8
	mov ecx, edx
	sar ecx, 4
	shl ecx, 4
	cmp ecx, edx
	jnz loc_43D616

loc_43D5A8:
	test byte [eax+1F4h], 10h
	jz loc_43D5BB
	mov ecx, edx
	sar ecx, 1
	add ecx, ecx
	cmp ecx, edx
	jnz loc_43D616

loc_43D5BB:
	test byte [eax+1F4h], 8
	jz loc_43D66F
	mov edx, [eax+1E8h]
	mov ecx, dword dword_50A9D8[edx*4]
	mov ecx, [ecx+0D8h]

loc_43D5DB:
	mov edi, dword [dword_4D6A80]
	mov edx, dword [dword_4D6A78]
	imul edx, edi
	mov dword [dword_4D6A7C], edx
	and edx, 0FFFFh
	mov dword [dword_4D6A78], edx
	mov edx, dword [dword_4D6A7C]
	and edx, 0FFFF00h
	shr edx, 8
	imul edx, ecx
	shr edx, 10h
	cmp edx, 1
	jz loc_43D67A

loc_43D616:
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D61B:
	mov ecx, [eax+14h]
	sub ecx, edx
	mov edx, ecx
	test ecx, ecx
	jge loc_43D588
	add edx, dword [dword_5118A0]
	jmp loc_43D588

loc_43D635:
	mov edx, [eax+1E8h]
	add edx, edx
	test edx, edx
	jl loc_43D659
	push esi
	mov esi, [eax+14h]
	mov edi, dword [dword_5118A0]
	add edx, esi
	cmp edx, edi
	jl loc_43D653
	sub edx, edi

loc_43D653:
	pop esi
	jmp loc_43D588

loc_43D659:
	add edx, [eax+14h]
	test edx, edx
	jge loc_43D588
	add edx, dword [dword_5118A0]
	jmp loc_43D588

loc_43D66F:
	mov ecx, [eax+564h]
	jmp loc_43D5DB

loc_43D67A:
	call sub_43D4D0
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43D550 endp

sub_43D690: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, eax
	cmp dword [eax+160h], 0
	jz loc_43D6C5
	mov ebx, [eax+164h]
	test ebx, ebx
	jz loc_43D6C5
	mov esi, [eax+39Ch]
	test esi, esi
	jle loc_43D6CA
	mov eax, esi

loc_43D6B5:
	cmp eax, 0A0000h
	jl loc_43D6D0
	cmp dword [ecx+53Ch], 0
	jle loc_43D6EA

loc_43D6C5:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D6CA:
	mov eax, esi
	neg eax
	jmp loc_43D6B5

loc_43D6D0:
	mov edx, 60h
	mov eax, ecx
	call sub_43DEB0
	cmp dword [ecx+53Ch], 0
	jle loc_43D6EA
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D6EA:
	test byte [ebx+1F4h], 4
	jz loc_43D6C5
	test byte [ecx+1F4h], 8
	jz loc_43D6C5
	cmp dword [dword_512200], 0
	jz loc_43D6C5
	mov eax, [ecx+544h]
	mov dword [ecx+53Ch], 0
	cmp ebx, eax
	jnz loc_43D74C

loc_43D719:
	mov edx, [ecx+540h]
	inc edx
	mov ebx, [ecx+1E8h]
	mov [ecx+540h], edx
	mov ebx, dword dword_50A9D8[ebx*4]
	cmp edx, [ebx+0DCh]
	jle loc_43D6C5
	mov eax, [ebx+0E0h]
	mov [ecx+53Ch], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43D74C:
	mov dword [ecx+540h], 0
	mov [ecx+544h], ebx
	jmp loc_43D719
;sub_43D690 endp

sub_43D760: ;SUBROUTINE
	push edx
	test byte [eax+1F4h], 4
	jnz loc_43D77C
	mov edx, [eax+39Ch]
	test edx, edx
	jle loc_43D77E
	cmp edx, 0A0000h
	jl loc_43D78A

loc_43D77C:
	pop edx
	ret

loc_43D77E:
	neg edx
	cmp edx, 0A0000h
	jl loc_43D78A
	pop edx
	ret

loc_43D78A:
	mov edx, 60h
	call sub_43DEB0
	pop edx
	ret
;sub_43D760 endp

sub_43D7A0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D7C2
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD30[eax]
	pop edx
	ret

loc_43D7C2:
	mov eax, 190h
	pop edx
	ret
;sub_43D7A0 endp

sub_43D7D0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D7F2
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD2C[eax]
	pop edx
	ret

loc_43D7F2:
	mov eax, 10000h
	pop edx
	ret
;sub_43D7D0 endp

sub_43D800: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D822
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD28[eax]
	pop edx
	ret

loc_43D822:
	mov eax, 10000h
	pop edx
	ret
;sub_43D800 endp

sub_43D830: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D852
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD24[eax]
	pop edx
	ret

loc_43D852:
	mov eax, 1
	pop edx
	ret
;sub_43D830 endp

sub_43D860: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jl loc_43D887
	mov eax, dword [dword_5118A4]
	mov al, [eax+43h]
	and eax, 0FFh
	sar eax, 4
	test al, 0Fh
	jnz loc_43D89D
	mov eax, 1
	pop edx
	ret

loc_43D887:
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD20[eax]
	pop edx
	ret

loc_43D89D:
	xor eax, eax
	pop edx
	ret
;sub_43D860 endp

sub_43D8B0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D8D2
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD1C[eax]
	pop edx
	ret

loc_43D8D2:
	mov eax, 1F4h
	pop edx
	ret
;sub_43D8B0 endp

sub_43D8E0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51221C]
	cmp edx, 9
	jge loc_43D902
	lea eax, 0[edx*4]
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov eax, dword dword_50AD18[eax]
	pop edx
	ret

loc_43D902:
	mov eax, 0Ch
	pop edx
	ret
;sub_43D8E0 endp

dword_43D910: times 4 dd 0

sub_43D920: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edx, [eax+394h]
	push edx
	mov ecx, [eax+398h]
	push ecx
	mov ebx, [eax+0F0h]
	push ebx
	mov edi, [eax+0ECh]
	push edi
	mov ebp, [eax+0E8h]
	push ebp
	mov eax, [eax+0B0h]
	push eax
	mov edx, [esi+0ACh]
	push edx
	mov ecx, [esi+0A8h]
	push ecx
	mov ebx, [esi+0A4h]
	push ebx
	mov edi, [esi+0A0h]
	push edi
	mov ebp, [esi+9Ch]
	xor eax, eax
	push ebp
	mov ax, [esi+14Ch]
	push eax
	xor eax, eax
	mov al, [esi+8Ch]
	push eax
	mov eax, [esi]
	push eax
	push aAiAip1DDDDDDDD ; "AI-AIP 1 (%d) [%d %d] [%d %d %d] [%d %d"...
	push 3
	add esp, 40h
	push dword_50AD10
	mov edx, 1
	push dword_50AD0C
	mov eax, edx
	push dword_50AD08
	mov ecx, [esi]
	mov ebx, [esi+88h]
	call sub_471620
	test eax, eax
	jz loc_43DA4A
	test byte [esi+1F4h], 2
	jz loc_43DA01
	mov eax, [esi+0A8h]
	mov edx, [esi+0B0h]
	test eax, eax
	jle loc_43DA51

loc_43D9E2:
	mov ecx, eax
	test edx, edx
	jle loc_43DA55
	mov eax, edx

loc_43D9EE:
	cmp ecx, eax
	jle loc_43DA5B
	sar eax, 2

loc_43D9F9:
	add eax, ecx
	mov [esi+3A0h], eax

loc_43DA01:
	mov eax, esi
	call sub_43DB50
	test byte [esi+3A8h], 10h
	jnz loc_43DA21
	test byte [esi+1F4h], 8
	jnz loc_43DA21
	mov eax, esi
	call sub_43BE40

loc_43DA21:
	test byte [esi+3A8h], 10h
	jnz loc_43DA60
	cmp dword [dword_540F44], 1
	jz loc_43DAAC
	test byte [esi+1F4h], 8
	jz loc_43DA4A
	cmp word [esi+14Ch], 0
	jz loc_43DA69

loc_43DA4A:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DA51:
	neg eax
	jmp loc_43D9E2

loc_43DA55:
	mov eax, edx
	neg eax
	jmp loc_43D9EE

loc_43DA5B:
	sar ecx, 2
	jmp loc_43D9F9

loc_43DA60:
	mov eax, esi
	call sub_43F5D0
	jmp loc_43DA4A

loc_43DA69:
	mov dword [esi+0ACh], 0
	mov dword [esi+0B0h], 0
	mov dword [esi+0E8h], 0
	mov dword [esi+0ECh], 0
	mov dword [esi+0F0h], 0
	mov dword [esi+0A8h], 0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DAAC:
	mov eax, esi
	call sub_43FD90
	cmp byte [esi+8Ch], 0
	jz loc_43DB40
	mov eax, esi
	call sub_43F830

loc_43DAC7:
	mov ecx, [esi+394h]
	push ecx
	mov ebx, [esi+398h]
	push ebx
	mov edi, [esi+0F0h]
	push edi
	mov ebp, [esi+0ECh]
	push ebp
	mov eax, [esi+0E8h]
	push eax
	mov edx, [esi+0B0h]
	push edx
	mov ecx, [esi+0ACh]
	push ecx
	mov ebx, [esi+0A8h]
	push ebx
	mov edi, [esi+0A4h]
	push edi
	mov ebp, [esi+0A0h]
	push ebp
	mov eax, [esi+9Ch]
	push eax
	xor eax, eax
	mov ax, [esi+14Ch]
	push eax
	xor eax, eax
	mov al, [esi+8Ch]
	push eax
	mov edx, [esi]
	push edx
	push aAiAipXDDDDDDDD ; "AI-AIP X (%d) [%d %d] [%d %d %d] [%d %d"...
	push 3
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DB40:
	mov eax, esi
	call sub_43DBF0
	jmp loc_43DAC7
;sub_43D920 endp

sub_43DB50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, [eax+3ACh]
	cmp ecx, [eax+394h]
	jle loc_43DB9F
	cmp ecx, [eax+548h]
	jge loc_43DB9F
	mov [eax+548h], ecx

loc_43DB72:
	mov ebp, [eax+394h]
	mov edx, [eax+548h]
	cmp edx, ebp
	jge loc_43DBC5
	lea edi, [edx+3333h]
	mov ebp, [eax+394h]
	mov [eax+548h], edi
	cmp edi, ebp
	jg loc_43DBBD

loc_43DB98:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DB9F:
	mov esi, [eax+3ACh]
	cmp esi, [eax+548h]
	jle loc_43DB72
	cmp esi, [eax+394h]
	jge loc_43DB72
	mov [eax+548h], esi
	jmp loc_43DB72

loc_43DBBD:
	mov [eax+548h], ebp
	jmp loc_43DB98

loc_43DBC5:
	jle loc_43DB98
	lea ebx, [edx-3333h]
	mov esi, [eax+394h]
	mov [eax+548h], ebx
	cmp ebx, esi
	jge loc_43DB98
	mov [eax+548h], esi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43DB50 endp

sub_43DBF0: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	cmp word [eax+14Ch], 0
	jnz loc_43DC0E
	cmp dword [eax+0D4h], 4CCCh
	jl loc_43DC80

loc_43DC0E:
	test byte [ecx+1F4h], 1
	jz loc_43DC33
	cmp dword [ecx+280h], 2
	jnz loc_43DC33
	mov esi, [ecx+39Ch]
	test esi, esi
	jle loc_43DC88
	mov eax, esi

loc_43DC2C:
	cmp eax, 20000h
	jl loc_43DC8E

loc_43DC33:
	cmp word [ecx+14Ch], 0
	jnz loc_43DC7D
	mov eax, ecx
	call sub_43DDD0
	mov eax, ecx
	call sub_46AEF0
	test eax, eax
	jz loc_43DCB4

loc_43DC4F:
	push edx
	mov edx, 40h
	mov eax, ecx
	call sub_43DEB0
	pop edx

loc_43DC5D:
	mov eax, ecx
	call sub_43EE10
	mov eax, ecx
	call sub_43E960
	test eax, eax
	jz loc_43DCC1
	mov eax, ecx
	call sub_43DF70
	mov eax, ecx
	call sub_43E9B0

loc_43DC7D:
	pop esi
	pop ecx
	ret

loc_43DC80:
	call sub_46A180
	pop esi
	pop ecx
	ret

loc_43DC88:
	mov eax, esi
	neg eax
	jmp loc_43DC2C

loc_43DC8E:
	mov dword [ecx+0F0h], 0
	mov eax, [ecx+0F0h]
	mov [ecx+0ECh], eax
	mov [ecx+0E8h], eax
	mov eax, ecx
	call sub_46A180
	pop esi
	pop ecx
	ret

loc_43DCB4:
	mov eax, ecx
	call sub_43DCE0
	test eax, eax
	jnz loc_43DC4F
	jmp loc_43DC5D

loc_43DCC1:
	mov eax, ecx
	call sub_43E4F0
	mov eax, ecx
	call sub_43E9B0
	pop esi
	pop ecx
	ret
;sub_43DBF0 endp

sub_43DCE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov ebx, [eax+14h]
	lea edx, 0[ebx*8]
	add edx, ebx
	mov ebx, dword [dword_5118A4]
	shl edx, 2
	add edx, ebx
	xor ebx, ebx
	mov bl, [edx+1Fh]
	sar ebx, 4
	mov esi, 7
	and ebx, 0Fh
	sub esi, ebx
	mov ebx, esi
	mov esi, [eax+500h]
	mov ecx, eax
	cmp ebx, esi
	jg loc_43DD83
	mov dl, [edx+1Fh]
	and dl, 0Fh
	and edx, 0FFh
	add edx, 6
	cmp edx, esi
	jl loc_43DD83
	mov edx, 1

loc_43DD38:
	mov ebx, edx
	test edx, edx
	jnz loc_43DD87
	mov edx, dword [dword_50AD0C]
	mov ebp, [eax+54Ch]
	add ebp, edx
	mov [eax+54Ch], ebp
	cmp ebp, 4
	jg loc_43DD7B

loc_43DD57:
	test ebx, ebx
	jnz loc_43DD7B
	cmp byte [ecx+8Ch], 0
	jnz loc_43DD93
	cmp dword [ecx+18h], 0
	jz loc_43DD93
	mov eax, [ecx+20h]
	mov eax, [eax]
	sar eax, 10h
	add eax, eax
	cmp eax, 0D999h
	jle loc_43DDC0

loc_43DD7B:
	xor eax, eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DD83:
	xor edx, edx
	jmp loc_43DD38

loc_43DD87:
	mov dword [eax+54Ch], 0
	jmp loc_43DD57

loc_43DD93:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov eax, [edx+eax+0Ah]
	sar eax, 18h
	shl eax, 9
	cmp eax, 0D999h
	jle loc_43DDC0
	xor eax, eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43DDC0:
	mov eax, 1
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43DCE0 endp

sub_43DDD0: ;SUBROUTINE
	push ebp
	cmp dword [eax+524h], 0FFFFFFFFh
	jnz loc_43DE82
	push esi
	push edx
	push ecx
	mov edx, [eax+548h]
	mov ecx, [eax+3ACh]
	sub edx, 0A0000h
	cmp edx, ecx
	jle loc_43DE84
	cmp dword [eax+538h], 0
	jle loc_43DE84

loc_43DE08:
	mov edx, dword [dword_540F48]
	sub edx, 18h
	mov [eax+528h], edx

loc_43DE17:
	mov edx, dword [dword_540F48]
	mov ebp, [eax+528h]
	mov ecx, [eax+520h]
	sub edx, ebp
	cmp edx, ecx
	jle loc_43DE45
	mov edx, dword [dword_540F48]
	mov dword [eax+524h], 1
	mov [eax+528h], edx

loc_43DE45:
	cmp dword [eax+398h], 140000h
	jle loc_43DE5B
	mov dword [eax+398h], 140000h

loc_43DE5B:
	mov edx, [eax+398h]
	neg edx
	cmp edx, 140000h
	jle loc_43DE75
	mov dword [eax+398h], 0FFEC0000h

loc_43DE75:
	mov dword [eax+548h], 0
	pop ecx
	pop edx
	pop esi

loc_43DE82:
	pop ebp
	ret

loc_43DE84:
	mov edx, [eax+548h]
	mov esi, [eax+3ACh]
	add edx, 0A0000h
	cmp edx, esi
	jge loc_43DE17
	cmp dword [eax+538h], 0
	jl loc_43DE08
	jmp loc_43DE17
;sub_43DDD0 endp

sub_43DEB0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov ebx, edx
	cmp dword [eax+524h], 0FFFFFFFFh
	jnz loc_43DEE2
	mov eax, dword [dword_540F48]
	mov esi, [ecx+528h]
	sub eax, esi
	mov esi, eax
	mov eax, [ecx+520h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp esi, eax
	jg loc_43DF1F

loc_43DEE2:
	cmp dword [ecx+524h], 1
	jnz loc_43DF1B
	mov eax, [ecx+520h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, dword [dword_540F48]
	sub esi, [ecx+528h]
	cmp esi, eax
	jle loc_43DF1B
	mov eax, [ecx+39Ch]
	test eax, eax
	jle loc_43DF3E
	cmp eax, 140000h
	jl loc_43DF4B

loc_43DF1B:
	pop esi
	pop ecx
	pop ebx
	ret

loc_43DF1F:
	mov dword [ecx+524h], 1
	mov eax, dword [dword_540F48]
	mov [ecx+520h], ebx
	mov [ecx+528h], eax
	pop esi
	pop ecx
	pop ebx
	ret

loc_43DF3E:
	neg eax
	cmp eax, 140000h
	jl loc_43DF4B
	pop esi
	pop ecx
	pop ebx
	ret

loc_43DF4B:
	mov dword [ecx+524h], 0FFFFFFFFh
	mov eax, dword [dword_540F48]
	mov [ecx+520h], ebx
	mov [ecx+528h], eax
	pop esi
	pop ecx
	pop ebx
	ret
;sub_43DEB0 endp

sub_43DF70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	mov edi, esp
	mov esi, dword_43D910
	movsd
	movsd
	movsd
	test byte [eax+3A9h], 10h
	jz loc_43E314
	mov eax, 1

loc_43DF97:
	xor eax, dword [dword_512228]
	jz loc_43E31B
	mov eax, 0FFFFFFFFh

loc_43DFA8:
	mov [esp+0Ch], eax
	mov ecx, [ebp+39Ch]
	mov dword [ebp+55Ch], 0
	test ecx, ecx
	jle loc_43E325
	mov eax, ecx

loc_43DFC6:
	mov ebx, [ebp+524h]
	mov esi, eax
	cmp ebx, 0FFFFFFFFh
	jnz loc_43E32E
	mov eax, [ebp+398h]
	mov edi, eax
	mov [esp+10h], eax
	neg edi
	mov [esp+10h], edi

loc_43DFE9:
	mov ebx, [esp+0Ch]
	imul ebx, dword [dword_50AC98]
	mov edx, [ebp+14h]
	mov eax, ebp
	call sub_43F4E0
	mov edx, [ebp+39Ch]
	cmp edx, 0FFFE0000h
	jle loc_43E33D
	cmp edx, 20000h
	jge loc_43E33D
	xor eax, eax

loc_43E01E:
	mov edx, eax
	neg edx

loc_43E022:
	lea eax, [edx+100h]
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	lea ecx, [eax+10000h]
	cmp esi, 120000h
	jle loc_43E07C
	mov edx, 10000h
	mov eax, 0CCCh
	sub edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	mov [ebp+55Ch], edx

loc_43E07C:
	mov eax, 80h
	mov ebx, [ebp+510h]
	mov edx, dword [dword_50ACE8]
	neg ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov ebx, dword [dword_50ACEC]
	cmp eax, ebx
	jge loc_43E390

loc_43E0AA:
	mov edx, dword [dword_50ACEC]
	neg edx
	cmp eax, edx
	jle loc_43E397

loc_43E0BA:
	mov edx, 0A0000h
	mov esi, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, dword [dword_50ACDC]
	cmp eax, edi
	jge loc_43E39E

loc_43E0D9:
	mov edx, dword [dword_50ACDC]
	neg edx
	cmp eax, edx
	jle loc_43E3A5

loc_43E0E9:
	mov edx, [ebp+3A0h]
	cmp eax, edx
	jge loc_43E3AC

loc_43E0F7:
	mov edx, [ebp+3A0h]
	neg edx
	cmp eax, edx
	jle loc_43E3B3

loc_43E107:
	mov ebx, eax
	mov eax, dword [dword_50ACF8]
	mov edi, [ebp+39Ch]
	neg eax
	cmp eax, edi
	jge loc_43E186
	cmp edi, dword [dword_50ACF8]
	jge loc_43E186
	mov edx, dword [dword_50ACFC]
	mov eax, [ebp+3A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jle loc_43E3BA

loc_43E140:
	mov edx, eax
	cmp ebx, eax
	jge loc_43E148
	mov eax, ebx

loc_43E148:
	neg edx
	cmp eax, edx
	jle loc_43E3C1

loc_43E152:
	mov edx, dword [dword_50AD00]
	mov ebx, eax
	mov eax, [ebp+3A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jle loc_43E3C8

loc_43E172:
	mov edx, eax
	cmp esi, eax
	jge loc_43E17A
	mov eax, esi

loc_43E17A:
	neg edx
	cmp eax, edx
	jle loc_43E3CF

loc_43E184:
	mov esi, eax

loc_43E186:
	mov eax, [ebp+2C0h]
	mov edx, dword [dword_50ACF0]
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov esi, [ebp+39Ch]
	neg edx
	test esi, esi
	jle loc_43E3D6
	mov eax, esi

loc_43E1B2:
	cmp eax, 120000h
	jle loc_43E1C4
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax

loc_43E1C4:
	mov edi, [ebp+554h]
	cmp edx, edi
	jge loc_43E3DF

loc_43E1D2:
	mov eax, [ebp+554h]
	neg eax
	cmp edx, eax
	jle loc_43E3E6

loc_43E1E2:
	mov esi, edx
	mov eax, [ebp+2B0h]
	mov edx, dword [dword_50ACE0]
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	mov edx, [ebp+550h]
	cmp eax, edx
	jge loc_43E3ED

loc_43E20C:
	mov edx, [ebp+550h]
	neg edx
	cmp eax, edx
	jle loc_43E3F4

loc_43E21C:
	mov ebx, [ebp+398h]
	mov edi, eax
	test ebx, ebx
	jnz loc_43E3FB

loc_43E22C:
	mov edx, ecx
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, ecx
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	cmp ecx, 8000h
	jge loc_43E4BB
	mov edx, 8000h

loc_43E25D:
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+39Ch]
	mov esi, eax
	test edx, edx
	jle loc_43E4C2
	mov eax, edx

loc_43E27B:
	cmp eax, 0F0000h
	jle loc_43E4CB
	mov [ebp+328h], eax

loc_43E28C:
	mov [ebp+324h], eax
	mov dword [ebp+2A8h], 0
	mov dword [ebp+2C8h], 0
	mov eax, [esp]
	mov dword [ebp+2CCh], 0
	add eax, edi
	mov [ebp+2A4h], eax
	mov eax, [esp+8]
	mov dword [ebp+2D0h], 0
	add eax, ebx
	mov ecx, [ebp+39Ch]
	mov [ebp+2ACh], eax
	test ecx, ecx
	jle loc_43E4E0
	mov eax, ecx

loc_43E2E1:
	cmp eax, 20000h
	jge loc_43E2EA
	xor esi, esi

loc_43E2EA:
	mov dword [ebp+2A0h], 0
	mov eax, [esp+4]
	mov dword [ebp+298h], 0
	add eax, esi
	mov [ebp+29Ch], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43E314:
	xor eax, eax
	jmp loc_43DF97

loc_43E31B:
	mov eax, 1
	jmp loc_43DFA8

loc_43E325:
	mov eax, ecx
	neg eax
	jmp loc_43DFC6

loc_43E32E:
	mov eax, [ebp+398h]
	mov [esp+10h], eax
	jmp loc_43DFE9

loc_43E33D:
	mov edx, [ebp+0B0h]
	mov eax, [ebp+0A8h]
	call sub_49D7E0
	mov edx, [ebp+52Ch]
	sub edx, eax
	cmp edx, 0FFFFFE00h
	jge loc_43E373
	add edx, 400h

loc_43E364:
	mov eax, edx
	test edx, edx
	jle loc_43E01E
	jmp loc_43E022

loc_43E373:
	cmp edx, 200h
	jle loc_43E364
	sub edx, 400h
	mov eax, edx
	test edx, edx
	jle loc_43E01E
	jmp loc_43E022

loc_43E390:
	mov eax, ebx
	jmp loc_43E0AA

loc_43E397:
	mov eax, edx
	jmp loc_43E0BA

loc_43E39E:
	mov eax, edi
	jmp loc_43E0D9

loc_43E3A5:
	mov eax, edx
	jmp loc_43E0E9

loc_43E3AC:
	mov eax, edx
	jmp loc_43E0F7

loc_43E3B3:
	mov eax, edx
	jmp loc_43E107

loc_43E3BA:
	neg eax
	jmp loc_43E140

loc_43E3C1:
	mov eax, edx
	jmp loc_43E152

loc_43E3C8:
	neg eax
	jmp loc_43E172

loc_43E3CF:
	mov eax, edx
	jmp loc_43E184

loc_43E3D6:
	mov eax, esi
	neg eax
	jmp loc_43E1B2

loc_43E3DF:
	mov edx, edi
	jmp loc_43E1D2

loc_43E3E6:
	mov edx, eax
	jmp loc_43E1E2

loc_43E3ED:
	mov eax, edx
	jmp loc_43E20C

loc_43E3F4:
	mov eax, edx
	jmp loc_43E21C

loc_43E3FB:
	mov edx, [esp+0Ch]
	mov eax, [ebp+2B8h]
	imul eax, edx
	mov edx, dword [dword_50ACF8]
	neg edx
	cmp edx, eax
	jge loc_43E418
	test eax, eax
	jle loc_43E44E

loc_43E418:
	mov edx, [esp+0Ch]
	mov eax, [ebp+2B8h]
	imul eax, edx
	cmp eax, dword [dword_50ACF8]
	jge loc_43E437
	test eax, eax
	jl loc_43E437
	cmp eax, [esp+10h]
	jl loc_43E454

loc_43E437:
	mov ebx, [ebp+39Ch]
	test ebx, ebx
	jle loc_43E470
	mov eax, ebx
	test eax, eax
	jg loc_43E47F
	xor ebx, ebx
	jmp loc_43E22C

loc_43E44E:
	cmp eax, [esp+10h]
	jle loc_43E418

loc_43E454:
	mov eax, ebp
	call sub_43FB80
	mov ebx, [ebp+524h]
	mov byte [ebp+2D8h], 0
	imul ebx, eax
	jmp loc_43E22C

loc_43E470:
	mov eax, ebx
	neg eax
	test eax, eax
	jg loc_43E47F
	xor ebx, ebx
	jmp loc_43E22C

loc_43E47F:
	mov ebx, [ebp+398h]
	sub ebx, [ebp+39Ch]
	mov edx, [ebp+1F4h]
	mov eax, ebp
	and edx, 8
	call sub_43FD50
	mov byte [ebp+2D8h], 0FFh
	mov ebx, eax
	mov eax, [ebp+2B8h]
	neg ebx
	test eax, eax
	jge loc_43E22C
	neg ebx
	jmp loc_43E22C

loc_43E4BB:
	mov edx, ecx
	jmp loc_43E25D

loc_43E4C2:
	mov eax, edx
	neg eax
	jmp loc_43E27B

loc_43E4CB:
	mov dword [ebp+328h], 0
	mov eax, [ebp+328h]
	jmp loc_43E28C

loc_43E4E0:
	mov eax, ecx
	neg eax
	jmp loc_43E2E1
;sub_43DF70 endp

sub_43E4F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov ecx, eax
	test byte [eax+3A9h], 10h
	jz loc_43E82C
	mov eax, 1

loc_43E50D:
	xor eax, dword [dword_512228]
	jz loc_43E833
	mov esi, 0FFFFFFFFh

loc_43E51E:
	mov edx, [ecx+3ACh]
	mov eax, [ecx+548h]
	mov edi, 10000h
	sub edx, eax
	mov dword [ecx+55Ch], 0
	mov [esp], edx
	mov eax, [ecx+2B8h]
	mov edx, 62h
	mov ebp, [ecx+538h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea ebx, [eax+edi]
	mov edx, ebx
	mov eax, [ecx+550h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+10h], eax
	mov [esp+18h], eax
	mov edx, ebx
	mov eax, dword [dword_50ACB4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+0Ch], eax
	mov eax, [ecx+558h]
	cmp eax, edi
	jle loc_43E5BF
	mov edx, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+18h], eax
	mov edx, ebx
	mov eax, [ecx+558h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+0Ch], eax

loc_43E5BF:
	mov edx, dword [dword_50ACBC]
	mov eax, [ecx+398h]
	mov ebx, [ecx+510h]
	mov [esp+14h], eax
	mov eax, 80h
	neg ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_50ACC0]
	cmp eax, edx
	jge loc_43E83D

loc_43E5F7:
	mov edx, dword [dword_50ACC0]
	neg edx
	cmp eax, edx
	jle loc_43E844

loc_43E607:
	mov edx, dword [dword_50ACAC]
	mov [esp+20h], eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, dword [dword_50ACB0]
	neg eax
	cmp eax, ebx
	jge loc_43E84B

loc_43E62E:
	mov ebx, dword [dword_50ACB0]
	neg ebx
	cmp eax, ebx
	jle loc_43E852

loc_43E63E:
	mov edx, [ecx+3A0h]
	cmp eax, edx
	jge loc_43E859

loc_43E64C:
	mov ebx, [ecx+3A0h]
	neg ebx
	cmp eax, ebx
	jle loc_43E860

loc_43E65C:
	mov [esp+1Ch], eax
	mov eax, dword [dword_50ACCC]
	mov ebx, [ecx+39Ch]
	neg eax
	cmp eax, ebx
	jge loc_43E6EF
	cmp ebx, dword [dword_50ACCC]
	jge loc_43E6EF
	mov edx, dword [dword_50ACD0]
	mov eax, [ecx+3A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	test eax, eax
	jle loc_43E867

loc_43E69D:
	mov edx, [esp+1Ch]
	mov eax, ebx
	cmp ebx, edx
	jle loc_43E6A9
	mov ebx, edx

loc_43E6A9:
	neg eax
	cmp ebx, eax
	jle loc_43E86E

loc_43E6B3:
	mov edx, dword [dword_50ACD4]
	mov eax, [ecx+3A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+1Ch], ebx
	test eax, eax
	jle loc_43E875

loc_43E6D5:
	mov ebx, [esp+20h]
	mov edx, eax
	cmp eax, ebx
	jle loc_43E6E1
	mov eax, ebx

loc_43E6E1:
	neg edx
	cmp eax, edx
	jle loc_43E87C

loc_43E6EB:
	mov [esp+20h], eax

loc_43E6EF:
	mov edx, [esp+20h]
	mov eax, [ecx+2C0h]
	sub eax, edx
	mov edx, dword [dword_50ACC4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	mov ebx, [ecx+554h]
	cmp eax, ebx
	jge loc_43E883

loc_43E71B:
	mov ebx, [ecx+554h]
	neg ebx
	cmp eax, ebx
	jle loc_43E88A

loc_43E72B:
	mov edx, [esp+1Ch]
	mov [esp+4], eax
	mov eax, ebp
	sub eax, edx
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esi
	neg edx
	imul eax, edx
	mov ebx, [esp+18h]
	cmp eax, ebx
	jge loc_43E891

loc_43E758:
	mov ebx, [esp+18h]
	neg ebx
	cmp eax, ebx
	jle loc_43E898

loc_43E766:
	mov [esp+8], eax
	cmp dword [esp+14h], 0
	jnz loc_43E89F
	xor ebx, ebx

loc_43E777:
	test ebp, ebp
	jle loc_43E902

loc_43E77F:
	mov edx, dword [dword_50ACA8]
	mov eax, ebp
	sub eax, edx
	test eax, eax
	jle loc_43E909
	mov [ecx+328h], eax

loc_43E797:
	mov [ecx+324h], eax
	mov eax, [esp+8]
	mov edx, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, edi
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test byte [ecx+3A9h], 10h
	jnz loc_43E91E
	imul ebp, esi
	imul eax, esi
	mov dword [ecx+2A8h], 0
	mov dword [ecx+2ACh], 0
	mov dword [ecx+2CCh], 0
	mov dword [ecx+2A4h], 0
	mov [ecx+2C8h], ebp
	mov [ecx+2D0h], eax

loc_43E804:
	mov dword [ecx+2A0h], 0
	mov eax, [esp+4]
	mov dword [ecx+298h], 0
	mov [ecx+29Ch], eax
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43E82C:
	xor eax, eax
	jmp loc_43E50D

loc_43E833:
	mov esi, 1
	jmp loc_43E51E

loc_43E83D:
	mov eax, edx
	jmp loc_43E5F7

loc_43E844:
	mov eax, edx
	jmp loc_43E607

loc_43E84B:
	mov eax, ebx
	jmp loc_43E62E

loc_43E852:
	mov eax, ebx
	jmp loc_43E63E

loc_43E859:
	mov eax, edx
	jmp loc_43E64C

loc_43E860:
	mov eax, ebx
	jmp loc_43E65C

loc_43E867:
	neg ebx
	jmp loc_43E69D

loc_43E86E:
	mov ebx, eax
	jmp loc_43E6B3

loc_43E875:
	neg eax
	jmp loc_43E6D5

loc_43E87C:
	mov eax, edx
	jmp loc_43E6EB

loc_43E883:
	mov eax, ebx
	jmp loc_43E71B

loc_43E88A:
	mov eax, ebx
	jmp loc_43E72B

loc_43E891:
	mov eax, ebx
	jmp loc_43E758

loc_43E898:
	mov eax, ebx
	jmp loc_43E766

loc_43E89F:
	mov edx, [esp+14h]
	imul edx, esi
	mov eax, [ecx+39Ch]
	imul eax, esi
	cmp edx, eax
	jle loc_43E8C8
	mov eax, ecx
	call sub_43FB80
	mov ebx, eax
	mov byte [ecx+2D8h], 0
	jmp loc_43E777

loc_43E8C8:
	mov ebx, [esp+14h]
	sub ebx, [ecx+39Ch]
	mov edx, [ecx+1F4h]
	mov eax, ecx
	and edx, 8
	call sub_43FD50
	mov byte [ecx+2D8h], 0FFh
	mov ebx, eax
	mov eax, [ecx+2B8h]
	neg ebx
	test eax, eax
	jge loc_43E777
	neg ebx
	jmp loc_43E777

loc_43E902:
	neg ebp
	jmp loc_43E77F

loc_43E909:
	mov dword [ecx+328h], 0
	mov eax, [ecx+328h]
	jmp loc_43E797

loc_43E91E:
	mov dword [ecx+2A8h], 0
	mov dword [ecx+2C8h], 0
	mov dword [ecx+2CCh], 0
	mov dword [ecx+2D0h], 0
	mov [ecx+2ACh], eax
	mov [ecx+2A4h], ebp
	jmp loc_43E804
;sub_43E4F0 endp

sub_43E960: ;SUBROUTINE
	push ebx
	push edx
	mov edx, [eax+510h]
	test edx, edx
	jle loc_43E99E

loc_43E96C:
	cmp edx, 73h
	jg loc_43E996
	cmp dword [eax+524h], 0FFFFFFFFh
	jz loc_43E996
	mov ebx, [eax+39Ch]
	test ebx, ebx
	jle loc_43E9A2
	mov eax, ebx

loc_43E986:
	mov edx, dword [dword_50ACF8]
	sub edx, 30000h
	cmp eax, edx
	jge loc_43E9A8

loc_43E996:
	mov eax, 1
	pop edx
	pop ebx
	ret

loc_43E99E:
	neg edx
	jmp loc_43E96C

loc_43E9A2:
	mov eax, ebx
	neg eax
	jmp loc_43E986

loc_43E9A8:
	xor eax, eax
	pop edx
	pop ebx
	ret
;sub_43E960 endp

sub_43E9B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 54h
	mov ecx, eax
	mov eax, [eax+2D0h]
	mov edx, [ecx+2ACh]
	add edx, eax
	mov eax, ecx
	mov [ecx+2ACh], edx
	xor edx, edx
	call sub_453670
	mov eax, [ecx+2D0h]
	mov ebx, [ecx+2ACh]
	mov edx, esp
	sub ebx, eax
	lea eax, [ecx+0C4h]
	mov [ecx+2ACh], ebx
	call sub_49D890
	lea edx, [esp+24h]
	lea eax, [ecx+118h]
	call sub_49D890
	mov edx, [esp]
	mov eax, [ecx+2A4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+28Ch], ebx
	mov eax, [ecx+2A4h]
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+290h], ebx
	mov eax, [ecx+2A4h]
	mov edx, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+294h], ebx
	mov edx, [esp+24h]
	mov eax, [ecx+2C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ebx, eax
	mov eax, [ecx+2CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	add ebx, eax
	mov eax, [ecx+2D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, [ecx+28Ch]
	add eax, ebx
	add esi, eax
	mov [ecx+28Ch], esi
	mov eax, [ecx+2C8h]
	mov edx, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ebx, eax
	mov eax, [ecx+2CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ebx, eax
	mov eax, [ecx+2D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ecx+290h]
	add eax, ebx
	add edi, eax
	mov [ecx+290h], edi
	mov eax, [ecx+2C8h]
	mov edx, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ebx, eax
	mov eax, [ecx+2CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add ebx, eax
	mov eax, [ecx+2D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [ecx+294h]
	add eax, ebx
	add ebp, eax
	mov [ecx+294h], ebp
	mov eax, [ecx+298h]
	mov edx, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+29Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+2A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+48h], ebx
	mov edx, [esp+0Ch]
	mov eax, [ecx+298h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+29Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+2A0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	add ebx, eax
	mov eax, [ecx+298h]
	mov [esp+4Ch], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [ecx+29Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [ecx+2A0h]
	lea esi, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	lea edi, [ecx+298h]
	mov [esp+50h], ebx
	movsd
	movsd
	movsd
	mov edx, dword [dword_50AD10]
	mov eax, [ecx+28Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0A8h]
	add edx, eax
	mov eax, [ecx+290h]
	mov [ecx+0A8h], edx
	mov edx, dword [dword_50AD10]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+0ACh]
	mov edx, dword [dword_50AD10]
	add ebx, eax
	mov eax, [ecx+294h]
	mov [ecx+0ACh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, [ecx+0B0h]
	mov edi, [ecx+55Ch]
	add esi, eax
	xor ebx, ebx
	mov [ecx+0B0h], esi
	test edi, edi
	jz loc_43ED8C

loc_43ED25:
	cmp ebx, dword [dword_50AD0C]
	jge loc_43ED8C
	mov edx, [ecx+55Ch]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0A8h], eax
	mov edx, [ecx+55Ch]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0ACh], eax
	mov edx, [ecx+55Ch]
	mov eax, [ecx+0B0h]
	inc ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [ecx+55Ch]
	mov [ecx+0B0h], eax
	test ebp, ebp
	jnz loc_43ED25

loc_43ED8C:
	mov edx, dword [dword_50AD10]
	mov eax, [ecx+298h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E8h]
	add edx, eax
	mov eax, [ecx+29Ch]
	mov [ecx+0E8h], edx
	mov edx, dword [dword_50AD10]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+0ECh]
	mov edx, dword [dword_50AD10]
	add ebx, eax
	mov eax, [ecx+2A0h]
	mov [ecx+0ECh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, [ecx+0F0h]
	mov dword [ecx+2ACh], 0
	add esi, eax
	mov [ecx+0F0h], esi
	add esp, 54h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43E9B0 endp

sub_43EE10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	test byte [eax+3A9h], 10h
	jz loc_43F0C2
	mov eax, 1

loc_43EE2D:
	xor eax, dword [dword_512228]
	jz loc_43F0C9
	mov eax, 0FFFFFFFFh

loc_43EE3E:
	mov ebp, eax
	mov edx, [ecx+0C4h]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D0h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0C4h]
	add ebx, eax
	mov eax, [ecx+0E8h]
	mov [ecx+2B8h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+2BCh], ebx
	mov edx, [ecx+0D0h]
	mov eax, [ecx+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+0E8h]
	mov [ecx+2C0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [ecx+0F0h]
	mov edi, esp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	lea esi, [ecx+0DCh]
	mov [ecx+2C4h], ebx
	movsd
	movsd
	movsd
	cmp dword [ecx+524h], 1
	jnz loc_43F0D3
	mov edx, [esp+8]
	mov eax, [esp]

loc_43F033:
	call sub_49D7E0
	mov ebx, eax
	mov eax, ecx
	mov [ecx+52Ch], ebx
	call sub_43F240
	mov edx, [ecx+50Ch]
	mov eax, [ecx+504h]
	call sub_49D7E0
	mov edx, ebx
	sub edx, eax
	mov esi, eax
	cmp edx, 0FFFFFE00h
	jge loc_43F0E3
	add edx, 400h

loc_43F070:
	mov [ecx+510h], edx
	mov edx, dword [dword_50AC98]
	imul edx, ebp
	mov eax, ecx
	mov [ecx+530h], esi
	call sub_43F120
	mov ebx, eax
	test eax, eax
	jle loc_43F0A0
	mov esi, [ecx+3ACh]
	cmp esi, [ecx+548h]
	jg loc_43F104

loc_43F0A0:
	test ebx, ebx
	jl loc_43F0F6

loc_43F0A4:
	mov eax, [ecx+14h]
	mov ebx, edx
	mov edx, eax
	mov eax, ecx
	call sub_43F4E0
	mov [ecx+538h], eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F0C2:
	xor eax, eax
	jmp loc_43EE2D

loc_43F0C9:
	mov eax, 1
	jmp loc_43EE3E

loc_43F0D3:
	mov edx, [esp+8]
	mov eax, [esp]
	neg edx
	neg eax
	jmp loc_43F033

loc_43F0E3:
	cmp edx, 200h
	jle loc_43F070
	sub edx, 400h
	jmp loc_43F070

loc_43F0F6:
	mov edi, [ecx+3ACh]
	cmp edi, [ecx+548h]
	jge loc_43F0A4

loc_43F104:
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	jmp loc_43F0A4
;sub_43EE10 endp

sub_43F120: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ecx, eax
	mov edx, dword [dword_512228]
	mov eax, [eax+14h]
	cmp dword [dword_512228], 0
	jz loc_43F1F5
	mov edx, 0FFFFFFFDh

loc_43F144:
	mov esi, dword [dword_5118A0]
	add edx, eax
	cmp edx, esi
	jl loc_43F209
	cmp dword [dword_512228], 0
	jz loc_43F1FF
	mov edx, 0FFFFFFFDh

loc_43F166:
	mov ebx, dword [dword_5118A0]
	add edx, eax
	sub edx, ebx

loc_43F170:
	lea edi, 0[eax*8]
	add edi, eax
	mov ebx, dword [dword_5118A4]
	shl edi, 2
	lea eax, [ebx+edi]
	mov esi, edx
	mov edx, [eax+0Fh]
	mov eax, esi
	shl eax, 3
	add esi, eax
	shl esi, 2
	mov eax, [esi+ebx+0Ch]
	sar edx, 18h
	sar eax, 18h
	shl edx, 9
	shl eax, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, dword [dword_5118A4]
	mov edx, [edi+eax+11h]
	mov eax, [esi+eax+0Eh]
	sar edx, 18h
	sar eax, 18h
	shl edx, 9
	shl eax, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	test byte [ecx+3A9h], 10h
	jz loc_43F225
	mov eax, 1

loc_43F1E3:
	xor eax, dword [dword_512228]
	jz loc_43F229
	mov eax, ebx
	neg eax
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F1F5:
	mov edx, 3
	jmp loc_43F144

loc_43F1FF:
	mov edx, 3
	jmp loc_43F166

loc_43F209:
	cmp dword [dword_512228], 0
	jz loc_43F21E
	mov edx, 0FFFFFFFDh

loc_43F217:
	add edx, eax
	jmp loc_43F170

loc_43F21E:
	mov edx, 3
	jmp loc_43F217

loc_43F225:
	xor eax, eax
	jmp loc_43F1E3

loc_43F229:
	mov eax, ebx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43F120 endp

sub_43F240: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 24h
	mov ecx, eax
	call sub_43F400
	test eax, eax
	jnz loc_43F3C8
	push edi
	push esi
	push edx
	push ebx
	mov edx, [ecx+39Ch]
	test edx, edx
	jle loc_43F3CE
	mov ebx, edx

loc_43F268:
	mov eax, 4000h
	mov edx, dword [dword_50ACA4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	test eax, eax
	jl loc_43F2AA
	mov esi, dword [dword_50AC9C]
	cmp eax, esi
	jge loc_43F2AA
	test ebx, ebx
	jl loc_43F2AA
	mov eax, esi

loc_43F2AA:
	mov edi, dword [dword_50ACA0]
	cmp eax, edi
	jle loc_43F3D7
	mov edx, edi

loc_43F2BA:
	mov ebp, [ecx+524h]
	mov eax, edx
	cmp ebp, 0FFFFFFFFh
	jnz loc_43F2C9
	neg eax

loc_43F2C9:
	test byte [ecx+3A9h], 10h
	jz loc_43F3DE
	mov edx, 1

loc_43F2DB:
	xor edx, dword [dword_512228]
	jz loc_43F2E5
	neg eax

loc_43F2E5:
	test eax, eax
	jl loc_43F3E5
	mov ebp, [ecx+14h]
	mov edx, dword [dword_5118A0]
	add eax, ebp
	cmp eax, edx
	jl loc_43F2FE
	sub eax, edx

loc_43F2FE:
	mov edx, eax
	shl eax, 3
	add eax, edx
	mov esi, dword [dword_5118A4]
	shl eax, 2
	lea edi, [esp+1Ch]
	add esi, eax
	movsd
	movsd
	movsd
	lea edi, [esp+28h]
	lea esi, [ecx+118h]
	movsd
	movsd
	movsd
	mov edx, [esp+28h]
	mov eax, [ecx+548h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	mov esi, eax
	mov [esp+10h], eax
	mov eax, [ecx+548h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	mov ebx, eax
	mov [esp+14h], eax
	mov eax, [ecx+548h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	add edx, esi
	mov [esp+10h], edx
	mov edx, [esp+20h]
	add edx, ebx
	mov [esp+14h], edx
	mov edx, [esp+24h]
	mov [esp+18h], eax
	add edx, eax
	mov [esp+18h], edx
	mov eax, [ecx+9Ch]
	mov edx, [esp+10h]
	sub edx, eax
	mov eax, [ecx+0A0h]
	mov [ecx+504h], edx
	mov edx, [esp+14h]
	sub edx, eax
	mov eax, [ecx+0A4h]
	mov [ecx+508h], edx
	mov edx, [esp+18h]
	sub edx, eax
	mov [ecx+50Ch], edx
	pop ebx
	pop edx
	pop esi
	pop edi

loc_43F3C8:
	add esp, 24h
	pop ebp
	pop ecx
	ret

loc_43F3CE:
	mov ebx, edx
	neg ebx
	jmp loc_43F268

loc_43F3D7:
	mov edx, eax
	jmp loc_43F2BA

loc_43F3DE:
	xor edx, edx
	jmp loc_43F2DB

loc_43F3E5:
	add eax, [ecx+14h]
	test eax, eax
	jge loc_43F2FE
	add eax, dword [dword_5118A0]
	jmp loc_43F2FE
;sub_43F240 endp

sub_43F400: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov ecx, eax
	cmp dword [eax+53Ch], 0
	jle loc_43F4C8
	mov ebx, [eax+524h]
	cmp ebx, 1
	jnz loc_43F4C8
	test byte [eax+3A9h], 10h
	jnz loc_43F4C1
	mov eax, ebx

loc_43F432:
	mov ebx, [ecx+544h]
	mov esi, eax
	test ebx, ebx
	jz loc_43F4C8
	mov edx, [ebx+14h]
	mov eax, [ecx+14h]
	call sub_43D400
	mov edx, eax
	test eax, eax
	jle loc_43F4D0

loc_43F457:
	cmp eax, 1Eh
	jge loc_43F4C8
	test esi, esi
	jz loc_43F464
	test edx, edx
	jl loc_43F46C

loc_43F464:
	test esi, esi
	jnz loc_43F4C8
	test edx, edx
	jle loc_43F4C8

loc_43F46C:
	push edi
	mov esi, [ecx+9Ch]
	mov eax, [ebx+9Ch]
	sub eax, esi
	mov [ecx+504h], eax
	mov edi, [ecx+0A0h]
	mov eax, [ebx+0A0h]
	sub eax, edi
	mov [ecx+508h], eax
	mov ebp, [ecx+0A4h]
	mov eax, [ebx+0A4h]
	sub eax, ebp
	mov [ecx+50Ch], eax
	mov eax, [ebx+3ACh]
	mov [ecx+548h], eax
	mov eax, 1
	pop edi
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F4C1:
	xor eax, eax
	jmp loc_43F432

loc_43F4C8:
	xor eax, eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F4D0:
	neg eax
	jmp loc_43F457
;sub_43F400 endp

sub_43F4E0: ;SUBROUTINE
	push ecx
	push esi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	test byte [eax+1F4h], 10h
	jz loc_43F5AB
	mov esi, [ecx+39Ch]
	test esi, esi
	jle loc_43F5A2
	mov eax, esi

loc_43F505:
	cmp eax, 140000h
	jge loc_43F5AB
	xor ebx, ebx

loc_43F512:
	mov ebp, dword [dword_5118A0]
	add edx, ebx
	cmp edx, ebp
	jl loc_43F520
	sub edx, ebp

loc_43F520:
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov edx, [eax+0Fh]
	sar edx, 18h
	shl edx, 9
	mov [esp], edx
	mov edx, [eax+10h]
	sar edx, 18h
	mov eax, [eax+11h]
	shl edx, 9
	sar eax, 18h
	mov [esp+4], edx
	shl eax, 9
	mov edx, [esp]
	mov [esp+8], eax
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	add esp, 0Ch
	pop ebp
	pop esi
	pop ecx
	ret

loc_43F5A2:
	mov eax, esi
	neg eax
	jmp loc_43F505

loc_43F5AB:
	test ebx, ebx
	jge loc_43F512
	add edx, ebx
	test edx, edx
	jge loc_43F520
	add edx, dword [dword_5118A0]
	jmp loc_43F520
;sub_43F4E0 endp

sub_43F5D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov edx, dword [dword_511C08]
	mov ecx, [edx+1E8h]
	mov edx, dword [dword_511E3C]
	mov edi, [eax+1E8h]
	dec edx
	sub edi, ecx
	test edx, edx
	jl loc_43F617
	lea eax, 0[edx*4]

loc_43F5FE:
	mov ecx, dword dword_511A88[eax]
	test byte [ecx+1F4h], 1
	jz loc_43F6B7
	xor esi, esi
	mov si, [ecx+6]

loc_43F617:
	cmp esi, 2BCh
	jge loc_43F658
	mov ebp, dword [dword_540F48]
	cmp ebp, 5C0h
	jle loc_43F658
	lea edx, [ebp-200h]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov esi, eax

loc_43F658:
	test byte [byte_512219], 4
	jz loc_43F667
	add esi, 0C8h

loc_43F667:
	cmp esi, 2BCh
	jge loc_43F699
	lea edx, [edi+1]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add eax, edx
	add eax, eax
	lea edx, [eax+4Bh]
	cmp dword [dword_511E30], 2
	jle loc_43F6C8
	mov eax, 1

loc_43F693:
	add eax, edx
	cmp esi, eax
	jl loc_43F6B0

loc_43F699:
	mov eax, dword [dword_50AD0C]
	mov edx, [ebx+3C4h]
	sub edx, eax
	mov [ebx+3C4h], edx
	test edx, edx
	jle loc_43F6CC

loc_43F6B0:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F6B7:
	sub eax, 4
	dec edx
	test eax, eax
	jge loc_43F5FE
	jmp loc_43F617

loc_43F6C8:
	xor eax, eax
	jmp loc_43F693

loc_43F6CC:
	mov esi, dword [dword_511E38]
	mov eax, dword [dword_511E48]
	mov edi, dword [dword_50AC8C]
	sub eax, esi
	mov ebp, dword [dword_50AC64]
	sub eax, edi
	cmp eax, ebp
	jl loc_43F6FC
	mov dword [ebx+3C4h], 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F6FC:
	mov eax, ebx
	call sub_43F710
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43F5D0 endp

sub_43F710: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ebx, eax
	mov dx, [eax+3A8h]
	mov dword [eax+4ECh], 1
	and edx, 0FFFFF7EFh
	mov [eax+3A8h], dx
	mov ah, [eax+3A9h]
	or ah, 8
	mov edx, dword [dword_4D6A80]
	mov [ebx+3A9h], ah
	mov eax, dword [dword_4D6A78]
	imul eax, edx
	mov dword [dword_4D6A7C], eax
	and eax, 0FFFFh
	mov dword [dword_4D6A78], eax
	mov eax, dword [dword_4D6A7C]
	and eax, 0FFFF00h
	shr eax, 8
	mov ecx, dword [dword_50AC8C]
	add eax, eax
	dec ecx
	shr eax, 10h
	mov dword [dword_50AC8C], ecx
	test eax, eax
	jz loc_43F80B
	or byte [ebx+3A9h], 10h

loc_43F78E:
	mov eax, dword [dword_4D6A78]
	mov esi, dword [dword_4D6A80]
	imul eax, esi
	mov dword [dword_4D6A7C], eax
	mov edx, dword [dword_4D6A7C]
	and edx, 0FFFF00h
	and eax, 0FFFFh
	shr edx, 8
	mov dword [dword_4D6A78], eax
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	shr edx, 10h
	mov eax, ebx
	call sub_46D2E0
	mov edx, dword [dword_511E3C]
	dec edx
	test edx, edx
	jl loc_43F7F8
	lea eax, 0[edx*4]

loc_43F7E1:
	mov ecx, dword dword_511AC8[eax]
	test byte [ecx+1F4h], 4
	jnz loc_43F817
	sub eax, 4
	dec edx
	test eax, eax
	jge loc_43F7E1

loc_43F7F8:
	mov eax, ebx
	mov byte [ebx+8Dh], 1
	call sub_43C230
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F80B:
	and byte [ebx+3A9h], 0EFh
	jmp loc_43F78E

loc_43F817:
	mov [ebx+3B0h], ecx
	mov eax, ebx
	mov byte [ebx+8Dh], 1
	call sub_43C230
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43F710 endp

sub_43F830: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ecx, eax
	mov ebx, [eax+1F4h]
	and ebx, 8
	mov edx, ebx
	call sub_43F9C0
	mov edx, ebx
	mov eax, ecx
	mov edi, esp
	call sub_43F9E0
	lea esi, [ecx+118h]
	movsd
	movsd
	movsd
	lea edi, [esp+0Ch]
	lea esi, [ecx+0DCh]
	movsd
	movsd
	movsd
	mov edx, [esp]
	mov eax, [ecx+3CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov [esp], eax
	mov eax, [ecx+3CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	mov [esp+4], eax
	mov eax, [ecx+3CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov ebx, [ecx+39Ch]
	mov [esp+8], eax
	test ebx, ebx
	jle loc_43F998
	mov eax, ebx

loc_43F8C6:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov esi, [ecx+39Ch]
	mov [esp+0Ch], eax
	test esi, esi
	jle loc_43F9A1
	mov eax, esi

loc_43F8E8:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	mov edi, [ecx+39Ch]
	mov [esp+10h], eax
	test edi, edi
	jle loc_43F9AA
	mov eax, edi

loc_43F90A:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [esp]
	mov ebx, eax
	mov [esp+14h], eax
	mov eax, [esp+0Ch]
	add eax, ebp
	mov edx, [esp+4]
	mov [ecx+0A8h], eax
	mov eax, [esp+10h]
	mov dword [ecx+0E8h], 0
	add eax, edx
	mov [ecx+0ACh], eax
	mov eax, [esp+8]
	mov dword [ecx+0ECh], 0
	add eax, ebx
	mov [ecx+0B0h], eax
	mov eax, [ecx+3A0h]
	mov [ecx+2B8h], eax
	mov ah, [ecx+3A9h]
	mov dword [ecx+0F0h], 0
	test ah, 10h
	jz loc_43F9B3
	mov edx, 1

loc_43F97F:
	mov ebx, dword [dword_512228]
	mov eax, ecx
	xor edx, ebx
	call sub_4627F0
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43F998:
	mov eax, ebx
	neg eax
	jmp loc_43F8C6

loc_43F9A1:
	mov eax, esi
	neg eax
	jmp loc_43F8E8

loc_43F9AA:
	mov eax, edi
	neg eax
	jmp loc_43F90A

loc_43F9B3:
	xor edx, edx
	jmp loc_43F97F
;sub_43F830 endp

sub_43F9C0: ;SUBROUTINE
	push ecx
	mov ecx, [eax+3ACh]
	mov edx, [eax+548h]
	sub edx, ecx
	shl edx, 3
	mov [eax+3CCh], edx
	pop ecx
	ret
;sub_43F9C0 endp

sub_43F9E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	call sub_43FB80
	mov esi, eax
	mov ebx, [ecx+398h]
	mov edi, [ecx+39Ch]
	mov eax, ecx
	sub ebx, edi
	call sub_43FD50
	mov ebx, eax
	test byte [ecx+3A9h], 10h
	jz loc_43FA76
	mov eax, 1

loc_43FA13:
	xor eax, dword [dword_512228]
	jz loc_43FAC9
	mov edx, [ecx+39Ch]
	cmp edx, [ecx+398h]
	jl loc_43FA7A
	mov edx, dword [dword_50AD10]
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+39Ch]
	mov [ecx+2ACh], esi
	sub ebx, eax
	mov [ecx+39Ch], ebx
	mov esi, [ecx+398h]
	mov eax, [ecx+39Ch]
	mov byte [ecx+2D8h], 0
	cmp eax, esi
	jle loc_43FABB

loc_43FA6A:
	mov [ecx+39Ch], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43FA76:
	xor eax, eax
	jmp loc_43FA13

loc_43FA7A:
	mov edx, dword [dword_50AD10]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ecx+39Ch]
	mov byte [ecx+2D8h], 0FFh
	add edi, eax
	mov [ecx+39Ch], edi
	mov ebp, [ecx+398h]
	mov eax, [ecx+39Ch]
	mov [ecx+2ACh], ebx
	cmp eax, ebp
	jle loc_43FA6A
	mov eax, ebp
	jmp loc_43FA6A

loc_43FABB:
	mov eax, esi
	mov [ecx+39Ch], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43FAC9:
	mov edx, [ecx+39Ch]
	cmp edx, [ecx+398h]
	jg loc_43FB26
	mov edx, dword [dword_50AD10]
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+39Ch]
	mov [ecx+2ACh], esi
	add ebx, eax
	mov [ecx+39Ch], ebx
	mov esi, [ecx+398h]
	mov eax, [ecx+39Ch]
	mov byte [ecx+2D8h], 0
	cmp eax, esi
	jle loc_43FA6A
	mov eax, esi
	mov [ecx+39Ch], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43FB26:
	mov edx, dword [dword_50AD10]
	mov byte [ecx+2D8h], 0FFh
	mov eax, ebx
	mov [ecx+2ACh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ecx+39Ch]
	sub edi, eax
	mov ebp, [ecx+398h]
	mov [ecx+39Ch], edi
	cmp edi, ebp
	jle loc_43FB6B
	mov edx, edi
	mov [ecx+39Ch], edx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_43FB6B:
	mov edx, ebp
	mov [ecx+39Ch], edx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_43F9E0 endp

sub_43FB80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [dword_512228], 0
	jz loc_43FBAD
	mov eax, 0FFFFFFFFh

loc_43FB96:
	mov ebx, [ecx+3B8h]
	mov esi, eax
	test ebx, ebx
	jle loc_43FBB4

loc_43FBA2:
	xor ebx, ebx
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43FBAD:
	mov eax, 1
	jmp loc_43FB96

loc_43FBB4:
	mov eax, [ecx+21Ch]
	mov edi, [eax]
	cmp edi, 0Fh
	jge loc_43FC27
	mov ebp, dword [dword_50AD04]
	mov ebx, dword dword_4D5F74[edi*4]
	test ebp, ebp
	jz loc_43FC03
	mov edx, dword [dword_512200]
	mov eax, [ecx+1E8h]
	shl edx, 2
	mov eax, dword dword_5126B0[eax*4]
	mov edx, dword dword_4D57F8[edx+eax*8]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, [ecx+39Ch]
	jl loc_43FBA2

loc_43FC03:
	mov eax, ebx
	mov edx, [ecx+558h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ecx+39Ch]
	cmp eax, edi
	jl loc_43FBA2
	cmp ebx, edi
	jl loc_43FBA2

loc_43FC27:
	mov ebx, [ecx+39Ch]
	sar ebx, 10h
	test ebx, ebx
	jle loc_43FCC9

loc_43FC38:
	cmp ebx, 6Fh
	jge loc_43FCD0
	test ebx, ebx
	jle loc_43FCDA

loc_43FC49:
	mov ebx, [ecx+ebx*2+406h]
	sar ebx, 10h
	mov ah, [ecx+1F4h]
	shl ebx, 8
	test ah, 8
	jnz loc_43FCE1

loc_43FC65:
	cmp dword [dword_512200], 0
	jnz loc_43FC88
	cmp word [ecx+6], 64h
	jbe loc_43FC88
	mov edx, 0C000h
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax

loc_43FC88:
	cmp dword [ecx+53Ch], 0
	jle loc_43FCA4
	mov edx, 14CCCh
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax

loc_43FCA4:
	xor eax, eax
	push ebx
	mov al, [ecx+8Ch]
	push eax
	mov eax, [ecx]
	push eax
	push aAiCaXDDD ; "AI-CA X (%d) [%d %d]"
	push 3
	add esp, 14h
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43FCC9:
	neg ebx
	jmp loc_43FC38

loc_43FCD0:
	mov ebx, 6Fh
	jmp loc_43FC49

loc_43FCDA:
	xor ebx, ebx
	jmp loc_43FC49

loc_43FCE1:
	mov eax, dword [dword_50AC90]
	imul esi, [eax+39Ch]
	cmp esi, 20000h
	jge loc_43FD03
	cmp word [eax+14Eh], 0
	jnz loc_43FC65

loc_43FD03:
	mov eax, dword [dword_50AC90]
	cmp word [eax+14Eh], 0
	jnz loc_43FC65
	cmp dword [dword_512210], 0
	jnz loc_43FD40
	mov edx, 1

loc_43FD24:
	mov eax, ecx
	call sub_4389F0
	mov edx, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	jmp loc_43FC65

loc_43FD40:
	xor edx, edx
	jmp loc_43FD24
;sub_43FB80 endp

sub_43FD50: ;SUBROUTINE
	push ecx
	mov ecx, eax
	test edx, edx
	jz loc_43FD77
	mov eax, 0F0000h

loc_43FD5C:
	cmp dword [dword_512204], 0
	jz loc_43FD67
	add eax, eax

loc_43FD67:
	mov ebx, [ecx+558h]
	cmp ebx, 10000h
	jg loc_43FD7E
	pop ecx
	ret

loc_43FD77:
	mov eax, 0C0000h
	jmp loc_43FD5C

loc_43FD7E:
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	pop ecx
	ret
;sub_43FD50 endp

sub_43FD90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	cmp dword [eax+3B8h], 0
	jle loc_43FDD4
	mov eax, dword [dword_50AD0C]
	mov esi, [ecx+3B8h]
	sub esi, eax
	mov eax, 0BB8h
	mov [ecx+3B8h], esi

loc_43FDB9:
	mov ebp, [ecx+2F0h]
	cmp eax, ebp
	jg loc_43FEA8
	jl loc_43FEC7
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43FDD4:
	mov ebx, [eax+39Ch]
	test ebx, ebx
	jle loc_43FE1A
	mov esi, ebx

loc_43FDE0:
	lea ebx, [ecx+2DAh]
	xor ebp, ebp

loc_43FDE8:
	xor eax, eax
	mov al, [ebx]
	mov eax, [ecx+eax*4+3D0h]
	cmp esi, eax
	jle loc_43FE20
	mov eax, 1

loc_43FDFC:
	mov edi, eax
	test eax, eax
	jz loc_43FE24

loc_43FE02:
	test edi, edi
	jnz loc_43FE7D
	dec byte [ebx]
	mov eax, [ecx+3B4h]
	mov [ecx+3B8h], eax
	jmp loc_43FDE8

loc_43FE1A:
	mov esi, ebx
	neg esi
	jmp loc_43FDE0

loc_43FE20:
	mov eax, ebp
	jmp loc_43FDFC

loc_43FE24:
	xor edx, edx
	mov eax, ecx
	mov dl, [ebx]
	call sub_440260
	cmp esi, eax
	jl loc_43FE02

loc_43FE33:
	xor edx, edx
	mov eax, ecx
	mov dl, [ebx]
	call sub_440260
	sub esi, eax
	mov dh, [ebx]
	mov eax, esi
	test dh, dh
	jnz loc_43FEA1
	xor esi, esi

loc_43FE4A:
	xor edx, edx
	mov dl, [ebx]
	mov edi, [ecx+3BCh]
	mov edx, [ecx+edx*4+3ECh]
	sub edi, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	sar eax, 10h
	jmp loc_43FDB9

loc_43FE7D:
	xor eax, eax
	mov al, [ebx]
	cmp ebp, [ecx+eax*4+3D4h]
	jz loc_43FE33
	mov dl, al
	inc dl
	mov [ebx], dl
	mov eax, [ecx+3B4h]
	mov [ecx+3B8h], eax
	jmp loc_43FDE8

loc_43FEA1:
	mov esi, 0BB80000h
	jmp loc_43FE4A

loc_43FEA8:
	sub eax, ebp
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	lea edi, [eax+ebp]
	mov [ecx+2F0h], edi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_43FEC7:
	mov edx, ebp
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov ebx, ebp
	sub ebx, eax
	mov [ecx+2F0h], ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_43FD90 endp

sub_43FEF0: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	sub esp, 0Ch
	mov ebx, [esp+28h]
	mov ecx, eax
	mov eax, edx
	cmp edx, 0F0000h
	jl loc_43FF16
	cmp dword [ecx+2B8h], 140000h
	jg loc_44011C

loc_43FF16:
	push esi
	mov edx, eax
	shl eax, 2
	or ebx, 40000h
	sub eax, edx
	mov dword [ecx+164h], 0
	add eax, eax
	mov edx, [ecx+1A0h]
	mov [ecx+160h], eax
	mov eax, [esp+20h]
	mov [ecx+168h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [ebx+eax]
	test edx, edx
	jle loc_44014A
	mov esi, edx

loc_43FF89:
	mov ebx, dword [dword_512204]
	lea eax, 0[ebx*8]
	sub eax, ebx
	shl eax, 2
	add eax, ebx
	cmp esi, dword dword_511D98[eax*4]
	jle loc_4401B1
	push edi
	test edx, edx
	jl loc_440153

loc_43FFB3:
	mov eax, [ecx+2B8h]
	test eax, eax
	jle loc_440176
	mov edx, eax

loc_43FFC3:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	cmp eax, 0C000h
	jle loc_44017F
	mov ebx, 0C000h

loc_43FFE0:
	mov eax, [esp+24h]
	mov esi, [ecx+0DCh]
	mov edx, ebx
	sub eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add edx, eax
	mov [esp+8], edx
	mov eax, [esp+28h]
	mov edi, [ecx+0E0h]
	mov edx, ebx
	sub eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E0h]
	add edx, eax
	mov [esp+0Ch], edx
	mov eax, [esp+2Ch]
	mov ebp, [ecx+0E4h]
	mov edx, ebx
	sub eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add edx, eax
	lea eax, [esp+8]
	mov [esp+10h], edx
	call sub_45E810
	pop edi

loc_440056:
	mov eax, [esp+4]
	mov [ecx+0DCh], eax
	mov eax, [esp+8]
	mov [ecx+0E0h], eax
	mov eax, [esp+0Ch]
	mov [ecx+0E4h], eax
	mov edx, eax
	mov eax, [ecx+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	sub ebx, eax
	mov eax, [ecx+0D8h]
	mov [ecx+0C4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E4h]
	mov eax, [ecx+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E0h]
	sub ebx, eax
	mov eax, [ecx+0D0h]
	mov [ecx+0C8h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0DCh]
	mov eax, [ecx+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov [ecx+0CCh], ebx
	pop esi
	add esp, 0Ch
	pop ebp
	pop ecx
	pop ebx
	ret 10h

loc_44011C:
	mov edx, eax
	or ebx, 40000h
	shl eax, 2
	mov dword [ecx+164h], 0
	sub eax, edx
	mov [ecx+168h], ebx
	add eax, eax
	mov [ecx+160h], eax
	add esp, 0Ch
	pop ebp
	pop ecx
	pop ebx
	ret 10h

loc_44014A:
	mov esi, edx
	neg esi
	jmp loc_43FF89

loc_440153:
	mov edi, [esp+28h]
	mov ebp, [esp+2Ch]
	mov esi, [esp+24h]
	neg edi
	neg ebp
	neg esi
	mov [esp+28h], edi
	mov [esp+2Ch], ebp
	mov [esp+24h], esi
	jmp loc_43FFB3

loc_440176:
	mov edx, eax
	neg edx
	jmp loc_43FFC3

loc_44017F:
	mov edx, [ecx+2B8h]
	test edx, edx
	jle loc_4401AD

loc_440189:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov ebx, eax
	cmp eax, 3333h
	jg loc_43FFE0
	mov ebx, 3333h
	jmp loc_43FFE0

loc_4401AD:
	neg edx
	jmp loc_440189

loc_4401B1:
	mov ah, [ecx+2D7h]
	xor ebx, ebx
	cmp ah, 32h
	jbe loc_4401C4
	mov ebx, [ecx+2E4h]

loc_4401C4:
	mov eax, [ecx+0C4h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	imul eax, ebx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov edx, [ecx+0DCh]
	add edx, eax
	mov [esp+4], edx
	mov eax, [ecx+0C8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	imul eax, ebx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov edx, [ecx+0E0h]
	add edx, eax
	mov [esp+8], edx
	mov eax, [ecx+0CCh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	imul eax, ebx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov edx, [ecx+0E4h]
	add edx, eax
	lea eax, [esp+4]
	mov [esp+0Ch], edx
	call sub_45E810
	jmp loc_440056
;sub_43FEF0 endp

sub_440260: ;SUBROUTINE
	test edx, edx
	jle loc_44026C
	mov eax, [eax+edx*4+3CCh]
	ret

loc_44026C:
	xor eax, eax
	ret
;sub_440260 endp

sub_440270: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov edx, ebx
	cmp dword [dword_512228], 0
	jz loc_4402D4
	test byte [eax+1F4h], 8
	jz loc_4402B6
	mov eax, [eax+1E8h]
	mov eax, dword dword_50A9D8[eax*4]
	mov ebx, [eax+0BCh]
	neg ebx
	mov eax, [eax+0C0h]

loc_4402A2:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, ebx
	jle loc_4402C6
	test ecx, ecx
	jle loc_4402C2
	pop ecx
	ret

loc_4402B6:
	mov eax, 4000h
	mov ebx, 33333h
	jmp loc_4402A2

loc_4402C2:
	neg eax
	pop ecx
	ret

loc_4402C6:
	test ecx, ecx
	jle loc_4402CE
	mov eax, ebx
	pop ecx
	ret

loc_4402CE:
	neg ebx
	mov eax, ebx
	pop ecx
	ret

loc_4402D4:
	test byte [eax+1F4h], 8
	jz loc_44030A
	mov eax, [eax+1E8h]
	mov eax, dword dword_50A9D8[eax*4]
	mov ebx, [eax+0BCh]
	mov eax, [eax+0C0h]

loc_4402F6:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, ebx
	jge loc_440316
	test ecx, ecx
	jle loc_4402C2
	pop ecx
	ret

loc_44030A:
	mov eax, 4000h
	mov ebx, 33333h
	jmp loc_4402F6

loc_440316:
	test ecx, ecx
	jle loc_44031E
	mov eax, ebx
	pop ecx
	ret

loc_44031E:
	neg ebx
	mov eax, ebx
	pop ecx
	ret
;sub_440270 endp

sub_440370: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, [eax+21Ch]
	mov ebx, [ebx]
	cmp ebx, 0Fh
	jge loc_4403B9
	mov ecx, edx
	shl ebx, 3
	lea esi, [edx+0E0h]

loc_44038B:
	movsx eax, word [ecx]
	mov edx, dword [dword_512204]
	shl eax, 8
	test edx, edx
	jz loc_4403BD
	mov edx, dword dword_4D58DC[ebx]

loc_4403A1:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, 2
	sar eax, 8
	mov [ecx-2], ax
	cmp ecx, esi
	jnz loc_44038B

loc_4403B9:
	pop esi
	pop ecx
	pop ebx
	ret

loc_4403BD:
	mov edx, dword dword_4D58D8[ebx]
	jmp loc_4403A1
;sub_440370 endp

sub_4403F0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D5794]
	test edx, edx
	jnz loc_4403FD
	pop edx
	ret

loc_4403FD:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D5794], ecx
	pop ecx
	pop edx
	ret
;sub_4403F0 endp

sub_440410: ;SUBROUTINE
	call sub_4403F0
	push edx
	mov edx, dword [dword_4D5798]
	test edx, edx
	jnz loc_4403DD
	pop edx
	ret

loc_4403DD:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D5798], ecx
	pop ecx
	pop edx
	ret
;sub_440410 endp

sub_440420: ;SUBROUTINE
	cmp dword [dword_512204], 0
	jnz loc_440435
	xor eax, eax
	mov dword [dword_50AD14], eax
	jmp sub_4404D0

loc_440435:
	mov eax, 1
	mov dword [dword_50AD14], eax
	jmp sub_4404D0
;sub_440420 endp

sub_440450: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ebx, dword [dword_5118A0]
	mov esi, dword [dword_4D5794]
	xor ecx, ecx
	test ebx, ebx
	jle loc_440480

loc_440466:
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea edx, [eax+eax]
	mov eax, esi
	inc ecx
	mov byte [edx+eax], 32h
	cmp ecx, ebx
	jl loc_440466
	nop

loc_440480:
	mov dword [dword_4D5794], esi
	mov dword [dword_5118A0], ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_440450 endp

sub_4404A0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov ecx, dword [dword_5118A0]
	mov esi, dword [dword_4D5798]
	xor eax, eax
	test ecx, ecx
	jle loc_4404C0
	mov edx, esi

loc_4404B7:
	mov byte [edx+eax], 0
	inc eax
	cmp eax, ecx
	jl loc_4404B7

loc_4404C0:
	mov dword [dword_4D5798], esi
	mov dword [dword_5118A0], ecx
	pop esi
	pop edx
	pop ecx
	ret
;sub_4404A0 endp

sub_4404D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 88h
	sub ebp, 86h
	mov edx, dword [dword_50AD14]
	lea eax, 0[edx*4]
	mov esi, dword_4D579C
	add eax, edx
	lea edi, [ebp+7Eh]
	add esi, eax
	push edi

loc_4404FE:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_440516
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4404FE

loc_440516:
	pop edi
	lea eax, [ebp+7Eh]
	call sub_463830
	lea eax, [ebp+7Eh]
	mov edx, dword [dword_512228]
	push eax
	test edx, edx
	jz loc_44063A
	mov eax, aB ; "b"

loc_440536:
	push eax
	mov ecx, dword [dword_51221C]
	push ecx
	mov ebx, dword [dword_51348C]
	push ebx
	push aStr02dS_S ; "%sTr%02d%s.%s"
	lea eax, [ebp-2]
	push eax
	call sprintf_
	mov edx, dword [dword_50AD14]
	mov esi, word_4D57A6
	lea eax, 0[edx*4]
	add esp, 18h
	add eax, edx
	lea edi, [ebp+7Eh]
	add esi, eax
	push edi

loc_440570:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_440588
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_440570

loc_440588:
	pop edi
	lea eax, [ebp+7Eh]
	call sub_463830
	lea eax, [ebp+7Eh]
	mov esi, dword [dword_512228]
	push eax
	test esi, esi
	jz loc_440644
	mov eax, aB ; "b"

loc_4405A8:
	push eax
	mov edi, dword [dword_51221C]
	push edi
	mov eax, dword [dword_51348C]
	push eax
	push aStr02dS_S ; "%sTr%02d%s.%s"
	lea eax, [ebp+3Eh]
	push eax
	call sprintf_
	add esp, 18h
	xor edx, edx
	lea eax, [ebp-2]
	call sub_49D984
	mov dword [dword_4D5794], eax
	test eax, eax
	jz loc_44064E

loc_4405DA:
	lea eax, [ebp+3Eh]
	xor edx, edx
	call sub_49D984
	mov dword [dword_4D5798], eax
	test eax, eax
	jz loc_440692

loc_4405F1:
	cmp dword [dword_4D5794], 0
	jnz loc_440620
	mov dword [dword_4DB1D8], aCNfs2seGameCom ; "c:\\nfs2se\\game\\common\\aispeeds.c"
	lea eax, [ebp-2]
	push eax
	mov edx, 16Dh
	push aErrorCannotOpe ; "ERROR: cannot open %s"
	mov dword [dword_4DB1DC], edx
	call sub_4840F0
	add esp, 8

loc_440620:
	cmp dword [dword_4D5798], 0
	jz loc_4406C9
	lea esp, [ebp+86h]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44063A:
	mov eax, dword_4CBA68
	jmp loc_440536

loc_440644:
	mov eax, dword_4CBA68
	jmp loc_4405A8

loc_44064E:
	mov edx, aCNfs2seGameCom ; "c:\\nfs2se\\game\\common\\aispeeds.c"
	mov eax, dword [dword_5118A0]
	mov dword [dword_4DB1D8], edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add eax, eax
	mov ecx, 11Bh
	lea edx, [eax+2]
	xor ebx, ebx
	mov eax, aSpeedsBuffer ; "Speeds Buffer"
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov dword [dword_4D5794], eax
	call sub_440450
	jmp loc_4405DA

loc_440692:
	mov ebx, aCNfs2seGameCom ; "c:\\nfs2se\\game\\common\\aispeeds.c"
	mov esi, 133h
	mov eax, aSpdLine ; "Spd Line"
	mov edx, dword [dword_5118A0]
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov dword [dword_4D5798], eax
	call sub_4404A0
	jmp loc_4405F1

loc_4406C9:
	lea eax, [ebp+3Eh]
	push eax
	mov ebx, aCNfs2seGameCom ; "c:\\nfs2se\\game\\common\\aispeeds.c"
	mov esi, 16Eh
	push aErrorCannotOpe ; "ERROR: cannot open %s"
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 8
	lea esp, [ebp+86h]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4404D0 endp

sub_440700: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push 190h
	push 10000h
	push 10000h
	mov ecx, 1
	mov ebx, 1F4h
	push 1
	mov eax, dword_50AD18
	xor edx, edx
	call sub_440850
	push 190h
	push 10000h
	push 10000h
	mov ebx, 514h
	mov edx, 4
	push 0FFFFFFFFh
	mov eax, dword_50AD50
	xor ecx, ecx
	call sub_440850
	push 190h
	push 10A3Dh
	push 10000h
	mov ebx, 190h
	mov edx, 0Ch
	push 1
	mov eax, dword_50AD6C
	xor ecx, ecx
	call sub_440850
	push 190h
	push 10000h
	push 10000h
	mov ebx, 320h
	mov edx, 8
	push 1
	mov eax, dword_50AD88
	xor ecx, ecx
	call sub_440850
	push 190h
	push 0FAE1h
	push 0F0A3h
	mov ebx, 190h
	mov edx, 0Ch
	push 1
	mov eax, dword_50ADA4
	xor ecx, ecx
	call sub_440850
	push 190h
	push 10000h
	push 10000h
	mov ecx, 1
	mov ebx, 1194h
	push 1
	mov edx, 3
	mov eax, dword_50ADC0
	call sub_440850
	push 190h
	push 0F851h
	push 0F333h
	mov ebx, 1194h
	mov edx, 3
	push 1
	mov eax, dword_50ADDC
	xor ecx, ecx
	call sub_440850
	push 190h
	push 10000h
	push 10000h
	mov ecx, 1
	mov ebx, 1194h
	push 1
	mov edx, 3
	mov eax, dword_50ADF8
	call sub_440850
	pop edx
	pop ecx
	pop ebx
	ret
;sub_440700 endp

sub_440850: ;SUBROUTINE
	test byte [byte_512219], 4
	jz loc_440888
	mov dword [eax+4], 0
	mov dword [eax], 0Fh

loc_440866:
	mov edx, [esp+4]
	mov [eax+8], ecx
	mov [eax+0Ch], edx
	mov edx, [esp+8]
	mov [eax+10h], edx
	mov edx, [esp+0Ch]
	mov [eax+14h], edx
	mov edx, [esp+10h]
	mov [eax+18h], edx
	ret 10h

loc_440888:
	mov [eax+4], ebx
	mov [eax], edx
	jmp loc_440866
;sub_440850 endp

sub_440890: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	cmp dword dword_50AE14[eax*8], 0
	jnz loc_4408A6
	xor eax, eax
	pop edx
	ret

loc_4408A6:
	mov eax, 1
	pop edx
	ret
;sub_440890 endp

sub_4408B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, ebx
	call sub_440890
	cmp eax, 1
	jz loc_4408CC
	mov eax, 0FFFFFFFFh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4408CC:
	mov eax, edi
	shl eax, 2
	sub eax, edi
	lea edi, 0[eax*8]
	mov ebx, dword [dword_540F48]
	push esi
	mov ecx, dword dword_50AE18[edi]
	mov ebp, dword dword_50AE20[edi]
	mov eax, dword dword_50AE14[edi]
	sub ebx, ecx
	mov ecx, edx
	mov edx, ebp
	call sub_440AB0
	test eax, eax
	jz loc_44094E
	test byte dword_50AE24[edi], 1
	jz loc_440944
	mov edx, [esi+18h]
	mov eax, [esi+0Ch]
	mov [esi+0Ch], edx
	mov ebx, eax
	mov [esi+18h], eax
	neg ebx
	mov [esi+18h], ebx
	mov edx, [esi+1Ch]
	mov eax, [esi+10h]
	mov [esi+10h], edx
	mov edi, eax
	mov [esi+1Ch], eax
	neg edi
	mov [esi+1Ch], edi
	mov edx, [esi+20h]
	mov eax, [esi+14h]
	mov [esi+14h], edx
	mov ebp, eax
	mov [esi+20h], eax
	neg ebp
	mov [esi+20h], ebp

loc_440944:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_44094E:
	mov eax, 0FFFFFFFFh
	xor edx, edx
	mov dword dword_50AE18[edi], eax
	mov dword dword_50AE14[edi], edx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4408B0 endp

sub_440970: ;SUBROUTINE
	push esi
	sub esp, 4
	mov esi, [esp+0Ch]
	mov [esp], ebx
	push esi
	mov ebx, dword [dword_5637F4]
	mov eax, dword dword_50B114[eax*4]
	call sub_4409F0
	test byte [esp], 1
	jnz loc_4409A0
	mov eax, 1
	add esp, 4
	pop esi
	ret 4

loc_4409A0:
	mov edx, [esi+18h]
	mov eax, [esi+0Ch]
	mov [esi+0Ch], edx
	mov edx, eax
	mov [esi+18h], eax
	neg edx
	mov [esi+18h], edx
	mov eax, [esi+10h]
	mov edx, [esi+1Ch]
	mov ecx, eax
	mov [esi+10h], edx
	neg ecx
	mov [esi+1Ch], eax
	mov [esi+1Ch], ecx
	mov edx, [esi+20h]
	mov eax, [esi+14h]
	mov [esi+14h], edx
	mov ebx, eax
	mov [esi+20h], eax
	neg ebx
	mov [esi+20h], ebx
	mov eax, 1
	add esp, 4
	pop esi
	ret 4
;sub_440970 endp

sub_4409F0: ;SUBROUTINE
	push esi
	push edi
	sub esp, 8
	lea ebx, [eax+8]
	mov ax, [eax+4]
	and eax, 0FFFFh
	lea edx, [eax-1]
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 2
	add eax, ebx
	mov edi, esp
	lea esi, [eax+0Ch]
	movsd
	movsd
	mov edi, ecx
	mov esi, eax
	mov edx, [esp+14h]
	mov eax, esp
	movsd
	movsd
	movsd
	call sub_46C4A0
	add esp, 8
	pop edi
	pop esi
	ret 4
;sub_4409F0 endp

sub_440A40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov esi, edx
	lea edx, 0[eax*4]
	sub edx, eax
	lea ecx, 0[edx*8]
	mov edx, dword [dword_540F48]
	mov edi, dword dword_50AE18[ecx]
	mov ecx, dword dword_50AE14[ecx]
	sub edx, edi
	mov di, [ecx+6]
	cmp di, 1
	jb loc_440AA6
	cmp di, 190h
	ja loc_440AA6
	xor edi, edi
	mov di, [ecx+6]

loc_440A82:
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	xor edi, edi
	mov edx, eax
	mov di, [ecx+4]
	sar edx, 1Fh
	dec edi
	idiv edi
	mov [esi], edx
	xor edx, edx
	mov dx, [ecx+4]
	dec edx
	mov [ebx], edx
	pop edi
	pop esi
	pop ecx
	ret

loc_440AA6:
	mov edi, 6
	jmp loc_440A82
;sub_440A40 endp

sub_440AB0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 3Ch
	mov esi, eax
	mov [esp+34h], edx
	mov ebp, ecx
	add eax, 8
	mov dx, [esi+6]
	mov [esp+38h], eax
	cmp dx, 1
	jb loc_440B05
	cmp dx, 190h
	ja loc_440B05
	xor edi, edi
	mov di, dx

loc_440ADB:
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv edi
	mov edx, [esp+34h]
	mov ecx, eax
	cmp edx, 2
	jnz loc_440B0C
	xor eax, eax
	mov ax, [esi+4]
	dec eax
	cmp ecx, eax
	jl loc_440B0C
	xor eax, eax
	add esp, 3Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_440B05:
	mov edi, 6
	jmp loc_440ADB

loc_440B0C:
	mov si, [esi+4]
	and esi, 0FFFFh
	mov eax, ecx
	mov edx, ecx
	dec esi
	sar edx, 1Fh
	idiv esi
	mov ecx, edx
	lea eax, [edx+1]
	mov [esp+30h], eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv edi
	shl edx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov ebx, eax
	mov eax, ecx
	shl ecx, 2
	add ecx, eax
	mov eax, [esp+38h]
	shl ecx, 2
	mov edx, [esp+30h]
	add eax, ecx
	lea edi, [esp+28h]
	lea ecx, 0[edx*4]
	lea esi, [eax+0Ch]
	add ecx, edx
	mov edx, [esp+38h]
	shl ecx, 2
	movsd
	movsd
	add edx, ecx
	lea edi, [esp+18h]
	lea esi, [edx+0Ch]
	movsd
	movsd
	mov edi, esp
	mov esi, eax
	push ebp
	lea ecx, [esp+10h]
	movsd
	movsd
	movsd
	lea eax, [esp+24h]
	lea edi, [esp+10h]
	mov esi, edx
	push eax
	lea edx, [esp+20h]
	lea eax, [esp+30h]
	push ebx
	lea ebx, [esp+0Ch]
	movsd
	movsd
	movsd
	call sub_46C590
	mov edx, [esp+4Ch]
	lea eax, [esp+20h]
	call sub_46C4A0
	mov eax, 1
	add esp, 3Ch
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_440AB0 endp

sub_440BC0: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	cmp dword dword_50AE14[eax], 0
	jnz loc_440BDB
	mov eax, 0FFFFFFFFh
	pop edx
	ret

loc_440BDB:
	push ecx
	push ebx
	mov ebx, 0FFFFFFFFh
	xor ecx, ecx
	mov dword dword_50AE18[eax], ebx
	mov dword dword_50AE1C[eax], ecx
	mov dword dword_50AE14[eax], ecx
	mov eax, 1
	pop ebx
	pop ecx
	pop edx
	ret
;sub_440BC0 endp

sub_440C00: ;SUBROUTINE
	push esi
	mov esi, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov dword dword_50AE20[eax*8], esi
	mov dword dword_50AE24[eax*8], ebx
	mov dword dword_50AE28[eax*8], ecx
	pop esi
	ret
;sub_440C00 endp

sub_440C30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	call sub_440CB0
	mov edx, eax
	cmp eax, 0FFFFFFFFh
	jz loc_440C6A
	cmp ecx, 20h
	jge loc_440C65
	shl eax, 2
	sub eax, edx
	lea ebx, 0[ecx*4]
	shl eax, 3
	mov ecx, dword dword_50B114[ebx]
	mov dword dword_50AE14[eax], ecx
	test ecx, ecx
	jnz loc_440C6E

loc_440C65:
	mov eax, 0FFFFFFFFh

loc_440C6A:
	pop edx
	pop ecx
	pop ebx
	ret

loc_440C6E:
	push edi
	push esi
	mov ecx, dword [dword_540F48]
	mov ebx, 2
	mov dword dword_50AE18[eax], ecx
	mov esi, 1
	mov dword dword_50AE20[eax], ebx
	xor edi, edi
	mov dword dword_50AE24[eax], esi
	mov dword dword_50AE28[eax], edi
	mov eax, edx
	pop esi
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_440C30 endp

sub_440CB0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_50AE14]
	xor eax, eax
	xor edx, edx
	test ecx, ecx
	jz loc_440CD4

loc_440CC0:
	add eax, 18h
	inc edx
	cmp eax, 300h
	jge loc_440CD4
	cmp dword dword_50AE14[eax], 0
	jnz loc_440CC0

loc_440CD4:
	cmp edx, 20h
	jnz loc_440CE1
	mov eax, 0FFFFFFFFh
	pop edx
	pop ecx
	ret

loc_440CE1:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_440CB0 endp

sub_440CF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor edx, edx

loc_440CF5:
	mov ecx, dword dword_50B114[edx]
	test ecx, ecx
	jnz loc_440D0B
	add edx, 4
	cmp edx, 1Ch
	jnz loc_440CF5
	pop edx
	pop ecx
	pop ebx
	ret

loc_440D0B:
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword dword_50B114[edx], ebx
	add edx, 4
	cmp edx, 1Ch
	jnz loc_440CF5
	pop edx
	pop ecx
	pop ebx
	ret
;sub_440CF0 endp

sub_440D30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 100h
	mov esi, eax
	call sub_440DC0
	xor ecx, ecx

loc_440D43:
	add ecx, 4
	xor edx, edx
	mov dword dword_50B110[ecx], edx
	cmp ecx, 1Ch
	jnz loc_440D43
	push edx
	push esi
	push aS02da_can ; "%s%02da.can"
	lea eax, [esp+0Ch]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	call sprintf_
	add esp, 10h

loc_440D6B:
	mov eax, esp
	call sub_488570
	test eax, eax
	jnz loc_440D83
	mov eax, ecx
	add esp, 100h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_440D83:
	mov eax, esp
	xor edx, edx
	inc ecx
	call sub_486F40
	push ecx
	push esi
	push aS02d_can ; "%s%02d.can"
	mov dword dword_50B114[ebx], eax
	lea eax, [esp+0Ch]
	push eax
	add ebx, 4
	call sprintf_
	add esp, 10h
	cmp ecx, 7
	jl loc_440D6B
	mov eax, ecx
	add esp, 100h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_440D30 endp

sub_440DC0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, 0FFFFFFFFh
	xor eax, eax

loc_440DC9:
	add eax, 18h
	xor edx, edx
	mov dword dword_50AE00[eax], ecx
	mov dword dword_50AE04[eax], edx
	mov dword dword_50ADFC[eax], edx
	cmp eax, 300h
	jnz loc_440DC9
	pop edx
	pop ecx
	ret
;sub_440DC0 endp

sub_440DF0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov edi, edx
	mov esi, ebx
	mov eax, [edx]
	mov edx, [ecx]
	mov ebx, [ecx+4]
	sub eax, edx
	mov edx, [edi+4]
	sub edx, ebx
	mov ebx, [edi+8]
	mov edi, [ecx+8]
	mov [esp], eax
	sub ebx, edi
	mov [esp+4], edx
	mov [esp+8], ebx
	test eax, eax
	jle loc_440EDD

loc_440E26:
	mov edi, eax
	test edx, edx
	jle loc_440EE4

loc_440E30:
	mov eax, edx
	test ebx, ebx
	jle loc_440EEB

loc_440E3A:
	cmp edi, ebx
	jle loc_440EF2
	sar ebx, 2

loc_440E45:
	add ebx, edi
	cmp eax, ebx
	jle loc_440EFA
	sar ebx, 2

loc_440E52:
	add ebx, eax
	mov eax, [esp]
	mov edx, [ecx+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+10h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+14h]
	add ebp, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+24h]
	add ebp, eax
	mov eax, [esp]
	mov [esp+0Ch], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+28h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+2Ch]
	add ebp, eax
	mov eax, [esp+8]
	mov edi, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebp, eax
	test ebx, ebx
	jnz loc_440F02
	mov [esi+4], ebx
	mov [esi], ebx
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_440EDD:
	neg eax
	jmp loc_440E26

loc_440EE4:
	neg edx
	jmp loc_440E30

loc_440EEB:
	neg ebx
	jmp loc_440E3A

loc_440EF2:
	sar edi, 2
	jmp loc_440E45

loc_440EFA:
	sar eax, 2
	jmp loc_440E52

loc_440F02:
	mov eax, [esp+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	cmp eax, 10000h
	jle loc_440F60
	mov dword [esi], 10000h

loc_440F28:
	mov ebx, edi
	mov eax, ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	cmp eax, 10000h
	jg loc_440F73
	cmp eax, 0FFFF0000h
	jge loc_440F84
	mov dword [esi+4], 0FFFF0000h
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_440F60:
	cmp eax, 0FFFF0000h
	jge loc_440F6F
	mov dword [esi], 0FFFF0000h
	jmp loc_440F28

loc_440F6F:
	mov [esi], eax
	jmp loc_440F28

loc_440F73:
	mov dword [esi+4], 10000h
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_440F84:
	mov [esi+4], eax
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_440DF0 endp

sub_440FA0: ;SUBROUTINE
	push esi
	push ebp
	shl eax, 3
	mov esi, eax
	shl esi, 4
	sub esi, eax
	add esi, dword_50B130
	cmp ebx, [esi+0Ch]
	jnz loc_44103A
	add esi, 0Ch

loc_440FBE:
	push edi
	push ecx
	mov ecx, [edx]
	mov eax, [ebx+9Ch]
	mov edi, [edx+4]
	sub eax, ecx
	mov ebp, [edx+8]
	mov ecx, eax
	mov eax, [ebx+0A0h]
	mov ebx, [ebx+0A4h]
	sub eax, edi
	sub ebx, ebp
	test ecx, ecx
	jle loc_44105C

loc_440FEA:
	test eax, eax
	jle loc_441060

loc_440FF2:
	mov edx, eax
	test ebx, ebx
	jle loc_441064

loc_440FFC:
	cmp ecx, ebx
	jle loc_441068
	sar ebx, 2

loc_441007:
	add ebx, ecx
	cmp edx, ebx
	jle loc_44106D
	sar ebx, 2

loc_441010:
	add edx, ebx
	mov eax, [esi+4]
	mov ebp, edx
	cmp eax, 0FFFFFFFFh
	jnz loc_441072
	mov edx, [esi+8]
	mov edi, [esi+0Ch]

loc_441022:
	mov [esi+0Ch], edi
	mov [esi+8], edx
	mov eax, dword [dword_540F48]
	mov [esi+4], ebp
	mov [esi+10h], eax
	mov eax, edx
	pop ecx
	pop edi
	pop ebp
	pop esi
	ret

loc_44103A:
	cmp ebx, [esi+30h]
	jnz loc_441047
	add esi, 30h
	jmp loc_440FBE

loc_441047:
	cmp ebx, [esi+54h]
	jnz loc_441054
	add esi, 54h
	jmp loc_440FBE

loc_441054:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop esi
	ret

loc_44105C:
	neg ecx
	jmp loc_440FEA

loc_441060:
	neg eax
	jmp loc_440FF2

loc_441064:
	neg ebx
	jmp loc_440FFC

loc_441068:
	sar ecx, 2
	jmp loc_441007

loc_44106D:
	sar edx, 2
	jmp loc_441010

loc_441072:
	mov edi, edx
	sub edi, eax
	shl edi, 5
	mov eax, 1160000h
	lea ebx, [edi+1160000h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	jmp loc_441022
;sub_440FA0 endp

sub_4410A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov edi, edx
	mov [esp+4], ebx
	mov ebp, ecx
	shl eax, 3
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, dword_50B130
	add edx, eax
	mov [esp], edx
	mov eax, esi
	mov ebx, [esp]
	call sub_44B660
	mov edx, dword [dword_540F48]
	sub edx, [ebx+4]
	mov ecx, eax
	cmp edx, 8
	jge loc_4410E6
	cmp eax, [ebx]
	jz loc_4411B5

loc_4410E6:
	mov edx, [esp]
	mov eax, dword [dword_540F48]
	mov esi, [edx]
	mov [edx+4], eax
	cmp ecx, esi
	jz loc_44110E
	mov dword [edx+10h], 0FFFFFFFFh
	mov dword [edx+34h], 0FFFFFFFFh
	mov dword [edx+58h], 0FFFFFFFFh
	mov [edx], ecx

loc_44110E:
	mov eax, [esp+20h]
	mov dword [eax], 0
	mov eax, [eax]
	mov [ebp+0], eax
	mov eax, 7FFFFFFFh
	mov [esp+8], eax
	mov [esp+0Ch], eax
	mov eax, [esp]
	mov edx, [esp+4]
	mov ebx, dword [dword_511E3C]
	mov eax, [eax+0Ch]
	xor ecx, ecx
	mov [edx], eax
	mov edx, dword_511B48
	test ebx, ebx
	jle loc_441164

loc_441147:
	mov eax, [edx]
	cmp byte [eax+8Ch], 0
	jz loc_4411C9

loc_441156:
	mov esi, dword [dword_511E3C]
	inc ecx
	add edx, 4
	cmp ecx, esi
	jl loc_441147

loc_441164:
	mov edi, [ebp+0]
	test edi, edi
	jz loc_441292
	mov edx, [esp]
	cmp edi, [edx+54h]
	jnz loc_441292
	mov eax, [esp+20h]
	mov ebx, [edx+30h]
	cmp ebx, [eax]
	jz loc_441197
	mov eax, [esp]
	mov edx, [esp+20h]
	add eax, 30h
	mov edx, [edx]
	call sub_441C30

loc_441197:
	mov eax, [esp+20h]
	mov eax, [eax]

loc_44119D:
	mov [ebp+0], eax
	mov eax, [esp]
	mov edx, [esp+20h]
	mov eax, [eax+54h]
	mov [edx], eax

loc_4411AC:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4411B5:
	mov eax, [esp]
	mov edx, [esp+4]
	mov eax, [eax+0Ch]
	mov [edx], eax
	mov eax, [esp]
	mov eax, [eax+30h]
	jmp loc_44119D

loc_4411C9:
	mov eax, [esp+4]
	mov esi, [eax]
	test esi, esi
	jz loc_4411DF
	cmp ecx, [esi+1E8h]
	jz loc_441156

loc_4411DF:
	mov eax, [edx]
	test byte [eax+1F4h], 40h
	jnz loc_441156
	mov ebx, [edi]
	mov esi, [eax+9Ch]
	sub esi, ebx
	mov ebx, [eax+0A0h]
	mov eax, [eax+0A4h]
	sub ebx, [edi+4]
	sub eax, [edi+8]
	test esi, esi
	jle loc_441264

loc_44120E:
	test ebx, ebx
	jle loc_441268

loc_441212:
	test eax, eax
	jle loc_44126C

loc_441216:
	cmp esi, eax
	jle loc_441270
	sar eax, 2

loc_44121D:
	add eax, esi
	cmp eax, 4B0000h ;?
	jge loc_441156
	cmp ebx, eax
	jle loc_441275
	sar eax, 2

loc_441231:
	add eax, ebx
	cmp eax, 4B0000h ;?
	jge loc_441156
	mov esi, [esp+8]
	cmp eax, esi
	jge loc_44127A
	mov ebx, [esp+20h]
	mov ebx, [ebx]
	mov [esp+8], eax
	mov [ebp+0], ebx
	mov ebx, [esp+20h]
	mov eax, [edx]
	mov [esp+0Ch], esi
	mov [ebx], eax
	jmp loc_441156

loc_441264:
	neg esi
	jmp loc_44120E

loc_441268:
	neg ebx
	jmp loc_441212

loc_44126C:
	neg eax
	jmp loc_441216

loc_441270:
	sar esi, 2
	jmp loc_44121D

loc_441275:
	sar ebx, 2
	jmp loc_441231

loc_44127A:
	cmp eax, [esp+0Ch]
	jge loc_441156
	mov [esp+0Ch], eax
	mov eax, [edx]
	mov [ebp+0], eax
	jmp loc_441156

loc_441292:
	mov eax, [esp+20h]
	mov ebx, [eax]
	test ebx, ebx
	jz loc_4412D6
	mov edx, [esp]
	cmp ebx, [edx+30h]
	jnz loc_4412D6
	mov ecx, [edx+54h]
	mov eax, [ebp+0]
	cmp eax, ecx
	jz loc_4412BB
	mov edx, eax
	mov eax, [esp]
	add eax, 54h
	call sub_441C30

loc_4412BB:
	mov edx, [esp+20h]
	mov eax, [ebp+0]
	mov [edx], eax
	mov eax, [esp]
	mov eax, [eax+30h]
	mov [ebp+0], eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4412D6:
	mov edx, [esp]
	mov eax, [ebp+0]
	cmp eax, [edx+30h]
	jz loc_4412EE
	mov edx, eax
	mov eax, [esp]
	add eax, 30h
	call sub_441C30

loc_4412EE:
	mov edx, [esp]
	mov eax, [esp+20h]
	mov ebp, [edx+54h]
	cmp ebp, [eax]
	jz loc_4411AC
	mov eax, [esp]
	mov edx, [esp+20h]
	add eax, 54h
	mov edx, [edx]
	call sub_441C30
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_4410A0 endp

sub_441320: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 20h
	mov [ebp-18h], eax
	mov edi, edx
	mov esi, ebx
	mov [ebp-0Ch], ecx
	test ecx, ecx
	jnz loc_44133C

loc_441336:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_44133C:
	mov ebx, ecx
	mov edx, esi
	call sub_440FA0
	mov [ebp-14h], eax
	test eax, eax
	jl loc_441516
	lea ebx, [ebp-20h]
	lea edx, [ecx+9Ch]
	mov eax, esi
	call sub_440DF0
	mov edx, eax
	mov eax, [ebp-18h]
	shl eax, 3
	mov ecx, eax
	shl eax, 4
	sub eax, ecx
	add eax, dword_50B130
	cmp edi, 4
	jnz loc_441569
	add eax, 30h

loc_441380:
	mov [ebp-10h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [ebp-4], eax
	imul eax, eax
	mov [ebp-4], eax
	cmp eax, 15F9h
	jge loc_441571
	mov ebx, eax

loc_4413A6:
	mov eax, [ebp-0Ch]
	mov eax, [eax+2F0h]
	cmp eax, 1770h
	jle loc_4413BB
	mov eax, 1770h

loc_4413BB:
	mov edx, [ebp-0Ch]
	test byte [edx+1F4h], 10h
	jz loc_44157B
	mov edx, [ebp-14h]
	shl edx, 6

loc_4413D1:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ecx, eax
	mov eax, [ebp-10h]
	sub ecx, 0Ah
	mov [eax+1Ch], edi
	test ecx, ecx
	jl loc_4415A6

loc_4413F1:
	cmp dword [ebp-14h], 0
	jle loc_44143D
	mov eax, [ebp-10h]
	mov edx, [eax+0Ch]
	mov [eax+18h], ecx
	shl edx, 2
	mov [eax+14h], ebx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, ecx
	mov edx, [ebp-0Ch]
	push eax
	lea eax, [ebp-20h]
	mov ch, [edx+1F4h]
	push eax
	mov eax, [ebp-4]
	test ch, 10h
	jz loc_4415AD
	mov edx, 1

loc_441434:
	mov ecx, eax
	mov eax, edi
	call sub_442580

loc_44143D:
	cmp edi, 4
	jnz loc_4415B4
	mov eax, 10h

loc_44144B:
	mov edi, [ebp-0Ch]
	mov edi, [edi+590h]
	dec edi
	mov [ebp-8], eax
	test edi, edi
	jl loc_4414AA
	lea esi, 0[edi*4]
	sub esi, edi
	mov edx, [ebp-0Ch]
	shl esi, 3
	add esi, edx

loc_44146D:
	cmp dword [esi+598h], 0FFFFFFFFh
	jle loc_4415BE
	lea eax, [ebp-20h]
	mov ecx, [esi+5A4h]
	mov ebx, [esi+59Dh]
	mov edx, [esi+599h]
	push eax
	mov eax, [ebp-4]
	sar ebx, 18h
	push eax
	sar edx, 18h
	mov eax, [ebp-8]

loc_44149D:
	call sub_4424F0
	dec edi
	sub esi, 18h
	test edi, edi
	jge loc_44146D

loc_4414AA:
	mov eax, [ebp-0Ch]
	test byte [eax+1F4h], 4
	jz loc_441626
	cmp byte [eax+2DDh], 0
	jz loc_4415FF
	cmp byte [eax+318h], 0
	jnz loc_4415FF
	cmp dword [eax+31Ch], 0
	jnz loc_4415FF
	mov edi, [ebp-0Ch]
	mov eax, dword [dword_50B228]
	cmp eax, edi
	jz loc_4415E8
	test eax, eax
	jnz loc_441336
	mov ecx, [ebp-4]
	mov ebx, [ebp-14h]
	lea edx, [ebp-20h]
	mov eax, [ebp-10h]
	call sub_4416B0
	mov dword [dword_50B228], edi
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_441516:
	mov edx, [ecx+590h]
	dec edx
	test edx, edx
	jl loc_441336
	lea esi, 0[edx*4]
	sub esi, edx
	shl esi, 3
	add esi, ecx

loc_441533:
	cmp dword [esi+5A4h], 0
	jnz loc_441554
	cmp dword [esi+598h], 0FFFFFFFFh
	jle loc_441554
	cmp edi, 4
	jnz loc_441562
	mov eax, 10h

loc_44154F:
	call sub_4447D0

loc_441554:
	dec edx
	sub esi, 18h
	test edx, edx
	jl loc_441336
	jmp loc_441533

loc_441562:
	mov eax, 11h
	jmp loc_44154F

loc_441569:
	add eax, 54h
	jmp loc_441380

loc_441571:
	mov ebx, 15F9h
	jmp loc_4413A6

loc_44157B:
	mov edx, [edx+2ECh]
	mov ecx, [edx+0F0h]
	mov edx, eax
	shl eax, 7
	sub eax, edx
	mov edx, eax
	add ecx, 7D0h
	sar edx, 1Fh
	idiv ecx
	mov edx, [ebp-14h]
	imul edx, eax
	jmp loc_4413D1

loc_4415A6:
	xor ecx, ecx
	jmp loc_4413F1

loc_4415AD:
	xor edx, edx
	jmp loc_441434

loc_4415B4:
	mov eax, 11h
	jmp loc_44144B

loc_4415BE:
	lea eax, [ebp-20h]
	mov ebx, [ebp-4]
	mov ecx, [esi+5A4h]
	mov edx, [esi+599h]
	push eax
	sar edx, 18h
	push ebx
	mov ebx, [esi+59Dh]
	mov eax, 0FFFFFFFFh
	sar ebx, 18h
	jmp loc_44149D

loc_4415E8:
	mov ecx, [ebp-4]
	mov ebx, [ebp-14h]
	lea edx, [ebp-20h]
	mov eax, [ebp-10h]
	call sub_4416B0
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_4415FF:
	mov ebx, [ebp-0Ch]
	cmp ebx, dword [dword_50B228]
	jnz loc_441336
	mov eax, 13h
	xor esi, esi
	call sub_4447D0
	mov dword [dword_50B228], esi
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_441626:
	mov edi, [ebp-0Ch]
	cmp edi, dword [dword_50B228]
	jnz loc_441336
	mov eax, dword [dword_50B230]
	test eax, eax
	jle loc_441680
	lea ebx, [eax-1]
	mov dword [dword_50B230], ebx
	test ebx, ebx
	jnz loc_4415E8
	mov eax, 13h
	call sub_4447D0
	mov edi, dword [dword_50B224]
	dec edi
	mov dword [dword_50B224], edi
	jz loc_441674
	mov eax, dword [dword_50B220]
	mov dword [dword_50B230], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_441674:
	mov dword [dword_50B228], ebx
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_441680:
	lea edx, [eax+1]
	mov dword [dword_50B230], edx
	test edx, edx
	jnz loc_441336
	mov eax, dword [dword_50B22C]
	mov dword [dword_50B230], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret
;sub_441320 endp

sub_4416B0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov ebp, ecx
	mov ecx, [eax]
	mov ecx, [ecx+21Ch]
	mov ecx, [ecx]
	xor edx, edx
	mov dl, byte byte_4D5980[ecx]
	imul edx, ebx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, eax
	cmp eax, 7Fh
	jle loc_44175C
	mov ebx, 7Fh

loc_4416EB:
	mov eax, [esi]
	test byte [eax+1F4h], 10h
	jz loc_441764
	cmp ecx, 0Fh
	jz loc_44170E
	cmp ecx, 10h
	jz loc_44170E
	cmp ecx, 1Ah
	jz loc_44170E
	cmp ecx, 1Ch
	jnz loc_44176B

loc_44170E:
	mov esi, 0Bh

loc_441713:
	mov edx, 15F9h
	sub edx, ebp
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	mov ecx, 15F9h
	sar edx, 1Fh
	idiv ecx
	mov ecx, eax
	mov eax, [edi]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	mov ebp, [edi+4]
	add eax, 40h
	mov edx, ebp
	call sub_442250
	push eax
	mov edx, esi
	mov eax, 13h
	call sub_444520
	pop ebp
	pop edi
	pop esi
	ret

loc_44175C:
	test eax, eax
	jge loc_4416EB
	xor ebx, eax
	jmp loc_4416EB

loc_441764:
	mov esi, 1
	jmp loc_441713

loc_44176B:
	mov esi, 0Ah
	jmp loc_441713
;sub_4416B0 endp

sub_441780: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov [esp+24h], eax
	mov [esp+1Ch], edx
	mov [esp+20h], ebx
	test ebx, ebx
	jz loc_44197A
	cmp dword [ebx+280h], 2
	jnz loc_441982
	mov dword [ebx+288h], 0

loc_4417B2:
	mov ebx, [esp+20h]
	mov edx, [esp+1Ch]
	mov eax, [esp+24h]
	call sub_440FA0
	mov [esp+10h], eax
	test eax, eax
	jl loc_441A8D
	mov edx, [esp+20h]
	mov ebx, esp
	mov eax, [esp+1Ch]
	add edx, 9Ch
	call sub_440DF0
	mov ebx, dword [dword_512208]
	mov edx, eax
	cmp ebx, 1
	jnz loc_441803
	cmp dword [esp+24h], 0
	jnz loc_441ADB
	mov dword [esp], 10000h

loc_441803:
	mov eax, [esp+24h]
	shl eax, 3
	mov ecx, eax
	shl eax, 4
	sub eax, ecx
	add eax, dword_50B130
	add eax, 0Ch
	mov [esp+14h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+28h], eax
	imul eax, eax
	mov [esp+28h], eax
	mov eax, [esp+20h]
	mov edx, [esp+20h]
	mov eax, [eax+2ECh]
	mov edx, [edx+2F0h]
	mov ecx, [eax+0F0h]
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	add ecx, 7D0h
	sar edx, 1Fh
	idiv ecx
	mov edx, [esp+10h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ecx, esp
	mov edx, [esp+28h]
	mov ebx, eax
	mov eax, [esp+20h]
	mov ebp, [esp+20h]
	call sub_442710
	mov ebp, [ebp+590h]
	dec ebp
	test ebp, ebp
	jl loc_4418FC
	mov eax, [esp+20h]
	lea esi, 0[ebp*4]
	mov ecx, [esp+20h]
	sub esi, ebp
	add eax, 170h
	shl esi, 3
	mov [esp+18h], eax
	add esi, ecx

loc_4418B6:
	mov ebx, [esi+598h]
	cmp ebx, 6
	jnz loc_441AEE
	cmp dword [esp+24h], 0
	jz loc_441AE7
	mov edi, 7

loc_4418D5:
	mov ecx, [esi+594h]
	cmp ecx, 5
	jnz loc_441B04

loc_4418E4:
	cmp edi, 0FFFFFFFFh
	jle loc_441B0D
	mov eax, edi
	call sub_4447D0

loc_4418F4:
	dec ebp
	sub esi, 18h
	test ebp, ebp
	jge loc_4418B6

loc_4418FC:
	mov eax, [esp+20h]
	cmp byte [eax+2DDh], 0
	jz loc_441B91
	cmp byte [eax+318h], 0
	jnz loc_441B91
	cmp dword [eax+31Ch], 0
	jnz loc_441B91
	mov edx, [esp+10h]
	shl edx, 6
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	cmp dword [dword_512208], 1
	jnz loc_441956
	cmp dword [esp+24h], 0
	jnz loc_441B85
	mov dword [esp], 10000h

loc_441956:
	mov esi, [esp+20h]
	mov ecx, esp
	mov edx, [esp+28h]
	mov esi, [esi+1E8h]
	mov ebx, eax
	mov eax, esi
	call sub_442460
	mov eax, [esp+14h]
	mov dword [eax+20h], 1

loc_44197A:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_441982:
	mov edx, [ebx+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edx, [edx+eax+0Ch]
	sar edx, 18h
	mov eax, [ebx+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+14h]
	mov ecx, eax
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edx, [edx+eax+0Dh]
	sar edx, 18h
	mov eax, [ebx+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+14h]
	add ecx, eax
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edx, [edx+eax*4+0Eh]
	sar edx, 18h
	mov eax, [ebx+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, dword [dword_512228]
	add eax, ecx
	test ebx, ebx
	jnz loc_441A15
	test eax, eax
	jl loc_441A22

loc_441A15:
	cmp dword [dword_512228], 0
	jz loc_441A7A
	test eax, eax
	jle loc_441A7A

loc_441A22:
	mov eax, [esp+20h]
	cmp word [eax+14Ch], 0
	jnz loc_4417B2
	cmp dword [eax+58Ch], 0
	jnz loc_4417B2
	mov ebp, [eax+288h]
	inc ebp
	mov [eax+288h], ebp
	cmp ebp, 40h
	jl loc_4417B2
	cmp ebp, 94h
	jge loc_4417B2
	test byte [eax+288h], 1Fh
	jnz loc_4417B2
	call sub_4423A0
	jmp loc_4417B2

loc_441A7A:
	mov eax, [esp+20h]
	mov dword [eax+288h], 0
	jmp loc_4417B2

loc_441A8D:
	mov edx, [esp+20h]
	mov edx, [edx+590h]
	dec edx
	test edx, edx
	jl loc_44197A
	lea esi, 0[edx*4]
	sub esi, edx
	mov ebx, [esp+20h]
	shl esi, 3
	add esi, ebx

loc_441AB2:
	cmp dword [esi+5A4h], 0
	jnz loc_441ACD
	mov ebp, [esi+598h]
	cmp ebp, 0FFFFFFFFh
	jle loc_441ACD
	mov eax, ebp
	call sub_4447D0

loc_441ACD:
	dec edx
	sub esi, 18h
	test edx, edx
	jl loc_44197A
	jmp loc_441AB2

loc_441ADB:
	mov dword [esp], 0FFFF0000h
	jmp loc_441803

loc_441AE7:
	mov edi, ebx
	jmp loc_4418D5

loc_441AEE:
	cmp ebx, 8
	jnz loc_441AE7
	cmp dword [esp+24h], 0
	jz loc_441AE7
	mov edi, 9
	jmp loc_4418D5

loc_441B04:
	cmp ecx, 3
	jz loc_4418E4

loc_441B0D:
	test edi, edi
	jge loc_441B59
	cmp dword [dword_512208], 1
	jz loc_441B59
	lea ebx, [esp+8]
	mov edx, [esp+18h]
	mov eax, [esp+1Ch]
	mov ecx, [esp+28h]
	call sub_440DF0
	lea eax, [esp+8]
	mov ebx, [esi+59Dh]
	mov edx, [esi+599h]
	push eax
	sar ebx, 18h
	sar edx, 18h
	push ecx
	mov eax, edi
	mov ecx, [esi+5A4h]
	call sub_444830
	jmp loc_4418F4

loc_441B59:
	mov eax, esp
	mov edx, [esp+28h]
	mov ecx, [esi+5A4h]
	mov ebx, [esi+59Dh]
	push eax
	sar ebx, 18h
	push edx
	mov edx, [esi+599h]
	mov eax, edi
	sar edx, 18h
	call sub_444830
	jmp loc_4418F4

loc_441B85:
	mov dword [esp], 0FFFF0000h
	jmp loc_441956

loc_441B91:
	mov eax, [esp+14h]
	cmp dword [eax+20h], 0
	jz loc_44197A
	mov eax, [esp+20h]
	mov eax, [eax+1E8h]
	call sub_442430
	mov eax, [esp+14h]
	mov dword [eax+20h], 1
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_441780 endp

sub_441BD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov edx, dword [dword_50B228]
	test edx, edx
	jnz loc_441C21
	mov eax, dword_50B130

loc_441BE6:
	cmp esi, [eax+30h]
	jz loc_441BF0
	cmp esi, [eax+54h]
	jnz loc_441C18

loc_441BF0:
	mov dword [dword_50B230], ebx
	mov dword [dword_50B22C], ebx
	mov dword [dword_50B220], ecx
	mov ebp, ecx
	mov dword [dword_50B224], edi
	neg ebp
	mov dword [dword_50B228], esi
	mov dword [dword_50B220], ebp

loc_441C18:
	inc edx
	add eax, 78h
	cmp edx, 2
	jl loc_441BE6

loc_441C21:
	pop ebp
	pop edi
	pop esi
	ret
;sub_441BD0 endp

sub_441C30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov ebx, [eax]
	test ebx, ebx
	jz loc_441C72
	mov esi, dword [dword_50B228]
	cmp ebx, esi
	jnz loc_441C72
	mov eax, 13h
	xor edi, edi
	xor ebx, esi
	mov dword [dword_50B230], edi
	mov dword [dword_50B22C], edi
	mov dword [dword_50B220], edi
	mov dword [dword_50B224], ebx
	mov dword [dword_50B228], edi
	call sub_4447D0

loc_441C72:
	mov edi, [ecx+1Ch]
	cmp edi, 0FFFFFFFFh
	jg loc_441C86
	mov eax, ecx
	call sub_441D90
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_441C86:
	mov eax, edi
	call sub_4447D0
	cmp dword [ecx+1Ch], 4
	jnz loc_441CA9
	mov eax, 10h
	call sub_4447D0
	mov eax, ecx
	call sub_441D90
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_441CA9:
	mov eax, 11h
	call sub_4447D0
	mov eax, ecx
	call sub_441D90
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_441C30 endp

sub_441CC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, dword_50B130
	mov ah, 4
	xor edx, edx
	xor ebx, ebx
	mov dword [dword_50B230], edx
	mov dword [dword_50B22C], edx
	mov dword [dword_50B220], edx
	mov dword [dword_50B224], edx
	mov dword [dword_50B228], edx
	lea ebp, [ecx+54h]
	mov [esp], edx
	lea edi, [ecx+30h]
	mov byte [byte_4D5A0C], ah
	lea esi, [ecx+0Ch]

loc_441D04:
	mov eax, esi
	mov dword [ecx], 0FFFFFFFFh
	xor edx, edx
	mov dword [ecx+4], 0
	call sub_441D90
	mov eax, edi
	xor edx, edx
	call sub_441D90
	mov eax, ebp
	xor edx, edx
	call sub_441D90
	cmp dword [dword_512208], 1
	jle loc_441D77
	test ebx, ebx
	jnz loc_441D52
	mov edx, dword [dword_511E40]
	mov eax, dword [dword_51220C]
	cmp eax, edx
	jge loc_441D52
	mov eax, dword dword_511D08[eax*4]

loc_441D4F:
	mov [ecx+0Ch], eax

loc_441D52:
	mov eax, [esp]
	inc ebx
	add ebp, 78h
	add edi, 78h
	add esi, 78h
	add eax, 4
	add ecx, 78h
	mov [esp], eax
	cmp ebx, 2
	jl loc_441D04
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_441D77:
	cmp ebx, dword [dword_511E40]
	jge loc_441D52
	mov eax, [esp]
	mov eax, dword dword_511D08[eax]
	jmp loc_441D4F
;sub_441CC0 endp

sub_441D90: ;SUBROUTINE
	mov dword [eax+4], 0FFFFFFFFh
	mov dword [eax+8], 0FFFFFFFFh
	mov dword [eax+10h], 0
	mov dword [eax+20h], 0
	mov dword [eax+14h], 15F9h
	mov dword [eax+18h], 0
	mov dword [eax+1Ch], 0FFFFFFFFh
	mov [eax], edx
	ret
;sub_441D90 endp

sub_441DD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 6Ch
	cmp dword [dword_512208], 1
	jz loc_441E47
	cmp dword [dword_4D9550], 0
	jnz loc_441EB7
	mov edx, esp
	xor ebx, ebx
	xor eax, eax
	lea ecx, [esp+60h]
	call sub_44B710
	lea edx, [esp+64h]
	lea ebx, [esp+68h]
	push edx
	xor eax, eax
	lea edx, [esp+4]
	call sub_4410A0
	mov ebx, [esp+68h]
	mov edx, esp
	xor eax, eax
	call sub_441780
	mov ecx, [esp+60h]
	mov ebx, esp
	mov edx, 4
	xor eax, eax
	call sub_441320
	mov ecx, [esp+64h]
	mov ebx, esp
	mov edx, 5
	xor eax, eax
	call sub_441320
	add esp, 6Ch
	pop edx
	pop ecx
	pop ebx
	ret

loc_441E47:
	mov edx, esp
	xor ebx, ebx
	xor eax, eax
	lea ecx, [esp+60h]
	call sub_44B710
	lea edx, [esp+64h]
	lea ebx, [esp+68h]
	push edx
	xor eax, eax
	lea edx, [esp+4]
	call sub_4410A0
	mov ebx, [esp+68h]
	mov edx, esp
	xor eax, eax
	call sub_441780
	mov edx, esp
	mov eax, 1
	xor ebx, ebx
	lea ecx, [esp+60h]
	call sub_44B710
	lea edx, [esp+64h]
	lea ebx, [esp+68h]
	push edx
	mov eax, 1
	lea edx, [esp+4]
	call sub_4410A0
	mov ebx, [esp+68h]
	mov edx, esp
	mov eax, 1
	call sub_441780
	add esp, 6Ch
	pop edx
	pop ecx
	pop ebx
	ret

loc_441EB7:
	lea edx, [esp+64h]
	lea ecx, [esp+60h]
	lea ebx, [esp+68h]
	push edx
	xor eax, eax
	mov edx, dword_5222E4
	call sub_4410A0
	mov ebx, [esp+68h]
	mov edx, dword_5222E4
	xor eax, eax
	call sub_441780
	mov ecx, [esp+60h]
	mov ebx, dword_5222E4
	mov edx, 4
	xor eax, eax
	call sub_441320
	mov ecx, [esp+64h]
	mov ebx, dword_5222E4
	mov edx, 5
	xor eax, eax
	call sub_441320
	add esp, 6Ch
	pop edx
	pop ecx
	pop ebx
	ret
;sub_441DD0 endp

off_441F20: dd aMacf1
	dd aFerf50 ; "ferf50"
	dd aTr355 ; "tr355"
	dd aFgt90 ; "Fgt90"
	dd aFindi ; "Findi"
	dd aMust ; "must"
	dd aJxj220 ; "jxj220"
	dd aLogt1 ; "logt1"
	dd aLesv8 ; "lesv8"
	dd aNazca_1 ; "nazca"
	dd aIdcala ; "idcala"
	dd aIsd112i ; "isd112i"
	dd aMuscl ; "muscl"
	dd aStock ; "stock"
	dd aFutur ; "futur"
off_441F5C: dd aOmacf1
	dd aOferf50 ; "oferf50"
	dd aOtr355 ; "otr355"
	dd aOfgt90 ; "oFgt90"
	dd aOfindi ; "oFindi"
	dd aOmust ; "omust"
	dd aOjxj220 ; "ojxj220"
	dd aOlogt1 ; "ologt1"
	dd aOlesv8 ; "olesv8"
	dd aOnazca ; "onazca"
	dd aOidcala ; "oidcala"
	dd aOisd112 ; "oisd112"
	dd aOmuscl ; "omuscl"
	dd aOstock ; "ostock"
	dd aOfutur ; "ofutur"
off_441F98: dd aSmacf1
	dd aSferf50 ; "sferf50"
	dd aStr355 ; "str355"
	dd aSfgt90 ; "sFgt90"
	dd aSfindi ; "sFindi"
	dd aSmust ; "smust"
	dd aSjxj220 ; "sjxj220"
	dd aSlogt1 ; "slogt1"
	dd aSlesv8 ; "slesv8"
	dd aSnazca ; "snazca"
	dd aSidcala ; "sidcala"
	dd aSisd112 ; "sisd112"
	dd aSmuscl ; "smuscl"
	dd aSstock ; "sstock"
	dd aSfutur ; "sfutur"
off_441FD4: dd aWmacf1
	dd aWferf50 ; "wferf50"
	dd aWtr355 ; "wtr355"
	dd aWfgt90 ; "wFgt90"
	dd aWfindi ; "wFindi"
	dd aWmust ; "wmust"
	dd aWjxj220 ; "wjxj220"
	dd aWlogt1 ; "wlogt1"
	dd aWlesv8 ; "wlesv8"
	dd aWnazca ; "wnazca"
	dd aWidcala ; "widcala"
	dd aWisd112 ; "wisd112"
	dd aWbonus ; "wbonus"
	dd aWbonus ; "wbonus"
	dd aWbonus ; "wbonus"

sub_442010: ;SUBROUTINE
	push edx
	cmp byte [byte_4D5A19], 0
	jz loc_442036
	xor edx, edx
	mov eax, dword [dword_4D5A30]
	mov dword [dword_4D5A30], edx
	xor dh, dh
	mov dword [dword_4D5A34], eax
	mov byte [byte_4D5A19], dh
	pop edx
	ret

loc_442036:
	mov eax, dword [dword_4D5A34]
	mov dl, 1
	mov dword [dword_4D5A30], eax
	mov byte [byte_4D5A19], dl
	pop edx
	ret
;sub_442010 endp

sub_442050: ;SUBROUTINE
	push edx
	cmp byte [byte_4D5A18], 0
	jz loc_44206B
	xor eax, eax
	xor dh, dh
	call sub_489800
	mov byte [byte_4D5A18], dh
	pop edx
	ret

loc_44206B:
	mov eax, dword [dword_4D5A2C]
	mov dl, 1
	call sub_489800
	mov byte [byte_4D5A18], dl
	pop edx
	ret
;sub_442050 endp

sub_442080: ;SUBROUTINE
	mov eax, 4
	call sub_4447D0
	mov eax, 5
	call sub_4447D0
	mov eax, 6
	call sub_4447D0
	mov eax, 7
	call sub_4447D0
	mov eax, 8
	call sub_4447D0
	mov eax, 9
	call sub_4447D0
	mov eax, 0Ch
	call sub_4447D0
	mov eax, 0Dh
	call sub_4447D0
	mov eax, 0Eh
	call sub_4447D0
	mov eax, 0Fh
	call sub_4447D0
	mov eax, 10h
	call sub_4447D0
	mov eax, 11h
	call sub_4447D0
	mov eax, 12h
	call sub_4447D0
	mov eax, 13h
	call sub_4447D0
	mov eax, 15h
	call sub_4447D0
	mov eax, 16h
	call sub_4447D0
	mov eax, 17h
	jmp sub_4447D0
;sub_442080 endp

sub_442130: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push 0FFFFFFFFh
	mov ecx, 0FFFFFFFFh
	mov ebx, 14h
	mov edx, 7Fh
	xor eax, eax
	call sub_49DB40
	xor edx, edx
	xor eax, eax
	call sub_49DBA8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_442130 endp

sub_442160: ;SUBROUTINE
	push edx
	xor eax, eax
	call sub_49DAB0
	call sub_4762E0
	call sub_49DB20
	xor edx, edx

loc_442174:
	mov eax, edx
	inc edx
	call sub_49DAB0
	cmp edx, 80h
	jl loc_442174
	cmp byte [byte_4D5A48], 0
	jnz loc_442194
	call sub_446390
	pop edx
	ret

loc_442194:
	xor edx, edx
	xor eax, eax
	call sub_49DBA8
	call sub_446390
	pop edx
	ret
;sub_442160 endp

sub_4421B0: ;SUBROUTINE
	push edx
	xor eax, eax
	call sub_49DAB0
	call sub_4762E0
	call sub_49DB20
	xor edx, edx

loc_4421C4:
	mov eax, edx
	inc edx
	call sub_49DAB0
	cmp edx, 80h
	jl loc_4421C4
	cmp byte [byte_4D5A48], 0
	jnz loc_4421DF
	pop edx
	ret

loc_4421DF:
	xor edx, edx
	xor eax, eax
	call sub_49DBA8
	pop edx
	ret
;sub_4421B0 endp

sub_4421F0: ;SUBROUTINE
	push edx
	mov eax, 7Fh
	call sub_49DAB0
	xor eax, eax
	call sub_489800
	mov eax, 64h
	mov edx, dword [dword_4D5A28]
	call sub_4864A0
	pop edx
	ret
;sub_4421F0 endp

sub_442220: ;SUBROUTINE
	mov eax, 7Fh
	call sub_49DAB0
	cmp byte [byte_4D5A18], 0
	jnz loc_442234
	ret

loc_442234:
	mov eax, dword [dword_4D5A2C]
	jmp sub_489800
;sub_442220 endp

sub_442240: ;SUBROUTINE
	xor eax, eax
	jmp sub_49DAB0
;sub_442240 endp

sub_442250: ;SUBROUTINE
	cmp dword [dword_4D96B0], 0
	jz loc_442266
	test edx, edx
	jle loc_442268
	shl eax, 8
	sub eax, 3FFEh

loc_442266:
	cwde
	ret

loc_442268:
	mov edx, 7Fh
	sub edx, eax
	lea eax, [edx+80h]
	shl eax, 8
	sub eax, 3FFEh
	cwde
	ret
;sub_442250 endp

sub_442280: ;SUBROUTINE
	push esi
	sub esp, 14h
	mov [esp+10h], eax
	mov esi, edx
	mov edx, ecx
	mov eax, esp
	call sub_485380
	mov al, [esp+10h]
	mov ecx, dword [dword_50B440]
	mov [esp+4], al
	mov eax, [esp+10h]
	mov [esp], esi
	cmp eax, ecx
	jz loc_4422B4
	cmp eax, dword [dword_50B434]
	jnz loc_442305

loc_4422B4:
	imul edx, dword [dword_4D5A30]
	mov esi, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv esi

loc_4422C7:
	mov [esp+8], al
	mov al, [esp+1Ch]
	mov esi, dword [dword_4D96B0]
	mov [esp+9], al
	test esi, esi
	jz loc_44233A
	mov dh, 1
	mov eax, dword [dword_4D5A44]
	mov [esp+0Bh], dh
	test eax, eax
	jz loc_442331
	mov [esp+0Ch], bx

loc_4422F1:
	mov eax, esp
	call sub_4853C0
	inc dword [dword_4D5A40]
	add esp, 14h
	pop esi
	ret 4

loc_442305:
	cmp eax, dword [dword_50B458]
	jz loc_4422B4
	cmp eax, dword [dword_50B464]
	jz loc_4422B4
	imul edx, dword [dword_4D5A30]
	mov esi, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov dword [dword_50B47C], eax
	sar eax, 1
	jmp loc_4422C7

loc_442331:
	xor edx, edx
	mov [esp+0Ch], dx
	jmp loc_4422F1

loc_44233A:
	cmp dword [dword_51222C], 0
	jz loc_44234C
	mov eax, 7Fh
	sub eax, ebx
	mov ebx, eax

loc_44234C:
	xor ah, ah
	mov [esp+0Bh], ah
	cmp ebx, 7Fh
	jle loc_44237D
	mov ebx, 7Fh

loc_44235C:
	cmp dword [dword_4D5A44], 0
	jz loc_442385
	mov [esp+7], bl
	mov eax, esp
	call sub_4853C0
	inc dword [dword_4D5A40]
	add esp, 14h
	pop esi
	ret 4

loc_44237D:
	test ebx, ebx
	jge loc_44235C
	xor ebx, ebx
	jmp loc_44235C

loc_442385:
	mov byte [esp+7], 40h
	mov eax, esp
	call sub_4853C0
	inc dword [dword_4D5A40]
	add esp, 14h
	pop esi
	ret 4
;sub_442280 endp

sub_4423A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp dword [dword_4D96B0], 0
	jz loc_4423C8
	push 40h
	mov ecx, 7Fh
	mov edx, 5
	mov eax, dword [dword_50B428]
	xor ebx, ebx
	call sub_442280
	pop edx
	pop ecx
	pop ebx
	ret

loc_4423C8:
	push 40h
	mov ecx, 7Fh
	mov ebx, 40h
	mov edx, 5
	mov eax, dword [dword_50B428]
	call sub_442280
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4423A0 endp

sub_4423F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, edx
	cmp dword [dword_4D96B0], 0
	jz loc_442415
	push 40h
	mov esi, dword [dword_50B410]
	mov edx, eax
	xor ebx, ebx
	mov eax, esi
	call sub_442280
	pop esi
	pop ecx
	pop ebx
	ret

loc_442415:
	push 40h
	mov ebx, 40h
	mov esi, dword [dword_50B410]
	mov edx, eax
	mov eax, esi
	call sub_442280
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4423F0 endp

sub_442430: ;SUBROUTINE
	cmp dword [dword_4D5A1C], 0
	jz locret_442450
	test eax, eax
	jz loc_442451
	cmp dword [dword_512208], 1
	jnz loc_442451
	mov eax, 0Dh
	jmp sub_4447D0

locret_442450:
	ret

loc_442451:
	mov eax, 0Ch
	jmp sub_4447D0
;sub_442430 endp

sub_442460: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, ecx
	cmp dword [dword_4D5A1C], 0
	jz loc_4424CF
	cmp edx, 15F9h
	jge loc_4424D3
	mov eax, 15F9h
	sub eax, edx
	mov ecx, eax
	shl ecx, 7
	sub ecx, eax
	mov ebp, 15F9h
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebp
	mov ecx, eax

loc_442496:
	mov eax, [esi]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	add eax, 40h
	mov edx, [esi+4]
	call sub_442250
	mov edx, eax
	test edi, edi
	jz loc_4424D7
	cmp dword [dword_512208], 1
	jnz loc_4424D7
	push eax
	mov edx, 3
	mov eax, 0Dh
	call sub_444520

loc_4424CF:
	pop ebp
	pop edi
	pop esi
	ret

loc_4424D3:
	xor ecx, ecx
	jmp loc_442496

loc_4424D7:
	push edx
	mov eax, 0Ch
	mov edx, 3
	call sub_444520
	pop ebp
	pop edi
	pop esi
	ret
;sub_442460 endp

sub_4424F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, [esp+14h]
	mov esi, eax
	mov [esp], dl
	cmp dword [dword_4D5A1C], 0
	jz loc_44253D
	cmp edi, 15F9h
	jge loc_44252E
	mov edx, 15F9h
	sub edx, edi
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	mov ebp, 15F9h
	sar edx, 1Fh
	idiv ebp
	test eax, eax
	jnz loc_44254F

loc_44252E:
	cmp esi, 0FFFFFFFFh
	jz loc_44254F
	cmp dword dword_50B234[esi*8], 0FFFFFFFFh
	jnz loc_442546

loc_44253D:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_442546:
	mov eax, esi
	call sub_4447D0
	jmp loc_44253D

loc_44254F:
	mov ebp, [esp+18h]
	mov edx, [esp-3]
	sar ecx, 4
	push ebp
	movsx ebx, bl
	mov eax, esi
	push edi
	sar edx, 18h
	call sub_444830
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_4424F0 endp

sub_442580: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, [esp+10h]
	mov esi, eax
	mov edi, edx
	cmp dword [dword_4D5A1C], 0
	jz loc_442665
	cmp ecx, 15F9h
	jge loc_44266B
	mov edx, 15F9h
	sub edx, ecx
	mov eax, edx
	shl eax, 7
	sub eax, edx
	mov edx, eax
	mov ecx, 15F9h
	sar edx, 1Fh
	idiv ecx
	mov ecx, eax

loc_4425C0:
	mov eax, [ebp+0]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	add eax, 40h
	mov edx, [ebp+4]
	call sub_442250
	mov ebp, eax
	cmp ecx, 7Fh
	jle loc_442672
	mov eax, 7Fh

loc_4425EB:
	mov ecx, [esp+14h]
	test ecx, ecx
	jle loc_442679
	mov edx, ecx

loc_4425F9:
	mov dword [dword_50B484], edx
	cmp edx, 28h
	jle loc_44260E
	mov dword [dword_50B484], 28h

loc_44260E:
	cmp edi, 1
	jnz loc_442628
	mov edx, dword [dword_50B484]
	imul edx, eax
	mov ecx, 28h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx

loc_442628:
	cmp edi, 1
	jnz loc_44264A
	cmp esi, 4
	jnz loc_44268D
	mov ecx, dword [dword_4D5BEC]
	mov edx, eax
	sub edx, ecx
	test edx, edx
	jle loc_442682

loc_442640:
	cmp edx, 10h
	jle loc_442686
	mov eax, dword [dword_4D5BEC]

loc_44264A:
	test eax, eax
	jnz loc_4426C4
	cmp esi, 0FFFFFFFFh
	jz loc_4426C4
	cmp dword dword_50B234[esi*8], 0FFFFFFFFh
	jnz loc_4426B7

loc_442665:
	pop ebp
	pop edi
	pop esi
	ret 8

loc_44266B:
	xor ecx, ecx
	jmp loc_4425C0

loc_442672:
	mov eax, ecx
	jmp loc_4425EB

loc_442679:
	mov edx, ecx
	neg edx
	jmp loc_4425F9

loc_442682:
	neg edx
	jmp loc_442640

loc_442686:
	mov dword [dword_4D5BEC], eax
	jmp loc_44264A

loc_44268D:
	cmp esi, 5
	jnz loc_44264A
	mov ecx, dword [dword_4D5BF0]
	mov edx, eax
	sub edx, ecx
	test edx, edx
	jle loc_4426AC

loc_4426A0:
	cmp edx, 10h
	jle loc_4426B0
	mov eax, dword [dword_4D5BF0]
	jmp loc_44264A

loc_4426AC:
	neg edx
	jmp loc_4426A0

loc_4426B0:
	mov dword [dword_4D5BF0], eax
	jmp loc_44264A

loc_4426B7:
	mov eax, esi
	call sub_4447D0
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4426C4:
	push ebp
	mov ecx, eax
	mov edx, edi
	mov eax, esi
	call sub_444520
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_442580 endp

off_4426E0: dd loc_442891
	dd loc_4428B1 ; jump table for switch statement
	dd loc_44379F
	dd loc_4428B1
	dd loc_4428B1
	dd loc_44379F
	dd loc_4428B1
	dd loc_4428B1
	dd loc_442891
	dd loc_443771
	dd loc_443771
	dd loc_442891

sub_442710: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 70h
	mov esi, eax
	mov [ebp-1Ch], edx
	mov [ebp-38h], ebx
	mov [ebp-58h], ecx
	call sub_445B10
	cmp dword [dword_4D5A1C], 0
	jz loc_4436B0
	mov ecx, [ebp-1Ch]
	cmp ecx, 2BF2h
	jl loc_4436B6
	xor ebx, ebx
	mov [ebp-44h], ebx

loc_442749:
	mov eax, [esi+2B8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	test eax, eax
	jle loc_4436D8

loc_442764:
	add eax, eax
	mov ebx, eax
	mov [ebp-0Ch], eax
	cmp eax, 7Fh
	jle loc_442775
	mov ebx, 7Fh

loc_442775:
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov [ebp-20h], eax
	mov eax, 8
	mov edx, [ebp-20h]
	sub eax, edx
	mov [ebp-20h], eax
	cmp eax, 3
	jge loc_4427A0
	mov dword [ebp-20h], 3

loc_4427A0:
	mov eax, [ebp-38h]
	mov edx, 40h
	mov [ebp-18h], eax
	mov [ebp-28h], edx
	cmp eax, 64h
	jle loc_4436DF
	mov dword [ebp-18h], 64h

loc_4427BE:
	mov eax, [esi+184h]
	mov [ebp-24h], eax
	mov eax, [esi+14h]
	lea ecx, 0[eax*8]
	add ecx, eax
	mov eax, dword [dword_5118A4]
	shl ecx, 2
	add eax, ecx
	xor edx, edx
	mov dl, [eax+1Eh]
	sar edx, 4
	and edx, 0Fh
	cmp edx, 2
	jnz loc_4436F1

loc_4427F1:
	mov eax, 1

loc_4427F6:
	mov [ebp-3Ch], eax
	test eax, eax
	jz loc_443705
	cmp byte [byte_4D5A48], 0
	jnz loc_442827
	cmp dword [dword_512208], 1
	jz loc_442827
	mov edx, 7Fh
	xor eax, eax
	mov cl, 1
	call sub_49DBA8
	mov byte [byte_4D5A48], cl

loc_442827:
	mov eax, [ebp-0Ch]
	mov ecx, 5Eh
	add eax, 14h
	mov [ebp-28h], ecx
	mov [ebp-0Ch], eax

loc_442838:
	cmp dword [dword_512208], 1
	jnz loc_443760
	mov al, 1
	mov edi, dword [dword_4D96B0]
	mov [ebp-8], al
	test edi, edi
	jz loc_44373F
	cmp dword [esi+1E8h], 0
	jz loc_443735
	mov edi, 0A3E2h

loc_44286A:
	cmp dword [esi+1E8h], 0
	jz loc_443756
	mov eax, 17h

loc_44287C:
	mov [ebp-10h], eax

loc_44287F:
	mov eax, [ebp-24h]
	sub eax, 2 ; switch 12 cases
	cmp eax, 0Bh
	ja loc_4428B1 ; jumptable 0044288A default case
	jmp off_4426E0[eax*4] ; switch jump

loc_442891:
	mov eax, [ebp-0Ch] ; jumptable 0044288A cases 2,10,13
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ebx, [ebp-0Ch]
	add ebx, eax
	mov eax, 18h
	mov [ebp-0Ch], ebx
	mov [ebp-28h], eax

loc_4428B1:
	mov edx, dword [dword_51221C] ; jumptable 0044288A default case
	test edx, edx
	jnz loc_443887

loc_4428BF:
	cmp dword [dword_512208], 1
	jnz loc_443895
	mov eax, [esi+1E8h]

loc_4428D2:
	mov [ebp-14h], eax
	mov eax, [ebp-14h]
	mov eax, dword dword_4D52F4[eax*4]
	cmp eax, 64h
	jle loc_4428E9
	mov eax, 64h

loc_4428E9:
	mov edx, [ebp-14h]
	cmp dword dword_4D52F4[edx*4], 0
	jz loc_4438B6
	cmp byte byte_50B314[edx], 0
	jnz loc_4438B6
	cmp byte [ebp-8], 0
	jz loc_44389C
	mov ebx, edi

loc_442913:
	mov edx, eax
	shl edx, 7
	sub edx, eax
	mov eax, [ebp-14h]
	shl eax, 2
	mov ecx, 64h
	mov [ebp-40h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, eax
	push 40h
	mov edx, 4
	mov eax, dword [dword_50B470]
	call sub_442280
	mov edx, [ebp-40h]
	mov dword dword_50B31C[edx], eax
	mov eax, [ebp-14h]
	mov byte byte_50B314[eax], 1

loc_44295C:
	cmp dword [ebp-3Ch], 0
	jz loc_443941

loc_442966:
	mov eax, [ebp-14h]
	xor edx, edx
	mov eax, dword dword_50B31C[eax*4]
	call sub_48999C

loc_442977:
	mov eax, [esi+1E8h]
	cmp byte byte_50B38C[eax], 3
	jnz loc_4429ED
	cmp dword [ebp-3Ch], 0
	jz loc_4429ED
	cmp dword [dword_51221C], 7
	jnz loc_4429ED
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Ah
	jbe loc_4429ED
	cmp byte [ebp-8], 0
	jz loc_443953
	mov ebx, edi

loc_4429B4:
	mov edx, dword [dword_4D96B0]
	test edx, edx
	jz loc_443980
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	mov ecx, 6Eh
	xor edx, edx

loc_4429D5:
	call sub_488074
	div ecx
	mov eax, dword [dword_50B44C]
	mov ecx, edx
	mov edx, 3
	call sub_442280

loc_4429ED:
	mov ecx, [esi+228h]
	cmp ecx, 230h
	jl loc_4439BE
	cmp ecx, 6E0h
	jg loc_4439BE
	cmp dword [dword_51221C], 7
	jnz loc_4439BE
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jnz loc_4439BE
	xor ecx, ecx
	mov edx, 1
	mov dword [dword_50B40C], ecx
	mov dword dword_50B2F4[eax*4], edx
	call sub_488074
	mov edx, [esi+1E8h]
	and eax, 7Fh
	mov ebx, dword [dword_4D96B0]
	mov dword dword_50B33C[edx*4], eax
	test ebx, ebx
	jz loc_443996
	mov ecx, 0FFFFh

loc_442A67:
	xor edx, edx
	call sub_488074
	div ecx
	mov dword [dword_50B408], edx
	cmp dword [dword_4D96B0], 0
	jz loc_4439AA
	cmp byte [ebp-8], 0
	jz loc_4439A0

loc_442A8D:
	mov eax, edi

loc_442A8F:
	mov ebx, [esi+1E8h]
	mov edx, 4
	push eax
	mov ebx, dword dword_50B2F4[ebx*4]
	mov eax, [ebp-10h]
	mov ecx, ebx
	call sub_444520
	mov eax, [esi+1E8h]
	mov byte byte_50B314[eax], 1

loc_442AB9:
	mov edx, [esi+228h]
	cmp edx, 32Fh
	jl loc_443A3C
	cmp edx, 47Eh
	jg loc_443A3C
	cmp dword [dword_51221C], 2
	jnz loc_443A3C
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jnz loc_443A3C
	mov dword dword_50B2F4[eax*4], 1
	xor eax, eax
	mov dword [dword_50B40C], eax
	call sub_488074
	mov edx, eax
	mov eax, [esi+1E8h]
	and edx, 7Fh
	mov dword dword_50B33C[eax*4], edx
	mov edx, dword [dword_4D96B0]
	test edx, edx
	jz loc_443A14
	mov ecx, 0FFFFh
	xor edx, edx

loc_442B35:
	call sub_488074
	div ecx
	mov dword [dword_50B408], edx
	cmp dword [dword_4D96B0], 0
	jz loc_443A28
	cmp byte [ebp-8], 0
	jz loc_443A1E

loc_442B59:
	mov eax, edi

loc_442B5B:
	mov ebx, [esi+1E8h]
	push eax
	xor edx, edx
	mov ebx, dword dword_50B2F4[ebx*4]
	mov eax, [ebp-10h]
	mov ecx, ebx
	call sub_444520
	mov eax, [esi+1E8h]
	mov byte byte_50B314[eax], 1

loc_442B82:
	mov ebx, [esi+228h]
	cmp ebx, 244h
	jl loc_443AB8
	cmp ebx, 2EEh
	jg loc_443AB8
	cmp dword [dword_51221C], 4
	jnz loc_443AB8
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jnz loc_443AB8
	xor ecx, ecx
	mov edx, 1
	mov dword [dword_50B40C], ecx
	mov dword dword_50B2F4[eax*4], edx
	call sub_488074
	mov edx, [esi+1E8h]
	and eax, 7Fh
	mov ebx, dword [dword_4D96B0]
	mov dword dword_50B33C[edx*4], eax
	test ebx, ebx
	jz loc_443A90
	mov ecx, 0FFFFh

loc_442BFC:
	xor edx, edx
	call sub_488074
	div ecx
	mov dword [dword_50B408], edx
	cmp dword [dword_4D96B0], 0
	jz loc_443AA4
	cmp byte [ebp-8], 0
	jz loc_443A9A

loc_442C22:
	mov eax, edi

loc_442C24:
	mov ebx, [esi+1E8h]
	push eax
	xor edx, edx
	mov ebx, dword dword_50B2F4[ebx*4]
	mov eax, [ebp-10h]
	mov ecx, ebx
	call sub_444520
	mov eax, [esi+1E8h]
	mov byte byte_50B314[eax], 1

loc_442C4B:
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jz loc_442CA5
	mov edx, dword [dword_51221C]
	cmp edx, 2
	jnz loc_443B0E

loc_442C69:
	xor al, al
	mov [ebp-4], al

loc_442C6E:
	cmp dword [ebp-3Ch], 0
	jz loc_443B20
	mov eax, [ebp-10h]
	xor edx, edx
	mov eax, dword dword_50B234[eax*8]
	call sub_48999C
	mov eax, [esi+1E8h]
	xor ecx, ecx
	mov dword dword_50B2F4[eax*4], ecx
	mov eax, [esi+1E8h]
	mov dword dword_50B33C[eax*4], ecx

loc_442CA5:
	cmp dword [dword_512208], 1
	jnz loc_443CB5
	mov eax, [esi+1E8h]
	mov [ebp-6Ch], eax

loc_442CBB:
	cmp dword [dword_51221C], 7
	jnz loc_443D46
	mov ebx, [esi+228h]
	cmp ebx, 596h
	jle loc_443D46
	cmp ebx, 5D4h
	jge loc_443D46
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Fh
	jbe loc_442D52
	cmp byte [ebp-8], 0
	jz loc_443CBF
	mov ecx, edi

loc_442D05:
	cmp dword [dword_4D96B0], 0
	jz loc_443CF6
	push 40h
	mov ebx, 7Fh
	xor edx, edx
	call sub_488074
	div ebx
	mov [ebp-48h], ecx
	mov ecx, 64h
	mov ebx, edx
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_443CEC
	mov edx, 5

loc_442D43:
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-48h]

loc_442D4D:
	call sub_442280

loc_442D52:
	mov eax, [ebp-6Ch]
	mov byte byte_4D5A0F[eax], 1

loc_442D5C:
	mov eax, [esi+228h]
	cmp eax, 2BCh
	jle loc_442E67
	cmp eax, 3D4h
	jge loc_442E67
	cmp dword [dword_51221C], 3
	jnz loc_442E67
	mov ecx, 1F40h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 1F3Bh
	jbe loc_442DF7
	cmp dword [dword_4D96B0], 0
	jz loc_443D69
	call sub_488074
	and eax, 7Fh
	push eax
	mov ecx, 28h
	xor edx, edx
	call sub_488074
	div ecx
	mov ch, [ebp-8]
	lea ebx, [edx+32h]
	test ch, ch
	jz loc_443D56
	mov edx, edi

loc_442DCF:
	mov ecx, 64h
	mov [ebp-50h], edx
	xor edx, edx
	call sub_488074
	div ecx
	mov edx, 1
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-50h]

loc_442DF2:
	call sub_442280

loc_442DF7:
	mov ecx, 0C8h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 0B4h
	jbe loc_442E67
	cmp dword [dword_4D96B0], 0
	jz loc_443DFB
	cmp dword [esi+288h], 0
	jnz loc_443DD5
	cmp dword [dword_512228], 0
	jz loc_443DBE

loc_442E34:
	mov ebx, 41C0h

loc_442E39:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov ah, [ebp-8]
	add ecx, 40h
	test ah, ah
	jz loc_442E58

loc_442E56:
	mov ebx, edi

loc_442E58:
	mov edx, 4
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_442E67:
	cmp dword [dword_51221C], 3
	jnz loc_442EE0
	mov eax, [esi+228h]
	cmp eax, 3D4h
	jle loc_442EE0
	cmp eax, 62Ch
	jge loc_442EE0
	mov ecx, 0FA0h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 0F96h
	jbe loc_442EE0
	cmp dword [dword_4D96B0], 0
	jz loc_443E75
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov dh, [ebp-8]
	add ebx, 40h
	test dh, dh
	jz loc_443E62
	mov edx, edi

loc_442ECD:
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, edx
	mov edx, 3

loc_442EDB:
	call sub_442280

loc_442EE0:
	cmp dword [dword_51221C], 4
	jnz loc_442F74
	mov eax, [esi+228h]
	cmp eax, 244h
	jle loc_442F74
	cmp eax, 2F8h
	jge loc_442F74
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 61h
	jbe loc_442F74
	cmp dword [dword_4D96B0], 0
	jz loc_443EDC
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	mov ch, [ebp-8]
	mov [ebp-60h], eax
	test ch, ch
	jz loc_443EBF
	mov edx, edi

loc_442F49:
	mov ecx, 64h
	mov ebx, edx
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_443ED2
	mov edx, 1

loc_442F67:
	mov ecx, [ebp-60h]
	mov eax, dword [dword_50B44C]

loc_442F6F:
	call sub_442280

loc_442F74:
	cmp dword [dword_51221C], 4
	jnz loc_443007
	mov eax, [esi+228h]
	test eax, eax
	jle loc_443F43
	cmp eax, 12Ch
	jge loc_443F43

loc_442F9A:
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Fh
	jbe loc_443007
	cmp dword [dword_4D96B0], 0
	jz loc_443F90
	cmp dword [esi+288h], 0
	jnz loc_443F6F
	cmp dword [dword_512228], 0
	jz loc_443F58

loc_442FD4:
	mov ebx, 3FFEh

loc_442FD9:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov ah, [ebp-8]
	add ecx, 40h
	test ah, ah
	jz loc_442FF8

loc_442FF6:
	mov ebx, edi

loc_442FF8:
	mov edx, 3
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_443007:
	cmp dword [dword_51221C], 4
	jnz loc_4430AE
	mov ebx, [esi+228h]
	cmp ebx, 523h
	jle loc_4430AE
	cmp ebx, 541h
	jge loc_4430AE
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Ah
	jbe loc_4430AE
	mov edx, [esi+228h]
	cmp edx, 532h
	jle loc_443FF2
	lea eax, [edx-532h]

loc_44305D:
	lea ecx, 0[eax*4]
	sub ecx, eax
	mov eax, 7Fh
	add ecx, ecx
	sub eax, ecx
	mov ecx, eax
	test eax, eax
	jl loc_443FFE
	cmp eax, 7Fh
	jle loc_443083
	mov ecx, 7Fh

loc_443083:
	cmp byte [ebp-8], 0
	jz loc_444005
	mov ebx, edi

loc_44308F:
	call sub_488074
	and eax, 7Fh
	push eax
	mov edx, 5
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_4430AE:
	mov eax, [esi+1E8h]
	cmp byte byte_50B38C[eax], 3
	jnz loc_44313B
	cmp dword [dword_51221C], 8
	jnz loc_44313B
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 61h
	jbe loc_44313B
	cmp dword [dword_4D96B0], 0
	jz loc_44404F
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov ch, [ebp-8]
	add ebx, 40h
	test ch, ch
	jz loc_444032
	mov edx, edi

loc_44310D:
	mov ecx, 64h
	mov [ebp-64h], edx
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_444045
	mov edx, 1

loc_44312C:
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-64h]

loc_443136:
	call sub_442280

loc_44313B:
	mov eax, [esi+1E8h]
	cmp byte byte_50B38C[eax], 4
	jnz loc_4431A6
	cmp dword [dword_51221C], 8
	jnz loc_4431A6
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 61h
	jbe loc_4431A6
	cmp dword [dword_4D96B0], 0
	jz loc_4440C9
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov cl, [ebp-8]
	add ebx, 40h
	test cl, cl
	jz loc_4440B6
	mov edx, edi

loc_443196:
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, edx

loc_44319F:
	xor edx, edx
	call sub_442280

loc_4431A6:
	mov eax, [esi+1E8h]
	cmp byte byte_50B38C[eax], 5
	jnz loc_443223
	cmp dword [dword_51221C], 8
	jnz loc_443223
	cmp dword [esi+228h], 5AAh
	jge loc_443223
	mov ecx, 0C8h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 0C5h
	jbe loc_443223
	cmp dword [dword_4D96B0], 0
	jz loc_444119
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov ah, [ebp-8]
	add ebx, 40h
	test ah, ah
	jz loc_444106
	mov edx, edi

loc_443210:
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, edx
	mov edx, 3

loc_44321E:
	call sub_442280

loc_443223:
	cmp dword [dword_51221C], 0
	jnz loc_4432BD
	mov edx, [esi+228h]
	cmp edx, 4CEh
	jle loc_4432BD
	cmp edx, 4F6h
	jge loc_4432BD
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 61h
	jbe loc_4432BD
	cmp dword [dword_4D96B0], 0
	jz loc_44419D
	cmp dword [esi+288h], 0
	jnz loc_444177
	cmp dword [dword_512228], 0
	jz loc_444160

loc_443284:
	mov ebx, 41C0h

loc_443289:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dh, [ebp-8]
	add ecx, 40h
	test dh, dh
	jz loc_4432A8

loc_4432A6:
	mov ebx, edi

loc_4432A8:
	call sub_488074
	and eax, 1
	lea edx, [eax+2]
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_4432BD:
	cmp dword [dword_51221C], 0
	jnz loc_443345
	mov ebx, [esi+228h]
	cmp ebx, 235h
	jle loc_443345
	cmp ebx, 258h
	jge loc_443345
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Ah
	jbe loc_443345
	cmp dword [dword_4D96B0], 0
	jz loc_44421A
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov cl, [ebp-8]
	add ebx, 40h
	test cl, cl
	jz loc_444207
	mov edx, edi

loc_443326:
	call sub_488074
	mov ecx, dword [dword_50B44C]
	and eax, 1
	mov [ebp-70h], ecx
	mov ecx, ebx
	mov ebx, edx
	mov edx, eax
	mov eax, [ebp-70h]

loc_443340:
	call sub_442280

loc_443345:
	cmp dword [dword_51221C], 6
	jnz loc_4433DB
	mov ebx, [esi+228h]
	cmp ebx, 17Ch
	jle loc_4433DB
	cmp ebx, 2BCh
	jge loc_4433DB
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Fh
	jbe loc_4433DB
	cmp dword [dword_4D96B0], 0
	jz loc_4442A6
	cmp dword [esi+288h], 0
	jnz loc_444285
	cmp dword [dword_512228], 0
	jz loc_44426E

loc_4433A6:
	mov eax, 3FFEh

loc_4433AB:
	mov ebx, eax
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov ah, [ebp-8]
	add ecx, 40h
	test ah, ah
	jz loc_4433CC

loc_4433CA:
	mov ebx, edi

loc_4433CC:
	mov edx, 1
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_4433DB:
	cmp dword [dword_51221C], 6
	jnz loc_443471
	mov edx, [esi+228h]
	cmp edx, 488h
	jle loc_443471
	cmp edx, 50Ah
	jge loc_443471
	mov ecx, 64h
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 5Fh
	jbe loc_443471
	cmp dword [dword_4D96B0], 0
	jz loc_444349
	cmp dword [esi+288h], 0
	jnz loc_444328
	cmp dword [dword_512228], 0
	jz loc_444311

loc_44343C:
	mov eax, 0C002h

loc_443441:
	mov ebx, eax
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dh, [ebp-8]
	add ecx, 40h
	test dh, dh
	jz loc_443462

loc_443460:
	mov ebx, edi

loc_443462:
	mov edx, 1
	mov eax, dword [dword_50B44C]
	call sub_442280

loc_443471:
	cmp dword [ebp-1Ch], 4
	jle loc_443496
	mov eax, [ebp-0Ch]
	lea ecx, 0[eax*4]
	sub ecx, eax
	add ecx, ecx
	mov ebx, 0Ah
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov [ebp-0Ch], eax

loc_443496:
	mov ebx, [ebp-1Ch]
	cmp ebx, 4
	jge loc_4443B0
	mov ebx, 2

loc_4434A7:
	mov eax, [ebp-0Ch]
	cmp eax, 7Fh
	jle loc_4434B4
	mov eax, 7Fh

loc_4434B4:
	mov ecx, [esi+1E8h]
	xor edx, edx
	shl ecx, 2
	mov dl, [esi+2D7h]
	mov edi, dword dword_50B364[ecx]
	mov [ebp-2Ch], eax
	cmp edx, edi
	jl loc_4443C9
	sub edx, edi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1

loc_4434E1:
	lea edx, [edi+eax]
	mov dword dword_50B364[ecx], edx
	mov eax, [esi+1E8h]
	mov eax, dword dword_50B364[eax*4]
	cmp eax, 0FFh
	jle loc_443503
	mov eax, 0FFh

loc_443503:
	sar eax, 1
	xor edx, edx
	mov dl, byte byte_4D5B49[eax]
	mov [ebp-34h], edx
	mov edx, 80h
	sub edx, eax
	mov al, byte byte_4D5B49[edx]
	mov ecx, [ebp-44h]
	and eax, 0FFh
	mov edi, dword [dword_512214]
	mov [ebp-30h], eax
	cmp edi, 2
	jl loc_4443DD
	mov edx, [ebp-58h]
	mov eax, [ebp-58h]
	mov edx, [edx]
	mov eax, [eax]
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	lea edi, [eax+40h]

loc_44354F:
	mov edx, [ebp-18h]
	add edx, 28h
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov ecx, eax
	cmp eax, 7Fh
	jle loc_443571
	mov ecx, 7Fh

loc_443571:
	mov eax, [ebp-30h]
	imul eax, ecx
	sar eax, 7
	mov [ebp-30h], eax
	mov eax, [ebp-34h]
	imul eax, ecx
	sar eax, 7
	mov [ebp-34h], eax
	imul ecx, [ebp-2Ch]
	sar ecx, 7
	mov edx, dword [dword_512208]
	mov [ebp-2Ch], ecx
	cmp edx, 1
	jnz loc_4435BA
	cmp dword [dword_4D5A44], 0
	jz loc_4443F1
	cmp dword [esi+1E8h], 0
	jz loc_4443E7
	xor edi, edi

loc_4435BA:
	cmp dword [dword_512208], 1
	jnz loc_4443FB
	cmp dword [esi+1E8h], 0
	jz loc_4443FB
	mov edx, [ebp-2Ch]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, dword [dword_50B47C]
	sar eax, cl
	sar edx, 1
	add edx, eax
	mov eax, dword [dword_50B28C]
	call sub_48999C
	mov edx, [ebp-28h]
	mov eax, dword [dword_50B28C]
	call sub_49E0F4
	mov eax, dword [dword_50B28C]
	mov edx, edi
	call sub_49E200
	mov edx, [ebp-34h]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, eax
	sar eax, 1
	sar edx, cl
	add edx, eax
	mov eax, dword [dword_50B23C]
	call sub_48999C
	mov edx, [ebp-18h]
	mov eax, dword [dword_50B23C]
	call sub_49E0F4
	mov eax, dword [dword_50B23C]
	mov edx, edi
	call sub_49E200
	mov edx, [ebp-30h]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, eax
	sar eax, 1
	sar edx, cl
	add edx, eax
	mov eax, dword [dword_50B24C]
	call sub_48999C
	mov edx, [ebp-18h]
	mov eax, dword [dword_50B24C]
	call sub_49E0F4
	mov eax, dword [dword_50B24C]
	mov edx, edi
	call sub_49E200

loc_4436B0:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret

loc_4436B6:
	mov eax, 2BF2h
	sub eax, ecx
	mov edx, eax
	shl edx, 7
	sub edx, eax
	mov ecx, 2BF2h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov [ebp-44h], eax
	jmp loc_442749

loc_4436D8:
	neg eax
	jmp loc_442764

loc_4436DF:
	test eax, eax
	jge loc_4427BE
	xor edx, edx
	mov [ebp-18h], edx
	jmp loc_4427BE

loc_4436F1:
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jz loc_4427F1
	xor eax, eax
	jmp loc_4427F6

loc_443705:
	cmp byte [byte_4D5A48], 0
	jz loc_442838
	cmp dword [dword_512208], 1
	jz loc_442838
	xor edx, edx
	xor eax, eax
	call sub_49DBA8
	xor dl, dl
	mov byte [byte_4D5A48], dl
	jmp loc_442838

loc_443735:
	mov edi, 3FFEh
	jmp loc_44286A

loc_44373F:
	cmp dword [esi+1E8h], 0
	jnz loc_44286A
	mov edi, 7Fh
	jmp loc_44286A

loc_443756:
	mov eax, 12h
	jmp loc_44287C

loc_443760:
	xor ch, ch
	mov [ebp-8], ch
	mov dword [ebp-10h], 12h
	jmp loc_44287F

loc_443771:
	mov eax, [ebp-0Ch] ; jumptable 0044288A cases 11,12
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ecx, 18h
	mov edx, [ebp-0Ch]
	mov [ebp-28h], ecx
	add edx, eax
	mov eax, dword [dword_51221C]
	mov [ebp-0Ch], edx
	cmp eax, 4
	jnz loc_4428B1 ; jumptable 0044288A default case

loc_44379F:
	mov ah, byte [byte_4D5BE8] ; jumptable 0044288A cases 4,7
	xor edx, edx
	inc ah
	mov ecx, [ebp-20h]
	mov dl, ah
	mov byte [byte_4D5BE8], ah
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov byte [byte_4D5BE8], dl
	test dl, dl
	jnz loc_4428B1 ; jumptable 0044288A default case
	cmp dword [esi+15Ch], 3333h
	jge loc_4428B1 ; jumptable 0044288A default case
	cmp dword [dword_4D96B0], 0
	jz loc_44382A
	mov edx, [ebp-24h]
	cmp edx, 7
	jnz loc_44381A

loc_4437EA:
	mov eax, 28h

loc_4437EF:
	push eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov bl, [ebp-8]
	mov ecx, eax
	test bl, bl
	jz loc_443826
	mov ebx, edi

loc_443806:
	mov edx, 1Dh
	mov eax, dword [dword_50B428]
	call sub_442280
	jmp loc_4428B1 ; jumptable 0044288A default case

loc_44381A:
	cmp edx, 0Ch
	jz loc_4437EA
	mov eax, 40h
	jmp loc_4437EF

loc_443826:
	xor ebx, ebx
	jmp loc_443806

loc_44382A:
	mov ecx, [ebp-24h]
	cmp ecx, 7
	jnz loc_443862

loc_443832:
	mov eax, 28h

loc_443837:
	push eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov dh, [ebp-8]
	mov ecx, eax
	test dh, dh
	jz loc_44386E
	mov ebx, edi
	mov edx, 1Dh
	mov eax, dword [dword_50B428]
	call sub_442280
	jmp loc_4428B1 ; jumptable 0044288A default case

loc_443862:
	cmp ecx, 0Ch
	jz loc_443832
	mov eax, 40h
	jmp loc_443837

loc_44386E:
	mov ebx, 40h
	mov edx, 1Dh
	mov eax, dword [dword_50B428]
	call sub_442280
	jmp loc_4428B1 ; jumptable 0044288A default case

loc_443887:
	cmp edx, 3
	jz loc_4428BF
	jmp loc_442977

loc_443895:
	xor eax, eax
	jmp loc_4428D2

loc_44389C:
	cmp dword [dword_4D96B0], 0
	jz loc_4438AC
	xor ebx, ebx
	jmp loc_442913

loc_4438AC:
	mov ebx, 40h
	jmp loc_442913

loc_4438B6:
	mov edx, [ebp-14h]
	shl edx, 2
	cmp dword dword_4D52F4[edx], 0
	jnz loc_4438D1
	mov ecx, [ebp-14h]
	cmp byte byte_50B314[ecx], 0
	jnz loc_44391D

loc_4438D1:
	mov ecx, [ebp-14h]
	shl ecx, 2
	cmp dword dword_4D52F4[ecx], 0
	jz loc_44295C
	mov edx, [ebp-14h]
	cmp byte byte_50B314[edx], 0
	jz loc_44295C
	mov edx, dword [dword_4D5A30]
	imul edx, eax
	mov ebx, 64h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov ecx, dword dword_50B31C[ecx]
	mov edx, eax
	mov eax, ecx
	call sub_48999C
	jmp loc_44295C

loc_44391D:
	mov ebx, 0FFFFFFFFh
	mov eax, dword dword_50B31C[edx]
	mov edx, 5
	call sub_486080
	mov eax, ecx
	xor cl, cl
	mov byte byte_50B314[eax], cl
	jmp loc_44295C

loc_443941:
	cmp byte [byte_4D5A19], 0
	jz loc_442966
	jmp loc_442977

loc_443953:
	cmp dword [dword_4D96B0], 0
	jz loc_443971
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	mov ebx, edx
	jmp loc_4429B4

loc_443971:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	jmp loc_4429B4

loc_443980:
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	mov ecx, 6Eh
	jmp loc_4429D5

loc_443996:
	mov ecx, 7Fh
	jmp loc_442A67

loc_4439A0:
	mov eax, dword [dword_50B40C]
	jmp loc_442A8F

loc_4439AA:
	cmp byte [ebp-8], 0
	jnz loc_442A8D
	mov eax, dword [dword_50B40C]
	jmp loc_442A8F

loc_4439BE:
	mov edx, [esi+228h]
	cmp edx, 230h
	jge loc_443A07

loc_4439CC:
	cmp dword [dword_51221C], 7
	jnz loc_442AB9
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jz loc_442AB9
	mov eax, [ebp-10h]
	call sub_4447D0
	mov eax, [esi+1E8h]
	xor dl, dl
	mov byte byte_50B314[eax], dl
	jmp loc_442AB9

loc_443A07:
	cmp edx, 6E0h
	jg loc_4439CC
	jmp loc_442AB9

loc_443A14:
	mov ecx, 7Fh
	jmp loc_442B35

loc_443A1E:
	mov eax, dword [dword_50B40C]
	jmp loc_442B5B

loc_443A28:
	cmp byte [ebp-8], 0
	jnz loc_442B59
	mov eax, dword [dword_50B40C]
	jmp loc_442B5B

loc_443A3C:
	mov eax, [esi+228h]
	cmp eax, 32Fh
	jge loc_443A84

loc_443A49:
	cmp dword [dword_51221C], 2
	jnz loc_442B82
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jz loc_442B82
	mov eax, [ebp-10h]
	call sub_4447D0
	mov eax, [esi+1E8h]
	xor dl, dl
	mov byte byte_50B314[eax], dl
	jmp loc_442B82

loc_443A84:
	cmp eax, 47Eh
	jg loc_443A49
	jmp loc_442B82

loc_443A90:
	mov ecx, 7Fh
	jmp loc_442BFC

loc_443A9A:
	mov eax, dword [dword_50B40C]
	jmp loc_442C24

loc_443AA4:
	cmp byte [ebp-8], 0
	jnz loc_442C22
	mov eax, dword [dword_50B40C]
	jmp loc_442C24

loc_443AB8:
	mov ecx, [esi+228h]
	cmp ecx, 244h
	jge loc_443B01

loc_443AC6:
	cmp dword [dword_51221C], 4
	jnz loc_442C4B
	mov eax, [esi+1E8h]
	cmp byte byte_50B314[eax], 0
	jz loc_442C4B
	mov eax, [ebp-10h]
	call sub_4447D0
	mov eax, [esi+1E8h]
	xor dl, dl
	mov byte byte_50B314[eax], dl
	jmp loc_442C4B

loc_443B01:
	cmp ecx, 2EEh
	jg loc_443AC6
	jmp loc_442C4B

loc_443B0E:
	cmp edx, 4
	jz loc_442C69
	mov byte [ebp-4], 4
	jmp loc_442C6E

loc_443B20:
	mov eax, [esi+1E8h]
	mov edx, dword dword_50B2F4[eax*4]
	cmp edx, dword dword_50B33C[eax*4]
	jz loc_443C9B
	mov ebx, dword [dword_50B408]
	mov eax, dword [dword_50B40C]
	cmp eax, ebx
	jz loc_443C1E
	cmp dword [dword_4D96B0], 0
	jz loc_443C01
	cmp eax, ebx
	jge loc_443BE9
	lea ebx, [eax+80h]
	mov dword [dword_50B40C], ebx

loc_443B6E:
	mov eax, dword [dword_50B40C]
	test eax, eax
	jl loc_443BF7
	cmp eax, 0FFFFh
	jle loc_443B8C
	mov dword [dword_50B40C], 0FFFFh

loc_443B8C:
	mov ecx, [esi+1E8h]
	shl ecx, 2
	mov eax, dword dword_50B2F4[ecx]
	cmp eax, dword dword_50B33C[ecx]
	jge loc_443C52
	inc eax
	mov dword dword_50B2F4[ecx], eax

loc_443BAE:
	cmp dword [dword_4D96B0], 0
	jz loc_443C6A
	cmp byte [ebp-8], 0
	jz loc_443C60
	mov eax, edi

loc_443BC7:
	mov ebx, [esi+1E8h]
	xor edx, edx
	push eax
	mov dl, [ebp-4]
	mov ebx, dword dword_50B2F4[ebx*4]
	mov eax, [ebp-10h]
	mov ecx, ebx
	call sub_444520
	jmp loc_442CA5

loc_443BE9:
	lea ecx, [eax-80h]
	mov dword [dword_50B40C], ecx
	jmp loc_443B6E

loc_443BF7:
	xor ebx, ebx
	mov dword [dword_50B40C], ebx
	jmp loc_443B8C

loc_443C01:
	cmp eax, ebx
	jge loc_443C10
	inc eax
	mov dword [dword_50B40C], eax
	jmp loc_443B8C

loc_443C10:
	lea ebx, [eax-1]
	mov dword [dword_50B40C], ebx
	jmp loc_443B8C

loc_443C1E:
	cmp dword [dword_4D96B0], 0
	jz loc_443C40
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	mov dword [dword_50B408], edx
	jmp loc_443B8C

loc_443C40:
	call sub_488074
	and eax, 7Fh
	mov dword [dword_50B408], eax
	jmp loc_443B8C

loc_443C52:
	lea ebx, [eax-1]
	mov dword dword_50B2F4[ecx], ebx
	jmp loc_443BAE

loc_443C60:
	mov eax, dword [dword_50B40C]
	jmp loc_443BC7

loc_443C6A:
	cmp byte [ebp-8], 0
	jz loc_443C94
	mov eax, edi

loc_443C72:
	mov ebx, [esi+1E8h]
	xor edx, edx
	push eax
	mov dl, [ebp-4]
	mov ebx, dword dword_50B2F4[ebx*4]
	mov eax, [ebp-10h]
	mov ecx, ebx
	call sub_444520
	jmp loc_442CA5

loc_443C94:
	mov eax, dword [dword_50B40C]
	jmp loc_443C72

loc_443C9B:
	call sub_488074
	mov edx, [esi+1E8h]
	and eax, 7Fh
	mov dword dword_50B33C[edx*4], eax
	jmp loc_442CA5

loc_443CB5:
	xor edx, edx
	mov [ebp-6Ch], edx
	jmp loc_442CBB

loc_443CBF:
	cmp dword [dword_4D96B0], 0
	jz loc_443CDD
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	mov ecx, edx
	jmp loc_442D05

loc_443CDD:
	call sub_488074
	mov ecx, eax
	and ecx, 7Fh
	jmp loc_442D05

loc_443CEC:
	mov edx, 6
	jmp loc_442D43

loc_443CF6:
	push 40h
	mov ebx, 7Fh
	xor edx, edx
	call sub_488074
	div ebx
	mov [ebp-5Ch], ecx
	mov ecx, 64h
	mov ebx, edx
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_443D32
	mov edx, 5
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-5Ch]
	jmp loc_442D4D

loc_443D32:
	mov edx, 6
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-5Ch]
	jmp loc_442D4D

loc_443D46:
	mov eax, [ebp-6Ch]
	xor dh, dh
	mov byte byte_4D5A0F[eax], dh
	jmp loc_442D5C

loc_443D56:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_442DCF

loc_443D69:
	call sub_488074
	and eax, 7Fh
	push eax
	mov ecx, 28h
	xor edx, edx
	call sub_488074
	div ecx
	add edx, 32h
	mov cl, [ebp-8]
	mov [ebp-54h], edx
	test cl, cl
	jz loc_443DB4
	mov eax, edi

loc_443D8F:
	mov ecx, 64h
	mov ebx, eax
	xor edx, edx
	call sub_488074
	div ecx
	mov edx, 1
	mov ecx, [ebp-54h]
	mov eax, dword [dword_50B44C]
	jmp loc_442DF2

loc_443DB4:
	call sub_488074
	and eax, 7Fh
	jmp loc_443D8F

loc_443DBE:
	cmp dword [dword_51222C], 0
	jnz loc_442E34
	mov ebx, 0C002h
	jmp loc_442E39

loc_443DD5:
	cmp dword [dword_512228], 0
	jz loc_443DE8

loc_443DDE:
	mov ebx, 0C002h
	jmp loc_442E39

loc_443DE8:
	cmp dword [dword_51222C], 0
	jnz loc_443DDE
	mov ebx, 3FFEh
	jmp loc_442E39

loc_443DFB:
	cmp dword [esi+288h], 0
	jnz loc_443E45
	mov eax, dword [dword_512228]
	test eax, eax
	jz loc_443E3A

loc_443E0D:
	mov eax, 7Fh

loc_443E12:
	mov ebx, eax

loc_443E14:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov al, [ebp-8]
	add ecx, 40h
	test al, al
	jz loc_442E58
	jmp loc_442E56

loc_443E3A:
	cmp dword [dword_51222C], 0
	jnz loc_443E0D
	jmp loc_443E12

loc_443E45:
	cmp dword [dword_512228], 0
	jz loc_443E52

loc_443E4E:
	xor ebx, ebx
	jmp loc_443E14

loc_443E52:
	cmp dword [dword_51222C], 0
	jnz loc_443E4E
	mov ebx, 7Fh
	jmp loc_443E14

loc_443E62:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_442ECD

loc_443E75:
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dl, [ebp-8]
	add ecx, 40h
	test dl, dl
	jz loc_443EA6
	mov ebx, edi
	mov edx, 3
	mov eax, dword [dword_50B44C]
	jmp loc_442EDB

loc_443EA6:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	mov edx, 3
	mov eax, dword [dword_50B44C]
	jmp loc_442EDB

loc_443EBF:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_442F49

loc_443ED2:
	mov edx, 2
	jmp loc_442F67

loc_443EDC:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov cl, [ebp-8]
	add ebx, 40h
	test cl, cl
	jz loc_443F25
	mov eax, edi

loc_443EFB:
	mov ecx, 64h
	mov [ebp-4Ch], eax
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_443F2F
	mov edx, 1
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-4Ch]
	jmp loc_442F6F

loc_443F25:
	call sub_488074
	and eax, 7Fh
	jmp loc_443EFB

loc_443F2F:
	mov edx, 2
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-4Ch]
	jmp loc_442F6F

loc_443F43:
	cmp dword [esi+228h], 708h
	jg loc_442F9A
	jmp loc_443007

loc_443F58:
	cmp dword [dword_51222C], 0
	jnz loc_442FD4
	mov ebx, 0C002h
	jmp loc_442FD9

loc_443F6F:
	cmp dword [dword_512228], 0
	jz loc_443F82

loc_443F78:
	mov ebx, 0C002h
	jmp loc_442FD9

loc_443F82:
	cmp dword [dword_51222C], 0
	jnz loc_443F78
	jmp loc_442FD4

loc_443F90:
	cmp dword [esi+288h], 0
	jnz loc_443FDA
	cmp dword [dword_512228], 0
	jz loc_443FCF

loc_443FA2:
	mov eax, 7Fh

loc_443FA7:
	mov ebx, eax
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov al, [ebp-8]
	add ecx, 40h
	test al, al
	jz loc_442FF8
	jmp loc_442FF6

loc_443FCF:
	mov eax, dword [dword_51222C]
	test eax, eax
	jnz loc_443FA2
	jmp loc_443FA7

loc_443FDA:
	cmp dword [dword_512228], 0
	jz loc_443FE7

loc_443FE3:
	xor eax, eax
	jmp loc_443FA7

loc_443FE7:
	cmp dword [dword_51222C], 0
	jnz loc_443FE3
	jmp loc_443FA2

loc_443FF2:
	mov eax, 532h
	sub eax, edx
	jmp loc_44305D

loc_443FFE:
	xor ecx, eax
	jmp loc_443083

loc_444005:
	cmp dword [dword_4D96B0], 0
	jz loc_444023
	mov ebx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ebx
	mov ebx, edx
	jmp loc_44308F

loc_444023:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	jmp loc_44308F

loc_444032:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_44310D

loc_444045:
	mov edx, 2
	jmp loc_44312C

loc_44404F:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ebx, eax
	and ebx, 3Fh
	mov cl, [ebp-8]
	add ebx, 40h
	test cl, cl
	jz loc_444098
	mov eax, edi

loc_44406E:
	mov ecx, 64h
	mov [ebp-68h], eax
	xor edx, edx
	call sub_488074
	div ecx
	cmp edx, 32h
	jbe loc_4440A2
	mov edx, 1
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-68h]
	jmp loc_443136

loc_444098:
	call sub_488074
	and eax, 7Fh
	jmp loc_44406E

loc_4440A2:
	mov edx, 2
	mov eax, dword [dword_50B44C]
	mov ecx, ebx
	mov ebx, [ebp-68h]
	jmp loc_443136

loc_4440B6:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_443196

loc_4440C9:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dh, [ebp-8]
	add ecx, 40h
	test dh, dh
	jz loc_4440F2
	mov ebx, edi
	mov eax, dword [dword_50B44C]
	jmp loc_44319F

loc_4440F2:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	mov eax, dword [dword_50B44C]
	jmp loc_44319F

loc_444106:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_443210

loc_444119:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov al, [ebp-8]
	add ecx, 40h
	test al, al
	jz loc_444147
	mov ebx, edi
	mov edx, 3
	mov eax, dword [dword_50B44C]
	jmp loc_44321E

loc_444147:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	mov edx, 3
	mov eax, dword [dword_50B44C]
	jmp loc_44321E

loc_444160:
	cmp dword [dword_51222C], 0
	jnz loc_443284
	mov ebx, 0C002h
	jmp loc_443289

loc_444177:
	cmp dword [dword_512228], 0
	jz loc_44418A

loc_444180:
	mov ebx, 0C002h
	jmp loc_443289

loc_44418A:
	cmp dword [dword_51222C], 0
	jnz loc_444180
	mov ebx, 3FFEh
	jmp loc_443289

loc_44419D:
	cmp dword [esi+288h], 0
	jnz loc_4441E6
	mov ebx, dword [dword_512228]
	test ebx, ebx
	jz loc_4441DB

loc_4441B0:
	mov ebx, 7Fh

loc_4441B5:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dl, [ebp-8]
	add ecx, 40h
	test dl, dl
	jz loc_4432A8
	jmp loc_4432A6

loc_4441DB:
	cmp dword [dword_51222C], 0
	jnz loc_4441B0
	jmp loc_4441B5

loc_4441E6:
	cmp dword [dword_512228], 0
	jz loc_4441F5

loc_4441EF:
	xor eax, eax
	mov ebx, eax
	jmp loc_4441B5

loc_4441F5:
	cmp dword [dword_51222C], 0
	jnz loc_4441EF
	mov eax, 7Fh
	mov ebx, eax
	jmp loc_4441B5

loc_444207:
	mov ecx, 0FFFFh
	xor edx, edx
	call sub_488074
	div ecx
	jmp loc_443326

loc_44421A:
	call sub_488074
	and eax, 3Fh
	add eax, 40h
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov bl, [ebp-8]
	add ecx, 40h
	test bl, bl
	jz loc_444250
	mov ebx, edi
	call sub_488074
	mov edx, eax
	mov eax, dword [dword_50B44C]
	and edx, 1
	jmp loc_443340

loc_444250:
	call sub_488074
	mov ebx, eax
	and ebx, 7Fh
	call sub_488074
	mov edx, eax
	mov eax, dword [dword_50B44C]
	and edx, 1
	jmp loc_443340

loc_44426E:
	cmp dword [dword_51222C], 0
	jnz loc_4433A6
	mov eax, 0C002h
	jmp loc_4433AB

loc_444285:
	cmp dword [dword_512228], 0
	jz loc_444298

loc_44428E:
	mov eax, 0C002h
	jmp loc_4433AB

loc_444298:
	cmp dword [dword_51222C], 0
	jnz loc_44428E
	jmp loc_4433A6

loc_4442A6:
	cmp dword [esi+288h], 0
	jnz loc_4442F0
	cmp dword [dword_512228], 0
	jz loc_4442E3

loc_4442B8:
	mov ebx, 7Fh

loc_4442BD:
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov al, [ebp-8]
	add ecx, 40h
	test al, al
	jz loc_4433CC
	jmp loc_4433CA

loc_4442E3:
	cmp dword [dword_51222C], 0
	jnz loc_4442B8
	xor ebx, ebx
	jmp loc_4442BD

loc_4442F0:
	cmp dword [dword_512228], 0
	jz loc_4442FF

loc_4442F9:
	xor eax, eax
	mov ebx, eax
	jmp loc_4442BD

loc_4442FF:
	cmp dword [dword_51222C], 0
	jnz loc_4442F9
	mov eax, 7Fh
	mov ebx, eax
	jmp loc_4442BD

loc_444311:
	cmp dword [dword_51222C], 0
	jnz loc_44343C
	mov eax, 3FFEh
	jmp loc_443441

loc_444328:
	cmp dword [dword_512228], 0
	jz loc_44433B

loc_444331:
	mov eax, 3FFEh
	jmp loc_443441

loc_44433B:
	cmp dword [dword_51222C], 0
	jnz loc_444331
	jmp loc_44343C

loc_444349:
	cmp dword [esi+288h], 0
	jnz loc_444395
	cmp dword [dword_512228], 0
	jz loc_444385

loc_44435B:
	xor eax, eax

loc_44435D:
	mov ebx, eax
	call sub_488074
	and eax, 7Fh
	push eax
	call sub_488074
	mov ecx, eax
	and ecx, 3Fh
	mov dl, [ebp-8]
	add ecx, 40h
	test dl, dl
	jz loc_443462
	jmp loc_443460

loc_444385:
	cmp dword [dword_51222C], 0
	jnz loc_44435B
	mov eax, 7Fh
	jmp loc_44435D

loc_444395:
	cmp dword [dword_512228], 0
	jz loc_4443A5

loc_44439E:
	mov eax, 7Fh
	jmp loc_44435D

loc_4443A5:
	cmp dword [dword_51222C], 0
	jnz loc_44439E
	jmp loc_44435B

loc_4443B0:
	cmp ebx, 23h
	jge loc_4443BF
	mov ebx, 3
	jmp loc_4434A7

loc_4443BF:
	mov ebx, 6
	jmp loc_4434A7

loc_4443C9:
	sub edx, edi
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	jmp loc_4434E1

loc_4443DD:
	mov edi, 40h
	jmp loc_44354F

loc_4443E7:
	mov edi, 7Fh
	jmp loc_4435BA

loc_4443F1:
	mov edi, 40h
	jmp loc_4435BA

loc_4443FB:
	mov edx, [ebp-2Ch]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, dword [dword_50B47C]
	sar eax, cl
	sar edx, 1
	add edx, eax
	mov eax, dword [dword_50B284]
	call sub_48999C
	mov edx, [ebp-28h]
	mov eax, dword [dword_50B284]
	call sub_49E0F4
	mov eax, dword [dword_50B284]
	mov edx, edi
	call sub_49E200
	mov edx, [ebp-34h]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, dword [dword_50B47C]
	sar eax, cl
	sar edx, 1
	add edx, eax
	mov eax, dword [dword_50B234]
	call sub_48999C
	mov edx, [ebp-18h]
	mov eax, dword [dword_50B234]
	call sub_49E0F4
	mov eax, dword [dword_50B234]
	mov edx, edi
	call sub_49E200
	mov edx, [ebp-30h]
	imul edx, dword [dword_4D5A30]
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_50B47C], eax
	mov cl, bl
	mov edx, eax
	sar eax, 1
	sar edx, cl
	add edx, eax
	mov eax, dword [dword_50B244]
	call sub_48999C
	mov edx, [ebp-18h]
	mov eax, dword [dword_50B244]
	call sub_49E0F4
	mov eax, dword [dword_50B244]
	mov edx, edi
	call sub_49E200
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret
;sub_442710 endp

off_4444F0: dd loc_44461B
	dd loc_444639 ; jump table for switch statement
	dd loc_444625
	dd loc_444639
	dd loc_444639
	dd loc_444639
	dd loc_444639
	dd loc_444639
	dd loc_444639
	dd loc_444639
	dd loc_44462F
	dd loc_44462F

sub_444520: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, [esp+14h]
	mov esi, eax
	mov ebp, edx
	mov edx, ecx
	test ebx, ebx
	jl loc_4445D4

loc_444538:
	cmp ebx, 7Fh
	jle loc_444542
	mov ebx, 7Fh

loc_444542:
	test edx, edx
	jl loc_4445DB

loc_44454A:
	cmp edx, 7Fh
	jle loc_444554
	mov edx, 7Fh

loc_444554:
	cmp esi, 0Eh
	jnz loc_4445E2

loc_44455D:
	mov eax, dword [dword_50B44C]

loc_444562:
	mov [esp], eax
	cmp esi, 14h
	jz loc_44465A
	cmp esi, 0Fh
	jz loc_44465A
	cmp esi, 16h
	jz loc_44465A
	lea ecx, 0[esi*8]
	cmp ebp, dword dword_50B238[ecx]
	jz loc_44468F
	mov eax, dword dword_50B234[ecx]
	cmp eax, 0FFFFFFFFh
	jz loc_4445AE
	cmp esi, 3
	jle loc_4445AE
	call sub_489840
	dec dword [dword_4D5A40]

loc_4445AE:
	mov eax, [esp]
	push ebx
	mov ecx, edx
	mov ebx, edi
	mov edx, ebp
	call sub_442280
	mov dword dword_50B234[esi*8], eax
	mov dword dword_50B238[esi*8], ebp
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4445D4:
	xor ebx, ebx
	jmp loc_444538

loc_4445DB:
	xor edx, edx
	jmp loc_44454A

loc_4445E2:
	cmp esi, 0Fh
	jz loc_44455D
	cmp esi, 12h
	jz loc_44455D
	cmp esi, 15h
	jz loc_44455D
	cmp esi, 16h
	jz loc_44455D
	cmp esi, 17h
	jz loc_44455D
	cmp ebp, 0Bh ; switch 12 cases
	ja loc_444639 ; jumptable 00444614 default case
	jmp off_4444F0[ebp*4] ; switch jump

loc_44461B:
	mov eax, dword [dword_50B41C] ; jumptable 00444614 case 0
	jmp loc_444562

loc_444625:
	mov eax, dword [dword_50B410] ; jumptable 00444614 case 2
	jmp loc_444562

loc_44462F:
	mov eax, dword [dword_50B428] ; jumptable 00444614 cases 10,11
	jmp loc_444562

loc_444639:
	mov al, byte byte_4D59A8[esi*4] ; jumptable 00444614 default case
	and eax, 0FFh
	lea ecx, 0[eax*4]
	sub ecx, eax
	mov eax, dword dword_50B410[ecx*4]
	jmp loc_444562

loc_44465A:
	push 40h
	mov eax, [esp+4]
	mov ecx, edx
	mov ebx, edi
	mov edx, ebp
	call sub_442280
	mov ebx, dword [dword_4D5A40]
	mov dword dword_50B234[esi*8], eax
	dec ebx
	mov dword dword_50B238[esi*8], ebp
	mov dword [dword_4D5A40], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_44468F:
	imul edx, dword [dword_4D5A30]
	mov ebp, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	mov edx, eax
	mov dword [dword_50B47C], eax
	sar edx, 1
	mov eax, dword dword_50B234[ecx]
	call sub_48999C
	mov edx, ebx
	mov eax, dword dword_50B234[ecx]
	call sub_49E0F4
	cmp dword [dword_4D96B0], 0
	jz loc_444704
	mov ebx, dword [dword_4D5A44]
	test ebx, ebx
	jz loc_4446EE
	mov edx, edi
	mov eax, dword dword_50B234[ecx]
	xor ebx, ebx
	call sub_49E130
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4446EE:
	mov eax, dword dword_50B234[ecx]
	xor edx, edx
	call sub_49E130
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_444704:
	cmp dword [dword_51222C], 0
	jz loc_444713
	mov eax, ebp
	sub eax, edi
	mov edi, eax

loc_444713:
	cmp edi, 7Fh
	jle loc_444744
	mov edi, 7Fh

loc_44471D:
	mov ecx, dword [dword_4D5A44]
	lea eax, 0[esi*8]
	test ecx, ecx
	jz loc_44474C
	mov edx, edi
	mov eax, dword dword_50B234[eax]
	call sub_49E200
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_444744:
	test edi, edi
	jge loc_44471D
	xor edi, edi
	jmp loc_44471D

loc_44474C:
	mov edx, 40h
	mov eax, dword dword_50B234[eax]
	call sub_49E200
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_444520 endp

sub_444770: ;SUBROUTINE
	push esi
	push edi
	mov edi, [esp+10h]
	mov esi, eax
	cmp dword [dword_512208], 1
	jnz loc_4447B9
	mov eax, dword [dword_4D96B0]
	test eax, eax
	jz loc_4447AD
	cmp edi, 20h
	jnz loc_4447A6
	mov eax, 0C002h

loc_444794:
	jnz loc_444799
	add esi, 7

loc_444799:
	push eax
	mov eax, esi
	call sub_444520
	pop edi
	pop esi
	ret 8

loc_4447A6:
	mov eax, 3FFEh
	jmp loc_444794

loc_4447AD:
	cmp edi, 20h
	jz loc_444794
	mov eax, 7Fh
	jmp loc_444794

loc_4447B9:
	mov eax, [esp+0Ch]
	push eax
	mov eax, esi
	call sub_444520
	pop edi
	pop esi
	ret 8
;sub_444770 endp

sub_4447D0: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	cmp dword [dword_4D5A1C], 0
	jz loc_4447F3
	cmp eax, 0FFFFFFFFh
	jz loc_4447F3
	lea ecx, 0[eax*8]
	mov ebx, dword dword_50B234[ecx]
	cmp ebx, 0FFFFFFFFh
	jnz loc_4447F7

loc_4447F3:
	pop ebp
	pop ecx
	pop ebx
	ret

loc_4447F7:
	push esi
	push edx
	mov edx, 5
	mov eax, ebx
	mov ebx, 0FFFFFFFFh
	mov esi, 0FFFFFFFFh
	call sub_486080
	mov ebp, dword [dword_4D5A40]
	mov dword dword_50B234[ecx], esi
	dec ebp
	mov dword dword_50B238[ecx], esi
	mov dword [dword_4D5A40], ebp
	pop edx
	pop esi
	pop ebp
	pop ecx
	pop ebx
	ret
;sub_4447D0 endp

sub_444830: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 14h
	mov esi, [ebp+10h]
	mov edi, eax
	mov [ebp-4], dl
	mov [ebp-8], bl
	cmp dword [dword_4D5A1C], 0
	jz loc_44494A
	add esi, esi
	cmp esi, 15F9h
	jge loc_444952
	mov eax, 15F9h
	sub eax, esi
	mov edx, eax
	shl edx, 7
	sub edx, eax
	mov ebx, 15F9h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov esi, eax

loc_44487A:
	mov ebx, dword [dword_512208]
	cmp ebx, 1
	jnz loc_444899
	mov eax, [ebp+14h]
	cmp dword [eax], 10000h
	jnz loc_444959
	xor eax, eax
	mov [ebp-10h], eax

loc_444899:
	mov edx, [ebp+14h]
	mov eax, [ebp+14h]
	mov edx, [edx]
	mov eax, [eax]
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	mov edx, [ebp+14h]
	add eax, 40h
	mov edx, [edx+4]
	call sub_442250
	mov [ebp-0Ch], eax
	test edi, edi
	jl loc_444961
	test ecx, ecx
	jle loc_444B16
	mov ebx, [ebp-0Bh]
	mov edx, [ebp-7]
	mov eax, edi
	sar ebx, 18h
	sar edx, 18h
	call sub_444BF0
	mov [ebp-14h], eax
	mov ebx, ecx
	mov edx, eax
	mov eax, edi
	call sub_444F40
	mov ebx, eax
	cmp edi, 6
	jnz loc_444B25

loc_4448FB:
	mov edx, ecx
	shl edx, 7
	sub edx, ecx
	mov ecx, 0A0000h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 7Fh
	jle loc_444918
	mov eax, 7Fh

loc_444918:
	mov edx, esi
	imul edx, eax
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov esi, eax

loc_44492B:
	cmp dword [ebp-14h], 2Ch
	jnz loc_44493A
	sub ebx, 3Ch
	test ebx, ebx
	jge loc_44493A
	xor ebx, ebx

loc_44493A:
	mov ecx, [ebp-0Ch]
	mov edx, [ebp-14h]
	push ecx
	mov eax, edi
	mov ecx, esi
	call sub_444520

loc_44494A:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_444952:
	xor esi, esi
	jmp loc_44487A

loc_444959:
	mov [ebp-10h], ebx
	jmp loc_444899

loc_444961:
	mov edx, ecx
	shl edx, 7
	sub edx, ecx
	mov ecx, 0A0000h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 7Fh
	jle loc_44497E
	mov eax, 7Fh

loc_44497E:
	mov ebx, [ebp-0Bh]
	mov edx, [ebp-7]
	sar ebx, 18h
	sar edx, 18h
	mov ecx, eax
	call sub_444C90
	mov edx, eax
	cmp eax, 2
	jz loc_4449F3

loc_444998:
	cmp edx, 1Fh
	jnz loc_444A04
	mov edx, esi
	imul edx, ecx
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	lea edi, [eax+eax]
	cmp edi, ecx
	jle loc_4449B7
	mov edi, ecx

loc_4449B7:
	mov ebx, [ebp-0Ch]
	mov edx, 1Fh
	mov eax, 14h
	mov ecx, esi
	push ebx
	mov ebx, 40h
	mov esi, [ebp-0Ch]
	call sub_444520
	mov ebx, 40h
	mov edx, 23h
	push esi
	mov eax, 14h
	mov ecx, edi
	call sub_444520
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4449F3:
	xor eax, eax
	call sub_44B660
	test eax, eax
	jnz loc_44494A
	jmp loc_444998

loc_444A04:
	cmp edx, 4
	jz loc_444AA9
	cmp dword [dword_51221C], 7
	jnz loc_444AEF
	cmp byte [ebp-8], 0Ah
	jnz loc_444AEF
	cmp dword [dword_512208], 1
	jnz loc_444AD9
	cmp byte [byte_4D5A0F], 1
	jnz loc_444AC6
	cmp dword [ebp-10h], 0
	jnz loc_444AC6

loc_444A48:
	mov eax, [ebp-0Ch]
	push eax
	mov edi, 64h
	xor edx, edx
	call sub_488074
	div edi
	mov ebx, 40h
	mov ecx, esi
	cmp edx, 32h
	jbe loc_444B0C
	mov edx, 5

loc_444A6F:
	mov eax, 0Fh
	call sub_444520
	mov edx, [ebp-0Ch]
	mov ecx, 3
	push edx
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv ecx
	mov ebx, 40h
	mov edx, 1Dh
	mov ecx, eax
	mov eax, 14h
	call sub_444520
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_444AA9:
	mov ecx, [ebp-0Ch]
	mov ebx, 40h
	push ecx
	mov eax, 0Fh
	mov ecx, esi
	call sub_444520
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_444AC6:
	cmp byte [byte_4D5A10], 1
	jnz loc_444AD9
	cmp dword [ebp-10h], 1
	jz loc_444A48

loc_444AD9:
	cmp dword [dword_512208], 1
	jz loc_444AEF
	cmp byte [byte_4D5A0F], 1
	jz loc_444A48

loc_444AEF:
	mov edi, [ebp-0Ch]
	mov ebx, 40h
	push edi
	mov eax, 14h
	mov ecx, esi
	call sub_444520
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_444B0C:
	mov edx, 6
	jmp loc_444A6F

loc_444B16:
	mov eax, edi
	call sub_4447D0
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_444B25:
	cmp edi, 7
	jz loc_4448FB
	jmp loc_44492B
;sub_444830 endp

sub_444B40: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, edx
	cmp dword [dword_512208], 1
	jnz loc_444BA8
	mov ecx, dword [dword_4D96B0]
	mov bl, 1
	test ecx, ecx
	jz loc_444B99
	test eax, eax
	jz loc_444B92
	mov edi, 0A3E2h

loc_444B64:
	test esi, esi
	jl loc_444BAC
	mov ecx, 77h

loc_444B6D:
	test bl, bl
	jz loc_444BC9
	mov eax, edi

loc_444B73:
	push 40h
	mov edi, dword [dword_50B470]
	mov ebx, eax
	mov edx, esi
	mov eax, edi
	call sub_442280
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_444B92:
	mov edi, 3FFEh
	jmp loc_444B64

loc_444B99:
	test eax, eax
	jz loc_444BA1
	xor edi, edi
	jmp loc_444B64

loc_444BA1:
	mov edi, 7Fh
	jmp loc_444B64

loc_444BA8:
	xor bl, bl
	jmp loc_444B64

loc_444BAC:
	call sub_488074
	mov ecx, 1Eh
	mov esi, eax
	xor edx, edx
	call sub_488074
	div ecx
	and esi, 3
	lea ecx, [edx+5Ah]
	jmp loc_444B6D

loc_444BC9:
	cmp dword [dword_4D96B0], 0
	jz loc_444BE4
	mov edi, 0FFFFh
	xor edx, edx
	call sub_488074
	div edi
	mov eax, edx
	jmp loc_444B73

loc_444BE4:
	call sub_488074
	and eax, 7Fh
	jmp loc_444B73
;sub_444B40 endp

sub_444BF0: ;SUBROUTINE
	mov eax, 2Ch
	cmp dl, 2
	jnz loc_444C03
	test bl, bl
	jnz loc_444C03
	mov eax, 2Ah

loc_444C03:
	cmp dl, 2
	jnz loc_444C12
	cmp bl, 8
	jnz loc_444C12
	mov eax, 2Bh

loc_444C12:
	cmp dl, 2
	jnz loc_444C21
	cmp bl, 9
	jnz loc_444C21
	mov eax, 2Ch

loc_444C21:
	cmp dl, 1
	jnz loc_444C2F
	test bl, bl
	jnz loc_444C4E

loc_444C2A:
	mov eax, 28h

loc_444C2F:
	cmp dl, 2
	jnz loc_444C3E
	cmp bl, 3
	jnz loc_444C3E
	mov eax, 29h

loc_444C3E:
	cmp dl, 1
	jnz locret_444C4D
	cmp bl, 9
	jnz locret_444C4D
	mov eax, 2Ch

locret_444C4D:
	ret

loc_444C4E:
	cmp bl, 3
	jz loc_444C2A
	cmp bl, 8
	jz loc_444C2A
	jmp loc_444C2F
;sub_444BF0 endp

off_444C60: dd loc_444D58
	dd loc_444D62 ; jump table for switch statement
	dd loc_444D1C
	dd loc_444D6C
off_444C70: dd loc_444DC3
	dd loc_444CA2 ; jump table for switch statement
	dd loc_444EF5
	dd loc_444CA2
	dd loc_444EC7
	dd loc_444CA2
	dd loc_444CA2
	dd loc_444EDE

sub_444C90: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, 1Dh
	cmp dl, 7
	jnz loc_444CC4
	mov eax, 2

loc_444CA2:
	cmp bl, 0Ah ; jumptable 00444E03 default case
	jnz loc_444F0C

loc_444CAB:
	cmp dword [dword_51221C], 8
	jnz loc_444F27
	mov eax, 4

loc_444CBD:
	mov dword [dword_4D5BE4], eax
	pop ecx
	ret

loc_444CC4:
	cmp dl, 2
	jnz loc_444CD4
	test bl, bl
	jnz loc_444CD4
	mov eax, 1Fh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444CD4:
	cmp dl, 1
	jnz loc_444CE5
	cmp bl, 0Ah
	jnz loc_444CE5
	mov eax, 1Eh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444CE5:
	cmp dl, 1
	jnz loc_444CF6
	cmp bl, 0Bh
	jnz loc_444CF6
	mov eax, 1Dh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444CF6:
	cmp dl, 1
	jnz loc_444D26
	cmp bl, 4
	jnz loc_444D26
	cmp ecx, 6Eh
	jle loc_444D0C
	mov eax, 21h
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D0C:
	call sub_488074
	test al, dl
	jz loc_444D1C ; jumptable 00444D51 case 2
	mov eax, 1Eh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D1C:
	mov eax, 20h ; jumptable 00444D51 case 2
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D26:
	cmp dl, 1
	jnz loc_444D30
	cmp bl, 0Ch
	jz loc_444D44

loc_444D30:
	cmp dl, 1
	jnz loc_444D76
	cmp bl, 5
	jnz loc_444D76
	mov eax, 1Dh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D44:
	call sub_488074
	and eax, 3
	cmp eax, 3 ; switch 4 cases
	ja loc_444D58 ; jumptable 00444D51 default case
	jmp off_444C60[eax*4] ; switch jump

loc_444D58:
	mov eax, 23h ; jumptable 00444D51 default case
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D62:
	mov eax, 22h ; jumptable 00444D51 case 1
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D6C:
	mov eax, 25h ; jumptable 00444D51 case 3
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444D76:
	cmp dl, 1
	jnz loc_444DD2
	test bl, bl
	jnz loc_444DCD

loc_444D7F:
	cmp ecx, 50h
	jle loc_444E0A
	mov eax, 21h

loc_444D8D:
	mov ecx, dword [dword_4D5BE4]
	cmp eax, ecx
	jnz loc_444CA2 ; jumptable 00444E03 default case
	cmp ecx, 21h
	jz loc_444CA2 ; jumptable 00444E03 default case
	cmp ecx, 20h
	jnb loc_444E42
	cmp ecx, 1Dh
	jnz loc_444CA2 ; jumptable 00444E03 default case
	call sub_488074
	test al, 1
	jz loc_444D1C ; jumptable 00444D51 case 2

loc_444DC3:
	mov eax, 22h ; jumptable 00444E03 case 30
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444DCD:
	cmp bl, 3
	jz loc_444D7F

loc_444DD2:
	cmp ecx, 5Ah
	jle loc_444E7B
	mov eax, 21h

loc_444DE0:
	mov edx, dword [dword_4D5BE4]
	cmp eax, edx
	jnz loc_444CA2 ; jumptable 00444E03 default case
	cmp edx, 21h
	jz loc_444CA2 ; jumptable 00444E03 default case
	lea ecx, [edx-1Eh] ; switch 8 cases
	cmp ecx, 7
	ja loc_444CA2 ; jumptable 00444E03 default case
	jmp off_444C70[ecx*4] ; switch jump

loc_444E0A:
	jg loc_444E1B
	cmp ecx, 16h
	jle loc_444E1B
	mov eax, 22h
	jmp loc_444D8D

loc_444E1B:
	cmp ecx, 16h
	jg loc_444E2F
	cmp ecx, 10h
	jle loc_444E2F
	mov eax, 20h
	jmp loc_444D8D

loc_444E2F:
	cmp ecx, 10h
	jg loc_444D8D
	mov eax, 1Dh
	jmp loc_444D8D

loc_444E42:
	jbe loc_444E64
	cmp ecx, 22h
	jnz loc_444CA2 ; jumptable 00444E03 default case
	call sub_488074
	test al, 1
	jz loc_444D1C ; jumptable 00444D51 case 2
	mov eax, 1Dh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444E64:
	call sub_488074
	test al, 1
	jz loc_444DC3 ; jumptable 00444E03 case 30
	mov eax, 1Dh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444E7B:
	jg loc_444E8C
	cmp ecx, 46h
	jle loc_444E8C
	mov eax, 20h
	jmp loc_444DE0

loc_444E8C:
	cmp ecx, 46h
	jg loc_444EA0
	cmp ecx, 32h
	jle loc_444EA0
	mov eax, 25h
	jmp loc_444DE0

loc_444EA0:
	cmp ecx, 32h
	jg loc_444EB4
	cmp ecx, 19h
	jle loc_444EB4
	mov eax, 22h
	jmp loc_444DE0

loc_444EB4:
	cmp ecx, 19h
	jg loc_444DE0
	mov eax, 1Eh
	jmp loc_444DE0

loc_444EC7:
	call sub_488074 ; jumptable 00444E03 case 34
	test al, 1
	jz loc_444D6C ; jumptable 00444D51 case 3
	mov eax, 1Eh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444EDE:
	call sub_488074 ; jumptable 00444E03 case 37
	test al, 1
	jz loc_444DC3 ; jumptable 00444E03 case 30
	mov eax, 1Eh
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444EF5:
	call sub_488074 ; jumptable 00444E03 case 32
	test al, 1
	jz loc_444DC3 ; jumptable 00444E03 case 30
	mov eax, 25h
	jmp loc_444CA2 ; jumptable 00444E03 default case

loc_444F0C:
	cmp bl, 0Bh
	jz loc_444CAB
	cmp bl, 4
	jz loc_444CAB
	cmp bl, 0Ch
	jz loc_444CAB

loc_444F27:
	cmp eax, 2
	jnz loc_444CBD
	pop ecx
	ret
;sub_444C90 endp

sub_444F40: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, ebx
	cmp ecx, 6
	jnz loc_444F6B

loc_444F4A:
	mov ecx, eax
	shl ecx, 7
	sub ecx, eax
	mov ebx, 0A0000h
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	cmp eax, 7Fh
	jle loc_444F69
	mov eax, 7Fh

loc_444F69:
	pop ecx
	ret

loc_444F6B:
	cmp ecx, 7
	jz loc_444F4A
	cmp edx, dword dword_50B238[ecx*8]
	jz loc_444F9E
	mov edx, eax
	shl eax, 7
	sub eax, edx
	mov edx, eax
	mov ebx, 0A0000h
	sar edx, 1Fh
	idiv ebx
	cmp eax, 7Fh
	jle loc_444F96
	mov eax, 7Fh

loc_444F96:
	mov byte byte_4D5BCA[ecx], al
	pop ecx
	ret

loc_444F9E:
	xor eax, eax
	mov al, byte byte_4D5BCA[ecx]
	pop ecx
	ret
;sub_444F40 endp

sub_444FB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	cmp dword [dword_50B234], 0FFFFFFFFh
	jnz loc_445043
	cmp dword [dword_4D96B0], 0
	jz loc_4450FB
	cmp dword [dword_512208], 1
	jnz loc_4450F4
	mov esi, 0C000h

loc_444FE2:
	push 40h
	mov eax, dword [dword_50B410]
	mov ebx, esi
	xor ecx, ecx
	xor edx, edx
	mov ebp, 1
	call sub_442280
	xor edi, edi
	push 40h
	mov edx, 1
	mov dword [dword_50B234], eax
	mov ebx, esi
	xor ecx, ecx
	mov eax, dword [dword_50B410]
	mov dword [dword_50B238], edi
	call sub_442280
	push 40h
	mov dword [dword_50B244], eax
	mov ebx, esi
	xor ecx, ecx
	xor edx, edx
	mov eax, dword [dword_50B428]
	mov dword [dword_50B248], ebp
	call sub_442280
	mov dword [dword_50B284], eax
	mov dword [dword_50B288], edi

loc_445043:
	cmp dword [dword_512208], 1
	jnz loc_4450ED
	cmp dword [dword_50B23C], 0FFFFFFFFh
	jnz loc_4450ED
	cmp dword [dword_4D96B0], 0
	jnz loc_445115
	push 40h
	mov ebx, 7Fh

loc_445071:
	mov eax, dword [dword_50B41C]
	xor ecx, ecx
	xor edx, edx
	call sub_442280
	mov edi, dword [dword_4D96B0]
	xor esi, esi
	mov dword [dword_50B23C], eax
	mov dword [dword_50B240], esi
	test edi, edi
	jz loc_445121
	push 40h
	mov ebx, 3FFFh

loc_4450A1:
	mov edx, 1
	mov eax, dword [dword_50B41C]
	xor ecx, ecx
	call sub_442280
	mov ebp, 1
	mov dword [dword_50B24C], eax
	mov eax, dword [dword_4D96B0]
	mov dword [dword_50B250], ebp
	test eax, eax
	jz loc_44512D
	push 40h
	mov ebx, 3FFFh

loc_4450D2:
	mov eax, dword [dword_50B428]
	xor ecx, ecx
	xor edx, edx
	call sub_442280
	xor edx, edx
	mov dword [dword_50B28C], eax
	mov dword [dword_50B290], edx

loc_4450ED:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4450F4:
	xor esi, esi
	jmp loc_444FE2

loc_4450FB:
	cmp dword [dword_512208], 1
	jnz loc_44510B
	xor esi, esi
	jmp loc_444FE2

loc_44510B:
	mov esi, 40h
	jmp loc_444FE2

loc_445115:
	push 40h
	mov ebx, 3FFFh
	jmp loc_445071

loc_445121:
	push 40h
	mov ebx, 7Fh
	jmp loc_4450A1

loc_44512D:
	push 40h
	mov ebx, 7Fh
	jmp loc_4450D2
;sub_444FB0 endp

sub_445140: ;SUBROUTINE
	push edx
	mov edx, 0FFFFFFFFh
	xor eax, eax

loc_445148:
	add eax, 8
	mov dword dword_50B230[eax], edx
	mov dword dword_50B22C[eax], edx
	cmp eax, 0C0h
	jnz loc_445148
	pop edx
	ret
;sub_445140 endp

off_445160: dd loc_445388
	dd loc_44584F ; jump table for switch statement
	dd loc_445859
	dd loc_445863
	dd loc_44586D
	dd loc_445388
off_445178: dd loc_4453F0
	dd loc_445877 ; jump table for switch statement
	dd loc_445881
	dd loc_44588B
	dd loc_445895
	dd loc_4453F0
off_445190: dd loc_445498
	dd loc_44589F ; jump table for switch statement
	dd loc_4458D6
	dd loc_44590D
	dd loc_445944
	dd loc_445498
off_4451A8: dd loc_445516
	dd loc_44597B ; jump table for switch statement
	dd loc_4459B2
	dd loc_4459E9
	dd loc_445A20
	dd loc_445516

sub_4451C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 154h
	mov ecx, 0Fh
	lea edi, [esp+64h]
	mov esi, off_441F20
	rep movsd
	mov ecx, 0Fh
	lea edi, [esp+118h]
	mov esi, off_441F5C
	rep movsd
	mov ecx, 0Fh
	lea edi, [esp+0A0h]
	mov esi, off_441F98
	rep movsd
	mov ecx, 0Fh
	lea edi, [esp+0DCh]
	mov esi, off_441FD4
	mov edx, dword [dword_512208]
	rep movsd
	cmp edx, 1
	jnz loc_4456BA
	mov edx, dword [dword_512270]
	cmp edx, 0Fh
	jle loc_445605
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_44523B:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445253
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44523B

loc_445253:
	pop edi
	cmp edx, 2Bh
	jnz loc_4455B0
	mov esi, aStrex ; "strex"

loc_445262:
	mov edi, esp

loc_445264:
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44526D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445285
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44526D

loc_445285:
	pop edi
	mov eax, esp
	xor edx, edx
	call sub_4760F0
	mov edx, dword [dword_5122B0]
	cmp edx, 0Fh
	jle loc_44568A
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_4452A7:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4452BF
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4452A7

loc_4452BF:
	pop edi
	cmp edx, 2Bh
	jnz loc_445635
	mov esi, aStrex ; "strex"

loc_4452CE:
	mov edi, esp

loc_4452D0:
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4452D9:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4452F1
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4452D9

loc_4452F1:
	pop edi
	mov edx, 1
	mov eax, esp
	call sub_4760F0
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_445307:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44531F
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445307

loc_44531F:
	pop edi
	mov esi, aGen ; "Gen"
	mov edi, esp
	mov edx, 2
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445335:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44534D
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445335

loc_44534D:
	pop edi
	mov eax, esp
	mov edi, esp
	call sub_4760F0
	mov esi, dword [dword_5134A4]
	push edi

loc_44535E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445376
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44535E

loc_445376:
	pop edi
	mov eax, dword [dword_512234]
	cmp eax, 5 ; switch 6 cases
	ja loc_4453B1 ; jumptable 00445381 default case
	jmp off_445160[eax*4] ; switch jump

loc_445388:
	mov esi, aCnteng ; jumptable 00445381 cases 0,5

loc_44538D:
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445398:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4453B0
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445398

loc_4453B0:
	pop edi

loc_4453B1:
	mov edx, 3 ; jumptable 00445381 default case
	mov eax, esp
	mov edi, esp
	call sub_4760F0
	mov esi, dword [dword_5134A4]
	push edi

loc_4453C6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4453DE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4453C6

loc_4453DE:
	pop edi
	mov eax, dword [dword_512234]
	cmp eax, 5 ; switch 6 cases
	ja loc_445419 ; jumptable 004453E9 default case
	jmp off_445178[eax*4] ; switch jump

loc_4453F0:
	mov esi, aSpcheng ; jumptable 004453E9 cases 0,5

loc_4453F5:
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445400:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445418
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445400

loc_445418:
	pop edi

loc_445419:
	mov edx, 4 ; jumptable 004453E9 default case
	mov eax, esp
	call sub_4760F0
	mov ebx, dword [dword_51221C]
	push ebx
	mov esi, dword [dword_5134A4]
	push esi
	push aStramb02d ; "%stramb%02d"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	mov edx, 5
	mov eax, esp
	call sub_4760F0
	mov edx, dword [dword_51220C]
	shl edx, 6
	mov edx, dword dword_512270[edx]
	cmp edx, 0Fh
	jge loc_4454CF
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_44546E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445486
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44546E

loc_445486:
	pop edi
	mov eax, dword [dword_512234]
	cmp eax, 5 ; switch 6 cases
	ja loc_4454C3 ; jumptable 00445491 default case
	jmp off_445190[eax*4] ; switch jump

loc_445498:
	mov edi, esp ; jumptable 00445491 cases 0,5
	mov esi, [esp+edx*4+0DCh]

loc_4454A1:
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4454AA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4454C2
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4454AA

loc_4454C2:
	pop edi

loc_4454C3:
	mov edx, 6 ; jumptable 00445491 default case
	mov eax, esp
	call sub_4760F0

loc_4454CF:
	cmp dword [dword_512208], 1
	jnz loc_44554D
	mov edx, dword [dword_5122B0]
	cmp edx, 0Fh
	jge loc_44554D
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_4454EC:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445504
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4454EC

loc_445504:
	pop edi
	mov eax, dword [dword_512234]
	cmp eax, 5 ; switch 6 cases
	ja loc_445541 ; jumptable 0044550F default case
	jmp off_4451A8[eax*4] ; switch jump

loc_445516:
	mov edi, esp ; jumptable 0044550F cases 0,5
	mov esi, [esp+edx*4+0DCh]

loc_44551F:
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445528:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445540
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445528

loc_445540:
	pop edi

loc_445541:
	mov edx, 7 ; jumptable 0044550F default case
	mov eax, esp
	call sub_4760F0

loc_44554D:
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_445556:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44556E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445556

loc_44556E:
	pop edi
	mov esi, aRain ; "rain"
	mov edi, esp
	mov edx, 8
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445584:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44559C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445584

loc_44559C:
	pop edi
	mov eax, esp
	call sub_4760F0
	add esp, 154h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4455B0:
	cmp edx, 28h
	jge loc_4455E7
	cmp edx, 12h
	jz loc_4455F1
	cmp edx, 1Dh
	jz loc_4455F1
	cmp edx, 24h
	jz loc_4455F1
	cmp edx, 14h
	jz loc_4455DD
	cmp edx, 25h
	jz loc_4455DD
	cmp edx, 15h
	jz loc_4455DD
	cmp edx, 1Fh
	jz loc_4455DD
	cmp edx, 21h
	jnz loc_4455FB

loc_4455DD:
	mov esi, aStruck ; "struck"
	jmp loc_445262

loc_4455E7:
	mov esi, aScrate ; "scrate"
	jmp loc_445262

loc_4455F1:
	mov esi, aSputt ; "sputt"
	jmp loc_445262

loc_4455FB:
	mov esi, aSlimo ; "slimo"
	jmp loc_445262

loc_445605:
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_44560E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445626
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44560E

loc_445626:
	pop edi
	mov edi, esp
	mov esi, [esp+edx*4+0A0h]
	jmp loc_445264

loc_445635:
	cmp edx, 28h
	jge loc_44566C
	cmp edx, 12h
	jz loc_445676
	cmp edx, 1Dh
	jz loc_445676
	cmp edx, 24h
	jz loc_445676
	cmp edx, 14h
	jz loc_445662
	cmp edx, 25h
	jz loc_445662
	cmp edx, 15h
	jz loc_445662
	cmp edx, 1Fh
	jz loc_445662
	cmp edx, 21h
	jnz loc_445680

loc_445662:
	mov esi, aStruck ; "struck"
	jmp loc_4452CE

loc_44566C:
	mov esi, aScrate ; "scrate"
	jmp loc_4452CE

loc_445676:
	mov esi, aSputt ; "sputt"
	jmp loc_4452CE

loc_445680:
	mov esi, aSlimo ; "slimo"
	jmp loc_4452CE

loc_44568A:
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_445693:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4456AB
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445693

loc_4456AB:
	pop edi
	mov edi, esp
	mov esi, [esp+edx*4+0A0h]
	jmp loc_4452D0

loc_4456BA:
	mov edx, dword [dword_51220C]
	shl edx, 6
	mov edx, dword dword_512270[edx]
	cmp edx, 0Fh
	jle loc_4457D6
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_4456DB:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4456F3
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4456DB

loc_4456F3:
	pop edi
	cmp edx, 2Bh
	jnz loc_445781
	mov esi, aTrex ; "trex"

loc_445702:
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44570D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445725
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44570D

loc_445725:
	pop edi

loc_445726:
	mov eax, esp
	xor edx, edx
	call sub_4760F0
	cmp dword [dword_51220C], 0
	jnz loc_445848
	mov eax, 1

loc_445741:
	shl eax, 6
	mov edx, dword dword_512270[eax]
	cmp edx, 0Fh
	jl loc_445751
	xor edx, edx

loc_445751:
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_44575A:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445772
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44575A

loc_445772:
	pop edi
	mov edi, esp
	mov esi, [esp+edx*4+118h]
	jmp loc_4452D0

loc_445781:
	cmp edx, 28h
	jge loc_4457B8
	cmp edx, 12h
	jz loc_4457C2
	cmp edx, 1Dh
	jz loc_4457C2
	cmp edx, 24h
	jz loc_4457C2
	cmp edx, 14h
	jz loc_4457AE
	cmp edx, 25h
	jz loc_4457AE
	cmp edx, 15h
	jz loc_4457AE
	cmp edx, 1Fh
	jz loc_4457AE
	cmp edx, 21h
	jnz loc_4457CC

loc_4457AE:
	mov esi, aTruck ; "truck"
	jmp loc_445702

loc_4457B8:
	mov esi, aCrate ; "crate"
	jmp loc_445702

loc_4457C2:
	mov esi, aPutt ; "putt"
	jmp loc_445702

loc_4457CC:
	mov esi, aLimo ; "limo"
	jmp loc_445702

loc_4457D6:
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_4457DF:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4457F7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4457DF

loc_4457F7:
	pop edi
	mov edi, esp
	mov esi, [esp+edx*4+64h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445807:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44581F
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445807

loc_44581F:
	pop edi
	mov edi, dword_50B3FC
	mov esi, [esp+edx*4+64h]
	push edi

loc_44582A:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445842
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44582A

loc_445842:
	pop edi
	jmp loc_445726

loc_445848:
	xor eax, eax
	jmp loc_445741

loc_44584F:
	mov esi, aCntger ; jumptable 00445381 case 1
	jmp loc_44538D

loc_445859:
	mov esi, aCntfrn ; jumptable 00445381 case 2
	jmp loc_44538D

loc_445863:
	mov esi, aCntspn ; jumptable 00445381 case 3
	jmp loc_44538D

loc_44586D:
	mov esi, aCntitl ; jumptable 00445381 case 4
	jmp loc_44538D

loc_445877:
	mov esi, aSpchger ; jumptable 004453E9 case 1
	jmp loc_4453F5

loc_445881:
	mov esi, aSpchfrn ; jumptable 004453E9 case 2
	jmp loc_4453F5

loc_44588B:
	mov esi, aSpchspn ; jumptable 004453E9 case 3
	jmp loc_4453F5

loc_445895:
	mov esi, aSpchitl ; jumptable 004453E9 case 4
	jmp loc_4453F5

loc_44589F:
	mov edi, esp ; jumptable 00445491 case 1
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4458B1:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4458C9
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4458B1

loc_4458C9:
	pop edi
	mov esi, aG ; "g"
	mov edi, esp
	jmp loc_4454A1

loc_4458D6:
	mov edi, esp ; jumptable 00445491 case 2
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4458E8:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445900
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4458E8

loc_445900:
	pop edi
	mov esi, asc_4CBDB4 ; "f"
	mov edi, esp
	jmp loc_4454A1

loc_44590D:
	mov edi, esp ; jumptable 00445491 case 3
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44591F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445937
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44591F

loc_445937:
	pop edi
	mov esi, aS_1 ; "s"
	mov edi, esp
	jmp loc_4454A1

loc_445944:
	mov edi, esp ; jumptable 00445491 case 4
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445956:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44596E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445956

loc_44596E:
	pop edi
	mov esi, aI ; "i"
	mov edi, esp
	jmp loc_4454A1

loc_44597B:
	mov edi, esp ; jumptable 0044550F case 1
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44598D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4459A5
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44598D

loc_4459A5:
	pop edi
	mov esi, aG ; "g"
	mov edi, esp
	jmp loc_44551F

loc_4459B2:
	mov edi, esp ; jumptable 0044550F case 2
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4459C4:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4459DC
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4459C4

loc_4459DC:
	pop edi
	mov esi, asc_4CBDB4 ; "f"
	mov edi, esp
	jmp loc_44551F

loc_4459E9:
	mov edi, esp ; jumptable 0044550F case 3
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4459FB:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445A13
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4459FB

loc_445A13:
	pop edi
	mov esi, aS_1 ; "s"
	mov edi, esp
	jmp loc_44551F

loc_445A20:
	mov edi, esp ; jumptable 0044550F case 4
	mov esi, [esp+edx*4+0DCh]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445A32:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445A4A
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445A32

loc_445A4A:
	pop edi
	mov esi, aI ; "i"
	mov edi, esp
	jmp loc_44551F
;sub_4451C0 endp

sub_445A60: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	sub esp, 64h
	mov edi, esp
	mov esi, dword [dword_5134A4]
	push edi

loc_445A70:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445A88
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445A70

loc_445A88:
	pop edi
	mov esi, aFesfx ; "fesfx"
	mov edi, esp
	xor edx, edx
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_445A9B:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_445AB3
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_445A9B

loc_445AB3:
	pop edi
	mov eax, esp
	call sub_4760F0
	add esp, 64h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_445A60 endp

off_445AD0: dd loc_445DD5
	dd loc_4460AF ; jump table for switch statement
	dd loc_4460C3
	dd loc_4460D7
	dd loc_4460E4
	dd loc_4460E4
	dd loc_4460E4
	dd loc_4460E4
off_445AF0: dd loc_4460A8
	dd loc_446101 ; jump table for switch statement
	dd loc_446115
	dd loc_446129
	dd loc_445DE2
	dd loc_445DE2
	dd loc_445DE2
	dd loc_446132

sub_445B10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0Ch
	mov esi, eax
	mov al, [eax+1E8h]
	mov [ebp-4], al
	xor eax, eax
	mov al, [ebp-4]
	mov edi, dword dword_511B48[eax*4]
	mov edx, [esi+24h]
	mov edi, [edi+278h]
	test edx, edx
	jz loc_445ECC
	mov al, [edx+3]
	and eax, 0FFh

loc_445B4B:
	mov dl, al
	mov eax, [esi+1E8h]
	mov ecx, dword [dword_512208]
	mov byte byte_50B38C[eax], dl
	cmp ecx, 1
	jz loc_445ED3
	mov eax, dword [dword_51220C]

loc_445B6D:
	shl eax, 6
	mov eax, dword dword_512270[eax]
	cmp dword [dword_512214], 0
	jnz loc_445C24
	xor edx, edx
	mov dl, [ebp-4]
	mov dl, byte byte_50B3B4[edx]
	and edx, 0FFh
	mov ecx, [esi+1F8h]
	cmp edx, ecx
	jz loc_445EEA
	cmp ecx, dword [dword_5121FC]
	jnz loc_445EEA
	cmp eax, 0Fh
	jge loc_445EEA
	cmp edi, 1
	jnz loc_445EEA
	cmp dword [dword_512268], 0
	jz loc_445EDD

loc_445BCD:
	cmp dword [dword_512208], 1
	jnz loc_445F88
	mov dl, [ebp-4]

loc_445BDD:
	mov ecx, 7Fh
	push 40h
	mov ebx, dword [dword_4D96B0]
	mov [ebp-8], ecx
	test ebx, ebx
	jz loc_445F8F
	xor ebx, ebx

loc_445BF7:
	call sub_488074
	and eax, 1
	mov [ebp-0Ch], eax
	xor eax, eax
	mov al, dl
	lea edx, [eax+6]
	lea eax, 0[edx*4]
	sub eax, edx
	mov ecx, [ebp-8]
	mov edx, [ebp-0Ch]
	mov eax, dword dword_50B410[eax*4]
	call sub_442280

loc_445C24:
	mov eax, dword [dword_5121FC]
	mov edx, [esi+1F8h]
	dec eax
	cmp eax, edx
	jnz loc_445C7B
	xor eax, edx
	mov al, [ebp-4]
	xor edx, edx
	mov ecx, [esi+1F8h]
	mov dl, byte byte_50B3B4[eax]
	cmp edx, ecx
	jz loc_445C7B
	cmp byte byte_50B35C[eax], 0
	jnz loc_44604E
	mov ecx, 7Fh
	mov ebx, dword [dword_4D96B0]
	push 40h
	test ebx, ebx
	jz loc_446044
	xor ebx, ebx

loc_445C6F:
	mov eax, dword [dword_50B440]
	xor edx, edx
	call sub_442280

loc_445C7B:
	xor ebx, ebx
	mov bl, [ebp-4]
	cmp byte byte_50B35C[ebx], 0
	jz loc_445CA1
	mov eax, dword dword_50B394[ebx*4]
	call sub_486040
	test eax, eax
	jz loc_445CA1
	xor ch, ch
	mov byte byte_50B35C[ebx], ch

loc_445CA1:
	xor eax, eax
	mov al, [ebp-4]
	cmp byte byte_50B384[eax], 0
	jz loc_445CE7
	cmp byte byte_50B35C[eax], 0
	jnz loc_445CE7
	mov ecx, 7Fh
	mov eax, dword [dword_4D96B0]
	push 40h
	test eax, eax
	jz loc_44605A
	xor ebx, ebx

loc_445CCE:
	mov eax, dword [dword_50B440]
	xor edx, edx
	call sub_442280
	xor eax, eax
	mov al, [ebp-4]
	xor bl, bl
	mov byte byte_50B384[eax], bl

loc_445CE7:
	xor eax, eax
	mov al, [ebp-4]
	xor edx, edx
	mov ecx, [esi+1F8h]
	mov dl, byte byte_50B3B4[eax]
	cmp edx, ecx
	jz loc_445D40
	test dl, dl
	jnz loc_445D1C
	lea edx, 0[eax*4]
	mov eax, dword [dword_540F48]
	mov ebx, dword dword_50B3BC[edx]
	sub eax, ebx
	mov dword dword_50B3DC[edx], eax

loc_445D1C:
	xor eax, eax
	mov al, [ebp-4]
	mov dl, [esi+1F8h]
	mov byte byte_50B3B4[eax], dl
	lea edx, 0[eax*4]
	mov eax, [esi+234h]
	mov dword dword_50B3BC[edx], eax

loc_445D40:
	cmp dword [dword_4D5A20], 0
	jz loc_445EC3
	cmp byte [byte_512ECC], 0
	jnz loc_445EC3
	cmp dword [dword_4D5A2C], 0
	jz loc_445EC3
	cmp byte [byte_4D96A4], 0
	jnz loc_445EC3
	cmp dword [dword_4D5A38], 0
	jz loc_445EC3
	cmp dword [dword_512208], 1
	jnz loc_445D93
	cmp edi, 2
	jz loc_445EC3

loc_445D93:
	mov eax, dword [dword_5121FC]
	mov edx, [esi+1F8h]
	dec eax
	cmp eax, edx
	jnz loc_446064

loc_445DA7:
	mov bl, 64h

loc_445DA9:
	mov eax, dword [dword_512268]
	test eax, eax
	jbe loc_445DE4 ; jumptable 00445DCE default case
	cmp eax, 1
	jnz loc_446139
	cmp edi, eax
	jnz loc_4460EB
	mov eax, [esi+1F8h]
	cmp eax, 7 ; switch 8 cases
	ja loc_445DE4 ; jumptable 00445DCE default case
	jmp off_445AD0[eax*4] ; switch jump

loc_445DD5:
	cmp dword [dword_5121FC], 2 ; jumptable 00445DCE case 0
	jnz loc_4460A8 ; jumptable 004460FA case 0

loc_445DE2:
	mov bl, 32h ; jumptable 004460FA cases 4-6

loc_445DE4:
	mov eax, [esi+2B8h] ; jumptable 00445DCE default case
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	test eax, eax
	jle loc_44617B

loc_445DFF:
	mov ecx, dword [dword_51221C]
	lea edx, [eax+eax]
	cmp ecx, 5
	jnz loc_446182

loc_445E11:
	mov eax, 23h

loc_445E16:
	cmp edx, eax
	jge loc_445E1C
	xor bl, bl

loc_445E1C:
	cmp bl, byte [byte_4D5A05]
	jz loc_445E33
	xor eax, eax
	mov al, bl
	call sub_49DF4C
	mov byte [byte_4D5A05], bl

loc_445E33:
	cmp dword [esi+58Ch], 0
	jz loc_44619E
	cmp byte [byte_4D5BE2], 0
	jnz loc_44619E
	mov edx, 1
	mov bl, 1
	mov eax, edx
	mov byte [byte_4D5BE2], bl
	call sub_49DF64
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_4D5A04]
	call sub_49DF64

loc_445E6F:
	mov eax, esi
	call sub_449700
	mov edi, dword [dword_51221C]
	mov bl, al
	cmp edi, 7
	jnz loc_4461DB
	cmp byte [byte_4D5A04], 2
	jnz loc_4461DB
	cmp dword [esi+288h], 0
	jnz loc_4461C5
	cmp dword [dword_512228], 0
	jnz loc_4461C5

loc_445EAE:
	mov eax, [esi+1E8h]
	mov dl, byte byte_50B38C[eax]
	cmp dl, 3
	jz loc_446234

loc_445EC3:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_445ECC:
	xor eax, eax
	jmp loc_445B4B

loc_445ED3:
	xor eax, eax
	mov al, [ebp-4]
	jmp loc_445B6D

loc_445EDD:
	cmp dword [dword_512208], 0
	jnz loc_445BCD

loc_445EEA:
	xor edx, edx
	mov dl, [ebp-4]
	xor ecx, ecx
	mov ebx, [esi+1F8h]
	mov cl, byte byte_50B3B4[edx]
	cmp ecx, ebx
	jz loc_445F9D
	test ebx, ebx
	jle loc_445F9D
	cmp eax, 0Fh
	jge loc_445F9D
	mov eax, dword [dword_540F48]
	mov ebx, dword dword_50B3BC[edx*4]
	mov edx, dword [dword_4D5A14]
	sub eax, ebx
	cmp eax, edx
	jge loc_445F99

loc_445F2E:
	mov ecx, 7Fh
	mov ebx, dword [dword_4D96B0]
	push 40h
	test ebx, ebx
	jz loc_446033
	xor ebx, ebx

loc_445F45:
	mov edx, 2
	mov eax, dword [dword_50B440]
	call sub_442280
	xor ecx, ecx
	mov cl, [ebp-4]
	mov edx, dword [dword_540F48]
	mov dword dword_50B394[ecx*4], eax
	mov eax, dword dword_50B3BC[ecx*4]
	sub edx, eax
	mov dword [dword_4D5A14], edx
	mov dword dword_50B3DC[ecx*4], edx
	mov byte byte_50B35C[ecx], 1
	jmp loc_445C24

loc_445F88:
	xor dl, dl
	jmp loc_445BDD

loc_445F8F:
	mov ebx, 40h
	jmp loc_445BF7

loc_445F99:
	test edx, edx
	jz loc_445F2E

loc_445F9D:
	xor eax, eax
	mov al, [ebp-4]
	xor edx, edx
	mov ebx, [esi+1F8h]
	mov dl, byte byte_50B3B4[eax]
	cmp edx, ebx
	jz loc_445C24
	cmp ebx, 1
	jle loc_445C24
	lea edx, 0[eax*4]
	mov eax, dword [dword_540F48]
	mov ecx, dword dword_50B3BC[edx]
	mov ebx, dword dword_50B3DC[edx]
	sub eax, ecx
	cmp eax, ebx
	jge loc_445C24
	mov ecx, 7Fh
	mov eax, dword [dword_4D96B0]
	push 40h
	test eax, eax
	jz loc_44603D
	xor ebx, ebx

loc_445FF5:
	mov edx, 1
	mov eax, dword [dword_50B440]
	call sub_442280
	xor edx, edx
	mov dl, [ebp-4]
	mov ebx, dword [dword_540F48]
	mov ecx, dword dword_50B3BC[edx*4]
	mov dword dword_50B394[edx*4], eax
	sub ebx, ecx
	mov ah, 1
	mov dword dword_50B3DC[edx*4], ebx
	mov byte byte_50B35C[edx], ah
	jmp loc_445C24

loc_446033:
	mov ebx, 40h
	jmp loc_445F45

loc_44603D:
	mov ebx, 40h
	jmp loc_445FF5

loc_446044:
	mov ebx, 40h
	jmp loc_445C6F

loc_44604E:
	mov byte byte_50B384[eax], 1
	jmp loc_445C7B

loc_44605A:
	mov ebx, 40h
	jmp loc_445CCE

loc_446064:
	cmp edx, 5
	jle loc_446076
	cmp dword [dword_5121FC], 8
	jz loc_445DA7

loc_446076:
	cmp dword [esi+1F8h], 0
	jnz loc_44608F
	cmp dword [dword_5121FC], 2
	jz loc_44608F

loc_446088:
	xor bl, bl
	jmp loc_445DA9

loc_44608F:
	cmp dword [esi+1F8h], 1
	jnz loc_4460A1
	cmp dword [dword_5121FC], 8
	jz loc_446088

loc_4460A1:
	mov bl, 32h
	jmp loc_445DA9

loc_4460A8:
	xor bl, bl ; jumptable 004460FA case 0
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_4460AF:
	cmp dword [dword_5121FC], 2 ; jumptable 00445DCE case 1
	jnz loc_445DE2 ; jumptable 004460FA cases 4-6
	mov bl, 64h
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_4460C3:
	cmp dword [dword_5121FC], 4 ; jumptable 00445DCE case 2
	jnz loc_445DE2 ; jumptable 004460FA cases 4-6
	mov bl, 64h
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_4460D7:
	cmp dword [dword_5121FC], 4 ; jumptable 00445DCE case 3
	jnz loc_445DE2 ; jumptable 004460FA cases 4-6

loc_4460E4:
	mov bl, 64h ; jumptable 00445DCE cases 4-7
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_4460EB:
	mov eax, [esi+1F8h]
	cmp eax, 7 ; switch 8 cases
	ja loc_445DE4 ; jumptable 00445DCE default case
	jmp off_445AF0[eax*4] ; switch jump

loc_446101:
	cmp dword [dword_5121FC], 2 ; jumptable 004460FA case 1
	jz loc_445DE2 ; jumptable 004460FA cases 4-6
	xor bl, bl
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_446115:
	cmp dword [dword_5121FC], 4 ; jumptable 004460FA case 2
	jz loc_445DE2 ; jumptable 004460FA cases 4-6

loc_446122:
	xor bl, bl
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_446129:
	cmp dword [dword_5121FC], 4 ; jumptable 004460FA case 3
	jnz loc_446122

loc_446132:
	mov bl, 64h ; jumptable 004460FA case 7
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_446139:
	cmp edi, 2
	jge loc_446156
	cmp bl, 64h
	jz loc_446156
	add bl, 64h
	cmp bl, 64h
	jbe loc_445DE4 ; jumptable 00445DCE default case
	mov bl, 64h
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_446156:
	cmp edi, 4
	jge loc_445DE4 ; jumptable 00445DCE default case
	cmp edi, 2
	jl loc_445DE4 ; jumptable 00445DCE default case
	add bl, 32h
	cmp bl, 64h
	jbe loc_445DE4 ; jumptable 00445DCE default case
	mov bl, 64h
	jmp loc_445DE4 ; jumptable 00445DCE default case

loc_44617B:
	neg eax
	jmp loc_445DFF

loc_446182:
	cmp ecx, 6
	jz loc_445E11
	cmp ecx, 7
	jz loc_445E11
	mov eax, 32h
	jmp loc_445E16

loc_44619E:
	cmp dword [esi+58Ch], 0
	jnz loc_445E6F
	cmp byte [byte_4D5BE2], 0
	jz loc_445E6F
	xor dh, dh
	mov byte [byte_4D5BE2], dh
	jmp loc_445E6F

loc_4461C5:
	cmp dword [esi+288h], 0
	jz loc_4461DB
	cmp dword [dword_512228], 0
	jnz loc_445EAE

loc_4461DB:
	cmp dword [esi+288h], 0
	jnz loc_44624E
	cmp dword [dword_512228], 0
	jnz loc_44624E

loc_4461ED:
	mov cl, byte [byte_4D5A04]
	cmp bl, cl
	jbe loc_4462B1
	xor eax, eax
	xor edx, edx
	mov al, cl
	mov dl, bl
	sub edx, eax
	cmp edx, 1
	jnz loc_4462B1

loc_44620E:
	cmp bl, byte [byte_4D5A04]
	jz loc_445EC3
	xor eax, eax
	xor edx, edx
	mov al, bl
	mov byte [byte_4D5A04], bl
	call sub_49DF64
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_446234:
	xor eax, eax
	mov byte [byte_4D5A04], dl
	mov al, dl
	xor edx, edx
	call sub_49DF64
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44624E:
	cmp dword [esi+288h], 0
	jz loc_446260
	cmp dword [dword_512228], 0
	jnz loc_4461ED

loc_446260:
	cmp dword [esi+288h], 0
	jz loc_4462CA
	cmp dword [dword_512228], 0
	jnz loc_4462CA

loc_446272:
	mov ch, byte [byte_4D5A04]
	cmp bl, ch
	jnb loc_4462E9
	xor eax, eax
	xor edx, edx
	mov al, bl
	mov dl, ch
	sub edx, eax
	cmp edx, 1
	jnz loc_4462E9

loc_44628B:
	cmp bl, byte [byte_4D5A04]
	jz loc_445EC3
	xor eax, eax
	xor edx, edx
	mov al, bl
	mov byte [byte_4D5A04], bl
	call sub_49DF64
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4462B1:
	xor edx, edx
	xor eax, eax
	mov dl, byte [byte_4D5A04]
	mov al, bl
	sub edx, eax
	cmp edx, 1
	jg loc_44620E
	jmp loc_446260

loc_4462CA:
	cmp dword [esi+288h], 0
	jnz loc_445EC3
	cmp dword [dword_512228], 0
	jnz loc_446272
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4462E9:
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_4D5A04]
	mov dl, bl
	sub edx, eax
	cmp edx, 1
	jg loc_44628B
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_445B10 endp

sub_446310: ;SUBROUTINE
	push edx
	mov edx, 7Fh

loc_446316:
	xor eax, eax

loc_446318:
	inc eax
	cmp eax, 2FFFDh
	jl loc_446318
	mov eax, edx
	dec edx
	call sub_49DAB0
	test edx, edx
	jge loc_446316
	cmp dword [dword_4D5A1C], 0
	jnz loc_446363

loc_446335:
	cmp byte [byte_4D5A48], 0
	jnz loc_446379

loc_44633E:
	call sub_4762E0
	mov eax, 7Fh
	call sub_49DAB0
	mov eax, dword [dword_4D5A34]
	mov dword [dword_4D5A30], eax
	mov eax, dword [dword_4D5A3C]
	mov dword [dword_4D5A20], eax
	pop edx
	ret

loc_446363:
	call sub_49DB20
	mov eax, 0FFFFFFFFh
	call sub_486404
	call sub_476210
	jmp loc_446335

loc_446379:
	xor edx, edx
	xor eax, eax
	call sub_49DBA8
	jmp loc_44633E
;sub_446310 endp

sub_446390: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ah, byte [byte_50B480]
	inc ah
	mov edx, dword [dword_4D5A1C]
	mov byte [byte_50B480], ah
	test edx, edx
	jnz loc_446429

loc_4463AF:
	xor edx, edx
	xor eax, eax
	mov ebx, 200h
	xor ecx, ecx

loc_4463BA:
	inc eax
	add edx, 4
	mov byte byte_50B383[eax], cl
	mov byte byte_50B35B[eax], cl
	mov byte byte_50B3B3[eax], cl
	mov dword dword_50B3D8[edx], ecx
	mov dword dword_50B360[edx], ecx
	mov dword dword_50B3B8[edx], ebx
	mov byte byte_50B313[eax], cl
	cmp eax, 8
	jl loc_4463BA
	mov cl, 2
	xor dh, dh
	mov eax, dword [dword_512DB4]
	mov byte [byte_4D5A0D], dh
	mov byte [byte_4D5A0E], dh
	mov dword [dword_4D5A14], eax
	mov byte [byte_4D5A04], cl
	mov byte [byte_4D5A05], dh
	mov al, 1
	mov byte [byte_4D5A48], dh
	mov byte [byte_4D5A18], al
	mov byte [byte_4D5A19], al
	pop edx
	pop ecx
	pop ebx
	ret

loc_446429:
	mov byte [byte_4D5A0C], 4
	call sub_445140
	call sub_444FB0
	jmp loc_4463AF
;sub_446390 endp

sub_446440: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	call sub_49E380
	call sub_49E3E0
	mov ebx, eax
	test eax, eax
	jz loc_446462
	mov edx, ebx
	mov eax, ecx
	call sub_49C618
	mov eax, ebx
	pop ecx
	pop ebx
	ret

loc_446462:
	push esi
	push ecx
	mov edx, aCNfs2seGameC_3 ; "c:\\nfs2se\\game\\common\\bworld.c"
	mov esi, 0E21h
	push aNfs2_loadfilea ; "Nfs2_loadfileadr mem error: %s\n"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 8
	pop esi
	mov edx, ebx
	mov eax, ecx
	call sub_49C618
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_446440 endp

sub_4464C0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 3Ch
	mov edi, edx
	mov esi, ebx
	mov edx, [ecx]
	mov ebx, [eax+8]
	sub edx, ebx
	mov [esp+30h], edx
	mov edx, [ecx+4]
	mov ebp, [eax+0Ch]
	sub edx, ebp
	mov [esp+34h], edx
	mov ecx, [ecx+8]
	mov edx, [eax+10h]
	sub ecx, edx
	mov [esp+38h], ecx
	lea ecx, [eax+44h]
	lea ebx, [esp+24h]
	lea eax, [esp+30h]
	mov edx, ecx
	call sub_480720
	mov ebx, esp
	mov edx, ecx
	mov eax, edi
	call sub_49E840
	mov ecx, [esp+50h]
	lea edx, [esp+24h]
	mov eax, esp
	push ecx
	mov ebx, esi
	mov ecx, [esp+50h]
	call sub_480330
	add esp, 3Ch
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_4464C0 endp

sub_446530: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov edi, edx
	mov esi, [ebx]
	mov edx, [eax+8]
	sub esi, edx
	mov [esp], esi
	mov esi, [ebx+4]
	mov ebp, [eax+0Ch]
	sub esi, ebp
	mov [esp+4], esi
	mov ebx, [ebx+8]
	mov edx, [eax+10h]
	lea esi, [eax+44h]
	sub ebx, edx
	mov eax, esp
	mov [esp+8], ebx
	mov edx, esi
	lea ebx, [esp+0Ch]
	call sub_480720
	mov ebx, [esp+28h]
	lea edx, [esp+0Ch]
	push ebx
	mov eax, esi
	mov ebx, edi
	call sub_480330
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_446530 endp

sub_446590: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_5117A0]
	inc ecx
	mov ebx, 3
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov dword [dword_5117A0], edx
	call sub_4465C0
	mov ecx, dword [dword_5117A0]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_446590 endp

sub_4465C0: ;SUBROUTINE
	push edx
	mov eax, dword [dword_5117A0]
	mov edx, dword [dword_512208]
	shl eax, 2
	cmp edx, 1
	jnz loc_446641
	mov edx, dword dword_4D5C44[eax]
	mov eax, 1B80000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_5117A0]
	mov dword [dword_50E108], eax
	mov dword [dword_50E048], eax
	mov eax, 3C0000h
	mov edx, dword dword_4D5C44[edx*4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_5117A0]
	mov dword [dword_50E10C], eax
	mov dword [dword_50E04C], eax
	mov eax, 5C0000h
	mov edx, dword dword_4D5C44[edx*4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_50E110], eax
	mov dword [dword_50E050], eax
	pop edx
	ret

loc_446641:
	mov edx, dword dword_4D5C44[eax]
	mov eax, 1F40000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_5117A0]
	mov dword [dword_50E048], eax
	mov eax, 6E0000h
	mov edx, dword dword_4D5C44[edx*4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_5117A0]
	mov dword [dword_50E04C], eax
	mov eax, 960000h
	mov edx, dword dword_4D5C44[edx*4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_50E050], eax
	pop edx
	ret
;sub_4465C0 endp

sub_4466A0: ;SUBROUTINE
	mov eax, dword [dword_5117A0]
	ret
;sub_4466A0 endp

sub_4466B0: ;SUBROUTINE
	mov dword [dword_5117A0], eax
	ret
;sub_4466B0 endp

sub_4466C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 6Ch
	mov edi, eax
	mov esi, edx
	mov ecx, ebx
	mov edx, 4000h
	mov eax, ebx
	call sub_49E720
	mov edx, edi
	lea eax, [esp+24h]
	neg edx
	call sub_49E780
	mov eax, esp
	mov edx, esi
	lea ebx, [esp+48h]
	call sub_49E780
	lea eax, [esp+24h]
	mov edx, ecx
	call sub_49E840
	mov edx, esp
	lea eax, [esp+48h]
	mov ebx, ecx
	call sub_49E840
	add esp, 6Ch
	pop edi
	pop esi
	pop ecx
	ret
;sub_4466C0 endp

sub_446720: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov esi, eax
	mov ebp, edx
	mov edx, 10000h
	sub edx, eax
	mov eax, ebx
	neg eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov eax, ebp
	mov edx, esi
	neg eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [edi+eax]
	lea eax, [esp+24h]
	call sub_49E780
	mov eax, esp
	mov edx, ebx
	call sub_49E780
	lea ebx, [esp+48h]
	lea eax, [esp+24h]
	mov edx, ecx
	call sub_49E840
	mov edx, esp
	lea eax, [esp+48h]
	mov ebx, ecx
	call sub_49E840
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_446720 endp

sub_446790: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, [eax+4]
	movsx ecx, word [eax]
	sar edx, 10h
	sub edx, ecx
	mov ebx, [eax+8]
	mov ecx, edx
	mov edx, [eax+2]
	sar ebx, 10h
	sar edx, 10h
	sub ebx, edx
	mov eax, ecx
	mov edx, ebx
	call sub_49E630
	sub eax, 4000h
	sar eax, 8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_446790 endp

sub_4467D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ecx, eax
	mov ebx, edx
	lea edx, [eax+8]
	mov edx, [edx+78h]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword [dword_51180C]
	mov eax, [edx+eax*8+478h]
	add eax, 8
	mov edx, [ecx+0A8h]
	mov [esp+4], eax
	test edx, edx
	jle loc_446924

loc_446812:
	mov esi, [ecx+0B0h]
	test esi, esi
	jle loc_44692B
	mov eax, esi

loc_446822:
	lea edi, [eax+edx]
	mov ah, [ecx+1F4h]
	sar edi, 10h
	test ah, 2
	jz loc_446934
	xor ebp, ebp

loc_446839:
	lea eax, 0[ebx*4]
	add eax, ebx
	mov edx, [esp+4]
	shl eax, 2
	add edx, eax
	xor eax, eax
	mov ax, [edx+0Eh]
	mov [esp], eax
	mov esi, [esp]
	shl eax, 2
	sub eax, esi
	mov esi, byte_5114A0
	add esi, eax
	cmp byte [edx+13h], 2
	jnz loc_446959
	movsx eax, byte [esi]
	cmp eax, 0FFFFFFFFh
	jnz loc_446959
	cmp edi, ebp
	jl loc_446959
	cmp edi, 19h
	jge loc_44693E
	mov eax, 2

loc_44688F:
	call sub_440C30
	mov [esp], eax
	mov dx, [edx+0Eh]
	and edx, 0FFFFh
	lea eax, 0[edx*4]
	sub eax, edx
	mov dl, [esp]
	mov byte byte_5114A0[eax], dl
	cmp byte [esi], 0
	jl loc_446948
	mov edx, [ecx+0B0h]
	mov eax, [ecx+0A8h]
	sar edx, 8
	sar eax, 8
	call sub_49E630
	sar eax, 8
	movsx ecx, al
	mov [esi+1], al
	lea eax, 0[ebx*4]
	add eax, ebx
	mov edx, [esp+4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dx, [eax+0Eh]
	lea eax, 0[edx*4]
	sub eax, edx
	xor ebx, ebx
	mov eax, dword byte_51149D[eax]
	mov edx, 2
	sar eax, 18h
	call sub_440C00
	mov byte [esi+2], 0
	mov eax, 0FFFFFFFFh
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_446924:
	neg edx
	jmp loc_446812

loc_44692B:
	mov eax, esi
	neg eax
	jmp loc_446822

loc_446934:
	mov ebp, 0Bh
	jmp loc_446839

loc_44693E:
	mov eax, 3
	jmp loc_44688F

loc_446948:
	mov byte [esi], 0FEh
	mov eax, 0FFFFFFFFh
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_446959:
	movsx eax, byte [esi]
	cmp eax, 0FFFFFFFFh
	jz loc_44696C
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44696C:
	mov eax, 1
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4467D0 endp

sub_446980: ;SUBROUTINE
	push edx
	mov dl, 0FFh
	xor eax, eax

loc_446985:
	add eax, 3
	mov byte byte_51149D[eax], dl
	xor dh, dh
	mov byte byte_51149E[eax], dh
	mov byte byte_51149F[eax], dh
	cmp eax, 300h
	jnz loc_446985
	pop edx
	ret
;sub_446980 endp

sub_4469B0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	xor edx, edx
	mov dword [dword_5117D4], edx
	mov dword [dword_5117C8], edx
	call sub_488570
	test eax, eax
	jnz loc_4469CE
	pop edx
	pop ecx
	ret

loc_4469CE:
	push edi
	push esi
	push ebx
	mov eax, ecx
	call sub_458800
	mov ecx, eax
	mov edi, eax
	call sub_458700
	mov eax, ecx
	xor ebx, ebx
	call sub_458780
	cmp eax, 16800h
	jle loc_446A71
	mov eax, ecx
	call sub_458780

loc_4469FC:
	mov edx, eax
	mov eax, aPersist ; "Persist"
	call sub_4471C0
	mov dword [dword_5117A4], eax
	mov edx, eax
	mov eax, edi
	call sub_458730
	test eax, eax
	jz loc_446A64
	mov eax, edi
	call sub_458700
	xor ebx, ebx
	mov esi, eax
	test eax, eax
	jle loc_446A64

loc_446A29:
	mov eax, dword [dword_5117A4]
	mov edx, ebx
	call sub_4586C0
	mov ecx, eax
	mov ax, [eax+4]
	cmp ax, 7
	jnb loc_446A78
	cmp ax, 2
	jnz loc_446A5F
	mov edx, dword_50E2A0
	mov eax, ecx
	call sub_446F50
	mov edx, dword_50FBA0
	mov eax, ecx
	call sub_446F50

loc_446A5F:
	inc ebx
	cmp ebx, esi
	jl loc_446A29

loc_446A64:
	mov eax, edi
	call sub_4587B0
	pop ebx
	pop esi
	pop edi
	pop edx
	pop ecx
	ret

loc_446A71:
	mov eax, 16800h
	jmp loc_4469FC

loc_446A78:
	ja loc_446A82
	mov dword [dword_5117C8], ecx
	jmp loc_446A5F

loc_446A82:
	cmp ax, 8
	ja loc_446A90
	mov dword [dword_5117D4], ecx
	jmp loc_446A5F

loc_446A90:
	cmp ax, 0Fh
	jnz loc_446A5F
	mov eax, ecx
	call sub_44B080
	jmp loc_446A5F
;sub_4469B0 endp

sub_446AA0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov eax, dword [dword_5117AC]
	mov ebx, [eax+90h]
	cmp ebx, 0FFFFFFFFh
	jnz loc_446AD5
	cmp edx, [eax+0B4h]
	jl loc_446AFF
	mov edx, [eax+94h]
	dec edx
	cmp ecx, edx
	jl loc_446AFF
	mov [eax+90h], ecx

loc_446ACD:
	mov eax, 1
	pop ecx
	pop ebx
	ret

loc_446AD5:
	cmp ecx, ebx
	jnz loc_446AFF
	mov ecx, [eax+0B4h]
	add ecx, 1F4h
	cmp edx, ecx
	jl loc_446ACD
	mov dword [eax+90h], 0FFFFFFFFh
	mov dword [eax+94h], 0FFFFFFFFh
	jmp loc_446ACD

loc_446AFF:
	xor eax, eax
	pop ecx
	pop ebx
	ret
;sub_446AA0 endp

off_446B10: dd loc_446B8C
	dd loc_446BFD ; jump table for switch statement
	dd loc_446BFD
	dd loc_446C6E

sub_446B20: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov edx, dword [dword_50DF9C]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 6
	add eax, dword_50DFA0
	mov dword [eax+90h], 0FFFFFFFFh
	mov dword [eax+94h], 0FFFFFFFFh
	mov dword [eax+0B4h], 0
	mov dword [eax+84h], 1
	mov dword [eax+10h], 0
	mov [eax+0BCh], edx
	mov [eax], edi
	mov [eax+98h], ebx
	mov [eax+9Ch], ecx
	cmp esi, 3 ; switch 4 cases
	ja loc_446BEC ; jumptable 00446B85 default case
	jmp off_446B10[esi*4] ; switch jump

loc_446B8C:
	mov dword [eax+0A4h], 1F40000h ; jumptable 00446B85 case 0
	mov dword [eax+0A8h], 1F40000h
	mov dword [eax+0ACh], 6E0000h
	mov dword [eax+0B0h], 960000h
	mov dword [eax+0B4h], 7D0h
	mov dword [eax+0B8h], 2Ah

loc_446BC8:
	mov edx, [eax+98h]
	mov dword [eax+0A0h], 0FFFB0000h
	mov dword [edx+1Ch], 0
	mov eax, [eax+98h]
	mov dword [eax+20h], 0

loc_446BEC:
	mov eax, dword [dword_50DF9C] ; jumptable 00446B85 default case
	lea edx, [eax+1]
	mov dword [dword_50DF9C], edx
	pop edi
	pop esi
	ret

loc_446BFD:
	mov dword [eax+0A4h], 1900000h ; jumptable 00446B85 cases 1,2
	mov dword [eax+0A8h], 1B80000h
	mov dword [eax+0ACh], 3C0000h
	mov dword [eax+0B0h], 5C0000h
	mov dword [eax+0B4h], 2BCh
	mov dword [eax+0B8h], 18h
	mov edx, [eax+98h]
	mov dword [eax+0A0h], 0FFFB0000h
	mov dword [edx+1Ch], 380h
	mov eax, [eax+98h]
	mov dword [eax+20h], 1
	mov eax, dword [dword_50DF9C]
	lea edx, [eax+1]
	mov dword [dword_50DF9C], edx
	pop edi
	pop esi
	ret

loc_446C6E:
	mov dword [eax+0A4h], 960000h ; jumptable 00446B85 case 3
	mov dword [eax+0A8h], 640000h
	mov dword [eax+0ACh], 280000h
	mov dword [eax+0B0h], dword_500000
	mov dword [eax+0B4h], 0FAh
	mov dword [eax+0B8h], 6
	jmp loc_446BC8
;sub_446B20 endp

sub_446CB0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov ecx, dword_50DFA0
	shl eax, 6
	mov edx, dword [dword_5222DC]
	add ecx, eax
	cmp edx, 1
	jz loc_446CFB

loc_446CCE:
	mov edx, [ecx+0BCh]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add eax, edx
	mov edx, dword_50E2A0
	shl eax, 8
	add edx, eax
	mov dword [dword_5117FC], edx
	mov dword [dword_5117AC], ecx
	pop edx
	pop ecx
	ret

loc_446CFB:
	mov eax, dword [dword_50DFB0]
	mov [ecx+10h], eax
	jmp loc_446CCE
;sub_446CB0 endp

sub_446D10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, 1234h
	mov ebx, 0FFFFFFFFh
	xor ecx, ecx
	xor eax, eax
	mov dword [dword_50DF9C], ecx
	mov dword [dword_50DF98], edx

loc_446D2D:
	add eax, 0C0h
	mov dword dword_50DEE0[eax], ebx
	cmp eax, 300h
	jnz loc_446D2D
	pop edx
	pop ecx
	pop ebx
	ret
;sub_446D10 endp

sub_446D50: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 5Ch
	mov [esp+38h], edx
	mov [esp+58h], ebx
	mov edi, [esp+58h]
	mov ecx, [esp+38h]
	xor edx, edx
	mov ebx, [ebx+18h]
	mov [esp+50h], edx
	mov [edi+14h], ebx
	test ecx, ecx
	jle loc_446E84
	mov [esp+3Ch], eax

loc_446D7F:
	mov ebp, [esp+3Ch]
	xor eax, eax
	xor edx, edx
	mov [esp+4Ch], eax
	mov [esp+48h], edx
	mov eax, [esp+3Ch]
	mov ebp, [ebp+0]
	mov [esp+40h], eax
	mov [esp+54h], eax
	mov [esp+44h], eax

loc_446DA2:
	mov eax, [esp+58h]
	imul ebx, [eax+14h], 1Ch
	mov eax, [eax+10h]
	lea edi, [eax+ebx]
	xor ebx, ebx
	mov esi, [esp+4Ch]
	mov bx, [ebp+0]
	add ebx, esi
	imul ebx, 1Ch
	mov dl, [ebp+3]
	add eax, ebx
	test dl, 5Eh
	jz loc_446F32
	test dl, 50h
	jz loc_446EC7
	test dl, 0Eh
	jz loc_446EC7
	test dl, 10h
	jz loc_446E8C
	lea ebx, [esp+1Ch]
	xor edx, edx

loc_446DEE:
	call sub_4351C4

loc_446DF3:
	mov al, [ebp+3]
	test al, 2
	jz loc_446EA3
	mov ebx, esp
	mov edx, 2

loc_446E05:
	lea eax, [esp+1Ch]

loc_446E09:
	call sub_4351C4

loc_446E0E:
	cmp dword [esp+4Ch], 0
	jnz loc_446E1C
	mov eax, [esp+54h]
	mov [eax+4], edi

loc_446E1C:
	mov edi, [esp+40h]
	mov edx, [esp+48h]
	mov ecx, 7
	mov edi, [edi+4]
	mov esi, esp
	add edi, edx
	mov eax, [esp+58h]
	rep movsd
	inc dword [eax+14h]

loc_446E39:
	mov esi, [esp+4Ch]
	mov ebx, [esp+48h]
	inc esi
	add ebx, 1Ch
	mov [esp+4Ch], esi
	mov [esp+48h], ebx
	cmp esi, 1
	jl loc_446DA2
	mov eax, [ebp+4]
	sar eax, 18h
	cmp eax, esi
	jg loc_446DA2
	mov ebx, [esp+3Ch]
	mov esi, [esp+50h]
	mov edi, [esp+38h]
	add ebx, 8
	inc esi
	mov [esp+3Ch], ebx
	mov [esp+50h], esi
	cmp esi, edi
	jl loc_446D7F

loc_446E84:
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_446E8C:
	test dl, 40h
	jz loc_446DF3
	lea ebx, [esp+1Ch]
	mov edx, 1
	jmp loc_446DEE

loc_446EA3:
	test al, 4
	jnz loc_446EBB
	test al, 8
	jz loc_446E0E
	mov ebx, esp
	mov edx, 4
	jmp loc_446E05

loc_446EBB:
	mov ebx, esp
	mov edx, 3
	jmp loc_446E05

loc_446EC7:
	mov bh, [ebp+3]
	test bh, 50h
	jz loc_446EF2
	test bh, 10h
	jnz loc_446EE9
	test bh, 40h
	jz loc_446E0E
	mov ebx, esp
	mov edx, 1
	jmp loc_446E09

loc_446EE9:
	mov ebx, esp
	xor edx, edx
	jmp loc_446E09

loc_446EF2:
	test bh, 0Eh
	jz loc_446E0E
	test bh, 2
	jnz loc_446F1A
	test bh, 4
	jnz loc_446F26
	test bh, 8
	jz loc_446E0E
	mov ebx, esp
	mov edx, 4
	jmp loc_446E09

loc_446F1A:
	mov ebx, esp
	mov edx, 2
	jmp loc_446E09

loc_446F26:
	mov ebx, esp
	mov edx, 3
	jmp loc_446E09

loc_446F32:
	test esi, esi
	jnz loc_446E39
	mov ebx, [esp+44h]
	mov [ebx+4], eax
	jmp loc_446E39
;sub_446D50 endp

sub_446F50: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, dword [dword_511800]
	mov ecx, edx
	test eax, eax
	jz loc_446F80
	xor ebx, ebx
	lea esi, [eax+8]
	mov bx, [eax+6]
	xor edx, edx
	test ebx, ebx
	jle loc_446F80
	mov eax, esi

loc_446F70:
	inc edx
	mov [ecx], eax
	add ecx, 8
	add eax, 0Ah
	cmp edx, ebx
	jl loc_446F70

loc_446F80:
	mov dword [dword_511800], ebx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_446F50 endp

sub_446F90: ;SUBROUTINE
	push edx
	mov edx, dword [dword_5117E0]
	test edx, edx
	jnz loc_446FA7
	mov eax, dword [dword_5117E8]
	call sub_42E8F0
	pop edx
	ret

loc_446FA7:
	push ecx
	push ebx
	mov eax, edx
	call sub_49E4F0
	xor ecx, ecx
	push 0
	mov ebx, dword [dword_5117D0]
	mov edx, dword [dword_5117E8]
	mov dword [dword_5117E4], eax
	mov eax, dword [dword_5117E0]
	call sub_4470C0
	mov ebx, dword_5117D8
	mov eax, dword [dword_5117E4]
	mov edx, dword [dword_511800]
	mov dword [dword_5117EC], eax
	mov dword [dword_5117F0], eax
	mov eax, dword_50E2A0
	call sub_446D50
	mov ebx, dword_5117D8
	mov eax, dword [dword_5117E4]
	mov edx, dword [dword_511800]
	mov dword [dword_5117EC], eax
	mov eax, dword_50FBA0
	call sub_446D50
	mov eax, dword [dword_5117E0]
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_5117E0], ecx
	pop ebx
	pop ecx
	mov eax, dword [dword_5117E8]
	call sub_42E8F0
	pop edx
	ret
;sub_446F90 endp

sub_447040: ;SUBROUTINE
	push ebx
	push edx
	mov eax, dword [dword_51221C]
	mov edx, dword [dword_51222C]
	mov dword [dword_5117B0], eax
	test edx, edx
	jz loc_447089
	mov eax, a0m_qfs ; "0m.qfs"
	xor edx, edx
	call sub_449640
	call sub_488058
	mov dword [dword_5117E0], eax
	test eax, eax
	jnz loc_447073

loc_447070:
	pop edx
	pop ebx
	ret

loc_447073:
	mov edx, eax
	xor ebx, ebx
	mov eax, 1
	mov dword [dword_5117D0], eax
	pop edx
	pop ebx
	ret

loc_447089:
	mov eax, a0_qfs ; "0.qfs"
	call sub_449640
	call sub_488058
	mov dword [dword_5117E0], eax
	test eax, eax
	jz loc_447070
	mov edx, eax
	xor ebx, ebx
	mov eax, 1
	mov dword [dword_5117D0], eax
	pop edx
	pop ebx
	ret
;sub_447040 endp

sub_4470C0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 144h
	mov esi, eax
	mov ebp, edx
	mov [esp+140h], ebx
	mov edx, 0FFFFFFFFh
	xor eax, eax

loc_4470DB:
	add eax, 4
	mov [esp+eax-4], edx
	cmp eax, 140h
	jnz loc_4470DB
	mov ecx, 1
	xor edi, edi
	mov dword [dword_4D5C40], ecx

loc_4470F6:
	mov eax, esi
	call sub_49E4F0
	cmp edi, eax
	jl loc_44713F
	mov edx, aPal ; "!pal"
	mov eax, esi
	call sub_482EA8
	mov edi, eax
	test eax, eax
	jz loc_44711A
	call sub_49E520
	mov edi, eax

loc_44711A:
	test edi, edi
	jnz loc_44714B

loc_44711E:
	xor edi, edi

loc_447120:
	mov eax, esi
	call sub_49E4F0
	cmp edi, eax
	jl loc_447156
	xor ebx, ebx
	mov dword [dword_4D5C40], ebx
	add esp, 144h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_44713F:
	mov edx, edi
	mov eax, esi
	call sub_49E4F4
	inc edi
	jmp loc_4470F6

loc_44714B:
	add edi, 10h
	mov dword [off_4DA200], edi
	jmp loc_44711E

loc_447156:
	mov edx, edi
	mov eax, esi
	call sub_49E4F4
	test eax, eax
	jnz loc_447166
	inc edi
	jmp loc_447120

loc_447166:
	mov ebx, [esp+140h]
	mov ecx, ebp
	mov edx, eax
	xor eax, eax
	call sub_4352C0
	add ebp, 1Ch
	inc edi
	jmp loc_447120
;sub_4470C0 endp

sub_447180: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov dword [eax], 0FFFFFFFFh
	mov dword [eax+18h], 0
	lea eax, 0[edx*8]
	xor ebx, ebx
	add edx, eax
	mov eax, aArtres ; "ArtRes"
	shl edx, 2
	call sub_4471C0
	mov dword [ecx+0Ch], 0
	mov [ecx+10h], eax
	pop ecx
	pop ebx
	ret
;sub_447180 endp

sub_4471C0: ;SUBROUTINE
	push ecx
	mov ecx, dword [dword_4D5C3C]
	add ecx, edx
	mov eax, edx
	mov dword [dword_4D5C3C], ecx
	call sub_49E3E0
	mov ecx, eax
	test eax, eax
	jz loc_4471E0
	mov eax, ecx
	pop ecx
	ret

loc_4471E0:
	push esi
	push edx
	mov ebx, aCNfs2seGameC_3 ; "c:\\nfs2se\\game\\common\\bworld.c"
	mov esi, 92Eh
	push aMallocReturned ; "malloc returned NULL: size:%d\n"
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 8
	pop esi
	mov eax, ecx
	pop ecx
	ret
;sub_4471C0 endp

sub_447210: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 8
	mov esi, ebx
	mov ebx, esp
	lea edi, [edx+8]
	add eax, 8
	mov edx, edi
	call sub_440DF0
	mov ecx, eax
	sar ecx, 0Ch
	imul ecx, ecx
	sar ecx, 0Ah
	test ecx, ecx
	jz loc_4472AA
	mov eax, 10000h
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	cmp eax, 7Fh
	jge loc_4472A3

loc_44724B:
	mov ecx, eax

loc_44724D:
	mov eax, [esp]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ah
	sbb eax, edx
	sar eax, 0Ah
	mov edx, [esp+4]
	add eax, 40h
	call sub_442250
	mov ebx, eax
	mov eax, 23h
	call sub_486550
	cmp word [edi+0Eh], 1
	jnz loc_4472DE
	mov edx, dword [dword_4EC64C]
	and edx, 3Fh
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	cmp eax, dword [dword_4D5C38]
	jz loc_4472B1

loc_44729A:
	mov eax, esi
	add esp, 8
	pop edi
	pop esi
	pop ecx
	ret

loc_4472A3:
	mov eax, 7Fh
	jmp loc_44724B

loc_4472AA:
	mov ecx, 7Fh
	jmp loc_44724D

loc_4472B1:
	mov eax, dword [dword_5117AC]
	mov edx, [eax]
	push edx
	mov eax, 0Fh
	push ebx
	xor edx, edx
	mov ebx, 40h
	mov dx, [edi+0Ch]
	call sub_444770
	call sub_488074
	and eax, 7
	mov dword [dword_4D5C38], eax
	jmp loc_44729A

loc_4472DE:
	test esi, esi
	jnz loc_44729A
	mov eax, dword [dword_5117AC]
	mov edx, [eax]
	push edx
	mov eax, 0Eh
	push ebx
	xor edx, edx
	mov ebx, 40h
	mov dx, [edi+0Ch]
	mov esi, 1
	call sub_444770
	mov eax, esi
	add esp, 8
	pop edi
	pop esi
	pop ecx
	ret
;sub_447210 endp

sub_447310: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, dword [dword_51180C]
	mov [esp], eax
	mov ebx, edx
	lea ecx, 0[eax*8]
	add ecx, eax
	shl ecx, 2
	sub ecx, eax
	shl ecx, 3
	lea eax, [esi+ecx]
	mov edx, 4
	mov eax, [eax+450h]
	xor edi, edi
	call sub_475080
	mov esi, dword [dword_51180C]
	lea edx, [eax+8]
	mov di, [eax+6]
	xor eax, eax
	test edi, edi
	jle loc_44738E
	mov [esp+8], ecx
	sub ebx, 12h
	mov ebp, [esp+8]
	mov [esp+4], ebx

loc_44736B:
	mov ecx, [esp+4]
	add ecx, eax
	lea ecx, [eax+eax]
	lea ebx, [esi+ebp]
	add edx, 2
	add ebx, ecx
	mov cx, [edx-2]
	inc eax
	mov [ebx+49Ch], cx
	cmp eax, edi
	jl loc_44736B

loc_44738E:
	cmp edi, 64h
	jge loc_4473C4
	mov eax, [esp]
	lea ecx, 0[eax*8]
	add ecx, eax
	shl ecx, 2
	sub ecx, eax
	shl ecx, 3
	lea eax, [edi+edi]
	lea edx, [esi+ecx]

loc_4473AD:
	add eax, 2
	mov word [edx+eax+49Ah], 0FFFFh
	cmp eax, 0C8h
	jl loc_4473AD

loc_4473C4:
	mov dword [dword_51180C], esi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_447310 endp

sub_4473E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0A8h
	mov esi, [esp+0B8h]
	mov ebp, eax
	mov [esp+80h], edx
	mov [esp+84h], ebx
	mov [esp+7Ch], ecx
	mov ebx, [esp+0BCh]
	add esi, 8
	mov eax, [edx]
	xor ecx, ecx
	mov [esp+60h], eax
	xor eax, eax
	xor edx, edx
	mov ax, [esi-2]
	mov [esp+94h], edx
	mov [esp+0A0h], eax
	lea eax, [ebx+8]

loc_44742F:
	xor edi, edi
	mov di, [ebx+6]
	cmp ecx, edi
	jl loc_4474CC
	mov edx, [esp+7Ch]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	shl eax, 3
	mov [esp+88h], eax
	lea eax, [ebp+8]
	mov [esp+90h], eax
	mov eax, [esp+0C0h]
	sar eax, 0Ch
	mov [esp+8Ch], eax

loc_447474:
	mov eax, [esp+0A0h]
	dec eax
	mov [esp+0A0h], eax
	cmp eax, 0FFFFFFFFh
	jz loc_447845
	mov eax, [esp+8Ch]
	imul eax, eax
	sar eax, 6
	xor ecx, ecx
	mov [esp+98h], eax
	mov ah, [esi+2]
	mov [esp+9Ch], ecx
	cmp ah, 3
	jz loc_4474DF
	cmp ah, 4
	jz loc_447562
	cmp ah, 1
	jz loc_44777F
	xor eax, eax
	mov ax, [esi]
	add esi, eax
	jmp loc_447474

loc_4474CC:
	mov dword dword_50B4B0[edx], eax
	add edx, 4
	mov edi, [eax]
	inc ecx
	add eax, edi
	jmp loc_44742F

loc_4474DF:
	mov eax, esp
	lea ecx, [esp+48h]
	mov edx, 1
	push eax
	mov ebx, dword [dword_540F48]
	mov eax, esi
	call sub_440AB0
	xor eax, eax
	mov al, [esi+3]
	mov edi, dword dword_50B4B0[eax*4]
	xor eax, eax
	lea ecx, [esp+48h]
	mov ax, [edi+4]
	mov edx, esp
	call sub_4496C0
	mov [esp+78h], eax
	push eax
	lea eax, [edi+8]
	xor ebx, ebx
	push eax
	mov bx, [edi+4]
	mov eax, ebp
	call sub_4464C0
	cmp dword [esp+0C0h], 0FFFFFFFFh
	jz loc_44762C
	mov edx, [esp+90h]
	lea eax, [esp+48h]
	call sub_4495E0
	cmp eax, [esp+98h]
	jl loc_44762C
	xor eax, eax
	mov ax, [esi]
	add esi, eax
	jmp loc_447474

loc_447562:
	xor eax, eax
	mov al, [esi+3]
	mov edi, dword dword_50B4B0[eax*4]
	xor eax, eax
	mov ax, [edi+4]
	mov edx, [esp+88h]
	call sub_4496C0
	mov [esp+68h], eax
	mov [esp+78h], eax
	mov eax, dword [dword_51180C]
	add eax, edx
	mov eax, [eax+478h]
	lea edx, [eax+8]
	mov eax, [esi+4]
	mov [esp+48h], eax
	mov eax, [esi+8]
	mov [esp+4Ch], eax
	mov eax, [esi+0Ch]
	mov [esp+50h], eax
	xor eax, eax
	mov al, [esi+10h]
	imul eax, 14h
	mov dword [esp+9Ch], 1
	mov ax, [edx+eax+0Eh]
	and eax, 0FFFFh
	mov ecx, byte_5114A0
	lea eax, [eax+eax*2]
	add ecx, eax
	lea edx, [edi+8]
	movsx eax, byte [ecx]
	mov [esp+0A4h], edx
	cmp eax, 0FFFFFFFEh
	jnz loc_44769F
	mov eax, edx
	lea ebx, [esp+24h]
	call sub_446790
	movsx edx, byte [ecx+1]
	mov [ecx+2], al
	movsx eax, al
	shl edx, 8
	shl eax, 8
	mov ecx, [esp+68h]
	call sub_4466C0
	mov ebx, [esp+0A4h]
	push ecx
	lea edx, [esp+28h]
	mov eax, ebp
	push ebx
	xor ebx, ebx
	lea ecx, [esp+50h]

loc_447623:
	mov bx, [edi+4]
	call sub_4464C0

loc_44762C:
	xor edx, edx
	mov dx, [edi+6]
	imul edx, 24h
	lea eax, [esp+64h]
	call sub_46FE70
	test eax, eax
	jz loc_447474
	xor edx, edx
	mov dx, [edi+4]
	imul edx, 6
	mov ecx, [esp+9Ch]
	push ecx
	mov ebx, [esp+68h]
	lea eax, [edi+8]
	push 0
	add edx, eax
	xor eax, eax
	mov ecx, [esp+80h]
	mov ax, [edi+6]
	call dword [dword_5117CC]
	test eax, eax
	jnz loc_447804

loc_44767D:
	xor eax, eax
	mov edx, [esp+94h]
	mov ax, [edi+6]
	add edx, eax
	xor eax, eax
	mov ax, [esi]
	mov [esp+94h], edx
	add esi, eax
	jmp loc_447474

loc_44769F:
	cmp eax, 0FFFFFFFFh
	jz loc_4476C5
	lea ebx, [esp+24h]
	lea edx, [esp+54h]
	call sub_4408B0
	test eax, eax
	jnz loc_4476E7
	movsx eax, byte [ecx]
	call sub_440BC0
	mov byte [ecx], 0FEh
	jmp loc_447474

loc_4476C5:
	mov edx, [esp+68h]
	mov ecx, [esp+0A4h]
	lea ebx, [esp+48h]
	push edx
	xor edx, edx
	mov eax, ebp
	mov dx, [edi+4]
	call sub_446530
	jmp loc_44762C

loc_4476E7:
	mov eax, [esp+0A4h]
	call sub_446790
	mov [ecx+2], al
	mov eax, [esp+54h]
	mov ebx, [esp+48h]
	mov edx, [esp+4Ch]
	add ebx, eax
	mov eax, [esp+58h]
	mov [esp+48h], ebx
	mov ebx, [esp+50h]
	add edx, eax
	mov eax, [esp+5Ch]
	mov [esp+4Ch], edx
	add ebx, eax
	lea edx, [esp+6Ch]
	mov [esp+50h], ebx
	lea ebx, [esp+70h]
	movsx eax, byte [ecx]
	call sub_440A40
	mov edx, [esp+6Ch]
	movsx ebx, byte [ecx+1]
	movsx eax, byte [ecx+2]
	mov ecx, [esp+70h]
	shl eax, 8
	shl edx, 10h
	mov [esp+74h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	shl ebx, 8
	lea ecx, [esp+24h]
	mov edx, [esp+74h]
	call sub_446720
	mov ebx, [esp+68h]
	mov eax, [esp+0A4h]
	push ebx
	lea ecx, [esp+4Ch]
	lea edx, [esp+28h]
	push eax
	xor ebx, ebx
	mov eax, ebp
	jmp loc_447623

loc_44777F:
	mov eax, [esi+4]
	mov [esp+48h], eax
	mov eax, [esi+8]
	mov [esp+4Ch], eax
	mov eax, [esi+0Ch]
	mov [esp+50h], eax
	xor eax, eax
	mov al, [esi+3]
	mov edi, dword dword_50B4B0[eax*4]
	xor eax, eax
	mov ax, [edi+4]
	call sub_4496C0
	mov [esp+78h], eax
	test eax, eax
	jz loc_447474
	cmp dword [esp+0C0h], 0FFFFFFFFh
	jz loc_4477E6
	mov edx, [esp+90h]
	lea eax, [esp+48h]
	call sub_4495E0
	cmp eax, [esp+98h]
	jl loc_4477E6
	xor eax, eax
	mov ax, [esi]
	add esi, eax
	jmp loc_447474

loc_4477E6:
	mov ecx, [esp+78h]
	lea ebx, [esp+48h]
	mov eax, ebp
	xor edx, edx
	push ecx
	mov dx, [edi+4]
	lea ecx, [edi+8]
	call sub_446530
	jmp loc_44762C

loc_447804:
	imul edx, eax, 24h
	lea eax, [esp+64h]
	call sub_46FEA0
	mov ebx, [esp+60h]
	test ebx, ebx
	jnz loc_44783D
	mov edx, [esp+84h]
	mov eax, [esp+64h]
	mov [edx], eax

loc_447825:
	mov edx, 24h
	lea eax, [esp+60h]
	call sub_46FE70
	sub dword [esp+60h], 24h
	jmp loc_44767D

loc_44783D:
	mov eax, [esp+64h]
	mov [ebx], eax
	jmp loc_447825

loc_447845:
	mov edx, [esp+80h]
	mov eax, [esp+60h]
	mov [edx], eax
	mov eax, [esp+94h]
	add esp, 0A8h
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_4473E0 endp

sub_447870: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 164h
	mov edi, eax
	mov [esp+114h], edx
	mov [esp+110h], ebx
	call sub_4493C0
	mov [esp+120h], eax
	xor eax, eax

loc_447898:
	add eax, 4
	xor edx, edx
	mov [esp+eax+0CCh], edx
	mov [esp+eax+0BCh], edx
	cmp eax, 10h
	jnz loc_447898
	mov eax, [esp+114h]
	mov [esp+128h], edx
	mov [esp+13Ch], edx
	mov [esp+15Ch], edx
	xor ebp, ebp

loc_4478CE:
	mov ecx, dword [dword_5117AC]
	cmp edx, [ecx+0B8h]
	jge loc_447907
	movsx ebx, word [eax]
	cmp ebx, 0FFFFFFFFh
	jnz loc_4478EA

loc_4478E4:
	inc edx
	add eax, 2
	jmp loc_4478CE

loc_4478EA:
	mov esi, dword [dword_51180C]
	add esi, ebx
	mov bl, [ecx]
	or bl, 2
	mov bh, [esi+320h]
	or bh, bl
	mov [esi+320h], bh
	jmp loc_4478E4

loc_447907:
	xor esi, esi
	mov eax, [esp+120h]
	mov [esp+144h], esi
	test eax, eax
	jle loc_447967
	lea eax, [edi+8]
	mov [esp+12Ch], eax
	lea eax, [edi+38h]
	mov [esp+118h], eax
	lea eax, [edi+44h]
	mov [esp+11Ch], eax
	mov eax, [esp+114h]
	mov [esp+140h], eax

loc_447947:
	mov eax, [esp+13Ch]
	mov edx, ebp
	lea esi, [eax+1]
	call sub_446AA0
	mov [esp+13Ch], esi
	test eax, eax
	jz loc_4479ED

loc_447967:
	cmp dword [dword_5117C8], 0
	jnz loc_447FDF

loc_447974:
	mov edx, [esp+110h]
	xor ebp, ebp
	xor ecx, ecx

loc_44797F:
	mov edi, [esp+ebp+0C0h]
	cmp ecx, edi
	jz loc_44802F
	mov [edx], edi
	mov eax, [esp+ebp+0D0h]
	mov [eax], ecx
	mov eax, [esp+ebp+0D0h]
	mov [edx+4], eax

loc_4479A3:
	add ebp, 4
	add edx, 8
	cmp ebp, 10h
	jnz loc_44797F
	mov edx, 1
	mov eax, [esp+128h]
	mov edx, 2
	mov eax, [esp+15Ch]
	mov eax, 23h
	xor ebp, ebp
	call sub_486550
	mov dword [dword_4D5C2C], ebp
	add esp, 164h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4479ED:
	mov eax, [esp+140h]
	movsx eax, word [eax]
	mov [esp+158h], eax
	cmp eax, 0FFFFFFFFh
	jnz loc_447A37

loc_447A03:
	mov edx, [esp+140h]
	mov ecx, [esp+144h]
	mov ebx, [esp+120h]
	add edx, 2
	inc ecx
	mov [esp+140h], edx
	mov [esp+144h], ecx
	cmp ecx, ebx
	jl loc_447947
	jmp loc_447967

loc_447A37:
	mov edx, dword [dword_51180C]
	mov esi, [edx+eax*2+0C6h]
	sar esi, 10h
	cmp esi, 0FFFFFFFFh
	jz loc_447A03
	lea ebx, [esp+0E0h]
	mov edx, [esp+158h]
	mov eax, dword [dword_511804]
	call sub_4751F0
	mov edx, [esp+12Ch]
	lea eax, [esp+0E0h]
	call sub_4495E0
	mov edx, dword [dword_5117AC]
	mov edx, [edx+0A8h]
	sar edx, 0Ch
	imul edx, edx
	sar edx, 6
	mov [esp+108h], eax
	cmp eax, edx
	jg loc_447A03
	mov eax, esp
	push eax
	imul eax, esi, 118h
	mov edx, dword [dword_51180C]
	mov eax, [edx+eax+450h]
	mov ebx, 4
	call sub_475030
	mov edx, [esp+11Ch]
	mov ecx, eax
	mov eax, [esp+120h]
	call sub_480540
	mov eax, [esp]
	cmp eax, [esp+8]
	jle loc_447B01
	mov eax, [esp+30h]
	cmp eax, [esp+38h]
	jle loc_447B01
	mov eax, [esp+60h]
	cmp eax, [esp+68h]
	jle loc_447B01
	mov eax, [esp+90h]
	cmp eax, [esp+98h]
	jg loc_447A03

loc_447B01:
	mov eax, [esp]
	mov ecx, [esp+8]
	neg eax
	cmp eax, ecx
	jle loc_447B42
	mov eax, [esp+30h]
	mov ebx, [esp+38h]
	neg eax
	cmp eax, ebx
	jle loc_447B42
	mov eax, [esp+60h]
	mov edx, [esp+68h]
	neg eax
	cmp eax, edx
	jle loc_447B42
	mov eax, [esp+90h]
	mov ecx, [esp+98h]
	neg eax
	cmp eax, ecx
	jg loc_447A03

loc_447B42:
	mov edx, [esp+108h]
	mov eax, edi
	call sub_449670
	mov edx, dword_4D5BFC
	shl eax, 4
	add edx, eax
	mov eax, [edx+4]
	mov [esp+10Ch], edx
	mov [esp+160h], eax
	mov eax, [edx+0Ch]
	mov edx, [esp+158h]
	mov dword [dword_5117CC], eax
	mov eax, dword [dword_511808]
	inc edx
	lea ebx, [esp+0ECh]
	cmp edx, eax
	jle loc_447B8D
	xor edx, edx

loc_447B8D:
	mov eax, dword [dword_511804]
	call sub_4751F0
	mov edx, [esp+12Ch]
	lea eax, [esp+0ECh]
	call sub_4495E0
	mov edx, eax
	mov eax, edi
	call sub_449670
	mov edx, dword_4D5BFC
	shl eax, 4
	add edx, eax
	mov [esp+124h], edx
	cmp dword [esp+160h], 0
	jz loc_447BE3
	mov ecx, [esp+158h]
	mov eax, dword [dword_51180C]
	add eax, ecx
	or byte [eax+320h], 1

loc_447BE3:
	imul edx, esi, 118h
	mov eax, dword [dword_51180C]
	add eax, edx
	mov eax, [eax+454h]
	mov [esp+150h], eax
	mov eax, [esp+10Ch]
	mov [esp+14Ch], edx
	mov eax, [eax]
	mov edx, [esp+150h]
	add eax, eax
	add eax, edx
	mov ax, [eax+4]
	and eax, 0FFFFh
	mov [esp+130h], eax
	xor eax, eax
	mov ax, [edx+4]
	mov [esp+148h], eax
	mov eax, [esp+130h]
	mov ecx, [esp+148h]
	add eax, ecx
	call sub_4496C0
	mov [esp+154h], eax
	mov [esp+134h], eax
	test eax, eax
	jz loc_447A03
	mov eax, [esp+160h]
	add eax, eax
	add edx, eax
	mov [esp+138h], edx
	mov eax, [esp+138h]
	xor edx, edx
	mov dx, [eax+0Ch]
	imul edx, 24h
	lea eax, [esp+104h]
	call sub_46FE70
	test eax, eax
	jz loc_447A03
	mov eax, [esp+10Ch]
	mov eax, [eax+8]
	mov edx, ecx
	call sub_480A00
	imul eax, ecx, 30h
	add eax, [esp+154h]
	imul ecx, edx, 6
	mov ebx, [esp+14Ch]
	push eax
	mov eax, dword [dword_51180C]
	add eax, ebx
	mov eax, [eax+454h]
	lea ebx, [esp+0E4h]
	call sub_475130
	mov edx, [esp+134h]
	add ecx, eax
	mov eax, edi
	call sub_446530
	mov eax, [esp+124h]
	mov eax, [eax+8]
	mov ebx, [esp+14Ch]
	call sub_480A00
	mov eax, dword [dword_51180C]
	mov ecx, [esp+154h]
	add eax, ebx
	mov edx, [esp+148h]
	push ecx
	mov eax, [eax+454h]
	lea ebx, [esp+0F0h]
	call sub_475130
	mov ecx, eax
	mov eax, edi
	call sub_446530
	mov edx, 24h
	lea eax, [esp+100h]
	call sub_46FE70
	mov edx, [esp+14Ch]
	mov eax, dword [dword_51180C]
	mov ecx, [esp+138h]
	add edx, eax
	mov eax, [esp+160h]
	push 0
	mov ebx, [esp+104h]
	mov edx, [edx+eax*4+484h]
	xor eax, eax
	push 0
	mov ax, [ecx+0Ch]
	mov ecx, [esp+15Ch]
	call dword [dword_5117CC]
	test eax, eax
	jz loc_447DC6
	imul edx, eax, 24h
	lea eax, [esp+100h]
	call sub_46FEA0
	cmp dword [esp+0D0h], 0
	jnz loc_447FBC
	mov eax, [esp+100h]
	mov [esp+0C0h], eax

loc_447DAD:
	mov edx, 24h
	lea eax, [esp+0D0h]
	call sub_46FE70
	sub dword [esp+0D0h], 24h

loc_447DC6:
	mov ecx, [esp+160h]
	mov ebx, [esp+150h]
	add ecx, ecx
	add ecx, ebx
	xor eax, eax
	mov edx, [esp+128h]
	mov ax, [ecx+0Ch]
	add edx, eax
	add ebp, eax
	mov eax, [esp+10Ch]
	mov [esp+128h], edx
	mov eax, [eax+8]
	mov edx, 24h
	call sub_480A00
	lea eax, [esp+100h]
	call sub_46FE70
	imul edx, esi, 118h
	mov eax, dword [dword_51180C]
	add eax, edx
	mov edx, [esp+160h]
	push 0
	mov ebx, [esp+104h]
	mov edx, [eax+edx*4+488h]
	xor eax, eax
	push 0
	mov ax, [ecx+0Eh]
	mov ecx, [esp+13Ch]
	call dword [dword_5117CC]
	test eax, eax
	jz loc_447E92
	imul edx, eax, 24h
	lea eax, [esp+100h]
	call sub_46FEA0
	mov ecx, [esp+0D4h]
	test ecx, ecx
	jnz loc_447FD1
	mov eax, [esp+100h]
	mov [esp+0C4h], eax

loc_447E79:
	mov edx, 24h
	lea eax, [esp+0D4h]
	call sub_46FE70
	sub dword [esp+0D4h], 24h

loc_447E92:
	cmp dword [esp+160h], 4
	jnz loc_447ED4
	imul eax, esi, 118h
	push edi
	mov edx, [esp+138h]
	push edx
	mov edx, dword [dword_51180C]
	mov eax, [edx+eax+454h]
	lea ebx, [esp+0F4h]
	call sub_475130
	lea edx, [esp+0E8h]
	mov ecx, eax
	mov eax, esi
	call sub_448420

loc_447ED4:
	imul eax, esi, 118h
	mov edx, dword [dword_51180C]
	add eax, edx
	mov ecx, [eax+460h]
	test ecx, ecx
	jz loc_447F1F
	push 0FFFFFFFFh
	mov ebx, [eax+45Ch]
	push ebx
	lea edx, [esp+0DCh]
	mov eax, edi
	push ecx
	lea ebx, [esp+0D0h]
	mov ecx, esi
	call sub_4473E0
	mov ecx, [esp+15Ch]
	add ecx, eax
	add ebp, eax
	mov [esp+15Ch], ecx

loc_447F1F:
	imul edx, esi, 118h
	mov eax, dword [dword_51180C]
	add eax, edx
	mov ebx, [eax+464h]
	test ebx, ebx
	jz loc_447F69
	push 0FFFFFFFFh
	mov edx, [eax+45Ch]
	push edx
	mov ecx, esi
	mov eax, edi
	push ebx
	lea edx, [esp+0E8h]
	lea ebx, [esp+0D8h]
	call sub_4473E0
	mov ebx, [esp+15Ch]
	add ebx, eax
	add ebp, eax
	mov [esp+15Ch], ebx

loc_447F69:
	imul edx, esi, 118h
	mov eax, dword [dword_51180C]
	add eax, edx
	mov edx, [eax+468h]
	test edx, edx
	jz loc_447A03
	push 0FFFFFFFFh
	mov ecx, [eax+45Ch]
	push ecx
	lea ebx, [esp+0C8h]
	mov eax, edi
	push edx
	mov ecx, esi
	lea edx, [esp+0DCh]
	mov esi, [esp+168h]
	call sub_4473E0
	add esi, eax
	add ebp, eax
	mov [esp+15Ch], esi
	jmp loc_447A03

loc_447FBC:
	mov edx, [esp+0D0h]
	mov eax, [esp+100h]
	mov [edx], eax
	jmp loc_447DAD

loc_447FD1:
	mov eax, [esp+100h]
	mov [ecx], eax
	jmp loc_447E79

loc_447FDF:
	mov eax, 0Bh
	call sub_480A00
	mov eax, dword [dword_5117AC]
	mov edx, [eax+0A4h]
	push edx
	mov ecx, dword [dword_5117D4]
	mov ebx, dword [dword_5117C8]
	push ecx
	mov eax, edi
	lea edx, [esp+0E0h]
	push ebx
	xor ecx, ecx
	lea ebx, [esp+0D4h]
	mov esi, [esp+168h]
	call sub_4473E0
	add esi, eax
	mov [esp+15Ch], esi
	jmp loc_447974

loc_44802F:
	lea esi, [esp+0F8h]
	mov edi, edx
	call sub_46FE50
	lea esi, [esp+0F8h]
	movsd
	movsd
	jmp loc_4479A3
;sub_447870 endp

sub_448050: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	cmp dword [eax], 0
	jz loc_448064

loc_44805D:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_448064:
	mov edx, [eax+4]
	call sub_448AD0
	mov edx, dword [dword_5117AC]
	mov edx, [edx+8Ch]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword [dword_51180C]
	shl eax, 3
	add edx, 450h
	add eax, edx
	lea ebp, [eax+4Ch]
	xor ecx, ecx
	mov esi, ebp
	add ebp, 0C8h

loc_4480A4:
	movsx eax, word [esi]
	cmp eax, 0FFFFFFFFh
	jnz loc_4480CE

loc_4480AC:
	add esi, 2
	cmp esi, ebp
	jnz loc_4480A4
	test ecx, ecx
	jnz loc_44805D
	cmp dword [edi+4], 0
	jnz loc_448106
	mov eax, 0Eh
	call sub_4447D0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4480CE:
	lea edx, [eax+eax]
	mov eax, dword [dword_51180C]
	mov edx, [edx+eax+0C6h]
	sar edx, 10h
	cmp edx, 0FFFFFFFFh
	jz loc_4480AC
	imul edx, 118h
	add eax, edx
	mov ebx, [eax+47Ch]
	test ebx, ebx
	jz loc_4480AC
	mov edx, ebx
	mov eax, edi
	mov ebx, ecx
	call sub_447210
	or ecx, eax
	jmp loc_4480AC

loc_448106:
	mov eax, 15h
	call sub_4447D0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_448050 endp

sub_448120: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ecx, eax
	call sub_45BFE0
	mov edx, esp
	mov eax, ecx
	call sub_4481A0
	push 0
	push 0
	mov edx, [esp+0Ch]
	push edx
	mov ecx, [esp+0Ch]
	push ecx
	call sub_471280
	push 0
	push 60000h
	mov ebx, [esp+14h]
	push ebx
	mov esi, [esp+14h]
	push esi
	call sub_471280
	push 0
	push 0A0000h
	mov edi, [esp+24h]
	push edi
	mov ebp, [esp+24h]
	push ebp
	call sub_471280
	push 0
	mov eax, dword [dword_5117BC]
	push eax
	mov edx, [esp+1Ch]
	push edx
	mov ecx, [esp+1Ch]
	push ecx
	call sub_471280
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_448120 endp

sub_4481A0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	mov ecx, eax
	mov ebx, edx
	mov eax, [eax]
	test eax, eax
	jbe loc_448229
	cmp eax, 1
	jnz loc_4481C0
	mov edx, eax
	mov eax, ecx

loc_4481BB:
	call sub_448AD0

loc_4481C0:
	cmp dword [dword_51221C], 3
	jnz loc_4481E8
	mov eax, dword [dword_5117AC]
	mov esi, [eax+88h]
	cmp esi, 32h
	jle loc_448230
	cmp esi, 64h
	jge loc_448230
	mov dword [dword_5117BC], 0FFF00000h

loc_4481E8:
	mov edx, dword [dword_5117AC]
	mov edx, [edx+8Ch]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	lea edx, 0[eax*8]
	mov eax, dword [dword_51180C]
	add eax, 450h
	add edx, eax
	add edx, 4Ch
	mov eax, ecx
	call sub_447870
	call sub_4809F0
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_448229:
	mov eax, ecx
	mov edx, [ecx+4]
	jmp loc_4481BB

loc_448230:
	xor ebp, ebp
	mov dword [dword_5117BC], ebp
	jmp loc_4481E8
;sub_4481A0 endp

sub_448240: ;SUBROUTINE
	call sub_448B80
	cmp dword [dword_5117B8], 0FFFFFFFFh
	jle sub_448B50
	cmp dword [dword_5117B4], 0
	jz sub_448B50
	call sub_448BD0
	jmp sub_448B50
;sub_448240 endp

sub_448270: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+8], eax
	mov esi, edx
	mov edi, ecx
	xor edx, edx
	mov [esp+0Ch], edx
	mov [esp+4], edx
	test eax, eax
	jle loc_448315

loc_448290:
	lea edx, [esi+4]
	xor ecx, ecx
	mov cl, [edx+1]
	imul ecx, 30h
	lea eax, [edi+ecx]
	xor ecx, ecx
	mov [ebx+0Ch], eax
	mov cl, [edx]
	imul ecx, 30h
	lea eax, [edi+ecx]
	xor ecx, ecx
	mov [ebx+10h], eax
	mov cl, [edx+3]
	imul ecx, 30h
	lea eax, [edi+ecx]
	mov [ebx+14h], eax
	mov dl, [edx+2]
	and edx, 0FFh
	imul edx, 30h
	lea eax, [edi+edx]
	mov [ebx+18h], eax
	mov ecx, [ebx+10h]
	mov edx, [ebx+0Ch]
	movzx ebp, byte [ecx+24h]
	xor eax, eax
	mov ecx, [ebx+14h]
	mov al, [edx+24h]
	mov cl, [ecx+24h]
	and ebp, eax
	and ecx, 0FFh
	and ebp, ecx
	mov ecx, [ebx+18h]
	mov cl, [ecx+24h]
	and ecx, 0FFh
	test ebp, ecx
	jz loc_448322

loc_4482FD:
	add esi, 8

loc_448300:
	mov eax, [esp+0Ch]
	inc eax
	mov edx, [esp+8]
	mov [esp+0Ch], eax
	cmp eax, edx
	jl loc_448290

loc_448315:
	mov eax, [esp+4]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_448322:
	mov ecx, dword [dword_5117AC]
	mov edx, [edx+8]
	cmp edx, [ecx+0A4h]
	jg loc_4482FD
	lea eax, [ebx+24h]
	xor edx, edx
	mov [ebx], eax
	mov dx, [esi]
	lea ecx, 0[edx*8]
	mov edx, dword [dword_5117FC]
	add edx, ecx
	mov ecx, [edx]
	mov ebp, [edx+4]
	mov cl, [ecx+2]
	mov [ebx+1Ch], ebp
	movzx ebp, word [esi+2]
	mov dword [ebx+4], 8
	mov eax, [esp+20h]
	mov word [ebx+0Ah], 1
	mov [ebx+8], ax
	mov eax, [esp+24h]
	mov [ebx+20h], ebp
	test eax, eax
	jz loc_448382
	mov dword [ebx+20h], 0FFFFFFFFh

loc_448382:
	test cl, cl
	jz loc_4483EA
	test cl, 4
	jz loc_4483D3
	mov ebp, [edx]
	xor eax, eax
	mov al, [ebp+8]
	mov [esp], eax
	mov eax, dword [dword_540F48]
	mov edx, eax
	sar edx, 1Fh
	idiv dword [esp]
	mov ebp, [ebp+4]
	mov edx, eax
	sar ebp, 18h
	sar edx, 1Fh
	idiv ebp
	imul edx, 1Ch
	mov [esp], edx
	xor edx, edx
	mov ebp, dword [dword_5117FC]
	mov dx, [esi]
	mov eax, [esp]
	mov edx, [ebp+edx*8+4]
	mov dword [ebx+20h], 0FFFFFFFFh
	add eax, edx
	mov [ebx+1Ch], eax

loc_4483D3:
	test cl, 20h
	jz loc_4483DF
	mov dword [ebx+4], 9

loc_4483DF:
	test cl, 10h
	jz loc_4483FE
	mov word [ebx+0Ah], 2

loc_4483EA:
	mov edx, [esp+4]
	add esi, 8
	inc edx
	add ebx, 24h
	mov [esp+4], edx
	jmp loc_448300

loc_4483FE:
	test cl, 40h
	jz loc_4483EA
	mov word [ebx+0Ah], 0
	mov edx, [esp+4]
	add esi, 8
	inc edx
	add ebx, 24h
	mov [esp+4], edx
	jmp loc_448300
;sub_448270 endp

sub_448420: ;SUBROUTINE
	push esi
	push ebp
	sub esp, 58h
	mov [esp+2Ch], eax
	mov [esp+30h], edx
	mov [esp+34h], ecx
	mov ecx, [esp+2Ch]
	mov edx, [esp+2Ch]
	shl ecx, 3
	add ecx, edx
	shl ecx, 2
	sub ecx, edx
	mov eax, dword [dword_51180C]
	shl ecx, 3
	mov edx, 9
	mov eax, [ecx+eax+450h]
	call sub_475080
	mov edx, eax
	mov [esp+10h], eax
	test eax, eax
	jnz loc_44846E

loc_448466:
	add esp, 58h
	pop ebp
	pop esi
	ret 8

loc_44846E:
	xor eax, eax
	mov ax, [edx+6]
	shl eax, 2
	call sub_4496C0
	mov esi, eax
	test eax, eax
	jz loc_448466
	push edi
	mov eax, dword [dword_51180C]
	mov eax, [ecx+eax+450h]
	call sub_475060
	mov [esp+24h], eax
	mov eax, dword [dword_51180C]
	add edx, 8
	mov eax, [ecx+eax+454h]
	mov [esp+10h], edx
	mov ax, [eax+4]
	mov edx, [esp+34h]
	and eax, 0FFFFh
	mov ecx, [ebx]
	mov [esp+4], eax
	mov edi, [edx]
	mov ebp, [edx+4]
	mov eax, [ebx+4]
	sub ecx, edi
	mov edx, eax
	mov eax, [ebx+8]
	mov ebx, [esp+34h]
	sar ecx, 8
	mov edi, [ebx+8]
	mov ebx, eax
	movsx eax, cx
	mov ecx, eax
	sar ecx, 9
	sub edx, ebp
	add eax, ecx
	sar edx, 8
	mov [esp+40h], eax
	movsx eax, dx
	mov edx, eax
	sar edx, 9
	sub ebx, edi
	add eax, edx
	sar ebx, 8
	mov [esp+44h], eax
	movsx eax, bx
	mov edx, eax
	sar edx, 9
	add eax, edx
	mov [esp+48h], eax
	xor edx, edx

loc_44850F:
	mov ecx, [esp+14h]
	xor eax, eax
	mov ax, [ecx+6]
	shl eax, 2
	cmp edx, eax
	jl loc_4485A0
	mov ecx, word_50CC90
	mov ebx, [esp+34h]
	push esi
	mov edx, eax
	mov eax, [esp+70h]
	call sub_446530
	mov eax, [esp+30h]
	mov ecx, [esp+30h]
	shl eax, 3
	add eax, ecx
	xor edi, edi
	shl eax, 2
	mov edx, dword [dword_51180C]
	sub eax, ecx
	mov [esp+1Ch], edi
	mov ebx, [esp+14h]
	mov eax, [edx+eax*8+494h]
	add ebx, 8
	mov [esp+18h], eax

loc_448569:
	mov edx, [esp+14h]
	xor eax, eax
	mov ax, [edx+6]
	dec eax
	cmp edi, eax
	jge loc_448AAA
	imul eax, [esp+1Ch], 1Ch

loc_448581:
	mov ecx, [esp+14h]
	xor edx, edx
	mov dx, [ecx+6]
	dec edx
	cmp edi, edx
	jl loc_448966

loc_448594:
	add ebx, 4
	add esi, 0C0h
	inc edi
	jmp loc_448569

loc_4485A0:
	mov ecx, [esp+10h]
	xor eax, eax
	mov al, [ecx+1]
	add eax, [esp+24h]
	imul eax, 24h
	mov ecx, dword [dword_5118A4]
	mov ebx, [esp+10h]
	add ecx, eax
	xor eax, eax
	mov al, [ebx]
	mov [esp+20h], eax
	imul eax, 6
	mov ebx, [ecx+0Ch]
	sar ebx, 18h
	sar ebx, 1
	mov [esp+28h], ebx
	mov bl, [esp+28h]
	lea ebp, [ecx+12h]
	mov [esp+3Ch], bl
	mov ebx, [ecx+0Dh]
	mov ecx, [ecx+0Eh]
	sar ecx, 18h
	sar ecx, 1
	mov [esp+0Ch], ecx
	lea ecx, [edx+1]
	imul ecx, 6
	sar ebx, 18h
	sar ebx, 1
	mov [esp+8], ebx
	mov bl, [esp+8]
	mov [esp+3Dh], bl
	mov bl, [esp+0Ch]
	mov [esp+3Eh], bl
	imul ebx, edx, 6
	add eax, [esp+38h]
	mov edi, [esp+20h]
	cmp edi, [esp+4]
	jge loc_44881F
	mov di, [eax]
	add edi, [esp+40h]
	mov [esp+54h], edi
	movsx di, byte [esp+28h]
	mov [esp+58h], edi
	mov edi, [esp+54h]
	sub edi, [esp+58h]
	mov word word_50CC90[ebx], di
	mov di, [eax+2]
	add edi, 10h
	add edi, [esp+44h]
	mov [esp+50h], edi
	movsx di, byte [esp+8]
	mov [esp+54h], edi
	mov edi, [esp+50h]
	sub edi, [esp+54h]
	mov word word_50CC92[ebx], di
	mov di, [eax+4]
	add edi, [esp+48h]
	mov [esp+4Ch], edi
	movsx di, byte [esp+0Ch]
	mov [esp+50h], edi
	mov edi, [esp+4Ch]
	sub edi, [esp+50h]
	mov word word_50CC94[ebx], di
	mov edi, [esp+40h]
	mov bx, [eax]
	add ebx, edi
	mov [esp+4Ch], ebx
	mov edi, [esp+4Ch]
	movsx bx, byte [ebp+0]
	add ebx, edi
	mov edi, [esp+58h]
	sub ebx, edi
	mov word word_50CC90[ecx], bx
	mov bx, [eax+2]
	mov edi, [esp+44h]
	add ebx, 10h
	add edi, ebx
	movsx bx, byte [ebp+1]
	add ebx, edi
	mov edi, [esp+54h]
	sub ebx, edi
	mov word word_50CC92[ecx], bx
	mov ebx, [esp+48h]
	mov ax, [eax+4]
	add eax, ebx
	movsx bx, byte [ebp+2]
	mov edi, [esp+50h]
	add eax, ebx
	sub eax, edi

loc_4486EF:
	mov word word_50CC94[ecx], ax
	lea ebp, [edx+3]
	imul ebp, 6
	add dword [esp+10h], 4
	mov ecx, [esp+10h]
	xor eax, eax
	mov al, [ecx+1]
	add eax, [esp+24h]
	imul eax, 24h
	mov ecx, dword [dword_5118A4]
	mov ebx, [esp+10h]
	add ecx, eax
	xor eax, eax
	add edx, 2
	mov al, [ebx]
	imul ebx, edx, 6
	mov [esp+2Ch], eax
	imul eax, 6
	add eax, [esp+38h]
	mov edi, [esp+2Ch]
	add ecx, 12h
	cmp edi, [esp+4]
	jge loc_4488C2
	mov di, [eax]
	add edi, [esp+40h]
	mov [esp+4Ch], edi
	movsx di, byte [esp+3Ch]
	mov [esp+54h], edi
	mov edi, [esp+4Ch]
	add edi, [esp+54h]
	mov word word_50CC90[ebx], di
	mov di, [eax+2]
	add edi, 10h
	add edi, [esp+44h]
	mov [esp+50h], edi
	movsx di, byte [esp+3Dh]
	mov [esp+4Ch], edi
	mov edi, [esp+50h]
	add edi, [esp+4Ch]
	mov word word_50CC92[ebx], di
	mov di, [eax+4]
	add edi, [esp+48h]
	mov [esp+58h], edi
	movsx di, byte [esp+3Eh]
	mov [esp+50h], edi
	mov edi, [esp+58h]
	add edi, [esp+50h]
	mov word word_50CC94[ebx], di
	mov edi, [esp+40h]
	mov bx, [eax]
	add ebx, edi
	mov [esp+58h], ebx
	mov edi, [esp+58h]
	movsx bx, byte [ecx]
	add ebx, edi
	mov edi, [esp+54h]
	add ebx, edi
	mov word word_50CC90[ebp], bx
	mov bx, [eax+2]
	mov edi, [esp+44h]
	add ebx, 10h
	add edi, ebx
	movsx bx, byte [ecx+1]
	add ebx, edi
	mov edi, [esp+4Ch]
	add ebx, edi
	mov word word_50CC92[ebp], bx
	mov ebx, [esp+48h]
	mov ax, [eax+4]
	add eax, ebx
	movsx bx, byte [ecx+2]
	mov ecx, [esp+50h]
	add eax, ebx
	add eax, ecx
	mov word word_50CC94[ebp], ax
	add edx, 2
	jmp loc_44850F

loc_44881F:
	movsx di, byte [esp+28h]
	mov [esp+58h], edi
	mov di, [eax]
	sub edi, [esp+58h]
	mov word word_50CC90[ebx], di
	mov di, [eax+2]
	add edi, 10h
	mov [esp+50h], edi
	movsx di, byte [esp+8]
	mov [esp+54h], edi
	mov edi, [esp+50h]
	sub edi, [esp+54h]
	mov word word_50CC92[ebx], di
	movsx di, byte [esp+0Ch]
	mov [esp+50h], edi
	mov di, [eax+4]
	sub edi, [esp+50h]
	mov word word_50CC94[ebx], di
	movsx bx, byte [ebp+0]
	add bx, [eax]
	mov edi, [esp+58h]
	sub ebx, edi
	mov word word_50CC90[ecx], bx
	mov bx, [eax+2]
	add ebx, 10h
	mov [esp+4Ch], ebx
	mov edi, [esp+4Ch]
	movsx bx, byte [ebp+1]
	add ebx, edi
	mov edi, [esp+54h]
	sub ebx, edi
	mov word word_50CC92[ecx], bx
	movsx bx, byte [ebp+2]
	mov ax, [eax+4]
	add eax, ebx
	mov ebx, [esp+50h]
	sub eax, ebx
	jmp loc_4486EF

loc_4488C2:
	movsx di, byte [esp+3Ch]
	mov [esp+4Ch], edi
	mov di, [eax]
	add edi, [esp+4Ch]
	mov word word_50CC90[ebx], di
	mov di, [eax+2]
	add edi, 10h
	mov [esp+50h], edi
	movsx di, byte [esp+3Dh]
	mov [esp+54h], edi
	mov edi, [esp+50h]
	add edi, [esp+54h]
	mov word word_50CC92[ebx], di
	movsx di, byte [esp+3Eh]
	mov [esp+50h], edi
	mov di, [eax+4]
	add edi, [esp+50h]
	mov word word_50CC94[ebx], di
	movsx bx, byte [ecx]
	add bx, [eax]
	mov edi, [esp+4Ch]
	add ebx, edi
	mov word word_50CC90[ebp], bx
	mov bx, [eax+2]
	movsx di, byte [ecx+1]
	add ebx, 10h
	add ebx, edi
	mov edi, [esp+54h]
	add ebx, edi
	mov word word_50CC92[ebp], bx
	movsx bx, byte [ecx+2]
	mov cx, [eax+4]
	mov edi, [esp+50h]
	add ebx, ecx
	add ebx, edi
	mov word word_50CC94[ebp], bx
	add edx, 2
	jmp loc_44850F

loc_448966:
	cmp byte [ebx+2], 0FFh
	jz loc_448594
	xor edx, edx
	mov dl, [ebx+2]
	mov dword dword_50B6B0[eax], edx
	xor edx, edx
	mov dl, [ebx]
	imul edx, 6
	add edx, [esp+38h]
	mov ecx, [edx+2]
	sar ecx, 10h
	movsx edx, word [edx]
	add edx, ecx
	mov dword dword_50B6B8[eax], edx
	xor edx, edx
	mov dl, [ebx+3]
	mov ebp, [esp+18h]
	shl edx, 3
	add edx, ebp
	mov dx, [edx+2]
	and edx, 0FFFFh
	mov ebp, edx
	mov ecx, edx
	sar ebp, 0Ah
	sar ecx, 0Dh
	and ebp, 7
	and ecx, 7
	add ecx, ebp
	mov ebp, edx
	sar ebp, 7
	sar edx, 4
	and ebp, 7
	and edx, 7
	add ecx, ebp
	add ecx, edx
	xor edx, edx
	mov dl, [ebx+7]
	mov ebp, [esp+18h]
	shl edx, 3
	add edx, ebp
	sar ecx, 2
	mov dx, [edx+2]
	and edx, 0FFFFh
	mov ebp, edx
	sar ebp, 0Dh
	and ebp, 7
	mov [esp+2Ch], ebp
	mov ebp, edx
	sar ebp, 0Ah
	and ebp, 7
	mov [esp+20h], ebp
	mov ebp, [esp+2Ch]
	add ebp, [esp+20h]
	mov [esp+20h], ebp
	mov ebp, edx
	sar ebp, 7
	add ecx, ecx
	and ebp, 7
	add ecx, 2
	mov [esp+2Ch], ebp
	mov ebp, [esp+20h]
	sar edx, 4
	add ebp, [esp+2Ch]
	and edx, 7
	add edx, ebp
	mov ebp, ecx
	sar edx, 2
	sar ebp, 1
	sar ecx, 3
	add edx, edx
	sub ebp, ecx
	add edx, 2
	mov ecx, ebp
	mov ebp, edx
	sar ebp, 1
	sar edx, 3
	sub ebp, edx
	mov edx, ebp
	shl ebp, 0Dh
	shl edx, 0Ah
	or ebp, edx
	mov edx, ecx
	shl edx, 7
	shl ecx, 4
	or edx, ebp
	add eax, 1Ch
	or edx, ecx
	mov dword dword_50B698[eax], edx
	lea edx, [esi+30h]
	mov dword dword_50B6A0[eax], edx
	mov dword dword_50B6A4[eax], esi
	lea edx, [esi+60h]
	inc edi
	mov dword dword_50B6A8[eax], edx
	lea edx, [esi+90h]
	add ebx, 4
	mov dword dword_50B6AC[eax], edx
	mov edx, [esp+1Ch]
	inc edx
	add esi, 0C0h
	mov [esp+1Ch], edx
	jmp loc_448581

loc_448AAA:
	mov edx, dword_50B6B0
	mov eax, [esp+1Ch]
	call sub_45BDB0
	pop edi
	add esp, 58h
	pop ebp
	pop esi
	ret 8
;sub_448420 endp

sub_448AD0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov eax, edx
	call sub_446CB0
	mov edx, dword [dword_5117AC]
	mov ebx, 1
	mov eax, [edx+10h]
	add edx, 4
	mov dword [dword_5117C4], eax
	lea eax, [ecx+8]
	call sub_44A6D0
	mov eax, dword [dword_5117AC]
	mov edx, [eax+88h]
	mov ecx, [eax+78h]
	cmp edx, ecx
	jnz loc_448B1C
	mov eax, dword [dword_5117AC]
	mov edx, [eax+7Ch]
	mov [eax+8Ch], edx
	pop ecx
	pop ebx
	ret

loc_448B1C:
	mov [eax+88h], ecx
	mov edx, [eax+90h]
	mov dword [eax+90h], 0FFFFFFFFh
	mov [eax+94h], edx
	mov eax, dword [dword_5117AC]
	mov edx, [eax+7Ch]
	mov [eax+8Ch], edx
	pop ecx
	pop ebx
	ret
;sub_448AD0 endp

sub_448B50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_51180C]
	mov edx, ecx
	xor eax, eax

loc_448B5D:
	mov bl, [edx+eax+320h]
	inc eax
	and bl, 8Ch
	mov [edx+eax+31Fh], bl
	cmp eax, 12Ch
	jl loc_448B5D
	mov dword [dword_51180C], ecx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_448B50 endp

sub_448B80: ;SUBROUTINE
	push ebx
	push edx
	xor eax, eax

loc_448B84:
	mov edx, dword [dword_51180C]
	add edx, eax
	mov bl, [edx+320h]
	test bl, 2
	jz loc_448B9C
	test bl, 4
	jz loc_448BA7

loc_448B9C:
	inc eax
	cmp eax, 12Ch
	jl loc_448B84
	pop edx
	pop ebx
	ret

loc_448BA7:
	call sub_448FF0
	pop edx
	pop ebx
	ret
;sub_448B80 endp

sub_448BB0: ;SUBROUTINE
	mov edx, 0Ch
	call sub_475080
	test eax, eax
	jnz loc_448BBF
	ret

loc_448BBF:
	add eax, 8
	xor edx, edx
	ret
;sub_448BB0 endp

sub_448BD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov eax, dword [dword_5117B4]
	mov ax, [eax+4]
	and eax, 0FFFFh
	xor edx, edx
	mov [esp+4], eax
	mov [esp+10h], edx
	test eax, eax
	jle loc_448C32

loc_448BF5:
	mov edx, [esp+10h]
	mov eax, dword [dword_5117B4]
	call sub_475190
	mov edx, eax
	mov [esp+8], eax
	call sub_475040
	mov ebx, eax
	mov esi, eax
	mov eax, dword [dword_51180C]
	test byte [ebx+eax+320h], 4
	jz loc_448C4F

loc_448C21:
	mov ebx, [esp+10h]
	inc ebx
	mov esi, [esp+4]
	mov [esp+10h], ebx
	cmp ebx, esi
	jl loc_448BF5

loc_448C32:
	xor ebx, ebx
	mov ecx, 0FFFFFFFFh
	mov dword [dword_5117B4], ebx
	mov dword [dword_5117B8], ecx
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_448C4F:
	call sub_448EC0
	mov edi, eax
	mov [esp+0Ch], eax
	cmp eax, 0FFFFFFFFh
	jz loc_448C21
	imul ecx, edi, 118h
	mov eax, dword [dword_51180C]
	mov [ecx+eax+450h], edx
	mov eax, edx
	call sub_475140
	mov ebp, dword [dword_51180C]
	add ebp, ecx
	mov [ebp+454h], eax
	mov eax, edx
	call sub_475060
	mov edx, dword [dword_51180C]
	mov [ecx+edx+564h], eax
	mov eax, [ecx+edx+450h]
	mov edx, 8
	call sub_475080
	mov edx, dword [dword_51180C]
	mov [ecx+edx+45Ch], eax
	mov eax, [ecx+edx+450h]
	mov edx, 7
	call sub_475080
	mov edx, dword [dword_51180C]
	add edx, ecx
	mov [edx+460h], eax
	mov eax, [edx+450h]
	mov edx, 13h
	call sub_475080
	mov edx, dword [dword_51180C]
	mov [ecx+edx+464h], eax
	mov eax, [ecx+edx+450h]
	mov edx, 12h
	call sub_475080
	mov edx, eax
	mov eax, dword [dword_51180C]
	mov [ecx+eax+468h], edx
	mov edx, 11h
	mov eax, [ecx+eax+450h]
	call sub_475080
	mov edx, eax
	mov eax, dword [dword_51180C]
	mov [ecx+eax+47Ch], edx
	mov edx, 0Ah
	mov eax, [ecx+eax+450h]
	call sub_475080
	mov edx, eax
	mov eax, dword [dword_51180C]
	mov [ecx+eax+480h], edx
	mov edx, 5
	mov eax, [ecx+eax+450h]
	call sub_475080
	mov edx, dword [dword_51180C]
	mov [ecx+edx+474h], eax
	mov eax, [ecx+edx+450h]
	mov edx, 0Dh
	call sub_475080
	mov edx, dword [dword_51180C]
	add edx, ecx
	mov [edx+470h], eax
	mov eax, [edx+450h]
	mov edx, 6
	call sub_475080
	mov edx, dword [dword_51180C]
	mov [ecx+edx+46Ch], eax
	mov eax, [ecx+edx+450h]
	mov edx, 0Bh
	call sub_475080
	mov edx, dword [dword_51180C]
	mov [ecx+edx+478h], eax
	mov edx, [ecx+edx+454h]
	mov eax, edx
	call sub_4750F0
	mov [esp], eax
	mov eax, dword [dword_51180C]
	mov ebp, [esp]
	mov [ecx+eax+484h], ebp
	movzx ebp, word [edx+0Ch]
	shl ebp, 3
	mov [esp], ebp
	mov ebp, [ecx+eax+484h]
	add ebp, [esp]
	mov [ecx+eax+488h], ebp
	movzx ebp, word [edx+0Eh]
	shl ebp, 3
	mov [esp], ebp
	mov ebp, [ecx+eax+488h]
	add ebp, [esp]
	mov [ecx+eax+48Ch], ebp
	movzx ebp, word [edx+10h]
	shl ebp, 3
	mov [esp], ebp
	mov ebp, [ecx+eax+48Ch]
	add ebp, [esp]
	mov [ecx+eax+490h], ebp
	movzx ebp, word [edx+12h]
	shl ebp, 3
	mov [esp], ebp
	mov ebp, [ecx+eax+490h]
	add ebp, [esp]
	mov [ecx+eax+494h], ebp
	mov dx, [edx+14h]
	and edx, 0FFFFh
	shl edx, 3
	add edx, ebp
	mov [ecx+eax+498h], edx
	mov ecx, [esp+0Ch]
	mov [eax+edi*2], bx
	mov edx, dword [dword_5117B8]
	mov [eax+ebx*2+0C8h], cx
	cmp ebx, edx
	jnz loc_448E8D
	or byte [ebx+eax+320h], 1

loc_448E8D:
	mov eax, dword [dword_51180C]
	or byte [esi+eax+320h], 6
	mov eax, [esp+0Ch]
	mov edx, esi
	call sub_447310
	mov eax, [esp+8]
	mov edx, esi
	call sub_448BB0
	jmp loc_448C21
;sub_448BD0 endp

sub_448EC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, dword [dword_51180C]
	xor eax, eax
	xor edi, edi

loc_448ED3:
	mov edx, esi
	movsx edx, word [edx+eax]
	cmp edx, 0FFFFFFFFh
	jz loc_448F5D
	add eax, 2
	inc edi
	cmp eax, 0C8h
	jl loc_448ED3
	mov edx, esi
	xor eax, eax
	xor edi, edi

loc_448EF3:
	lea ecx, [esi+eax]
	movsx ebp, word [ecx]
	mov [esp], ecx
	lea ecx, [esi+ebp]
	mov bl, [ecx+320h]
	test bl, 4
	jz loc_448F0F
	test bl, 2
	jz loc_448F61

loc_448F0F:
	add eax, 2
	inc edi
	cmp eax, 0C8h
	jl loc_448EF3
	mov edx, esi
	xor eax, eax
	xor edi, edi

loc_448F20:
	lea ecx, [esi+eax]
	movsx ebp, word [ecx]
	mov [esp+4], ecx
	lea ecx, [esi+ebp]
	mov bl, [ecx+320h]
	test bl, 4
	jz loc_448F3D
	test bl, 1
	jz loc_448F9A

loc_448F3D:
	add eax, 2
	inc edi
	cmp eax, 0C8h
	jl loc_448F20
	mov eax, 0FFFFFFFFh

loc_448F4D:
	mov dword [dword_51180C], esi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_448F5D:
	mov eax, edi
	jmp loc_448F4D

loc_448F61:
	mov al, bl
	and al, 0FAh
	mov [ecx+320h], al
	mov eax, [esp]
	mov word [edx+ebp*2+0C8h], 0FFFFh
	mov word [eax], 0FFFFh
	lea eax, 0[edi*8]
	add eax, edi
	shl eax, 2
	sub eax, edi
	mov dword [edx+eax*8+450h], 0
	mov eax, edi
	jmp loc_448F4D

loc_448F9A:
	mov al, bl
	and al, 0FBh
	mov [ecx+320h], al
	mov eax, [esp+4]
	mov word [edx+ebp*2+0C8h], 0FFFFh
	mov word [eax], 0FFFFh
	lea eax, 0[edi*8]
	add eax, edi
	shl eax, 2
	sub eax, edi
	mov dword [edx+eax*8+450h], 0
	mov eax, edi
	mov dword [dword_51180C], esi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_448EC0 endp

sub_448FF0: ;SUBROUTINE
	push esi
	mov esi, eax
	cmp eax, 0FFFFFFFFh
	jz loc_44901E
	cmp dword [dword_5117B8], 0FFFFFFFFh
	jg loc_44901E
	test eax, eax
	jl loc_44900D
	cmp eax, dword [dword_511808]
	jle loc_449025

loc_44900D:
	xor esi, esi

loc_44900F:
	mov eax, dword [dword_51180C]
	test byte [esi+eax+320h], 4
	jz loc_449033

loc_44901E:
	mov eax, 0FFFFFFFFh
	pop esi
	ret

loc_449025:
	cmp dword [dword_5117C0], 1234h
	jnz loc_44900D
	jmp loc_44900F

loc_449033:
	push edi
	push edx
	push ecx
	push ebx
	mov eax, esi
	mov ebx, dword [dword_5117B4]
	call sub_475150
	xor ecx, ecx
	mov edi, dword [dword_511804]
	mov edx, eax
	mov eax, edi
	call sub_47FA30
	mov dword [dword_5117B4], eax
	mov dword [dword_5117B8], esi
	xor eax, eax
	pop ebx
	pop ecx
	pop edx
	pop edi
	pop esi
	ret
;sub_448FF0 endp

sub_449070: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp dword [dword_5117B8], 0FFFFFFFFh
	jle loc_449081
	call sub_448BD0

loc_449081:
	mov eax, edx
	call sub_448FF0
	cmp eax, 0FFFFFFFFh
	jnz loc_449094
	mov eax, 1
	pop edx
	ret

loc_449094:
	call sub_448BD0
	mov eax, 1
	pop edx
	ret
;sub_449070 endp

sub_4490A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor edx, edx
	mov ecx, dword [dword_5117E0]
	mov dword [dword_5117C0], edx
	test ecx, ecx
	jz loc_4490BC
	mov eax, ecx
	call sub_4848FC

loc_4490BC:
	mov eax, dword [dword_51180C]
	call sub_49E448
	mov eax, dword [dword_5117A8]
	call sub_4848FC
	mov eax, dword [dword_511804]
	call sub_47FA50
	call sub_4752D0
	call sub_446D10
	mov ebx, dword [dword_5117A4]
	test ebx, ebx
	jnz loc_449106
	call sub_440CF0
	mov eax, dword [dword_5117E8]
	call sub_49E448
	pop edx
	pop ecx
	pop ebx
	ret

loc_449106:
	mov eax, ebx
	call sub_49E448
	call sub_440CF0
	mov eax, dword [dword_5117E8]
	call sub_49E448
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4490A0 endp

sub_449120: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 70h
	mov ecx, 1234h
	xor edx, edx
	mov ebx, 0FFFFFFFFh
	mov dword [dword_51180C], edx
	mov dword [dword_5117C0], ecx
	mov dword [dword_5117B8], ebx
	call sub_446980
	mov edi, dword [dword_51221C]
	mov dword [dword_5117BC], edx
	cmp edi, 2
	jnz loc_449165
	mov dword [dword_5117BC], 0FFF40000h

loc_449165:
	mov eax, dword_4CBFB8
	mov edx, 320h
	call sub_449610
	call sub_440D30
	mov eax, dword_5117D8
	call sub_447180
	call sub_446D10
	mov eax, dword [dword_512208]
	cmp eax, 1
	jnz loc_449214
	mov ecx, dword_50E2A0
	mov ebx, dword_50DF50
	mov edx, 10h
	call sub_446B20
	mov ecx, dword_50FBA0
	mov ebx, dword_50DF74
	mov edx, 20h
	mov eax, 2

loc_4491BE:
	call sub_446B20
	xor eax, eax
	call sub_446CB0
	call sub_4465C0
	mov eax, a_col ; ".col"
	call sub_449640
	call sub_4469B0
	call sub_446F90
	call sub_4752F0
	test eax, eax
	jnz loc_449243

loc_4491EC:
	call sub_449410
	mov eax, 5
	call sub_47D4C0
	xor eax, eax
	call sub_449070
	mov eax, dword [dword_5117B0]
	call sub_42CD64
	add esp, 70h
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_449214:
	mov ecx, dword_50E2A0
	mov ebx, dword_50DF50
	mov edx, 10h
	xor eax, eax
	call sub_446B20
	mov ecx, dword_50FBA0
	mov ebx, dword_50DF74
	mov edx, 10h
	mov eax, 3
	jmp loc_4491BE

loc_449243:
	push esi
	mov eax, a_trk ; ".trk"
	call sub_449640
	call sub_49E380
	mov edx, dword [dword_513484]
	push edx
	push aSmain_trk ; "%smain.trk"
	mov edi, eax
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, a_trk ; ".trk"
	xor edx, edx
	call sub_449640
	call sub_446440
	mov esi, eax
	lea eax, [esp+4]
	call sub_488570
	jmp loc_449292

loc_449292:
	lea ecx, [esp+70h]
	lea ebx, [esp+6Ch]
	lea edx, [esp+68h]
	lea eax, [esp+4]
	call sub_4877C4
	mov eax, [esp+68h]
	mov ebx, edi
	mov edx, esi
	call sub_487960
	mov ebx, 113000h
	mov eax, [esp+68h]
	mov edx, esi
	sub ebx, edi
	call sub_487960
	mov eax, [esp+68h]
	call sub_487950
	mov eax, esi
	call sub_49E448
	lea eax, [esp+4]
	call sub_47FAE0
	mov dword [dword_511804], eax
	mov eax, a_trk ; ".trk"
	call sub_449640
	mov eax, dword [dword_511804]
	call sub_475270
	mov eax, dword [dword_511804]
	call sub_475240
	mov eax, dword [dword_511804]
	call sub_475210
	mov eax, dword [dword_511804]
	xor ecx, ecx
	call sub_475210
	mov eax, dword [dword_511804]
	mov edx, 71B0h
	call sub_4752A0
	dec eax
	xor ebx, ebx
	mov dword [dword_511808], eax
	mov eax, dword [dword_511804]
	mov dword [dword_5117B4], ecx
	call sub_475210
	mov eax, aChunklist ; "ChunkList"
	call sub_4471C0
	mov dword [dword_51180C], eax
	xor edx, edx
	xor eax, eax
	pop esi

loc_449353:
	mov ecx, dword [dword_51180C]
	lea ebx, [edx+ecx]
	mov dword [ebx+450h], 0
	mov word [ecx+eax], 0FFFFh
	add eax, 2
	add edx, 118h
	cmp eax, 0C8h
	jnz loc_449353
	xor edx, edx
	xor eax, eax

loc_449380:
	mov ecx, dword [dword_51180C]
	lea ebx, [edx+ecx]
	inc eax
	mov word [ebx+0C8h], 0FFFFh
	add edx, 2
	mov byte [ecx+eax+31Fh], 0
	cmp eax, 12Ch
	jl loc_449380
	jmp loc_4491EC
;sub_449120 endp

sub_4493C0: ;SUBROUTINE
	push edx
	add eax, 14h
	call sub_449490
	test eax, eax
	jz loc_4493E5
	push ecx
	mov ecx, dword [dword_5117C4]
	mov eax, dword [dword_5117A8]
	add eax, ecx
	mov al, [eax]
	and eax, 0FFh
	pop ecx
	pop edx
	ret

loc_4493E5:
	mov edx, dword [dword_5118A0]
	mov eax, dword [dword_5117C4]
	add eax, edx
	mov edx, dword [dword_5117A8]
	mov al, [edx+eax]
	and eax, 0FFh
	pop edx
	ret
;sub_4493C0 endp

sub_449410: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_5117A8]
	mov eax, a_dis ; ".dis"
	xor edx, edx
	call sub_449640
	call sub_486F50
	mov ecx, eax
	test eax, eax
	jz loc_449438

loc_44942F:
	mov dword [dword_5117A8], ecx
	pop edx
	pop ecx
	ret

loc_449438:
	push ebx
	mov edx, aCNfs2seGameC_3 ; "c:\\nfs2se\\game\\common\\bworld.c"
	mov ebx, 1D0h
	mov eax, aBwdistfront ; "BWDistFront"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov edx, dword [dword_5118A0]
	xor ebx, ebx
	shl edx, 3
	mov dword [dword_5117A8], ecx
	call sub_484498
	mov ecx, eax
	xor eax, eax
	pop ebx

loc_44946F:
	mov edx, dword [dword_5118A0]
	add edx, edx
	cmp eax, edx
	jge loc_44942F
	mov edx, ecx
	mov byte [edx+eax], 64h
	inc eax
	jmp loc_44946F
;sub_449410 endp

sub_449490: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	sub esp, 18h
	mov edx, dword [dword_5117C4]
	lea esi, [eax+18h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edi, esp
	add eax, edx
	movsd
	movsd
	movsd
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+0Ch], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	mov eax, [eax+0Eh]
	shl edx, 9
	sar eax, 18h
	mov [esp+10h], edx
	shl eax, 9
	mov edx, [esp+0Ch]
	mov [esp+14h], eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	test eax, eax
	jle loc_44952B
	mov eax, 1
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_44952B:
	xor eax, eax
	add esp, 18h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_449490 endp

sub_449540: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov dword [dword_5117B8], 0FFFFFFFFh
	call sub_446980
	xor eax, eax
	call sub_446CB0
	xor edx, edx
	xor eax, eax

loc_44955D:
	mov ecx, dword [dword_51180C]
	lea ebx, [edx+ecx]
	mov dword [ebx+450h], 0
	mov word [ecx+eax], 0FFFFh
	add eax, 2
	add edx, 118h
	cmp eax, 0C8h
	jnz loc_44955D
	xor edx, edx
	xor eax, eax

loc_44958A:
	mov ecx, dword [dword_51180C]
	lea ebx, [edx+ecx]
	inc eax
	mov word [ebx+0C8h], 0FFFFh
	add edx, 2
	mov byte [ecx+eax+31Fh], 0
	cmp eax, 12Ch
	jl loc_44958A
	mov eax, dword [dword_511808]
	sub eax, 8
	call sub_449070
	mov eax, dword [dword_511808]
	call sub_449070
	xor eax, eax
	call sub_449070
	mov eax, 8
	call sub_449070
	call sub_440DC0
	pop edx
	pop ecx
	pop ebx
	ret
;sub_449540 endp

sub_4495E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov ebx, [ecx+8]
	mov eax, [edx+8]
	sub eax, ebx
	mov ebx, eax
	sar ebx, 0Ch
	imul ebx, ebx
	mov esi, [ecx]
	mov eax, [edx]
	sub eax, esi
	sar eax, 0Ch
	imul eax, eax
	sar ebx, 6
	sar eax, 6
	add eax, ebx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4495E0 endp

sub_449610: ;SUBROUTINE
	push ecx
	push edx
	push eax
	mov edx, dword [dword_5117B0]
	push edx
	mov ecx, dword [dword_513488]
	push ecx
	push aStr02dS ; "%sTr%02d%s"
	push dword_511850
	call sprintf_
	mov eax, dword_511850
	add esp, 14h
	pop edx
	pop ecx
	ret
;sub_449610 endp

sub_449640: ;SUBROUTINE
	push ecx
	push edx
	push eax
	mov edx, dword [dword_5117B0]
	push edx
	mov ecx, dword [dword_513480]
	push ecx
	push aStr02dS ; "%sTr%02d%s"
	push dword_511810
	call sprintf_
	mov eax, dword_511810
	add esp, 14h
	pop edx
	pop ecx
	ret
;sub_449640 endp

sub_449670: ;SUBROUTINE
	push ecx
	cmp dword [eax], 1
	jz loc_4496A9
	mov ecx, dword [dword_5117AC]
	mov eax, [ecx+0B0h]
	sar eax, 0Ch
	imul eax, eax
	sar eax, 6
	cmp edx, eax
	jg loc_4496A9
	mov eax, [ecx+0ACh]
	sar eax, 0Ch
	imul eax, eax
	sar eax, 6
	cmp edx, eax
	jle loc_4496AD
	mov eax, 1
	pop ecx
	ret

loc_4496A9:
	xor eax, eax
	pop ecx
	ret

loc_4496AD:
	mov eax, 2
	pop ecx
	ret
;sub_449670 endp

sub_4496C0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	mov ecx, eax
	lea edx, 0[eax*4]
	sub edx, eax
	mov eax, esp
	shl edx, 4
	call sub_46FEA0
	mov edx, dword [dword_4D5C2C]
	add edx, ecx
	mov eax, [esp]
	mov dword [dword_4D5C2C], edx
	add esp, 4
	pop edx
	pop ecx
	ret
;sub_4496C0 endp

sub_449700: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, eax
	mov ebx, [eax+0A8h]
	mov ecx, eax
	test ebx, ebx
	jle loc_4497D4
	mov eax, ebx

loc_44971A:
	mov esi, [ecx+0B0h]
	test esi, esi
	jle loc_4497DD
	mov ebx, esi

loc_44972A:
	add ebx, eax
	sar ebx, 10h
	mov eax, ebx
	cmp ebx, 64h
	jle loc_4497E6
	mov eax, 64h

loc_44973F:
	mov edi, [edx+288h]
	test edi, edi
	jz loc_4497F9

loc_44974D:
	neg eax

loc_44974F:
	test eax, eax
	jl loc_449811
	mov edi, [ecx+14h]
	mov ebp, dword [dword_5118A0]
	add eax, edi
	cmp eax, ebp
	jl loc_449768
	sub eax, ebp

loc_449768:
	mov edx, eax
	lea eax, 0[edx*8]
	lea ecx, [edx+eax]
	mov eax, dword [dword_5118A4]
	shl ecx, 2
	mov ax, [ecx+eax+16h]
	mov ebx, dword [dword_51180C]
	and eax, 0FFFFh
	mov ecx, [ebx+eax*2+0C6h]
	sar ecx, 10h
	test ecx, ecx
	jl loc_449827
	lea eax, 0[ecx*8]
	add eax, ecx
	shl eax, 2
	sub eax, ecx
	shl eax, 3
	add ebx, eax
	mov eax, [ebx+46Ch]
	lea ecx, [eax+8]
	mov esi, [ebx+564h]
	mov eax, edx
	sub eax, esi
	mov al, [ecx+eax*8+3]
	and eax, 0FFh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4497D4:
	mov eax, ebx
	neg eax
	jmp loc_44971A

loc_4497DD:
	mov ebx, esi
	neg ebx
	jmp loc_44972A

loc_4497E6:
	cmp ebx, 0FFFFFF9Ch
	jge loc_44973F
	mov eax, 0FFFFFF9Ch
	jmp loc_44973F

loc_4497F9:
	jnz loc_44974F
	cmp dword [dword_512228], 0
	jnz loc_44974D
	jmp loc_44974F

loc_449811:
	add eax, [ecx+14h]
	test eax, eax
	jge loc_449768
	add eax, dword [dword_5118A0]
	jmp loc_449768

loc_449827:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_449700 endp

sub_449830: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov ebx, dword [dword_5117C4]
	lea esi, 0[ebx*8]
	add esi, ebx
	mov eax, dword [dword_5118A4]
	shl esi, 2
	mov edx, [esi+eax+0Ch]
	sar edx, 18h
	mov eax, [ecx+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov eax, dword [dword_5118A4]
	mov edx, [esi+eax+0Dh]
	sar edx, 18h
	mov eax, [ecx+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_5118A4]
	add edi, eax
	mov edx, [edx+esi+0Eh]
	mov eax, [ecx+34h]
	sar edx, 18h
	xor ebp, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512228]
	add eax, edi
	test edx, edx
	jnz loc_4498AF
	test eax, eax
	jl loc_4498C0

loc_4498AF:
	cmp dword [dword_512228], 0
	jz loc_449931
	test eax, eax
	jle loc_449931

loc_4498C0:
	mov eax, 0FFFFFFFEh
	add eax, ebx
	test eax, eax
	jl loc_44994A

loc_4498CF:
	mov ebx, dword [dword_51221C]
	mov edx, eax
	test ebx, ebx
	jnz loc_4498FB
	shl eax, 3
	lea ebx, [edx+eax]
	mov eax, dword [dword_5118A4]
	shl ebx, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Eh]
	sar ebx, 4
	and ebx, 0Fh
	cmp ebx, 2
	jnz loc_449955

loc_4498FB:
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Eh]
	sar edx, 4
	and edx, 0Fh
	cmp edx, 2
	jnz loc_449A02

loc_449922:
	mov eax, 1
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_449931:
	test ebp, ebp
	jnz loc_4498C0
	mov eax, 2
	mov edi, dword [dword_5118A0]
	add eax, ebx
	cmp eax, edi
	jl loc_4498CF
	sub eax, edi
	jmp loc_4498CF

loc_44994A:
	add eax, dword [dword_5118A0]
	jmp loc_4498CF

loc_449955:
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jz loc_4498FB
	cmp edx, 4D0h
	jle loc_4498FB
	cmp edx, 4F6h
	jge loc_4498FB
	mov ebx, edx
	shl ebx, 3
	add ebx, edx
	mov eax, dword [dword_5118A4]
	shl ebx, 2
	mov edx, [ecx+8]
	sub edx, [ebx+eax]
	mov edi, [ebx+eax+4]
	mov [esp], edx
	mov edx, [ecx+0Ch]
	sub edx, edi
	mov ebp, [ebx+eax+8]
	mov [esp+4], edx
	mov edx, [ecx+10h]
	sub edx, ebp
	mov [esp+8], edx
	mov edx, [ebx+eax+0Fh]
	mov eax, [esp]
	sar edx, 18h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, dword [dword_5118A4]
	mov edx, [ebx+eax+10h]
	mov eax, [esp+4]
	sar edx, 18h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, dword [dword_5118A4]
	mov edx, [ebx+eax+11h]
	mov eax, [esp+8]
	sar edx, 18h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	test eax, eax
	jl loc_449922
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_449A02:
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jz loc_449922
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_449830 endp

sub_449A20: ;SUBROUTINE
	push ecx
	push edx
	call sub_44B2C0
	mov ecx, [eax+288h]
	mov edx, [eax+14h]
	test ecx, ecx
	jnz loc_449A75
	mov eax, 0FFFFFFF8h
	add eax, edx
	test eax, eax
	jl loc_449A8E

loc_449A3F:
	mov edx, eax

loc_449A41:
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Eh]
	sar edx, 4
	and edx, 0Fh
	cmp edx, 2
	jz loc_449A6D
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jnz loc_449A96

loc_449A6D:
	mov eax, 1
	pop edx
	pop ecx
	ret

loc_449A75:
	push ebx
	mov eax, 8
	mov ebx, dword [dword_5118A0]
	add eax, edx
	cmp eax, ebx
	jl loc_449A89
	sub eax, ebx

loc_449A89:
	mov edx, eax
	pop ebx
	jmp loc_449A41

loc_449A8E:
	add eax, dword [dword_5118A0]
	jmp loc_449A3F

loc_449A96:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_449A20 endp

sub_449AA0: ;SUBROUTINE
	push edx
	mov edx, [eax+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Eh]
	sar edx, 4
	and edx, 0Fh
	cmp edx, 2
	jz loc_449AD0
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jnz loc_449AD7

loc_449AD0:
	mov eax, 1
	pop edx
	ret

loc_449AD7:
	xor eax, eax
	pop edx
	ret
;sub_449AA0 endp

sub_449AE0: ;SUBROUTINE
	test edx, edx
	jz loc_449AEA
	cmp dword [eax+10h], 0
	jz loc_449AFC

loc_449AEA:
	push ecx
	mov ecx, [eax+14h]
	test ecx, ecx
	jz loc_449B09
	mov al, [ecx+1]
	and eax, 0FFh
	pop ecx
	ret

loc_449AFC:
	mov dword [eax+7Ch], 0FFFFFFFFh
	mov eax, 1
	ret

loc_449B09:
	mov eax, 1
	pop ecx
	ret
;sub_449AE0 endp

sub_449B10: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov ebp, edx
	mov [esp+0Ch], ebx
	mov eax, dword [dword_511890]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	test eax, eax
	jl loc_449C9F
	mov ebx, [ecx+0Ch]
	mov esi, dword [dword_5118A0]
	add eax, ebx
	cmp eax, esi
	jl loc_449B46
	sub eax, esi

loc_449B46:
	mov ecx, eax
	mov edx, ecx
	neg edx
	mov ebx, dword [dword_511890]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	lea eax, [ecx+edx]
	test edx, edx
	jl loc_449CB5
	mov edi, dword [dword_5118A0]
	cmp eax, edi
	jl loc_449B70
	sub eax, edi

loc_449B70:
	mov ebx, eax
	lea ecx, 0[eax*8]
	add ecx, eax
	mov eax, dword [dword_5118A4]
	shl ecx, 2
	add eax, ecx
	mov edi, esp
	mov esi, eax
	movsd
	movsd
	movsd
	cmp dword [esp+0Ch], 0
	jz loc_449CC8
	mov edx, [eax+0Fh]
	movzx edi, byte [eax+21h]
	sar edx, 18h
	shl edi, 0Fh
	mov al, [eax+1Fh]
	shl edx, 9
	and al, 0Fh
	and eax, 0FFh
	imul eax, edi
	mov esi, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov eax, dword [dword_5118A4]
	mov [esp], esi
	mov edx, [ecx+eax+10h]
	movzx edi, byte [ecx+eax+21h]
	sar edx, 18h
	shl edi, 0Fh
	mov al, [ecx+eax+1Fh]
	shl edx, 9
	and al, 0Fh
	and eax, 0FFh
	imul eax, edi
	mov edi, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add edi, eax
	mov eax, dword [dword_5118A4]
	mov [esp+4], edi
	mov edx, [ecx+eax+11h]
	movzx esi, byte [ecx+eax+21h]
	sar edx, 18h
	shl esi, 0Fh
	mov al, [ecx+eax+1Fh]
	shl edx, 9
	and al, 0Fh
	and eax, 0FFh
	imul eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add [esp+8], eax

loc_449C32:
	lea eax, 0[ebx*8]
	lea edx, [ebx+eax]
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	mov edx, [eax+9]
	sar edx, 18h
	mov ecx, dword [dword_511894]
	shl edx, 9
	imul edx, ecx
	mov esi, [esp]
	add esi, edx
	mov edx, [eax+0Ah]
	sar edx, 18h
	shl edx, 9
	imul edx, ecx
	mov eax, [eax+0Bh]
	mov [esp], esi
	sar eax, 18h
	mov esi, ecx
	shl eax, 9
	imul eax, esi
	mov edi, [esp+8]
	mov ecx, [esp+4]
	mov esi, esp
	add edi, eax
	add ecx, edx
	mov [esp+8], edi
	mov edi, ebp
	mov [esp+4], ecx
	mov eax, ebx
	movsd
	movsd
	movsd
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_449C9F:
	add eax, [ecx+0Ch]
	test eax, eax
	jge loc_449B46
	add eax, dword [dword_5118A0]
	jmp loc_449B46

loc_449CB5:
	test eax, eax
	jge loc_449B70
	add eax, dword [dword_5118A0]
	jmp loc_449B70

loc_449CC8:
	mov edx, [eax+0Fh]
	movzx esi, byte [eax+1Fh]
	sar edx, 18h
	sar esi, 4
	mov al, [eax+20h]
	shl edx, 9
	and esi, 0Fh
	and eax, 0FFh
	shl eax, 0Fh
	imul eax, esi
	mov edi, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub edi, eax
	mov eax, dword [dword_5118A4]
	mov [esp], edi
	mov edx, [ecx+eax+10h]
	movzx esi, byte [ecx+eax+1Fh]
	sar edx, 18h
	sar esi, 4
	mov al, [ecx+eax+20h]
	shl edx, 9
	and esi, 0Fh
	and eax, 0FFh
	shl eax, 0Fh
	imul eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	sub edx, eax
	mov eax, dword [dword_5118A4]
	add ecx, eax
	xor eax, eax
	mov al, [ecx+1Fh]
	mov esi, eax
	xor eax, eax
	sar esi, 4
	mov al, [ecx+20h]
	and esi, 0Fh
	shl eax, 0Fh
	imul eax, esi
	mov [esp+4], edx
	mov edx, [ecx+11h]
	sar edx, 18h
	shl edx, 9
	mov ecx, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+8], ecx
	jmp loc_449C32
;sub_449B10 endp

sub_449D80: ;SUBROUTINE
	mov dword [dword_511890], edx
	mov dword [dword_511894], eax
	ret
;sub_449D80 endp

sub_449D90: ;SUBROUTINE
	push esi
	push ebp
	mov esi, edx
	mov ebp, ecx
	mov ecx, dword [dword_51180C]
	mov eax, [eax+74h]
	mov edx, [ecx+eax*2+0C6h]
	sar edx, 10h
	test edx, edx
	jl loc_449DD6
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add eax, ecx
	mov edx, [eax+478h]
	test edx, edx
	jz loc_449E03
	mov eax, edx
	xor edx, edx
	mov dx, [eax+6]
	cmp esi, edx
	jl loc_449DDE

loc_449DD6:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop esi
	ret

loc_449DDE:
	push edi
	lea edx, [eax+8]
	mov eax, esi
	shl eax, 2
	add eax, esi
	shl eax, 2
	add eax, edx
	mov edi, ebx
	mov esi, eax
	movsd
	movsd
	movsd
	mov ax, [eax+0Ch]
	mov [ebp+0], ax
	xor eax, eax
	pop edi
	pop ebp
	pop esi
	ret

loc_449E03:
	xor eax, eax
	pop ebp
	pop esi
	ret
;sub_449D90 endp

sub_449E10: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_51180C]
	mov eax, [eax+74h]
	mov edx, [ecx+eax*2+0C6h]
	sar edx, 10h
	test edx, edx
	jl loc_449E52
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add eax, ecx
	mov edx, [eax+478h]
	test edx, edx
	jz loc_449E52
	mov ax, [edx+6]
	and eax, 0FFFFh
	pop edx
	pop ecx
	ret

loc_449E52:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_449E10 endp

sub_449E60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 84h
	mov [esp+1Ch], eax
	mov ebp, edx
	mov [esp+34h], ebx
	mov edi, edx
	mov dword [edx+14h], 0
	mov esi, eax
	mov dword [edx+10h], 0
	movsd
	movsd
	movsd
	mov word [edx+6Eh], 1
	xor edx, edx
	mov [esp+20h], edx
	mov [esp+28h], edx

loc_449E99:
	mov eax, ebp
	call sub_44ADA0
	mov eax, [ebp+74h]
	call sub_4751D0
	mov [esp+24h], eax
	mov eax, [ebp+74h]
	mov ebx, dword [dword_511808]
	inc eax
	cmp eax, ebx
	jle loc_449EBC
	xor eax, eax

loc_449EBC:
	mov edx, [esp+1Ch]
	mov ecx, [esp+24h]
	call sub_4751D0
	mov edx, [edx]
	mov esi, [ecx]
	sub edx, esi
	sar edx, 8
	mov [esp+80h], dx
	mov edx, [esp+1Ch]
	mov edi, [ecx+8]
	mov edx, [edx+8]
	sub edx, edi
	sar edx, 8
	mov [esp+7Ch], dx
	mov edx, [eax]
	sub edx, esi
	sar edx, 8
	mov [esp], dx
	mov [esp+18h], eax
	mov eax, [eax+8]
	sub eax, [ecx+8]
	sar eax, 8
	mov [esp+4], ax
	imul eax, [ebp+78h], 118h
	mov edx, dword [dword_51180C]
	mov eax, [edx+eax+454h]
	call sub_475130
	mov esi, eax
	imul edx, [ebp+78h], 118h
	mov eax, dword [dword_51180C]
	mov edi, [edx+eax+454h]
	mov di, [edi+4]
	mov edx, 7FFFFFFFh
	and edi, 0FFFFh
	mov ecx, [ebp+70h]
	mov [esp+38h], edx
	test ecx, ecx
	jl loc_44A295
	mov eax, ecx

loc_449F59:
	mov edx, [ebp+1Ch]
	mov dl, [edx+2]
	and edx, 0FFh
	dec edx
	cmp eax, edx
	jge loc_44A2A3
	mov ebx, [ebp+70h]
	test ebx, ebx
	jl loc_44A29C
	mov eax, ebx

loc_449F7B:
	mov edx, [ebp+1Ch]
	xor ecx, ecx
	mov cl, [edx+2]
	sub ecx, eax
	mov ebx, [ebp+78h]
	mov [esp+8], ecx
	imul ecx, ebx, 118h
	mov [esp+0Ch], eax
	mov ebx, dword [dword_51180C]
	mov dx, [edx]
	add ecx, ebx
	and edx, 0FFFFh
	mov ecx, [ecx+494h]
	shl edx, 3
	add ecx, edx
	shl eax, 3
	mov [ebp+10h], ecx
	lea edx, [ecx+eax]
	mov ebx, esi
	mov ecx, edi
	mov eax, ebp
	mov [ebp+10h], edx
	mov edx, esp
	call sub_44AAD0
	xor ecx, ecx
	mov ebx, [esp+8]
	mov [esp+78h], ecx
	test ebx, ebx
	jle loc_44A0A2

loc_449FDD:
	mov eax, [ebp+54h]
	sar eax, 10h
	sar eax, 2
	mov [esp+58h], eax
	mov edx, eax
	mov eax, [ebp+5Eh]
	sar eax, 10h
	sar eax, 2
	mov [esp+6Ch], eax
	mov eax, [esp+7Ah]
	sar eax, 10h
	mov ecx, [ebp+5Ah]
	sar eax, 2
	sar ecx, 10h
	mov ebx, eax
	sar ecx, 2
	sub ebx, [esp+6Ch]
	sub edx, ecx
	imul ebx, edx
	mov edx, [ebp+58h]
	sar edx, 10h
	mov [esp+14h], ebx
	sar edx, 2
	mov ebx, [esp+6Ch]
	mov [esp+50h], edx
	sub edx, ebx
	mov [esp+10h], edx
	mov edx, [esp+7Eh]
	sar edx, 10h
	sar edx, 2
	mov ebx, edx
	sub ebx, ecx
	imul ebx, [esp+10h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	sub ebx, [esp+10h]
	test ebx, ebx
	jle loc_44A2AA

loc_44A059:
	mov edx, [esp+7Ah]
	mov eax, [ebp+52h]
	sar edx, 10h
	sar eax, 10h
	sub edx, eax
	mov eax, edx
	test edx, edx
	jle loc_44A43C

loc_44A072:
	mov ecx, [esp+7Eh]
	mov eax, [ebp+4Eh]
	sar ecx, 10h
	sar eax, 10h
	sub ecx, eax
	mov eax, ecx
	test ecx, ecx
	jle loc_44A443

loc_44A08B:
	add eax, edx
	cmp dword [esp+34h], 0
	jz loc_44A44A
	cmp eax, [esp+38h]
	jle loc_44A44A

loc_44A0A2:
	cmp dword [ebp+70h], 0FFFFFFFFh
	jnz loc_44A0B4
	mov eax, [esp+0Ch]
	add eax, [esp+78h]
	dec eax
	mov [ebp+70h], eax

loc_44A0B4:
	mov eax, [esp+0Ch]
	mov ecx, 7FFFFFFFh
	dec eax
	mov [esp+3Ch], ecx
	cmp eax, 0FFFFFFFFh
	jge loc_44A0CC
	mov eax, 0FFFFFFFFh

loc_44A0CC:
	mov [esp+2Ch], eax
	lea edx, [eax+1]
	mov ebx, [ebp+78h]
	mov [esp+30h], edx
	imul edx, ebx, 118h
	mov ecx, dword [dword_51180C]
	add edx, ecx
	mov ecx, [ebp+1Ch]
	mov cx, [ecx]
	and ecx, 0FFFFh
	shl eax, 3
	mov edx, [edx+494h]
	shl ecx, 3
	mov ebx, esi
	add edx, ecx
	mov ecx, edi
	mov [ebp+10h], edx
	add edx, eax
	mov eax, ebp
	mov [ebp+10h], edx
	mov edx, esp
	call sub_44AAD0
	xor ecx, ecx
	mov ebx, [esp+30h]
	mov [esp+74h], ecx
	test ebx, ebx
	jle loc_44A1EA

loc_44A129:
	mov eax, [ebp+54h]
	sar eax, 10h
	sar eax, 2
	mov [esp+44h], eax
	mov eax, [ebp+5Ah]
	sar eax, 10h
	sar eax, 2
	mov ecx, [esp+44h]
	mov [esp+70h], eax
	sub ecx, eax
	mov eax, [ebp+5Eh]
	sar eax, 10h
	sar eax, 2
	mov [esp+40h], eax
	mov eax, [esp+7Ah]
	sar eax, 10h
	sar eax, 2
	mov ebx, [esp+40h]
	mov edx, eax
	sub edx, ebx
	imul ecx, edx
	mov edx, [ebp+58h]
	sar edx, 10h
	sar edx, 2
	mov [esp+10h], ecx
	mov [esp+4Ch], edx
	mov ecx, edx
	mov edx, [esp+7Eh]
	sar edx, 10h
	sar edx, 2
	sub ecx, ebx
	mov ebx, edx
	sub ebx, [esp+70h]
	imul ecx, ebx
	mov ebx, [esp+10h]
	sub ebx, ecx
	test ebx, ebx
	jle loc_44A47E

loc_44A1A1:
	mov eax, [esp+7Ah]
	mov edx, [ebp+52h]
	sar eax, 10h
	sar edx, 10h
	sub eax, edx
	test eax, eax
	jle loc_44A5BA
	mov edx, eax

loc_44A1BA:
	mov ecx, [esp+7Eh]
	mov eax, [ebp+4Eh]
	sar ecx, 10h
	sar eax, 10h
	sub ecx, eax
	mov eax, ecx
	test ecx, ecx
	jle loc_44A5C3

loc_44A1D3:
	add eax, edx
	cmp dword [esp+34h], 0
	jz loc_44A5CA
	cmp eax, [esp+3Ch]
	jle loc_44A5CA

loc_44A1EA:
	mov eax, [esp+28h]
	mov ebx, dword dword_4D5C50[eax]
	test ebx, ebx
	jle loc_44A5FE
	mov eax, ebx

loc_44A1FE:
	mov edx, [esp+28h]
	cmp dword dword_4D5C50[edx], 0
	jle loc_44A607

loc_44A20F:
	dec eax
	cmp eax, 0FFFFFFFFh
	jz loc_44A22F
	mov ecx, [ebp+0Ch]
	inc ecx
	mov ebx, dword [dword_5118A0]
	mov [ebp+0Ch], ecx
	cmp ecx, ebx
	jl loc_44A20F
	mov dword [ebp+0Ch], 0
	jmp loc_44A20F

loc_44A22F:
	mov eax, [esp+28h]
	mov edi, [esp+28h]
	mov esi, [esp+20h]
	mov eax, dword dword_4D5C50[eax]
	add edi, 4
	add esi, eax
	mov [esp+28h], edi
	mov [esp+20h], esi
	cmp edi, 20h
	jl loc_449E99
	mov eax, esi
	neg eax
	test eax, eax
	jle loc_44A62E

loc_44A263:
	mov edx, [esp+20h]
	neg edx
	test edx, edx
	jle loc_44A635

loc_44A271:
	dec eax
	cmp eax, 0FFFFFFFFh
	jz loc_44A658
	mov esi, [ebp+0Ch]
	inc esi
	mov edi, dword [dword_5118A0]
	mov [ebp+0Ch], esi
	cmp esi, edi
	jl loc_44A271
	mov dword [ebp+0Ch], 0
	jmp loc_44A271

loc_44A295:
	xor eax, eax
	jmp loc_449F59

loc_44A29C:
	xor eax, eax
	jmp loc_449F7B

loc_44A2A3:
	mov eax, edx
	jmp loc_449F7B

loc_44A2AA:
	mov ebx, [ebp+4Eh]
	sar ebx, 10h
	sar ebx, 2
	mov [esp+68h], ebx
	sub ebx, [esp+58h]
	mov [esp+14h], ebx
	mov ebx, eax
	sub ebx, [esp+50h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	imul ebx, [esp+10h]
	mov [esp+14h], ebx
	mov ebx, [ebp+52h]
	sar ebx, 10h
	sar ebx, 2
	mov [esp+64h], ebx
	sub ebx, [esp+50h]
	mov [esp+10h], ebx
	mov ebx, edx
	sub ebx, [esp+58h]
	imul ebx, [esp+10h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	sub ebx, [esp+10h]
	test ebx, ebx
	jg loc_44A059
	mov ebx, [ebp+60h]
	sar ebx, 10h
	sar ebx, 2
	sub ecx, ebx
	mov [esp+14h], ecx
	mov ecx, [ebp+64h]
	mov [esp+5Ch], ebx
	sar ecx, 10h
	mov ebx, eax
	sar ecx, 2
	sub ebx, ecx
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	imul ebx, [esp+10h]
	mov [esp+14h], ebx
	mov ebx, [esp+6Ch]
	sub ebx, ecx
	mov [esp+10h], ebx
	mov ebx, edx
	sub ebx, [esp+5Ch]
	imul ebx, [esp+10h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	sub ebx, [esp+10h]
	test ebx, ebx
	jg loc_44A059
	mov ebx, [esp+5Ch]
	sub ebx, [esp+68h]
	mov [esp+10h], ebx
	sub eax, [esp+64h]
	imul eax, [esp+10h]
	sub ecx, [esp+64h]
	sub edx, [esp+68h]
	imul edx, ecx
	sub eax, edx
	test eax, eax
	jg loc_44A059
	imul edx, [ebp+78h], 118h
	mov eax, dword [dword_51180C]
	mov edx, [edx+eax+474h]
	add edx, 8
	mov [ebp+14h], edx
	mov edx, [ebp+1Ch]
	mov dx, [edx]
	mov ecx, [esp+0Ch]
	and edx, 0FFFFh
	mov ebx, [esp+78h]
	add edx, ecx
	add edx, ebx
	mov ecx, [ebp+14h]
	add edx, edx
	add ecx, edx
	mov [ebp+14h], ecx
	cmp byte [ecx+1], 0Eh
	jz loc_44A059
	mov edx, [esp+0Ch]
	add edx, [esp+78h]

loc_44A3DB:
	mov ecx, [ebp+78h]
	mov [ebp+70h], edx
	lea edx, 0[ecx*8]
	add edx, ecx
	shl edx, 2
	sub edx, ecx
	mov dword [ebp+68h], 2
	mov eax, [eax+edx*8+470h]
	add eax, 8
	mov edx, [ebp+14h]
	mov [ebp+18h], eax
	mov dl, [edx]
	and edx, 0FFh
	lea eax, 0[edx*4]
	mov ebx, [esp+18h]
	sub eax, edx
	mov esi, [ebp+18h]
	shl eax, 2
	mov edx, [esp+24h]
	add esi, eax
	mov eax, ebp
	mov [ebp+18h], esi
	call sub_44ABA0
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_44A43C:
	neg edx
	jmp loc_44A072

loc_44A443:
	neg eax
	jmp loc_44A08B

loc_44A44A:
	mov edx, esp
	mov [esp+38h], eax
	mov eax, [ebp+10h]
	mov ecx, edi
	add eax, 8
	mov ebx, esi
	mov [ebp+10h], eax
	mov eax, ebp
	call sub_44AA50
	mov edx, [esp+78h]
	inc edx
	mov ecx, [esp+8]
	mov [esp+78h], edx
	cmp edx, ecx
	jl loc_449FDD
	jmp loc_44A0A2

loc_44A47E:
	mov ecx, [ebp+4Eh]
	sar ecx, 10h
	sar ecx, 2
	mov ebx, [esp+44h]
	mov [esp+48h], ecx
	sub ecx, ebx
	mov ebx, [esp+4Ch]
	mov [esp+10h], ecx
	mov ecx, eax
	sub ecx, ebx
	mov ebx, [esp+10h]
	imul ebx, ecx
	mov ecx, [ebp+52h]
	sar ecx, 10h
	sar ecx, 2
	mov [esp+14h], ebx
	mov ebx, ecx
	sub ebx, [esp+4Ch]
	mov [esp+10h], ebx
	mov ebx, edx
	sub ebx, [esp+44h]
	imul ebx, [esp+10h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	sub ebx, [esp+10h]
	test ebx, ebx
	jg loc_44A1A1
	mov ebx, [ebp+60h]
	sar ebx, 10h
	sar ebx, 2
	mov [esp+54h], ebx
	mov ebx, [esp+70h]
	sub ebx, [esp+54h]
	mov [esp+14h], ebx
	mov ebx, [ebp+64h]
	sar ebx, 10h
	sar ebx, 2
	mov [esp+60h], ebx
	mov ebx, eax
	sub ebx, [esp+60h]
	mov [esp+10h], ebx
	mov ebx, [esp+14h]
	imul ebx, [esp+10h]
	mov [esp+10h], ebx
	mov ebx, [esp+40h]
	sub ebx, [esp+60h]
	mov [esp+14h], ebx
	mov ebx, edx
	sub ebx, [esp+54h]
	imul ebx, [esp+14h]
	mov [esp+14h], ebx
	mov ebx, [esp+10h]
	sub ebx, [esp+14h]
	test ebx, ebx
	jg loc_44A1A1
	mov ebx, [esp+54h]
	sub ebx, [esp+48h]
	sub eax, ecx
	imul ebx, eax
	mov eax, [esp+60h]
	sub eax, ecx
	sub edx, [esp+48h]
	imul eax, edx
	mov edx, ebx
	sub edx, eax
	test edx, edx
	jg loc_44A1A1
	imul edx, [ebp+78h], 118h
	mov eax, dword [dword_51180C]
	mov edx, [edx+eax+474h]
	add edx, 8
	mov [ebp+14h], edx
	mov edx, [ebp+1Ch]
	mov dx, [edx]
	mov ecx, [esp+2Ch]
	and edx, 0FFFFh
	mov ebx, [esp+74h]
	add edx, ecx
	sub edx, ebx
	mov ecx, [ebp+14h]
	add edx, edx
	add ecx, edx
	mov [ebp+14h], ecx
	cmp byte [ecx+1], 0Eh
	jz loc_44A1A1
	mov edx, [esp+2Ch]
	sub edx, [esp+74h]
	jmp loc_44A3DB

loc_44A5BA:
	mov edx, eax
	neg edx
	jmp loc_44A1BA

loc_44A5C3:
	neg eax
	jmp loc_44A1D3

loc_44A5CA:
	mov edx, esp
	mov [esp+3Ch], eax
	mov eax, [ebp+10h]
	mov ecx, edi
	sub eax, 8
	mov ebx, esi
	mov [ebp+10h], eax
	mov eax, ebp
	call sub_44A9D0
	mov edx, [esp+74h]
	inc edx
	mov ecx, [esp+30h]
	mov [esp+74h], edx
	cmp edx, ecx
	jl loc_44A129
	jmp loc_44A1EA

loc_44A5FE:
	mov eax, ebx
	neg eax
	jmp loc_44A1FE

loc_44A607:
	mov ecx, 0FFFFFFFFh

loc_44A60C:
	dec eax
	cmp eax, 0FFFFFFFFh
	jz loc_44A22F
	mov edi, [ebp+0Ch]
	add edi, ecx
	mov [ebp+0Ch], edi
	test edi, edi
	jge loc_44A60C
	mov edx, dword [dword_5118A0]
	dec edx
	mov [ebp+0Ch], edx
	jmp loc_44A60C

loc_44A62E:
	mov eax, esi
	jmp loc_44A263

loc_44A635:
	mov ecx, 0FFFFFFFFh

loc_44A63A:
	dec eax
	cmp eax, 0FFFFFFFFh
	jz loc_44A658
	mov edx, [ebp+0Ch]
	add edx, ecx
	mov [ebp+0Ch], edx
	test edx, edx
	jge loc_44A63A
	mov edx, dword [dword_5118A0]
	dec edx
	mov [ebp+0Ch], edx
	jmp loc_44A63A

loc_44A658:
	mov eax, ebp
	call sub_44ADA0
	mov dword [ebp+10h], 0
	mov dword [ebp+14h], 0
	mov dword [ebp+68h], 1
	mov dword [ebp+70h], 0FFFFFFFFh
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_449E60 endp

sub_44A690: ;SUBROUTINE
	mov dword [edx+1Ch], 0
	mov dword [edx+10h], 0
	mov dword [edx+14h], 0
	mov dword [edx+18h], 0
	mov word [edx+6Ch], 0
	mov word [edx+6Eh], 0
	mov dword [edx+68h], 1
	mov dword [edx+70h], 0FFFFFFFFh
	mov [edx+0Ch], eax
	ret
;sub_44A690 endp

sub_44A6D0: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov [edx+7Ch], ebx
	test ebx, ebx
	jz loc_44A700
	call sub_44A720
	mov edx, dword [dword_51180C]
	mov ebx, eax
	mov eax, [ecx+74h]
	or byte [edx+eax+320h], 42h
	add edx, [ecx+74h]
	or byte [edx+320h], 1
	mov eax, ebx
	pop ecx
	ret

loc_44A700:
	mov dword [edx+68h], 1
	mov dword [edx+70h], 0FFFFFFFFh
	mov [edx+1Ch], ebx
	mov [edx+10h], ebx
	mov [edx+14h], ebx
	call sub_44AF60
	pop ecx
	ret
;sub_44A6D0 endp

sub_44A720: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 94h
	mov [esp+90h], eax
	mov ebp, edx
	mov eax, [edx+0Ch]
	mov [esp+8Ch], eax
	mov eax, [esp+90h]
	call sub_44AF60
	mov eax, ebp
	mov ebx, 1
	call sub_44A960
	mov edx, ebp
	mov eax, [esp+90h]
	call sub_449E60
	cmp dword [ebp+10h], 0
	jnz loc_44A865
	mov eax, [ebp+1Ch]
	mov edx, [eax+2]
	sar edx, 10h
	cmp edx, 0FFFFFFFFh
	jz loc_44A857

loc_44A780:
	mov ecx, 20h
	mov edi, esp
	mov esi, ebp
	rep movsd
	mov eax, [ebp+1Ch]
	mov eax, [eax+2]
	mov ebx, 0FFFFFFFFh
	sar eax, 10h
	mov ecx, ebx
	cmp eax, ebx
	jz loc_44A7BE
	mov edx, eax
	shl eax, 3
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	mov edx, [esp+90h]
	call sub_4495E0
	mov ecx, eax

loc_44A7BE:
	mov eax, [ebp+1Ch]
	mov eax, [eax+4]
	sar eax, 10h
	cmp eax, 0FFFFFFFFh
	jz loc_44A7EB
	mov edx, eax
	shl eax, 3
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	mov edx, [esp+90h]
	call sub_4495E0
	mov ebx, eax

loc_44A7EB:
	cmp ecx, ebx
	jnb loc_44A8D6
	mov eax, [ebp+1Ch]
	mov eax, [eax+2]
	sar eax, 10h
	mov edx, ebp
	mov [ebp+0Ch], eax
	mov eax, [esp+90h]
	mov ebx, 1
	call sub_44AF60
	mov eax, [esp+90h]
	mov edx, ebp
	call sub_449E60
	cmp dword [ebp+70h], 0FFFFFFFFh
	jz loc_44A90D

loc_44A82A:
	mov eax, [esp+8Ch]
	mov ebx, [ebp+0Ch]
	cmp eax, ebx
	jz loc_44A924
	mov eax, 1

loc_44A841:
	mov [ebp+6Ch], ax
	mov eax, [ebp+6Ah]
	sar eax, 10h
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44A857:
	mov eax, [eax+4]
	sar eax, 10h
	cmp eax, edx
	jnz loc_44A780

loc_44A865:
	cmp dword [ebp+10h], 0
	jnz loc_44A82A
	mov edx, [ebp+0Ch]
	lea eax, 0[edx*8]
	mov ecx, [esp+90h]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edi, [ecx]
	mov eax, [edx+eax*4]
	sub eax, edi
	sar eax, 3
	lea ecx, [edi+eax]
	mov [esp+80h], ecx
	mov ecx, [ebp+0Ch]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov eax, [edx+eax*4+8]
	mov edx, [esp+90h]
	mov ecx, [edx+8]
	sub eax, ecx
	sar eax, 3
	xor ebx, ebx
	lea edx, [ecx+eax]
	lea eax, [esp+80h]
	mov [esp+88h], edx
	mov edx, ebp
	call sub_449E60
	jmp loc_44A82A

loc_44A8D6:
	mov eax, [ebp+1Ch]
	mov eax, [eax+4]
	sar eax, 10h
	mov edx, ebp
	mov [ebp+0Ch], eax
	mov eax, [esp+90h]
	mov ebx, 1
	call sub_44AF60
	mov eax, [esp+90h]
	mov edx, ebp
	call sub_449E60
	cmp dword [ebp+70h], 0FFFFFFFFh
	jnz loc_44A82A

loc_44A90D:
	mov ecx, 20h
	mov esi, esp
	mov edi, ebp
	rep movsd
	mov dword [ebp+1Ch], 0
	jmp loc_44A865

loc_44A924:
	xor eax, ebx
	jmp loc_44A841
;sub_44A720 endp

sub_44A930: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov edx, [eax+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ax, [edx+eax*4+16h]
	and eax, 0FFFFh
	mov [ecx+74h], eax
	mov eax, 1
	pop ecx
	ret
;sub_44A930 endp

sub_44A960: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov eax, dword [dword_51180C]
	mov ecx, [edx+74h]
	add eax, ecx
	test byte [eax+320h], 4
	jz loc_44A9C0

loc_44A978:
	mov ecx, [edx+0Ch]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, dword [dword_5118A4]
	mov ax, [ecx+eax*4+16h]
	and eax, 0FFFFh
	mov ecx, eax
	mov [edx+74h], eax
	mov eax, dword [dword_51180C]
	mov ecx, [eax+ecx*2+0C6h]
	mov ebx, [edx+74h]
	sar ecx, 10h
	add eax, ebx
	mov [edx+78h], ecx
	or byte [eax+320h], 42h
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_44A9C0:
	mov eax, ecx
	call sub_449070
	jmp loc_44A978
;sub_44A960 endp

sub_44A9D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov [esp], ecx
	add eax, 50h
	lea esi, [eax+6]
	mov edi, eax
	mov ecx, [eax-40h]
	movsd
	movsw
	lea edi, [eax+12h]
	lea esi, [eax+0Ch]
	movsd
	movsw
	movzx edi, byte [ecx+5]
	lea edx, 0[edi*4]
	sub edx, edi
	add edx, edx
	lea esi, [ebx+edx]
	cmp edi, [esp]
	jge loc_44AA48
	mov di, [ebp+0]
	mov dx, [esi]
	add edx, edi
	mov [eax+6], dx
	mov dx, [esi+4]
	mov si, [ebp+4]
	add edx, esi
	mov [eax+0Ah], dx

loc_44AA24:
	mov cl, [ecx+6]
	and ecx, 0FFh
	lea edx, 0[ecx*4]
	sub edx, ecx
	add edx, edx
	lea edi, [eax+0Ch]
	lea esi, [ebx+edx]
	movsd
	movsw
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret

loc_44AA48:
	lea edi, [eax+6]
	movsd
	movsw
	jmp loc_44AA24
;sub_44A9D0 endp

sub_44AA50: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov [esp], ecx
	add eax, 50h
	lea edi, [eax+6]
	mov esi, eax
	mov ecx, [eax-40h]
	movsd
	movsw
	lea edi, [eax+0Ch]
	lea esi, [eax+12h]
	movsd
	movsw
	movzx edi, byte [ecx+4]
	lea edx, 0[edi*4]
	sub edx, edi
	add edx, edx
	lea esi, [ebx+edx]
	cmp edi, [esp]
	jge loc_44AAC7
	mov di, [ebp+0]
	mov dx, [esi]
	add edx, edi
	mov [eax], dx
	mov dx, [esi+4]
	mov si, [ebp+4]
	add edx, esi
	mov [eax+4], dx

loc_44AAA3:
	mov cl, [ecx+7]
	and ecx, 0FFh
	lea edx, 0[ecx*4]
	sub edx, ecx
	add edx, edx
	lea edi, [eax+12h]
	lea esi, [ebx+edx]
	movsd
	movsw
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret

loc_44AAC7:
	mov edi, eax
	movsd
	movsw
	jmp loc_44AAA3
;sub_44AA50 endp

sub_44AAD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, edx
	mov [esp], ecx
	mov ecx, [eax+10h]
	movzx ebp, byte [ecx+4]
	lea edx, 0[ebp*4]
	sub edx, ebp
	mov edi, [esp]
	add edx, edx
	add eax, 50h
	add edx, ebx
	cmp ebp, edi
	jge loc_44AB7F
	mov di, [edx]
	mov [esp+4], edi
	mov di, [esi]
	add [esp+4], edi
	mov edi, [esp+4]
	mov [eax], di
	mov dx, [edx+4]
	mov di, [esi+4]
	add edx, edi
	mov [eax+4], dx
	movzx edi, byte [ecx+5]
	lea edx, 0[edi*4]
	sub edx, edi
	add edx, edx
	lea edi, [ebx+edx]
	mov dx, [edi]
	add dx, [esi]
	mov [eax+6], dx
	mov dx, [edi+4]
	mov di, [esi+4]
	add edx, edi
	mov [eax+0Ah], dx

loc_44AB4A:
	xor edx, edx
	mov dl, [ecx+6]
	mov esi, edx
	shl edx, 2
	sub edx, esi
	add edx, edx
	lea edi, [eax+0Ch]
	lea esi, [ebx+edx]
	xor edx, edx
	movsd
	movsw
	mov dl, [ecx+7]
	mov ecx, edx
	shl edx, 2
	sub edx, ecx
	add edx, edx
	lea edi, [eax+12h]
	lea esi, [ebx+edx]
	movsd
	movsw
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_44AB7F:
	mov edi, eax
	mov esi, edx
	movsd
	movsw
	movzx esi, byte [ecx+5]
	lea edx, 0[esi*4]
	sub edx, esi
	add edx, edx
	lea edi, [eax+6]
	lea esi, [ebx+edx]
	movsd
	movsw
	jmp loc_44AB4A
;sub_44AAD0 endp

sub_44ABA0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov esi, edx
	mov eax, [eax+10h]
	mov edx, [ecx+78h]
	mov [esp+0Ch], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword [dword_51180C]
	mov eax, [edx+eax*8+454h]
	call sub_475130
	mov edx, [ecx+78h]
	mov [esp+8], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword [dword_51180C]
	mov edi, [edx+eax*8+454h]
	mov di, [edi+4]
	mov ebp, [esp+0Ch]
	xor edx, edx
	and edi, 0FFFFh
	mov dl, [ebp+4]
	mov eax, esi
	cmp edx, edi
	jge loc_44AC12
	mov eax, ebx

loc_44AC12:
	mov [esp+4], edx
	mov ebp, [esp+4]
	shl edx, 2
	sub edx, ebp
	mov ebp, [esp+8]
	add edx, edx
	add ebp, edx
	movsx edx, word [ebp+0]
	shl edx, 8
	mov [esp], edx
	mov [esp+4], ebp
	mov ebp, [esp]
	mov edx, [eax]
	add edx, ebp
	mov [ecx+20h], edx
	mov edx, [esp+4]
	mov edx, [edx]
	sar edx, 10h
	shl edx, 8
	mov [esp], edx
	mov ebp, [esp]
	mov edx, [eax+4]
	add edx, ebp
	mov [ecx+24h], edx
	mov edx, [esp+4]
	mov edx, [edx+2]
	sar edx, 10h
	mov eax, [eax+8]
	shl edx, 8
	mov ebp, [esp+0Ch]
	add eax, edx
	xor edx, edx
	mov [ecx+28h], eax
	mov dl, [ebp+5]
	mov eax, esi
	cmp edx, edi
	jge loc_44AC7F
	mov eax, ebx

loc_44AC7F:
	mov [esp+4], edx
	mov ebp, [esp+4]
	shl edx, 2
	sub edx, ebp
	mov ebp, [esp+8]
	add edx, edx
	add ebp, edx
	movsx edx, word [ebp+0]
	shl edx, 8
	mov [esp], edx
	mov [esp+4], ebp
	mov ebp, [esp]
	mov edx, [eax]
	add edx, ebp
	mov [ecx+2Ch], edx
	mov edx, [esp+4]
	mov edx, [edx]
	sar edx, 10h
	shl edx, 8
	mov [esp], edx
	mov ebp, [esp]
	mov edx, [eax+4]
	add edx, ebp
	mov [ecx+30h], edx
	mov edx, [esp+4]
	mov edx, [edx+2]
	sar edx, 10h
	mov eax, [eax+8]
	shl edx, 8
	mov ebp, [esp+0Ch]
	add eax, edx
	xor edx, edx
	mov [ecx+34h], eax
	mov dl, [ebp+6]
	mov eax, esi
	cmp edx, edi
	jge loc_44ACEC
	mov eax, ebx

loc_44ACEC:
	mov [esp+4], edx
	mov ebp, [esp+4]
	shl edx, 2
	sub edx, ebp
	mov ebp, [esp+8]
	add edx, edx
	add ebp, edx
	movsx edx, word [ebp+0]
	shl edx, 8
	mov [esp+4], edx
	mov [esp], ebp
	mov ebp, [esp+4]
	mov edx, [eax]
	add edx, ebp
	mov [ecx+38h], edx
	mov edx, [esp]
	mov edx, [edx]
	sar edx, 10h
	shl edx, 8
	mov [esp+4], edx
	mov ebp, [esp+4]
	mov edx, [eax+4]
	add edx, ebp
	mov [ecx+3Ch], edx
	mov edx, [esp]
	mov edx, [edx+2]
	sar edx, 10h
	mov eax, [eax+8]
	shl edx, 8
	add eax, edx
	mov [ecx+40h], eax
	mov eax, esi
	mov esi, [esp+0Ch]
	xor edx, edx
	mov dl, [esi+7]
	cmp edx, edi
	jge loc_44AD5A
	mov eax, ebx

loc_44AD5A:
	mov ebx, edx
	shl edx, 2
	sub edx, ebx
	mov ebx, [esp+8]
	add edx, edx
	add ebx, edx
	movsx esi, word [ebx]
	mov edx, [eax]
	shl esi, 8
	add edx, esi
	mov [ecx+44h], edx
	mov esi, [ebx]
	sar esi, 10h
	mov edx, [eax+4]
	shl esi, 8
	add edx, esi
	mov [ecx+48h], edx
	mov edx, [ebx+2]
	sar edx, 10h
	mov eax, [eax+8]
	shl edx, 8
	add eax, edx
	mov [ecx+4Ch], eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_44ABA0 endp

sub_44ADA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, eax
	mov ecx, [eax+0Ch]
	lea eax, 0[ecx*8]
	add ecx, eax
	mov eax, dword [dword_5118A4]
	shl ecx, 2
	mov ax, [ecx+eax+16h]
	and eax, 0FFFFh
	mov [edx+74h], eax
	mov eax, edx
	call sub_44A960
	mov ecx, [edx+78h]
	lea eax, 0[ecx*8]
	add eax, ecx
	shl eax, 2
	sub eax, ecx
	mov ecx, dword [dword_51180C]
	shl eax, 3
	add ecx, eax
	mov eax, [ecx+46Ch]
	lea ebx, [eax+8]
	mov esi, [ecx+564h]
	mov eax, [edx+0Ch]
	sub eax, esi
	shl eax, 3
	add ebx, eax
	mov [edx+1Ch], ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44ADA0 endp

sub_44AE10: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebx, eax
	mov [esp+0Ch], edx
	mov eax, dword [dword_5118A0]
	mov edi, dword [dword_5118A4]
	dec eax
	mov ecx, [edx+0Ch]
	mov [esp+14h], eax
	cmp ecx, 0FFFFFFFFh
	jz loc_44AEA1
	lea esi, [eax+1]
	dec eax
	mov [esp+10h], eax

loc_44AE3E:
	mov ebp, [esp+14h]
	mov [esp+18h], ecx
	cmp ecx, ebp
	jl loc_44AEB1
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv esi
	imul edx, 24h

loc_44AE56:
	mov eax, [edx+edi]
	mov [esp], eax
	mov eax, [edx+edi+8]
	mov [esp+8], eax
	mov eax, esp
	mov edx, ebx
	call sub_44B0B0
	mov ebp, eax
	mov [esp+1Ch], eax
	lea edx, [ecx+1]
	cmp ecx, [esp+10h]
	jge loc_44AEB6
	imul edx, 24h
	mov eax, [edx+edi]
	mov [esp], eax
	mov eax, [edx+edi+8]
	mov [esp+8], eax
	mov edx, ebx
	mov eax, esp
	call sub_44B0B0
	cmp eax, ebp
	jge loc_44AEE9
	inc ecx

loc_44AE9B:
	cmp ecx, [esp+18h]
	jnz loc_44AE3E

loc_44AEA1:
	mov eax, [esp+0Ch]
	mov [eax+0Ch], ecx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44AEB1:
	imul edx, ecx, 24h
	jmp loc_44AE56

loc_44AEB6:
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	imul edx, 24h
	mov eax, [edx+edi]
	mov [esp], eax
	mov eax, [edx+edi+8]
	mov [esp+8], eax
	mov edx, ebx
	mov eax, esp
	call sub_44B0B0
	cmp eax, ebp
	jge loc_44AEE9
	inc ecx
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv esi
	mov ecx, edx
	jmp loc_44AE9B

loc_44AEE9:
	test ecx, ecx
	jg loc_44AF2C
	add ecx, esi
	lea edx, [ecx-1]
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	imul edx, 24h
	mov eax, [edx+edi]
	mov [esp], eax
	mov eax, [edx+edi+8]
	mov [esp+8], eax
	mov edx, ebx
	mov eax, esp
	call sub_44B0B0
	cmp eax, [esp+1Ch]
	jge loc_44AF1A
	dec ecx

loc_44AF1A:
	add ecx, esi
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv esi
	mov ecx, edx
	jmp loc_44AE9B

loc_44AF2C:
	lea eax, [ecx-1]
	imul eax, 24h
	lea edx, [edi+eax]
	mov eax, [edx]
	mov [esp], eax
	mov eax, [edx+8]
	mov [esp+8], eax
	mov edx, ebx
	mov eax, esp
	mov ebp, [esp+1Ch]
	call sub_44B0B0
	cmp eax, ebp
	jge loc_44AE9B
	dec ecx
	jmp loc_44AE9B
;sub_44AE10 endp

sub_44AF60: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov ecx, edx
	mov esi, [edx+0Ch]
	call sub_44AE10
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov edx, ebx
	call sub_4495E0
	cmp eax, 10000h
	jg loc_44AFCB

loc_44AF94:
	mov eax, [ecx+0Ch]
	lea ebx, 0[eax*8]
	add ebx, eax
	mov eax, dword [dword_5118A4]
	mov ax, [eax+ebx*4+16h]
	and eax, 0FFFFh
	mov edx, [ecx+0Ch]
	mov [ecx+74h], eax
	cmp esi, edx
	jz loc_44AFFD
	mov eax, 1
	mov [ecx+6Ch], ax
	mov [ecx+6Eh], ax
	cwde
	pop esi
	pop ecx
	pop ebx
	ret

loc_44AFCB:
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov edx, ebx
	call sub_4495E0
	mov edx, ecx
	mov eax, ebx
	call sub_44B010
	mov edx, ecx
	mov eax, ebx
	call sub_44AE10
	jmp loc_44AF94

loc_44AFFD:
	xor eax, eax
	mov [ecx+6Ch], ax
	mov [ecx+6Eh], ax
	cwde
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44AF60 endp

sub_44B010: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov [esp], edx
	mov ebp, 0FFFFFFFFh
	mov edi, 7FFFFFFFh
	mov eax, dword [dword_5118A0]
	xor ecx, ecx
	mov [esp+4], eax
	test eax, eax
	jle loc_44B05F
	xor ebx, ebx

loc_44B038:
	mov eax, dword [dword_5118A4]
	mov edx, esi
	add eax, ebx
	call sub_4495E0
	cmp eax, edi
	jge loc_44B04E
	mov edi, eax
	mov ebp, ecx

loc_44B04E:
	mov eax, [esp+4]
	add ecx, 8
	add ebx, 120h
	cmp ecx, eax
	jl loc_44B038

loc_44B05F:
	mov eax, [esp]
	mov [eax+0Ch], ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44B010 endp

sub_44B080: ;SUBROUTINE
	push edx
	mov dword [dword_511898], eax
	lea edx, [eax+8]
	mov dword [dword_51189C], edx
	mov dword [dword_5118A4], edx
	mov ax, [eax+6]
	and eax, 0FFFFh
	mov dword [dword_5118A0], eax
	mov eax, 1
	pop edx
	ret
;sub_44B080 endp

sub_44B0B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov ebx, [ecx+8]
	mov eax, [edx+8]
	sub eax, ebx
	mov ebx, eax
	sar ebx, 9
	imul ebx, ebx
	mov esi, [ecx]
	mov eax, [edx]
	sub eax, esi
	sar eax, 9
	imul eax, eax
	add eax, ebx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44B0B0 endp

dword_44B0E0: dd 0
	dd 30000h, 0FFF60000h, 0
	db 0CCh
	db 4Ch
	times 2 db 0
	dd 8000h
dword_44B0F8: dd 0
	dd 9999h, 0
dword_44B104: dd 0
	db 0CCh
	db 0Ch, 1, 0
	dd 0FFFB2667h
dword_44B110: dd 0
	dd 20000h, 0FFFA0000h
dword_44B11C: dd 30000h, 14CCCh, 0FFFC199Ah
dword_44B128: dd 0
	dd 0F0000h, 0FFFE0000h
dword_44B134: dd 40000h, 0A0000h, 140000h, 280000h, 3C0000h, 500000h
	dd 700000h, 8C0000h
dword_44B154: dd 40000h, 0A0000h, 140000h, 280000h, 3C0000h, 500000h
	dd 700000h, 8C0000h
dword_44B174: dd 40h, 20h, 10h, 8, 6, 4, 3, 2
dword_44B194: times 3 dd 0
	dd 2
	times 1Ch dd 0
dword_44B214: dd 30201h, 70605h, 0
	db 6
byte_44B221: db 1, 2, 3
	dd 7060504h, 4040401h, 404h
dword_44B230: dd 0
	dd 10000h
	times 2 dd 0

sub_44B240: ;SUBROUTINE
	mov dword [edx+4], 0
	mov dword [edx+8], 0
	mov dword [edx+0Ch], 0
	mov dword [edx+10h], 10000h
	mov dword [edx+14h], 0
	mov dword [edx+18h], 0
	mov dword [edx+1Ch], 0
	mov dword [edx+20h], 10000h
	mov [edx], eax
	ret
;sub_44B240 endp

sub_44B280: ;SUBROUTINE
	push ecx
	mov ecx, edx
	and eax, 1
	mov edx, eax
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov dword dword_4D5CC4[eax], ecx
	pop ecx
	ret
;sub_44B280 endp

sub_44B2A0: ;SUBROUTINE
	push edx
	and eax, 1
	mov edx, eax
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov eax, dword dword_4D5C78[eax]
	pop edx
	ret
;sub_44B2A0 endp

sub_44B2C0: ;SUBROUTINE
	push edx
	and eax, 1
	mov edx, eax
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov eax, dword dword_4D5C74[eax]
	pop edx
	ret
;sub_44B2C0 endp

sub_44B2E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, eax
	shl eax, 4
	add eax, edx
	shl eax, 4
	and edx, 1
	mov ebx, dword dword_4D5C74[eax]
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0Bh
	jz loc_44B504
	cmp dword [dword_512208], 1
	jnz loc_44B3EA
	cmp byte byte_4D5C7C[eax], 0Ch
	jnz loc_44B3EA
	test edx, edx
	jnz loc_44B509
	mov eax, 1

loc_44B335:
	mov esi, eax
	shl esi, 4
	add esi, eax
	mov eax, edx
	shl eax, 4
	lea ecx, [edx+eax]
	shl esi, 4
	shl ecx, 4
	mov eax, dword dword_4D5C74[esi]
	mov dword dword_4D5C74[ecx], eax
	test edx, edx
	jnz loc_44B510
	mov ecx, 1

loc_44B363:
	mov esi, ecx
	mov eax, edx
	shl esi, 4
	shl eax, 4
	add esi, ecx
	lea ecx, [edx+eax]
	shl esi, 4
	shl ecx, 4
	mov eax, dword dword_4D5C78[esi]
	mov dword dword_4D5C78[ecx], eax
	test edx, edx
	jnz loc_44B517
	mov ecx, 1

loc_44B391:
	push edi
	mov eax, edx
	mov esi, ecx
	shl eax, 4
	shl esi, 4
	add eax, edx
	add esi, ecx
	shl eax, 4
	shl esi, 4
	lea edi, dword dword_4D5C84[eax]
	lea esi, dword dword_4D5C84[esi]
	movsd
	movsd
	movsd
	test edx, edx
	jnz loc_44B51E
	mov ecx, 1

loc_44B3C2:
	mov esi, ecx
	mov eax, edx
	shl esi, 4
	shl eax, 4
	add esi, ecx
	add eax, edx
	mov ecx, 9
	shl eax, 4
	shl esi, 4
	lea edi, dword dword_4D5C9C[eax]
	lea esi, dword dword_4D5C9C[esi]
	rep movsd
	pop edi

loc_44B3EA:
	cmp dword [dword_512208], 1
	jle loc_44B525
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0Ch
	jnz loc_44B525
	mov byte byte_4D5C7C[eax], 1

loc_44B415:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 9
	jl loc_44B42F
	mov byte byte_4D5C7C[eax], 1

loc_44B42F:
	cmp dword [dword_512208], 1
	jnz loc_44B452
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B452
	mov eax, edx
	call sub_44B2E0

loc_44B452:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B475
	call sub_42A360
	test eax, eax
	jnz loc_44B475
	mov eax, edx
	call sub_44B2E0

loc_44B475:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B48F
	mov eax, edx
	call sub_44B2E0

loc_44B48F:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B4B4
	mov eax, [ebx+21Ch]
	cmp dword [eax], 0Ch
	jl loc_44B4B4
	mov eax, edx
	call sub_44B2E0

loc_44B4B4:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 6
	jnz loc_44B4CE
	mov eax, edx
	call sub_44D460

loc_44B4CE:
	mov eax, edx
	shl eax, 4
	add eax, edx
	mov ebx, 32h
	shl eax, 4
	mov esi, dword [dword_512208]
	mov dword dword_4D5D70[eax], ebx
	cmp esi, 1
	jz loc_44B504
	cmp dword [dword_512214], 0
	jnz loc_44B504
	cmp byte byte_4D5C7C[eax], 3
	jle loc_44B58F

loc_44B504:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44B509:
	xor eax, eax
	jmp loc_44B335

loc_44B510:
	xor ecx, ecx
	jmp loc_44B363

loc_44B517:
	xor ecx, ecx
	jmp loc_44B391

loc_44B51E:
	xor ecx, ecx
	jmp loc_44B3C2

loc_44B525:
	cmp dword [dword_512208], 1
	jnz loc_44B56B
	mov eax, dword dword_511D08[edx*4]
	test byte [eax+1F4h], 1
	jz loc_44B56B
	cmp dword [eax+280h], 2
	jnz loc_44B56B
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov ecx, dword (dword_4D5C78+1)[eax]
	sar ecx, 18h
	mov cl, byte byte_5118CC[ecx]
	mov byte byte_4D5C7C[eax], cl
	jmp loc_44B415

loc_44B56B:
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov ecx, dword (dword_4D5C78+1)[eax]
	sar ecx, 18h
	mov cl, byte byte_5118D9[ecx]
	mov byte byte_4D5C7C[eax], cl
	jmp loc_44B415

loc_44B58F:
	mov eax, dword (dword_4D5C78+1)[eax]
	sar eax, 18h
	mov dword [dword_511FF0], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44B2E0 endp

sub_44B5B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov ebx, eax
	shl eax, 4
	add eax, ecx
	xor ebx, ecx
	shl eax, 4
	and ecx, 1
	mov esi, dword dword_4D5C74[eax]
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	mov edi, dword [dword_512208]
	shl eax, 4
	mov dword [dword_4D965C], ebx
	mov byte byte_4D5C7C[eax], dl
	cmp edi, 1
	jnz loc_44B5F7
	test dl, dl
	jnz loc_44B5F7
	mov eax, ecx
	call sub_44B2E0

loc_44B5F7:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B61A
	call sub_42A360
	test eax, eax
	jnz loc_44B61A
	mov eax, ecx
	call sub_44B2E0

loc_44B61A:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 0
	jnz loc_44B638
	mov eax, [esi+21Ch]
	cmp dword [eax], 0Ch
	jge loc_44B651

loc_44B638:
	mov eax, ecx
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov dword dword_4D5D70[ecx], 32h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44B651:
	mov eax, ecx
	call sub_44B2E0
	jmp loc_44B638
;sub_44B5B0 endp

sub_44B660: ;SUBROUTINE
	push ebx
	push edx
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	and eax, 1
	mov ebx, dword dword_4D5C74[edx]
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	cmp byte byte_4D5C7C[edx], 0
	jnz loc_44B692
	cmp dword dword_5128C8[eax*4], 0
	jnz loc_44B69B

loc_44B692:
	cmp dword [ebx+17Ch], 0
	jle loc_44B6A3

loc_44B69B:
	mov eax, 9
	pop edx
	pop ebx
	ret

loc_44B6A3:
	cmp dword [ebx+2E8h], 0
	jnz loc_44B69B
	cmp dword [dword_540F28], 0
	jnz loc_44B69B
	mov edx, eax
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov eax, dword (dword_4D5C78+1)[eax]
	sar eax, 18h
	pop edx
	pop ebx
	ret
;sub_44B660 endp

off_44B6D0: dd loc_44B701
	dd loc_44B701 ; jump table for switch statement
	dd loc_44B701
	dd loc_44B701

sub_44B6E0: ;SUBROUTINE
	and eax, 1
	cmp dword dword_5128C8[eax*4], 0
	jz loc_44B6F0

loc_44B6ED:
	xor eax, eax ; jumptable 0044B6FA default case
	ret

loc_44B6F0:
	call sub_44B660
	cmp eax, 3 ; switch 4 cases
	ja loc_44B6ED ; jumptable 0044B6FA default case
	jmp off_44B6D0[eax*4] ; switch jump

loc_44B701:
	mov eax, 1 ; jumptable 0044B6FA cases 0-3
	ret
;sub_44B6E0 endp

sub_44B710: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov ebp, edx
	mov [esp+0Ch], ebx
	and ecx, 1
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp dword dword_4D5D68[eax], 0
	jnz loc_44B80C
	mov edi, ebp
	lea esi, dword dword_4D5C84[eax]
	movsd
	movsd
	movsd

loc_44B744:
	mov esi, ecx
	shl esi, 4
	add esi, ecx
	mov edx, dword_4D5C74
	shl esi, 4
	mov ebx, 1
	add edx, esi
	mov eax, ebp
	add edx, 54h
	call sub_44A6D0
	cmp dword dword_4D5D68[esi], 0
	jz loc_44B785
	mov ah, byte byte_4D5C7C[esi]
	test ah, ah
	jz loc_44B785
	cmp ah, 1
	jz loc_44B785
	mov edx, ebp
	mov eax, ecx
	call sub_44BD40

loc_44B785:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp dword dword_4D5D78[eax], 0
	jz loc_44B7A1
	mov edx, ebp
	mov eax, ecx
	call sub_44B9B0

loc_44B7A1:
	cmp dword [esp+0Ch], 1
	jz loc_44B81A
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	lea edi, [ebp+0Ch]
	shl eax, 4
	mov ecx, 9
	lea esi, dword dword_4D5C9C[eax]
	rep movsd

loc_44B7C2:
	lea ecx, [ebp+3Ch]
	lea eax, [ebp+0Ch]
	mov edx, ecx
	call sub_49D890
	mov eax, [ebp+0]
	mov [esp], eax
	neg eax
	mov [esp], eax
	mov eax, [ebp+4]
	mov edx, eax
	mov [esp+4], eax
	neg edx
	mov [esp+4], edx
	mov eax, [ebp+8]
	mov edx, ecx
	mov ebx, eax
	mov [esp+8], eax
	neg ebx
	mov eax, esp
	mov [esp+8], ebx
	lea ebx, [ebp+30h]
	call sub_480720
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_44B80C:
	mov edx, ebp
	mov eax, ecx
	call sub_44BF30
	jmp loc_44B744

loc_44B81A:
	lea edx, [ebp+0Ch]
	mov eax, ecx
	call sub_44EE20
	jmp loc_44B7C2
;sub_44B710 endp

sub_44B830: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov ecx, eax
	mov ebp, edx
	mov [esp+54h], ebx
	and ecx, 1
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp dword dword_4D5D74[eax], 0
	jnz loc_44B946

loc_44B859:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp dword dword_4D5D68[eax], 0
	jz loc_44B952
	mov edx, ebp
	mov eax, ecx
	call sub_44BF30

loc_44B879:
	mov esi, ecx
	shl esi, 4
	add esi, ecx
	mov edx, dword_4D5C74
	shl esi, 4
	mov ebx, 1
	add edx, esi
	mov eax, ebp
	add edx, 54h
	call sub_44A6D0
	cmp dword dword_4D5D68[esi], 0
	jz loc_44B8BA
	mov ah, byte byte_4D5C7C[esi]
	test ah, ah
	jz loc_44B8BA
	cmp ah, 1
	jz loc_44B8BA
	mov edx, ebp
	mov eax, ecx
	call sub_44BD40

loc_44B8BA:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	cmp dword dword_4D5D78[eax], 0
	jz loc_44B8D6
	mov edx, ebp
	mov eax, ecx
	call sub_44B9B0

loc_44B8D6:
	cmp dword [esp+54h], 1
	jnz loc_44B962
	lea edx, [ebp+0Ch]
	mov eax, ecx
	call sub_44EE20

loc_44B8EB:
	cmp dword [dword_51222C], 0
	jnz loc_44B981

loc_44B8F8:
	lea ecx, [ebp+3Ch]
	lea eax, [ebp+0Ch]
	mov edx, ecx
	call sub_49D890
	mov eax, [ebp+0]
	mov edi, eax
	mov [esp+48h], eax
	neg edi
	mov [esp+48h], edi
	mov eax, [ebp+4]
	mov [esp+4Ch], eax
	neg eax
	mov [esp+4Ch], eax
	mov eax, [ebp+8]
	lea ebx, [ebp+30h]
	mov edx, eax
	mov [esp+50h], eax
	neg edx
	lea eax, [esp+48h]
	mov [esp+50h], edx
	mov edx, ecx
	call sub_480720
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_44B946:
	mov eax, ecx
	call sub_44C780
	jmp loc_44B859

loc_44B952:
	mov edi, ebp
	lea esi, dword dword_4D5C84[eax]
	movsd
	movsd
	movsd
	jmp loc_44B879

loc_44B962:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	lea edi, [ebp+0Ch]
	shl eax, 4
	mov ecx, 9
	lea esi, dword dword_4D5C9C[eax]
	rep movsd
	jmp loc_44B8EB

loc_44B981:
	mov edx, esp
	mov eax, 0FFFF0000h
	lea ebx, [esp+24h]
	mov ecx, 9
	call sub_44B240
	mov eax, esp
	lea edx, [ebp+0Ch]
	lea esi, [esp+24h]
	call sub_49E840
	lea edi, [ebp+0Ch]
	rep movsd
	jmp loc_44B8F8
;sub_44B830 endp

sub_44B9B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov [esp+14h], eax
	mov [esp+18h], edx
	mov edi, esp
	mov esi, dword_44B230
	movsd
	movsd
	movsd
	mov esi, eax
	shl esi, 4
	add esi, eax
	mov ecx, dword_4D5C74
	shl esi, 4
	add ecx, esi
	mov eax, dword dword_4D5C78[esi]
	lea ebx, [ecx+28h]
	add eax, 9Ch
	lea ebp, [ecx+34h]
	call sub_45EEB0
	add ecx, 40h
	cmp eax, 960000h
	jg loc_44BBE0
	mov eax, dword dword_4D5C78[esi]
	mov edx, [esp+18h]
	mov eax, [eax+9Ch]
	mov edi, [edx]
	sub eax, edi
	mov [ecx], eax
	mov eax, dword dword_4D5C78[esi]
	mov edi, [edx+4]
	mov eax, [eax+0A0h]
	sub eax, edi
	mov [ecx+4], eax
	mov eax, dword dword_4D5C78[esi]
	mov edi, [edx+8]
	mov eax, [eax+0A4h]
	sub eax, edi
	mov [ecx+8], eax
	cmp dword [dword_540D94], 2
	jnz loc_44BA4F
	mov eax, dword dword_4D5CC4[esi]
	mov [esp], eax

loc_44BA4F:
	mov eax, ecx
	call sub_45E760
	mov eax, [esp]
	mov edx, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+4]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+8]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	test eax, eax
	jle loc_44BBE9
	mov eax, [esp]
	mov edx, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+4]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+8]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi

loc_44BACC:
	cmp eax, 0FD70h
	jle loc_44BADA
	mov edi, esp
	mov esi, ebp
	movsd
	movsd
	movsd

loc_44BADA:
	mov eax, [esp+4]
	mov edx, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+4]
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov [ebx], esi
	mov eax, [esp+8]
	mov edx, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+8]
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov [ebx+4], esi
	mov eax, [esp]
	mov edx, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov eax, ebx
	mov [ebx+8], esi
	call sub_45E760
	mov edx, [ebx+8]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx+4]
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov [ebp+0], esi
	mov edx, [ebx]
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx+8]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov [ebp+4], esi
	mov edx, [ebx+4]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub esi, eax
	mov [ebp+8], esi
	mov edx, [esp+14h]
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov edx, dword dword_4D5CC0[eax]
	test edx, edx
	jnz loc_44BC27

loc_44BBE0:
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44BBE9:
	mov eax, [esp]
	mov edx, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+4]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+8]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	neg eax
	jmp loc_44BACC

loc_44BC27:
	lea ebx, [esp+10h]
	mov eax, edx
	lea edx, [esp+0Ch]
	call sub_49EA20
	mov esi, [ebp+0]
	mov edx, [esp+10h]
	mov eax, esi
	mov ebx, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov edi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub edi, eax
	mov [ebp+0], edi
	mov eax, esi
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov esi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov [ecx], esi
	mov esi, [ebp+4]
	mov edx, [esp+10h]
	mov eax, esi
	mov ebx, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov edi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub edi, eax
	mov [ebp+4], edi
	mov eax, esi
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov esi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov [ecx+4], esi
	mov esi, [ebp+8]
	mov edx, [esp+10h]
	mov eax, esi
	mov ebx, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov edi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub edi, eax
	mov [ebp+8], edi
	mov eax, esi
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov esi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov [ecx+8], esi
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44B9B0 endp

sub_44BD40: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 34h
	mov esi, eax
	mov [esp+30h], edx
	shl eax, 4
	add eax, esi
	mov ecx, dword_4D5C74
	shl eax, 4
	add ecx, eax
	xor ebp, ebp
	mov edx, [ecx+64h]
	add ecx, 54h
	test edx, edx
	jz loc_44BE2B
	mov eax, [ecx+18h]
	movsx eax, word [eax]
	add eax, eax

loc_44BD74:
	mov [esp+0Ch], eax
	cmp dword [ecx+10h], 0
	jz loc_44BE4C
	mov eax, [ecx+18h]
	mov eax, [eax]
	sar eax, 10h
	add eax, eax

loc_44BD8C:
	mov [esp+10h], eax
	cmp dword [ecx+10h], 0
	jz loc_44BE6F
	mov eax, [ecx+18h]
	mov eax, [eax+2]
	sar eax, 10h
	add eax, eax

loc_44BDA5:
	lea edx, [esp+0Ch]
	mov [esp+14h], eax
	lea ebx, [ecx+20h]
	mov eax, [esp+30h]
	call sub_462EF0
	mov edx, [esp+30h]
	add eax, 10000h
	cmp eax, [edx+4]
	jle loc_44BDCA
	mov [edx+4], eax

loc_44BDCA:
	mov edx, 1
	mov eax, ecx
	call sub_449AE0
	test al, 3Fh
	jnz loc_44BE23
	push edi
	mov eax, esi
	shl eax, 4
	add eax, esi
	shl eax, 4
	mov esi, dword dword_4D5C74[eax]
	lea edi, [esp+4]
	lea esi, [esi+9Ch]
	movsd
	movsd
	movsd
	mov edx, [esp+0Ah]
	lea edi, [esp+1Ch]
	add edx, 3
	mov esi, [esp+34h]
	mov [esp+0Ah], dx

loc_44BE0C:
	movsd
	movsd
	movsd
	mov eax, ebp
	inc ebp
	cmp eax, 0Ah
	jl loc_44BE90

loc_44BE17:
	mov edi, [esp+34h]
	lea esi, [esp+1Ch]
	movsd
	movsd
	movsd
	pop edi

loc_44BE23:
	add esp, 34h
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_44BE2B:
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+9]
	sar eax, 18h
	shl eax, 9
	jmp loc_44BD74

loc_44BE4C:
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov eax, [edx+eax+0Ah]
	sar eax, 18h
	shl eax, 9
	jmp loc_44BD8C

loc_44BE6F:
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+0Bh]
	sar eax, 18h
	shl eax, 9
	jmp loc_44BDA5

loc_44BE90:
	lea edx, [esp+1Ch]
	lea eax, [esp+4]
	call sub_45EEB0
	cmp eax, 28Fh
	jle loc_44BE17
	mov edx, [esp+4]
	mov esi, [esp+1Ch]
	add edx, esi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edi, [esp+20h]
	mov edx, [esp+8]
	add edx, edi
	mov [esp+28h], eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+0Ch]
	mov [esp+2Ch], eax
	mov eax, [esp+24h]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, 1
	mov [esp+30h], eax
	mov edx, ecx
	lea eax, [esp+28h]
	call sub_44A6D0
	mov edx, 1
	mov eax, ecx
	call sub_449AE0
	test al, 3Fh
	jnz loc_44BF1A
	lea edi, [esp+1Ch]
	lea esi, [esp+28h]
	jmp loc_44BE0C

loc_44BF1A:
	lea edi, [esp+4]
	lea esi, [esp+28h]
	jmp loc_44BE0C
;sub_44BD40 endp

sub_44BF30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 94h
	mov [esp+78h], eax
	mov edi, edx
	xor edx, edx
	mov [esp+84h], edx
	mov edx, eax
	shl eax, 4
	add eax, edx
	mov edx, dword_4D5C74
	shl eax, 4
	add edx, eax
	lea ebp, [edx+10h]
	mov eax, dword dword_4D5C74[eax]
	add edx, 54h
	mov eax, [eax+14h]
	mov [edx+0Ch], eax
	mov eax, ebp
	mov [esp+6Ch], edx
	call sub_44AF60
	mov eax, [esp+6Ch]
	mov eax, [eax+0Ch]
	mov [esp+90h], eax
	mov [esp+7Ch], eax
	mov edx, [esp+90h]
	shl eax, 3
	add eax, edx
	shl eax, 2
	mov [esp+74h], eax
	mov edx, [esp+74h]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dx, [eax+1Ch]
	shl edx, 8
	mov [esp+8Ch], edx
	xor edx, edx
	mov dx, [eax+1Ah]
	shl edx, 8
	mov [esp+88h], edx
	mov edx, [eax+0Fh]
	sar edx, 18h
	shl edx, 9
	mov [esp+24h], edx
	mov edx, [eax+10h]
	sar edx, 18h
	shl edx, 9
	mov [esp+28h], edx
	mov edx, [eax+11h]
	sar edx, 18h
	shl edx, 9
	mov [esp+2Ch], edx
	mov edx, [ebp+0]
	mov [esp+90h], edx
	mov edx, [eax]
	sub [esp+90h], edx
	mov edx, [esp+90h]
	mov [esp+60h], edx
	mov edx, [ebp+4]
	mov [esp+90h], edx
	mov edx, [eax+4]
	sub [esp+90h], edx
	mov edx, [esp+90h]
	mov [esp+64h], edx
	mov edx, [ebp+8]
	mov eax, [eax+8]
	sub edx, eax
	mov eax, [esp+60h]
	mov [esp+68h], edx
	mov edx, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov [esp+90h], eax
	mov eax, [esp+64h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	add edx, eax
	mov eax, [esp+68h]
	mov [esp+90h], edx
	mov edx, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	add edx, eax
	lea esi, [esp+24h]
	mov [esp+80h], edx
	mov eax, edx
	mov edx, [esp+8Ch]
	lea ebx, [esp+30h]
	sub eax, edx
	lea ecx, [esp+3Ch]
	cmp eax, 60000h
	jg loc_44C45B
	mov eax, [esp+80h]
	mov edx, [esp+88h]
	neg eax
	sub eax, edx
	cmp eax, 60000h
	jg loc_44C45B
	mov edx, [esp+74h]
	mov eax, dword [dword_5118A4]
	add eax, edx
	test byte [eax+1Eh], 0Fh
	jz loc_44C3FF
	mov edx, [esp+80h]
	add edx, 28000h
	sub edx, [esp+8Ch]
	test edx, edx
	jle loc_44C3FF
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+3Ch], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	shl edx, 9
	mov [esp+40h], edx
	mov eax, [eax+0Eh]
	sar eax, 18h
	shl eax, 9
	mov [esp+44h], eax
	lea eax, [esp+3Ch]
	call sub_45E760
	mov edx, [esp+2Ch]
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ecx, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	sub ecx, eax
	mov eax, [esp+44h]
	mov [esp+30h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	mov ecx, eax
	mov eax, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	sub ecx, eax
	mov eax, [esp+3Ch]
	mov [esp+34h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	mov ecx, eax
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	lea eax, [esp+30h]
	mov [esp+38h], ecx
	call sub_45E760
	mov edx, [esp+44h]
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ecx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	sub ecx, eax
	mov eax, [esp+38h]
	mov [esp+24h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov ecx, eax
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	sub ecx, eax
	mov eax, [esp+30h]
	mov [esp+28h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	mov ecx, eax
	mov eax, [esp+34h]
	lea ebx, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esp
	sub ecx, eax
	lea eax, [esp+24h]
	mov [esp+2Ch], ecx
	call sub_49D890
	mov edx, esp
	lea eax, [esp+60h]
	call sub_480720
	mov eax, [esp+8Ch]
	cmp eax, 38000h
	jge loc_44C295
	mov ebx, [esp+48h]
	lea ecx, [eax+38000h]
	mov edx, 1
	mov [esp+8Ch], ecx
	add ebx, 38000h
	mov [esp+84h], edx
	mov [esp+48h], ebx

loc_44C295:
	mov eax, [esp+48h]
	mov ebx, [esp+48h]
	mov ecx, [esp+8Ch]
	xor edx, edx
	mov [esp+54h], eax
	mov esi, eax
	mov [esp+5Ch], edx
	add ebx, 38000h
	mov eax, 30000h
	neg esi
	sub ebx, ecx
	mov [esp+58h], eax
	mov [esp+54h], esi
	cmp ebx, 10000h
	jle loc_44C45B
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esp+8Ch]
	add edx, 0FFFE8000h
	sub edx, eax
	mov eax, edx
	mov edx, [esp+48h]
	sub edx, eax
	mov ebx, [esp+48h]
	mov eax, edx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, esi
	mov ecx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 30000h
	mov esi, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	xor edx, edx
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	add edx, esi
	mov [esp+60h], edx
	mov edx, [esp+4Ch]
	add edx, ebx
	mov [esp+64h], edx
	mov edx, [esp+50h]
	add edx, eax
	mov ebx, [esp+84h]
	mov [esp+68h], edx
	test ebx, ebx
	jz loc_44C381
	add dword [esp+60h], 0FFFC8000h

loc_44C381:
	lea edx, [esp+24h]
	lea eax, [esp+60h]
	mov ebx, edi
	call sub_480720
	mov edx, [esp+7Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov ebp, [edi]
	mov edx, [eax]
	add ebp, edx
	mov [edi], ebp
	mov ecx, [edi+4]
	mov edx, [eax+4]
	add ecx, edx
	mov [edi+4], ecx
	mov ebx, [edi+8]
	mov eax, [eax+8]
	mov edx, [esp+78h]
	add ebx, eax
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov [edi+8], ebx
	cmp byte byte_4D5C7C[eax], 0Ch
	jz loc_44C3E9

loc_44C3DD:
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44C3E9:
	mov dword dword_4D5D78[eax], 1
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44C3FF:
	mov eax, [esp+7Ch]
	mov [esp+90h], eax
	mov edx, [esp+90h]
	shl eax, 3
	add eax, edx
	shl eax, 2
	mov [esp+70h], eax
	mov edx, [esp+70h]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Eh]
	sar edx, 4
	mov [esp+90h], edx
	test byte [esp+90h], 0Fh
	jz loc_44C45B
	mov edx, [esp+80h]
	neg edx
	add edx, 28000h
	sub edx, [esp+88h]
	test edx, edx
	jg loc_44C46C

loc_44C45B:
	mov esi, ebp
	movsd
	movsd
	movsd
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44C46C:
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+3Ch], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	shl edx, 9
	mov [esp+40h], edx
	mov eax, [eax+0Eh]
	sar eax, 18h
	shl eax, 9
	mov [esp+44h], eax
	mov eax, ecx
	call sub_45E760
	mov edx, [esi+8]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [esi+4]
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov [ebx], edx
	mov edx, [esi]
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [esi+8]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov [ebx+4], edx
	mov edx, [esi+4]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [esi]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov eax, ebx
	mov [ebx+8], edx
	call sub_45E760
	mov edx, [ecx+8]
	mov eax, [ebx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [ecx+4]
	mov eax, [ebx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov [esi], edx
	mov edx, [ecx]
	mov eax, [ebx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [ecx+8]
	mov eax, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov [esi+4], edx
	mov edx, [ecx+4]
	mov eax, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+90h], eax
	mov edx, [ecx]
	mov eax, [ebx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+90h]
	sub edx, eax
	mov [esi+8], edx
	mov edx, esp
	lea eax, [esp+24h]
	lea ebx, [esp+48h]
	call sub_49D890
	mov edx, esp
	lea eax, [esp+60h]
	mov ecx, [esp+88h]
	call sub_480720
	cmp ecx, 38000h
	jge loc_44C618
	mov eax, [esp+48h]
	lea esi, [ecx+38000h]
	mov ebx, 1
	mov [esp+88h], esi
	add eax, 0FFFC8000h
	mov [esp+84h], ebx
	mov [esp+48h], eax

loc_44C618:
	mov eax, [esp+48h]
	mov esi, [esp+88h]
	xor ebx, ebx
	mov edx, eax
	mov [esp+54h], eax
	neg edx
	mov [esp+5Ch], ebx
	mov [esp+54h], edx
	lea ebx, [edx+38000h]
	mov ecx, 30000h
	sub ebx, esi
	mov [esp+58h], ecx
	cmp ebx, 10000h
	jle loc_44C45B
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	lea edx, [esi-18000h]
	mov ebx, [esp+48h]
	sub edx, eax
	neg ebx
	mov eax, edx
	mov edx, ebx
	sub edx, eax
	mov eax, edx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esp+54h]
	mov ecx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 30000h
	mov ebx, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	xor edx, edx
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	add edx, ebx
	mov [esp+60h], edx
	mov edx, [esp+4Ch]
	add edx, esi
	mov [esp+64h], edx
	mov edx, [esp+50h]
	add edx, eax
	mov ebp, [esp+84h]
	mov [esp+68h], edx
	test ebp, ebp
	jz loc_44C6FB
	add dword [esp+60h], 38000h

loc_44C6FB:
	lea edx, [esp+24h]
	lea eax, [esp+60h]
	mov ebx, edi
	call sub_480720
	mov edx, [esp+7Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov ecx, [edi]
	mov edx, [eax]
	add ecx, edx
	mov [edi], ecx
	mov ebx, [edi+4]
	mov edx, [eax+4]
	add ebx, edx
	mov [edi+4], ebx
	mov esi, [edi+8]
	mov eax, [eax+8]
	mov edx, [esp+78h]
	add esi, eax
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov [edi+8], esi
	cmp byte byte_4D5C7C[eax], 0Ch
	jnz loc_44C3DD
	mov dword dword_4D5D78[eax], 1
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44BF30 endp

sub_44C780: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 6Ch
	mov ecx, eax
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	mov ebx, dword dword_4D5D74[edx]
	mov eax, dword dword_4D5C74[edx]
	cmp ebx, 1
	jnz loc_44C82C
	mov ebx, [eax+664h]
	mov edx, [eax+668h]
	add ebx, ebx

loc_44C7B7:
	cmp dword [eax+304h], 3C0000h
	jle loc_44C7CE
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax

loc_44C7CE:
	mov esi, ecx
	shl esi, 4
	add esi, ecx
	mov eax, esp
	shl esi, 4
	call sub_49E7E0
	mov edx, dword dword_4D5CC0[esi]
	lea eax, [esp+24h]
	add edx, ebx
	call sub_49E720
	lea ebx, [esp+48h]
	lea edx, [esp+24h]
	mov eax, esp
	call sub_49E840
	mov edx, dword_4D5C74
	mov ebx, esp
	add edx, esi
	lea eax, [esp+48h]
	add edx, 28h
	mov ecx, 9
	call sub_49E840
	lea edi, dword dword_4D5C9C[esi]
	mov esi, esp
	rep movsd
	add esp, 6Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44C82C:
	mov edx, [eax+668h]
	mov ebx, [eax+664h]
	sar edx, 1
	jmp loc_44C7B7
;sub_44C780 endp

sub_44C840: ;SUBROUTINE
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0A4h
	mov edx, dword [dword_512208]
	cmp edx, 1
	jnz loc_44CA6C
	mov eax, edx

loc_44C85B:
	push ecx
	push ebx
	mov ecx, 20h
	lea edi, [esp+8]
	mov esi, dword_44B194
	movzx ebp, byte [byte_4DB322]
	mov ebx, eax
	xor edx, edx
	rep movsd
	mov dl, byte [byte_4DB32A]
	lea edi, [esp+88h]
	mov esi, dword_44B214
	and ebp, edx
	xor ecx, ecx
	movsd
	movsd
	movsd
	movsb
	mov cl, byte [byte_4DB324]
	lea edi, [esp+98h]
	and ecx, edx
	mov esi, byte_44B221
	mov [esp+0A8h], ecx
	xor edx, edx
	movsd
	movsd
	movsd
	movsb
	test eax, eax
	jl loc_44C9F1
	xor eax, eax

loc_44C8BD:
	test ebx, ebx
	jz loc_44CA73
	mov esi, edx

loc_44C8C7:
	mov ecx, dword dword_511D08[esi*4]
	mov dword dword_4D5C80[eax], ebx
	mov dword dword_4D5C74[eax], ecx
	mov dword dword_4D5C78[eax], ecx
	mov byte byte_4D5C7C[eax], 0Bh
	mov esi, dword dword_4D5C74[eax]
	lea edi, dword dword_4D5C84[eax]
	lea esi, [esi+9Ch]
	xor ecx, ecx
	movsd
	movsd
	movsd
	mov dword dword_4D5C90[eax], ecx
	mov dword dword_4D5C94[eax], ecx
	mov edi, 0FFFD0000h
	mov esi, dword dword_4D5C74[eax]
	mov dword dword_4D5C98[eax], edi
	mov ecx, 9
	lea edi, dword dword_4D5C9C[eax]
	lea esi, [esi+0C4h]
	rep movsd
	xor ecx, ecx
	mov dword dword_4D5CC0[eax], ecx
	lea esi, [esp+8]
	lea edi, dword dword_4D5CC8[eax]
	mov dword dword_4D5CC4[eax], ecx
	mov ecx, 20h
	rep movsd
	mov edi, 0FFFFFFFFh
	xor ecx, ecx
	mov dword dword_4D5D48[eax], edi
	mov esi, dword [dword_5121F8]
	mov dword dword_4D5D4C[eax], ecx
	test esi, esi
	jnz loc_44CA7E
	cmp dword [dword_512208], 4
	jz loc_44CA7E
	cmp dword [dword_512228], 0
	jnz loc_44CA7E
	mov dword dword_4D5D50[eax], esi

loc_44C98E:
	add eax, 110h
	mov ecx, 0FFFFFFFFh
	xor esi, esi
	mov dword dword_4D5C44[eax], ecx
	mov dword dword_4D5C48[eax], esi
	mov dword dword_4D5C4C[eax], esi
	mov dword dword_4D5C50[eax], esi
	mov dword dword_4D5C54[eax], esi
	mov dword dword_4D5C58[eax], esi
	mov dword dword_4D5C5C[eax], esi
	mov dword dword_4D5C60[eax], esi
	mov dword dword_4D5C64[eax], esi
	mov dword dword_4D5C68[eax], esi
	mov edi, 1
	mov dword dword_4D5C6C[eax], esi
	add edx, edi
	mov dword dword_4D5C70[eax], edi
	cmp edx, ebx
	jle loc_44C8BD

loc_44C9F1:
	test ebp, ebp
	jz loc_44C9FD
	mov byte [esp+8Bh], 4

loc_44C9FD:
	cmp dword [esp+0A8h], 0
	jnz loc_44CAA5

loc_44CA0B:
	xor esi, esi
	pop ebx
	pop ecx

loc_44CA0F:
	inc esi
	mov al, [esp+esi+7Fh]
	mov byte byte_5118D8[esi], al
	mov al, [esp+esi+8Fh]
	mov byte byte_5118CB[esi], al
	cmp esi, 0Dh
	jl loc_44CA0F
	mov edx, 1Eh
	mov eax, 3
	xor edi, edi
	call sub_449D80
	mov dword [dword_4D5E94], edi
	mov dword [dword_4D5E98], edi
	mov dword [dword_4D5E9C], edi
	mov dword [dword_4D5EA0], edi
	mov dword [dword_4D5EA4], edi
	mov dword [dword_4D5EA8], edi
	add esp, 0A4h
	pop ebp
	pop edi
	pop esi
	pop edx
	ret

loc_44CA6C:
	xor eax, eax
	jmp loc_44C85B

loc_44CA73:
	mov esi, dword [dword_51220C]
	jmp loc_44C8C7

loc_44CA7E:
	cmp dword [dword_512228], 0
	jz loc_44CA96
	mov dword dword_4D5D50[eax], 5
	jmp loc_44C98E

loc_44CA96:
	mov dword dword_4D5D50[eax], 4
	jmp loc_44C98E

loc_44CAA5:
	test ebp, ebp
	jz loc_44CAB6
	mov byte [esp+8Fh], 8
	jmp loc_44CA0B

loc_44CAB6:
	mov byte [esp+8Bh], 8
	jmp loc_44CA0B
;sub_44C840 endp

off_44CAD0: dd loc_44CC17
	dd loc_44CC17 ; jump table for switch statement
	dd loc_44CC32
	dd loc_44CC3B
	dd loc_44CC47
	dd loc_44CC53
	dd loc_44CC5F
	dd loc_44CC6B
	dd loc_44CC77
	dd loc_44CBBE
	dd loc_44CBBE
	dd loc_44CC83
	dd loc_44CC8F

sub_44CB04: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, dword [dword_4D5C80]
	xor ecx, ecx
	test edx, edx
	jl loc_44CBD3
	xor ebx, ebx

loc_44CB1B:
	mov esi, dword dword_4D5C74[ebx]
	test byte [esi+1F4h], 1
	jz loc_44CBAE
	cmp dword [esi+280h], 2
	jnz loc_44CBAE
	cmp dword dword_4D5D58[ebx], 0
	jnz loc_44CBAE
	mov eax, 1
	mov edx, dword [dword_512208]
	mov dword dword_4D5D58[ebx], eax
	cmp edx, eax
	jz loc_44CB6F
	cmp byte [byte_4D5C7C], 3
	jg loc_44CB6F
	mov eax, dword [dword_4D5C78+1]
	sar eax, 18h
	mov dword [dword_511FF0], eax

loc_44CB6F:
	mov edx, 0Ch
	mov eax, ecx
	call sub_44B5B0
	mov edi, dword dword_4D5D54[ebx]
	cmp edi, 0FFFFFFFFh
	jz loc_44CB8D
	mov eax, edi
	call sub_440BC0

loc_44CB8D:
	cmp dword [dword_512228], 0
	jz loc_44CBD9
	mov edx, 6
	mov eax, edx
	mov dword dword_4D5D50[ebx], edx

loc_44CBA3:
	call sub_440C30
	mov dword dword_4D5D54[ebx], eax

loc_44CBAE:
	cmp dword [esi+17Ch], 0
	jle loc_44CBE6
	mov eax, ecx
	call sub_44CCA0

loc_44CBBE:
	mov esi, dword [dword_4D5C80] ; jumptable 0044CC10 cases 9,10
	inc ecx
	add ebx, 110h
	cmp ecx, esi
	jle loc_44CB1B

loc_44CBD3:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44CBD9:
	mov eax, 1
	mov dword dword_4D5D50[ebx], eax
	jmp loc_44CBA3

loc_44CBE6:
	cmp dword [dword_5222D0], 0
	jnz loc_44CC20
	cmp dword [dword_540F28], 0
	jnz loc_44CC20
	cmp dword [esi+2E8h], 0
	jnz loc_44CC29
	mov al, byte byte_4D5C7C[ebx]
	cmp al, 0Ch
	ja loc_44CBBE ; jumptable 0044CC10 cases 9,10
	and eax, 0FFh ; switch 13 cases
	jmp off_44CAD0[eax*4] ; switch jump

loc_44CC17:
	mov eax, ecx ; jumptable 0044CC10 cases 0,1
	call sub_44EB20
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC20:
	mov eax, ecx
	call sub_44E0A0
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC29:
	mov eax, ecx
	call sub_44DF40
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC32:
	mov eax, ecx ; jumptable 0044CC10 case 2
	call sub_44E490
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC3B:
	mov eax, ecx ; jumptable 0044CC10 case 3
	call sub_44E820
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC47:
	mov eax, ecx ; jumptable 0044CC10 case 4
	call sub_44E230
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC53:
	mov eax, ecx ; jumptable 0044CC10 case 5
	call sub_44DC40
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC5F:
	mov eax, ecx ; jumptable 0044CC10 case 6
	call sub_44CE50
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC6B:
	mov eax, ecx ; jumptable 0044CC10 case 7
	call sub_44D5B0
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC77:
	mov eax, ecx ; jumptable 0044CC10 case 8
	call sub_44D520
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC83:
	mov eax, ecx ; jumptable 0044CC10 case 11
	call sub_44DA30
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10

loc_44CC8F:
	mov eax, ecx ; jumptable 0044CC10 case 12
	call sub_44D750
	jmp loc_44CBBE ; jumptable 0044CC10 cases 9,10
;sub_44CB04 endp

sub_44CCA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov ebx, eax
	mov edi, eax
	shl edi, 4
	add eax, edi
	mov edi, dword_4D5C74
	shl eax, 4
	add edi, eax
	mov eax, dword dword_4D5C74[eax]
	add edi, 10h
	lea ecx, [eax+9Ch]
	mov edx, edi
	mov esi, [eax+14h]
	mov eax, ecx
	call sub_45EEB0
	cmp eax, 960000h
	jle loc_44CCE8
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44CCE8:
	mov eax, [ecx]
	sub eax, [edi]
	mov edx, 0CCCh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [edi]
	mov ebp, [edi+4]
	add edx, eax
	mov eax, [ecx+4]
	mov [esp], edx
	sub eax, ebp
	mov edx, 0CCCh
	add eax, 40000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [edi+4]
	add edx, eax
	mov [esp+4], edx
	mov eax, [ecx+8]
	mov edx, [edi+8]
	mov ecx, esi
	sub eax, edx
	mov edx, 0CCCh
	shl esi, 3
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, ecx
	mov edx, [edi+8]
	shl esi, 2
	add edx, eax
	mov eax, dword [dword_5118A4]
	mov [esp+8], edx
	mov edx, [esp]
	sub edx, [esi+eax]
	mov ebp, [esi+eax+4]
	mov [esp+0Ch], edx
	mov edx, [esp+4]
	sub edx, ebp
	mov ecx, [esi+eax+8]
	mov [esp+10h], edx
	mov edx, [esp+8]
	sub edx, ecx
	mov ecx, [esi+eax+0Fh]
	sar ecx, 18h
	shl ecx, 9
	mov [esp+14h], edx
	mov [esp+18h], ecx
	mov ecx, [esi+eax+10h]
	mov eax, [esi+eax+11h]
	mov edx, [esp+18h]
	sar eax, 18h
	sar ecx, 18h
	shl eax, 9
	shl ecx, 9
	mov [esp+20h], eax
	mov eax, [esp+0Ch]
	mov [esp+1Ch], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ecx, eax
	mov eax, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ecx, eax
	mov eax, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	mov ecx, dword [dword_5118A4]
	add ecx, esi
	xor esi, esi
	mov si, [ecx+1Ah]
	shl esi, 8
	neg esi
	cmp esi, eax
	jge loc_44CE0F
	mov cx, [ecx+1Ch]
	and ecx, 0FFFFh
	shl ecx, 8
	cmp eax, ecx
	jge loc_44CE0F
	mov esi, esp
	movsd
	movsd
	movsd

loc_44CE0F:
	mov edi, ebx
	shl edi, 4
	add edi, ebx
	shl edi, 4
	xor ebx, ebx
	mov dword dword_4D5CC0[edi], ebx
	mov ebp, 1
	mov dword dword_4D5D74[edi], ebx
	mov dword dword_4D5D78[edi], ebp
	mov dword dword_4D5D68[edi], ebx
	mov dword dword_4D5D64[edi], ebp
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44CCA0 endp

sub_44CE50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov ebx, eax
	mov ecx, 8
	mov edi, esp
	mov esi, dword_44B154
	shl eax, 4
	rep movsd
	add eax, ebx
	mov ecx, 8
	lea edi, [esp+20h]
	mov esi, dword_44B174
	shl eax, 4
	rep movsd
	mov edx, dword [dword_540F2C]
	mov esi, dword dword_4D5C74[eax]
	xor edi, edi
	test edx, edx
	jz loc_44CEA0
	cmp dword [dword_5227A8], 0
	jz loc_44D2A4

loc_44CEA0:
	cmp dword [dword_4D965C], 0
	jnz loc_44D2A4
	cmp dword [dword_540F44], 0
	jz loc_44CEBD
	inc dword dword_4D5E94[ebx*4]

loc_44CEBD:
	lea eax, 0[ebx*4]
	mov ecx, dword dword_4D5EA4[eax]
	mov edx, dword dword_4D5E94[eax]
	mov ebp, [esp+ecx*4+20h]
	cmp edx, ebp
	jnz loc_44CF98
	xor edx, ebp
	mov dword dword_4D5E94[eax], edx
	mov eax, dword dword_4D5E9C[eax]
	mov ecx, dword [dword_5118A0]
	inc eax
	cmp eax, ecx
	jl loc_44CEF7
	sub eax, ecx

loc_44CEF7:
	mov dword dword_4D5E9C[ebx*4], eax
	mov eax, [esi+14h]
	mov edx, dword dword_4D5E9C[ebx*4]
	mov ecx, [esi+39Ch]
	sub eax, edx
	mov edx, dword dword_4D5EA4[ebx*4]
	mov ebp, ecx
	sub ebp, [esp+edx*4]
	mov [esp+54h], ebp
	cmp eax, 7
	jle loc_44D2AE

loc_44CF29:
	mov edi, 1

loc_44CF2E:
	mov ebp, [esp]
	xor eax, eax
	xor edx, edx
	cmp ecx, ebp
	jle loc_44CF48

loc_44CF39:
	inc edx
	mov ebp, [esp+eax+4]
	add eax, 4
	cmp ecx, ebp
	jg loc_44CF39

loc_44CF48:
	mov dword dword_4D5EA4[ebx*4], edx
	sub ecx, [esp+edx*4]
	cmp edi, 1
	jnz loc_44D332
	cmp ecx, 30000h
	jge loc_44D2F4
	mov eax, [esi+14h]
	mov ecx, dword [dword_5118A0]
	add eax, 3
	cmp eax, ecx
	jl loc_44CF79
	sub eax, ecx

loc_44CF79:
	mov dword dword_4D5E9C[ebx*4], eax
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	shl eax, 4
	mov edx, dword dword_4D5CC4[eax]
	neg edx
	mov dword dword_4D5CC4[eax], edx

loc_44CF98:
	test edi, edi
	jz loc_44CFB3
	lea eax, 0[ebx*4]
	add eax, ebx
	cmp dword dword_5227C0[eax*4], 0
	jnz loc_44D36C

loc_44CFB3:
	mov eax, dword dword_4D5E9C[ebx*4]
	mov ecx, dword [dword_5118A0]
	inc eax
	cmp eax, ecx
	jl loc_44D37D
	mov ebp, eax
	sub ebp, ecx

loc_44CFCD:
	mov edx, dword dword_4D5E9C[ebx*4]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	mov [esp+4Ch], edx
	lea ecx, [edx+eax]
	lea eax, 0[ebp*8]
	add eax, ebp
	shl eax, 2
	add edx, eax
	mov ebp, [ecx]
	mov [esp+50h], edx
	mov edx, [edx]
	sub edx, ebp
	mov eax, edx
	mov ebp, dword dword_4D5EA4[ebx*4]
	sar edx, 1Fh
	mov edi, [esp+ebp*4+20h]
	idiv edi
	mov edx, [esp+50h]
	mov [esp+40h], eax
	mov edx, [edx+4]
	mov eax, [ecx+4]
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov edx, [esp+50h]
	mov [esp+44h], eax
	mov edx, [edx+8]
	mov eax, [ecx+8]
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov ebp, [esp+40h]
	mov [esp+48h], eax
	imul ebp, dword dword_4D5E94[ebx*4]
	mov edx, [ecx]
	mov edi, dword dword_4D5E94[ebx*4]
	add ebp, edx
	mov edx, [esp+44h]
	imul edx, edi
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	shl eax, 4
	mov dword dword_4D5C84[eax], ebp
	mov ebp, [ecx+4]
	add edx, ebp
	mov dword dword_4D5C88[eax], edx
	mov edx, [esp+48h]
	imul edx, edi
	mov ebp, [ecx+8]
	add edx, ebp
	mov dword dword_4D5C8C[eax], edx
	mov edx, dword dword_4D5CD4[eax]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, [esp+4Ch]
	shl eax, 2
	add eax, edx
	mov ax, [eax+18h]
	and eax, 0FFFFh
	call sub_44DEF0
	test eax, eax
	jz loc_44D384

loc_44D0C2:
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	shl eax, 4
	mov eax, dword dword_4D5C74[eax]
	cmp dword [eax+0C0h], 0
	jl loc_44D3B2
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ax, [edx+eax*4+1Ch]
	mov ecx, eax
	and ecx, 0FFFFh
	shl ecx, 8
	sar ecx, 1

loc_44D103:
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	mov edi, ebx
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	shl edi, 4
	mov edx, [edx+eax+0Fh]
	add edi, ebx
	sar edx, 18h
	mov eax, ecx
	shl edx, 9
	shl edi, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_4D5C84[edi], eax
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edx, [edx+eax*4+10h]
	sar edx, 18h
	mov eax, ecx
	shl edx, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_4D5C88[edi], eax
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edx, [edx+eax*4+11h]
	sar edx, 18h
	mov eax, ecx
	shl edx, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add dword dword_4D5C8C[edi], eax

loc_44D199:
	mov eax, ebx
	shl eax, 4
	lea edx, [ebx+eax]
	shl edx, 4
	mov eax, dword dword_4D5C74[edx]
	mov esi, dword dword_4D5C84[edx]
	mov eax, [eax+9Ch]
	sub eax, esi
	test eax, eax
	jle loc_44D3DD
	mov ecx, eax

loc_44D1C2:
	mov eax, ebx
	shl eax, 4
	lea edx, [ebx+eax]
	shl edx, 4
	mov eax, dword dword_4D5C74[edx]
	mov edi, dword dword_4D5C8C[edx]
	mov eax, [eax+0A4h]
	sub eax, edi
	test eax, eax
	jle loc_44D3E6
	mov edx, eax

loc_44D1EB:
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	shl eax, 4
	cmp ecx, edx
	jle loc_44D3FD
	mov edx, dword dword_4D5C74[eax]
	mov edi, dword dword_4D5C8C[eax]
	mov edx, [edx+0A4h]
	sub edx, edi
	test edx, edx
	jle loc_44D3EF

loc_44D219:
	mov eax, ebx
	shl eax, 4
	mov ecx, edx
	lea edx, [ebx+eax]
	shl edx, 4
	mov eax, dword dword_4D5C74[edx]
	mov ebp, dword dword_4D5C84[edx]
	mov eax, [eax+9Ch]
	sub eax, ebp
	sar ecx, 2
	test eax, eax
	jle loc_44D3F6

loc_44D245:
	lea edx, [eax+ecx]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	cmp eax, 38000h
	jge loc_44D448

loc_44D260:
	mov edx, 50000h
	sub edx, eax
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	shl eax, 4
	xor ebx, ebx
	mov dword dword_4D5CC0[eax], ebx
	mov edi, 1
	mov dword dword_4D5D74[eax], ebx
	mov dword dword_4D5D78[eax], edi
	mov dword dword_4D5D68[eax], ebx
	mov ecx, dword dword_4D5C88[eax]
	mov dword dword_4D5D64[eax], edi
	add ecx, edx
	mov dword dword_4D5C88[eax], ecx

loc_44D2A4:
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D2AE:
	cmp eax, 4
	jle loc_44D2C3
	cmp ebp, 50000h
	jge loc_44D2C3
	test ebp, ebp
	jg loc_44CF29

loc_44D2C3:
	cmp eax, 0FFFFFFFAh
	jge loc_44D2D2

loc_44D2C8:
	mov edi, 2
	jmp loc_44CF2E

loc_44D2D2:
	cmp eax, 0FFFFFFFCh
	jge loc_44D2E7
	mov ebp, [esp+54h]
	cmp ebp, 0FFFB0000h
	jle loc_44D2E7
	test ebp, ebp
	jl loc_44D2C8

loc_44D2E7:
	test edi, edi
	jnz loc_44CF2E
	jmp loc_44CF98

loc_44D2F4:
	cmp ecx, 0F0000h
	jge loc_44D317
	mov eax, [esi+14h]
	mov ebp, dword [dword_5118A0]
	add eax, 5
	cmp eax, ebp
	jl loc_44CF79
	sub eax, ebp
	jmp loc_44CF79

loc_44D317:
	mov eax, [esi+14h]
	mov edx, dword [dword_5118A0]
	add eax, 7
	cmp eax, edx
	jl loc_44CF79
	sub eax, edx
	jmp loc_44CF79

loc_44D332:
	cmp ecx, 0FFF80000h
	jle loc_44D353
	mov eax, [esi+14h]
	sub eax, 3
	test eax, eax
	jge loc_44CF79
	add eax, dword [dword_5118A0]
	jmp loc_44CF79

loc_44D353:
	mov eax, [esi+14h]
	sub eax, 5
	test eax, eax
	jge loc_44CF79
	add eax, dword [dword_5118A0]
	jmp loc_44CF79

loc_44D36C:
	mov eax, ebx
	call sub_470050
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D37D:
	mov ebp, eax
	jmp loc_44CFCD

loc_44D384:
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ax, [edx+eax*4+18h]
	and eax, 0FFFFh
	call sub_44DEF0
	test eax, eax
	jnz loc_44D0C2
	jmp loc_44D199

loc_44D3B2:
	mov edx, [esi+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ax, [edx+eax*4+1Ah]
	mov ecx, eax
	and ecx, 0FFFFh
	shl ecx, 8
	sar ecx, 1
	neg ecx
	jmp loc_44D103

loc_44D3DD:
	mov ecx, eax
	neg ecx
	jmp loc_44D1C2

loc_44D3E6:
	mov edx, eax
	neg edx
	jmp loc_44D1EB

loc_44D3EF:
	neg edx
	jmp loc_44D219

loc_44D3F6:
	neg eax
	jmp loc_44D245

loc_44D3FD:
	mov edx, dword dword_4D5C74[eax]
	mov edx, [edx+9Ch]
	mov ebp, dword dword_4D5C84[eax]
	mov eax, edx
	sub eax, ebp
	test eax, eax
	jle loc_44D444

loc_44D417:
	mov ecx, eax
	mov eax, ebx
	shl eax, 4
	lea edx, [ebx+eax]
	shl edx, 4
	mov eax, dword dword_4D5C74[edx]
	mov esi, dword dword_4D5C8C[edx]
	mov eax, [eax+0A4h]
	sub eax, esi
	sar ecx, 2
	test eax, eax
	jle loc_44D3F6
	jmp loc_44D245

loc_44D444:
	neg eax
	jmp loc_44D417

loc_44D448:
	mov eax, 38000h
	jmp loc_44D260
;sub_44CE50 endp

sub_44D460: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebp, dword [dword_5118A0]
	mov ebx, eax
	mov ecx, 8
	mov edi, esp
	shl eax, 4
	mov esi, dword_44B134
	add eax, ebx
	rep movsd
	shl eax, 4
	xor edx, edx
	mov esi, dword dword_4D5C74[eax]
	mov edi, [esp+4]
	and ebx, 1
	mov ecx, [esi+39Ch]
	xor eax, eax
	cmp ecx, edi
	jle loc_44D4B0

loc_44D4A2:
	inc edx
	mov edi, [esp+eax+8]
	add eax, 4
	cmp ecx, edi
	jg loc_44D4A2

loc_44D4B0:
	mov dword dword_4D5EA4[ebx*4], edx
	sub ecx, [esp+edx*4]
	test ecx, ecx
	jl loc_44D4F2
	cmp ecx, 30000h
	jge loc_44D500
	mov eax, [esi+14h]
	add eax, 3
	cmp eax, ebp
	jl loc_44D4D2

loc_44D4D0:
	sub eax, ebp

loc_44D4D2:
	mov dword dword_4D5E9C[ebx*4], eax
	xor ecx, ecx
	mov dword dword_4D5E94[ebx*4], ecx
	mov dword [dword_5118A0], ebp
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D4F2:
	mov eax, [esi+14h]
	sub eax, 3
	test eax, eax
	jge loc_44D4D2
	add eax, ebp
	jmp loc_44D4D2

loc_44D500:
	cmp ecx, 140000h
	jge loc_44D514
	mov eax, [esi+14h]
	add eax, 5
	cmp eax, ebp
	jge loc_44D4D0
	jmp loc_44D4D2

loc_44D514:
	mov eax, [esi+14h]
	add eax, 7
	cmp eax, ebp
	jge loc_44D4D0
	jmp loc_44D4D2
;sub_44D460 endp

sub_44D520: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 0Ch
	mov edx, eax
	shl eax, 4
	mov edi, esp
	add eax, edx
	mov esi, dword_44B128
	shl eax, 4
	movsd
	movsd
	movsd
	mov edx, dword dword_4D5C74[eax]
	mov ecx, [esp]
	mov edx, [edx+9Ch]
	add edx, ecx
	mov dword dword_4D5C84[eax], edx
	mov edx, dword dword_4D5C74[eax]
	mov ebx, [esp+4]
	mov edx, [edx+0A0h]
	add edx, ebx
	mov dword dword_4D5C88[eax], edx
	mov edx, dword dword_4D5C74[eax]
	xor edi, edi
	mov edx, [edx+0A4h]
	mov dword dword_4D5CC0[eax], edi
	mov dword dword_4D5D74[eax], edi
	mov esi, [esp+8]
	mov dword dword_4D5D68[eax], edi
	add edx, esi
	mov dword dword_4D5D64[eax], edi
	mov dword dword_4D5C8C[eax], edx
	mov dword dword_4D5D78[eax], 1
	add esp, 0Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44D520 endp

sub_44D5B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	lea edi, [esp+0Ch]
	shl ecx, 4
	mov esi, dword_44B11C
	mov edx, dword dword_4D5C74[ecx]
	movsd
	movsd
	movsd
	cmp dword [edx+100h], 0E666h
	jge loc_44D672
	cmp dword dword_4D5D7C[ecx], 0
	jnz loc_44D65E
	cmp dword [edx+288h], 0
	jle loc_44D72F
	mov edx, 1

loc_44D600:
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov dword dword_4D5D6C[ecx], edx
	mov ebx, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C84[ecx]
	mov ebp, [ebx+9Ch]
	sub edx, ebp
	mov dword dword_4D5C90[ecx], edx
	mov ebx, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C88[ecx]
	mov esi, [ebx+0A0h]
	sub edx, esi
	mov dword dword_4D5C94[ecx], edx
	mov ebx, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C8C[ecx]
	mov edi, [ebx+0A4h]
	sub edx, edi
	mov dword dword_4D5C98[ecx], edx

loc_44D65E:
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov dword dword_4D5D7C[ecx], 64h

loc_44D672:
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov edx, dword dword_4D5D7C[ecx]
	test edx, edx
	jg loc_44D736
	cmp dword dword_5128C8[eax*4], 0
	jz loc_44D698
	neg dword [esp+14h]

loc_44D698:
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov ebx, esp
	mov edx, dword dword_4D5C74[ecx]
	lea eax, [esp+0Ch]
	add edx, 0C4h
	call sub_480720
	mov eax, dword dword_4D5C74[ecx]
	mov esi, [esp]
	mov eax, [eax+9Ch]
	add eax, esi
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edi, [esp+4]
	mov eax, [eax+0A0h]
	add eax, edi
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebx, 1
	mov eax, [eax+0A4h]
	mov dword dword_4D5D78[ecx], ebx
	mov ebp, [esp+8]
	mov dword dword_4D5D68[ecx], ebx
	add eax, ebp
	mov dword dword_4D5D64[ecx], ebx
	mov dword dword_4D5C8C[ecx], eax
	xor eax, eax
	mov dword dword_4D5CC0[ecx], eax
	mov dword dword_4D5D74[ecx], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D72F:
	xor edx, edx
	jmp loc_44D600

loc_44D736:
	lea ebp, [edx-1]
	mov dword dword_4D5D7C[ecx], ebp
	call sub_44EC50
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44D5B0 endp

sub_44D750: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ebp, eax
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	mov esi, dword_4D5C74
	shl ecx, 4
	add esi, ecx
	mov edx, dword dword_4D5D54[ecx]
	add esi, 10h
	cmp edx, 0FFFFFFFFh
	jnz loc_44D906
	mov eax, dword [dword_512208]
	cmp eax, 1
	jnz loc_44D864
	test ebp, ebp
	jnz loc_44D84E

loc_44D794:
	mov ecx, eax
	shl ecx, 4
	add eax, ecx
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl eax, 4
	shl ecx, 4
	mov eax, dword dword_4D5C74[eax]
	mov dword dword_4D5C74[ecx], eax
	test ebp, ebp
	jnz loc_44D855
	mov eax, 1

loc_44D7C1:
	mov edx, eax
	mov ecx, ebp
	shl edx, 4
	shl ecx, 4
	add edx, eax
	add ecx, ebp
	shl edx, 4
	shl ecx, 4
	mov eax, dword dword_4D5C78[edx]
	mov dword dword_4D5C78[ecx], eax
	test ebp, ebp
	jnz loc_44D85C
	mov eax, 1

loc_44D7EA:
	mov ecx, ebp
	mov esi, eax
	shl ecx, 4
	shl esi, 4
	add ecx, ebp
	add esi, eax
	shl ecx, 4
	shl esi, 4
	lea edi, dword dword_4D5C84[ecx]
	lea esi, dword dword_4D5C84[esi]
	movsd
	movsd
	movsd
	test ebp, ebp
	jnz loc_44D860
	mov eax, 1

loc_44D816:
	mov ecx, 9
	mov esi, ebp
	mov edx, eax
	shl esi, 4
	shl edx, 4
	add esi, ebp
	add edx, eax
	shl esi, 4
	shl edx, 4
	lea edi, dword dword_4D5C9C[esi]
	lea esi, dword dword_4D5C9C[edx]
	mov eax, ebp
	rep movsd
	call sub_44B2E0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D84E:
	xor eax, eax
	jmp loc_44D794

loc_44D855:
	xor eax, eax
	jmp loc_44D7C1

loc_44D85C:
	xor eax, eax
	jmp loc_44D7EA

loc_44D860:
	xor eax, eax
	jmp loc_44D816

loc_44D864:
	mov eax, esp
	mov ebx, 1
	mov edx, 2
	push eax
	mov eax, dword dword_4D5D50[ecx]
	lea ecx, [esp+28h]
	call sub_440970

loc_44D880:
	mov eax, ebp
	shl ebp, 4
	add ebp, eax
	shl ebp, 4
	mov ecx, dword dword_4D5C74[ebp]
	mov edx, [esp+24h]
	mov ecx, [ecx+9Ch]
	add ecx, edx
	mov [esi], ecx
	mov ecx, dword dword_4D5C74[ebp]
	mov ebx, [esp+28h]
	mov ecx, [ecx+0A0h]
	add ecx, ebx
	mov [esi+4], ecx
	mov ecx, dword dword_4D5C74[ebp]
	mov edi, [esp+2Ch]
	mov ecx, [ecx+0A4h]
	add ecx, edi
	mov [esi+8], ecx
	mov ecx, 9
	mov esi, esp
	lea edi, dword dword_4D5C9C[ebp]
	xor eax, eax
	rep movsd
	mov dword dword_4D5CC0[ebp], eax
	mov dword dword_4D5D74[ebp], eax
	mov ebx, 1
	mov dword dword_4D5D78[ebp], eax
	mov dword dword_4D5D68[ebp], ebx
	mov dword dword_4D5D64[ebp], ebx
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44D906:
	mov ebx, esp
	mov eax, edx
	lea edx, [esp+24h]
	call sub_4408B0
	mov eax, dword dword_4D5D54[ecx]
	call sub_440890
	test eax, eax
	jnz loc_44D880
	mov eax, dword dword_4D5D54[ecx]
	mov ebx, 0FFFFFFFFh
	call sub_440BC0
	mov edi, dword [dword_512208]
	mov dword dword_4D5D54[ecx], ebx
	cmp edi, 1
	jnz loc_44D864
	test ebp, ebp
	jnz loc_44DA0F
	mov eax, edi

loc_44D955:
	mov ecx, eax
	shl ecx, 4
	add eax, ecx
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl eax, 4
	shl ecx, 4
	mov eax, dword dword_4D5C74[eax]
	mov dword dword_4D5C74[ecx], eax
	test ebp, ebp
	jnz loc_44DA16
	mov ecx, 1

loc_44D982:
	mov eax, ecx
	shl ecx, 4
	add eax, ecx
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl eax, 4
	shl ecx, 4
	mov eax, dword dword_4D5C78[eax]
	mov dword dword_4D5C78[ecx], eax
	test ebp, ebp
	jnz loc_44DA1D
	mov eax, 1

loc_44D9AB:
	mov ecx, eax
	shl ecx, 4
	add eax, ecx
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl eax, 4
	shl ecx, 4
	lea esi, dword dword_4D5C84[eax]
	lea edi, dword dword_4D5C84[ecx]
	movsd
	movsd
	movsd
	test ebp, ebp
	jnz loc_44DA21
	mov eax, 1

loc_44D9D7:
	mov ecx, 9
	mov edi, ebp
	mov esi, eax
	shl edi, 4
	shl esi, 4
	add edi, ebp
	add esi, eax
	shl edi, 4
	shl esi, 4
	lea edi, dword dword_4D5C9C[edi]
	lea esi, dword dword_4D5C9C[esi]
	mov eax, ebp
	rep movsd
	call sub_44B2E0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44DA0F:
	xor eax, eax
	jmp loc_44D955

loc_44DA16:
	xor ecx, ecx
	jmp loc_44D982

loc_44DA1D:
	xor eax, eax
	jmp loc_44D9AB

loc_44DA21:
	xor eax, eax
	jmp loc_44D9D7
;sub_44D750 endp

sub_44DA30: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 84h
	mov ebp, eax
	mov esi, eax
	shl esi, 4
	add esi, eax
	shl esi, 4
	cmp dword dword_4D5D4C[esi], 0
	jz loc_44DB9E

loc_44DA54:
	mov esi, ebp
	shl esi, 4
	add esi, ebp
	shl esi, 4
	cmp dword dword_4D5D54[esi], 0FFFFFFFFh
	jnz loc_44DA78
	mov eax, dword dword_4D5D50[esi]
	call sub_440C30
	mov dword dword_4D5D54[esi], eax

loc_44DA78:
	mov esi, ebp
	shl esi, 4
	add esi, ebp
	lea ebx, [esp+24h]
	shl esi, 4
	lea edx, [esp+6Ch]
	mov eax, dword dword_4D5D54[esi]
	call sub_4408B0
	mov eax, dword dword_4D5D54[esi]
	call sub_440890
	test eax, eax
	jz loc_44DBE1
	push ecx
	mov edi, dword dword_4D5D50[esi]
	cmp edi, 5
	jnz loc_44DC15

loc_44DAB8:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov ecx, 9
	mov esi, dword dword_4D5C74[eax]
	lea edi, [esp+4]
	lea ebx, [esp+4Ch]
	lea esi, [esi+118h]
	lea edx, [esp+4]
	lea eax, [esp+28h]
	rep movsd
	call sub_49E840
	lea ebx, [esp+7Ch]
	lea edx, [esp+4]
	lea eax, [esp+70h]
	call sub_49EAC8

loc_44DAFB:
	mov eax, ebp
	shl ebp, 4
	add ebp, eax
	shl ebp, 4
	mov eax, dword dword_4D5C74[ebp]
	mov edx, [esp+7Ch]
	mov eax, [eax+9Ch]
	add eax, edx
	mov dword dword_4D5C84[ebp], eax
	mov eax, dword dword_4D5C74[ebp]
	mov ecx, [esp+80h]
	mov eax, [eax+0A0h]
	add eax, ecx
	mov dword dword_4D5C88[ebp], eax
	mov eax, dword dword_4D5C74[ebp]
	mov ebx, [esp+84h]
	mov eax, [eax+0A4h]
	lea esi, [esp+7Ch]
	add eax, ebx
	lea edi, dword dword_4D5C90[ebp]
	mov dword dword_4D5C8C[ebp], eax
	movsd
	movsd
	movsd
	mov ecx, 9
	lea esi, [esp+4Ch]
	lea edi, dword dword_4D5C9C[ebp]
	rep movsd
	xor esi, esi
	mov dword dword_4D5CC0[ebp], esi
	mov dword dword_4D5D74[ebp], esi
	mov dword dword_4D5D78[ebp], esi
	mov dword dword_4D5D68[ebp], esi
	mov dword dword_4D5D64[ebp], esi
	pop ecx
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_44DB9E:
	mov eax, dword dword_4D5D50[esi]
	call sub_440C30
	mov dword dword_4D5D54[esi], eax
	cmp eax, 0FFFFFFFFh
	jnz loc_44DBD2
	mov edi, dword [dword_511FF0]
	mov edx, edi
	mov eax, ebp
	call sub_44B5B0
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_44DBD2:
	mov dword dword_4D5D4C[esi], 1
	jmp loc_44DA54

loc_44DBE1:
	mov eax, dword dword_4D5D54[esi]
	mov ebx, 0FFFFFFFFh
	call sub_440BC0
	mov dword dword_4D5D54[esi], ebx
	mov esi, dword [dword_511FF0]
	mov edx, esi
	mov eax, ebp
	call sub_44B5B0
	add esp, 84h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_44DC15:
	cmp edi, 4
	jz loc_44DAB8
	mov ecx, 9
	lea edi, [esp+4Ch]
	lea esi, [esp+28h]
	rep movsd
	lea edi, [esp+7Ch]
	lea esi, [esp+70h]
	movsd
	movsd
	movsd
	jmp loc_44DAFB
;sub_44DA30 endp

sub_44DC40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 24h
	mov ebp, eax
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov edx, dword dword_4D5CD4[eax]
	mov ecx, dword dword_4D5C74[eax]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ebx, 1
	add ecx, 8
	mov ax, [edx+eax*4+18h]
	and eax, 0FFFFh
	call sub_44DEF0
	test eax, eax
	jz loc_44DE8B

loc_44DC8C:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov eax, dword dword_4D5C74[eax]
	cmp dword [eax+0C0h], 0
	jl loc_44DEB9
	mov ebx, 1

loc_44DCAE:
	mov edx, esp
	mov eax, ecx
	call sub_449B10
	mov edx, eax
	mov [esp+1Ch], eax
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	cmp edx, dword dword_4D5D48[eax]
	jz loc_44DCEF
	lea eax, 0[ebp*4]
	add eax, ebp
	cmp dword dword_5227C0[eax*4], 0
	jz loc_44DCEF
	cmp dword [dword_540D94], 2
	jz loc_44DEC0

loc_44DCEF:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov edi, [esp+1Ch]
	cmp edi, dword dword_4D5D48[eax]
	jz loc_44DD1A
	mov edx, dword dword_4D5CC4[eax]
	neg edx
	mov dword dword_4D5CC4[eax], edx
	xor byte dword_4D5D80[eax], 1

loc_44DD1A:
	push esi
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl ecx, 4
	lea esi, [esp+4]
	lea edi, dword dword_4D5C84[ecx]
	movsd
	movsd
	movsd
	mov eax, dword dword_4D5C78[ecx]
	lea edx, [esp+4]
	add eax, 9Ch
	call sub_45EEB0
	test eax, eax
	jle loc_44DED0
	mov eax, dword dword_4D5C78[ecx]
	lea edx, [esp+4]
	add eax, 9Ch
	call sub_45EEB0

loc_44DD62:
	mov esi, eax
	cmp dword [dword_4EC648], 1
	jnz loc_44DD72
	call sub_42A2A0

loc_44DD72:
	lea eax, [esp+1Ch]
	lea ecx, [esp+18h]
	lea ebx, [esp+14h]
	push eax
	lea edx, [esp+14h]
	mov eax, ebp
	call sub_42A270
	push 0
	push 0
	push 0
	mov ecx, [esp+28h]
	mov ebx, [esp+24h]
	push 5Ah
	mov edx, [esp+24h]
	mov eax, [esp+20h]
	call sub_4808D0
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	cmp dword dword_4D5D80[eax], 0
	jz loc_44DE48
	cmp esi, 60000h
	jle loc_44DE48
	mov edx, dword [dword_4DAC0C]
	imul edx, esi
	mov ecx, 60000h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, dword [dword_4DAC10]
	imul edx, esi
	mov dword [dword_4DAC24], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, 1592Ch
	mov [esp+24h], esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	fild dword [esp+24h]
	fmul dword [flt_4CC48C]
	fld dword [flt_4D52A4]
	fmul st0, st1
	fld dword [flt_4D52A8]
	fchs
	fmulp st2, st0
	mov ecx, eax
	mov dword [dword_4DAC28], eax
	neg ecx
	fxch st1
	fmul qword [dbl_4CC494]
	mov dword [dword_4DAC28], ecx
	fxch st1
	fstp dword [dword_4D5294]
	fstp dword [flt_4D5298]

loc_44DE48:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	xor ebx, ebx
	mov dword dword_4D5CC0[eax], ebx
	mov edi, 1
	mov dword dword_4D5D74[eax], ebx
	mov dword dword_4D5D78[eax], edi
	mov dword dword_4D5D68[eax], ebx
	mov edx, [esp+20h]
	mov dword dword_4D5D64[eax], edi
	mov dword dword_4D5D48[eax], edx
	pop esi
	add esp, 24h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44DE8B:
	mov edx, [ecx+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ax, [edx+eax*4+18h]
	and eax, 0FFFFh
	call sub_44DEF0
	test eax, eax
	jnz loc_44DC8C
	jmp loc_44DCAE

loc_44DEB9:
	xor ebx, ebx
	jmp loc_44DCAE

loc_44DEC0:
	mov eax, ebp
	call sub_470050
	add esp, 24h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44DED0:
	mov eax, dword dword_4D5C78[ecx]
	lea edx, [esp+4]
	add eax, 9Ch
	call sub_45EEB0
	neg eax
	jmp loc_44DD62
;sub_44DC40 endp

sub_44DEF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	dec eax
	mov ebx, edx
	and eax, edx
	sub ebx, eax
	test dx, dx
	jz loc_44DF24

loc_44DF01:
	xor ecx, ecx
	mov cx, dx
	xor edx, edx
	mov dx, ax
	sub ecx, edx
	xor edx, edx
	mov dx, bx
	cmp ecx, edx
	jnz loc_44DF2C
	mov ecx, eax
	mov edx, eax
	dec ecx
	add ebx, ebx
	and eax, ecx
	test dx, dx
	jnz loc_44DF01

loc_44DF24:
	xor ecx, ecx
	mov eax, ecx
	pop edx
	pop ecx
	pop ebx
	ret

loc_44DF2C:
	mov ecx, 1
	mov eax, ecx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44DEF0 endp

sub_44DF40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebx, eax
	mov ecx, eax
	shl ecx, 4
	add ecx, eax
	shl ecx, 4
	mov esi, dword dword_4D5C74[ecx]
	mov edx, [esi+2E8h]
	shl edx, 8
	mov edi, 30h
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	sub eax, 100h
	mov edx, 32h
	mov dword dword_4D5D60[ecx], eax
	mov dword dword_4D5D70[ecx], edx
	test byte [esi+14h], 1
	jz loc_44E091
	mov esi, 1

loc_44DF95:
	mov ecx, ebx
	shl ecx, 4
	add ecx, ebx
	lea edx, [esp+18h]
	shl ecx, 4
	lea ebx, [esp+1Ch]
	mov eax, dword dword_4D5D60[ecx]
	call sub_49EA20
	mov edx, [esp+1Ch]
	imul edx, esi
	mov eax, 60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	mov [esp], eax
	mov eax, 60000h
	mov ebx, 20000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	mov [esp+4], ebx
	mov edx, dword dword_4D5C74[ecx]
	lea ebx, [esp+0Ch]
	mov eax, esp
	add edx, 0C4h
	call sub_480720
	mov eax, dword dword_4D5C74[ecx]
	mov esi, [esp+0Ch]
	mov eax, [eax+9Ch]
	add eax, esi
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edi, [esp+10h]
	mov eax, [eax+0A0h]
	add eax, edi
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebp, [esp+14h]
	mov eax, [eax+0A4h]
	lea esi, [esp+0Ch]
	add eax, ebp
	lea edi, dword dword_4D5C90[ecx]
	mov dword dword_4D5C8C[ecx], eax
	mov eax, 2Ah
	movsd
	movsd
	movsd
	xor edx, edx
	mov dword dword_4D5CC0[ecx], eax
	mov dword dword_4D5D74[ecx], edx
	mov esi, 1
	mov dword dword_4D5CC4[ecx], edx
	mov dword dword_4D5D78[ecx], esi
	mov dword dword_4D5D68[ecx], esi
	mov dword dword_4D5D64[ecx], esi
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44E091:
	mov esi, 0FFFFFFFFh
	jmp loc_44DF95
;sub_44DF40 endp

sub_44E0A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	cmp dword [dword_4D5EAC], 0
	jz loc_44E0BB
	cmp dword [dword_4D5EB0], 0
	jz loc_44E0EF

loc_44E0BB:
	mov esi, eax
	shl esi, 4
	add esi, eax
	xor ebx, ebx
	shl esi, 4
	mov edi, dword [dword_4D5EAC]
	mov dword dword_4D5D5C[esi], ebx
	test edi, edi
	jnz loc_44E213
	cmp dword [dword_4D5EB0], 0FFFFFFFFh
	jnz loc_44E207
	sub dword dword_4D5D60[esi], 6

loc_44E0EF:
	mov esi, eax
	shl esi, 4
	add esi, eax
	lea ebx, [esp+1Ch]
	shl esi, 4
	lea edx, [esp+18h]
	mov eax, dword dword_4D5D60[esi]
	call sub_49EA20
	mov edx, [esp+1Ch]
	mov eax, 60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	mov [esp], eax
	mov eax, 60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword dword_4D5D60[esi]
	mov ebx, 3
	add edx, edx
	mov [esp+8], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	lea ebx, [esp+0Ch]
	add eax, 20000h
	mov edx, dword dword_4D5C74[esi]
	mov [esp+4], eax
	add edx, 0C4h
	mov eax, esp
	call sub_480720
	mov eax, dword dword_4D5C74[esi]
	mov edi, [esp+0Ch]
	mov eax, [eax+9Ch]
	add eax, edi
	mov dword dword_4D5C84[esi], eax
	mov eax, dword dword_4D5C74[esi]
	mov ebp, [esp+10h]
	mov eax, [eax+0A0h]
	add eax, ebp
	mov dword dword_4D5C88[esi], eax
	mov eax, dword dword_4D5C74[esi]
	xor ecx, ecx
	mov eax, [eax+0A4h]
	mov dword dword_4D5CC0[esi], ecx
	mov dword dword_4D5D74[esi], ecx
	mov ebp, 1
	mov dword dword_4D5CC4[esi], ecx
	mov dword dword_4D5D78[esi], ebp
	mov edx, [esp+14h]
	mov dword dword_4D5D68[esi], ebp
	add eax, edx
	mov dword dword_4D5D64[esi], ebp
	mov dword dword_4D5C8C[esi], eax
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44E207:
	add dword dword_4D5D60[esi], 6
	jmp loc_44E0EF

loc_44E213:
	mov edx, dword [dword_4D5EB0]
	add dword dword_4D5D60[esi], edx
	jmp loc_44E0EF
;sub_44E0A0 endp

sub_44E230: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	mov ecx, dword dword_4D5C74[edx]
	cmp dword [dword_540F2C], 0
	jz loc_44E25F
	cmp dword [dword_5227A8], 0
	jz loc_44E462

loc_44E25F:
	cmp dword [dword_4D965C], 0
	jnz loc_44E462
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	mov ebx, dword dword_4D5C74[edx]
	cmp dword [ebx+100h], 0E666h
	jge loc_44E319
	cmp dword dword_4D5D7C[edx], 0
	jnz loc_44E305
	cmp dword [ecx+288h], 0
	jle loc_44E46C
	mov ebx, 1

loc_44E2A7:
	mov esi, eax
	shl esi, 4
	add esi, eax
	shl esi, 4
	mov dword dword_4D5D6C[esi], ebx
	mov ebx, dword dword_4D5C74[esi]
	mov edx, dword dword_4D5C84[esi]
	mov ecx, [ebx+9Ch]
	sub edx, ecx
	mov dword dword_4D5C90[esi], edx
	mov ebx, dword dword_4D5C74[esi]
	mov edx, dword dword_4D5C88[esi]
	mov edi, [ebx+0A0h]
	sub edx, edi
	mov dword dword_4D5C94[esi], edx
	mov ecx, dword dword_4D5C74[esi]
	mov edx, dword dword_4D5C8C[esi]
	mov ebp, [ecx+0A4h]
	sub edx, ebp
	mov dword dword_4D5C98[esi], edx

loc_44E305:
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	mov dword dword_4D5D7C[edx], 64h

loc_44E319:
	mov edx, eax
	shl edx, 4
	add edx, eax
	shl edx, 4
	mov ebx, dword dword_4D5D7C[edx]
	test ebx, ebx
	jg loc_44E473
	mov ebx, dword dword_4D5D5C[edx]
	lea ecx, [ebx+1]
	mov dword dword_4D5D5C[edx], ecx
	cmp ebx, 1
	jle loc_44E35A
	mov edi, dword dword_4D5D60[edx]
	xor esi, esi
	inc edi
	mov dword dword_4D5D5C[edx], esi
	mov dword dword_4D5D60[edx], edi

loc_44E35A:
	mov esi, eax
	shl esi, 4
	add esi, eax
	lea ebx, [esp+1Ch]
	shl esi, 4
	lea edx, [esp+18h]
	mov eax, dword dword_4D5D60[esi]
	call sub_49EA20
	mov edx, [esp+1Ch]
	mov eax, 60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	mov [esp+0Ch], eax
	mov eax, 60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword dword_4D5D60[esi]
	mov ebx, 3
	add edx, edx
	mov [esp+14h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ebx, esp
	add eax, 20000h
	mov edx, dword dword_4D5C74[esi]
	mov [esp+10h], eax
	add edx, 0C4h
	lea eax, [esp+0Ch]
	call sub_480720
	mov eax, dword dword_4D5C74[esi]
	mov ebp, [esp]
	mov eax, [eax+9Ch]
	add eax, ebp
	mov dword dword_4D5C84[esi], eax
	mov eax, dword dword_4D5C74[esi]
	mov edx, [esp+4]
	mov eax, [eax+0A0h]
	add eax, edx
	mov dword dword_4D5C88[esi], eax
	mov eax, dword dword_4D5C74[esi]
	xor ebx, ebx
	mov eax, [eax+0A4h]
	mov dword dword_4D5CC0[esi], ebx
	mov ebp, 1
	mov dword dword_4D5D74[esi], ebx
	mov dword dword_4D5D78[esi], ebp
	mov ecx, [esp+8]
	mov dword dword_4D5D68[esi], ebp
	add eax, ecx
	mov dword dword_4D5D64[esi], ebp
	mov dword dword_4D5C8C[esi], eax

loc_44E462:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44E46C:
	xor ebx, ebx
	jmp loc_44E2A7

loc_44E473:
	lea ecx, [ebx-1]
	mov dword dword_4D5D7C[edx], ecx
	call sub_44EC50
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44E230 endp

sub_44E490: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov ebp, eax
	mov edx, 3333h
	lea edi, [esp+0Ch]
	mov esi, dword_44B110
	shl eax, 4
	mov ebx, dword [dword_540F2C]
	add eax, ebp
	mov [esp+24h], edx
	shl eax, 4
	movsd
	movsd
	movsd
	mov ecx, dword dword_4D5C74[eax]
	test ebx, ebx
	jz loc_44E4D5
	cmp dword [dword_5227A8], 0
	jz loc_44E72D

loc_44E4D5:
	mov edi, dword [dword_4D965C]
	test edi, edi
	jnz loc_44E72D
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5CC0[eax], 2Ah
	mov esi, 1
	mov dword dword_4D5D74[eax], edi
	mov dword dword_4D5D78[eax], esi
	mov dword dword_4D5D68[eax], esi
	mov edx, dword dword_4D5C74[eax]
	mov dword dword_4D5D64[eax], esi
	cmp dword [edx+100h], 0E666h
	jge loc_44E565
	cmp dword dword_4D5D7C[eax], 0
	jnz loc_44E551
	cmp dword [ecx+288h], 0
	jle loc_44E737
	mov edx, 1

loc_44E541:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5D6C[eax], edx

loc_44E551:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5D7C[eax], 64h

loc_44E565:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov ebx, dword dword_4D5D7C[eax]
	test ebx, ebx
	jg loc_44E73E
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jl loc_44E5AE
	mov eax, [ecx+10Ch]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add [esp+10h], eax
	mov eax, [ecx+110h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub [esp+14h], eax

loc_44E5AE:
	mov ebx, [ecx+2B0h]
	test ebx, ebx
	jle loc_44E758
	mov eax, ebx

loc_44E5BE:
	mov esi, [ecx+2B8h]
	test esi, esi
	jle loc_44E761
	mov edx, esi

loc_44E5CE:
	cmp eax, edx
	jle loc_44E77C
	mov ebx, [ecx+2B8h]
	test ebx, ebx
	jle loc_44E76A
	mov eax, ebx

loc_44E5E6:
	mov esi, [ecx+2B0h]
	sar eax, 2
	test esi, esi
	jle loc_44E773
	mov edx, esi

loc_44E5F9:
	add edx, eax
	mov ecx, 14h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 60000h
	jle loc_44E613
	mov eax, 60000h

loc_44E613:
	mov edi, [esp+14h]
	mov ecx, ebp
	sub edi, eax
	shl ecx, 4
	mov [esp+14h], edi
	add ecx, ebp
	mov eax, dword dword_5128C8[ebp*4]
	shl ecx, 4
	test eax, eax
	jnz loc_44E7A0
	lea ebx, [esp+18h]
	mov edx, dword dword_4D5C74[ecx]
	lea eax, [esp+0Ch]
	add edx, 0C4h
	mov edi, esp
	call sub_480720
	lea esi, dword dword_4D5C90[ecx]
	mov edx, dword dword_4D5D70[ecx]
	movsd
	movsd
	movsd
	test edx, edx
	jle loc_44E676
	mov ebx, 1999h
	lea esi, [edx-1]
	mov [esp+24h], ebx
	mov dword dword_4D5D70[ecx], esi

loc_44E676:
	mov eax, [esp+18h]
	mov edi, [esp]
	mov edx, [esp+24h]
	mov ecx, ebp
	sub eax, edi
	shl ecx, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, ebp
	add eax, edi
	shl ecx, 4
	mov ebx, [esp+4]
	mov dword dword_4D5C90[ecx], eax
	mov eax, [esp+1Ch]
	mov edx, [esp+24h]
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	mov edi, [esp+8]
	mov dword dword_4D5C94[ecx], eax
	mov eax, [esp+20h]
	mov edx, [esp+24h]
	sub eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	mov dword dword_4D5C98[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C90[ecx]
	mov eax, [eax+9Ch]
	add eax, edx
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebx, dword dword_4D5C94[ecx]
	mov eax, [eax+0A0h]
	add eax, ebx
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov esi, dword dword_4D5C98[ecx]
	mov eax, [eax+0A4h]
	add eax, esi
	mov dword dword_4D5C8C[ecx], eax

loc_44E72D:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44E737:
	xor edx, edx
	jmp loc_44E541

loc_44E73E:
	lea esi, [ebx-1]
	mov dword dword_4D5D7C[eax], esi
	mov eax, ebp
	call sub_44EC50
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44E758:
	mov eax, ebx
	neg eax
	jmp loc_44E5BE

loc_44E761:
	mov edx, esi
	neg edx
	jmp loc_44E5CE

loc_44E76A:
	mov eax, ebx
	neg eax
	jmp loc_44E5E6

loc_44E773:
	mov edx, esi

loc_44E775:
	neg edx
	jmp loc_44E5F9

loc_44E77C:
	mov edi, [ecx+2B0h]
	test edi, edi
	jle loc_44E79A
	mov eax, edi

loc_44E788:
	mov edx, [ecx+2B8h]
	sar eax, 2
	test edx, edx
	jle loc_44E775
	jmp loc_44E5F9

loc_44E79A:
	mov eax, edi
	neg eax
	jmp loc_44E788

loc_44E7A0:
	lea ebx, [esp+18h]
	lea eax, [esp+0Ch]
	mov edx, dword dword_4D5C74[ecx]
	neg edi
	add edx, 0C4h
	mov [esp+14h], edi
	call sub_480720
	mov eax, dword dword_4D5C74[ecx]
	mov ebp, [esp+18h]
	mov eax, [eax+9Ch]
	add eax, ebp
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edx, [esp+1Ch]
	mov eax, [eax+0A0h]
	add eax, edx
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebx, [esp+20h]
	mov eax, [eax+0A4h]
	add eax, ebx
	mov dword dword_4D5C8C[ecx], eax
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44E490 endp

sub_44E820: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov ebp, eax
	mov edx, 1999h
	lea edi, [esp+0Ch]
	mov esi, dword_44B104
	shl eax, 4
	mov ebx, dword [dword_540F2C]
	add eax, ebp
	mov [esp+24h], edx
	shl eax, 4
	movsd
	movsd
	movsd
	mov ecx, dword dword_4D5C74[eax]
	test ebx, ebx
	jz loc_44E865
	cmp dword [dword_5227A8], 0
	jz loc_44EA78

loc_44E865:
	mov edi, dword [dword_4D965C]
	test edi, edi
	jnz loc_44EA78
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5CC0[eax], 2Ah
	mov esi, 1
	mov dword dword_4D5D74[eax], edi
	mov dword dword_4D5D78[eax], esi
	mov dword dword_4D5D68[eax], esi
	mov edx, dword dword_4D5C74[eax]
	mov dword dword_4D5D64[eax], esi
	cmp dword [edx+100h], 0E666h
	jge loc_44E8F5
	cmp dword dword_4D5D7C[eax], 0
	jnz loc_44E8E1
	cmp dword [ecx+288h], 0
	jle loc_44EA82
	mov edx, 1

loc_44E8D1:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5D6C[eax], edx

loc_44E8E1:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov dword dword_4D5D7C[eax], 64h

loc_44E8F5:
	mov eax, ebp
	shl eax, 4
	add eax, ebp
	shl eax, 4
	mov ebx, dword dword_4D5D7C[eax]
	test ebx, ebx
	jg loc_44EA89
	mov eax, [ecx+21Ch]
	mov esi, [eax]
	cmp esi, 9
	jle loc_44EAA3
	mov eax, 9

loc_44E923:
	mov edi, [esp+10h]
	mov eax, dword dword_4D5EB4[eax*4]
	add edi, eax
	mov [esp+10h], edi
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jl loc_44E968
	mov eax, [ecx+10Ch]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebx, [edi+eax]
	mov [esp+10h], ebx
	mov eax, [ecx+110h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub [esp+14h], eax

loc_44E968:
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	mov edi, dword dword_5128C8[ebp*4]
	shl ecx, 4
	test edi, edi
	jnz loc_44EAAA
	lea ebx, [esp+18h]
	mov edx, dword dword_4D5C74[ecx]
	lea eax, [esp+0Ch]
	add edx, 0C4h
	mov edi, esp
	call sub_480720
	lea esi, dword dword_4D5C90[ecx]
	mov eax, dword dword_4D5D70[ecx]
	movsd
	movsd
	movsd
	test eax, eax
	jle loc_44E9C1
	mov edx, 1999h
	lea ebx, [eax-1]
	mov [esp+24h], edx
	mov dword dword_4D5D70[ecx], ebx

loc_44E9C1:
	mov eax, [esp+18h]
	mov esi, [esp]
	mov edx, [esp+24h]
	mov ecx, ebp
	sub eax, esi
	shl ecx, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, ebp
	add eax, esi
	shl ecx, 4
	mov ebp, [esp+4]
	mov dword dword_4D5C90[ecx], eax
	mov eax, [esp+1Ch]
	mov edx, [esp+24h]
	sub eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebp
	mov ebx, [esp+8]
	mov dword dword_4D5C94[ecx], eax
	mov eax, [esp+20h]
	mov edx, [esp+24h]
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	mov dword dword_4D5C98[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edi, dword dword_4D5C90[ecx]
	mov eax, [eax+9Ch]
	add eax, edi
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebp, dword dword_4D5C94[ecx]
	mov eax, [eax+0A0h]
	add eax, ebp
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C98[ecx]
	mov eax, [eax+0A4h]
	add eax, edx
	mov dword dword_4D5C8C[ecx], eax

loc_44EA78:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44EA82:
	xor edx, edx
	jmp loc_44E8D1

loc_44EA89:
	lea edx, [ebx-1]
	mov dword dword_4D5D7C[eax], edx
	mov eax, ebp
	call sub_44EC50
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44EAA3:
	mov eax, esi
	jmp loc_44E923

loc_44EAAA:
	mov ebx, [esp+14h]
	lea eax, [esp+0Ch]
	mov edx, dword dword_4D5C74[ecx]
	neg ebx
	add edx, 0C4h
	mov [esp+14h], ebx
	lea ebx, [esp+18h]
	call sub_480720
	mov eax, dword dword_4D5C74[ecx]
	mov esi, [esp+18h]
	mov eax, [eax+9Ch]
	add eax, esi
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edi, [esp+1Ch]
	mov eax, [eax+0A0h]
	add eax, edi
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebp, [esp+20h]
	mov eax, [eax+0A4h]
	add eax, ebp
	mov dword dword_4D5C8C[ecx], eax
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44E820 endp

sub_44EB20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ebp, eax
	mov edi, esp
	mov esi, dword_44B0F8
	movsd
	movsd
	movsd
	mov esi, eax
	shl esi, 4
	add esi, eax
	shl esi, 4
	mov edx, dword dword_4D5C78[esi]
	mov eax, [esp+4]
	mov edx, [edx+100h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword dword_5128C8[ebp*4]
	mov [esp+4], eax
	test edx, edx
	jz loc_44EB6C
	neg dword [esp+8]

loc_44EB6C:
	mov esi, ebp
	shl esi, 4
	add esi, ebp
	shl esi, 4
	lea ebx, [esp+0Ch]
	mov edx, dword dword_4D5C74[esi]
	mov eax, esp
	add edx, 0C4h
	call sub_480720
	mov eax, dword dword_4D5C74[esi]
	mov ebx, [esp+0Ch]
	mov eax, [eax+9Ch]
	add eax, ebx
	mov dword dword_4D5C84[esi], eax
	mov eax, dword dword_4D5C74[esi]
	mov edi, [esp+10h]
	mov eax, [eax+0A0h]
	add eax, edi
	mov dword dword_4D5C88[esi], eax
	mov eax, dword dword_4D5C74[esi]
	mov edx, [esp+14h]
	mov eax, [eax+0A4h]
	add eax, edx
	mov ecx, dword dword_5128C8[ebp*4]
	mov dword dword_4D5C8C[esi], eax
	test ecx, ecx
	jnz loc_44EC3C
	mov eax, dword dword_4D5C74[esi]
	mov ecx, 9
	lea edi, dword dword_4D5C9C[esi]
	lea esi, [eax+0C4h]
	rep movsd

loc_44EBF9:
	mov esi, ebp
	shl esi, 4
	add esi, ebp
	mov ebx, 0FFFFFC72h
	shl esi, 4
	mov edi, 2
	mov dword dword_4D5CC0[esi], ebx
	xor ebp, ebp
	mov dword dword_4D5D74[esi], edi
	mov eax, 1
	mov dword dword_4D5D78[esi], ebp
	mov dword dword_4D5D68[esi], eax
	mov dword dword_4D5D64[esi], ebp
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44EC3C:
	mov edx, dword_4D5C74
	add edx, esi
	mov eax, ebp
	add edx, 28h
	call sub_44EE20
	jmp loc_44EBF9
;sub_44EB20 endp

sub_44EC50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov ebp, eax
	mov ecx, eax
	mov edi, esp
	shl ecx, 4
	mov esi, dword_44B0E0
	add ecx, eax
	mov edx, dword [dword_512228]
	shl ecx, 4
	movsd
	movsd
	movsd
	mov eax, dword dword_4D5C74[ecx]
	mov ecx, dword dword_4D5D6C[ecx]
	mov [esp+24h], eax
	xor ecx, edx
	jz loc_44EC8D
	neg dword [esp+8]

loc_44EC8D:
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl ecx, 4
	lea ebx, [esp+18h]
	mov edx, dword dword_4D5C74[ecx]
	mov eax, esp
	add edx, 118h
	lea edi, [esp+0Ch]
	call sub_480720
	lea esi, dword dword_4D5C90[ecx]
	movsd
	movsd
	movsd
	mov eax, [esp+18h]
	mov ebx, [esp+0Ch]
	mov edx, 51Eh
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	mov edi, [esp+10h]
	mov dword dword_4D5C90[ecx], eax
	mov eax, [esp+1Ch]
	mov edx, 51Eh
	sub eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	mov ebx, [esp+14h]
	mov dword dword_4D5C94[ecx], eax
	mov eax, [esp+20h]
	mov edx, 51Eh
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	mov dword dword_4D5C98[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edi, dword dword_4D5C90[ecx]
	mov eax, [eax+9Ch]
	add eax, edi
	mov dword dword_4D5C84[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov edx, dword dword_4D5C94[ecx]
	mov eax, [eax+0A0h]
	add eax, edx
	mov dword dword_4D5C88[ecx], eax
	mov eax, dword dword_4D5C74[ecx]
	mov ebx, dword dword_4D5C98[ecx]
	mov eax, [eax+0A4h]
	add eax, ebx
	mov esi, dword dword_4D5D6C[ecx]
	mov dword dword_4D5C8C[ecx], eax
	test esi, esi
	jz loc_44EDC2
	mov eax, [esp+24h]
	mov edi, [eax+288h]
	test edi, edi
	jnz loc_44EDC2
	mov eax, dword dword_4D5C74[ecx]
	mov eax, [eax+0DCh]
	shl eax, 3
	neg eax
	mov dword dword_4D5C90[ecx], eax
	mov dword dword_4D5C94[ecx], 10000h
	mov eax, dword dword_4D5C74[ecx]
	mov eax, [eax+0E4h]
	shl eax, 3
	mov dword dword_4D5D7C[ecx], edi
	neg eax
	mov dword dword_4D5C98[ecx], eax

loc_44EDC2:
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	shl ecx, 4
	cmp dword dword_4D5D7C[ecx], 0
	jz loc_44EE13

loc_44EDD5:
	mov ecx, ebp
	shl ecx, 4
	add ecx, ebp
	mov edi, 2Ah
	shl ecx, 4
	xor ebp, ebp
	mov dword dword_4D5CC0[ecx], edi
	mov eax, 1
	mov dword dword_4D5D74[ecx], ebp
	mov dword dword_4D5D78[ecx], eax
	mov dword dword_4D5D68[ecx], eax
	mov dword dword_4D5D64[ecx], eax
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44EE13:
	mov dword dword_4D5D70[ecx], 32h
	jmp loc_44EDD5
;sub_44EC50 endp

sub_44EE20: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	shl eax, 4
	add eax, ecx
	shl eax, 4
	mov eax, dword dword_4D5C74[eax]
	mov ecx, [eax+0C4h]
	mov [edx], ecx
	neg ecx
	mov [edx], ecx
	mov ecx, [eax+0C8h]
	mov ebx, ecx
	mov [edx+4], ecx
	neg ebx
	mov [edx+4], ebx
	mov ecx, [eax+0CCh]
	mov esi, ecx
	mov [edx+8], ecx
	neg esi
	mov [edx+8], esi
	mov ecx, [eax+0D0h]
	mov [edx+0Ch], ecx
	mov ecx, [eax+0D4h]
	mov [edx+10h], ecx
	mov ecx, [eax+0D8h]
	mov [edx+14h], ecx
	mov ecx, [eax+0DCh]
	mov edi, ecx
	mov [edx+18h], ecx
	neg edi
	mov [edx+18h], edi
	mov ecx, [eax+0E0h]
	mov ebp, ecx
	mov [edx+1Ch], ecx
	neg ebp
	mov [edx+1Ch], ebp
	mov eax, [eax+0E4h]
	mov [edx+20h], eax
	neg eax
	mov [edx+20h], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44EE20 endp

sub_44EEC0: ;SUBROUTINE
	cmp edx, 1
	jnb loc_44EECE
	test edx, edx
	jz loc_44F010

locret_44EECD:
	ret

loc_44EECE:
	jbe loc_44EF60
	cmp edx, 2
	jnz locret_44EECD
	jmp loc_44EEE0

loc_44EEE0:
	push edx
	mov edx, eax
	call sub_480730
	mov edx, [edx+4]
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	cmp byte byte_4D5C7C[eax], 5
	jz loc_44EF00
	pop edx
	ret

loc_44EF00:
	fld dword [byte_5118C8]
	fld dword [flt_5118C4]
	fld dword [flt_5118B8]
	fld dword [flt_5118B4]
	mov eax, dword [dword_5118AC]
	fxch st3
	fstp dword [dword_4D5294]
	mov dword [dword_4DAC24], eax
	mov eax, dword [dword_5118B0]
	fxch st1
	fstp dword [flt_4D5298]
	mov dword [dword_4DAC28], eax
	mov eax, dword [dword_5118C0]
	fstp dword [flt_4D529C]
	mov dword [dword_4DAC1C], eax
	mov eax, dword [dword_5118BC]
	fstp dword [flt_4D52A0]
	mov dword [dword_4DAC20], eax
	pop edx
	ret

loc_44EF60:
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov ecx, [eax+4]
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	mov bl, byte byte_4D5C7C[eax]
	cmp bl, 5
	jz loc_44EF81
	pop edx
	pop ecx
	pop ebx
	ret

loc_44EF81:
	fld dword [dword_4D5294]
	fld dword [flt_4D5298]
	fld dword [flt_4D529C]
	fld dword [flt_4D52A0]
	mov bh, 9
	mov ecx, dword [dword_4DAC24]
	fxch st3
	fstp dword [byte_5118C8]
	fxch st1
	fstp dword [flt_5118C4]
	fstp dword [flt_5118B8]
	mov dword [dword_5118AC], ecx
	mov ecx, dword [dword_4DAC28]
	fstp dword [flt_5118B4]
	mov dword [dword_5118B0], ecx
	mov ecx, dword [dword_4DAC1C]
	mov byte byte_4D5C7C[eax], bh
	mov dword [dword_5118C0], ecx
	mov ecx, dword [dword_4DAC20]
	mov eax, edx
	mov dword [dword_5118BC], ecx
	call sub_480730
	mov edx, [edx+4]
	mov eax, edx
	shl eax, 4
	add eax, edx
	shl eax, 4
	mov byte byte_4D5C7C[eax], bl
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F010:
	push ebx
	push ecx
	push edx
	mov ecx, eax
	lea edx, [eax+8]
	mov ebx, [eax]
	mov eax, [eax+4]
	call sub_44B830
	mov eax, ecx
	call sub_480730
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44EEC0 endp

dword_44F050: times 8 dd 0

sub_44F070: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 5Ch
	mov esi, 1
	mov eax, dword [dword_511E3C]
	sub eax, esi
	mov edi, 4
	mov [esp+54h], eax
	cmp eax, esi
	jle loc_44F0D7

loc_44F092:
	mov eax, dword dword_511AC8[edi]
	lea ecx, [esi-1]
	mov ebp, eax
	mov ebx, [eax+14h]
	test ecx, ecx
	jl loc_44F0C4
	lea eax, 0[ecx*4]

loc_44F0AB:
	mov edx, dword dword_511AC8[eax]
	cmp ebx, [edx+14h]
	jge loc_44F0C4
	sub eax, 4
	dec ecx
	mov dword dword_511AD0[eax], edx
	test eax, eax
	jge loc_44F0AB

loc_44F0C4:
	inc esi
	mov dword dword_511ACC[ecx*4], ebp
	mov ecx, [esp+54h]
	add edi, 4
	cmp esi, ecx
	jl loc_44F092

loc_44F0D7:
	cmp dword [dword_512228], 0
	jz loc_44F130
	mov esi, dword [dword_511E3C]
	xor ecx, ecx
	test esi, esi
	jle loc_44F10C
	mov edx, dword [dword_511E3C]
	xor eax, eax

loc_44F0F4:
	lea ebx, [edx-1]
	sub ebx, ecx
	add eax, 4
	mov ebx, dword dword_511AC8[ebx*4]
	inc ecx
	mov [esp+eax-4], ebx
	cmp ecx, edx
	jl loc_44F0F4

loc_44F10C:
	mov edi, dword [dword_511E3C]
	test edi, edi
	jle loc_44F130
	lea ecx, 0[edi*4]
	xor eax, eax

loc_44F11F:
	add eax, 4
	mov edx, [esp+eax-4]
	mov dword dword_511AC4[eax], edx
	cmp eax, ecx
	jl loc_44F11F

loc_44F130:
	mov ebp, dword [dword_511E3C]
	xor eax, eax
	test ebp, ebp
	jle loc_44F158
	xor edi, edi

loc_44F13E:
	mov edx, dword dword_511AC8[edi]
	mov [edx+1F0h], eax
	mov edx, dword [dword_511E3C]
	inc eax
	add edi, 4
	cmp eax, edx
	jl loc_44F13E

loc_44F158:
	mov edi, 1
	mov eax, dword [dword_511E3C]
	sub eax, edi
	mov ebp, 4
	mov [esp+50h], eax
	cmp eax, edi
	jle loc_44F1BC

loc_44F171:
	lea edx, [edi-1]
	mov eax, dword dword_511A88[ebp]
	xor esi, esi
	mov [esp+58h], eax
	mov si, [eax+6]
	test edx, edx
	jl loc_44F1A5
	lea eax, 0[edx*4]
	mov ebx, ebp

loc_44F191:
	mov ecx, dword dword_511A8C[ebx]
	mov cx, [ecx+6]
	and ecx, 0FFFFh
	cmp esi, ecx
	jl loc_44F1C6

loc_44F1A5:
	mov eax, [esp+58h]
	mov ebx, [esp+50h]
	add ebp, 4
	inc edi
	mov dword dword_511A8C[edx*4], eax
	cmp edi, ebx
	jl loc_44F171

loc_44F1BC:
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F1C6:
	sub eax, 4
	mov ecx, dword dword_511A8C[eax]
	dec edx
	mov dword dword_511A90[eax], ecx
	test eax, eax
	jge loc_44F191
	jmp loc_44F1A5
;sub_44F070 endp

sub_44F1E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, dword [dword_511E3C]
	xor ebx, ebx
	test edx, edx
	jle loc_44F20F
	xor esi, esi

loc_44F1F2:
	mov ecx, dword dword_511B48[esi]
	cmp byte [ecx+8Dh], 0
	jnz loc_44F219

loc_44F201:
	mov ecx, dword [dword_511E3C]
	inc ebx
	add esi, 4
	cmp ebx, ecx
	jl loc_44F1F2

loc_44F20F:
	call sub_44F070
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F219:
	mov eax, ecx
	call sub_44F2E0
	mov [ecx+214h], eax
	mov eax, ecx
	call sub_45FF80
	mov [ecx+3ACh], eax
	mov edx, [ecx+1A8h]
	mov eax, [ecx+1A0h]
	call sub_49D7E0
	mov dl, [ecx+8Ch]
	mov [ecx+204h], eax
	cmp dl, 1
	jz loc_44F262
	mov eax, ecx
	call sub_44F280
	mov [ecx+39Ch], eax

loc_44F262:
	cmp word [ecx+74h], 0
	jz loc_44F201
	mov eax, ecx
	call sub_44F430
	mov eax, ecx
	call sub_450DF0
	jmp loc_44F201
;sub_44F1E0 endp

sub_44F280: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov edx, [eax+130h]
	mov eax, [eax+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+134h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+138h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44F280 endp

sub_44F2E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, eax
	mov edx, [eax+0C4h]
	mov eax, [eax+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+11Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+120h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov edx, [ecx+108h]
	test ebx, ebx
	jle loc_44F40B

loc_44F33C:
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D0h]
	mov eax, [ecx+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+11Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add esi, eax
	mov eax, [ecx+120h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov edx, [ecx+10Ch]
	test eax, eax
	jle loc_44F412

loc_44F39C:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+11Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add esi, eax
	mov eax, [ecx+120h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov edx, [ecx+110h]
	test eax, eax
	jle loc_44F416
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F40B:
	neg ebx
	jmp loc_44F33C

loc_44F412:
	neg eax
	jmp loc_44F39C

loc_44F416:
	neg eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44F2E0 endp

sub_44F430: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	xor edx, edx
	mov ecx, [eax+14h]
	mov dx, [eax+4]
	cmp edx, ecx
	jz loc_44F466
	push esi
	cmp dword [dword_512228], 0
	jnz loc_44F49B
	cmp ecx, 1F4h
	jle loc_44F46A
	test dx, dx
	jnz loc_44F46A

loc_44F457:
	inc dword [eax+1FCh]

loc_44F45D:
	mov dx, [eax+14h]
	mov [eax+4], dx
	pop esi

loc_44F466:
	pop ebp
	pop edx
	pop ecx
	ret

loc_44F46A:
	mov ebp, [eax+14h]
	test ebp, ebp
	jl loc_44F45D
	cmp ebp, 32h
	jg loc_44F45D
	cmp word [eax+4], 1F4h
	jbe loc_44F45D
	mov ecx, [eax+1FCh]
	test ecx, ecx
	jle loc_44F493
	lea esi, [ecx-1]
	mov [eax+1FCh], esi
	jmp loc_44F45D

loc_44F493:
	inc dword [eax+1F8h]
	jmp loc_44F45D

loc_44F49B:
	test ecx, ecx
	jl loc_44F4AB
	cmp ecx, 32h
	jg loc_44F4AB
	cmp dx, 1F4h
	ja loc_44F457

loc_44F4AB:
	cmp word [eax+4], 32h
	ja loc_44F45D
	cmp dword [eax+14h], 1F4h
	jle loc_44F45D
	mov edx, [eax+1FCh]
	test edx, edx
	jle loc_44F493
	push ebx
	lea ebx, [edx-1]
	mov [eax+1FCh], ebx
	pop ebx
	mov dx, [eax+14h]
	mov [eax+4], dx
	pop esi
	pop ebp
	pop edx
	pop ecx
	ret
;sub_44F430 endp

sub_44F4E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_511E3C]
	xor esi, esi
	test edx, edx
	jle loc_44F63F
	xor ecx, ecx

loc_44F4F8:
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+36Ch]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+374h]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	test byte [ebx+1F4h], 1
	jnz loc_44F646

loc_44F537:
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+37Ch]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+380h]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F50]
	mov edx, [ebx+384h]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+38Ch]
	call sub_471430
	mov ebx, dword dword_511B48[ecx]
	mov eax, dword [dword_540F54]
	mov edx, [ebx+390h]
	call sub_471430
	mov eax, dword dword_511B48[ecx]
	call sub_4784D0
	test eax, eax
	jz loc_44F5C9
	mov edx, sub_478360
	mov eax, dword [dword_540F54]
	mov ebx, dword dword_511B48[ecx]
	call sub_471430

loc_44F5C9:
	mov ebx, dword dword_511B48[ecx]
	test byte [ebx+1F4h], 4
	jz loc_44F65B
	mov eax, dword [dword_540F50]

loc_44F5E1:
	mov edx, [ebx+388h]
	call sub_471430
	mov edx, esi
	mov eax, dword dword_511B48[ecx]
	call sub_44FCB0
	mov eax, dword dword_511B48[ecx]
	xor edi, edi
	call sub_4848FC
	mov ebp, dword dword_511B88[ecx]
	mov dword dword_511B48[ecx], edi
	test ebp, ebp
	jz loc_44F61C
	mov dword dword_511B88[ecx], edi

loc_44F61C:
	cmp dword dword_5118E8[ecx], 0
	jz loc_44F62D
	xor ebx, ebx
	mov dword dword_5118E8[ecx], ebx

loc_44F62D:
	mov ebx, dword [dword_511E3C]
	inc esi
	add ecx, 4
	cmp esi, ebx
	jl loc_44F4F8

loc_44F63F:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F646:
	mov eax, dword [dword_540F50]
	mov edx, [ebx+378h]
	call sub_471430
	jmp loc_44F537

loc_44F65B:
	mov eax, dword [dword_540F54]
	jmp loc_44F5E1
;sub_44F4E0 endp

sub_44F670: ;SUBROUTINE
	push edx
	mov eax, dword [dword_4D5EF0]
	xor edx, edx
	call sub_4848FC
	mov dword [dword_4D5EF0], edx
	pop edx
	ret
;sub_44F670 endp

sub_44F690: ;SUBROUTINE
	push edx
	sub esp, 0FCh
	mov edx, dword [dword_513470]
	push edx
	push aScardata_viv ; "%scardata.viv"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	xor edx, edx
	mov eax, esp
	call sub_486F40
	mov dword [dword_4D5EF0], eax
	add esp, 0FCh
	pop edx
	ret
;sub_44F690 endp

sub_44F6D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	call sub_44FAA0
	call sub_452E40
	xor edi, edi
	xor ebp, ebp

loc_44F6E4:
	mov edx, dword [dword_5126F0]
	mov esi, dword [dword_512260]
	add esi, edx
	cmp edi, esi
	jl loc_44F811
	xor ebp, ebp
	xor edi, edi

loc_44F6FE:
	mov ecx, dword [dword_5126F0]
	mov esi, dword [dword_512260]
	add esi, ecx
	cmp edi, esi
	jge loc_44F8A4
	mov esi, dword dword_511B48[ebp]
	mov edx, edi
	mov eax, esi
	mov ecx, 6
	call sub_44FCE0
	mov ebx, esi
	mov eax, dword [dword_540F54]
	mov edx, [esi+36Ch]
	call sub_4714E0
	mov ecx, 15h
	mov eax, dword [dword_540F54]
	mov ebx, esi
	mov edx, [esi+374h]
	call sub_4714E0
	test byte [esi+1F4h], 1
	jz loc_44F771
	mov ecx, 19h
	mov eax, dword [dword_540F50]
	mov ebx, esi
	mov edx, [esi+378h]
	call sub_4714E0

loc_44F771:
	mov ecx, 1Eh
	mov eax, dword [dword_540F54]
	mov ebx, esi
	mov edx, [esi+37Ch]
	call sub_4714E0
	mov ecx, 1Eh
	mov eax, dword [dword_540F54]
	mov ebx, esi
	mov edx, [esi+380h]
	call sub_4714E0
	mov ecx, 28h
	mov eax, dword [dword_540F54]
	mov ebx, esi
	mov edx, [esi+38Ch]
	call sub_4714E0
	mov ecx, 32h
	mov eax, dword [dword_540F54]
	mov ebx, esi
	mov edx, [esi+390h]
	call sub_4714E0
	mov ecx, 1Eh
	mov eax, dword [dword_540F50]
	mov ebx, esi
	mov edx, [esi+384h]
	call sub_4714E0
	test byte [esi+1F4h], 4
	jz loc_44F895
	mov ecx, 1Eh
	mov eax, dword [dword_540F50]

loc_44F7FB:
	mov ebx, esi
	mov edx, [esi+388h]
	call sub_4714E0
	inc edi
	add ebp, 4
	jmp loc_44F6FE

loc_44F811:
	mov ecx, aCNfs2seGame_11 ; "c:\\nfs2se\\game\\common\\cars.c"
	mov ebx, 0AA5h
	mov edx, 684h
	mov eax, aCarobj ; "carObj"
	mov dword [dword_4DB1DC], ebx
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_4844B0
	mov edx, 684h
	mov esi, eax
	mov ecx, eax
	call sub_44F8F0
	cmp edi, dword [dword_512260]
	jge loc_44F86B
	mov eax, dword_512270
	add eax, ebp
	mov [esi+21Ch], eax
	mov eax, ecx
	call sub_452BD0
	add ebp, 40h
	inc edi
	jmp loc_44F6E4

loc_44F86B:
	mov edx, dword [dword_512260]
	mov eax, edi
	sub eax, edx
	imul eax, 54h
	mov edx, dword_5423F0
	add edx, eax
	mov [esi+21Ch], edx
	mov eax, ecx
	call sub_452BD0
	add ebp, 40h
	inc edi
	jmp loc_44F6E4

loc_44F895:
	mov ecx, 1Eh
	mov eax, dword [dword_540F54]
	jmp loc_44F7FB

loc_44F8A4:
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_4DB32A]
	mov dl, byte [byte_4DB316]
	and eax, edx
	xor edx, edx
	test eax, edx
	jz loc_44F8D2
	mov dword [dword_4D5EF4], 41h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_44F8D2:
	mov dword [dword_4D5EF4], 1999h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44F6D0 endp

sub_44F8F0: ;SUBROUTINE
	push ecx
	mov ecx, edx
	xor edx, edx
	test ecx, ecx
	jle loc_44F904

loc_44F8F9:
	inc edx
	mov byte [eax], 0
	inc eax
	cmp edx, ecx
	jl loc_44F8F9

loc_44F904:
	pop ecx
	ret
;sub_44F8F0 endp

sub_44F910: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 104h
	call sub_44F690
	xor ebx, ebx

loc_44F923:
	add ebx, 4
	xor edx, edx
	mov dword dword_5118E4[ebx], edx
	cmp ebx, 0E0h
	jnz loc_44F923
	mov [esp+100h], edx
	xor ebx, ebx

loc_44F93F:
	mov esi, dword [dword_5126F0]
	mov ebp, dword [dword_512260]
	add ebp, esi
	cmp ebx, ebp
	jge loc_44FA7C
	mov edi, dword [dword_512260]
	cmp ebx, edi
	jge loc_44F98C
	mov ebp, ebx
	shl ebp, 6
	add ebp, dword_512270

loc_44F96A:
	cmp ebx, dword [dword_512260]
	jl loc_44F99C
	cmp dword [ebp+0], 0Fh
	jge loc_44F99C

loc_44F978:
	mov edi, [esp+100h]
	add edi, 4
	inc ebx
	mov [esp+100h], edi
	jmp loc_44F93F

loc_44F98C:
	mov eax, ebx
	sub eax, edi
	imul eax, 54h
	mov ebp, dword_5423F0
	add ebp, eax
	jmp loc_44F96A

loc_44F99C:
	mov eax, [ebp+0]
	shl eax, 2
	mov ecx, dword dword_5118E8[eax]
	test ecx, ecx
	jnz loc_44FA6A
	mov edi, esp
	mov esi, dword [dword_513494]
	push edi

loc_44F9B9:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44F9D1
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44F9B9

loc_44F9D1:
	pop edi
	mov esi, [ebp+0]
	shl esi, 3
	mov edi, esp
	add esi, aMcf1 ; "MCF1"
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44F9E9:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44FA01
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44F9E9

loc_44FA01:
	pop edi
	cmp dword [ebp+0], 11h
	jge loc_44FA63
	mov esi, aA_qfs ; "a.qfs"

loc_44FA0D:
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_44FA18:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_44FA30
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_44FA18

loc_44FA30:
	pop edi
	mov eax, esp
	xor edx, edx
	mov esi, [esp+100h]
	call sub_488064
	mov dword dword_511B88[esi], eax
	mov eax, [esp+100h]
	mov esi, [ebp+0]
	mov eax, dword dword_511B88[eax]
	mov dword dword_5118E8[esi*4], eax
	jmp loc_44F978

loc_44FA63:
	mov esi, a_qfs ; ".qfs"
	jmp loc_44FA0D

loc_44FA6A:
	mov esi, [esp+100h]
	mov dword dword_511B88[esi], ecx
	jmp loc_44F978

loc_44FA7C:
	call sub_458650
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44F910 endp

sub_44FAA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 64h
	push aSimtune ; "SimTune"
	push aS_dat ; "%s.dat"
	lea eax, [esp+8]
	push eax
	lea edx, [esp+0Ch]
	call sprintf_
	add esp, 0Ch
	mov eax, dword [dword_4D5EF0]
	mov ebx, 1
	call sub_49D67C
	mov edx, eax
	xor eax, eax
	call sub_475F80
	mov edx, eax
	xor ebx, ebx

loc_44FADE:
	mov eax, edx
	call sub_475F00
	mov dword dword_511D48[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D4C[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D50[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D54[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D58[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D5C[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D60[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D64[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D68[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D6C[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D70[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D74[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D78[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D7C[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D80[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D84[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D88[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D8C[ebx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_511D90[ebx], eax
	mov eax, edx
	mov ecx, ebx
	call sub_475F00
	mov dword dword_511D94[ebx], eax
	mov eax, edx
	lea esi, [ebx+10h]
	call sub_475F00
	mov dword dword_511D98[ebx], eax

loc_44FBF4:
	mov eax, edx
	call sub_475F00
	mov dword dword_511D9C[ecx], eax
	mov eax, edx
	add ecx, 4
	call sub_475F00
	mov dword dword_511DA8[ecx], eax
	cmp ecx, esi
	jnz loc_44FBF4
	add ebx, 74h
	cmp ebx, 0E8h
	jnz loc_44FADE
	mov eax, edx
	call sub_475F50
	add esp, 64h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44FAA0 endp

sub_44FC40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, dword [dword_511E3C]
	test edx, edx
	jle loc_44FC74
	lea ebx, 0[edx*4]
	xor eax, eax

loc_44FC58:
	add eax, 4
	mov ecx, dword dword_511B44[eax]
	mov dword dword_511AC4[eax], ecx
	mov dword dword_511A84[eax], ecx
	cmp eax, ebx
	jl loc_44FC58

loc_44FC74:
	mov ebx, dword [dword_511E3C]
	xor ecx, ecx
	test ebx, ebx
	jle loc_44FCA0
	xor ebx, ebx

loc_44FC82:
	mov edx, ecx
	mov eax, dword dword_511B48[ebx]
	call sub_450000
	mov esi, dword [dword_511E3C]
	inc ecx
	add ebx, 4
	cmp ecx, esi
	jl loc_44FC82

loc_44FCA0:
	xor edi, edi
	mov dword [dword_4D8514], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_44FC40 endp

sub_44FCB0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov edx, [eax+2ECh]
	test edx, edx
	jnz loc_44FCC6
	mov eax, ecx
	call sub_46DFB0
	pop ecx
	ret

loc_44FCC6:
	mov eax, edx
	call sub_4848FC
	mov dword [ecx+2ECh], 0
	mov eax, ecx
	call sub_46DFB0
	pop ecx
	ret
;sub_44FCB0 endp

sub_44FCE0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20Ch
	mov ecx, eax
	mov edi, edx
	call sub_452DD0
	mov edx, dword [dword_512260]
	xor ebp, ebp
	xor esi, esi
	cmp edi, edx
	jge loc_44FDC1
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jge loc_44FF82
	lea eax, [ecx+1DCh]
	push eax

loc_44FD1C:
	push aS_dat ; "%s.dat"
	lea eax, [esp+104h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+0FCh]
	mov eax, dword [dword_4D5EF0]
	call sub_49D67C
	test eax, eax
	jz loc_44FD56
	mov ebx, 1
	mov edx, eax
	xor eax, eax
	call sub_475F80
	mov esi, eax

loc_44FD56:
	mov eax, [ecx+21Ch]
	mov ebp, [eax]
	cmp ebp, 0Fh
	jge loc_44FF8C
	lea eax, 0[ebp*8]
	add eax, aMcf1 ; "MCF1"
	push eax
	push aPS ; "p%s"

loc_44FD79:
	lea eax, [esp+200h]
	push eax
	call sprintf_
	add esp, 0Ch

loc_44FD89:
	lea eax, [esp+1F8h]
	push eax
	push aS_dat ; "%s.dat"
	lea eax, [esp+8]
	push eax
	lea edx, [esp+0Ch]
	call sprintf_
	add esp, 0Ch
	mov eax, dword [dword_4D5EF0]
	mov ebx, 1
	call sub_49D67C
	mov edx, eax
	xor eax, eax
	call sub_475F80
	mov ebp, eax

loc_44FDC1:
	mov edx, edi
	mov eax, ecx
	call sub_450000
	mov eax, ecx
	mov dword [ecx+65Ch], 0
	lea edx, [ecx+10h]

loc_44FDD9:
	add eax, 4
	mov dword [eax+634h], 0
	mov dword [eax+648h], 0
	cmp eax, edx
	jnz loc_44FDD9
	cmp edi, dword [dword_512260]
	jge loc_44FE52
	mov edx, esi
	mov eax, ecx
	mov ebx, 96Ch
	call sub_43CB60
	mov eax, ecx
	mov edx, aCNfs2seGame_11 ; "c:\\nfs2se\\game\\common\\cars.c"
	call sub_43CDD0
	mov eax, aCarspecs ; "carSpecs"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov edx, 1DCh
	xor ebx, ebx
	call sub_484498
	mov edx, ebp
	mov [ecx+2ECh], eax
	mov eax, ecx
	call sub_46C210
	test byte [ecx+1F4h], 4
	jz loc_44FE52
	mov eax, ecx
	call sub_46BE00

loc_44FE52:
	mov dword [ecx+370h], sub_4703D0
	mov dword [ecx+374h], sub_4588D0
	mov dword [ecx+378h], sub_474AF0
	mov dword [ecx+37Ch], sub_4679E0
	mov dword [ecx+380h], sub_460030
	mov dword [ecx+384h], sub_462180
	mov dword [ecx+388h], sub_461F50
	mov dword [ecx+38Ch], sub_453860
	mov dword [ecx+390h], sub_4505E0
	mov bl, [ecx+1F4h]
	mov dword [ecx+36Ch], sub_4628B0
	test bl, 2
	jz loc_44FEE9
	mov dword [ecx+374h], sub_4589F0
	mov dword [ecx+37Ch], sub_43D920
	mov dword [ecx+388h], sub_461E80
	mov dword [ecx+370h], 0

loc_44FEE9:
	test byte [ecx+1F4h], 40h
	jz loc_44FF38
	mov dword [ecx+370h], 0
	mov dword [ecx+374h], 0
	mov dword [ecx+378h], 0
	mov dword [ecx+37Ch], sub_4740C0
	mov dword [ecx+388h], sub_461E80
	mov dword [ecx+390h], sub_473E60
	mov dword [ecx+2ECh], 0

loc_44FF38:
	test byte [ecx+1F4h], 4
	jz loc_44FF67
	cmp dword [dword_512210], 0
	jz loc_44FF67
	cmp dword [dword_512208], 1
	jl loc_44FF67
	mov dword [ecx+388h], sub_452F50
	mov dword [ecx+384h], sub_453010

loc_44FF67:
	mov eax, ecx
	call sub_46D3D0
	cmp edi, dword [dword_512260]
	jl loc_44FFD9
	add esp, 20Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_44FF82:
	push aStrd ; "STRD"
	jmp loc_44FD1C

loc_44FF8C:
	cmp ebp, 24h
	jg loc_44FFBF
	test byte [byte_512218], 4
	jz loc_44FFB4
	push aPjagr ; "pjagr"
	lea eax, [esp+1FCh]
	push eax
	call sprintf_
	add esp, 8
	jmp loc_44FD89

loc_44FFB4:
	push ebp
	push aPtr02d ; "ptr%02d"
	jmp loc_44FD79

loc_44FFBF:
	push aPcala ; "pcala"
	lea eax, [esp+1FCh]
	push eax
	call sprintf_
	add esp, 8
	jmp loc_44FD89

loc_44FFD9:
	mov eax, esi
	call sub_475F50
	mov eax, ebp
	call sub_475F50
	add esp, 20Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_44FCE0 endp

sub_450000: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov edi, edx
	call sub_452DD0
	cmp edi, dword [dword_512260]
	jl loc_4503B3
	mov ecx, [esi+110h]
	mov edx, edi
	push ecx
	mov ebx, [esi+10Ch]
	mov eax, esi
	push ebx
	mov ebp, [esi+108h]
	or dh, 2
	push ebp
	mov ecx, 0F0000h
	mov ebx, 0A0000h

loc_450043:
	call sub_462200
	cmp edi, dword [dword_512260]
	jl loc_4503DE
	mov eax, esi
	xor edi, edi
	call sub_473DA0
	mov [esp], edi
	mov [esp+4], edi
	mov [esp+8], edi

loc_450068:
	mov edx, dword [dword_512228]
	mov dword [esi+1F8h], 0
	test edx, edx
	jz loc_450403
	mov dword [esi+1FCh], 1

loc_45008A:
	mov ax, [esi+14h]
	mov [esi+4], ax
	mov eax, esi
	call sub_450DF0
	mov dword [esi+200h], 0
	mov dword [esi+204h], 0
	mov dword [esi+218h], 10000h
	mov dword [esi+558h], 10000h
	mov dword [esi+55Ch], 0
	mov dword [esi+284h], 0
	mov dword [esi+28Ch], 0
	mov dword [esi+290h], 0
	mov dword [esi+294h], 0
	mov dword [esi+298h], 0
	mov dword [esi+29Ch], 0
	mov dword [esi+2A0h], 0
	mov dword [esi+2A4h], 0
	mov dword [esi+2A8h], 0
	mov dword [esi+2ACh], 0
	mov dword [esi+2C8h], 0
	mov dword [esi+2CCh], 0
	mov dword [esi+2D0h], 0
	mov dword [esi+2B0h], 0
	mov dword [esi+2B4h], 0
	mov dword [esi+2B8h], 0
	mov dword [esi+2BCh], 0
	mov dword [esi+2C0h], 0
	mov dword [esi+2C4h], 0
	mov dword [esi+308h], 0
	mov dword [esi+2F0h], 0
	mov dword [esi+2F4h], 0
	mov dword [esi+2F8h], 0
	mov dword [esi+2FCh], 0
	mov dword [esi+300h], 0
	mov dword [esi+304h], 0
	mov dword [esi+30Ch], 0
	mov dword [esi+310h], 0
	mov dword [esi+364h], 0
	mov dword [esi+368h], 0
	mov dword [esi+2E8h], 0
	mov byte [esi+2D4h], 0
	mov byte [esi+2D5h], 0
	mov byte [esi+2D6h], 1
	mov dword [esi+2E0h], 0
	mov byte [esi+2D7h], 0
	mov byte [esi+2D8h], 0
	mov dword [esi+2E4h], 0
	mov byte [esi+2DAh], 1
	mov byte [esi+2D9h], 1
	mov byte [esi+2DCh], 0
	mov byte [esi+2DDh], 0
	mov byte [esi+2DEh], 0
	mov dword [esi+320h], 0
	mov dword [esi+32Ch], 0
	mov dword [esi+360h], 0
	mov dword [esi+324h], 0
	mov dword [esi+328h], 0
	mov dword [esi+314h], 0
	mov byte [esi+318h], 0
	mov ecx, [esi+1E8h]
	mov dword [esi+31Ch], 0
	test ecx, ecx
	jnz loc_4502C2
	test byte [byte_512218], 10h
	jz loc_4502C2
	mov byte [esi+318h], 1

loc_4502C2:
	cmp dword [esi+1E8h], 1
	jnz loc_4502DB
	test byte [byte_512218], 20h
	jz loc_4502DB
	mov byte [esi+318h], 1

loc_4502DB:
	mov eax, esi
	call sub_43CDD0
	mov dword [esi+590h], 0
	mov dword [esi+578h], 0
	mov dword [esi+57Ch], 0
	mov dword [esi+580h], 0
	mov dword [esi+584h], 0
	mov dword [esi+588h], 0
	mov dword [esi+58Ch], 0
	mov dword [esi+17Ch], 0
	mov dword [esi+660h], 0
	mov dword [esi+664h], 0
	mov dword [esi+668h], 0
	mov dword [esi+66Ch], 0
	mov dword [esi+670h], 0
	mov dword [esi+62Ch], 0
	mov dword [esi+630h], 0
	mov eax, [esi+21Ch]
	mov dword [esi+634h], 0
	mov edi, [eax]
	cmp edi, 0Fh
	jge loc_45042C
	mov eax, dword dword_4D5EFC[edi*8]
	mov ebp, dword [dword_512204]
	mov [esi+674h], eax
	test ebp, ebp
	jz loc_45040E
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4503B3:
	mov eax, [esi+110h]
	push eax
	mov edx, [esi+10Ch]
	mov ebx, 0A0000h
	push edx
	mov ecx, [esi+108h]
	mov eax, esi
	push ecx
	mov edx, edi
	mov ecx, 0F0000h
	or dh, 1
	jmp loc_450043

loc_4503DE:
	mov ebx, esp
	lea edx, [esp+0Ch]
	mov eax, esi
	call sub_450440
	mov ebx, esp
	mov edx, [esp+0Ch]
	mov ecx, dword [dword_512228]
	mov eax, esi
	call sub_4624B0
	jmp loc_450068

loc_450403:
	mov [esi+1FCh], edx
	jmp loc_45008A

loc_45040E:
	mov edx, 0A666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+674h], eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45042C:
	mov dword [esi+674h], 0
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_450000 endp

sub_450440: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, edx
	mov esi, ebx
	mov edi, [eax+1E8h]
	mov edx, dword [dword_512228]
	mov edi, dword dword_512670[edi*4]
	test edx, edx
	jnz loc_450526
	lea eax, 0[edi*4]
	add eax, edi

loc_45046C:
	add eax, 2
	mov [ecx], eax
	mov ebp, dword [dword_512228]
	and edi, 1
	test ebp, ebp
	jz loc_45048B
	test edi, edi
	jnz loc_450545
	mov edi, 1

loc_45048B:
	call sub_43D860
	test eax, eax
	jz loc_450579
	mov edx, [ecx]
	lea eax, 0[edx*8]
	add eax, edx
	mov ebx, dword [dword_5118A4]
	shl eax, 2
	add ebx, eax
	mov al, [ebx+1Fh]
	xor edx, edx
	and al, 0Fh
	mov dl, al
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov bl, [ebx+21h]
	and ebx, 0FFh
	shl ebx, 0Fh
	mov ebp, eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	imul ebp, ebx
	test edi, edi
	jz loc_4504E2
	add eax, ebx

loc_4504E2:
	mov [esi], eax
	test edi, edi
	jz loc_45054C
	mov edx, [ecx]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov dl, [edx+eax*4+21h]
	and edx, 0FFh
	shl edx, 0Fh
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add eax, ebp

loc_450511:
	mov [esi], eax
	mov dword [esi+8], 0
	mov dword [esi+4], 8000h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_450526:
	mov ebx, dword [dword_512268]
	mov edx, dword [dword_512264]
	add edx, ebx
	dec edx
	sub edx, edi
	lea eax, 0[edx*4]
	add eax, edx
	jmp loc_45046C

loc_450545:
	xor edi, edi
	jmp loc_45048B

loc_45054C:
	mov edx, [ecx]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov dl, [edx+eax*4+21h]
	and edx, 0FFh
	shl edx, 0Fh
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	sub ebp, eax
	mov eax, ebp
	jmp loc_450511

loc_450579:
	test edi, edi
	jz loc_4505A9
	mov edx, [ecx]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dl, [eax+21h]
	shl edx, 0Fh
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	jmp loc_450511

loc_4505A9:
	mov edx, [ecx]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov al, [edx+eax*4+20h]
	mov edx, eax
	and edx, 0FFh
	shl edx, 0Fh
	neg edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	jmp loc_450511
;sub_450440 endp

sub_4505E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov edx, [eax+2E8h]
	mov dword [eax+590h], 0
	test edx, edx
	jnz loc_450626

loc_4505FC:
	cmp byte [ecx+8Ch], 0
	jz loc_450631

loc_450605:
	cmp dword [ecx+578h], 0
	jg loc_450700
	cmp dword [ecx+17Ch], 0
	jnz loc_450700
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450626:
	lea ebx, [edx-1]
	mov [eax+2E8h], ebx
	jmp loc_4505FC

loc_450631:
	cmp byte [ecx+8Dh], 0
	jz loc_450605
	mov eax, ecx
	call sub_43D690
	mov eax, ecx
	call sub_450910
	cmp dword [ecx+88h], 460000h
	jge loc_45065B
	mov eax, ecx
	call sub_450890

loc_45065B:
	cmp dword [ecx+88h], 640000h
	jge loc_45066E
	mov eax, ecx
	call sub_452050

loc_45066E:
	mov eax, ecx
	call sub_451780
	cmp dword [ecx+88h], dword_5A0000
	jge loc_450688
	mov eax, ecx
	call sub_450CD0

loc_450688:
	cmp dword [ecx+88h], 3C0000h
	jge loc_4506E3
	mov eax, [ecx+2ACh]
	mov ebx, [ecx+66Ch]
	sub eax, ebx
	mov edx, 18000h
	cmp eax, 8000h
	jg loc_45071A
	cmp eax, 0FFFF8000h
	jge loc_4506BE
	lea esi, [ebx+eax]
	mov [ecx+66Ch], esi

loc_4506BE:
	mov ebp, [ecx+670h]
	mov eax, [ecx+2A4h]
	sub eax, ebp
	cmp eax, edx
	jle loc_450728
	lea esi, [edx+ebp]
	mov [ecx+670h], esi

loc_4506D9:
	cmp word [ecx+14Ch], 0
	jbe loc_450747

loc_4506E3:
	mov dword [ecx+664h], 0
	mov eax, [ecx+664h]
	mov [ecx+668h], eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450700:
	mov eax, ecx
	xor edx, edx
	mov dword [ecx+578h], 0
	call sub_4523F0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45071A:
	lea edi, [ebx+8000h]
	mov [ecx+66Ch], edi
	jmp loc_4506BE

loc_450728:
	mov ebx, edx
	neg ebx
	cmp eax, ebx
	jge loc_45073C
	mov ebx, ebp
	sub ebx, edx
	mov [ecx+670h], ebx
	jmp loc_4506D9

loc_45073C:
	lea edx, [eax+ebp]
	mov [ecx+670h], edx
	jmp loc_4506D9

loc_450747:
	mov eax, [ecx+588h]
	mov edx, [ecx+584h]
	mov edi, dword dword_4D61CC[eax*4]
	imul edx, edi
	mov eax, edx
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, eax
	mov eax, [ecx+670h]
	add eax, edx
	mov edx, [ecx+674h]
	mov [ecx+668h], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+668h], eax
	mov eax, [ecx+580h]
	mov edx, [ecx+57Ch]
	mov ebp, dword dword_4D61CC[eax*4]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, [ecx+66Ch]
	sub eax, edx
	mov edx, [ecx+674h]
	mov [ecx+664h], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+664h], eax
	mov eax, ecx
	call sub_450C00
	mov eax, [ecx+2F8h]
	mov edx, [ecx+67Ch]
	test eax, eax
	jz loc_450862

loc_4507EE:
	cmp dword [dword_512204], 0
	jz loc_450874
	mov ebp, [ecx+67Ch]
	cmp ebp, 0E666h
	jle loc_45086D
	mov edx, ebp

loc_45080B:
	call sub_488074
	shr eax, 0Ch
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ch
	sbb eax, edx
	sar eax, 0Ch
	add [ecx+664h], eax
	mov edx, [ecx+67Ch]
	call sub_488074
	shr eax, 0Ch
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ch
	sbb eax, edx
	sar eax, 0Ch
	add [ecx+668h], eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450862:
	cmp dword [ecx+2F4h], 0
	jnz loc_4507EE
	jmp loc_45080B

loc_45086D:
	mov edx, 0E666h
	jmp loc_45080B

loc_450874:
	mov edi, [ecx+67Ch]
	cmp edi, 4CCCh
	jle loc_450886
	mov edx, edi
	jmp loc_45080B

loc_450886:
	mov edx, 4CCCh
	jmp loc_45080B
;sub_4505E0 endp

sub_450890: ;SUBROUTINE
	push edx
	push ebp
	test byte [eax+1F4h], 10h
	jnz loc_4508C3
	mov edx, [eax+184h]
	cmp dword dword_4D6070[edx*4], 0
	jz loc_4508C3
	cmp dword [eax+128h], 0CCCCh
	jge loc_4508C3
	cmp dword [eax+15Ch], 7AEh
	jle loc_4508C6

loc_4508C3:
	pop ebp
	pop edx
	ret

loc_4508C6:
	push edi
	mov edi, [eax+0A8h]
	mov edx, [eax+124h]
	mov ebp, [eax+0B0h]
	add edi, edx
	mov edx, [eax+12Ch]
	mov [eax+0A8h], edi
	add ebp, edx
	mov edx, [eax+0ACh]
	mov [eax+0B0h], ebp
	sub edx, 14CCCh
	mov [eax+0ACh], edx
	pop edi
	pop ebp
	pop edx
	ret
;sub_450890 endp

sub_450910: ;SUBROUTINE
	push ecx
	sub esp, 24h
	mov ecx, eax
	cmp byte [eax+8Eh], 0
	jz loc_450928
	cmp dword [ecx+17Ch], 0
	jz loc_45092D

loc_450928:
	add esp, 24h
	pop ecx
	ret

loc_45092D:
	push edx
	push ebx
	mov edx, [ecx+0C4h]
	mov eax, [ecx+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D0h]
	add ebx, eax
	mov eax, [ecx+0E8h]
	mov [ecx+2BCh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+0E8h]
	mov [ecx+2C0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [ecx+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512204]
	add ebx, eax
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov [ecx+2C4h], ebx
	mov edx, dword dword_511D54[eax*4]
	mov eax, [ecx+2BCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512204]
	mov [ecx+2BCh], eax
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D4C[eax*4]
	mov eax, [ecx+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+2C4h], eax
	test byte [ecx+1F4h], 4
	jz loc_450B08
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov ebx, dword dword_511D58[eax*4]
	mov eax, [ecx+2ACh]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+2BCh]
	mov edx, dword [dword_512204]
	add ebx, eax
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov [ecx+2BCh], ebx
	mov ebx, dword dword_511D50[eax*4]
	mov eax, [ecx+2A4h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub [ecx+2C4h], eax

loc_450B08:
	lea edx, [esp+8]
	lea eax, [ecx+0C4h]
	call sub_49D890
	mov edx, [esp+8]
	mov eax, [ecx+2BCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov ebx, eax
	mov eax, [ecx+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	add ebx, eax
	mov eax, [ecx+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0E8h], ebx
	mov eax, [ecx+2BCh]
	mov edx, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	mov ebx, eax
	mov eax, [ecx+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	add ebx, eax
	mov eax, [ecx+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0ECh], ebx
	mov eax, [ecx+2BCh]
	mov edx, [esp+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	mov ebx, eax
	mov eax, [ecx+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	add ebx, eax
	mov eax, [ecx+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0F0h], ebx
	pop ebx
	pop edx
	add esp, 24h
	pop ecx
	ret
;sub_450910 endp

sub_450C00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov ecx, eax
	mov edx, [ecx+0BCh]
	mov ebx, [eax+21Ch]
	sar edx, 1Fh
	mov eax, [eax+0BCh]
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebx, [ebx]
	shl ebx, 3
	mov edx, dword dword_4D5F00[ebx]
	cmp eax, edx
	jge loc_450CB7

loc_450C37:
	mov edx, [ecx+184h]
	shl edx, 2
	mov ebx, dword dword_4D60B0[edx]
	cmp eax, ebx
	jge loc_450CC2
	push esi
	mov eax, [ecx+0BCh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebx, [ecx+21Ch]
	mov ebx, [ebx]
	shl ebx, 3
	mov esi, dword dword_4D5F00[ebx]
	cmp eax, esi
	jge loc_450CBE

loc_450C77:
	pop esi

loc_450C78:
	mov edi, [ecx+0BCh]
	mov [ecx+67Ch], eax
	cmp edi, 430000h
	jle loc_450CB1
	lea edx, [edi-430000h]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov ebp, [ecx+67Ch]
	cmp eax, ebp
	jge loc_450CAB
	mov eax, ebp

loc_450CAB:
	mov [ecx+67Ch], eax

loc_450CB1:
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450CB7:
	mov eax, edx
	jmp loc_450C37

loc_450CBE:
	mov eax, esi
	jmp loc_450C77

loc_450CC2:
	mov eax, ebx
	jmp loc_450C78
;sub_450C00 endp

sub_450CD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	cmp dword [eax+100h], 3333h
	jl loc_450D1A
	test byte [eax+360h], 4
	jz loc_450D0D
	push 0
	push 0
	mov ecx, 1
	push 0
	mov ebx, 8
	mov edx, 5
	call sub_452E80
	sub dword [esi+360h], 4

loc_450D0D:
	mov eax, esi
	call sub_450E50

loc_450D14:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450D1A:
	mov ebx, [eax+184h]
	mov ecx, [esi+15Ch]
	mov ebx, dword dword_4D6130[ebx*4]
	mov eax, [eax+0BCh]
	cmp ecx, 3333h
	jge loc_450DC4
	cmp eax, 20000h
	jle loc_450DC4
	mov edi, [esi+328h]
	push 0
	cmp edi, 0A0000h
	jle loc_450DBD
	mov eax, edi

loc_450D5C:
	push eax
	mov ecx, 1
	mov edx, 4
	push ebx
	mov eax, esi
	mov ebx, 8
	call sub_452E80
	or byte [esi+360h], 4
	cmp dword [esi+0BCh], 40000h
	jle loc_450D14
	mov eax, [esi+180h]
	and eax, 3Fh
	cmp eax, 1
	jnz loc_450D14
	mov ecx, 5
	lea eax, [esi+0A8h]
	mov edx, 2
	push eax
	lea ebx, [esi+9Ch]
	mov eax, [esi]
	call sub_475E00
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_450DBD:
	mov eax, 0A0000h
	jmp loc_450D5C

loc_450DC4:
	push 0
	push 0
	mov ecx, 1
	mov ebx, 8
	push 0
	mov edx, 5
	mov eax, esi
	call sub_452E80
	sub dword [esi+360h], 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_450CD0 endp

sub_450DF0: ;SUBROUTINE
	push ebx
	push edx
	cmp dword [eax+1FCh], 0
	jle loc_450E04
	mov word [eax+6], 0
	pop edx
	pop ebx
	ret

loc_450E04:
	cmp dword [dword_512228], 0
	jz loc_450E33
	push esi
	push ecx
	mov cx, word [dword_5118A0]
	mov bx, [eax+1F8h]
	imul ebx, ecx
	mov si, [eax+14h]
	mov edx, ecx
	sub edx, esi
	add ebx, edx
	mov [eax+6], bx
	pop ecx
	pop esi
	pop edx
	pop ebx
	ret

loc_450E33:
	mov bx, word [dword_5118A0]
	imul bx, [eax+1F8h]
	mov dx, [eax+14h]
	add ebx, edx
	mov [eax+6], bx
	pop edx
	pop ebx
	ret
;sub_450DF0 endp

sub_450E50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov esi, eax
	mov eax, [eax+9Ch]
	mov [esp+3Ch], eax
	mov eax, [esi+0A0h]
	mov [esp+40h], eax
	mov eax, [esi+0A4h]
	mov [esp+44h], eax
	mov eax, [esi+154h]
	mov edx, [esi+88h]
	mov [esp+40h], eax
	cmp edx, 3C0000h
	jge loc_451244
	cmp dword [esi+15Ch], 6666h
	jge loc_451244
	cmp dword [esi+17Ch], 0
	jnz loc_451244
	mov eax, [esi+2B8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov edi, [esi+324h]
	sub edi, 4CCCh
	mov [esp+4Ch], edi
	test eax, eax
	jle loc_45123D

loc_450EDD:
	mov ebx, edi
	sub ebx, eax
	mov eax, [esi+328h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	lea ebp, [eax-4CCCh]
	mov [esp+48h], ebp

loc_450EFE:
	mov eax, [esi+184h]
	mov [esp+50h], eax
	mov eax, dword dword_4D6130[eax*4]
	mov edx, [esp+50h]
	mov [esp+54h], eax
	cmp edx, 0Dh
	jnz loc_451257

loc_450F20:
	cmp dword [esi+0BCh], 0A0000h
	jle loc_450F31
	mov ebp, 10000h

loc_450F31:
	test edi, edi
	jl loc_451265

loc_450F39:
	test ebx, ebx
	jl loc_45126C

loc_450F41:
	test ebp, ebp
	jl loc_451273

loc_450F49:
	test edi, edi
	jz loc_45127A

loc_450F51:
	mov edx, [esi+108h]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0C4h]
	imul edx, eax
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0C8h]
	imul edx, ecx
	mov [esp+30h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0CCh]
	imul edx, ecx
	mov [esp+34h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+110h]
	mov [esp+38h], eax
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0DCh]
	imul edx, eax
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0E0h]
	imul edx, ecx
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0E4h]
	imul edx, ecx
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+110h]
	add edx, edx
	mov [esp+8], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0DCh]
	imul edx, eax
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0E0h]
	imul edx, ecx
	mov [esp+0Ch], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+0E4h]
	imul edx, ecx
	mov [esp+10h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+14h], eax
	cmp ebp, 0A0000h
	jle loc_4510C1
	mov ebp, 0A0000h

loc_4510C1:
	cmp edi, 0A0000h
	jle loc_4510CE
	mov edi, 0A0000h

loc_4510CE:
	test edi, edi
	jz loc_4512F7
	mov eax, [esp+3Ch]
	add eax, [esp+30h]
	mov ecx, [esp+34h]
	mov [esp+18h], eax
	mov eax, [esp+40h]
	add eax, ecx
	mov edx, [esp+38h]
	mov [esp+1Ch], eax
	mov eax, [esp+44h]
	add eax, edx
	mov ecx, [esp+18h]
	mov [esp+20h], eax
	mov eax, [esp+0Ch]
	mov edx, [esp+1Ch]
	add ecx, eax
	mov eax, [esp+10h]
	mov [esp+18h], ecx
	mov ecx, [esp+20h]
	add edx, eax
	mov eax, [esp+14h]
	mov [esp+1Ch], edx
	mov edx, [esp+30h]
	add ecx, eax
	mov eax, [esp+3Ch]
	mov [esp+20h], ecx
	sub eax, edx
	mov ecx, [esp+34h]
	mov [esp+24h], eax
	mov eax, [esp+40h]
	sub eax, ecx
	mov edx, [esp+38h]
	mov [esp+28h], eax
	mov eax, [esp+44h]
	sub eax, edx
	mov ecx, [esp+24h]
	mov [esp+2Ch], eax
	mov eax, [esp+0Ch]
	mov edx, [esp+28h]
	add ecx, eax
	mov eax, [esp+10h]
	mov [esp+24h], ecx
	mov ecx, [esp+2Ch]
	add edx, eax
	add ecx, [esp+14h]
	mov [esp+28h], edx
	mov [esp+2Ch], ecx
	test ebx, ebx
	jz loc_451194
	mov ebx, [esp+50h]
	lea ecx, [esp+24h]
	mov eax, esi
	push ebx
	xor edx, edx
	lea ebx, [esp+1Ch]
	call sub_451500

loc_451194:
	mov eax, [esp+4Ch]
	test eax, eax
	jle loc_4512AD

loc_4511A0:
	cmp dword [dword_512208], 1
	jnz loc_4512C6
	test eax, eax
	jz loc_4512B4

loc_4511B5:
	push 0
	mov ecx, 2
	push edi
	mov edi, [esp+5Ch]
	mov ebx, 6
	push edi
	mov eax, esi
	mov edx, ecx

loc_4511CB:
	call sub_452E80
	or byte [esi+360h], 1

loc_4511D7:
	test ebp, ebp
	jnz loc_451377
	test byte [esi+32Ch], 2
	jz loc_451226
	test byte [esi+1F4h], 10h
	jnz loc_45121F
	mov ecx, 1
	mov edx, 2
	lea ebx, [esi+348h]
	mov eax, [esi]
	call sub_475BA0
	mov ecx, 1
	mov edx, 3
	lea ebx, [esi+354h]
	mov eax, [esi]
	call sub_475BA0

loc_45121F:
	sub dword [esi+32Ch], 2

loc_451226:
	test byte [esi+360h], 2
	jnz loc_4514D0

loc_451233:
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45123D:
	neg eax
	jmp loc_450EDD

loc_451244:
	xor edi, edi
	xor ebp, ebp
	xor ebx, ebx
	mov [esp+4Ch], edi
	mov [esp+48h], edi
	jmp loc_450EFE

loc_451257:
	cmp edx, 5
	jz loc_450F20
	jmp loc_450F31

loc_451265:
	xor edi, edi
	jmp loc_450F39

loc_45126C:
	xor ebx, ebx
	jmp loc_450F41

loc_451273:
	xor ebp, ebp
	jmp loc_450F49

loc_45127A:
	test ebp, ebp
	jnz loc_450F51
	test byte [esi+32Ch], 1
	jz loc_451293
	test edi, edi
	jz loc_450F51

loc_451293:
	test byte [esi+32Ch], 2
	jz loc_4510CE
	test ebp, ebp
	jz loc_450F51
	jmp loc_4510CE

loc_4512AD:
	xor eax, eax
	jmp loc_4511A0

loc_4512B4:
	test byte [esi+1F4h], 4
	jnz loc_4511B5
	jmp loc_4511D7

loc_4512C6:
	test eax, eax
	jnz loc_4512DC
	mov eax, dword [dword_51220C]
	cmp esi, dword dword_511D08[eax*4]
	jnz loc_4511D7

loc_4512DC:
	push 0
	mov ebx, [esp+58h]
	push edi
	mov ecx, 2
	mov eax, esi
	push ebx
	mov edx, ecx
	mov ebx, 6
	jmp loc_4511CB

loc_4512F7:
	test byte [esi+32Ch], 1
	jz loc_451340
	mov edx, [esi+32Ch]
	dec edx
	mov bl, [esi+1F4h]
	mov [esi+32Ch], edx
	test bl, 10h
	jnz loc_451340
	mov ecx, 1
	lea ebx, [esi+330h]
	mov eax, [esi]
	xor edx, edx
	call sub_475BA0
	mov ecx, 1
	lea ebx, [esi+33Ch]
	mov eax, [esi]
	mov edx, ecx
	call sub_475BA0

loc_451340:
	test byte [esi+360h], 1
	jz loc_4511D7
	push 0
	mov ecx, [esp+58h]
	push 0
	mov ebx, 6
	mov edx, 3
	push ecx
	mov eax, esi
	mov ecx, 2
	call sub_452E80
	dec dword [esi+360h]
	jmp loc_4511D7

loc_451377:
	mov eax, [esp+3Ch]
	add eax, [esp+30h]
	mov ebx, [esp+34h]
	mov [esp+18h], eax
	mov eax, [esp+40h]
	mov edi, [esp+38h]
	add eax, ebx
	mov edx, [esp+18h]
	mov [esp+1Ch], eax
	mov eax, [esp+44h]
	mov ecx, [esp+1Ch]
	add eax, edi
	mov edi, [esp+30h]
	mov [esp+20h], eax
	mov eax, [esp]
	mov ebx, [esp+20h]
	sub edx, eax
	mov eax, [esp+4]
	mov [esp+18h], edx
	sub ecx, eax
	mov eax, [esp+8]
	mov edx, [esp+34h]
	sub ebx, eax
	mov eax, [esp+3Ch]
	mov [esp+1Ch], ecx
	sub eax, edi
	mov ecx, [esp+38h]
	mov [esp+24h], eax
	mov eax, [esp+40h]
	mov [esp+20h], ebx
	sub eax, edx
	mov ebx, [esp+24h]
	mov [esp+28h], eax
	mov eax, [esp+44h]
	mov edi, [esp+28h]
	sub eax, ecx
	mov ecx, [esp+50h]
	mov [esp+2Ch], eax
	mov eax, [esp]
	mov edx, [esp+2Ch]
	push ecx
	sub ebx, eax
	mov eax, [esp+8]
	lea ecx, [esp+28h]
	sub edi, eax
	mov eax, [esp+0Ch]
	mov [esp+28h], ebx
	sub edx, eax
	lea ebx, [esp+1Ch]
	mov [esp+30h], edx
	mov eax, esi
	mov edx, 3
	mov [esp+2Ch], edi
	call sub_451500
	mov ebx, [esp+48h]
	test ebx, ebx
	jle loc_451487
	mov eax, ebx

loc_45143E:
	cmp dword [dword_512208], 1
	jnz loc_45148B
	test eax, eax
	jnz loc_451458
	test byte [esi+1F4h], 4
	jz loc_451233

loc_451458:
	push 0
	mov ebx, [esp+58h]
	push ebp
	mov ecx, 2
	mov edx, 4
	push ebx
	mov eax, esi
	mov ebx, 8
	call sub_452E80
	or byte [esi+360h], 2
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_451487:
	xor eax, eax
	jmp loc_45143E

loc_45148B:
	test eax, eax
	jnz loc_4514A1
	mov eax, dword [dword_51220C]
	cmp esi, dword dword_511D08[eax*4]
	jnz loc_451233

loc_4514A1:
	push 0
	mov ecx, [esp+58h]
	push ebp
	mov ebx, 8
	mov edx, 4
	push ecx
	mov eax, esi
	mov ecx, 2
	call sub_452E80
	or byte [esi+360h], 2
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4514D0:
	push 0
	mov eax, [esp+58h]
	push 0
	mov ecx, 2
	mov ebx, 8
	push eax
	mov edx, 5
	mov eax, esi
	call sub_452E80
	sub dword [esi+360h], 2
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_450E50 endp

sub_451500: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov [esp], ebx
	mov [esp+4], ecx
	mov ebx, ebp
	mov esi, [eax]
	mov eax, [esp+18h]
	add ebx, 0A8h
	shl eax, 2
	mov edi, dword dword_4D60F0[eax]
	cmp edx, 2
	jl loc_45165F
	cmp dword dword_4D5FF0[eax], 0
	jnz loc_45159F
	test byte [ebp+32Ch], 2
	jz loc_45157F
	test byte [ebp+1F4h], 10h
	jnz loc_451578
	mov ecx, 1
	mov edx, 2
	lea ebx, [ebp+348h]
	mov eax, esi
	call sub_475BA0
	mov ecx, 1
	mov edx, 3
	lea ebx, [ebp+354h]
	mov eax, esi
	call sub_475BA0

loc_451578:
	sub dword [ebp+32Ch], 2

loc_45157F:
	mov eax, [esp+18h]
	mov edx, [ebp+0BCh]
	cmp edx, dword dword_4D5FB0[eax*4]
	jl loc_45162B

loc_451596:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4

loc_45159F:
	mov ecx, 1
	mov edx, 2
	mov edi, ebx
	push ebx
	mov eax, esi
	mov ebx, [esp+4]
	call sub_475E00
	mov ecx, 1
	mov eax, edi
	mov ebx, [esp+4]
	push eax
	mov edx, 3
	mov eax, esi
	call sub_475E00
	test byte [ebp+1F4h], 10h
	jnz loc_4515FB
	mov ebx, [esp]
	mov edx, 2
	mov eax, esi
	xor ecx, ecx
	call sub_475BA0
	mov ebx, [esp+4]
	mov edx, 3
	mov eax, esi
	xor ecx, ecx
	call sub_475BA0

loc_4515FB:
	mov al, [ebp+32Ch]
	mov esi, [esp]
	or al, 2
	lea edi, [ebp+348h]
	mov [ebp+32Ch], al
	movsd
	movsd
	movsd
	mov esi, [esp+4]
	lea edi, [ebp+354h]
	movsd
	movsd
	movsd
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4

loc_45162B:
	mov ebx, [esp]
	add ebp, 0A8h
	mov edx, 2
	push ebp
	mov ecx, edi
	mov eax, esi
	call sub_475E00
	mov ebx, [esp+4]
	mov edx, 3
	push ebp
	mov ecx, edi
	mov eax, esi
	call sub_475E00
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4

loc_45165F:
	cmp dword dword_4D5FF0[eax], 0
	jnz loc_4516F4
	test byte [ebp+32Ch], 1
	jz loc_4516AC
	test byte [ebp+1F4h], 10h
	jnz loc_4516A6
	mov ecx, 1
	lea ebx, [ebp+330h]
	mov eax, esi
	xor edx, edx
	call sub_475BA0
	mov ecx, 1
	lea ebx, [ebp+33Ch]
	mov eax, esi
	mov edx, ecx
	call sub_475BA0

loc_4516A6:
	dec dword [ebp+32Ch]

loc_4516AC:
	mov edx, [esp+18h]
	mov eax, [ebp+0BCh]
	cmp eax, dword dword_4D5FB0[edx*4]
	jge loc_451596
	mov ebx, [esp]
	add ebp, 0A8h
	mov ecx, edi
	push ebp
	mov eax, esi
	xor edx, edx
	call sub_475E00
	mov ebx, [esp+4]
	mov edx, 1
	push ebp
	mov ecx, edi
	mov eax, esi
	call sub_475E00
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4516F4:
	mov ecx, 1
	mov edi, ebx
	push ebx
	mov eax, esi
	xor edx, edx
	mov ebx, [esp+4]
	call sub_475E00
	mov ecx, 1
	mov eax, edi
	mov ebx, [esp+4]
	push eax
	mov edx, ecx
	mov eax, esi
	call sub_475E00
	test byte [ebp+1F4h], 10h
	jnz loc_451747
	mov ebx, [esp]
	mov eax, esi
	xor ecx, ecx
	xor edx, edx
	call sub_475BA0
	mov ebx, [esp+4]
	mov edx, 1
	mov eax, esi
	xor ecx, ecx
	call sub_475BA0

loc_451747:
	mov bl, [ebp+32Ch]
	mov esi, [esp]
	or bl, 1
	lea edi, [ebp+330h]
	mov [ebp+32Ch], bl
	movsd
	movsd
	movsd
	mov esi, [esp+4]
	lea edi, [ebp+33Ch]
	movsd
	movsd
	movsd
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_451500 endp

sub_451780: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	cmp dword [eax+58Ch], 0
	jnz loc_451AFC

loc_451798:
	cmp dword [esi+160h], 0
	jz loc_451913
	mov edi, [esi+168h]
	mov ah, [esi+1F4h]
	and edi, 0EFFF0000h
	test ah, 40h
	jz loc_451B23
	cmp dword [esi+164h], 0
	jnz loc_451B23

loc_4517CD:
	cmp edi, 40000h
	jnz loc_451853
	mov edx, [esi+0BCh]
	cmp edx, 180000h
	jle loc_451C83
	lea ebx, [esi+170h]
	mov ebp, [esi+15Ch]
	lea eax, [esi+0A8h]
	cmp ebp, 9999h
	jge loc_451C6F
	push eax
	mov eax, [esi+168h]
	and eax, 0FFh
	xor edx, edx
	mov ecx, dword dword_4D6170[eax*4]
	mov eax, [esi]
	call sub_475E00
	mov eax, [esi+168h]
	and eax, 0FFh
	cmp dword dword_4D6170[eax*4], 4
	jnz loc_451853
	push 0
	push 0
	mov ecx, 1
	mov ebx, 0FFFFFFFFh
	push 0Ch
	mov eax, esi
	mov edx, ecx
	call sub_452E80

loc_451853:
	cmp dword [esi+160h], 0A0000h
	jle loc_4518F5
	mov ebx, [esi+588h]
	mov eax, [esi+580h]
	cmp eax, ebx
	jle loc_451CBB

loc_451877:
	cmp eax, 1Eh
	jg loc_4518F5
	mov eax, edi
	sar eax, 10h
	mov eax, dword dword_4D61B0[eax*4]
	mov [esp], eax
	cmp edi, 40000h
	jnz loc_451CC2
	mov eax, [esi+168h]
	and eax, 0FFh
	mov ebp, dword dword_4D6190[eax*4]
	call rand_
	mov edx, eax
	mov ecx, 8
	sar edx, 1Fh
	idiv ecx
	mov ebx, 23h
	add edx, 10h
	mov eax, esi
	call sub_451FC0

loc_4518C9:
	mov eax, [esi+160h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	push 0
	push eax
	mov ecx, [esp+8]
	mov ebx, 0FFFFFFFFh
	push ebp
	mov edx, 1
	mov eax, esi
	call sub_452E80

loc_4518F5:
	mov dword [esi+164h], 0
	mov dword [esi+168h], 0
	mov dword [esi+160h], 0

loc_451913:
	cmp dword [esi+578h], 0
	jle loc_451A77
	cmp dword [esi+100h], 1999h
	jge loc_451DEA

loc_451930:
	dec dword [esi+578h]

loc_451936:
	cmp dword [esi+15Ch], 4CCCh
	jge loc_451E17
	cmp dword [esi+100h], 8000h
	jle loc_451E17
	mov eax, [esi+0E8h]
	test eax, eax
	jle loc_451E09

loc_451964:
	mov edx, [esi+0F0h]
	test edx, edx
	jle loc_451E10

loc_451972:
	lea ecx, [eax+edx]
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	cmp ecx, dword dword_511D70[eax*4]
	jge loc_4519EC
	cmp dword [esi+17Ch], 0
	jnz loc_4519EC
	mov eax, [esi+0E8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, [esi+0E8h]
	sub edx, eax
	mov eax, [esi+0F0h]
	mov [esi+0E8h], edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ebp, [esi+578h]
	sub ebp, 8
	mov ecx, [esi+0F0h]
	mov [esi+578h], ebp
	sub ecx, eax
	mov [esi+0F0h], ecx

loc_4519EC:
	mov ebx, [esi+0ACh]
	test ebx, ebx
	jle loc_451E9C
	mov eax, ebx

loc_4519FC:
	add eax, [esi+0BCh]
	cmp eax, 10000h
	jge loc_451A19
	cmp dword [esi+17Ch], 0
	jnz loc_451A19
	sub dword [esi+578h], 8

loc_451A19:
	cmp dword [esi+578h], 0
	jle loc_451A57
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, [esi+578h]
	cmp edx, dword dword_511D64[eax*4]
	jge loc_451A77
	cmp byte [esi+2D4h], 0C8h
	jbe loc_451A77
	cmp dword [esi+17Ch], 0
	jnz loc_451A77

loc_451A57:
	test byte [esi+1F4h], 10h
	jnz loc_451EA5
	mov eax, esi
	xor edx, edx
	call sub_4523F0

loc_451A6D:
	mov dword [esi+578h], 0

loc_451A77:
	mov edi, [esi+580h]
	test edi, edi
	jle loc_451A8A
	lea ebp, [edi-1]
	mov [esi+580h], ebp

loc_451A8A:
	mov eax, [esi+588h]
	test eax, eax
	jle loc_451A9D
	lea edx, [eax-1]
	mov [esi+588h], edx

loc_451A9D:
	mov edx, [esi+0D0h]
	mov eax, [esi+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+0D4h]
	mov eax, [esi+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0D8h]
	add ecx, eax
	mov eax, [esi+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	cmp dword [esi+578h], 0
	jle loc_451EB4

loc_451AF2:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_451AFC:
	add eax, 9Ch
	call sub_475DA0
	cmp word [esi+14Ch], 0
	ja loc_451798
	mov dword [esi+58Ch], 0
	jmp loc_451798

loc_451B23:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add edx, eax
	shl edx, 2
	mov eax, [esi+160h]
	cmp eax, dword dword_511D48[edx]
	jle loc_4517CD
	mov eax, esi
	call sub_46A3B0
	mov eax, [esi+27Ch]
	inc eax
	mov edx, [esi+15Ch]
	mov [esi+27Ch], eax
	cmp edx, 10000h
	jge loc_451BC0
	mov edx, 1
	mov ecx, dword [dword_512204]
	mov eax, edx
	test ecx, ecx
	jz loc_451B8F
	test byte [esi+1F4h], 40h
	jnz loc_451B8F
	mov edx, 2
	mov eax, edx

loc_451B8F:
	imul edx, [esi+0ECh]
	mov ebp, [esi+0F0h]
	add ebp, edx
	imul eax, [esi+0ECh]
	mov ecx, [esi+0E8h]
	mov [esi+0F0h], ebp
	add ecx, eax
	mov eax, esi
	mov [esi+0E8h], ecx
	call sub_4540A0

loc_451BC0:
	lea eax, [esi+9Ch]
	call sub_475DA0
	mov dword [esi+58Ch], 1
	mov dword [esi+324h], 0
	mov ebx, [esi+578h]
	mov dword [esi+328h], 0
	test ebx, ebx
	jg loc_4517CD
	cmp dword [esi+17Ch], 0
	jz loc_451C0F
	mov dword [esi+578h], 100h
	jmp loc_4517CD

loc_451C0F:
	mov eax, dword [dword_512204]
	cmp eax, 1
	jnz loc_451C49
	test byte [esi+1F4h], 8
	jz loc_451C49
	mov edx, eax
	shl eax, 3
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D60[eax*4]
	lea eax, 0[edx*4]
	sub eax, edx
	mov [esi+578h], eax
	jmp loc_4517CD

loc_451C49:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov eax, dword dword_511D60[eax*4]
	mov [esi+578h], eax
	jmp loc_4517CD

loc_451C6F:
	mov ecx, 6
	push eax
	xor edx, edx
	mov eax, [esi]
	call sub_475E00
	jmp loc_451853

loc_451C83:
	cmp edx, 0F0000h
	jg loc_451C9B
	cmp dword [esi+160h], 0F0000h
	jle loc_451853

loc_451C9B:
	mov ecx, 1
	lea eax, [esi+0A8h]
	xor edx, edx
	push eax
	lea ebx, [esi+170h]
	mov eax, [esi]
	call sub_475E00
	jmp loc_451853

loc_451CBB:
	mov eax, ebx
	jmp loc_451877

loc_451CC2:
	cmp edi, 30000h
	jg loc_451D55
	mov ebp, [esi+168h]
	and ebp, 0FFh
	mov ebp, dword dword_4D6130[ebp*4]
	cmp edi, 20000h
	jnz loc_451D38
	call rand_
	mov edx, eax
	mov ecx, 8
	sar edx, 1Fh
	idiv ecx
	mov ebx, 23h
	add edx, 10h
	mov eax, esi

loc_451D04:
	call sub_451FC0
	cmp edi, 30000h
	jnz loc_4518C9
	cmp dword [esi+100h], 0E666h
	jge loc_451D28
	mov dword [esp], 1

loc_451D28:
	lea eax, [esi+170h]
	call sub_475DA0
	jmp loc_4518C9

loc_451D38:
	call rand_
	mov edx, eax
	mov ecx, 8
	sar edx, 1Fh
	idiv ecx
	lea ebx, [edx+10h]
	mov eax, esi
	mov edx, 23h
	jmp loc_451D04

loc_451D55:
	mov ebp, [esi+168h]
	call rand_
	mov edx, eax
	mov ecx, 8
	sar edx, 1Fh
	idiv ecx
	lea ebx, [edx+10h]
	mov eax, esi
	mov edx, 23h
	and ebp, 0FFh
	call sub_451FC0
	cmp edi, 50000h
	jnz loc_4518C9
	test byte [esi+1F4h], 40h
	jz loc_451DD4

loc_451D96:
	mov ecx, 6

loc_451D9B:
	lea eax, [esi+0A8h]
	xor edx, edx
	push eax
	lea ebx, [esi+170h]
	mov eax, [esi]
	call sub_475E00
	mov ecx, 6
	lea eax, [esi+0A8h]
	mov edx, 1
	push eax
	lea ebx, [esi+170h]
	mov eax, [esi]
	call sub_475E00
	jmp loc_4518C9

loc_451DD4:
	mov eax, [esi+164h]
	test byte [eax+1F4h], 40h
	jnz loc_451D96
	mov ecx, 4
	jmp loc_451D9B

loc_451DEA:
	cmp dword [esi+17Ch], 0
	jnz loc_451930
	test byte [esi+1F4h], 4
	jz loc_451930
	jmp loc_451936

loc_451E09:
	neg eax
	jmp loc_451964

loc_451E10:
	neg edx
	jmp loc_451972

loc_451E17:
	cmp dword [esi+15Ch], 50000h
	jge loc_4519EC
	cmp dword [esi+17Ch], 0
	jnz loc_4519EC
	mov eax, [esi+0E8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebx, [esi+0E8h]
	sub ebx, eax
	mov eax, [esi+0ECh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edi, [esi+0ECh]
	sub edi, eax
	mov eax, [esi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov [esi+0E8h], ebx
	mov ebp, [esi+0F0h]
	mov [esi+0ECh], edi
	sub ebp, eax
	mov [esi+0F0h], ebp
	jmp loc_4519EC

loc_451E9C:
	mov eax, ebx
	neg eax
	jmp loc_4519FC

loc_451EA5:
	mov dword [esi+58Ch], 0
	jmp loc_451A6D

loc_451EB4:
	cmp eax, 0C000h
	jge loc_451F0A

loc_451EBB:
	cmp dword [esi+17Ch], 0
	jz loc_451F2C
	mov dword [esi+578h], 100h

loc_451ECE:
	cmp word [esi+14Ch], 0
	jz loc_451AF2
	mov ebx, [esi+0F0h]
	mov ecx, [esi+0E8h]
	add ebx, 51Eh
	add ecx, 28Fh
	mov [esi+0F0h], ebx
	mov [esi+0E8h], ecx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_451F0A:
	mov ebx, [esi+184h]
	test ebx, ebx
	jz loc_451EBB
	cmp ebx, 0Eh
	jz loc_451EBB
	cmp dword [esi+17Ch], 0
	jnz loc_451EBB
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_451F2C:
	cmp dword [dword_512204], 1
	jnz loc_451F6D
	test byte [esi+1F4h], 8
	jz loc_451F6D
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D60[eax*4]
	lea eax, 0[edx*4]
	sub eax, edx
	mov [esi+578h], eax
	jmp loc_451ECE

loc_451F6D:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov eax, dword dword_511D60[eax*4]
	mov [esi+578h], eax
	jmp loc_451ECE
;sub_451780 endp

sub_451FA0: ;SUBROUTINE
	mov dword [eax+17Ch], 0
	mov dword [eax+58Ch], 0
	ret
;sub_451FA0 endp

sub_451FC0: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov [eax+580h], edx
	mov edx, [eax+160h]
	sub edx, 0A0000h
	add edx, edx
	cmp edx, 2D0000h
	jle loc_451FE5
	mov edx, 2D0000h

loc_451FE5:
	mov [ecx+57Ch], edx
	call rand_
	mov edx, eax
	mov esi, 100h
	sar edx, 1Fh
	idiv esi
	cmp edx, 80h
	jle loc_45200A
	neg dword [ecx+57Ch]

loc_45200A:
	mov edx, [ecx+57Ch]
	mov [ecx+588h], ebx
	mov [ecx+584h], edx
	call rand_
	mov edx, eax
	mov ebx, 100h
	sar edx, 1Fh
	idiv ebx
	cmp edx, 80h
	jg loc_452038
	pop esi
	pop ecx
	ret

loc_452038:
	neg dword [ecx+584h]
	pop esi
	pop ecx
	ret
;sub_451FC0 endp

sub_452050: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ecx, eax
	cmp byte [eax+90h], 0
	jbe loc_452138
	dec byte [ecx+90h]
	cmp dword [ecx+0BCh], 140000h
	jle loc_452138
	mov eax, [ecx+110h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A0h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A4h]
	imul edx, ebx
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A8h]
	imul edx, ebx
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ebx, [esp]
	mov [esp+8], eax
	mov eax, [ecx+9Ch]
	sub eax, ebx
	mov [esp+0Ch], eax
	mov esi, [esp+4]
	mov eax, [ecx+0A0h]
	sub eax, esi
	mov [esp+10h], eax
	mov edi, [esp+8]
	mov eax, [ecx+0A4h]
	sub eax, edi
	mov [esp+14h], eax
	mov ebp, [ecx+184h]
	cmp ebp, 1
	jz loc_45211F
	cmp ebp, 4
	jnz loc_452142

loc_45211F:
	lea ebx, [esp+0Ch]
	lea eax, [ecx+0A8h]
	xor edx, edx
	push eax
	mov eax, [ecx]
	mov ecx, 5
	call sub_475E00

loc_452138:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_452142:
	lea ebx, [esp+0Ch]
	lea eax, [ecx+0A8h]
	xor edx, edx
	push eax
	mov eax, [ecx]
	mov ecx, 6
	call sub_475E00
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_452050 endp

sub_452170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	mov edi, esp
	mov esi, (dword_44F050+0Ch)
	mov edx, dword [dword_512228]
	movsd
	movsd
	movsd
	test edx, edx
	jz loc_45239A
	mov eax, 0FFFFFFFFh

loc_452198:
	mov ecx, [ebp+2E8h]
	mov ebx, eax
	test ecx, ecx
	jnz loc_452390
	cmp dword [ebp+280h], 2
	jz loc_452390
	cmp dword [dword_540F44], 0
	jz loc_452390
	test byte [ebp+1F4h], 4
	jz loc_452390
	cmp dword [ebp+17Ch], 0
	jnz loc_452390
	mov eax, ebp
	mov [ebp+58Ch], ecx
	call sub_4784D0
	test eax, eax
	jz loc_4521F4
	xor eax, eax

loc_4521F4:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D6C[eax*4]
	imul edx, ebx
	mov ecx, [ebp+14h]
	lea eax, [ecx+edx]
	test edx, edx
	jl loc_4523A4
	mov ecx, dword [dword_5118A0]
	cmp eax, ecx
	jl loc_45222C
	sub eax, ecx

loc_45222C:
	mov esi, eax
	mov edi, esi
	lea eax, 0[esi*8]
	add eax, esi
	shl eax, 2
	mov [esp+0Ch], eax
	mov edx, [esp+0Ch]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	mov ecx, edx
	xor edx, edx
	sar ecx, 4
	mov dl, [eax+20h]
	and ecx, 0Fh
	shl edx, 0Fh
	imul edx, ecx
	xor ecx, ecx
	mov cl, [eax+21h]
	mov al, [eax+1Fh]
	shl ecx, 0Fh
	and al, 0Fh
	and eax, 0FFh
	imul eax, ecx
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, esp
	mov ecx, dword [dword_512228]
	mov [esp], eax
	mov edx, esi
	mov eax, ebp
	call sub_4624B0
	mov eax, [esp+0Ch]
	xor esi, esi
	mov [esp+10h], eax

loc_4522A1:
	mov ecx, [ebp+184h]
	test ecx, ecx
	jnz loc_4523B7

loc_4522AF:
	mov edx, [esp+10h]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor ecx, ecx
	xor ebx, ebx
	mov cl, [eax+1Fh]
	mov bl, [eax+20h]
	sar ecx, 4
	shl ebx, 0Fh
	and ecx, 0Fh
	imul ecx, ebx
	xor ebx, ebx
	mov bl, [eax+21h]
	mov al, [eax+1Fh]
	shl ebx, 0Fh
	and al, 0Fh
	and eax, 0FFh
	imul eax, ebx
	cmp ecx, eax
	jle loc_4523DC
	sub dword [esp], 10000h

loc_4522F4:
	mov ebx, esp
	mov ecx, dword [dword_512228]
	mov edx, edi
	mov eax, ebp
	inc esi
	call sub_4624B0
	cmp esi, 14h
	jle loc_4522A1
	mov ecx, dword [dword_512228]
	mov edx, edi
	xor ebx, ebx
	mov eax, ebp
	mov [esp], ebx
	mov ebx, esp
	call sub_4624B0

loc_452321:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D74[eax*4]
	mov eax, ebp
	call sub_449AA0
	test eax, eax
	jz loc_452349
	sar edx, 1

loc_452349:
	mov dword [ebp+0A8h], 0
	mov dword [ebp+0ACh], 0
	mov esi, [ebp+0A0h]
	mov dword [ebp+0B0h], 0
	add esi, edx
	mov eax, ebp
	mov [ebp+0A0h], esi
	call sub_452AC0
	mov dword [ebp+16Ch], 30h
	mov dword [ebp+2E8h], 30h

loc_452390:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45239A:
	mov eax, 1
	jmp loc_452198

loc_4523A4:
	test eax, eax
	jge loc_45222C
	add eax, dword [dword_5118A0]
	jmp loc_45222C

loc_4523B7:
	cmp ecx, 0Eh
	jz loc_4522AF
	test byte [ebp+180h], 80h
	jnz loc_4522AF
	cmp dword [ebp+18h], 0
	jz loc_4522AF
	jmp loc_452321

loc_4523DC:
	inc word [esp+2]
	jmp loc_4522F4
;sub_452170 endp

sub_4523F0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ebp, eax
	mov [esp+1Ch], edx
	mov edi, esp
	mov esi, dword_44F050
	mov edx, dword [dword_512228]
	movsd
	movsd
	movsd
	test edx, edx
	jz loc_452799
	mov eax, 0FFFFFFFFh

loc_45241A:
	mov [esp+24h], eax
	mov eax, ebp
	mov dword [ebp+58Ch], 0
	call sub_4784D0
	test eax, eax
	jz loc_45243A
	xor eax, eax

loc_45243A:
	cmp dword [esp+1Ch], 0
	jz loc_4527A3

loc_452445:
	push ebx
	mov ebx, [ebp+17Ch]
	mov ecx, [ebp+14h]
	test ebx, ebx
	jz loc_452455
	mov ecx, ebx

loc_452455:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov dword [ebp+17Ch], 0
	mov esi, [esp+28h]
	mov edx, dword dword_511D6C[eax*4]
	imul edx, esi
	lea eax, [ecx+edx]
	test edx, edx
	jl loc_45286A
	mov edx, dword [dword_5118A0]
	cmp eax, edx
	jl loc_452498
	sub eax, edx

loc_452498:
	mov edi, eax
	mov ebx, dword [dword_512204]
	mov esi, edi
	test ebx, ebx
	jz loc_45287D
	lea eax, 0[edi*8]
	add eax, edi
	shl eax, 2
	mov [esp+1Ch], eax
	mov edx, [esp+1Ch]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	mov ecx, edx
	xor edx, edx
	sar ecx, 4
	mov dl, [eax+20h]
	and ecx, 0Fh
	shl edx, 0Fh
	imul ecx, edx
	xor edx, edx
	mov dl, [eax+21h]
	mov al, [eax+1Fh]
	shl edx, 0Fh
	and al, 0Fh
	and eax, 0FFh
	imul edx, eax
	sub edx, ecx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebx, [esp+4]
	mov ecx, dword [dword_512228]
	mov [esp+4], eax
	mov edx, edi
	mov eax, ebp
	call sub_4624B0
	mov eax, [esp+1Ch]
	xor edi, edi
	mov [esp+2Ch], eax

loc_45251E:
	mov edx, [ebp+184h]
	test edx, edx
	jnz loc_452A2E

loc_45252C:
	mov edx, [esp+2Ch]
	mov eax, dword [dword_5118A4]
	add eax, edx
	xor ecx, ecx
	mov cl, [eax+1Fh]
	mov ebx, ecx
	xor ecx, ecx
	sar ebx, 4
	mov cl, [eax+20h]
	and ebx, 0Fh
	shl ecx, 0Fh
	imul ecx, ebx
	xor ebx, ebx
	mov bl, [eax+21h]
	mov al, [eax+1Fh]
	shl ebx, 0Fh
	and al, 0Fh
	and eax, 0FFh
	imul eax, ebx
	cmp ecx, eax
	jle loc_452A53
	sub dword [esp+4], 10000h

loc_452574:
	lea ebx, [esp+4]
	mov ecx, dword [dword_512228]
	mov edx, esi
	mov eax, ebp
	inc edi
	call sub_4624B0
	cmp edi, 14h
	jle loc_45251E
	mov ecx, dword [dword_512228]
	mov edx, esi
	xor ebx, ebx
	mov eax, ebp
	mov [esp+4], ebx
	lea ebx, [esp+4]

loc_4525A1:
	call sub_4624B0

loc_4525A6:
	cmp dword [esp+20h], 0
	jnz loc_4525DB
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D74[eax*4]
	mov eax, ebp
	call sub_449AA0
	test eax, eax
	jz loc_4525D5
	sar edx, 1

loc_4525D5:
	add [ebp+0A0h], edx

loc_4525DB:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov ebx, dword dword_511D78[eax*4]
	mov eax, [esp+28h]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	test eax, eax
	jl loc_452A5D
	mov edx, [ebp+14h]
	mov ecx, dword [dword_5118A0]
	add eax, edx
	cmp eax, ecx
	jl loc_45261C
	sub eax, ecx

loc_45261C:
	mov edx, eax
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esp+10h], edx
	mov edx, [eax+0Dh]
	mov eax, [eax+0Eh]
	sar edx, 18h
	sar eax, 18h
	shl edx, 9
	shl eax, 9
	mov [esp+14h], edx
	mov [esp+18h], eax
	mov edx, [ebp+130h]
	mov eax, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+134h]
	mov eax, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+138h]
	add ecx, eax
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	test eax, eax
	jle loc_452A73
	mov eax, [esp+10h]
	mov edx, [ebp+130h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+134h]
	mov eax, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+138h]
	add ecx, eax
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax

loc_4526E4:
	mov edx, ecx
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0DCh]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, ecx
	mov [ebp+0A8h], eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0E0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, ecx
	mov [ebp+0ACh], eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0E4h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ebp+0B0h], eax
	mov eax, ebp
	call sub_452AC0
	pop ebx
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_452799:
	mov eax, 1
	jmp loc_45241A

loc_4527A3:
	mov edx, [ebp+0D0h]
	mov eax, [ebp+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0D4h]
	mov eax, [ebp+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0D8h]
	add ecx, eax
	mov eax, [ebp+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	cmp eax, 0C000h
	jle loc_452445
	cmp dword [ebp+0E8h], 10000h
	jge loc_452445
	cmp dword [ebp+0F0h], 10000h
	jge loc_452445
	mov edi, [ebp+184h]
	cmp edi, 0Eh
	jz loc_452445
	test edi, edi
	jz loc_452445
	cmp dword [ebp+17Ch], 0
	jnz loc_452445
	cmp word [ebp+14Ch], 5
	ja loc_452445
	cmp dword [ebp+15Ch], 9999h
	jge loc_452445
	mov dword [ebp+58Ch], 0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_45286A:
	test eax, eax
	jge loc_452498
	add eax, dword [dword_5118A0]
	jmp loc_452498

loc_45287D:
	mov ah, [ebp+1F4h]
	mov ecx, 8
	test ah, 4
	jnz loc_452892
	mov ecx, 0FFFFFFF8h

loc_452892:
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov ebx, [esp+28h]
	imul ecx, ebx
	shl eax, 3
	lea esi, [eax+ecx]
	mov eax, [ebp+1E8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	imul eax, ebx
	add esi, eax
	mov ecx, dword [dword_5118A0]
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv ecx
	mov esi, edx
	test edx, edx
	jl loc_4529BC

loc_4528DB:
	mov eax, [ebp+1E8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ecx, [eax+eax]
	lea eax, 0[esi*8]
	add eax, esi
	mov ebx, [ebp+1E8h]
	shl eax, 2
	cmp ecx, ebx
	jnz loc_4529C3
	mov edx, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+1Fh]
	sar edx, 4
	mov al, [eax+20h]
	and edx, 0Fh
	mov ecx, eax
	and ecx, 0FFh
	shl ecx, 0Fh
	imul ecx, edx
	mov eax, [ebp+108h]
	mov edx, 18000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub eax, ecx
	mov [esp+4], eax
	mov dword [esp+24h], 1

loc_45294E:
	lea ebx, [esp+4]
	mov ecx, dword [dword_512228]
	mov edx, esi
	mov eax, ebp
	call sub_4624B0
	mov eax, [esp+24h]
	shl eax, 10h
	xor edi, edi
	mov [esp+30h], eax

loc_45296E:
	mov eax, [ebp+184h]
	test eax, eax
	jnz loc_452A09

loc_45297C:
	mov eax, [esp+30h]
	mov ebx, [esp+4]
	mov ecx, dword [dword_512228]
	add ebx, eax
	mov edx, esi
	mov [esp+4], ebx
	mov eax, ebp
	lea ebx, [esp+4]
	inc edi
	call sub_4624B0
	cmp edi, 1Eh
	jle loc_45296E
	lea ebx, [esp+4]
	mov ecx, dword [dword_512228]
	mov edx, esi
	xor edi, edi
	mov eax, ebp
	mov [esp+4], edi
	jmp loc_4525A1

loc_4529BC:
	xor esi, edx
	jmp loc_4528DB

loc_4529C3:
	mov edx, dword [dword_5118A4]
	xor ecx, ecx
	mov cl, [edx+eax+21h]
	mov al, [edx+eax+1Fh]
	shl ecx, 0Fh
	and al, 0Fh
	and eax, 0FFh
	imul ecx, eax
	mov edx, 18000h
	mov eax, [ebp+108h]
	mov edi, 0FFFFFFFFh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+24h], edi
	mov [esp+4], ecx
	jmp loc_45294E

loc_452A09:
	cmp eax, 0Eh
	jz loc_45297C
	test byte [ebp+180h], 80h
	jnz loc_45297C
	cmp dword [ebp+18h], 0
	jz loc_45297C
	jmp loc_4525A6

loc_452A2E:
	cmp edx, 0Eh
	jz loc_45252C
	test byte [ebp+180h], 80h
	jnz loc_45252C
	cmp dword [ebp+18h], 0
	jz loc_45252C
	jmp loc_4525A6

loc_452A53:
	inc word [esp+6]
	jmp loc_452574

loc_452A5D:
	add eax, [ebp+14h]
	test eax, eax
	jge loc_45261C
	add eax, dword [dword_5118A0]
	jmp loc_45261C

loc_452A73:
	mov eax, [esp+10h]
	mov edx, [ebp+130h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+134h]
	mov eax, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+138h]
	add ecx, eax
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	neg ecx
	jmp loc_4526E4
;sub_4523F0 endp

sub_452AC0: ;SUBROUTINE
	push ecx
	push edx
	mov dword [eax+0E8h], 0
	mov dword [eax+0ECh], 0
	mov dword [eax+0F0h], 0
	mov dword [eax+2BCh], 0
	mov dword [eax+2C0h], 0
	mov dword [eax+2C4h], 0
	mov dword [eax+2A4h], 0
	mov dword [eax+2A8h], 0
	mov ecx, dword [dword_512204]
	mov dword [eax+2ACh], 0
	lea edx, 0[ecx*8]
	mov dword [eax+2E8h], 0
	sub edx, ecx
	mov word [eax+14Ch], 1
	shl edx, 2
	mov dword [eax+160h], 0
	add edx, ecx
	mov dword [eax+164h], 0
	mov edx, dword dword_511D68[edx*4]
	mov dword [eax+158h], 0
	mov byte [eax+90h], 0
	mov byte [eax+8Eh], 0
	mov dword [eax+58Ch], 0
	mov dword [eax+17Ch], 0
	mov dword [eax+660h], 0
	mov dword [eax+664h], 0
	mov dword [eax+668h], 0
	mov dword [eax+66Ch], 0
	mov dword [eax+670h], 0
	mov [eax+16Ch], edx
	call sub_46A210
	pop edx
	pop ecx
	ret
;sub_452AC0 endp

sub_452BD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, dword [dword_511E34]
	mov edx, eax
	mov ecx, [eax+21Ch]
	mov eax, dword [dword_511E3C]
	mov ecx, [ecx+4]
	mov dword dword_511B48[eax*4], edx
	mov dword dword_511AC8[eax*4], edx
	mov dword dword_511A88[eax*4], edx
	mov dword [edx+1F4h], 0
	mov [edx+1E8h], eax
	mov edi, dword [dword_511E3C]
	mov eax, [edx+21Ch]
	mov dword [edx+1ECh], 0FFFFFFFFh
	inc edi
	mov esi, [eax]
	mov dword [dword_511E3C], edi
	shl esi, 3
	lea edi, [edx+1DCh]
	add esi, aMcf1 ; "MCF1"
	push edi

loc_452C40:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_452C58
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_452C40

loc_452C58:
	pop edi
	test cl, 1
	jnz loc_452D4B

loc_452C62:
	mov ebx, dword [dword_511E34]
	test cl, 2
	jz loc_452CCB
	mov dword dword_511BC8[ebx*4], edx
	or byte [edx+1F4h], 2
	mov eax, dword [dword_511E30]
	mov dword dword_511C48[eax*4], edx
	mov al, [edx+1F4h]
	mov esi, dword [dword_511E30]
	or al, 8
	mov edi, dword [dword_511E44]
	mov [edx+1F4h], al
	mov eax, dword [dword_511E44]
	inc ebx
	inc esi
	mov dword dword_511CC8[eax*4], edx
	inc edi
	mov ah, [edx+1F4h]
	mov dword [dword_511E30], esi
	or ah, 1
	mov dword [dword_511E44], edi
	mov [edx+1F4h], ah

loc_452CCB:
	test cl, 4
	jz loc_452D07
	mov dword dword_511BC8[ebx*4], edx
	or byte [edx+1F4h], 2
	mov eax, dword [dword_511E48]
	mov ebp, dword [dword_511E48]
	mov dword dword_511C08[eax*4], edx
	inc ebx
	mov ah, [edx+1F4h]
	inc ebp
	or ah, 10h
	mov dword [dword_511E48], ebp
	mov [edx+1F4h], ah

loc_452D07:
	test cl, 8
	jz loc_452D39
	mov dword dword_511BC8[ebx*4], edx
	or byte [edx+1F4h], 2
	mov eax, dword [dword_511E38]
	mov dword dword_511B08[eax*4], edx
	or byte [edx+1F4h], 20h
	mov eax, dword [dword_511E38]
	inc eax
	inc ebx
	mov dword [dword_511E38], eax

loc_452D39:
	test cl, 10h
	jnz loc_452D9B
	mov dword [dword_511E34], ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_452D4B:
	mov eax, dword [dword_511E40]
	mov [edx+1ECh], eax
	mov dword dword_511D08[eax*4], edx
	or byte [edx+1F4h], 4
	mov eax, dword [dword_511E44]
	mov dword dword_511CC8[eax*4], edx
	mov al, [edx+1F4h]
	or al, 1
	mov ebp, dword [dword_511E40]
	mov [edx+1F4h], al
	mov eax, dword [dword_511E44]
	inc ebp
	inc eax
	mov dword [dword_511E40], ebp
	mov dword [dword_511E44], eax
	jmp loc_452C62

loc_452D9B:
	mov eax, dword [dword_511E4C]
	mov dword dword_511C88[eax*4], edx
	or byte [edx+1F4h], 40h
	lea edx, [eax+1]
	mov dword [dword_511E4C], edx
	mov dword [dword_511E34], ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_452BD0 endp

sub_452DD0: ;SUBROUTINE
	push ecx
	push edx
	lea ecx, [eax+220h]
	mov dword [ecx], 0
	mov dword [ecx+4], 0
	mov dword [ecx+8], 0
	mov dword [ecx+0Ch], 0
	mov dword [ecx+10h], 0
	mov eax, ecx
	mov dword [ecx+14h], 200h
	lea edx, [ecx+20h]

loc_452E06:
	add eax, 4
	mov dword [eax+34h], 0
	mov dword [eax+14h], 0
	cmp eax, edx
	jnz loc_452E06
	mov dword [ecx+5Ch], 0
	mov dword [ecx+60h], 0
	mov dword [ecx+58h], 0
	pop edx
	pop ecx
	ret
;sub_452DD0 endp

sub_452E40: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_511E44], edx
	mov dword [dword_511E34], edx
	mov dword [dword_511E4C], edx
	mov dword [dword_511E40], edx
	mov dword [dword_511E30], edx
	mov dword [dword_511E48], edx
	mov dword [dword_511E38], edx
	mov dword [dword_511E3C], edx
	pop edx
	ret
;sub_452E40 endp

sub_452E80: ;SUBROUTINE
	push esi
	push edi
	mov edi, edx
	mov esi, ebx
	mov ebx, ecx
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov [eax+edx*8+594h], edi
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov [eax+edx*8+598h], esi
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov [eax+edx*8+59Ch], ebx
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov ecx, [esp+0Ch]
	mov [eax+edx*8+5A0h], ecx
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov ecx, [esp+10h]
	mov [eax+edx*8+5A4h], ecx
	mov ecx, [eax+590h]
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov ecx, [esp+14h]
	mov [eax+edx*8+5A8h], ecx
	inc dword [eax+590h]
	pop edi
	pop esi
	ret 0Ch
;sub_452E80 endp

sub_452F30: ;SUBROUTINE
	push ecx
	mov ecx, [eax+2ECh]
	mov ecx, [ecx+0F0h]
	mov [edx], ecx
	mov eax, [eax+2ECh]
	mov eax, [eax+0F4h]
	mov [ebx], eax
	pop ecx
	ret
;sub_452F30 endp

sub_452F50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 28h
	mov esi, eax
	add eax, 98h
	push eax
	push 1000h
	lea eax, [esp+2Ch]
	push eax
	mov eax, [esi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ecx, eax
	mov eax, [esi+0ECh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ebx, eax
	mov eax, [esi+0E8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov edx, eax
	lea eax, [esp+0Ch]
	call sub_462020
	test eax, eax
	jnz loc_452FBD

loc_452FB5:
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_452FBD:
	lea eax, [esi+0C4h]
	mov edx, esp
	mov ebx, eax
	call sub_49E840
	mov ah, [esi+8Fh]
	dec ah
	mov [esi+8Fh], ah
	test ah, ah
	jbe loc_452FE5
	cmp dword [esp+24h], 0
	jz loc_452FB5

loc_452FE5:
	lea eax, [esi+0C4h]
	call sub_49EBC8
	mov byte [esi+8Fh], 10h
	mov dword [esi+98h], 0
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_452F50 endp

sub_453010: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, eax
	mov edx, [eax+218h]
	mov eax, [eax+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	add [ecx+9Ch], eax
	mov eax, [ecx+0ACh]
	mov edx, [ecx+218h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ebx, [ecx+0A0h]
	mov edx, [ecx+218h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	mov [ecx+0A0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov esi, [ecx+0A4h]
	add esi, eax
	mov eax, [ecx+218h]
	mov [ecx+0A4h], esi
	mov [ecx+94h], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_453010 endp

sub_4530C0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0ACh
	mov ebp, eax
	mov [esp+0A8h], edx
	mov eax, [eax+184h]
	cmp dword dword_4D6030[eax*4], 0
	jz loc_453193
	mov eax, [ebp+24h]
	mov edx, [eax+4]
	mov eax, [eax+2]
	sar edx, 10h
	sar eax, 10h
	add eax, edx
	cmp eax, 0FFFFFFFEh
	jz loc_453200
	mov edx, [ebp+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dx, [eax+1Ah]
	shl edx, 8
	mov ax, [eax+1Ch]
	and eax, 0FFFFh
	shl eax, 8
	cmp edx, eax
	jle loc_453134
	mov eax, edx

loc_453134:
	mov ecx, [ebp+0C0h]
	test ecx, ecx
	jle loc_45319F
	mov edx, ecx

loc_453140:
	sub edx, eax
	test edx, edx
	jle loc_4531AB
	mov edx, [ebp+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dx, [eax+1Ah]
	shl edx, 8
	mov ax, [eax+1Ch]
	and eax, 0FFFFh
	shl eax, 8
	cmp edx, eax
	jle loc_453178
	mov eax, edx

loc_453178:
	mov esi, [ebp+0C0h]
	test esi, esi
	jle loc_4531A5
	mov edx, esi

loc_453184:
	sub edx, eax
	mov eax, edx

loc_453188:
	cmp eax, 30000h
	jg loc_453200

loc_453193:
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45319F:
	mov edx, ecx
	neg edx
	jmp loc_453140

loc_4531A5:
	mov edx, esi
	neg edx
	jmp loc_453184

loc_4531AB:
	mov edx, [ebp+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add edx, eax
	xor eax, eax
	mov ax, [edx+1Ah]
	shl eax, 8
	mov dx, [edx+1Ch]
	and edx, 0FFFFh
	shl edx, 8
	cmp eax, edx
	jle loc_4531F0

loc_4531DC:
	mov ebx, [ebp+0C0h]
	test ebx, ebx
	jle loc_4531F4
	mov edx, ebx
	sub edx, eax
	mov eax, edx
	neg eax
	jmp loc_453188

loc_4531F0:
	mov eax, edx
	jmp loc_4531DC

loc_4531F4:
	mov edx, ebx
	neg edx
	sub edx, eax
	mov eax, edx
	neg eax
	jmp loc_453188

loc_453200:
	mov ecx, 20h
	xor edi, edi
	lea esi, [ebp+8]
	mov [esp+0A4h], edi
	mov edi, esp
	rep movsd
	mov eax, [ebp+110h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0DCh]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+8Ch], eax
	mov eax, [ebp+110h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0E0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+90h], eax
	mov eax, [ebp+110h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0E4h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+94h], eax
	mov edx, [esp+8Ch]
	mov eax, [ebp+9Ch]
	add edx, eax
	mov [esp+8Ch], edx
	mov ecx, [esp+90h]
	mov eax, [ebp+0A0h]
	add ecx, eax
	mov [esp+90h], ecx
	mov ebx, [esp+94h]
	mov eax, [ebp+0A4h]
	mov edx, esp
	add ebx, eax
	lea eax, [esp+8Ch]
	mov [esp+94h], ebx
	mov ebx, 1
	call sub_44A6D0
	mov esi, [esp+10h]
	test esi, esi
	jnz loc_45336B
	cmp dword [ebp+17Ch], 0
	jnz loc_4535A1

loc_45330F:
	mov eax, [esp+98h]
	mov [esp+80h], eax
	xor eax, eax
	mov [esp+84h], eax
	mov eax, [esp+0A0h]
	mov [esp+88h], eax
	lea eax, [esp+80h]
	call sub_45E760
	mov edx, [esp+88h]
	push edx
	mov ecx, [esp+88h]
	push ecx
	mov ebx, [esp+88h]
	push ebx
	mov eax, ebp
	call sub_4613E0
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45336B:
	cmp word [esp+6Eh], 0
	jz loc_4535A1
	test esi, esi
	jz loc_4534A9
	mov eax, [esp+18h]
	movsx eax, word [eax]
	add eax, eax

loc_453388:
	mov [esp+98h], eax
	cmp dword [esp+10h], 0
	jz loc_4534CB
	mov eax, [esp+18h]
	mov eax, [eax]
	sar eax, 10h
	add eax, eax

loc_4533A5:
	mov edx, [esp+10h]
	mov [esp+9Ch], eax
	test edx, edx
	jz loc_4534ED
	mov ecx, [esp+18h]
	mov ecx, [ecx+2]
	sar ecx, 10h
	add ecx, ecx

loc_4533C4:
	mov edx, [esp+0A8h]
	mov eax, [esp+98h]
	mov edx, [edx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0A8h]
	mov ebx, eax
	mov eax, [esp+9Ch]
	mov edx, [edx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0A8h]
	add ebx, eax
	mov eax, ecx
	mov edx, [edx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+0A0h], ecx
	cmp ebx, 0DEB8h
	jl loc_453511
	cmp ebx, 0FAE1h
	jge loc_4535A1

loc_453434:
	mov edx, [esp+0A8h]
	mov ebx, [esp+98h]
	mov edx, [edx]
	add edx, ebx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+0A8h]
	mov [edx], eax
	mov esi, [esp+9Ch]
	mov edx, [edx+4]
	add edx, esi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+0A8h]
	mov [edx+4], eax
	mov edi, [esp+0A0h]
	mov edx, [edx+8]
	add edx, edi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+0A8h]
	mov [edx+8], eax
	mov eax, edx
	call sub_45E760
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4534A9:
	mov edx, [esp+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+9]
	sar eax, 18h
	shl eax, 9
	jmp loc_453388

loc_4534CB:
	mov edx, [esp+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+0Ah]
	sar eax, 18h
	shl eax, 9
	jmp loc_4533A5

loc_4534ED:
	mov edx, [esp+0Ch]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov ecx, [edx+eax+0Bh]
	sar ecx, 18h
	shl ecx, 9
	jmp loc_4533C4

loc_453511:
	mov edx, [esp+98h]
	mov eax, [ebp+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+9Ch]
	mov esi, eax
	mov eax, [ebp+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	add esi, eax
	mov eax, [ebp+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	test eax, eax
	jge loc_453434
	mov eax, [esp+0A8h]
	mov ecx, [esp+9Ch]
	cmp ecx, [eax+4]
	jge loc_453434
	cmp dword [ebp+0BCh], 1B0000h
	jge loc_453594

loc_453582:
	cmp dword [ebp+2B8h], 0
	jl loc_453434
	jmp loc_45330F

loc_453594:
	cmp ebx, 0B333h
	jl loc_453582
	jmp loc_453434

loc_4535A1:
	mov edx, [esp+0A4h]
	cmp edx, 1
	jz loc_45330F
	cmp edx, 2
	jz loc_453434
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4530C0 endp

sub_4535D0: ;SUBROUTINE
	push esi
	push edi
	mov esi, [esp+14h]
	mov edi, [eax+2F0h]
	mov [edx], edi
	xor edx, edx
	mov dl, [eax+2DAh]
	mov [ebx], edx
	mov edx, [eax+2B8h]
	mov [ecx], edx
	mov ecx, [esp+0Ch]
	mov edx, [eax+2E4h]
	mov [ecx], edx
	mov ecx, [esp+10h]
	mov edx, [eax+2ACh]
	mov [ecx], edx
	mov edx, [eax+2A4h]
	mov [esi], edx
	mov edx, [eax+2B8h]
	test edx, edx
	jle loc_453644

loc_45361A:
	cmp edx, 10000h
	jl loc_453648
	mov ecx, [eax+2B8h]
	test ecx, ecx
	jle loc_45365D
	mov edx, ecx

loc_45362E:
	cmp edx, 50000h
	jge loc_45363F
	cmp byte [eax+2D7h], 80h
	jb loc_453663

loc_45363F:
	pop edi
	pop esi
	ret 0Ch

loc_453644:
	neg edx
	jmp loc_45361A

loc_453648:
	mov eax, [esp+10h]
	mov dword [esi], 0
	mov dword [eax], 0
	pop edi
	pop esi
	ret 0Ch

loc_45365D:
	mov edx, ecx
	neg edx
	jmp loc_45362E

loc_453663:
	mov dword [esi], 0
	pop edi
	pop esi
	ret 0Ch
;sub_4535D0 endp

sub_453670: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	sub esp, 0Ch
	mov ecx, eax
	mov esi, edx
	test byte [eax+1F4h], 10h
	jnz loc_453695
	test byte [ecx+1F4h], 40h
	jnz loc_453695
	cmp byte [ecx+2D8h], 0Ah
	jb loc_45369C

loc_453695:
	add esp, 0Ch
	pop esi
	pop ecx
	pop ebx
	ret

loc_45369C:
	mov edx, [ecx+0DCh]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+8], ebx
	test esi, esi
	jz loc_4536F6
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov [esp+8], eax

loc_4536F6:
	mov eax, [esp+8]
	mov edx, [ecx+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+8], eax
	mov edx, ebx
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_4D5EF4]
	cmp eax, edx
	jg loc_45375B
	cmp dword [dword_512204], 0
	jz loc_45375B
	neg edx
	cmp eax, edx
	jge loc_453695
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	add [ecx+2ACh], eax
	add esp, 0Ch
	pop esi
	pop ecx
	pop ebx
	ret

loc_45375B:
	mov eax, [esp+8]
	add [ecx+2ACh], eax
	add esp, 0Ch
	pop esi
	pop ecx
	pop ebx
	ret
;sub_453670 endp

sub_453780: ;SUBROUTINE
	cmp dword [dword_4D6260], 0
	jnz loc_45378A
	ret

loc_45378A:
	push ecx
	xor ecx, ecx
	mov eax, sub_4537F0
	mov dword [dword_4D6260], ecx
	call sub_483AC0
	pop ecx
	ret
;sub_453780 endp

sub_4537A0: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_511E60], edx
	cmp dword [dword_4D6260], 0
	jz loc_4537B4
	pop edx
	ret

loc_4537B4:
	push ebx
	mov ebx, 1
	mov eax, sub_4537F0
	mov dword [dword_4D6260], ebx
	call sub_483A70
	mov dword [dword_511E54], edx
	mov dword [dword_511E58], edx
	mov dword [dword_511E5C], edx
	mov dword [dword_512A3C], edx
	pop ebx
	pop edx
	ret
;sub_4537A0 endp

sub_4537F0: ;SUBROUTINE
	push edx
	inc dword [dword_511E54]
	mov edx, dword [dword_511E60]
	inc dword [dword_511E60]
	test byte [dword_511E54], 1
	jnz loc_45381B
	inc dword [dword_511E58]
	test byte [dword_511E58], 1
	jz loc_45381D

loc_45381B:
	pop edx
	ret

loc_45381D:
	push esi
	mov esi, dword [dword_511E5C]
	mov eax, dword_4EFCC8
	inc esi
	mov edx, dword [dword_511E50]
	mov dword [dword_511E5C], esi
	call sub_489E20
	pop esi
	pop edx
	ret
;sub_4537F0 endp

sub_453840: ;SUBROUTINE
	call sub_489E0C
	mov dword [dword_511E50], eax

loc_45384A:
	mov eax, dword [dword_511E50]
	call sub_489E5C
	call sub_45BB50
	call sub_45BAD0
	jmp loc_45384A
;sub_453840 endp

sub_453860: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	sub esp, 48h
	mov ebp, eax
	mov edx, 1
	mov ecx, [eax+16Ch]
	mov [esp+30h], edx
	test ecx, ecx
	jle loc_453886
	mov ebx, ecx
	sub ebx, edx
	mov [eax+16Ch], ebx

loc_453886:
	cmp byte [ebp+8Ch], 0
	jnz loc_453CD5
	cmp byte [ebp+8Dh], 0
	jz loc_453CD5
	cmp dword [ebp+16Ch], 0
	jnz loc_4538B5
	cmp dword [ebp+88h], 640000h
	jle loc_4538BB

loc_4538B5:
	xor eax, eax
	mov [esp+30h], eax

loc_4538BB:
	push edi
	push esi
	test byte [ebp+180h], 40h
	jz loc_453A91
	cmp dword [esp+38h], 0
	jz loc_453A91
	lea edx, [ebp+8]
	mov eax, edx
	xor ecx, ecx
	call sub_449E10
	mov [esp+48h], ecx
	mov [esp+40h], eax
	test eax, eax
	jle loc_453A91
	lea eax, [ebp+9Ch]
	mov [esp+3Ch], edx
	mov [esp+44h], eax

loc_4538FF:
	lea ecx, [esp+4Ch]
	lea ebx, [esp+2Ch]
	mov edx, [esp+48h]
	mov eax, [esp+3Ch]
	call sub_449D90
	mov edx, [esp+44h]
	lea eax, [esp+2Ch]
	mov esi, [esp+4Ah]
	call sub_45EF20
	sar esi, 10h
	mov edx, [ebp+114h]
	shl esi, 8
	add edx, esi
	cmp eax, edx
	jge loc_453A7C
	lea eax, [esi+esi]
	cmp eax, [ebp+15Ch]
	jle loc_453A7C
	lea ecx, [esp+8]
	lea edx, [esp+2Ch]
	mov ebx, esi
	mov eax, ebp
	call sub_453D30
	test eax, eax
	jz loc_453A7C
	mov edx, [esp+48h]
	mov eax, ebp
	call sub_4467D0
	mov ecx, [esp+10h]
	mov ebx, [esp+8]
	mov edi, eax
	mov edx, eax
	mov eax, ebp
	call sub_478FD0
	test edi, edi
	jle loc_453CDD
	xor eax, eax
	mov [esp+18h], eax
	mov edx, [esp+2Ch]
	mov eax, [ebp+9Ch]
	sub eax, edx
	mov [esp+14h], eax
	mov ecx, [esp+34h]
	mov eax, [ebp+0A4h]
	sub eax, ecx
	mov edx, esi
	mov [esp+1Ch], eax
	lea eax, [esp+14h]
	sar edx, 1Fh
	call sub_45E810
	mov eax, esi
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+14h]
	imul edx, eax
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+18h]
	imul edx, ecx
	mov [esp+20h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+1Ch]
	imul edx, ecx
	mov [esp+24h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ebx, [esp+20h]
	mov esi, [esp+24h]
	lea edx, [esp+14h]
	mov [esp+28h], eax
	mov eax, [esp+2Ch]
	mov edi, [esp+28h]
	add ebx, eax
	mov eax, [esp+30h]
	mov [esp+20h], ebx
	lea ebx, [esp+20h]
	add esi, eax
	mov eax, [esp+34h]
	mov [esp+24h], esi
	add edi, eax
	mov eax, ebp
	mov [esp+28h], edi
	call sub_456420
	mov eax, [ebp+160h]
	test eax, eax
	jz loc_453A7C
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov dword [ebp+168h], 60005h
	lea edi, [ebp+170h]
	lea esi, [ebp+9Ch]
	mov [ebp+160h], eax

loc_453A79:
	movsd
	movsd
	movsd

loc_453A7C:
	mov ebx, [esp+48h]
	inc ebx
	mov esi, [esp+40h]
	mov [esp+48h], ebx
	cmp ebx, esi
	jl loc_4538FF

loc_453A91:
	test byte [ebp+180h], 80h
	jz loc_453AA8
	mov eax, ebp
	call sub_4616E0
	mov eax, ebp
	call sub_4610D0

loc_453AA8:
	cmp dword [esp+38h], 0
	jz loc_453CCC
	mov eax, dword [dword_4D62C4]
	xor esi, esi
	mov dword dword_511E64[eax*4], ebp
	test eax, eax
	jle loc_453CC6
	xor edi, edi

loc_453ACB:
	mov ecx, dword dword_511E64[edi]
	mov eax, [ebp+0A4h]
	sub eax, [ecx+0A4h]
	test eax, eax
	jle loc_453D12
	mov edx, eax

loc_453AE7:
	mov ebx, [ecx+114h]
	mov eax, [ebp+114h]
	add eax, ebx
	cmp edx, eax
	jge loc_453CB4
	mov edx, [ecx+9Ch]
	mov eax, [ebp+9Ch]
	sub eax, edx
	test eax, eax
	jle loc_453D1B
	mov edx, eax

loc_453B15:
	mov ebx, [ecx+114h]
	mov eax, [ebp+114h]
	add eax, ebx
	cmp edx, eax
	jge loc_453CB4
	mov edx, [ecx+0A0h]
	mov eax, [ebp+0A0h]
	sub eax, edx
	test eax, eax
	jle loc_453D24
	mov edx, eax

loc_453B43:
	mov ebx, [ecx+114h]
	mov eax, [ebp+114h]
	add eax, ebx
	cmp edx, eax
	jge loc_453CB4
	mov eax, 6487Eh
	mov edx, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0ECh]
	mov [ebp+0E8h], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	mov [ebp+0ECh], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ebp+0F0h], eax
	mov eax, 6487Eh
	mov edx, [ecx+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ECh]
	mov [ecx+0E8h], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0F0h]
	mov [ecx+0ECh], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	mov [ecx+0F0h], eax
	mov eax, ebp
	call sub_453F30
	mov eax, 28BEh
	mov edx, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0ECh]
	mov [ebp+0E8h], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	mov [ebp+0ECh], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ebp+0F0h], eax
	mov eax, 28BEh
	mov edx, [ecx+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ECh]
	mov [ecx+0E8h], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0F0h]
	mov [ecx+0ECh], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0F0h], eax
	mov eax, ebp
	call sub_456BA0
	mov eax, ecx
	call sub_456BA0

loc_453CB4:
	mov ebx, dword [dword_4D62C4]
	inc esi
	add edi, 4
	cmp esi, ebx
	jl loc_453ACB

loc_453CC6:
	inc dword [dword_4D62C4]

loc_453CCC:
	mov eax, ebp
	call sub_46A130
	pop esi
	pop edi

loc_453CD5:
	add esp, 48h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_453CDD:
	jge loc_453A7C
	mov dword [ebp+168h], 60005h
	mov dword [ebp+164h], 0
	lea edi, [ebp+170h]
	lea esi, [ebp+9Ch]
	mov dword [ebp+160h], 0F0000h
	jmp loc_453A79

loc_453D12:
	mov edx, eax
	neg edx
	jmp loc_453AE7

loc_453D1B:
	mov edx, eax
	neg edx
	jmp loc_453B15

loc_453D24:
	mov edx, eax
	neg edx
	jmp loc_453B43
;sub_453860 endp

sub_453D30: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov eax, [edx]
	mov edi, [esi+9Ch]
	sub eax, edi
	mov [ecx], eax
	mov eax, [edx+8]
	mov ebp, [esi+0A4h]
	mov dword [ecx+4], 0
	sub eax, ebp
	mov [ecx+8], eax
	mov edx, [esi+0C4h]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0C8h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0CCh]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	test eax, eax
	jg loc_453E84
	mov edx, [esi+0C4h]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0C8h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0CCh]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	neg eax

loc_453DDC:
	mov edx, [esi+108h]
	add edx, ebx
	cmp eax, edx
	jg loc_453E7E
	mov edx, [esi+0DCh]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0E0h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0E4h]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	test eax, eax
	jle loc_453EC7
	mov edx, [esi+0DCh]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0E0h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0E4h]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	add ebx, [esi+110h]
	cmp eax, ebx
	jle loc_453F17

loc_453E7E:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	ret

loc_453E84:
	mov edx, [esi+0C4h]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0C8h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0CCh]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	jmp loc_453DDC

loc_453EC7:
	mov edx, [esi+0DCh]
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+0E0h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0E4h]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, edi
	neg eax
	add ebx, [esi+110h]
	cmp eax, ebx
	jle loc_453F17
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	ret

loc_453F17:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	ret
;sub_453D30 endp

sub_453F20: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_4D62C4], edx
	pop edx
	ret
;sub_453F20 endp

sub_453F30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov edi, eax
	mov esi, edx
	mov ecx, esp
	mov dword [eax+160h], 0
	lea ebx, [esp+0Ch]
	mov dword [edx+160h], 0
	call sub_4543F0
	test eax, eax
	jnz loc_453F68

loc_453F5F:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_453F68:
	mov ecx, esp
	lea ebx, [esp+0Ch]
	mov edx, esi
	mov eax, edi
	call sub_455B60
	test eax, eax
	jz loc_453F5F
	mov eax, edi
	call sub_46A130
	mov eax, esi
	mov ebp, 8
	call sub_46A130

loc_453F8E:
	mov ecx, esp
	lea ebx, [esp+0Ch]
	mov edx, esi
	mov eax, edi
	call sub_4543F0
	test eax, eax
	jz loc_453FE9
	test ebp, ebp
	jle loc_453FE9
	mov ecx, esp
	lea ebx, [esp+0Ch]
	mov edx, esi
	mov eax, edi
	call sub_455B60
	dec ebp
	test eax, eax
	jz loc_453FDB
	mov eax, edi
	call sub_46A130
	mov eax, esi
	call sub_46A130
	test ebp, ebp
	jnz loc_453F8E
	mov eax, edi
	call sub_4540A0
	mov eax, esi
	call sub_4540A0
	jmp loc_453F8E

loc_453FDB:
	mov eax, 1
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_453FE9:
	mov ecx, esi
	mov dl, [edi+2DDh]
	mov eax, edi
	test dl, dl
	jz loc_454068

loc_453FFB:
	mov edx, dword [dword_51221C]
	cmp edx, 6
	jnz loc_45407F

loc_45400A:
	test byte [eax+1F4h], 4
	jz loc_454032
	test byte [ecx+1F4h], 40h
	jz loc_454032
	cmp dword [eax+2B8h], 0FFF60000h
	jge loc_454032
	mov dword [dword_4D8514], 1

loc_454032:
	test byte [ecx+1F4h], 4
	jz loc_45405A
	test byte [eax+1F4h], 40h
	jz loc_45405A
	cmp dword [ecx+2B8h], 0FFF60000h
	jge loc_45405A
	mov dword [dword_4D8514], 1

loc_45405A:
	mov eax, 1
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_454068:
	cmp byte [esi+2DDh], 0
	jnz loc_453FFB
	mov eax, 1
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45407F:
	cmp edx, 7
	jz loc_45400A
	mov eax, 1
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_453F30 endp

sub_4540A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ecx, eax
	mov esi, 1
	mov ah, byte [dword_540F48]
	xor edi, edi
	mov ebp, esi
	test ah, 4
	jz loc_4540C4
	mov esi, 0FFFFFFFFh

loc_4540C4:
	test byte [dword_540F48], 8
	jz loc_4540D2
	mov ebp, 0FFFFFFFFh

loc_4540D2:
	cmp dword [dword_512204], 0
	jz loc_4540E9
	test byte [ecx+1F4h], 40h
	jnz loc_4540E9
	mov edi, 1

loc_4540E9:
	mov eax, dword dword_4D6290[edi*4]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+0E8h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0E8h], eax
	mov eax, dword dword_4D6290[edi*4]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+0ECh]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0ECh], eax
	mov eax, dword dword_4D6290[edi*4]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0F0h], eax
	mov edx, dword dword_4D6298[edi*4]
	imul edx, esi
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+188h]
	imul edx, eax
	mov esi, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+18Ch]
	imul edx, esi
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+190h]
	imul edx, esi
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ebx, [ecx+0E8h]
	mov esi, [ecx+0ECh]
	mov [esp+8], eax
	mov eax, [esp]
	mov edx, [ecx+0F0h]
	add ebx, eax
	mov eax, [esp+4]
	mov [ecx+0E8h], ebx
	add esi, eax
	mov eax, [esp+8]
	mov [ecx+0ECh], esi
	add edx, eax
	mov [ecx+0F0h], edx
	mov edx, dword dword_4D62A0[edi*4]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A0h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A4h]
	imul edx, ebx
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A8h]
	imul edx, ebx
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov esi, [ecx+0ECh]
	mov ebp, [ecx+0F0h]
	mov ebx, [ecx+0E8h]
	mov [esp+8], eax
	mov eax, [esp]
	mov edx, [ecx+0BCh]
	add ebx, eax
	mov eax, [esp+4]
	mov [ecx+0E8h], ebx
	add esi, eax
	mov eax, [esp+8]
	mov [ecx+0ECh], esi
	add ebp, eax
	sub edx, 2C0000h
	mov [ecx+0F0h], ebp
	test edx, edx
	jle loc_4543A7

loc_4542C3:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	cmp eax, 0E666h
	jle loc_4543AE
	mov eax, 0E666h

loc_4542E0:
	mov edx, dword dword_4D62A8[edi*4]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+194h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+198h]
	imul edx, ebx
	mov [esp+0Ch], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+19Ch]
	imul edx, ebx
	mov [esp+10h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+14h], eax
	mov edx, [ecx+0A8h]
	mov eax, [esp+0Ch]
	mov esi, [ecx+0B0h]
	add edx, eax
	mov ebx, [ecx+0ACh]
	mov [ecx+0A8h], edx
	mov eax, [esp+10h]
	mov dx, [ecx+14Ch]
	add ebx, eax
	mov eax, [esp+14h]
	inc edx
	mov [ecx+0ACh], ebx
	add esi, eax
	mov [ecx+14Ch], dx
	mov eax, ecx
	mov [ecx+0B0h], esi
	call sub_4784D0
	test eax, eax
	jnz loc_4543D4
	mov eax, ecx
	call sub_460A40
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4543A7:
	neg edx
	jmp loc_4542C3

loc_4543AE:
	mov edx, [ecx+0BCh]
	sub edx, 2C0000h
	test edx, edx
	jle loc_4543D0

loc_4543BE:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	jmp loc_4542E0

loc_4543D0:
	neg edx
	jmp loc_4543BE

loc_4543D4:
	mov eax, 1
	mov eax, ecx
	call sub_460A40
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4540A0 endp

sub_4543F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 68h
	mov ebp, eax
	mov [esp+64h], edx
	mov [esp+54h], ebx
	mov [esp+58h], ecx
	mov edx, [edx+0C4h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, [esp+64h]
	mov edx, [eax+0C8h]
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, [esp+64h]
	mov edx, [eax+0CCh]
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0D0h]
	mov eax, [ebp+0C4h]
	mov dword [dword_511F18], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0D4h]
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0D8h]
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0DCh]
	mov eax, [ebp+0C4h]
	mov dword [dword_511F1C], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0E0h]
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0E4h]
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0C4h]
	mov eax, [ebp+0D0h]
	mov dword [dword_511F20], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0C8h]
	mov eax, [ebp+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0CCh]
	mov eax, [ebp+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	xor esi, esi
	mov dword [dword_511F24], ecx
	mov eax, [esp+64h]
	mov edx, [eax+0D0h]
	mov eax, [ebp+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, [esp+64h]
	mov edx, [eax+0D4h]
	mov eax, [ebp+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, [esp+64h]
	mov edx, [eax+0D8h]
	mov eax, [ebp+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0DCh]
	mov eax, [ebp+0D0h]
	mov dword [dword_511F28], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0E0h]
	mov eax, [ebp+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0E4h]
	mov eax, [ebp+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0C4h]
	mov eax, [ebp+0DCh]
	mov dword [dword_511F2C], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0C8h]
	mov eax, [ebp+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0CCh]
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0D0h]
	mov eax, [ebp+0DCh]
	mov dword [dword_511F30], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0D4h]
	mov eax, [ebp+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0D8h]
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov dword [dword_511F34], ecx
	mov eax, [esp+64h]
	mov edx, [eax+0DCh]
	mov eax, [ebp+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov edx, [edx+0E0h]
	mov eax, [ebp+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov edx, [edx+0E4h]
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	add ecx, eax
	mov eax, dword [dword_511F18]
	mov edx, [edx+108h]
	mov dword [dword_511F38], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511ECC], eax
	mov eax, dword [dword_511F1C]
	mov edx, [edx+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511ED0], eax
	mov eax, dword [dword_511F20]
	mov edx, [edx+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511ED4], eax
	mov eax, dword [dword_511F24]
	mov edx, [edx+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511ED8], eax
	mov eax, dword [dword_511F28]
	mov edx, [edx+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511EDC], eax
	mov eax, dword [dword_511F2C]
	mov edx, [edx+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511EE0], eax
	mov eax, dword [dword_511F30]
	mov edx, [edx+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov dword [dword_511EE4], eax
	mov eax, dword [dword_511F34]
	mov edx, [edx+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511EE8], eax
	mov edx, [esp+64h]
	mov eax, dword [dword_511F38]
	mov edx, [edx+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511EEC], eax
	mov edx, [ebp+108h]
	mov eax, dword [dword_511F18]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511EF4], eax
	mov edx, [ebp+108h]
	mov eax, dword [dword_511F1C]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511EF8], eax
	mov edx, [ebp+108h]
	mov eax, dword [dword_511F20]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511EFC], eax
	mov edx, [ebp+10Ch]
	mov eax, dword [dword_511F24]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F00], eax
	mov edx, [ebp+10Ch]
	mov eax, dword [dword_511F28]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F04], eax
	mov edx, [ebp+10Ch]
	mov eax, dword [dword_511F2C]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F08], eax
	mov edx, [ebp+110h]
	mov eax, dword [dword_511F30]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F0C], eax
	mov edx, [ebp+110h]
	mov eax, dword [dword_511F34]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F10], eax
	mov edx, [ebp+110h]
	mov eax, dword [dword_511F38]
	mov [esp+60h], esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_511F14], eax

loc_454928:
	mov edx, [esp+64h]
	mov ecx, [ebp+9Ch]
	mov edx, [edx+9Ch]
	sub edx, ecx
	mov [esp+30h], edx
	mov edx, [esp+64h]
	mov ebx, [ebp+0A0h]
	mov edx, [edx+0A0h]
	sub edx, ebx
	mov [esp+34h], edx
	mov edx, [esp+64h]
	mov edi, [ebp+0A4h]
	mov edx, [edx+0A4h]
	sub edx, edi
	mov eax, [ebp+0C4h]
	mov [esp+38h], edx
	mov edx, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ebx, eax
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ebx, eax
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	add ebx, eax
	mov eax, [ebp+0D0h]
	mov dword [dword_511EB4], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ebx, eax
	mov eax, [ebp+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ebx, eax
	mov eax, [ebp+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	add ebx, eax
	mov eax, [ebp+0DCh]
	mov dword [dword_511EB8], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ebx, eax
	mov eax, [ebp+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ebx, eax
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+30h]
	mov eax, [eax+0C4h]
	mov dword [dword_511EBC], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+34h]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+38h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov dword [dword_511EC0], ebx
	mov eax, [esp+64h]
	mov edx, [esp+30h]
	mov eax, [eax+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+34h]
	mov eax, [eax+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+38h]
	mov eax, [eax+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+30h]
	mov eax, [eax+0DCh]
	mov dword [dword_511EC4], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+34h]
	mov eax, [eax+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+64h]
	mov edx, [esp+38h]
	mov eax, [eax+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	push dword_511EB4
	mov ecx, [esp+5Ch]
	add ebx, eax
	push dword_511EF4
	mov edx, [esp+6Ch]
	mov dword [dword_511EC8], ebx
	push dword_511ECC
	mov eax, ebp
	mov ebx, [esp+60h]
	call sub_455100
	test eax, eax
	jz loc_454BF1
	test esi, esi
	jz loc_454BFA

loc_454B70:
	mov eax, [esp]
	mov ebx, [ebp+9Ch]
	mov edi, [ebp+0A0h]
	add ebx, eax
	mov eax, [esp+4]
	mov edx, [ebp+0A4h]
	add edi, eax
	mov eax, [esp+8]
	mov [ebp+9Ch], ebx
	add edx, eax
	mov [ebp+0A4h], edx
	mov edx, [esp+64h]
	mov [ebp+0A0h], edi
	mov eax, [esp+24h]
	mov ecx, [edx+9Ch]
	mov ebx, [edx+0A0h]
	add ecx, eax
	mov eax, [esp+28h]
	mov edi, [edx+0A4h]
	add ebx, eax
	mov eax, [esp+2Ch]
	mov [edx+9Ch], ecx
	add edi, eax
	mov eax, [esp+60h]
	mov [edx+0A0h], ebx
	inc eax
	mov [edx+0A4h], edi
	mov [esp+60h], eax
	cmp eax, 20h
	jl loc_454928

loc_454BF1:
	mov eax, esi
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	ret

loc_454BFA:
	mov eax, [esp+64h]
	mov edx, [ebp+0A8h]
	mov esi, [eax+0A8h]
	sub edx, esi
	mov [esp+18h], edx
	mov edx, [ebp+0ACh]
	mov edi, [eax+0ACh]
	sub edx, edi
	mov [esp+1Ch], edx
	xor ebx, ebx
	mov edx, [ebp+0B0h]
	mov esi, [eax+0B0h]
	xor ecx, ecx
	sub edx, esi
	mov edi, [esp+18h]
	mov [esp+20h], edx
	test edi, edi
	jle loc_454E31
	mov edx, edi

loc_454C46:
	mov eax, [esp+1Ch]
	test eax, eax
	jle loc_454E3A

loc_454C52:
	cmp edx, eax
	jle loc_454E41

loc_454C5A:
	mov eax, edx

loc_454C5C:
	mov esi, [esp+20h]
	test esi, esi
	jle loc_454E56
	mov edx, esi

loc_454C6A:
	cmp eax, edx
	jle loc_454E5F

loc_454C72:
	cmp eax, dword [dword_4D62B0]
	jle loc_454FB5
	mov esi, [esp+30h]
	test esi, esi
	jle loc_454E77
	mov edx, esi

loc_454C8C:
	mov edi, [esp+34h]
	mov eax, edx
	test edi, edi
	jle loc_454E80
	mov esi, edi

loc_454C9C:
	cmp eax, esi
	jle loc_454E89

loc_454CA4:
	mov esi, [esp+38h]
	test esi, esi
	jle loc_454E9C

loc_454CB0:
	cmp eax, esi
	jle loc_454EA3

loc_454CB8:
	mov esi, eax
	mov eax, [esp+38h]
	test eax, eax
	jle loc_454EBB

loc_454CC6:
	cmp edx, eax
	jle loc_454CD6
	mov edx, [esp+38h]
	test edx, edx
	jle loc_454EC2

loc_454CD6:
	mov eax, edx

loc_454CD8:
	mov edi, dword [dword_4D62B4]
	mov [esp+5Ch], eax
	cmp esi, edi
	jge loc_454ED5
	cmp dword [dword_4D6280], 0
	jnz loc_454ED5
	lea eax, [esp+18h]
	call sub_45EB60
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	test eax, eax
	jz loc_454ECB

loc_454D13:
	mov eax, 8000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ebx, eax

loc_454D2F:
	mov edx, ebx
	neg edx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0A8h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0ACh]
	imul edx, ebx
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ebp+0B0h]
	imul edx, ebx
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+64h]
	mov edx, [edx+0A8h]
	imul edx, ebx
	mov [esp+8], eax
	mov edi, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+64h]
	mov edx, [edx+0ACh]
	imul edx, ebx
	mov [esp+24h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+64h]
	mov edx, [edx+0B0h]
	imul edx, ebx
	mov [esp+28h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ecx, [esp]
	sar ecx, 5
	mov esi, [esp+4]
	mov [esp], ecx
	sar esi, 5
	sar edi, 5
	mov [esp+4], esi
	mov [esp+8], edi
	mov edx, [esp+28h]
	mov [esp+2Ch], eax
	mov eax, [esp+24h]
	mov ecx, [esp+2Ch]
	sar edx, 5
	sar eax, 5
	mov [esp+28h], edx
	sar ecx, 5
	mov [esp+24h], eax
	mov [esp+2Ch], ecx
	mov esi, 1
	jmp loc_454B70

loc_454E31:
	mov edx, edi
	neg edx
	jmp loc_454C46

loc_454E3A:
	neg eax
	jmp loc_454C52

loc_454E41:
	mov edx, [esp+1Ch]
	test edx, edx
	jg loc_454C5A
	mov eax, edx
	neg eax
	jmp loc_454C5C

loc_454E56:
	mov edx, esi
	neg edx
	jmp loc_454C6A

loc_454E5F:
	mov edi, [esp+20h]
	test edi, edi
	jle loc_454E6E
	mov eax, edi
	jmp loc_454C72

loc_454E6E:
	mov eax, edi
	neg eax
	jmp loc_454C72

loc_454E77:
	mov edx, esi
	neg edx
	jmp loc_454C8C

loc_454E80:
	mov esi, edi
	neg esi
	jmp loc_454C9C

loc_454E89:
	mov eax, [esp+34h]
	test eax, eax
	jg loc_454CA4
	neg eax
	jmp loc_454CA4

loc_454E9C:
	neg esi
	jmp loc_454CB0

loc_454EA3:
	mov edi, [esp+38h]
	test edi, edi
	jle loc_454EB2
	mov eax, edi
	jmp loc_454CB8

loc_454EB2:
	mov eax, edi
	neg eax
	jmp loc_454CB8

loc_454EBB:
	neg eax
	jmp loc_454CC6

loc_454EC2:
	mov eax, edx
	neg eax
	jmp loc_454CD8

loc_454ECB:
	mov ebx, 10000h
	jmp loc_454D2F

loc_454ED5:
	lea edi, [esp+48h]
	lea esi, [esp+18h]
	movsd
	movsd
	movsd
	lea eax, [esp+48h]
	lea edi, [esp+0Ch]
	lea esi, [esp+30h]
	call sub_45E810
	lea eax, [esp+0Ch]
	movsd
	movsd
	movsd
	call sub_45E760
	mov edx, [esp+0Ch]
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov esi, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add esi, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_4D62BC]
	add eax, esi
	cmp eax, edx
	jle loc_454F72
	cmp dword [dword_4D6284], 0
	jnz loc_454F72
	lea eax, [esp+18h]
	call sub_45EB60
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	test eax, eax
	jnz loc_454D13
	mov ebx, 10000h
	jmp loc_454D2F

loc_454F72:
	cmp dword [dword_4D6288], 0
	jz loc_454FB5
	cmp eax, dword [dword_4D62C0]
	jle loc_454FB5
	mov eax, [esp+5Ch]
	cmp eax, dword [dword_4D62B8]
	jge loc_454FB5
	lea eax, [esp+18h]
	call sub_45EB60
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	test eax, eax
	jnz loc_454D13
	mov ebx, 10000h
	jmp loc_454D2F

loc_454FB5:
	test ecx, ecx
	jnz loc_454D2F
	cmp dword [dword_4D628C], 0
	jnz loc_454D2F
	lea edi, [esp+3Ch]
	lea esi, [esp+30h]
	lea eax, [esp+3Ch]
	movsd
	movsd
	movsd
	call sub_45E760
	mov eax, [esp+64h]
	mov edi, [ebp+0B4h]
	add edi, [eax+0B4h]
	mov eax, [ebp+0B4h]
	mov ebx, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov esi, eax
	mov eax, [esp+64h]
	mov ebx, edi
	mov eax, [eax+0B4h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, [esp+3Ch]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	mov edx, [esp+40h]
	imul edx, ebx
	neg eax
	sar eax, 5
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	mov edx, [esp+44h]
	imul edx, ebx
	neg eax
	sar eax, 5
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	neg eax
	mov edx, esi
	sar eax, 5
	sar edx, 1Fh
	mov [esp+8], eax
	mov eax, esi
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, [esp+3Ch]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	mov edx, [esp+40h]
	imul edx, ebx
	sar eax, 5
	mov [esp+24h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	mov edx, [esp+44h]
	imul edx, ebx
	sar eax, 5
	mov [esp+28h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Eh
	sbb eax, edx
	sar eax, 0Eh
	sar eax, 5
	mov [esp+2Ch], eax
	mov esi, 1
	jmp loc_454B70
;sub_4543F0 endp

sub_455100: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 64h
	mov [esp+60h], eax
	mov ebp, edx
	mov dword [dword_511F40], eax
	mov dword [dword_511F3C], edx
	mov dword [dword_511F44], ebx
	mov eax, 1
	xor ebx, ebx
	xor edx, edx
	mov dword [dword_511EF0], ecx
	call sub_457CD0
	test eax, eax
	jz loc_455143

loc_455135:
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455143:
	mov edx, 1
	xor ebx, ebx
	call sub_457CD0
	test eax, eax
	jnz loc_455135
	mov ebx, 1
	xor edx, edx
	call sub_457CD0
	test eax, eax
	jnz loc_455135
	mov eax, 0FFFFFFFFh
	xor ebx, ebx
	xor edx, edx
	call sub_457CD0
	test eax, eax
	jnz loc_455135
	mov edx, 0FFFFFFFFh
	xor ebx, ebx
	call sub_457CD0
	test eax, eax
	jnz loc_455135
	mov ebx, 0FFFFFFFFh
	xor edx, edx
	call sub_457CD0
	test eax, eax
	jnz loc_455135
	mov eax, 1
	xor ebx, ebx
	xor edx, edx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov edx, 1
	xor ebx, ebx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov ebx, 1
	xor edx, edx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov eax, 0FFFFFFFFh
	xor ebx, ebx
	xor edx, edx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov edx, 0FFFFFFFFh
	xor ebx, ebx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov ebx, 0FFFFFFFFh
	xor edx, edx
	call sub_457A10
	test eax, eax
	jnz loc_455135
	mov ebx, 1
	mov edx, ebx
	mov eax, ebx
	call sub_4577D0
	test eax, eax
	jz loc_4553EE

loc_455223:
	xor ebx, ebx
	mov esi, dword [dword_4D6278]
	mov dword [dword_511F54], ebx
	test esi, esi
	jz loc_4556D8

loc_455239:
	mov dword [dword_511F54], 1

loc_455243:
	lea edi, [esp+30h]
	lea esi, [ebp+0A8h]
	movsd
	movsd
	movsd
	mov esi, [esp+60h]
	lea edi, [esp+24h]
	lea esi, [esi+0C4h]
	movsd
	movsd
	movsd
	mov esi, [esp+60h]
	lea edi, [esp+54h]
	lea esi, [esi+0D0h]
	movsd
	movsd
	movsd
	mov esi, [esp+60h]
	lea edi, [esp+18h]
	lea esi, [esi+0DCh]
	movsd
	movsd
	movsd
	cmp dword [dword_511F50], 0
	jle loc_4552AA
	mov eax, [esp+28h]
	mov edx, [esp+2Ch]
	mov ebp, [esp+24h]
	neg eax
	neg edx
	neg ebp
	mov [esp+28h], eax
	mov [esp+2Ch], edx
	mov [esp+24h], ebp

loc_4552AA:
	cmp dword [dword_511F48], 0
	jle loc_4552D1
	mov edi, [esp+58h]
	mov ebp, [esp+5Ch]
	mov esi, [esp+54h]
	neg edi
	neg ebp
	neg esi
	mov [esp+58h], edi
	mov [esp+5Ch], ebp
	mov [esp+54h], esi

loc_4552D1:
	cmp dword [dword_511F4C], 0
	jle loc_4552F8
	mov ebx, [esp+1Ch]
	mov esi, [esp+20h]
	mov edx, [esp+18h]
	neg ebx
	neg esi
	neg edx
	mov [esp+1Ch], ebx
	mov [esp+20h], esi
	mov [esp+18h], edx

loc_4552F8:
	mov edx, [esp+30h]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	add ebx, eax
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov esi, eax
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add esi, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	lea ebp, [esi+eax]
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov esi, eax
	mov eax, [esp+1Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add esi, eax
	mov eax, [esp+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	test ebx, ebx
	jle loc_4557F8

loc_4553B5:
	test ebp, ebp
	jle loc_4557FF

loc_4553BD:
	test eax, eax
	jle loc_455806

loc_4553C5:
	mov edx, eax
	cmp ebx, ebp
	jle loc_45580D
	cmp ebx, eax
	jle loc_45580D
	lea esi, [esp+24h]
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4553EE:
	mov edx, 1
	mov ebx, 0FFFFFFFFh
	mov eax, edx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 1
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 0FFFFFFFFh
	mov eax, 1
	mov edx, ebx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 1
	mov eax, 0FFFFFFFFh
	mov edx, ebx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 0FFFFFFFFh
	mov edx, 1
	mov eax, ebx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov edx, 0FFFFFFFFh
	mov ebx, 1
	mov eax, edx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 0FFFFFFFFh
	mov edx, ebx
	mov eax, ebx
	call sub_4577D0
	test eax, eax
	jnz loc_455223
	mov ebx, 1
	mov edx, ebx
	mov eax, ebx
	call sub_457590
	test eax, eax
	jz loc_455623

loc_4554B0:
	xor edx, edx
	mov ebx, dword [dword_4D6278]
	mov dword [dword_511F54], edx
	test ebx, ebx
	jz loc_4558F8

loc_4554C6:
	mov dword [dword_511F54], 1

loc_4554D0:
	mov esi, [esp+60h]
	lea edi, [esp+3Ch]
	lea esi, [esi+0A8h]
	movsd
	movsd
	movsd
	lea edi, [esp+48h]
	lea esi, [ebp+0C4h]
	movsd
	movsd
	movsd
	mov edi, esp
	lea esi, [ebp+0D0h]
	movsd
	movsd
	movsd
	lea edi, [esp+0Ch]
	lea esi, [ebp+0DCh]
	mov ebx, dword [dword_511F50]
	movsd
	movsd
	movsd
	test ebx, ebx
	jl loc_455A09

loc_455514:
	cmp dword [dword_511F48], 0
	jl loc_455A2C

loc_455521:
	cmp dword [dword_511F4C], 0
	jl loc_455A4D

loc_45552E:
	mov edx, [esp+3Ch]
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ebx, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add ebx, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	lea ebp, [ebx+eax]
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ebx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add ebx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	add ebx, eax
	mov eax, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov esi, eax
	mov eax, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add esi, eax
	mov eax, [esp+14h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	test ebp, ebp
	jle loc_455A70

loc_4555EA:
	test ebx, ebx
	jle loc_455A77

loc_4555F2:
	test eax, eax
	jle loc_455A7E

loc_4555FA:
	mov edx, eax
	cmp ebp, ebx
	jle loc_455A85
	cmp ebp, eax
	jle loc_455A85
	lea esi, [esp+48h]
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455623:
	mov edx, 1
	mov ebx, 0FFFFFFFFh
	mov eax, edx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov ebx, 1
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov ebx, 0FFFFFFFFh
	mov eax, 1
	mov edx, ebx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov ebx, 1
	mov eax, 0FFFFFFFFh
	mov edx, ebx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov ebx, 0FFFFFFFFh
	mov edx, 1
	mov eax, ebx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov edx, 0FFFFFFFFh
	mov ebx, 1
	mov eax, edx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	mov ebx, 0FFFFFFFFh
	mov edx, ebx
	mov eax, ebx
	call sub_457590
	test eax, eax
	jnz loc_4554B0
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4556D8:
	cmp dword [dword_4D627C], 0
	jz loc_45574D
	mov edx, [esp+60h]
	mov eax, [ebp+0A8h]
	sub eax, [edx+0A8h]
	test eax, eax
	jle loc_455741

loc_4556F9:
	mov edx, [esp+60h]
	mov ebx, eax
	mov eax, [ebp+0ACh]
	sub eax, [edx+0ACh]
	test eax, eax
	jle loc_455745

loc_45570F:
	mov esi, [esp+60h]
	mov edx, eax
	mov eax, [ebp+0B0h]
	sub eax, [esi+0B0h]
	test eax, eax
	jle loc_455749

loc_455725:
	mov esi, eax
	mov eax, ebx
	cmp edx, ebx
	jle loc_45572F
	mov eax, edx

loc_45572F:
	cmp esi, eax
	jle loc_455735
	mov eax, esi

loc_455735:
	cmp eax, 0F0000h
	jle loc_45574D
	jmp loc_455239

loc_455741:
	neg eax
	jmp loc_4556F9

loc_455745:
	neg eax
	jmp loc_45570F

loc_455749:
	neg eax
	jmp loc_455725

loc_45574D:
	cmp dword [dword_511F54], 0
	jnz loc_455243
	mov edx, dword [dword_511F50]
	test edx, edx
	jl loc_45583F
	mov ebp, [esp+60h]
	mov ebp, [ebp+108h]
	sub ebp, edx

loc_455774:
	mov edi, dword [dword_511F48]
	test edi, edi
	jl loc_455850
	mov ebx, [esp+60h]
	mov ebx, [ebx+10Ch]
	sub ebx, edi

loc_45578E:
	mov esi, dword [dword_511F4C]
	test esi, esi
	jl loc_455862
	mov eax, [esp+60h]
	mov eax, [eax+110h]
	sub eax, esi

loc_4557A8:
	cmp ebp, ebx
	jge loc_455873
	cmp ebp, eax
	jge loc_455873
	mov esi, [esp+60h]
	mov edi, ecx
	lea esi, [esi+0C4h]
	movsd
	movsd
	movsd
	cmp dword [dword_511F50], 0
	jle loc_455135
	mov eax, [ecx+4]
	mov edx, [ecx+8]
	mov ebp, [ecx]
	neg eax
	neg edx
	mov [ecx+4], eax
	neg ebp
	mov [ecx+8], edx
	mov [ecx], ebp
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4557F8:
	neg ebx
	jmp loc_4553B5

loc_4557FF:
	neg ebp
	jmp loc_4553BD

loc_455806:
	neg eax
	jmp loc_4553C5

loc_45580D:
	cmp ebp, edx
	jle loc_455828
	lea esi, [esp+54h]
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455828:
	lea esi, [esp+18h]
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_45583F:
	mov ebp, [esp+60h]
	mov ebp, [ebp+108h]
	add ebp, edx
	jmp loc_455774

loc_455850:
	mov eax, [esp+60h]
	mov eax, [eax+10Ch]
	lea ebx, [edi+eax]
	jmp loc_45578E

loc_455862:
	mov eax, [esp+60h]
	mov eax, [eax+110h]
	add eax, esi
	jmp loc_4557A8

loc_455873:
	cmp ebx, eax
	jge loc_4558B7
	mov esi, [esp+60h]
	mov edi, ecx
	lea esi, [esi+0D0h]
	mov eax, dword [dword_511F48]
	movsd
	movsd
	movsd
	test eax, eax
	jle loc_455135
	mov ebx, [ecx+4]
	mov esi, [ecx+8]
	mov edx, [ecx]
	neg ebx
	neg esi
	mov [ecx+4], ebx
	neg edx
	mov [ecx+8], esi
	mov [ecx], edx
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4558B7:
	mov esi, [esp+60h]
	mov edi, ecx
	lea esi, [esi+0DCh]
	mov ebx, dword [dword_511F4C]
	movsd
	movsd
	movsd
	test ebx, ebx
	jle loc_455135
	mov edi, [ecx+4]
	mov ebp, [ecx+8]
	mov esi, [ecx]
	neg edi
	neg ebp
	mov [ecx+4], edi
	neg esi
	mov [ecx+8], ebp
	mov [ecx], esi
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4558F8:
	cmp dword [dword_4D627C], 0
	jz loc_45596D
	mov edx, [esp+60h]
	mov eax, [ebp+0A8h]
	sub eax, [edx+0A8h]
	test eax, eax
	jle loc_455961

loc_455919:
	mov edx, [esp+60h]
	mov ebx, eax
	mov eax, [ebp+0ACh]
	sub eax, [edx+0ACh]
	test eax, eax
	jle loc_455965

loc_45592F:
	mov esi, [esp+60h]
	mov edx, eax
	mov eax, [ebp+0B0h]
	sub eax, [esi+0B0h]
	test eax, eax
	jle loc_455969

loc_455945:
	mov esi, eax
	mov eax, ebx
	cmp edx, ebx
	jle loc_45594F
	mov eax, edx

loc_45594F:
	cmp esi, eax
	jle loc_455955
	mov eax, esi

loc_455955:
	cmp eax, 0F0000h
	jle loc_45596D
	jmp loc_4554C6

loc_455961:
	neg eax
	jmp loc_455919

loc_455965:
	neg eax
	jmp loc_45592F

loc_455969:
	neg eax
	jmp loc_455945

loc_45596D:
	cmp dword [dword_511F54], 0
	jnz loc_4554D0
	mov edx, dword [dword_511F50]
	test edx, edx
	jl loc_455AB5
	mov ebx, [ebp+108h]
	sub ebx, edx

loc_455990:
	mov edi, dword [dword_511F48]
	test edi, edi
	jl loc_455AC2
	mov edx, [ebp+10Ch]
	sub edx, edi

loc_4559A6:
	mov edi, dword [dword_511F4C]
	test edi, edi
	jl loc_455ACF
	mov eax, [ebp+110h]
	sub eax, edi

loc_4559BC:
	cmp ebx, edx
	jge loc_455ADC
	cmp ebx, eax
	jge loc_455ADC
	mov edi, ecx
	lea esi, [ebp+0C4h]
	mov edx, dword [dword_511F50]
	movsd
	movsd
	movsd
	test edx, edx
	jge loc_455135
	mov esi, [ecx+4]
	mov edi, [ecx+8]
	mov ebx, [ecx]
	neg esi
	neg edi
	mov [ecx+4], esi
	neg ebx
	mov [ecx+8], edi
	mov [ecx], ebx
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455A09:
	mov edi, [esp+4Ch]
	mov ebp, [esp+50h]
	mov esi, [esp+48h]
	neg edi
	neg ebp
	neg esi
	mov [esp+4Ch], edi
	mov [esp+50h], ebp
	mov [esp+48h], esi
	jmp loc_455514

loc_455A2C:
	mov ebx, [esp+4]
	mov esi, [esp+8]
	mov edx, [esp]
	neg ebx
	neg esi
	neg edx
	mov [esp+4], ebx
	mov [esp+8], esi
	mov [esp], edx
	jmp loc_455521

loc_455A4D:
	mov eax, [esp+10h]
	mov edx, [esp+14h]
	mov ebp, [esp+0Ch]
	neg eax
	neg edx
	neg ebp
	mov [esp+10h], eax
	mov [esp+14h], edx
	mov [esp+0Ch], ebp
	jmp loc_45552E

loc_455A70:
	neg ebp
	jmp loc_4555EA

loc_455A77:
	neg ebx
	jmp loc_4555F2

loc_455A7E:
	neg eax
	jmp loc_4555FA

loc_455A85:
	cmp ebx, edx
	jle loc_455A9E
	mov esi, esp
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455A9E:
	lea esi, [esp+0Ch]
	mov edi, ecx
	movsd
	movsd
	movsd
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455AB5:
	mov ebx, [ebp+108h]
	add ebx, edx
	jmp loc_455990

loc_455AC2:
	mov edx, [ebp+10Ch]
	add edx, edi
	jmp loc_4559A6

loc_455ACF:
	mov eax, [ebp+110h]
	add eax, edi
	jmp loc_4559BC

loc_455ADC:
	cmp edx, eax
	jge loc_455B1C
	mov edi, ecx
	lea esi, [ebp+0D0h]
	movsd
	movsd
	movsd
	cmp dword [dword_511F48], 0
	jge loc_455135
	mov ebp, [ecx+4]
	mov eax, [ecx+8]
	mov edi, [ecx]
	neg ebp
	neg eax
	mov [ecx+4], ebp
	neg edi
	mov [ecx+8], eax
	mov [ecx], edi
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_455B1C:
	mov edi, ecx
	lea esi, [ebp+0DCh]
	mov ebp, dword [dword_511F4C]
	movsd
	movsd
	movsd
	test ebp, ebp
	jge loc_455135
	mov edx, [ecx+4]
	mov ebx, [ecx+8]
	mov eax, [ecx]
	neg edx
	neg ebx
	mov [ecx+4], edx
	neg eax
	mov [ecx+8], ebx
	mov [ecx], eax
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_455100 endp

sub_455B60: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov edi, eax
	mov esi, edx
	mov ebp, ecx
	mov eax, [ebx]
	sub eax, [edi+9Ch]
	mov ecx, [edi+0A0h]
	mov [esp], eax
	mov eax, [ebx+4]
	sub eax, ecx
	mov edx, [edi+0A4h]
	mov [esp+4], eax
	mov eax, [ebx+8]
	sub eax, edx
	mov ecx, [esi+9Ch]
	mov [esp+8], eax
	mov eax, [ebx]
	sub eax, ecx
	mov edx, [ebx+4]
	mov [esp+18h], eax
	mov eax, [esi+0A0h]
	sub edx, eax
	mov [esp+1Ch], edx
	mov eax, [ebx+8]
	mov edx, [esi+0A4h]
	sub eax, edx
	mov [esp+20h], eax
	mov edx, [ebp+8]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+4]
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0]
	sub ecx, eax
	mov eax, [esp+8]
	mov [esp+0Ch], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+8]
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+4]
	sub ecx, eax
	mov eax, [esp]
	mov [esp+10h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+8]
	sub ecx, eax
	mov eax, [esp+1Ch]
	mov [esp+14h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+4]
	mov eax, [esp+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0]
	sub ecx, eax
	mov eax, [esp+20h]
	mov [esp+3Ch], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+8]
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+4]
	sub ecx, eax
	mov eax, [esp+18h]
	mov [esp+40h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0]
	mov eax, [esp+1Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+44h], ecx
	mov edx, [ebp+0]
	mov eax, [esi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+4]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+8]
	add ecx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0]
	lea ebx, [ecx+eax]
	mov eax, [edi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+4]
	mov eax, [edi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+8]
	add ecx, eax
	mov eax, [edi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	mov edx, [esp+0Ch]
	sub ebx, eax
	mov eax, [edi+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [edi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ecx, eax
	mov eax, [edi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	mov edx, [esp+3Ch]
	sub ebx, eax
	mov eax, [esi+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ecx, eax
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add ecx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	add ecx, ebx
	mov eax, [edi+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	mov eax, [esi+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ebx, eax
	mov edx, [esp+0Ch]
	mov [esp+54h], ebx
	mov eax, edx
	mov ebx, [edi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov [esp+50h], eax
	mov eax, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	add edx, eax
	mov [esp+50h], edx
	mov edx, [esp+14h]
	mov eax, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, [esp+50h]
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+54h]
	sar eax, 1
	add edx, eax
	mov [esp+54h], edx
	mov edx, [esp+3Ch]
	mov eax, edx
	mov ebx, [esi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov [esp+50h], eax
	mov eax, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	add edx, eax
	mov [esp+50h], edx
	mov edx, [esp+44h]
	mov eax, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, [esp+50h]
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [esp+54h]
	sar eax, 1
	add ebx, eax
	mov eax, ecx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, eax
	mov ebx, [esi+0B4h]
	mov eax, [edi+0B4h]
	add eax, ebx
	mov edx, [ebp+0]
	mov [esp+50h], eax
	mov eax, [edi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ebp+4]
	mov eax, [edi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+8]
	add ebx, eax
	mov eax, [edi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0]
	add ebx, eax
	mov eax, [esi+0A8h]
	mov [esp+54h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ebp+4]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+8]
	add ebx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+54h]
	add eax, ebx
	sub edx, eax
	mov eax, edx
	mov edx, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+4Ch], eax
	test ecx, ecx
	jge loc_455F7C
	xor eax, eax
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret

loc_455F7C:
	mov eax, 8CCCh
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov [esp+48h], eax
	mov edx, [ebp+0]
	mov dword [dword_4D6270], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+54h], eax
	mov [esp+24h], eax
	mov edx, [ebp+4]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+50h], eax
	mov [esp+28h], eax
	mov edx, [ebp+8]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+54h]
	mov ecx, eax
	mov [esp+2Ch], eax
	mov eax, [edi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	mov ebp, eax
	mov [esp+30h], eax
	mov eax, [edi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+50h], eax
	mov [esp+34h], eax
	mov edx, ecx
	mov eax, [edi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+38h], eax
	mov edx, [edi+0A8h]
	mov ecx, [edi+0ACh]
	add edx, ebp
	mov ebp, [edi+0B0h]
	mov [edi+0A8h], edx
	mov edx, [esp+50h]
	add ebp, eax
	mov eax, ebx
	mov [edi+0B0h], ebp
	add ecx, edx
	mov edx, [edi+0B8h]
	mov [edi+0ACh], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jle loc_4563DF
	mov eax, ebx
	mov edx, [edi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_45607F:
	mov dword [edi+168h], 50001h
	mov [edi+160h], eax
	mov [edi+164h], esi
	mov edx, [esp+24h]
	mov eax, [esi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ebx, eax
	mov [esp+30h], eax
	mov eax, [esi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	mov ecx, eax
	mov [esp+34h], eax
	mov eax, [esi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+38h], eax
	mov edx, [esi+0A8h]
	mov ebp, [esi+0B0h]
	sub edx, ebx
	sub ebp, eax
	mov [esi+0A8h], edx
	mov eax, [esp+4Ch]
	mov ebx, [esi+0ACh]
	mov [esi+0B0h], ebp
	sub ebx, ecx
	mov edx, [esi+0B8h]
	mov [esi+0ACh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jle loc_4563F8
	mov eax, [esp+4Ch]
	mov edx, [esi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_45613B:
	mov dword [esi+168h], 50001h
	mov edx, [esp+2Ch]
	mov [esi+160h], eax
	mov eax, [esp+4]
	mov [esi+164h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	sub ecx, eax
	mov eax, [esp+8]
	mov [esp+30h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	mov ecx, eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	sub ecx, eax
	mov eax, [esp]
	mov [esp+34h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	mov ecx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+30h]
	sub ecx, eax
	mov eax, [edi+0F8h]
	mov [esp+38h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ecx, eax
	mov [esp+30h], eax
	mov eax, [edi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	mov ebx, eax
	mov [esp+34h], eax
	mov eax, [edi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [edi+0E8h]
	mov [esp+38h], eax
	add edx, ecx
	mov ecx, [edi+0ECh]
	mov [edi+0E8h], edx
	mov edx, [esp+2Ch]
	add ecx, ebx
	mov ebx, [edi+0F0h]
	mov [edi+0ECh], ecx
	add ebx, eax
	mov eax, [esp+1Ch]
	mov [edi+0F0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ecx, eax
	mov eax, [esp+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	sub ecx, eax
	mov eax, [esp+20h]
	mov [esp+30h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	mov ecx, eax
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	sub ecx, eax
	mov eax, [esp+18h]
	mov [esp+34h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	mov ecx, eax
	mov eax, [esp+1Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+38h], ecx
	mov edx, [esp+30h]
	mov eax, [esi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ecx, eax
	mov [esp+30h], eax
	mov eax, [esi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	mov ebx, eax
	mov [esp+34h], eax
	mov eax, [esi+0F8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [esi+0E8h]
	sub ebp, ecx
	mov edx, [esi+0ECh]
	mov [esi+0E8h], ebp
	sub edx, ebx
	mov ecx, [esi+0F0h]
	mov [esi+0ECh], edx
	sub ecx, eax
	mov [esi+0F0h], ecx
	inc word [edi+14Ch]
	inc word [esi+14Ch]
	mov edx, [edi+9Ch]
	mov ebx, [esi+9Ch]
	add edx, ebx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esi+170h], eax
	mov [edi+170h], eax
	mov edx, [edi+0A0h]
	mov ebp, [esi+0A0h]
	add edx, ebp
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esi+174h], eax
	mov [edi+174h], eax
	mov edx, [edi+0A4h]
	mov eax, [esi+0A4h]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+48h]
	push edx
	mov ecx, [esp+30h]
	push ecx
	mov ebx, [esp+30h]
	mov [esi+178h], eax
	push ebx
	mov ebp, [esp+30h]
	mov [edi+178h], eax
	push ebp
	mov edx, esi
	mov eax, edi
	call sub_478E10
	mov eax, 1
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret

loc_4563DF:
	mov eax, ebx
	mov edx, [edi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	jmp loc_45607F

loc_4563F8:
	mov eax, [esp+4Ch]
	mov edx, [esi+0B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	jmp loc_45613B
;sub_455B60 endp

sub_456420: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 5Ch
	mov ebp, eax
	mov ecx, edx
	mov [esp+4Ch], ebx
	xor edx, edx
	mov [esp+54h], edx
	mov edx, [eax+0E8h]
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0ECh]
	mov [ebp+0E8h], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	mov [ebp+0ECh], eax
	mov eax, 6487Eh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ebp+0F0h], eax
	cmp dword [ecx], 0
	jnz loc_45649E
	cmp dword [ecx+4], 0
	jnz loc_45649E
	cmp dword [ecx+8], 0
	jnz loc_45649E
	mov dword [ecx+4], 10000h

loc_45649E:
	xor eax, eax
	mov edx, [ebp+0C4h]
	mov dword [dword_4D6268], eax
	mov eax, [ecx]
	mov ebx, [ebp+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebp+0C8h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0CCh]
	add esi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebx
	add eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+0Ch], eax
	mov edx, [ebp+0D0h]
	mov eax, [ecx]
	mov edi, [ebp+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebp+0D4h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0D8h]
	add esi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+10h], eax
	mov edx, [ebp+0DCh]
	mov eax, [ecx]
	mov esi, [ebp+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [ebp+0E0h]
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0E4h]
	add edi, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esi
	add eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+14h], eax
	test ebx, ebx
	jl loc_4566FD
	mov ebx, 0FFFFFFFFh

loc_4565B0:
	cmp dword [esp+10h], 0
	jl loc_456707
	mov esi, 0FFFFFFFFh

loc_4565C0:
	cmp dword [esp+14h], 0
	jl loc_456711
	mov edi, 0FFFFFFFFh

loc_4565D0:
	mov eax, [ebp+9Ch]
	mov [esp+58h], eax
	mov eax, [esp+4Ch]
	mov edx, [esp+58h]
	sub edx, [eax]
	mov eax, [ebp+0A0h]
	mov [esp+58h], eax
	mov eax, [esp+4Ch]
	mov [esp+30h], edx
	mov edx, [esp+58h]
	sub edx, [eax+4]
	mov eax, [ebp+0A4h]
	mov [esp+58h], eax
	mov eax, [esp+4Ch]
	mov [esp+34h], edx
	mov edx, [esp+58h]
	mov eax, [eax+8]
	sub edx, eax
	mov [esp+38h], edx
	mov eax, [ecx]
	mov edx, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov [esp+58h], eax
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+58h]
	add edx, eax
	mov [esp+58h], edx
	mov eax, [ecx+8]
	mov edx, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+58h]
	add edx, eax
	mov eax, [esp+10h]
	imul eax, esi
	mov [esp+58h], eax
	mov eax, [esp+0Ch]
	imul eax, ebx
	mov [esp+48h], edx
	add eax, [esp+58h]
	mov edx, [esp+14h]
	imul edx, edi
	add eax, edx
	mov edx, [esp+48h]
	add edx, eax
	mov [esp+50h], edx
	mov dword [dword_4D626C], edx
	test edx, edx
	jl loc_45671B

loc_45669D:
	mov eax, 28BEh
	mov edx, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0ECh]
	mov [ebp+0E8h], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	mov [ebp+0ECh], eax
	mov eax, 28BEh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ebp+0F0h], eax
	mov eax, ebp
	call sub_456BA0
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4566FD:
	mov ebx, 1
	jmp loc_4565B0

loc_456707:
	mov esi, 1
	jmp loc_4565C0

loc_456711:
	mov edi, 1
	jmp loc_4565D0

loc_45671B:
	mov edx, [ebp+108h]
	mov eax, [ebp+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, [ebp+9Ch]
	add edx, eax
	mov [esp+58h], edx
	mov eax, [ebp+0D0h]
	mov edx, [ebp+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	mov edx, [esp+58h]
	add edx, eax
	mov [esp+58h], edx
	mov eax, [ebp+0DCh]
	mov edx, [ebp+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, edi
	mov edx, [esp+58h]
	add edx, eax
	mov [esp+24h], edx
	mov edx, [ebp+108h]
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, [ebp+0A0h]
	add edx, eax
	mov [esp+58h], edx
	mov eax, [ebp+0D4h]
	mov edx, [ebp+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	mov edx, [esp+58h]
	add edx, eax
	mov [esp+58h], edx
	mov eax, [ebp+0E0h]
	mov edx, [ebp+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, edi
	mov edx, [esp+58h]
	add edx, eax
	mov [esp+28h], edx
	mov edx, [ebp+108h]
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul ebx, eax
	mov edx, [ebp+0A4h]
	mov eax, [ebp+0D8h]
	add ebx, edx
	mov edx, [ebp+10Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	mov edx, [ebp+110h]
	add ebx, eax
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, edi
	add ebx, eax
	mov eax, [esp+50h]
	mov [esp+2Ch], ebx
	mov ebx, [esp+54h]
	neg eax
	cmp eax, ebx
	jle loc_45685E
	mov [esp+54h], eax

loc_45685E:
	cmp dword [dword_4D6264], 0
	jz loc_4568E5
	mov edi, [esp+54h]
	test edi, edi
	jz loc_4568E5
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, [ecx]
	mov edx, esi
	mov ebx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov [esp], eax
	mov edx, [ecx+4]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov [esp+4], eax
	mov edx, [ecx+8]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+9Ch]
	add edx, esi
	mov ebx, [ebp+0A0h]
	mov [ebp+9Ch], edx
	add ebx, edi
	mov esi, [ebp+0A4h]
	mov [ebp+0A0h], ebx
	add esi, eax
	mov [esp+8], eax
	mov [ebp+0A4h], esi

loc_4568E5:
	mov eax, [esp+24h]
	sub eax, [ebp+9Ch]
	mov edx, [ebp+0A0h]
	mov [esp+3Ch], eax
	mov eax, [esp+28h]
	sub eax, edx
	mov ebx, [ebp+0A4h]
	mov [esp+40h], eax
	mov eax, [esp+2Ch]
	sub eax, ebx
	mov [esp+44h], eax
	mov edx, [esp+44h]
	mov eax, [ebp+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ebx, eax
	mov eax, [ebp+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov [esp+18h], ebx
	mov edx, [esp+3Ch]
	mov eax, [ebp+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov ebx, eax
	mov eax, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov [esp+1Ch], ebx
	mov edx, [esp+40h]
	mov eax, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	mov ebx, eax
	mov eax, [ebp+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov [esp+20h], ebx
	mov esi, [esp+18h]
	mov eax, [ebp+0A8h]
	add esi, eax
	mov [esp+18h], esi
	mov edi, [esp+1Ch]
	mov eax, [ebp+0ACh]
	add edi, eax
	mov [esp+1Ch], edi
	mov eax, [ebp+0B0h]
	lea edx, [ebx+eax]
	mov [esp+20h], edx
	mov edx, esi
	mov eax, [ecx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [ecx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [ecx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jl loc_456A91

loc_456A0E:
	cmp dword [dword_4D6264], 0
	jz loc_45669D
	cmp dword [esp+54h], 0
	jz loc_45669D
	mov edx, [esp+4]
	test edx, edx
	jle loc_45669D
	mov eax, 9CCCCh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea ecx, [eax+eax]
	mov eax, [ebp+0ACh]
	mov edx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp ecx, eax
	jg loc_456B6F
	sub eax, ecx
	cmp dword [ebp+0ACh], 0
	jg loc_456B7E
	bsr ecx, eax
	jz loc_456A84
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_456A84:
	neg eax
	mov [ebp+0ACh], eax
	jmp loc_45669D

loc_456A91:
	lea ebx, [esp+18h]
	lea edx, [esp+24h]
	mov eax, ebp
	call sub_456C40
	mov edx, [esp+44h]
	mov eax, [ebp+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ecx, eax
	mov eax, [ebp+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+18h], ecx
	mov edx, [esp+3Ch]
	mov eax, [ebp+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov ecx, eax
	mov eax, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+1Ch], ecx
	mov edx, [esp+40h]
	mov eax, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	mov ecx, eax
	mov eax, [ebp+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+20h], ecx
	mov ecx, [esp+18h]
	mov eax, [ebp+0A8h]
	add ecx, eax
	mov [esp+18h], ecx
	mov ebx, [esp+1Ch]
	mov eax, [ebp+0ACh]
	add ebx, eax
	mov [esp+1Ch], ebx
	mov esi, [esp+20h]
	add esi, [ebp+0B0h]
	mov edi, dword_511F58
	mov [esp+20h], esi
	lea esi, [esp+18h]
	movsd
	movsd
	movsd
	jmp loc_456A0E

loc_456B6F:
	mov dword [ebp+0ACh], 0
	jmp loc_45669D

loc_456B7E:
	bsr ecx, eax
	jz loc_456B95
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_456B95:
	mov [ebp+0ACh], eax
	jmp loc_45669D
;sub_456420 endp

sub_456BA0: ;SUBROUTINE
	push edx
	push esi
	mov edx, [eax+0E8h]
	test edx, edx
	jl loc_456BFC
	cmp edx, 1CCCCh
	jle loc_456BB9
	mov edx, 1CCCCh

loc_456BB9:
	mov [eax+0E8h], edx
	mov esi, [eax+0ECh]
	test esi, esi
	jl loc_456C0B
	cmp esi, 1CCCCh
	jle loc_456C13
	mov edx, 1CCCCh

loc_456BD6:
	mov [eax+0ECh], edx
	mov edx, [eax+0F0h]
	test edx, edx
	jl loc_456C1E
	cmp edx, 1CCCCh
	jle loc_456BF3
	mov edx, 1CCCCh

loc_456BF3:
	mov [eax+0F0h], edx
	pop esi
	pop edx
	ret

loc_456BFC:
	cmp edx, 0FFFE3334h
	jg loc_456BB9
	mov edx, 0FFFE3334h
	jmp loc_456BB9

loc_456C0B:
	cmp esi, 0FFFE3334h
	jle loc_456C17

loc_456C13:
	mov edx, esi
	jmp loc_456BD6

loc_456C17:
	mov edx, 0FFFE3334h
	jmp loc_456BD6

loc_456C1E:
	cmp edx, 0FFFE3334h
	jg loc_456BF3
	mov edx, 0FFFE3334h
	mov [eax+0F0h], edx
	pop esi
	pop edx
	ret
;sub_456BA0 endp

sub_456C40: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 80h
	mov ebp, eax
	mov [esp+78h], edx
	lea edi, [esp+54h]
	mov esi, ebx
	movsd
	movsd
	movsd
	lea edi, [esp+18h]
	mov esi, ecx
	xor edx, edx
	movsd
	movsd
	movsd
	mov [esp+74h], edx
	mov edx, [eax+0A8h]
	mov eax, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0ACh]
	mov eax, [esp+1Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0B0h]
	add ecx, eax
	mov eax, [esp+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea esi, [ecx+eax]
	mov eax, [esp+78h]
	mov ecx, [ebp+9Ch]
	mov eax, [eax]
	sub eax, ecx
	mov [esp+48h], eax
	mov eax, [esp+78h]
	mov ebx, [ebp+0A0h]
	mov eax, [eax+4]
	sub eax, ebx
	mov [esp+4Ch], eax
	mov eax, [esp+78h]
	mov edi, [ebp+0A4h]
	mov eax, [eax+8]
	sub eax, edi
	mov edx, [esp+20h]
	mov [esp+50h], eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ecx, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	sub ecx, eax
	mov eax, [esp+50h]
	mov [esp+30h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	mov ecx, eax
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	sub ecx, eax
	mov eax, [esp+48h]
	mov [esp+34h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	mov ecx, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+38h], ecx
	mov edx, [esp+30h]
	mov eax, [ebp+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+34h]
	mov ecx, eax
	mov eax, [ebp+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+38h]
	add ecx, eax
	mov eax, [ebp+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edi, [ecx+eax]
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, eax
	mov edx, [ebp+0F8h]
	lea eax, [esp+30h]
	add edx, edx
	call sub_45EA40
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebx, [ecx+eax]
	lea eax, [esi+edi]
	neg eax
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, 6666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+7Ch], eax
	cmp dword [esp+1Ch], 0B333h
	jge loc_4573E4
	test esi, esi
	jle loc_4573DD

loc_456E2D:
	lea ecx, 0[esi*4]
	sub ecx, esi
	add ecx, ecx
	mov [ebp+160h], ecx

loc_456E3E:
	mov esi, [esp+78h]
	mov eax, [ebp+184h]
	mov dword [ebp+164h], 0
	or eax, 30000h
	lea edi, [ebp+170h]
	mov [ebp+168h], eax
	mov edx, [esp+54h]
	movsd
	movsd
	movsd
	test edx, edx
	jnz loc_457406
	cmp dword [esp+58h], 0
	jnz loc_457406
	cmp dword [esp+5Ch], 0
	jnz loc_457406

loc_456E88:
	mov edx, [esp+7Ch]
	mov eax, 0CCCCh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov ebx, eax
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+70h], eax
	mov [esp+24h], eax
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+68h], eax
	mov [esp+28h], eax
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+6Ch], eax
	mov [esp+2Ch], eax
	mov edx, [ebp+0F8h]
	mov eax, esi
	add edx, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	mov ecx, eax
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4Ch]
	mov edi, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	sub edi, eax
	mov eax, [esp+5Ch]
	mov [esp+3Ch], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	mov edi, eax
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4Ch]
	sub edi, eax
	mov eax, [esp+54h]
	mov [esp+40h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	mov edi, eax
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub edi, eax
	mov [esp+44h], edi
	mov edx, [esp+50h]
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4Ch]
	mov edi, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	sub edi, eax
	mov eax, [esp+44h]
	mov [esp+3Ch], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+50h]
	mov edi, eax
	mov eax, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4Ch]
	sub edi, eax
	mov eax, [esp+3Ch]
	mov [esp+40h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+48h]
	mov edi, eax
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	sub edi, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov [esp+60h], eax
	mov [esp+3Ch], eax
	mov eax, ecx
	mov [esp+44h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov edi, eax
	mov [esp+40h], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+70h]
	mov ecx, [esp+60h]
	add edx, ecx
	mov [esp+24h], edx
	mov edx, [esp+68h]
	add edx, edi
	mov [esp+28h], edx
	mov edx, [esp+6Ch]
	add edx, eax
	mov eax, [esp+24h]
	mov [esp+2Ch], edx
	mov edx, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+58h]
	mov ecx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	add ecx, eax
	mov eax, [esp+2Ch]
	mov edi, [esp+74h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	cmp eax, edi
	jle loc_457123
	mov ebx, eax
	mov eax, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax

loc_457123:
	mov edx, [esp+54h]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+58h]
	mov edi, eax
	mov [esp+54h], eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	mov esi, eax
	mov [esp+58h], eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+64h], eax
	mov eax, [esp+7Ch]
	test eax, eax
	jle loc_4573D3
	mov edx, [esp+18h]
	mov dword [dword_4D6268], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov [esp], eax
	mov eax, [esp+7Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	mov ecx, eax
	mov [esp+4], eax
	mov eax, [esp+7Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov [esp+8], eax
	add edx, eax
	mov eax, [ebp+0B8h]
	mov [esp+8], edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ebx, edi
	mov edx, ebx
	mov [esp], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+0Ch], eax
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ecx, esi
	mov edx, ecx
	mov [esp+4], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov [esp+10h], eax
	mov eax, [ebp+0B8h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+14h], eax
	mov edx, [ebp+0A8h]
	mov esi, [ebp+0B0h]
	add edx, ebx
	add esi, eax
	mov [ebp+0A8h], edx
	mov eax, [esp+4Ch]
	mov ebx, [ebp+0ACh]
	mov [ebp+0B0h], esi
	add ebx, ecx
	mov edx, [esp+8]
	mov [ebp+0ACh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ecx, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	sub ecx, eax
	mov eax, [esp+50h]
	mov [esp+0Ch], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	mov ecx, eax
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	sub ecx, eax
	mov eax, [esp+48h]
	mov [esp+10h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ecx, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp+14h], ecx
	mov edx, [esp+8]
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ecx, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	sub ecx, eax
	mov eax, [esp+50h]
	mov [esp+0Ch], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	mov ecx, eax
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	sub ecx, eax
	mov eax, [esp+48h]
	mov [esp+10h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ecx, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov eax, [ebp+0F8h]
	mov edx, [esp+0Ch]
	add eax, eax
	mov [esp+14h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov [esp+0Ch], eax
	mov eax, [ebp+0F8h]
	mov edx, [esp+10h]
	add eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+10h], eax
	mov eax, [ebp+0F8h]
	mov edx, [esp+14h]
	add eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ebp+0E8h]
	add edi, ecx
	mov edx, [ebp+0ECh]
	mov [ebp+0E8h], edi
	add edx, ebx
	mov ecx, [ebp+0F0h]
	mov [ebp+0ECh], edx
	add ecx, eax
	mov [ebp+0F0h], ecx

loc_4573D3:
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	ret

loc_4573DD:
	neg esi
	jmp loc_456E2D

loc_4573E4:
	test esi, esi
	jle loc_4573F6
	shl esi, 2
	mov [ebp+160h], esi
	jmp loc_456E3E

loc_4573F6:
	neg esi
	shl esi, 2
	mov [ebp+160h], esi
	jmp loc_456E3E

loc_457406:
	mov edx, [esp+18h]
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ecx, eax
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ecx, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov edx, [esp+18h]
	mov eax, ecx
	mov esi, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	sub esi, eax
	mov eax, ecx
	mov edi, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	sub edi, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub [esp+5Ch], eax
	mov eax, esi
	mov edx, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, edi
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	add ecx, eax
	mov eax, edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	bsr ecx, eax
	jz loc_4574CB
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_4574CB:
	mov edx, eax
	sar edx, 1Fh
	mov [esp+74h], eax
	sub eax, edx
	sar eax, 1
	mov [esp+54h], esi
	mov [esp+58h], edi
	test eax, eax
	jz loc_457541
	mov ebx, eax
	mov eax, 8000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, eax
	neg ecx
	mov edx, esi
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+54h], eax
	mov edx, edi
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	mov [esp+58h], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+5Ch], eax
	jmp loc_456E88

loc_457541:
	mov eax, 0FFFF0000h
	mov edx, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+54h], eax
	mov edx, edi
	mov eax, 0FFFF0000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+5Ch]
	mov [esp+58h], eax
	mov eax, 0FFFF0000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+5Ch], eax
	jmp loc_456E88
;sub_456C40 endp

sub_457590: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov eax, dword [dword_511EF4]
	imul eax, ecx
	mov edx, dword [dword_511F00]
	imul edx, esi
	add edx, eax
	mov eax, dword [dword_511F0C]
	imul eax, ebx
	add eax, edx
	mov edx, dword [dword_511EC0]
	sub eax, edx
	mov edx, dword [dword_511EF8]
	imul edx, ecx
	mov dword [dword_511F50], eax
	mov eax, dword [dword_511F04]
	imul eax, esi
	add edx, eax
	mov eax, dword [dword_511F10]
	imul eax, ebx
	add eax, edx
	mov edx, dword [dword_511EC4]
	sub eax, edx
	mov edx, dword [dword_511EFC]
	imul edx, ecx
	mov dword [dword_511F48], eax
	mov eax, dword [dword_511F08]
	imul eax, esi
	add edx, eax
	mov eax, dword [dword_511F14]
	imul eax, ebx
	add edx, eax
	mov eax, dword [dword_511EC8]
	sub edx, eax
	mov eax, dword [dword_511F3C]
	mov edi, [eax+110h]
	mov dword [dword_511F4C], edx
	cmp edx, edi
	jg loc_457669
	mov edx, edi
	mov ebp, dword [dword_511F4C]
	neg edx
	cmp edx, ebp
	jg loc_457669
	mov edx, dword [dword_511F50]
	mov edi, [eax+108h]
	cmp edx, edi
	jg loc_457669
	mov edx, edi
	mov ebp, dword [dword_511F50]
	neg edx
	cmp edx, ebp
	jg loc_457669
	mov edx, dword [dword_511F48]
	mov edi, [eax+10Ch]
	cmp edx, edi
	jg loc_457669
	mov eax, edi
	neg eax
	cmp eax, edx
	jle loc_457670

loc_457669:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_457670:
	mov eax, dword [dword_511F40]
	mov edx, [eax+108h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F40]
	add edi, [eax+9Ch]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	add edi, eax
	mov eax, dword [dword_511F44]
	mov [eax], edi
	mov eax, dword [dword_511F40]
	mov edx, [eax+108h]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F40]
	mov ebp, [eax+0A0h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, ebp
	add edi, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, edi
	mov [edx+4], eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+108h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul ecx, eax
	mov eax, dword [dword_511F40]
	add ecx, [eax+0A4h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add ecx, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	add ecx, eax
	mov eax, dword [dword_511F44]
	mov [eax+8], ecx
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_457590 endp

sub_4577D0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov eax, dword [dword_511ECC]
	imul eax, ecx
	mov edx, dword [dword_511ED0]
	imul edx, esi
	add edx, eax
	mov eax, dword [dword_511ED4]
	imul eax, ebx
	add eax, edx
	mov edx, dword [dword_511EB4]
	add eax, edx
	mov edx, dword [dword_511ED8]
	imul edx, ecx
	mov dword [dword_511F50], eax
	mov eax, dword [dword_511EDC]
	imul eax, esi
	add edx, eax
	mov eax, dword [dword_511EE0]
	imul eax, ebx
	add eax, edx
	mov edx, dword [dword_511EB8]
	add eax, edx
	mov edx, dword [dword_511EE4]
	imul edx, ecx
	mov dword [dword_511F48], eax
	mov eax, dword [dword_511EE8]
	imul eax, esi
	add edx, eax
	mov eax, dword [dword_511EEC]
	imul eax, ebx
	add edx, eax
	mov eax, dword [dword_511EBC]
	add edx, eax
	mov eax, dword [dword_511F40]
	mov edi, [eax+110h]
	mov dword [dword_511F4C], edx
	cmp edx, edi
	jg loc_4578A9
	mov edx, edi
	mov ebp, dword [dword_511F4C]
	neg edx
	cmp edx, ebp
	jg loc_4578A9
	mov edx, dword [dword_511F50]
	mov edi, [eax+108h]
	cmp edx, edi
	jg loc_4578A9
	mov edx, edi
	mov ebp, dword [dword_511F50]
	neg edx
	cmp edx, ebp
	jg loc_4578A9
	mov edx, dword [dword_511F48]
	mov edi, [eax+10Ch]
	cmp edx, edi
	jg loc_4578A9
	mov eax, edi
	neg eax
	cmp eax, edx
	jle loc_4578B0

loc_4578A9:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4578B0:
	mov eax, dword [dword_511F3C]
	mov edx, [eax+108h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F3C]
	add edi, [eax+9Ch]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	add edi, eax
	mov eax, dword [dword_511F44]
	mov [eax], edi
	mov eax, dword [dword_511F3C]
	mov edx, [eax+108h]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F3C]
	mov ebp, [eax+0A0h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, ebp
	add edi, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, edi
	mov [edx+4], eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+108h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul ecx, eax
	mov eax, dword [dword_511F3C]
	add ecx, [eax+0A4h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add ecx, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	add ecx, eax
	mov eax, dword [dword_511F44]
	mov [eax+8], ecx
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4577D0 endp

sub_457A10: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov esi, edx
	mov eax, dword [dword_511EF4]
	imul eax, ecx
	mov edx, dword [dword_511F00]
	imul edx, esi
	add edx, eax
	mov eax, dword [dword_511F0C]
	imul eax, ebx
	add edx, eax
	mov eax, dword [dword_511EC0]
	sub edx, eax
	mov eax, dword [dword_511F04]
	imul eax, esi
	mov dword [dword_511F50], edx
	mov edx, dword [dword_511EF8]
	imul edx, ecx
	add eax, edx
	mov edx, dword [dword_511F10]
	imul edx, ebx
	add eax, edx
	mov edx, dword [dword_511EC4]
	sub eax, edx
	mov edx, dword [dword_511F08]
	imul edx, esi
	mov dword [dword_511F48], eax
	mov eax, dword [dword_511EFC]
	imul eax, ecx
	add edx, eax
	mov eax, dword [dword_511F14]
	imul eax, ebx
	add edx, eax
	mov eax, dword [dword_511EC8]
	sub edx, eax
	mov eax, dword [dword_511F3C]
	mov edi, [eax+110h]
	mov dword [dword_511F4C], edx
	cmp edx, edi
	jg loc_457AED
	mov edx, edi
	mov ebp, dword [dword_511F4C]
	neg edx
	cmp edx, ebp
	jg loc_457AED
	mov edx, dword [dword_511F50]
	mov edi, [eax+108h]
	cmp edx, edi
	jg loc_457AED
	mov edx, edi
	mov ebp, dword [dword_511F50]
	neg edx
	cmp edx, ebp
	jg loc_457AED
	mov edx, dword [dword_511F48]
	mov edi, [eax+10Ch]
	cmp edx, edi
	jg loc_457AED
	mov eax, edi
	neg eax
	cmp eax, edx
	jle loc_457AF7

loc_457AED:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_457AF7:
	mov eax, dword [dword_511F40]
	mov edi, [eax+0C4h]
	imul edi, ecx
	mov edx, [eax+0D0h]
	imul edx, esi
	add edx, edi
	mov edi, [eax+0DCh]
	imul edi, ebx
	add edi, edx
	mov edx, dword [dword_511EF0]
	neg edi
	mov [edx], edi
	mov edi, [eax+0C8h]
	imul edi, ecx
	mov [esp], edi
	mov edi, [eax+0D4h]
	imul edi, esi
	mov ebp, [esp]
	add ebp, edi
	mov edi, [eax+0E0h]
	imul edi, ebx
	add edi, ebp
	neg edi
	mov [edx+4], edi
	mov edi, [eax+0CCh]
	imul edi, ecx
	mov [esp], edi
	mov edi, [eax+0D8h]
	imul edi, esi
	add edi, [esp]
	mov ebp, [eax+0E4h]
	imul ebp, ebx
	add edi, ebp
	neg edi
	mov [edx+8], edi
	mov edx, [eax+108h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F40]
	add edi, [eax+9Ch]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, edi
	mov [edx], eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+108h]
	mov eax, [eax+0C8h]
	mov edi, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul edi, eax
	mov eax, dword [dword_511F40]
	mov ebp, [eax+0A0h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, ebp
	add edi, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	lea edx, [edi+eax]
	mov eax, dword [dword_511F44]
	mov [eax+4], edx
	mov eax, dword [dword_511F40]
	mov edx, [eax+108h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul ecx, eax
	mov eax, dword [dword_511F40]
	add ecx, [eax+0A4h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add ecx, eax
	mov eax, dword [dword_511F40]
	mov edx, [eax+110h]
	mov eax, [eax+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, ecx
	mov [edx+8], eax
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_457A10 endp

sub_457CD0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov esi, edx
	mov eax, dword [dword_511ECC]
	imul eax, ecx
	mov edx, dword [dword_511ED0]
	imul edx, esi
	add edx, eax
	mov eax, dword [dword_511ED4]
	imul eax, ebx
	add edx, eax
	mov eax, dword [dword_511EB4]
	add edx, eax
	mov eax, dword [dword_511EDC]
	imul eax, esi
	mov dword [dword_511F50], edx
	mov edx, dword [dword_511ED8]
	imul edx, ecx
	add eax, edx
	mov edx, dword [dword_511EE0]
	imul edx, ebx
	add edx, eax
	mov eax, dword [dword_511EB8]
	add edx, eax
	mov eax, dword [dword_511EE8]
	imul eax, esi
	mov dword [dword_511F48], edx
	mov edx, dword [dword_511EE4]
	imul edx, ecx
	add eax, edx
	mov edx, dword [dword_511EEC]
	imul edx, ebx
	add edx, eax
	mov eax, dword [dword_511EBC]
	add edx, eax
	mov eax, dword [dword_511F40]
	mov edi, [eax+110h]
	mov dword [dword_511F4C], edx
	cmp edx, edi
	jg loc_457DAE
	mov edx, edi
	mov ebp, dword [dword_511F4C]
	neg edx
	cmp edx, ebp
	jg loc_457DAE
	mov edx, dword [dword_511F50]
	mov edi, [eax+108h]
	cmp edx, edi
	jg loc_457DAE
	mov edx, edi
	mov ebp, dword [dword_511F50]
	neg edx
	cmp edx, ebp
	jg loc_457DAE
	mov edx, dword [dword_511F48]
	mov edi, [eax+10Ch]
	cmp edx, edi
	jg loc_457DAE
	mov eax, edi
	neg eax
	cmp eax, edx
	jle loc_457DB8

loc_457DAE:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_457DB8:
	mov eax, dword [dword_511F3C]
	mov edx, [eax+0C4h]
	imul edx, ecx
	mov edi, [eax+0D0h]
	imul edi, esi
	add edi, edx
	mov edx, [eax+0DCh]
	imul edx, ebx
	add edi, edx
	mov edx, dword [dword_511EF0]
	mov [edx], edi
	mov edi, [eax+0C8h]
	imul edi, ecx
	mov [esp], edi
	mov edi, [eax+0D4h]
	imul edi, esi
	add edi, [esp]
	mov ebp, [eax+0E0h]
	imul ebp, ebx
	add edi, ebp
	mov [edx+4], edi
	mov edi, [eax+0CCh]
	imul edi, ecx
	mov [esp], edi
	mov edi, [eax+0D8h]
	imul edi, esi
	mov ebp, [esp]
	add ebp, edi
	mov edi, [eax+0E4h]
	imul edi, ebx
	add edi, ebp
	mov [edx+8], edi
	mov edx, [eax+108h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	imul edi, ecx
	mov eax, dword [dword_511F3C]
	add edi, [eax+9Ch]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, edi
	mov [edx], eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+108h]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	imul edx, eax
	mov eax, dword [dword_511F3C]
	mov edi, [eax+0A0h]
	add edi, edx
	mov edx, [eax+10Ch]
	mov eax, [eax+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add edi, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	mov edx, dword [dword_511F44]
	add eax, edi
	mov [edx+4], eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+108h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul ecx, eax
	mov eax, dword [dword_511F3C]
	mov edi, [eax+0A4h]
	mov edx, [eax+10Ch]
	mov eax, [eax+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, esi
	add ecx, edi
	add ecx, eax
	mov eax, dword [dword_511F3C]
	mov edx, [eax+110h]
	mov eax, [eax+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul eax, ebx
	lea edx, [ecx+eax]
	mov eax, dword [dword_511F44]
	mov [eax+8], edx
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_457CD0 endp

off_457F90: dd loc_45813B
	dd loc_45814C ; jump table for switch statement
	dd loc_458160
	dd loc_458171
	dd loc_458185
	dd loc_458196

sub_457FA8: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 10h
	and esp, 0FFFFFFF8h
	mov [esp+8], edx
	mov esi, ebx
	mov edi, ecx
	test ebx, ebx
	jle loc_458055
	test edx, edx
	jg loc_458072
	mov eax, [ebp+10h]
	mov [ecx], ebx
	mov [eax], ebx
	mov eax, [ebp+14h]
	mov [eax], ebx

loc_457FD7:
	mov esi, [edi] ; jumptable 00458134 default case
	cmp esi, 100h
	jle loc_4581AA

loc_457FE5:
	mov eax, [edi]
	cmp eax, 100h
	jle loc_457FF3
	mov eax, 100h

loc_457FF3:
	mov [edi], eax
	mov eax, [ebp+10h]
	mov edx, [eax]
	cmp edx, 100h
	jle loc_4581B9

loc_458006:
	mov eax, [ebp+10h]
	mov ecx, [eax]
	cmp ecx, 100h
	jle loc_4581C8
	mov eax, 100h

loc_45801C:
	mov edx, [ebp+10h]
	mov [edx], eax
	mov eax, [ebp+14h]
	mov ebx, [eax]
	cmp ebx, 100h
	jle loc_4581CF

loc_458032:
	mov eax, [ebp+14h]
	mov esi, [eax]
	cmp esi, 100h
	jle loc_4581E6
	mov eax, 100h
	mov edx, [ebp+14h]
	mov [edx], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_458055:
	mov eax, [ebp+10h]
	mov dword [ecx], 0
	mov dword [eax], 0
	mov eax, [ebp+14h]
	mov dword [eax], 0
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_458072:
	mov ecx, eax
	shl eax, 2
	sub eax, ecx
	add eax, eax
	sar eax, 8
	mov [esp+4], eax
	mov eax, ecx
	mov [esp+0Ch], eax
	mov eax, [esp+4]
	fild dword [esp+0Ch]
	shl eax, 8
	fmul qword [dbl_4CC5C4]
	mov [esp+0Ch], eax
	fild dword [esp+0Ch]
	fsubp st1, st0
	mov ebx, 100h
	call __CHP
	fistp dword [esp+0Ch]
	mov eax, [esp+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, [esp+8]
	mov ebx, eax
	mov eax, 100h
	sub eax, ecx
	mov ecx, eax
	imul ecx, esi
	mov edx, ebx
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 100h
	sub edx, eax
	mov eax, edx
	imul eax, esi
	mov edx, 10000h
	sar eax, 8
	sub edx, ebx
	mov [esp], eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 100h
	sub edx, eax
	mov eax, edx
	imul eax, esi
	sar ecx, 8
	mov ebx, [esp+4]
	sar eax, 8
	cmp ebx, 5 ; switch 6 cases
	ja loc_457FD7 ; jumptable 00458134 default case
	mov edx, ebx
	jmp off_457F90[edx*4] ; switch jump

loc_45813B:
	mov edx, [ebp+10h] ; jumptable 00458134 case 0
	mov [edi], esi
	mov [edx], eax
	mov eax, [ebp+14h]
	mov [eax], ecx
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_45814C:
	mov eax, [esp] ; jumptable 00458134 case 1
	mov [edi], eax
	mov eax, [ebp+10h]
	mov [eax], esi
	mov eax, [ebp+14h]
	mov [eax], ecx
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_458160:
	mov edx, [ebp+10h] ; jumptable 00458134 case 2
	mov [edi], ecx
	mov [edx], esi
	mov edx, [ebp+14h]
	mov [edx], eax
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_458171:
	mov edx, [ebp+10h] ; jumptable 00458134 case 3
	mov eax, [esp]
	mov [edi], ecx
	mov [edx], eax
	mov eax, [ebp+14h]
	mov [eax], esi
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_458185:
	mov [edi], eax ; jumptable 00458134 case 4
	mov eax, [ebp+10h]
	mov [eax], ecx
	mov eax, [ebp+14h]
	mov [eax], esi
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_458196:
	mov eax, [ebp+10h] ; jumptable 00458134 case 5
	mov [edi], esi
	mov edx, [ebp+14h]
	mov [eax], ecx
	mov eax, [esp]
	mov [edx], eax
	jmp loc_457FD7 ; jumptable 00458134 default case

loc_4581AA:
	test esi, esi
	jge loc_457FE5
	xor eax, eax
	jmp loc_457FF3

loc_4581B9:
	test edx, edx
	jge loc_458006
	xor eax, eax
	jmp loc_45801C

loc_4581C8:
	mov eax, ecx
	jmp loc_45801C

loc_4581CF:
	test ebx, ebx
	jge loc_458032
	xor eax, eax
	mov edx, [ebp+14h]
	mov [edx], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4581E6:
	mov eax, esi
	mov edx, [ebp+14h]
	mov [edx], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_457FA8 endp

sub_458200: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov edi, edx
	mov esi, ecx
	cmp edx, ebx
	jle loc_45834D
	mov eax, edx

loc_458216:
	cmp ebp, eax
	jle loc_458354
	mov eax, ebp

loc_458220:
	mov [esp], eax
	cmp edi, ebx
	jge loc_458366
	mov eax, edi

loc_45822D:
	cmp ebp, eax
	jge loc_45836D
	mov eax, ebp

loc_458237:
	mov ecx, [esp]
	mov edx, [esp+18h]
	sub ecx, eax
	mov eax, [esp]
	mov [edx], eax
	mov eax, [esp+14h]
	mov dword [eax], 0
	mov edx, [esp]
	mov dword [esi], 0
	test edx, edx
	jz loc_4582B3
	test ecx, ecx
	jz loc_4582B3
	mov edx, ecx
	shl edx, 8
	mov eax, edx
	sar edx, 1Fh
	idiv dword [esp]
	mov edx, [esp+14h]
	mov [edx], eax
	mov eax, [esp]
	cmp ebp, eax
	jnz loc_45837F
	mov eax, edi
	sub eax, ebx
	mov ebx, ecx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx

loc_458299:
	mov [esi], eax
	mov eax, [esi]
	mov edx, eax
	mov ecx, 6
	sar edx, 1Fh
	idiv ecx
	mov [esi], eax
	test eax, eax
	jl loc_4583CD

loc_4582B3:
	mov eax, 100h
	mov edx, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi], eax
	cmp eax, 100h
	jle loc_4583D6

loc_4582D1:
	mov edi, [esi]
	cmp edi, 100h
	jle loc_4583E5
	mov eax, 100h

loc_4582E4:
	mov [esi], eax
	mov eax, [esp+14h]
	mov ebp, [eax]
	cmp ebp, 100h
	jle loc_4583EC

loc_4582F8:
	mov eax, [esp+14h]
	mov edx, [eax]
	cmp edx, 100h
	jle loc_4583FB
	mov eax, 100h

loc_45830F:
	mov edx, [esp+14h]
	mov [edx], eax
	mov eax, [esp+18h]
	mov ecx, [eax]
	cmp ecx, 100h
	jle loc_458402

loc_458327:
	mov eax, [esp+18h]
	mov ebx, [eax]
	cmp ebx, 100h
	jle loc_45841B
	mov eax, 100h
	mov edx, [esp+18h]
	mov [edx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45834D:
	mov eax, ebx
	jmp loc_458216

loc_458354:
	cmp edi, ebx
	jle loc_45835F
	mov eax, edi
	jmp loc_458220

loc_45835F:
	mov eax, ebx
	jmp loc_458220

loc_458366:
	mov eax, ebx
	jmp loc_45822D

loc_45836D:
	cmp edi, ebx
	jge loc_458378
	mov eax, edi
	jmp loc_458237

loc_458378:
	mov eax, ebx
	jmp loc_458237

loc_45837F:
	cmp edi, eax
	jnz loc_4583A8
	mov eax, ebx
	mov ebx, ecx
	sub eax, ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	add eax, 20000h
	jmp loc_458299

loc_4583A8:
	mov eax, ebp
	mov ebx, ecx
	sub eax, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	add eax, 40000h
	jmp loc_458299

loc_4583CD:
	inc word [esi+2]
	jmp loc_4582B3

loc_4583D6:
	test eax, eax
	jge loc_4582D1
	xor eax, eax
	jmp loc_4582E4

loc_4583E5:
	mov eax, edi
	jmp loc_4582E4

loc_4583EC:
	test ebp, ebp
	jge loc_4582F8
	xor eax, eax
	jmp loc_45830F

loc_4583FB:
	mov eax, edx
	jmp loc_45830F

loc_458402:
	test ecx, ecx
	jge loc_458327
	xor eax, eax
	mov edx, [esp+18h]
	mov [edx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45841B:
	mov eax, ebx
	mov edx, [esp+18h]
	mov [edx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_458200 endp

sub_458430: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov edi, eax
	mov esi, ebx
	mov ebp, ecx
	mov eax, edx
	mov byte byte_511F64[eax], 1
	lea edx, [esp+24h]
	lea ecx, [esp+20h]
	push edx
	lea ebx, [esp+20h]
	lea edx, [esp+1Ch]
	call sub_458670
	lea eax, [esp+14h]
	lea ecx, [esp+0Ch]
	mov ebx, [esp+20h]
	push eax
	lea eax, [esp+14h]
	mov edx, [esp+20h]
	push eax
	mov eax, [esp+20h]
	xor edi, edi
	call sub_457FA8
	test ebp, ebp
	jle loc_4584CC

loc_458483:
	xor eax, eax
	mov al, [esi]
	mov [esp], eax
	xor eax, eax
	mov al, [esi+1]
	mov [esp+4], eax
	xor eax, eax
	mov al, [esi+2]
	mov edx, [esp]
	mov [esp+8], eax
	cmp edx, 56h
	jge loc_4584C4
	cmp dword [esp+4], 80h
	jl loc_4584C4
	cmp eax, 56h
	jge loc_4584C4
	lea ebx, [esp+0Ch]
	mov edx, [esp+24h]
	mov eax, esp
	mov ecx, esi
	call sub_4584E0

loc_4584C4:
	inc edi
	add esi, 3
	cmp edi, ebp
	jl loc_458483

loc_4584CC:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	ret
;sub_458430 endp

sub_4584E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov edi, edx
	mov ebp, [eax+4]
	sub ebp, 80h
	mov eax, ebp
	sub eax, edx
	mov [esp+10h], eax
	test eax, eax
	jle loc_458610
	mov eax, [ebx]
	shl eax, 2
	cmp eax, 0FFh
	jle loc_458514
	mov eax, 0FFh

loc_458514:
	mov [esp], eax
	mov eax, [ebx+4]
	shl eax, 2
	cmp eax, 0FFh
	jle loc_458529
	mov eax, 0FFh

loc_458529:
	mov [esp+4], eax
	mov eax, [ebx+8]
	shl eax, 2
	cmp eax, 0FFh
	jle loc_458640
	mov dword [esp+0Ch], 0FFh

loc_458546:
	mov eax, [esp+0Ch]
	mov edx, [esp]
	mov [esp+8], eax
	sub edx, [ebx]
	imul edx, [esp+10h]
	mov eax, 7Fh
	sub eax, edi
	mov edi, eax
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	add eax, [ebx]
	mov [ecx], al
	mov edx, [esp+4]
	sub edx, [ebx+4]
	mov eax, [esp+10h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	add eax, [ebx+4]
	mov [ecx+1], al
	mov edx, [esp+0Ch]
	sub edx, [ebx+8]
	mov eax, [esp+10h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	add eax, [ebx+8]

loc_45859F:
	mov [ecx+2], al
	mov ebx, [esi]
	test ebx, ebx
	jle loc_458609
	cmp dword [esi+8], 0
	jle loc_458609
	mov eax, ebx
	shl ebx, 2
	sub ebx, eax
	xor edx, edx
	mov eax, ebx
	mov dl, [ecx]
	sar eax, 1
	add eax, edx
	cmp eax, 0FFh
	jle loc_4585CB
	mov eax, 0FFh

loc_4585CB:
	mov [ecx], al
	xor eax, eax
	sar ebp, 1
	mov al, [ecx+1]
	add eax, ebp
	cmp eax, 0FFh
	jle loc_4585E2
	mov eax, 0FFh

loc_4585E2:
	mov [ecx+1], al
	mov eax, [esi+8]
	lea ebx, 0[eax*4]
	sub ebx, eax
	xor eax, eax
	sar ebx, 1
	mov al, [ecx+2]
	add eax, ebx
	cmp eax, 0FFh
	jle loc_458606
	mov eax, 0FFh

loc_458606:
	mov [ecx+2], al

loc_458609:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret

loc_458610:
	mov edx, [ebx]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [ecx], al
	mov edx, [ebx+4]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [ecx+1], al
	mov edx, [ebx+8]
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	jmp loc_45859F

loc_458640:
	mov [esp+0Ch], eax
	jmp loc_458546
;sub_4584E0 endp

sub_458650: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D69BC]
	test edx, edx
	jnz loc_45865D
	pop edx
	ret

loc_45865D:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D69BC], ecx
	pop ecx
	pop edx
	ret
;sub_458650 endp

sub_458670: ;SUBROUTINE
	push esi
	shl eax, 4
	mov esi, dword dword_4D62C8[eax]
	mov [edx], esi
	mov edx, dword dword_4D62CC[eax]
	mov [ebx], edx
	mov edx, dword dword_4D62D0[eax]
	mov [ecx], edx
	mov edx, [esp+8]
	mov eax, dword dword_4D62D4[eax]
	mov [edx], eax
	pop esi
	ret 4
;sub_458670 endp

sub_4586A0: ;SUBROUTINE
	push edx
	xor eax, eax

loc_4586A3:
	inc eax
	xor dl, dl
	mov byte byte_511F63[eax], dl
	cmp eax, 59h
	jl loc_4586A3
	pop edx
	ret
;sub_4586A0 endp

sub_4586C0: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	cmp esi, dword [dword_511FCC]
	jnb loc_4586D6
	mov eax, [ecx+esi*4]
	add eax, ecx
	pop esi
	pop ecx
	ret

loc_4586D6:
	mov eax, [ecx+esi*4]
	add eax, ecx
	pop esi
	pop ecx
	ret
;sub_4586C0 endp

sub_458700: ;SUBROUTINE
	cmp eax, dword [dword_511FD0]
	jnz loc_45870E
	mov eax, dword [dword_511FCC]
	ret

loc_45870E:
	mov eax, dword [dword_511FCC]
	ret
;sub_458700 endp

sub_458730: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	cmp eax, dword [dword_511FD0]
	jnz loc_45873F

loc_45873F:
	mov edx, 10h
	mov eax, ecx
	call sub_487968
	mov ebx, dword [dword_511FC8]
	mov edx, esi
	mov eax, ecx
	sub ebx, 10h
	call sub_487958
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret
;sub_458730 endp

sub_458780: ;SUBROUTINE
	cmp eax, dword [dword_511FD0]
	jnz loc_45878E
	mov eax, dword [dword_511FC8]
	ret

loc_45878E:
	mov eax, dword [dword_511FC8]
	ret
;sub_458780 endp

sub_4587B0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp eax, dword [dword_511FD0]
	jnz loc_4587CC
	mov eax, ecx
	xor ecx, ecx
	call sub_487950
	mov dword [dword_511FD0], ecx
	pop ecx
	ret

loc_4587CC:
	mov eax, ecx
	xor ecx, ecx
	call sub_487950
	mov dword [dword_511FD0], ecx
	pop ecx
	ret
;sub_4587B0 endp

sub_458800: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 8
	mov esi, eax
	cmp dword [dword_511FD0], 0
	jz loc_458829
	push aCol_opencolfil ; "Col_OpenColFile: ERROR: collection file"...
	call sub_48EC20
	add esp, 4
	mov eax, dword [dword_511FD0]
	call sub_4587B0

loc_458829:
	lea ecx, [esp+4]
	mov ebx, esp
	mov edx, dword_511FD0
	mov eax, esi
	call sub_4877B4
	mov ebx, 10h
	mov edx, dword_511FC0
	mov eax, dword [dword_511FD0]
	call sub_487958
	test eax, eax
	jnz loc_45887D
	push eax
	push aCol_opencolf_0 ; "Col_OpenColFile: ERROR: rc:%d\n"
	call sub_48EC20
	add esp, 8

loc_458861:
	mov eax, dword [dword_511FD0]
	xor ebx, ebx
	call sub_487950
	mov dword [dword_511FD0], ebx
	xor eax, eax
	add esp, 8
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45887D:
	mov ebx, 4
	mov edx, aColl ; "COLL"
	mov eax, dword_511FC0
	call strncmp_
	test eax, eax
	jnz loc_4588AB
	cmp dword [dword_511FC4], 0Bh
	jnz loc_4588BA
	mov eax, dword [dword_511FD0]
	add esp, 8
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4588AB:
	push aCol_opencolf_1 ; "Col_OpenColFile: ERROR: #2"
	call sub_48EC20
	add esp, 4
	jmp loc_458861

loc_4588BA:
	push aCol_opencolf_2 ; "Col_OpenColFile: ERROR: #3"
	call sub_48EC20
	add esp, 4
	jmp loc_458861
;sub_458800 endp

sub_4588D0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	cmp dword [dword_511E34], 0
	jle loc_4588F9
	cmp dword [eax+1E8h], 0
	jnz loc_4588EB
	call sub_439360

loc_4588EB:
	mov eax, ecx
	call sub_439300
	mov eax, ecx
	call sub_4390F0

loc_4588F9:
	mov eax, ecx
	xor edx, edx
	call dword [ecx+370h]
	mov dl, byte [byte_512A39]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	xor edx, edx
	shl eax, 3
	mov dl, byte [byte_512A3A]
	mov [ecx+2D4h], al
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov edx, dword [dword_512A35]
	shl eax, 3
	sar edx, 18h
	mov [ecx+2D5h], al
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	shl eax, 2
	mov [ecx+2E0h], eax
	mov eax, [ecx+1E8h]
	shl eax, 6
	cmp dword dword_512278[eax], 1
	jnz loc_4589B9
	xor eax, eax
	mov al, [ecx+2DAh]
	call sub_45BA40

loc_45897B:
	mov [ecx+2D6h], al
	test byte [byte_512A3B], 8
	jz loc_4589D1
	mov eax, 1

loc_45898F:
	mov dl, byte [byte_512A3B]
	mov [ecx+2DCh], al
	test dl, 4
	jz loc_4589D5
	mov eax, 1

loc_4589A5:
	mov dh, byte [byte_512A3B]
	mov [ecx+2DDh], al
	test dh, 40h
	jnz loc_4589D9
	pop edx
	pop ecx
	ret

loc_4589B9:
	mov edx, [ecx+2ECh]
	xor eax, eax
	mov edx, [edx+4]
	mov al, [ecx+2DAh]
	call sub_45BA70
	jmp loc_45897B

loc_4589D1:
	xor eax, eax
	jmp loc_45898F

loc_4589D5:
	xor eax, eax
	jmp loc_4589A5

loc_4589D9:
	mov eax, ecx
	call sub_452170
	pop edx
	pop ecx
	ret
;sub_4588D0 endp

sub_4589F0: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_439300
	mov eax, edx
	call sub_4390F0
	pop edx
	ret
;sub_4589F0 endp

sub_458A10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 10h
	mov edx, esi
	mov esi, esp
	call sub_477620
	lea esi, [esp+8]
	call sub_47ADC0
	mov ecx, [esp+0Ch]
	push ecx
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	mov edi, [esp+0Ch]
	push edi
	lea esi, [esp+10h]
	call sub_46FDA0
	cmp dword [dword_511FD4], 0
	jnz loc_458ACA

loc_458A54:
	cmp dword [dword_540D94], 2
	jl loc_458A83
	lea esi, [esp+8]
	call sub_479510
	mov ebp, [esp+0Ch]
	push ebp
	mov eax, [esp+0Ch]
	push eax
	mov ecx, [esp+0Ch]
	push ecx
	mov ebx, [esp+0Ch]
	push ebx
	lea esi, [esp+10h]
	call sub_46FDA0

loc_458A83:
	xor eax, eax
	call sub_4593E0
	cmp dword [dword_511FD4], 0
	jnz loc_458AF5

loc_458A93:
	lea esi, [esp+8]
	call sub_47B7D0
	mov edi, [esp+0Ch]
	push edi
	mov ebp, [esp+0Ch]
	push ebp
	mov eax, [esp+0Ch]
	push eax
	mov ecx, [esp+0Ch]
	push ecx
	lea esi, [esp+10h]
	mov edi, edx
	call sub_46FDA0
	mov esi, esp
	movsd
	movsd
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_458ACA:
	lea esi, [esp+8]
	call sub_47ADA0
	mov eax, [esp+0Ch]
	push eax
	mov ecx, [esp+0Ch]
	push ecx
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	lea esi, [esp+10h]
	call sub_46FDA0
	jmp loc_458A54

loc_458AF5:
	mov eax, 1
	call sub_4593E0
	jmp loc_458A93
;sub_458A10 endp

sub_458B10: ;SUBROUTINE
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 20h
	mov ecx, esi
	mov edx, eax
	cmp dword dword_511FE0[eax*4], 0
	jnz loc_458B3C
	mov esi, esp
	call sub_46FE50
	mov esi, esp
	mov edi, ecx
	movsd
	movsd
	mov eax, ecx
	add esp, 20h
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret

loc_458B3C:
	push ebx
	lea esi, [esp+0Ch]
	call sub_47A180
	lea esi, [esp+14h]
	mov eax, edx
	call sub_4798E0
	lea esi, [esp+1Ch]
	mov eax, edx
	call sub_479DD0
	mov esi, [esp+18h]
	push esi
	mov edi, [esp+18h]
	push edi
	mov ebp, [esp+18h]
	push ebp
	mov eax, [esp+18h]
	push eax
	lea esi, [esp+1Ch]
	call sub_46FDA0
	mov edx, [esp+20h]
	push edx
	mov ebx, [esp+20h]
	push ebx
	mov esi, [esp+18h]
	push esi
	mov edi, [esp+18h]
	push edi
	lea esi, [esp+1Ch]
	lea edi, [esp+14h]
	call sub_46FDA0
	lea esi, [esp+0Ch]
	movsd
	movsd
	pop ebx
	mov esi, esp
	mov edi, ecx
	movsd
	movsd
	mov eax, ecx
	add esp, 20h
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret
;sub_458B10 endp

sub_458BC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 110h
	mov ebp, esi
	lea esi, [esp+108h]
	call sub_46FE50
	xor ecx, ecx
	xor edi, edi

loc_458BDD:
	cmp dword [dword_511FD4], 0
	jz loc_458C0F
	mov eax, 2

loc_458BEB:
	cmp ecx, eax
	jge loc_45902E
	cmp dword dword_512010[edi], 0
	jnz loc_458C16

loc_458BFC:
	cmp dword [dword_511FD4], 0
	jnz loc_45901B
	inc ecx
	add edi, 4
	jmp loc_458BDD

loc_458C0F:
	mov eax, 1
	jmp loc_458BEB

loc_458C16:
	mov eax, esp
	mov edx, dword [dword_512024]
	lea esi, [esp+100h]
	call sub_459050
	xor ebx, ebx
	mov eax, esp
	mov edx, ecx
	call sub_47B2F0
	mov esi, [esp+104h]
	push esi
	mov eax, [esp+104h]
	push eax
	mov edx, [esp+114h]
	push edx
	mov ebx, [esp+114h]
	push ebx
	lea esi, [esp+118h]
	call sub_46FDA0
	mov edx, ecx
	mov eax, 0Ch
	mov ebx, 7
	lea esi, [esp+100h]
	call sub_459970
	call sub_47AE50
	mov esi, [esp+104h]
	push esi
	mov eax, [esp+104h]
	push eax
	mov edx, [esp+114h]
	push edx
	mov ebx, [esp+114h]
	push ebx
	lea esi, [esp+118h]
	call sub_46FDA0
	cmp dword [dword_51200C], 0
	jz loc_458FD3
	test byte [dword_540F48], 10h
	jz loc_458FD3
	mov ebx, 1
	mov eax, asc_4CC788 ; " / "
	lea esi, [esp+100h]
	mov edx, ecx

loc_458CD7:
	call sub_47B2F0
	mov ebx, [esp+104h]
	push ebx
	mov esi, [esp+104h]
	push esi
	mov eax, [esp+114h]
	push eax
	mov edx, [esp+114h]
	push edx
	lea esi, [esp+118h]
	call sub_46FDA0
	mov eax, 0Bh
	mov ebx, 8
	lea esi, [esp+100h]
	mov edx, ecx
	call sub_459970
	call sub_47AE50
	mov ebx, [esp+104h]
	push ebx
	mov esi, [esp+104h]
	push esi
	mov eax, [esp+114h]
	push eax
	mov edx, [esp+114h]
	push edx
	lea esi, [esp+118h]
	call sub_46FDA0
	mov ebx, dword [dword_512048]
	push ebx
	mov esi, dword [dword_512044]
	push esi
	push a2d2d ; "%2d/%-2d"
	lea eax, [esp+0Ch]
	mov edx, ecx
	push eax
	mov ebx, 2
	lea esi, [esp+110h]
	call sprintf_
	lea eax, [esp+10h]
	add esp, 10h
	call sub_47B2F0
	mov eax, [esp+104h]
	push eax
	mov edx, [esp+104h]
	push edx
	mov ebx, [esp+114h]
	push ebx
	mov esi, [esp+114h]
	push esi
	lea esi, [esp+118h]
	call sub_46FDA0
	mov eax, dword [dword_512038]
	push eax
	push aD_1 ; "%d"
	lea eax, [esp+8]
	mov edx, ecx
	push eax
	mov ebx, 3
	lea esi, [esp+10Ch]
	call sprintf_
	lea eax, [esp+0Ch]
	add esp, 0Ch
	call sub_47B2F0
	mov edx, [esp+104h]
	push edx
	mov ebx, [esp+104h]
	push ebx
	mov esi, [esp+114h]
	push esi
	mov eax, [esp+114h]
	push eax
	lea esi, [esp+118h]
	call sub_46FDA0
	mov edx, dword [dword_51203C]
	mov eax, dword [dword_512004]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	push eax
	push a3d ; "%3d"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov ebx, 4
	mov eax, esp
	lea esi, [esp+100h]
	mov edx, ecx
	call sub_47B2F0
	mov edx, [esp+104h]
	push edx
	mov ebx, [esp+104h]
	push ebx
	mov esi, [esp+114h]
	push esi
	mov eax, [esp+114h]
	push eax
	lea esi, [esp+118h]
	call sub_46FDA0
	lea esi, [esp+100h]
	mov ebx, dword [dword_512034]
	mov edx, dword [dword_512030]
	mov eax, ecx
	call sub_47A418
	mov edx, [esp+10Ch]
	push edx
	mov ebx, [esp+10Ch]
	push ebx
	mov esi, [esp+10Ch]
	push esi
	mov eax, [esp+10Ch]
	mov edx, ecx
	push eax
	lea esi, [esp+118h]
	mov ebx, 0Ch
	call sub_46FDA0
	mov eax, 0Dh
	lea esi, [esp+100h]
	call sub_459970
	call sub_47AE50
	mov edx, [esp+104h]
	push edx
	mov ebx, [esp+104h]
	push ebx
	mov esi, [esp+114h]
	push esi
	mov eax, [esp+114h]
	push eax
	lea esi, [esp+118h]
	call sub_46FDA0
	cmp dword [dword_51204C], 0
	jz loc_458F78
	cmp dword [dword_512008], 0
	jnz loc_459009

loc_458F2A:
	mov eax, esp
	mov ebx, 0Bh
	mov edx, dword [dword_51204C]
	lea esi, [esp+100h]
	call sub_459050
	mov eax, esp
	mov edx, ecx
	call sub_47B2F0
	mov esi, [esp+104h]
	push esi
	mov eax, [esp+104h]
	push eax
	mov edx, [esp+114h]
	push edx
	mov ebx, [esp+114h]
	push ebx
	lea esi, [esp+118h]
	call sub_46FDA0

loc_458F78:
	mov esi, dword [dword_511FEC]
	test esi, esi
	jz loc_458BFC
	mov ebx, 9
	mov edx, ecx
	mov eax, [esi+21Ch]
	lea esi, [esp+100h]
	add eax, 34h
	call sub_47AE50
	mov eax, [esp+104h]
	push eax
	mov edx, [esp+104h]
	push edx
	mov ebx, [esp+114h]
	push ebx
	mov esi, [esp+114h]
	push esi
	lea esi, [esp+118h]
	call sub_46FDA0
	jmp loc_458BFC

loc_458FD3:
	mov eax, dword [dword_51202C]
	push eax
	mov edx, dword [dword_512028]
	push edx
	push aDD2 ; "%d/%d"
	lea eax, [esp+0Ch]
	mov ebx, 1
	push eax
	lea esi, [esp+110h]
	mov edx, ecx
	call sprintf_
	lea eax, [esp+10h]
	add esp, 10h
	jmp loc_458CD7

loc_459009:
	test byte [dword_540F48], 10h
	jz loc_458F2A
	jmp loc_458F78

loc_45901B:
	mov eax, 1
	call sub_459100
	inc ecx
	add edi, 4
	jmp loc_458BDD

loc_45902E:
	lea esi, [esp+108h]
	mov edi, ebp
	movsd
	movsd
	mov eax, ebp
	add esp, 110h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_458BC0 endp

sub_459050: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ebx, edx
	test edx, edx
	jle loc_4590EA

loc_459061:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ecx, eax
	test ebx, ebx
	jle loc_4590F1

loc_459074:
	mov edi, 40h
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv edi
	mov edi, 3Ch
	mov ebx, edx
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv edi
	mov edx, eax
	sar edx, 1Fh
	idiv edi
	mov ebp, 3Ch
	mov edi, edx
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebp
	mov ecx, edx
	mov edx, ebx
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add edx, eax
	shl edx, 2
	mov eax, edx
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	push eax
	push ecx
	mov eax, dword [dword_512234]
	push edi
	mov edx, dword off_4D69E0[eax*4]
	push edx
	push esi
	call sprintf_
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4590EA:
	neg edx
	jmp loc_459061

loc_4590F1:
	neg ebx
	jmp loc_459074
;sub_459050 endp

sub_459100: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push ebp
	mov edx, eax
	call sub_44B2A0
	mov ecx, dword [dword_512208]
	mov esi, eax
	cmp ecx, 1
	jnz loc_459262
	mov eax, ecx

loc_45911E:
	mov dword [dword_511FD4], eax
	mov eax, dword_512010
	test eax, eax
	jz loc_45925D
	push edi
	push ebx
	mov eax, [esi+230h]
	inc eax
	mov dword [dword_512028], eax
	mov eax, dword [dword_5121FC]
	mov ebx, dword [dword_512028]
	mov dword [dword_51202C], eax
	cmp ebx, 1
	jge loc_45915D
	mov dword [dword_512028], 1

loc_45915D:
	mov ebp, dword [dword_51202C]
	cmp ebp, dword [dword_512028]
	jge loc_459171
	mov dword [dword_512028], ebp

loc_459171:
	mov eax, dword [dword_540F48]
	cmp eax, 200h
	jge loc_459269
	xor ebx, ebx
	mov dword [dword_512008], ebx
	mov dword [dword_512024], ebx

loc_45918F:
	mov eax, dword [dword_540F48]
	sub eax, [esi+234h]
	cmp eax, 140h
	jge loc_4593AE
	mov ecx, dword [dword_51202C]
	cmp ecx, dword [dword_512028]
	jnz loc_4593AE
	mov dword [dword_51200C], 1

loc_4591C1:
	call sub_474E30
	mov dword [dword_512048], eax
	mov eax, esi
	call sub_474E60
	mov ebp, dword [dword_511FD4]
	mov dword [dword_512044], eax
	test ebp, ebp
	jnz loc_4591F9
	cmp dword dword_5128C8[edx*4], 0
	jnz loc_4593BB

loc_4591EF:
	call sub_474E10
	mov dword [dword_511FEC], eax

loc_4591F9:
	mov ebx, dword_512040
	mov edx, dword_512034
	mov eax, esi
	call sub_452F30
	push dword_512068
	push dword_512064
	mov ecx, dword_51203C
	mov ebx, dword_512038
	push dword_512060
	mov edx, dword_512030
	mov eax, esi
	call sub_4535D0
	mov ebp, dword [dword_51203C]
	test ebp, ebp
	jle loc_4593D6
	mov eax, ebp

loc_45923F:
	mov dword [dword_51203C], eax
	mov eax, dword [dword_512040]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov dword [dword_512040], eax
	pop ebx
	pop edi

loc_45925D:
	pop ebp
	pop esi
	pop edx
	pop ecx
	ret

loc_459262:
	xor eax, eax
	jmp loc_45911E

loc_459269:
	cmp dword [esi+230h], 0
	jz loc_45931E
	sub eax, [esi+234h]
	cmp eax, 140h
	jge loc_459311

loc_459287:
	mov eax, [esi+230h]
	mov eax, [esi+eax*4+234h]
	mov edi, dword [dword_540D94]
	mov dword [dword_512024], eax
	cmp edi, 2
	jge loc_4592BA
	mov ebp, dword [dword_51204C]
	test ebp, ebp
	jz loc_459354
	cmp eax, ebp
	jl loc_459354

loc_4592BA:
	mov ebx, dword [dword_512024]
	cmp ebx, dword [dword_51204C]
	jnz loc_4592D2
	mov dword [dword_512008], 1

loc_4592D2:
	mov eax, [esi+224h]
	mov ebp, dword [dword_540F48]
	add eax, 0C0h
	cmp eax, ebp
	jge loc_459373
	xor edi, edi
	mov dword [dword_512008], edi

loc_4592F3:
	cmp dword [dword_512070], 0
	jz loc_45918F
	xor eax, eax
	mov dword [dword_512070], eax
	call sub_47CD30
	jmp loc_45918F

loc_459311:
	cmp dword [esi+280h], 2
	jz loc_459287

loc_45931E:
	mov eax, dword [dword_540F48]
	mov ebp, [esi+234h]
	sub eax, ebp
	mov dword [dword_512024], eax
	xor eax, eax
	mov ecx, dword [dword_512070]
	mov dword [dword_512008], eax
	test ecx, ecx
	jz loc_45918F
	mov dword [dword_512070], eax
	call sub_47CD30
	jmp loc_45918F

loc_459354:
	mov eax, dword [dword_512024]
	mov ecx, 1
	mov dword [dword_51204C], eax
	mov dword [dword_512008], ecx
	call sub_47CD30
	jmp loc_45918F

loc_459373:
	cmp dword [dword_512008], 0
	jz loc_4592F3
	test byte [dword_540F48], 10h
	jz loc_4592F3
	cmp dword [dword_512070], 0
	jnz loc_45918F
	mov dword [dword_512070], 1
	call sub_47CD30
	jmp loc_45918F

loc_4593AE:
	xor ebx, ebx
	mov dword [dword_51200C], ebx
	jmp loc_4591C1

loc_4593BB:
	cmp eax, dword [dword_512048]
	jl loc_4593CE
	mov dword [dword_511FEC], ebp
	jmp loc_4591F9

loc_4593CE:
	add eax, 2
	jmp loc_4591EF

loc_4593D6:
	mov eax, ebp
	neg eax
	jmp loc_45923F
;sub_459100 endp

sub_4593E0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	call sub_44B2A0
	mov ecx, [eax+288h]
	cmp ecx, 40h
	jge loc_459404
	xor eax, eax
	shl edx, 2
	cmp eax, dword dword_51201C[edx]
	jnz loc_459432
	pop edx
	pop ecx
	ret

loc_459404:
	cmp ecx, 94h
	jge loc_45941F
	mov eax, 1
	shl edx, 2
	cmp eax, dword dword_51201C[edx]
	jnz loc_459432
	pop edx
	pop ecx
	ret

loc_45941F:
	mov eax, 2
	shl edx, 2
	cmp eax, dword dword_51201C[edx]
	jnz loc_459432
	pop edx
	pop ecx
	ret

loc_459432:
	mov dword dword_51201C[edx], eax
	call sub_47CD30
	pop edx
	pop ecx
	ret
;sub_4593E0 endp

sub_459440: ;SUBROUTINE
	cmp dword [dword_511FD4], 0
	jnz locret_45946A
	cmp dword [dword_512214], 0
	jnz locret_45946A
	cmp dword [dword_512054], 0
	jnz loc_45946B
	mov eax, 1
	mov dword [dword_512054], eax
	jmp sub_47C3E0

locret_45946A:
	ret

loc_45946B:
	xor eax, eax
	mov dword [dword_512054], eax
	jmp sub_47C3E0
;sub_459440 endp

sub_459480: ;SUBROUTINE
	push esi
	push ebp
	shl eax, 2
	cmp dword dword_512010[eax], 0
	jz loc_4594B0
	mov esi, dword dword_511FE0[eax]
	test esi, esi
	jz loc_4594A8
	xor ebp, ebp
	mov dword dword_511FE0[eax], ebp

loc_4594A0:
	call sub_47C3E0
	pop ebp
	pop esi
	ret

loc_4594A8:
	mov dword dword_512010[eax], esi
	jmp loc_4594A0

loc_4594B0:
	push ecx
	mov ecx, 1
	mov dword dword_511FE0[eax], ecx
	mov dword dword_512010[eax], ecx
	pop ecx
	call sub_47C3E0
	pop ebp
	pop esi
	ret
;sub_459480 endp

sub_4594D0: ;SUBROUTINE
	cmp dword [dword_51205C], 0
	jge nullsub_56
	ret
;sub_4594D0 endp

sub_4594E0: ;SUBROUTINE
	call sub_47C2B0
	push ecx
	push edx
	mov edx, dword [dword_4D69DC]
	test edx, edx
	jnz loc_459957
	xor ecx, ecx
	mov dword [dword_4D69DC], ecx
	pop edx
	pop ecx
	ret

loc_459957:
	mov eax, edx
	call sub_4848FC
	xor ecx, ecx
	mov dword [dword_4D69DC], ecx
	pop edx
	pop ecx
	ret
;sub_4594E0 endp

sub_4594F0: ;SUBROUTINE
	call sub_477730
	jmp sub_47CD30
;sub_4594F0 endp

sub_459500: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0FCh
	cmp dword [dword_512208], 1
	jz loc_45952C
	cmp dword [dword_512214], 0
	jz loc_459539

loc_45952C:
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_459539:
	mov ebx, aCNfs2seGameC_5 ; "c:\\nfs2se\\game\\common\\dashHUD.c"
	mov esi, 149h
	mov edx, 98h
	mov eax, aHudcon ; "hudcon"
	mov ecx, 98h
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	xor ebx, ebx
	mov esi, dword_511FD4
	call sub_484498
	mov edi, eax
	mov ebp, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, dword [dword_5134C8]
	push edi
	push aShudcon_dat ; "%shudcon.dat"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, ebp
	mov edx, ebp
	call sub_484D94
	mov ebx, eax
	mov eax, esp
	call sub_4875B0
	test ebp, ebp
	jz loc_45952C
	mov eax, ebp
	call sub_4848FC
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_459500 endp

sub_4595D0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_51205C]
	test edx, edx
	jge loc_4595DD
	pop edx
	ret

loc_4595DD:
	mov eax, edx
	pop edx
	ret
;sub_4595D0 endp

sub_4595F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 1A4h
	xor edx, edx
	mov [esp+1A0h], edx
	xor edx, edx
	mov ecx, dword [dword_512208]
	mov [esp+194h], edx
	cmp ecx, 1
	jz loc_45966F
	cmp dword [dword_512214], 1
	jge loc_45966F
	mov esi, dword [dword_5134C8]
	push esi
	push aShudcon_dat ; "%shudcon.dat"
	lea eax, [esp+8]
	push eax
	lea ecx, [esp+1A8h]
	lea ebx, [esp+1A0h]
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+198h]
	mov eax, esp
	call sub_4877BC
	mov edi, [esp+198h]
	test edi, edi
	jnz loc_4597D2
	xor esi, esi
	mov [esp+1A0h], esi

loc_45966F:
	mov eax, dword [dword_51220C]
	shl eax, 6
	mov ecx, dword dword_512270[eax]
	cmp ecx, 0Ch
	jge loc_45987A
	mov dword [dword_51205C], ecx

loc_45968C:
	mov esi, dword [dword_512208]
	cmp esi, 1
	jnz loc_459889
	mov eax, esi

loc_45969D:
	mov edi, 0FFFFFFFFh
	mov ebp, dword [dword_512238]
	mov dword [dword_511FD4], eax
	mov dword [dword_511FF4], edi
	test ebp, ebp
	jnz loc_459890
	mov dword [dword_512004], 23CA5h

loc_4596C5:
	cmp word [esp+1A0h], 1
	jnz loc_45989F
	mov ecx, [esp+118h]
	test ecx, ecx
	jz loc_45989F
	jl loc_45989F
	cmp ecx, 3
	jg loc_45989F
	mov dword [dword_511FF0], ecx

loc_4596F8:
	mov ebp, dword [dword_4D69C0]
	test ebp, ebp
	jz loc_4598BB
	cmp dword [dword_512214], 0
	jnz loc_4598AE
	mov dword [dword_512054], ebp
	lea eax, [ebp-1]
	mov dword [dword_4D69C0], eax

loc_459721:
	cmp dword [dword_511FD4], 0
	jz loc_45973C
	xor eax, eax
	mov ebp, 0FFFFFFFFh
	mov dword [dword_512054], eax
	mov dword [dword_51205C], ebp

loc_45973C:
	cmp word [esp+1A0h], 1
	jnz loc_4598FA
	mov eax, [esp+138h]
	mov dword [dword_512010], eax
	mov eax, [esp+13Ch]
	mov dword [dword_512014], eax

loc_459763:
	cmp dword [dword_511FD4], 0
	jz loc_459910
	xor edi, edi
	mov dword [dword_511FE4], edi
	mov dword [dword_511FE0], edi

loc_45977E:
	xor eax, eax
	mov ebx, dword [dword_540D94]
	mov dword [dword_512020], eax
	mov dword [dword_512018], eax
	mov dword [dword_51201C], eax
	cmp ebx, 2
	jge loc_45979F
	mov eax, dword [dword_51223C]

loc_45979F:
	mov dword [dword_51204C], eax
	xor edi, edi
	mov eax, dword [dword_512234]
	mov dword [dword_511FEC], edi
	call sub_459990
	mov eax, dword [dword_51205C]
	call sub_47C3F0
	call sub_47CD80
	add esp, 1A4h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4597D2:
	mov ebp, [esp+19Ch]
	cmp ebp, 98h
	jz loc_4597F6
	mov eax, edi
	xor ecx, ecx
	call sub_487950
	mov [esp+1A0h], ecx
	jmp loc_45966F

loc_4597F6:
	mov ebx, 1
	mov eax, aCNfs2seGameC_5 ; "c:\\nfs2se\\game\\common\\dashHUD.c"
	mov edx, 8Ch
	mov [esp+1A0h], ebx
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], edx
	mov eax, aHudcon ; "hudcon"
	mov edx, ebp
	xor ebx, ebx
	mov ecx, 98h
	call sub_484498
	mov ebx, [esp+19Ch]
	mov ebp, eax
	mov edx, eax
	mov eax, [esp+198h]
	lea edi, [esp+0FCh]
	call sub_487958
	mov eax, [esp+198h]
	mov esi, ebp
	call sub_487950
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	test ebp, ebp
	jz loc_45966F
	mov eax, ebp
	call sub_4848FC
	jmp loc_45966F

loc_45987A:
	mov dword [dword_51205C], 0FFFFFFFFh
	jmp loc_45968C

loc_459889:
	xor eax, eax
	jmp loc_45969D

loc_459890:
	mov dword [dword_512004], 39999h
	jmp loc_4596C5

loc_45989F:
	mov dword [dword_511FF0], 1
	jmp loc_4596F8

loc_4598AE:
	xor esi, esi
	mov dword [dword_512054], esi
	jmp loc_459721

loc_4598BB:
	cmp word [esp+1A0h], 1
	jnz loc_4598D7
	mov eax, [esp+17Ch]
	mov dword [dword_512054], eax
	jmp loc_459721

loc_4598D7:
	cmp dword [dword_512214], 0
	jnz loc_4598EF
	mov dword [dword_512054], 1
	jmp loc_459721

loc_4598EF:
	mov dword [dword_512054], ebp
	jmp loc_459721

loc_4598FA:
	mov edx, 1
	mov dword [dword_512014], edx
	mov dword [dword_512010], edx
	jmp loc_459763

loc_459910:
	cmp word [esp+1A0h], 1
	jnz loc_45992C
	mov eax, [esp+108h]
	mov dword [dword_511FE0], eax
	jmp loc_45977E

loc_45992C:
	mov dword [dword_511FE0], 1
	jmp loc_45977E
;sub_4595F0 endp

sub_459970: ;SUBROUTINE
	push edx
	lea edx, 0[eax*4]
	mov eax, dword [dword_4D69DC]
	movsx edx, word [edx+eax]
	add eax, edx
	pop edx
	ret
;sub_459970 endp

sub_459990: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 0FCh
	mov edx, eax
	cmp eax, 6
	jle loc_4599A3
	xor edx, eax

loc_4599A3:
	mov ecx, dword [dword_4D69DC]
	test ecx, ecx
	jnz loc_4599E7

loc_4599AD:
	mov ebx, dword off_4D69C4[edx*4]
	push ebx
	mov esi, dword [dword_51349C]
	push esi
	push aSS_3 ; "%s%s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_486F40
	mov dword [dword_4D69DC], eax
	add esp, 0FCh
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4599E7:
	mov eax, ecx
	call sub_4848FC
	jmp loc_4599AD
;sub_459990 endp

sub_4599F0: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	mov ebx, eax
	mov ecx, dword [dword_4D6A60]
	not ebx
	test ecx, ecx
	jz loc_459A18
	test ebx, ebx
	jl loc_459A18
	cmp ebx, dword [dword_4D6A5C]
	jge loc_459A18
	shl ebx, 5
	lea eax, [ecx+ebx]
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_459A1E

loc_459A18:
	xor eax, eax
	pop ebp
	pop ecx
	pop ebx
	ret

loc_459A1E:
	push esi
	mov esi, [eax+0Ah]
	sar esi, 10h
	mov eax, dword dword_512160[esi*4]
	call sub_489F48
	push 0 ; dwMoveMethod
	push 0 ; lpDistanceToMoveHigh
	mov eax, dword [dword_4D6A60]
	push edx ; lDistanceToMove
	mov ebp, [ebx+eax]
	push ebp ; hFile
	call SetFilePointer_wrap
	mov edx, dword [dword_4D6A60]
	mov [edx+ebx+18h], eax
	mov eax, [edx+ebx]
	push eax ; hFile
	call SetEndOfFile_wrap
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	mov word [ebx+eax+0Eh], 0
	mov eax, dword dword_512160[esi*4]
	call sub_489F60
	mov eax, edx
	pop esi
	pop ebp
	pop ecx
	pop ebx
	ret
;sub_4599F0 endp

sub_459A80: ;SUBROUTINE
	cmp eax, dword [dword_4D6A64]
	jnz loc_459ABA
	push ecx
	mov ecx, dword [dword_4D6A68]
	mov dword [dword_4D6A68], edx
	test edx, edx
	jz loc_459AA2
	cmp dword [dword_5121F4], 0
	jnz loc_459AA6

loc_459AA2:
	mov eax, ecx
	pop ecx
	ret

loc_459AA6:
	mov edx, dword [dword_5121F4]
	mov eax, dword_5121E0
	call sub_489E20
	mov eax, ecx
	pop ecx
	ret

loc_459ABA:
	xor eax, eax
	ret
;sub_459A80 endp

sub_459AC0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D6A60]
	not eax
	test edx, edx
	jz loc_459AF5
	test eax, eax
	jl loc_459AF5
	cmp eax, dword [dword_4D6A5C]
	jge loc_459AF5
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	shl edx, 5
	add eax, edx
	cmp dword [eax], 0FFFFFFFFh
	jz loc_459AF5
	cmp dword [eax+10h], 0
	jz loc_459AF5
	mov eax, [eax+14h]
	pop edx
	ret

loc_459AF5:
	xor eax, eax
	pop edx
	ret
;sub_459AC0 endp

sub_459B00: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D6A60]
	not eax
	test edx, edx
	jz loc_459B23
	test eax, eax
	jl loc_459B23
	cmp eax, dword [dword_4D6A5C]
	jge loc_459B23
	shl eax, 5
	add eax, edx
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_459B27

loc_459B23:
	xor eax, eax
	pop edx
	ret

loc_459B27:
	mov eax, [eax+0Ah]
	sar eax, 10h
	mov eax, dword dword_512160[eax*4]
	call sub_489F60
	mov eax, 1
	pop edx
	ret
;sub_459B00 endp

sub_459B40: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D6A60]
	not eax
	test edx, edx
	jz loc_459B63
	test eax, eax
	jl loc_459B63
	cmp eax, dword [dword_4D6A5C]
	jge loc_459B63
	shl eax, 5
	add eax, edx
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_459B67

loc_459B63:
	xor eax, eax
	pop edx
	ret

loc_459B67:
	mov eax, [eax+0Ah]
	sar eax, 10h
	mov eax, dword dword_512160[eax*4]
	call sub_489F48
	pop edx
	ret
;sub_459B40 endp

sub_459B80: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov esi, eax
	mov edx, dword [dword_4D6A60]
	not esi
	test edx, edx
	jz loc_459BAE
	test esi, esi
	jl loc_459BAE
	cmp esi, dword [dword_4D6A5C]
	jge loc_459BAE
	mov edi, esi
	shl edi, 5
	lea ebx, [edx+edi]
	cmp dword [ebx], 0FFFFFFFFh
	jnz loc_459BB6

loc_459BAE:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_459BB6:
	push ecx
	mov ebx, [ebx+0Ah]
	sar ebx, 10h
	mov eax, dword dword_512160[ebx*4]
	call sub_489F48
	mov eax, dword [dword_4D6A60]
	add eax, edi
	cmp dword [eax+10h], 0
	jz loc_459BF2
	mov ecx, [eax+14h]
	push ecx ; lpBaseAddress
	call UnmapViewOfFile_wrap
	mov eax, dword [dword_4D6A60]
	mov edx, [edi+eax+10h]
	push edx ; hObject
	call CloseHandle_wrap

loc_459BF2:
	cmp ebp, dword [dword_4D6A64]
	jnz loc_459C76
	xor edi, edi
	mov dword [dword_4D6A6C], edi
	cmp dword [dword_5121F4], 0
	jz loc_459C58
	mov edx, dword [dword_5121F4]
	mov eax, dword_5121E0
	call sub_489E20
	mov eax, dword dword_512160[ebx*4]
	call sub_489F60
	cmp dword [dword_5121F4], 0
	jz loc_459C4C
	mov edx, 1

loc_459C39:
	mov eax, edx
	call sub_489B9C
	cmp dword [dword_5121F4], 0
	jnz loc_459C39

loc_459C4C:
	mov eax, dword dword_512160[ebx*4]
	call sub_489F48

loc_459C58:
	mov eax, dword [dword_4D6A70]
	xor edi, edi
	call sub_4848FC
	mov dword [dword_4D6A74], edi
	mov dword [dword_4D6A70], edi
	mov dword [dword_4D6A64], edi

loc_459C76:
	mov eax, dword [dword_4D6A60]
	shl esi, 5
	mov edx, [esi+eax]
	push edx ; hObject
	call CloseHandle_wrap
	mov eax, dword dword_512160[ebx*4]
	call sub_489F60
	mov eax, dword [dword_4D6A60]
	mov dword [esi+eax], 0FFFFFFFFh
	mov eax, 1
	pop ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret
;sub_459B80 endp

sub_459CB0: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov edx, dword [dword_4D6A60]
	not ebx
	test edx, edx
	jz loc_459CFC
	test ebx, ebx
	jl loc_459CFC
	cmp ebx, dword [dword_4D6A5C]
	jge loc_459CFC
	mov esi, ebx
	shl esi, 5
	lea eax, [edx+esi]
	mov edi, [eax]
	cmp edi, 0FFFFFFFFh
	jz loc_459CFC
	push ecx
	mov ebp, [eax+10h]
	test ebp, ebp
	jz loc_459D00

loc_459CE6:
	mov eax, ebx
	mov edx, dword [dword_4D6A60]
	shl eax, 5
	mov eax, [edx+eax+18h]
	pop ecx

loc_459CF6:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_459CFC:
	xor eax, eax
	jmp loc_459CF6

loc_459D00:
	push 1 ; dwMoveMethod
	push ebp ; lpDistanceToMoveHigh
	push ebp ; lDistanceToMove
	push edi ; hFile
	call SetFilePointer_wrap
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	mov [esi+eax+18h], edx
	mov ecx, [esi+eax+18h]
	mov word [esi+eax+0Eh], 0
	cmp ecx, 0FFFFFFFFh
	jnz loc_459CE6
	mov eax, dword [dword_4D6A60]
	mov [esi+eax+18h], ebp
	jmp loc_459CE6
;sub_459CB0 endp

sub_459D60: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	mov ebx, eax
	mov ecx, dword [dword_4D6A60]
	not ebx
	test ecx, ecx
	jz loc_459D8E
	test ebx, ebx
	jl loc_459D8E
	cmp ebx, dword [dword_4D6A5C]
	jge loc_459D8E
	mov ecx, ebx
	mov eax, dword [dword_4D6A60]
	shl ecx, 5
	add eax, ecx
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_459D94

loc_459D8E:
	xor eax, eax
	pop ebp
	pop ecx
	pop ebx
	ret

loc_459D94:
	push edi
	push esi
	mov esi, [eax+0Ah]
	sar esi, 10h
	mov eax, dword dword_512160[esi*4]
	call sub_489F48
	mov eax, dword [dword_4D6A60]
	add ecx, eax
	mov eax, [ecx+8]
	mov [ecx+18h], edx
	test eax, eax
	jz loc_459DCB
	mov eax, edx
	mov ebp, [ecx+8]
	sar edx, 1Fh
	idiv ebp
	mov edx, eax
	imul edx, ebp
	mov [ecx+18h], edx

loc_459DCB:
	mov edx, ebx
	mov eax, dword [dword_4D6A60]
	shl edx, 5
	add edx, eax
	mov eax, [edx+18h]
	mov ecx, [edx+1Ch]
	cmp eax, ecx
	jle loc_459E30
	mov [edx+18h], ecx

loc_459DE4:
	mov eax, dword [dword_4D6A60]
	shl ebx, 5
	add eax, ebx
	mov edx, [eax+10h]
	test edx, edx
	jnz loc_459E1C
	push edx ; dwMoveMethod
	push edx ; lpDistanceToMoveHigh
	mov ecx, [eax+18h]
	push ecx ; lDistanceToMove
	mov edi, [eax]
	push edi ; hFile
	call SetFilePointer_wrap
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	mov word [ebx+eax+0Eh], 0
	mov edi, 1
	mov [ebx+eax+18h], edx

loc_459E1C:
	mov eax, dword dword_512160[esi*4]
	call sub_489F60
	mov eax, edi
	pop esi
	pop edi
	pop ebp
	pop ecx
	pop ebx
	ret

loc_459E30:
	test eax, eax
	jge loc_459DE4
	mov dword [edx+18h], 0
	jmp loc_459DE4
;sub_459D60 endp

sub_459E40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	mov edi, edx
	mov esi, ebx
	mov ebx, dword [dword_4D6A60]
	mov edx, eax
	xor ebp, ebp
	not edx
	test ebx, ebx
	jz loc_459E7D
	test edx, edx
	jl loc_459E7D
	cmp edx, dword [dword_4D6A5C]
	jge loc_459E7D
	mov eax, edx
	shl eax, 5
	mov [esp+4], eax
	mov eax, ebx
	add eax, [esp+4]
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_459E87

loc_459E7D:
	xor eax, eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_459E87:
	mov eax, [eax+0Ah]
	sar eax, 10h
	mov [esp+8], eax
	mov eax, dword dword_512160[eax*4]
	mov ebx, [esp+4]
	call sub_489F48
	mov eax, dword [dword_4D6A60]
	add eax, ebx
	mov ebx, [eax+18h]
	cmp ebx, [eax+1Ch]
	jle loc_459EB6
	mov ebx, [eax+1Ch]
	mov [eax+18h], ebx

loc_459EB6:
	mov eax, edx
	mov ebx, dword [dword_4D6A60]
	shl eax, 5
	add ebx, eax
	mov eax, [ebx+8]
	cmp eax, 1000h
	jle loc_459FCB
	mov ebx, eax

loc_459ED3:
	cmp ecx, dword [dword_4D6A64]
	jnz loc_459EFD
	mov ecx, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov eax, 2ACh
	push aWritewinfileCa ; "writewinfile - CANNOT WRITE TO MEMORY M"...
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_459EFD:
	mov ecx, edx
	mov eax, dword [dword_4D6A60]
	shl ecx, 5
	add eax, ecx
	cmp dword [eax+10h], 0
	jnz loc_459FD5
	mov [esp+10h], ecx
	mov [esp+0Ch], ecx

loc_459F1B:
	test esi, esi
	jz loc_45A00C
	cmp ebx, esi
	jbe loc_459F29
	mov ebx, esi

loc_459F29:
	mov edx, [esp+10h]
	mov eax, dword [dword_4D6A60]
	push 0 ; dwMoveMethod
	add eax, edx
	push 0 ; lpDistanceToMoveHigh
	mov ecx, [eax+18h]
	push ecx ; lDistanceToMove
	mov edx, [eax]
	push edx ; hFile
	call SetFilePointer_wrap
	mov ecx, [esp+10h]
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	add eax, ecx
	push 0 ; lpOverlapped
	mov [eax+18h], edx
	lea edx, [esp+4]
	push edx ; lpNumberOfBytesWritten
	push ebx ; nNumberOfBytesToWrite
	push edi ; lpBuffer
	mov edx, [eax]
	push edx ; hFile
	mov word [eax+0Eh], 0
	call WriteFile_wrap
	test eax, eax
	jz loc_45A05E
	mov ecx, [esp+10h]
	mov edx, dword [dword_4D6A60]
	add edx, ecx
	mov eax, [esp]
	add [edx+18h], eax
	mov eax, [esp]
	add ebp, eax
	add edi, eax
	cmp ebx, eax
	jbe loc_45A026
	xor esi, esi

loc_459F9A:
	mov edx, [esp+0Ch]
	mov eax, dword [dword_4D6A60]
	add eax, edx
	mov edx, [eax+18h]
	cmp edx, [eax+1Ch]
	jle loc_459FB0
	mov [eax+1Ch], edx

loc_459FB0:
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_459F1B
	xor eax, eax
	call sub_483EB0
	jmp loc_459F1B

loc_459FCB:
	mov ebx, 1000h
	jmp loc_459ED3

loc_459FD5:
	mov ecx, [eax+18h]
	mov ebx, [eax+1Ch]
	add ecx, esi
	cmp ecx, ebx
	jle loc_459FE6
	mov esi, ebx
	sub esi, [eax+18h]

loc_459FE6:
	mov ecx, edx
	mov eax, dword [dword_4D6A60]
	shl ecx, 5
	mov edx, [ecx+eax+14h]
	mov ebx, [ecx+eax+18h]
	mov eax, edi
	add edx, ebx
	mov ebx, esi
	call sub_48A980
	mov eax, dword [dword_4D6A60]
	add [ecx+eax+18h], esi

loc_45A00C:
	mov eax, [esp+8]
	mov eax, dword dword_512160[eax*4]
	call sub_489F60
	mov eax, ebp
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_45A026:
	sub esi, eax
	jmp loc_459F9A

loc_45A05E:
	mov eax, 1
	call sub_489B9C
	jmp loc_459FB0
;sub_459E40 endp

sub_45A070: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 18h
	mov ecx, eax
	mov [esp+14h], edx
	mov edi, ebx
	xor edx, edx
	mov [esp+10h], edx
	mov edx, eax
	mov ebx, dword [dword_4D6A60]
	not edx
	test ebx, ebx
	jz loc_45A0AF
	test edx, edx
	jl loc_45A0AF
	cmp edx, dword [dword_4D6A5C]
	jge loc_45A0AF
	mov ebx, edx
	mov eax, dword [dword_4D6A60]
	shl ebx, 5
	add eax, ebx
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_45A0B8

loc_45A0AF:
	xor eax, eax
	add esp, 18h
	pop ebp
	pop edi
	pop ecx
	ret

loc_45A0B8:
	push esi
	mov eax, [eax+0Ah]
	sar eax, 10h
	mov [esp+8], eax
	mov eax, dword dword_512160[eax*4]
	call sub_489F48
	mov eax, dword [dword_4D6A60]
	add eax, ebx
	mov ebx, [eax+18h]
	mov esi, [eax+1Ch]
	cmp ebx, esi
	jle loc_45A0E3
	mov [eax+18h], esi

loc_45A0E3:
	mov ebx, edx
	mov eax, dword [dword_4D6A60]
	shl ebx, 5
	add eax, ebx
	mov ebx, [eax+18h]
	mov ebp, [eax+1Ch]
	add ebx, edi
	cmp ebx, ebp
	jle loc_45A100
	mov edi, ebp
	sub edi, [eax+18h]

loc_45A100:
	mov eax, edx
	mov ebp, dword [dword_4D6A60]
	shl eax, 5
	add ebp, eax
	mov esi, [ebp+8]
	cmp esi, 1000h
	jle loc_45A164
	mov ebp, esi

loc_45A11A:
	mov esi, edx
	mov eax, dword [dword_4D6A60]
	shl esi, 5
	add eax, esi
	cmp dword [eax+10h], 0
	jz loc_45A16B
	mov edx, [eax+14h]
	mov eax, [eax+18h]
	mov ebx, edi
	add eax, edx
	mov edx, [esp+18h]
	call sub_48A980
	mov eax, dword [dword_4D6A60]
	add [esi+eax+18h], edi

loc_45A148:
	mov eax, [esp+8]
	mov eax, dword dword_512160[eax*4]
	call sub_489F60
	mov eax, [esp+14h]
	pop esi
	add esp, 18h
	pop ebp
	pop edi
	pop ecx
	ret

loc_45A164:
	mov ebp, 1000h
	jmp loc_45A11A

loc_45A16B:
	cmp ecx, dword [dword_4D6A64]
	jnz loc_45A2C3
	mov eax, 1

loc_45A17C:
	mov [esp+0Ch], eax
	test eax, eax
	jnz loc_45A2CA

loc_45A188:
	mov esi, edx
	shl esi, 5

loc_45A18D:
	test edi, edi
	jz loc_45A148
	cmp ebp, edi
	jbe loc_45A197
	mov ebp, edi

loc_45A197:
	cmp dword [esp+0Ch], 0
	jz loc_45A385
	mov ecx, dword [dword_4D6A60]
	mov edx, [ecx+esi+18h]
	mov ebx, [ecx+esi+8]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov ebx, eax
	mov eax, [ecx+esi+8]
	imul eax, ebx
	cmp eax, [ecx+esi+18h]
	jz loc_45A1E8
	mov ecx, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov eax, 243h
	push aReadwinfileNon ; "readwinfile - NONALIGNED READ ON BLOCK "...
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_45A1E8:
	mov ecx, ebx
	mov eax, 1
	and ecx, 1Fh
	shl eax, cl
	mov [esp+10h], eax
	mov eax, dword [dword_4D6A74]
	sar ebx, 5
	mov edx, [esp+10h]
	test [eax+ebx*4], edx
	jz loc_45A311
	mov edx, dword [dword_4D6A60]
	add edx, esi
	mov eax, [edx+18h]
	mov ebx, [edx+1Ch]
	add eax, ebp
	mov ecx, 1
	cmp eax, ebx
	jbe loc_45A308
	mov eax, ebx
	mov ebx, [edx+18h]
	sub eax, ebx
	mov [esp+4], eax
	cmp eax, [edx+8]
	jbe loc_45A240
	xor eax, eax

loc_45A23C:
	mov [esp+4], eax

loc_45A240:
	mov eax, dword [dword_4D6A60]
	mov edx, dword [dword_4D6A70]
	mov eax, [esi+eax+18h]
	mov ebx, [esp+4]
	add eax, edx
	mov edx, [esp+18h]
	call sub_48A980

loc_45A25E:
	test ecx, ecx
	jz loc_45A411
	mov edx, dword [dword_4D6A60]
	add edx, esi
	mov eax, [esp+4]
	add [edx+18h], eax
	mov ebx, [esp+14h]
	mov eax, [esp+4]
	mov ecx, [esp+18h]
	add ebx, eax
	add ecx, eax
	mov [esp+14h], ebx
	mov eax, [edx+18h]
	mov ebx, [edx+1Ch]
	mov [esp+18h], ecx
	cmp eax, ebx
	jle loc_45A29A
	mov [edx+18h], ebx

loc_45A29A:
	mov eax, [esp+4]
	cmp ebp, eax
	jbe loc_45A3D5
	xor edi, edi

loc_45A2A8:
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_45A18D
	xor eax, eax
	call sub_483EB0
	jmp loc_45A18D

loc_45A2C3:
	xor eax, eax
	jmp loc_45A17C

loc_45A2CA:
	cmp dword [dword_4D6A74], 0
	jz loc_45A2E0
	cmp dword [dword_4D6A70], 0
	jnz loc_45A188

loc_45A2E0:
	mov ebx, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov esi, 237h
	push aReadwinfileMir ; "readwinfile - MIRROR DATA MISSING FOR M"...
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 4
	jmp loc_45A188

loc_45A308:
	mov [esp+4], ebp
	jmp loc_45A240

loc_45A311:
	mov eax, dword [dword_4D6A60]
	add eax, esi
	cmp word [eax+0Eh], 0
	jz loc_45A33D
	push 0 ; dwMoveMethod
	push 0 ; lpDistanceToMoveHigh
	mov ecx, [eax+18h]
	push ecx ; lDistanceToMove
	mov edx, [eax]
	push edx ; hFile
	call SetFilePointer_wrap
	mov eax, dword [dword_4D6A60]
	mov word [esi+eax+0Eh], 0

loc_45A33D:
	push 0 ; lpOverlapped
	lea eax, [esp+8]
	push eax ; lpNumberOfBytesRead
	mov eax, dword [dword_4D6A60]
	mov ecx, [esi+eax+8]
	mov edx, dword [dword_4D6A70]
	push ecx ; nNumberOfBytesToRead
	add edx, [esi+eax+18h]
	push edx ; lpBuffer
	mov edx, [esi+eax]
	push edx ; hFile
	call ReadFile_wrap
	mov ecx, eax
	test eax, eax
	jz loc_45A23C
	mov eax, dword [dword_4D6A74]
	mov edx, [esp+10h]
	or [eax+ebx*4], edx
	dec dword [dword_4D6A6C]
	jmp loc_45A240

loc_45A385:
	mov eax, dword [dword_4D6A60]
	add eax, esi
	cmp word [eax+0Eh], 0
	jz loc_45A3B1
	push 0 ; dwMoveMethod
	push 0 ; lpDistanceToMoveHigh
	mov edx, [eax+18h]
	push edx ; lDistanceToMove
	mov ecx, [eax]
	push ecx ; hFile
	call SetFilePointer_wrap
	mov eax, dword [dword_4D6A60]
	mov word [esi+eax+0Eh], 0

loc_45A3B1:
	push 0 ; lpOverlapped
	lea eax, [esp+8]
	push eax ; lpNumberOfBytesRead
	push ebp ; nNumberOfBytesToRead
	mov ebx, [esp+24h]
	mov eax, dword [dword_4D6A60]
	push ebx ; lpBuffer
	mov edx, [esi+eax]
	push edx ; hFile
	call ReadFile_wrap
	mov ecx, eax
	jmp loc_45A25E

loc_45A3D5:
	sub edi, eax
	jmp loc_45A2A8

loc_45A411:
	mov eax, 1
	call sub_489B9C
	jmp loc_45A2A8
;sub_45A070 endp

sub_45A420: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov esi, edx
	mov ebp, 1
	mov edx, eax
	mov edi, dword [dword_4D6A60]
	not edx
	test edi, edi
	jz loc_45A45B
	test edx, edx
	jl loc_45A45B
	cmp edx, dword [dword_4D6A5C]
	jge loc_45A45B
	mov eax, edx
	shl eax, 5
	mov [esp+14h], eax
	mov eax, edi
	add eax, [esp+14h]
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_45A466

loc_45A45B:
	xor eax, eax
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_45A466:
	mov eax, [eax+0Ah]
	sar eax, 10h
	mov [esp+18h], eax
	mov eax, dword dword_512160[eax*4]
	call sub_489F48
	test esi, esi
	jz loc_45A490
	mov edi, [esp+14h]
	mov eax, dword [dword_4D6A60]
	add eax, edi
	mov eax, [eax+4]
	mov [esi], eax

loc_45A490:
	test ebx, ebx
	jz loc_45A4A5
	mov eax, edx
	mov esi, dword [dword_4D6A60]
	shl eax, 5
	mov eax, [esi+eax+8]
	mov [ebx], eax

loc_45A4A5:
	test ecx, ecx
	jz loc_45A4B7
	mov eax, dword [dword_4D6A60]
	shl edx, 5
	mov eax, [edx+eax+1Ch]
	mov [ecx], eax

loc_45A4B7:
	cmp dword [esp+2Ch], 0
	jz loc_45A51E
	mov esi, asc_4CC934 ; " :\\"
	lea edi, [esp+10h]
	push edi

loc_45A4C8:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_45A4E0
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_45A4C8

loc_45A4E0:
	pop edi
	mov al, [esp+18h]
	add al, 41h
	mov [esp+10h], al

loc_45A51E:
	mov eax, [esp+18h]
	mov eax, dword dword_512160[eax*4]
	call sub_489F60
	mov eax, ebp
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_45A420 endp

sub_45A560: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 134h
	mov ebp, eax
	mov [esp+130h], edx
	mov [esp+11Ch], ebx
	mov [esp+118h], ecx
	mov ebx, 80h
	xor edx, edx
	mov esi, dword [dword_4D6A60]
	mov [esp+128h], edx
	mov [esp+12Ch], edx
	mov [esp+114h], edx
	mov [ecx], edx
	test esi, esi
	jnz loc_45A5AF
	xor eax, eax
	call sub_45AC50

loc_45A5AF:
	mov edi, ebp
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp ecx, 104h
	ja loc_45A8F7
	mov eax, dword [dword_4D6A58]
	call sub_489F48
	mov edi, dword [dword_4D6A5C]
	xor esi, esi
	test edi, edi
	jle loc_45A5F8
	mov edx, dword [dword_4D6A60]
	mov ecx, edi
	xor eax, eax
	shl ecx, 5

loc_45A5EA:
	cmp dword [edx+eax], 0FFFFFFFFh
	jz loc_45A5F8
	add eax, 20h
	inc esi
	cmp eax, ecx
	jl loc_45A5EA

loc_45A5F8:
	cmp esi, dword [dword_4D6A5C]
	jge loc_45A612
	mov eax, esi
	mov edx, dword [dword_4D6A60]
	shl eax, 5
	mov dword [edx+eax], 0

loc_45A612:
	mov eax, dword [dword_4D6A58]
	call sub_489F60
	cmp esi, dword [dword_4D6A5C]
	jz loc_45A8E6
	test byte [esp+130h], 1
	jz loc_45A903

loc_45A636:
	or byte [esp+12Bh], 80h

loc_45A63E:
	test byte [esp+130h], 2
	jz loc_45A650
	or byte [esp+12Bh], 40h

loc_45A650:
	test byte [esp+130h], 4
	jz loc_45A662
	or byte [esp+12Ch], 1

loc_45A662:
	test byte [esp+130h], 8
	jz loc_45A674
	or byte [esp+12Ch], 2

loc_45A674:
	mov cl, [esp+130h]
	test cl, 1
	jz loc_45A916
	mov dword [esp+124h], 3

loc_45A68F:
	test byte [esp+131h], 2
	jz loc_45A69F
	or ebx, 8000000h

loc_45A69F:
	test byte [esp+131h], 10h
	jz loc_45A6B8
	cmp dword [dword_4D6A64], 0
	jnz loc_45A6B8
	or ebx, 20000000h

loc_45A6B8:
	mov cl, [esp+130h]
	test cl, 1
	jnz loc_45A6D9
	test cl, 2
	jz loc_45A6D9
	test byte [esp+131h], 4
	jz loc_45A6D9
	or ebx, 80000000h

loc_45A6D9:
	mov ecx, esi
	mov eax, dword [dword_4D6A60]
	shl ecx, 5
	mov edx, [esp+130h]
	mov [ecx+eax+4], edx
	mov eax, 41h
	mov edx, dword [dword_4D6A60]
	add ecx, edx
	lea edi, [eax-41h]
	mov [ecx+0Ch], di
	lea edx, 0[edi*4]
	cmp dword dword_512160[edx], 0
	jnz loc_45A721
	call sub_489EF8
	mov dword dword_512160[edx], eax

loc_45A721:
	mov eax, dword dword_512160[edi*4]
	call sub_489F48
	mov dword [esp+108h], 800h
	push 0 ; hTemplateFile
	push ebx ; dwFlagsAndAttributes
	mov edx, [esp+12Ch]
	push edx ; dwCreationDisposition
	push 0 ; lpSecurityAttributes
	mov ecx, [esp+13Ch]
	push ecx ; dwShareMode
	mov ebx, [esp+13Ch]
	push ebx ; dwDesiredAccess
	push ebp ; lpFileName
	call CreateFileA_wrap
	mov ecx, esi
	mov edx, dword [dword_4D6A60]
	shl ecx, 5
	add ecx, edx
	mov [ecx], eax
	cmp eax, 0FFFFFFFFh
	jz loc_45A8DA
	test byte [esp+131h], 1
	jz loc_45A95F
	mov eax, [esp+11Ch]

loc_45A7BA:
	mov [ecx+8], eax

loc_45A7BD:
	mov ebx, esi
	mov eax, dword [dword_4D6A60]
	shl ebx, 5
	mov dword [ebx+eax+10h], 0
	mov dword [ebx+eax+14h], 0
	push 0 ; lpFileSizeHigh
	mov ecx, [ebx+eax]
	mov dword [ebx+eax+18h], 0
	push ecx ; hFile
	mov word [ebx+eax+0Eh], 0
	call GetFileSize_wrap
	mov edx, dword [dword_4D6A60]
	mov [edx+ebx+1Ch], eax
	mov dl, [esp+131h]
	test dl, 8
	jz loc_45A9A9
	mov ebp, 2
	mov ch, [esp+131h]
	mov edx, 8000000h
	test ch, 10h
	jz loc_45A845
	mov eax, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov ecx, 1AAh
	push aOpenwinfileCan ; "openwinfile - CANNOT MIRROR MAPPED FILE"...
	mov dword [dword_4DB1D8], eax
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	add esp, 4

loc_45A845:
	mov al, [esp+130h]
	test al, 1
	jz loc_45A999
	test al, 2
	jz loc_45A98C
	or dl, 4

loc_45A85F:
	push 0 ; lpName
	push 0 ; dwMaximumSizeLow
	push 0 ; dwMaximumSizeHigh
	mov eax, dword [dword_4D6A60]
	mov ebx, esi
	push edx ; flProtect
	shl ebx, 5
	push 0 ; lpFileMappingAttributes
	mov edx, [ebx+eax]
	push edx ; hFile
	call CreateFileMappingA_wrap
	mov edx, eax
	mov eax, dword [dword_4D6A60]
	add eax, ebx
	mov ecx, edx
	mov [eax+10h], edx
	test ecx, ecx
	jz loc_45A8AA
	mov edx, [eax+1Ch]
	push edx ; dwNumberOfBytesToMap
	push 0 ; dwFileOffsetLow
	push 0 ; dwFileOffsetHigh
	push ebp ; dwDesiredAccess
	push ecx ; hFileMappingObject
	call MapViewOfFile_wrap
	mov edx, dword [dword_4D6A60]
	mov [edx+ebx+14h], eax

loc_45A8AA:
	mov eax, esi
	mov edx, dword [dword_4D6A60]
	shl eax, 5
	add eax, edx
	cmp dword [eax+14h], 0
	jnz loc_45A8C1
	and byte [eax+5], 0E7h

loc_45A8C1:
	mov eax, [esp+118h]
	mov ebp, 1
	mov [eax], esi
	not esi
	mov [esp+114h], ebp
	mov [eax], esi

loc_45A8DA:
	mov eax, dword dword_512160[edi*4]
	call sub_489F60

loc_45A8E6:
	mov eax, [esp+114h]
	add esp, 134h
	pop ebp
	pop edi
	pop esi
	ret

loc_45A8F7:
	xor eax, eax
	add esp, 134h
	pop ebp
	pop edi
	pop esi
	ret

loc_45A903:
	test byte [esp+131h], 8
	jnz loc_45A636
	jmp loc_45A63E

loc_45A916:
	test cl, 10h
	jz loc_45A938
	test cl, 20h
	jz loc_45A931
	mov eax, 2

loc_45A925:
	mov [esp+124h], eax
	jmp loc_45A68F

loc_45A931:
	mov eax, 1
	jmp loc_45A925

loc_45A938:
	test cl, 20h
	jz loc_45A94E
	mov eax, 5
	mov [esp+124h], eax
	jmp loc_45A68F

loc_45A94E:
	mov eax, 3
	mov [esp+124h], eax
	jmp loc_45A68F

loc_45A95F:
	mov eax, [esp+11Ch]
	mov edx, [esp+108h]
	cmp eax, edx
	jbe loc_45A984
	add eax, edx
	mov ebx, edx
	dec eax
	mov ebp, ebx
	xor edx, edx
	div ebp
	imul eax, ebx
	jmp loc_45A7BA

loc_45A984:
	mov [ecx+8], edx
	jmp loc_45A7BD

loc_45A98C:
	mov ebp, 4
	or dl, 2
	jmp loc_45A85F

loc_45A999:
	test al, 2
	jz loc_45A85F
	or dl, 8
	jmp loc_45A85F

loc_45A9A9:
	test dl, 10h
	jz loc_45AB50
	cmp dword [dword_4D6A64], 0
	jnz loc_45AB50
	test byte [esp+130h], 2
	jz loc_45A9EB
	mov ebp, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov eax, 1C4h
	push aOpenwinfileC_0 ; "openwinfile - CANNOT MEMORY MIRROR FILE"...
	mov dword [dword_4DB1D8], ebp
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_45A9EB:
	mov edx, esi
	mov eax, dword [dword_4D6A60]
	shl edx, 5
	cmp dword [edx+eax+8], 0
	jnz loc_45AA1F
	mov ebx, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov ebp, 1C7h
	push aOpenwinfileMus ; "openwinfile - MUST SPECIFY BLOCK SIZE F"...
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], ebp
	call sub_4840F0
	add esp, 4

loc_45AA1F:
	mov eax, esi
	mov ecx, dword [dword_4D6A60]
	shl eax, 5
	add ecx, eax
	mov [esp+120h], eax
	mov eax, [ecx+1Ch]
	add eax, [ecx+8]
	lea edx, [eax-1]
	mov ebx, [ecx+8]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword [dword_4D6A6C], eax
	mov ebp, dword [dword_4D6A6C]
	add ebp, 7FFFh
	sar ebp, 0Fh
	shl ebp, 0Ch
	mov edx, dword [dword_4D6A6C]
	add edx, 1Fh
	imul edx, ebx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebx, 300h
	mov edx, 1CDh
	shl eax, 5
	mov dword [dword_4DB1DC], edx
	add ebp, eax
	mov eax, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov edx, ebp
	mov dword [dword_4DB1D8], eax
	mov eax, aMirror ; "mirror"
	mov ecx, [esp+120h]
	call sub_484498
	mov edx, dword [dword_4D6A60]
	add edx, ecx
	mov dword [dword_4D6A70], eax
	mov edx, [edx+8]
	imul edx, dword [dword_4D6A6C]
	lea ecx, [eax+edx]
	xor ebp, ebp
	mov dword [dword_4D6A74], ecx
	mov dword [dword_4D6A68], ebp
	test eax, eax
	jz loc_45AB23
	mov eax, dword [dword_4D6A6C]
	mov edx, dword [dword_4D6A6C]
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov ebx, esi
	mov edx, eax
	mov eax, ecx
	not ebx
	call sub_48A01C
	push dword_5121E0
	mov ecx, 0FFFFFFFFh
	mov eax, sub_45B0E0
	mov dword [dword_4D6A64], esi
	xor edx, edx
	mov dword [dword_4D6A64], ebx
	mov ebx, 1
	call sub_489AE0
	jmp loc_45A8C1

loc_45AB23:
	call sub_4848FC
	mov ecx, [esp+120h]
	mov eax, dword [dword_4D6A60]
	add eax, ecx
	mov cl, [eax+5]
	mov dword [dword_4D6A74], ebp
	and cl, 0EFh
	mov dword [dword_4D6A70], ebp
	mov [eax+5], cl
	jmp loc_45A8C1

loc_45AB50:
	mov edx, esi
	mov eax, dword [dword_4D6A60]
	shl edx, 5
	and byte [edx+eax+5], 0E7h
	jmp loc_45A8C1
;sub_45A560 endp

sub_45ABA0: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	cmp dword [dword_4D6A60], 0
	jnz loc_45ABB0
	pop ebp
	pop edx
	pop ecx
	ret

loc_45ABB0:
	push esi
	push ebx
	mov eax, dword [dword_4D6A58]
	call sub_489F48
	mov ecx, dword [dword_4D6A5C]
	xor edx, edx
	test ecx, ecx
	jle loc_45ABEC
	xor ecx, ecx

loc_45ABCA:
	mov eax, dword [dword_4D6A60]
	cmp dword [ecx+eax], 0FFFFFFFFh
	jz loc_45ABDE
	mov eax, edx
	not eax
	call sub_459B80

loc_45ABDE:
	mov ebx, dword [dword_4D6A5C]
	inc edx
	add ecx, 20h
	cmp edx, ebx
	jl loc_45ABCA

loc_45ABEC:
	mov eax, dword [dword_4D6A60]
	call sub_4848FC
	xor esi, esi
	xor edx, edx
	mov dword [dword_4D6A60], esi
	xor ecx, ecx
	pop ebx
	pop esi

loc_45AC04:
	mov ebp, dword dword_512160[edx]
	cmp ecx, ebp
	jz loc_45AC1B
	mov eax, ebp
	call sub_489F74
	mov dword dword_512160[edx], ecx

loc_45AC1B:
	add edx, 4
	cmp edx, 80h
	jnz loc_45AC04
	mov eax, dword [dword_4D6A58]
	call sub_489F60
	mov eax, dword [dword_4D6A58]
	call sub_489F74
	xor eax, eax
	mov dword [dword_4D6A58], eax
	pop ebp
	pop edx
	pop ecx
	ret
;sub_45ABA0 endp

sub_45AC50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ecx, eax
	cmp dword [dword_4D6A58], 0
	jz loc_45ACCC

loc_45AC60:
	cmp dword [dword_4D6A60], 0
	jz loc_45AC6E
	call sub_45ABA0

loc_45AC6E:
	mov eax, dword [dword_4D6A58]
	call sub_489F48
	test ecx, ecx
	jnz loc_45AC81
	mov ecx, 40h

loc_45AC81:
	mov esi, aCNfs2seGameC_0 ; "c:\\nfs2se\\game\\common\\eacfile.c"
	mov edi, 12Bh
	mov dword [dword_4DB1D8], esi
	mov esi, ecx
	mov ebx, 300h
	shl esi, 5
	mov eax, aFilehandles ; "filehandles"
	mov edx, esi
	mov dword [dword_4DB1DC], edi
	call sub_484498
	mov dword [dword_4D6A60], eax
	mov dword [dword_4D6A5C], ecx
	test eax, eax
	jnz loc_45ACD8
	mov eax, dword [dword_4D6A58]
	call sub_489F60
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45ACCC:
	call sub_489EF8
	mov dword [dword_4D6A58], eax
	jmp loc_45AC60

loc_45ACD8:
	mov ebx, 0FFh
	mov edx, esi
	call sub_48A026
	mov edx, 80h
	mov eax, dword_512160
	call sub_48A01C
	mov eax, dword [dword_4D6A58]
	call sub_489F60
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45AC50 endp

sub_45AD10: ;SUBROUTINE
	push ecx
	push edx
	push eax ; lpBuffer
	push 100h ; nBufferLength
	call GetCurrentDirectoryA_wrap
	pop edx
	pop ecx
	ret
;sub_45AD10 endp

sub_45B0E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	call sub_489E0C
	mov ecx, dword [dword_4D6A64]
	not ecx
	mov ebx, dword [dword_4D6A60]
	shl ecx, 5
	mov [esp+8], eax
	add ebx, ecx
	mov dword [dword_5121F4], eax
	mov esi, [ebx+18h]

loc_45B10D:
	mov eax, [ebx+0Ah]
	sar eax, 10h
	mov eax, dword dword_512160[eax*4]
	call sub_489F48
	cmp esi, [ebx+1Ch]
	jle loc_45B126
	xor esi, esi

loc_45B126:
	mov eax, esi
	mov edx, esi
	mov ecx, [ebx+8]
	sar edx, 1Fh
	idiv ecx
	mov ebp, 1
	mov edi, eax
	mov ecx, eax
	sar edi, 5
	and ecx, 1Fh
	lea eax, 0[edi*4]
	shl ebp, cl
	mov ecx, dword [dword_4D6A74]
	add eax, ecx
	mov edx, [eax]
	test edx, edx
	jnz loc_45B237
	push edx ; dwMoveMethod
	push edx ; lpDistanceToMoveHigh
	push esi ; lDistanceToMove
	mov ecx, [ebx]
	push ecx ; hFile
	call SetFilePointer_wrap
	cmp eax, esi
	jnz loc_45B1D3
	push 0 ; lpOverlapped
	lea eax, [esp+4]
	push eax ; lpNumberOfBytesRead
	mov eax, [ebx+8]
	shl eax, 5
	push eax ; nNumberOfBytesToRead
	mov eax, dword [dword_4D6A70]
	add eax, esi
	push eax ; lpBuffer
	mov ebp, [ebx]
	push ebp ; hFile
	mov word [ebx+0Eh], 1
	call ReadFile_wrap
	test eax, eax
	jz loc_45B1B1
	mov eax, [ebx+8]
	mov edx, [esp]
	shl eax, 5
	cmp eax, edx
	jnz loc_45B223

loc_45B1A8:
	mov eax, 1

loc_45B1AD:
	mov [esp+0Ch], eax

loc_45B1B1:
	cmp dword [esp+0Ch], 0
	jz loc_45B1CB
	mov eax, dword [dword_4D6A74]
	mov dword [eax+edi*4], 0FFFFFFFFh
	sub dword [dword_4D6A6C], 20h

loc_45B1CB:
	mov eax, [ebx+8]
	shl eax, 5
	add esi, eax

loc_45B1D3:
	mov eax, [ebx+0Ah]
	sar eax, 10h
	mov eax, dword dword_512160[eax*4]
	call sub_489F60
	cmp dword [dword_4D6A68], 0
	jnz loc_45B1FB
	mov eax, dword [dword_5121F4]
	call sub_489E5C
	mov esi, [ebx+18h]

loc_45B1FB:
	cmp dword [dword_4D6A6C], 0
	jg loc_45B10D
	xor ebx, ebx
	mov dword [dword_5121F4], ebx
	mov eax, [esp+8]
	call CloseHandleCaller
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45B223:
	mov ecx, [ebx+1Ch]
	add eax, esi
	cmp eax, ecx
	jg loc_45B1A8
	xor eax, eax
	jmp loc_45B1AD

loc_45B237:
	test ebp, edx
	jz loc_45B258
	cmp edx, 0FFFFFFFFh
	jnz loc_45B250
	mov esi, edi
	shl esi, 5
	mov edx, [ebx+8]
	add esi, 20h
	imul esi, edx
	jmp loc_45B1D3

loc_45B250:
	add esi, [ebx+8]
	jmp loc_45B1D3

loc_45B258:
	push 0 ; dwMoveMethod
	push 0 ; lpDistanceToMoveHigh
	push esi ; lDistanceToMove
	mov eax, [ebx]
	push eax ; hFile
	call SetFilePointer_wrap
	cmp eax, esi
	jnz loc_45B2D2
	push 0 ; lpOverlapped
	lea eax, [esp+8]
	push eax ; lpNumberOfBytesRead
	mov edx, [ebx+8]
	mov eax, dword [dword_4D6A70]
	push edx ; nNumberOfBytesToRead
	add eax, esi
	push eax ; lpBuffer
	mov ecx, [ebx]
	push ecx ; hFile
	mov word [ebx+0Eh], 1
	call ReadFile_wrap
	test eax, eax
	jz loc_45B2A6
	mov eax, [esp+4]
	mov edx, [ebx+8]
	cmp eax, edx
	jnz loc_45B2C4

loc_45B29D:
	mov eax, 1

loc_45B2A2:
	mov [esp+10h], eax

loc_45B2A6:
	cmp dword [esp+10h], 0
	jz loc_45B2BC
	mov ecx, dword [dword_4D6A74]
	or [ecx+edi*4], ebp
	dec dword [dword_4D6A6C]

loc_45B2BC:
	add esi, [ebx+8]
	jmp loc_45B1D3

loc_45B2C4:
	mov ecx, [ebx+1Ch]
	lea eax, [edx+esi]
	cmp eax, ecx
	jg loc_45B29D
	xor eax, eax
	jmp loc_45B2A2

loc_45B2D2:
	mov word [ebx+0Eh], 1
	jmp loc_45B1D3
;sub_45B0E0 endp

sub_45B2E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	lea edx, 0[eax*4]
	sub edx, eax
	test al, 1
	jz loc_45B357

loc_45B2F0:
	mov ebx, eax
	test dl, 1
	jz loc_45B35A

loc_45B2F7:
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	and edx, 0FFFFh
	imul edx, ebx
	mov ecx, edx
	and ecx, 0FFFFh
	mov dword [dword_4D6A7C], edx
	mov dword [dword_4D6A78], ecx
	mov dword [dword_4D6A80], ebx
	pop edx
	pop ecx
	pop ebx
	ret

loc_45B357:
	inc eax
	jmp loc_45B2F0

loc_45B35A:
	inc edx
	jmp loc_45B2F7
;sub_45B2E0 endp

sub_45B380: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	call sub_45BD00
	mov ecx, [edi]
	mov edx, edi
	test ecx, ecx
	jz loc_45B3DD

loc_45B395:
	mov ebp, [edx]
	cmp ebp, 7Bh
	jl loc_45B462
	mov eax, dword_4D6C58
	mov esi, dword [dword_4D6C58]
	xor ebx, ebx
	test esi, esi
	jz loc_45B3C4

loc_45B3B1:
	mov esi, [edx]
	cmp esi, [eax]
	jnz loc_45B3BA
	mov ebx, [eax+4]

loc_45B3BA:
	mov ecx, [eax+8]
	add eax, 8
	test ecx, ecx
	jnz loc_45B3B1

loc_45B3C4:
	test ebx, ebx
	jz loc_45B3D5
	mov eax, [edx+4]
	shl eax, 6
	add ebx, eax
	mov eax, [edx+8]
	mov [ebx], eax

loc_45B3D5:
	add edx, 0Ch

loc_45B3D8:
	cmp dword [edx], 0
	jnz loc_45B395

loc_45B3DD:
	mov eax, edi
	call sub_4848FC
	mov edi, dword [dword_512260]
	xor esi, esi
	test edi, edi
	jle loc_45B430
	mov ecx, dword_512270
	mov edi, byte_512E84
	add ecx, 34h

loc_45B3FD:
	mov eax, esi
	shl eax, 6
	mov ebx, dword dword_512274[eax]
	cmp ebx, 1
	jnz loc_45B50F
	mov ebx, 9
	mov edx, edi
	mov eax, ecx

loc_45B41A:
	call strncpy_
	mov ebp, dword [dword_512260]
	add ecx, 40h
	inc esi
	add edi, 9
	cmp esi, ebp
	jl loc_45B3FD

loc_45B430:
	call sub_477C70
	cmp dword [dword_5121F8], 0
	jz loc_45B448
	mov dword [dword_512200], 1

loc_45B448:
	mov ah, byte [byte_512DA9]
	test ah, ah
	jz loc_45B45B
	cmp ah, 1
	jnz loc_45B548

loc_45B45B:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45B462:
	cmp ebp, 23h
	jl loc_45B4A5
	mov ecx, dword_5128D0
	lea eax, 0[ebp*4]
	add ecx, eax
	mov eax, [edx+4]
	mov [ecx-8Ch], eax
	and eax, 0FFh
	imul eax, 0Ch
	cmp dword dword_4D98AC[eax], 0
	jz loc_45B49D
	mov ecx, eax
	mov eax, [edx+4]
	sar eax, 8
	call dword dword_4D98AC[ecx]

loc_45B49D:
	add edx, 8
	jmp loc_45B3D8

loc_45B4A5:
	mov eax, dword_4D6C58
	mov ecx, dword [dword_4D6C58]
	xor esi, esi
	test ecx, ecx
	jz loc_45B4C9

loc_45B4B6:
	mov ebx, [edx]
	cmp ebx, [eax]
	jnz loc_45B4BF
	mov esi, [eax+4]

loc_45B4BF:
	mov ecx, [eax+8]
	add eax, 8
	test ecx, ecx
	jnz loc_45B4B6

loc_45B4C9:
	test esi, esi
	jz loc_45B4F3
	cmp dword [edx], 22h
	jl loc_45B508
	mov ebp, [edx+4]
	xor ebx, ebx
	test ebp, ebp
	jle loc_45B4F3
	mov ecx, edx
	mov eax, esi

loc_45B4DF:
	add eax, 4
	mov esi, [ecx+8]
	mov [eax-4], esi
	inc ebx
	mov esi, [edx+4]
	add ecx, 4
	cmp ebx, esi
	jl loc_45B4DF

loc_45B4F3:
	cmp dword [edx], 22h
	jl loc_45B500
	mov eax, [edx+4]
	shl eax, 2
	add edx, eax

loc_45B500:
	add edx, 8
	jmp loc_45B3D8

loc_45B508:
	mov eax, [edx+4]
	mov [esi], eax
	jmp loc_45B4F3

loc_45B50F:
	cmp ebx, 2
	jnz loc_45B52D
	mov edx, dword dword_5122A0[eax]
	mov ebx, 8
	mov eax, ecx
	mov edx, dword off_4D4A9C[edx*4]
	jmp loc_45B41A

loc_45B52D:
	mov edx, dword dword_512270[eax]
	mov ebx, 8
	shl edx, 3
	mov eax, ecx
	add edx, aMcf1 ; "MCF1"
	jmp loc_45B41A

loc_45B548:
	call sub_472B10
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45B380 endp

dword_45B560: times 3 dd 0
dword_45B56C: times 5 dd 0

sub_45B580: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	mov esi, esp
	mov edi, edx
	call sub_42DAF0
	mov esi, esp
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret
;sub_45B580 endp

sub_45B5A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	cmp dword [esp+14h], 0
	jz loc_45B612
	mov edx, [esp+10h]
	xor ebp, ebp
	test edx, edx
	jle loc_45B60C

loc_45B5B8:
	mov eax, [esi]
	mov edx, [ebx]
	sub edx, eax
	mov eax, [ecx]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [esi]
	add edx, eax
	mov [edi], edx
	mov edx, [ebx+4]
	sub edx, [esi+4]
	mov eax, [ecx]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	add esi, 8
	add ecx, 4
	add ebx, 8
	mov edx, [esi-4]
	add edi, 8
	add edx, eax
	inc ebp
	mov [edi-4], edx
	mov edx, [esp+10h]
	cmp ebp, edx
	jl loc_45B5B8
	nop

loc_45B60C:
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45B612:
	mov eax, [esp+10h]
	mov ecx, [ecx]
	xor ebp, ebp
	test eax, eax
	jle loc_45B60C

loc_45B61E:
	mov eax, [esi]
	mov edx, [ebx]
	sub edx, eax
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [esi]
	add edx, eax
	mov [edi], edx
	mov edx, [ebx+4]
	sub edx, [esi+4]
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	add esi, 8
	mov edx, [esi-4]
	add ebx, 8
	add edx, eax
	inc ebp
	mov [edi+4], edx
	mov edx, [esp+10h]
	add edi, 8
	cmp ebp, edx
	jl loc_45B61E
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_45B5A0 endp

;	Attributes: thunk

sub_45B670: ;SUBROUTINE
	jmp sub_42E6C0
;sub_45B670 endp

;	Attributes: thunk

sub_45B680: ;SUBROUTINE
	jmp sub_42E6E0
;sub_45B680 endp

sub_45B690: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov [esp+28h], eax
	mov [esp+34h], edx
	mov ebp, ebx
	mov [esp+2Ch], ecx
	xor edx, edx
	mov [esp+30h], edx
	test eax, eax
	jle loc_45B82B

loc_45B6B2:
	mov eax, [esp+34h]
	cmp dword [eax+8], 0
	jnz loc_45B6C3
	mov dword [eax+8], 1

loc_45B6C3:
	mov eax, [esp+34h]
	lea edx, [esp+24h]
	lea edi, [esp+14h]
	mov esi, esp
	fild dword [eax+8]
	lea eax, [esp+20h]
	fstp dword [esp+20h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+24h]
	mov ebx, esp
	mov eax, [esp+34h]
	add ebp, 8
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45B7D0
	cmp eax, ecx
	jge loc_45B7D0
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45B7A4
	cmp eax, ecx
	jl loc_45B7A4
	cmp eax, edx
	jle loc_45B7A8
	or ebx, 4
	jmp loc_45B7A8

loc_45B7A4:
	or ebx, 8
	nop

loc_45B7A8:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45B7CB
	cmp eax, ecx
	jl loc_45B7CB
	cmp eax, edx
	jle loc_45B7D5
	or ebx, 2
	jmp loc_45B7D5

loc_45B7CB:
	or ebx, 1
	jmp loc_45B7D5

loc_45B7D0:
	mov ebx, 10h

loc_45B7D5:
	mov [edi], bl
	fld dword [esp]
	mov eax, [esp+2Ch]
	call __CHP
	fistp dword [ebp-8]
	fld dword [esp+4]
	call __CHP
	mov ebx, [ebp-8]
	fistp dword [ebp-4]
	mov eax, [eax]
	mov edi, [esp+34h]
	add ebx, eax
	mov eax, [esp+2Ch]
	mov [ebp-8], ebx
	mov edx, [esp+28h]
	mov esi, [ebp-4]
	mov eax, [eax+4]
	add edi, 0Ch
	add esi, eax
	mov eax, [esp+30h]
	mov [esp+34h], edi
	inc eax
	mov [ebp-4], esi
	mov [esp+30h], eax
	cmp eax, edx
	jl loc_45B6B2

loc_45B82B:
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	ret
;sub_45B690 endp

sub_45B840: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov [esp+18h], edx
	mov ebp, ebx
	mov edi, esp
	mov esi, dword_45B560
	movsd
	movsd
	movsd
	lea edi, [esp+0Ch]
	mov esi, dword_45B56C
	movsd
	movsd
	movsd
	lea esi, [eax+44h]
	mov ebx, esp
	lea eax, [esp+0Ch]
	mov edx, esi
	call sub_49EAC8
	mov ebx, [esp+18h]
	mov edx, esp
	push ecx
	mov eax, esi
	mov ecx, ebp
	call sub_45B890
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_45B840 endp

sub_45B890: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp], eax
	mov edi, edx
	mov [esp+4], ebx
	mov esi, ecx
	mov ecx, [esp+18h]
	xor ebp, ebp
	test ebx, ebx
	jle loc_45B8E0

loc_45B8AB:
	mov edx, [esp]
	mov ebx, ecx
	mov eax, esi
	call sub_49EAC8
	mov eax, [edi]
	add [ecx], eax
	mov edx, [ecx+4]
	mov eax, [edi+4]
	add ecx, 0Ch
	add edx, eax
	mov [ecx-8], edx
	inc ebp
	mov ebx, [ecx-4]
	mov eax, [edi+8]
	add esi, 0Ch
	add ebx, eax
	mov eax, [esp+4]
	mov [ecx-4], ebx
	cmp ebp, eax
	jl loc_45B8AB

loc_45B8E0:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_45B890 endp

sub_45B8F0: ;SUBROUTINE
	mov eax, dword [dword_540F4C]
	and eax, 1Fh
	mov eax, dword dword_512848[eax*4]
	and eax, 1
	ret
;sub_45B8F0 endp

sub_45B910: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, dword [dword_512A40]
	mov ecx, dword [dword_540F4C]
	and ecx, 1Fh
	lea ebx, 0[ecx*4]
	mov cl, al
	mov eax, 1
	shl eax, cl
	test dword dword_512848[ebx], eax
	jz loc_45B970
	mov eax, dword [dword_540F4C]
	lea ecx, [eax-1]
	and eax, 1Fh
	and ecx, 1Fh
	mov eax, dword dword_512848[eax*4]
	cmp eax, dword dword_512848[ecx*4]
	jnz loc_45B95F
	mov eax, esi
	inc esi
	cmp eax, edx
	jle loc_45B970

loc_45B95F:
	mov eax, 1
	xor esi, esi
	mov dword [dword_512A40], esi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45B970:
	xor eax, eax
	mov dword [dword_512A40], esi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45B910 endp

sub_45B980: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, edx
	mov edx, 1
	mov esi, dword [dword_540F4C]
	mov cl, al
	and esi, 1Fh
	shl edx, cl
	lea eax, 0[esi*4]
	test ebx, ebx
	jz loc_45B9C9
	mov ebx, dword dword_512848[eax]
	mov eax, dword [dword_540F4C]
	dec eax
	and eax, 1Fh
	mov eax, dword dword_512848[eax*4]
	and edx, ebx
	not eax
	test edx, eax
	jz loc_45B9DA
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_45B9C9:
	test dword dword_512848[eax], edx
	jz loc_45B9DA
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_45B9DA:
	xor eax, eax
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45B980 endp

sub_45B9E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, edx
	mov edx, 1
	mov esi, dword [dword_540F4C]
	mov cl, al
	and esi, 1Fh
	shl edx, cl
	lea eax, 0[esi*4]
	test ebx, ebx
	jz loc_45BA29
	mov ebx, dword dword_5127C8[eax]
	mov eax, dword [dword_540F4C]
	dec eax
	and eax, 1Fh
	mov eax, dword dword_5127C8[eax*4]
	and edx, ebx
	not eax
	test edx, eax
	jz loc_45BA3A
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_45BA29:
	test dword dword_5127C8[eax], edx
	jz loc_45BA3A
	mov eax, 1
	pop esi
	pop ecx
	pop ebx
	ret

loc_45BA3A:
	xor eax, eax
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45B9E0 endp

sub_45BA40: ;SUBROUTINE
	mov ah, byte [byte_512A3B]
	test ah, 2
	jz loc_45BA59
	test al, al
	jnz loc_45BA52
	mov al, 1

locret_45BA51:
	ret

loc_45BA52:
	cmp al, 1
	jnz locret_45BA51
	mov al, 2
	ret

loc_45BA59:
	test ah, 1
	jz locret_45BA51
	cmp al, 1
	jnz loc_45BA65
	xor al, al
	ret

loc_45BA65:
	jbe locret_45BA51
	mov al, 1
	ret
;sub_45BA40 endp

sub_45BA70: ;SUBROUTINE
	mov ah, byte [byte_512A3B]
	test ah, 2
	jz loc_45BA89
	push ecx
	xor ecx, ecx
	dec edx
	mov cl, al
	cmp ecx, edx
	jge loc_45BA87
	inc al

loc_45BA87:
	pop ecx

locret_45BA88:
	ret

loc_45BA89:
	test ah, 1
	jz locret_45BA88
	test al, al
	jbe locret_45BA88
	dec al
	ret
;sub_45BA70 endp

sub_45BAA0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, (dword_512A35+3)
	call sub_473800
	xor edx, edx
	mov al, byte [byte_512A3B]
	mov dl, byte byte_5127C0[ecx]
	and al, 43h
	not edx
	mov byte byte_5127C0[ecx], al
	and byte [byte_512A3B], dl
	pop edx
	pop ecx
	ret
;sub_45BAA0 endp

sub_45BAD0: ;SUBROUTINE
	push ebx
	push edx
	cmp dword [dword_512214], 1
	jle loc_45BAF9
	cmp dword [dword_540F28], 0
	jnz loc_45BAED
	cmp dword [dword_540F2C], 0
	jz loc_45BAF0

loc_45BAED:
	pop edx
	pop ebx
	ret

loc_45BAF0:
	inc dword [dword_4D9678]
	pop edx
	pop ebx
	ret

loc_45BAF9:
	cmp dword [dword_4D967C], 0
	jnz loc_45BAED
	mov ebx, dword [dword_512208]
	cmp ebx, 1
	jz loc_45BB23
	test ebx, ebx
	jnz loc_45BB42
	mov edx, dword_512A30
	mov eax, dword [dword_51220C]
	call sub_473A14
	pop edx
	pop ebx
	ret

loc_45BB23:
	mov edx, dword_512A30
	xor eax, eax
	call sub_473A14
	test eax, eax
	jz loc_45BAED
	mov edx, byte_512A34
	mov eax, ebx
	call sub_473A14
	pop edx
	pop ebx
	ret

loc_45BB42:
	mov eax, dword_512A30
	call sub_472A00
	pop edx
	pop ebx
	ret
;sub_45BAD0 endp

sub_45BB50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	call sub_4779D0
	mov ecx, dword_5128D0
	mov edi, dword_512A30
	mov edx, off_4D98A4
	xor ebp, ebp
	mov [esp], edx

loc_45BB72:
	mov eax, [ecx]
	and eax, 0FFh
	imul eax, 0Ch
	mov edx, off_4D98A4
	add edx, eax
	mov eax, [ecx]
	sar eax, 8
	call dword [edx+4]
	mov edx, eax
	mov eax, [ecx+4]
	and eax, 0FFh
	imul eax, 0Ch
	mov ebx, off_4D98A4
	add ebx, eax
	mov eax, [ecx+4]
	sar eax, 8
	call dword [ebx+4]
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [edi], al
	mov edx, [ecx+8]
	and edx, 0FFh
	imul edx, 0Ch
	mov eax, [ecx+8]
	add edx, off_4D98A4
	sar eax, 8
	call dword [edx+4]
	mov [edi+1], al
	mov eax, [ecx+0Ch]
	and eax, 0FFh
	imul eax, 0Ch
	add ecx, 4
	add ecx, 4
	mov edx, off_4D98A4
	add ecx, 4
	add edx, eax
	mov eax, [ecx]
	add ecx, 4
	sar eax, 8
	xor ebx, ebx
	call dword [edx+4]
	xor edx, edx
	mov [edi+2], al

loc_45BC00:
	mov esi, [ecx]
	add edx, edx
	test esi, esi
	jnz loc_45BCD0

loc_45BC0C:
	inc ebx
	add ecx, 4
	cmp ebx, 8
	jl loc_45BC00
	add edi, 4
	mov eax, dword [dword_512208]
	mov [edi-1], dl
	cmp eax, 1
	jz loc_45BC29
	inc ebp
	add ecx, 30h

loc_45BC29:
	inc ebp
	cmp ebp, 2
	jl loc_45BB72
	xor ebx, ebx
	xor edi, edi

loc_45BC37:
	mov esi, [ecx]
	shr edx, 1
	cmp edi, esi
	jz loc_45BC60
	mov eax, esi
	and eax, 0FFh
	imul eax, 0Ch
	mov esi, [esp]
	add esi, eax
	mov eax, [ecx]
	sar eax, 8
	call dword [esi+4]
	test eax, eax
	jz loc_45BC60
	or edx, 80000000h

loc_45BC60:
	inc ebx
	add ecx, 4
	cmp ebx, 20h
	jl loc_45BC37
	mov eax, dword [dword_512A3C]
	inc eax
	and eax, 1Fh
	xor ebx, ebx
	mov dword dword_512848[eax*4], edx
	xor edi, edi

loc_45BC7D:
	mov ebp, [ecx]
	shr edx, 1
	cmp edi, ebp
	jz loc_45BCA6
	mov eax, ebp
	and eax, 0FFh
	imul eax, 0Ch
	mov esi, [esp]
	add esi, eax
	mov eax, ebp
	sar eax, 8
	call dword [esi+4]
	test eax, eax
	jz loc_45BCA6
	or edx, 80000000h

loc_45BCA6:
	inc ebx
	add ecx, 4
	cmp ebx, 20h
	jl loc_45BC7D
	mov eax, dword [dword_512A3C]
	inc eax
	mov ecx, eax
	and ecx, 1Fh
	mov dword [dword_512A3C], eax
	mov dword dword_5127C8[ecx*4], edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45BCD0:
	and esi, 0FFh
	imul esi, 0Ch
	mov eax, [ecx]
	add esi, off_4D98A4
	sar eax, 8
	call dword [esi+4]
	test eax, eax
	jz loc_45BC0C
	or dl, 1
	jmp loc_45BC0C
;sub_45BB50 endp

sub_45BD00: ;SUBROUTINE
	push edx
	call sub_478060
	mov edx, dword_5128D0
	xor eax, eax

loc_45BD0D:
	inc eax
	mov dword [edx], 0
	add edx, 4
	cmp eax, 58h
	jl loc_45BD0D
	xor eax, eax

loc_45BD1E:
	inc eax
	xor dl, dl
	mov byte byte_5127BF[eax], dl
	cmp eax, 2
	jl loc_45BD1E
	xor eax, eax
	xor edx, edx

loc_45BD30:
	add eax, 4
	mov dword dword_5127C4[eax], edx
	mov dword dword_512844[eax], edx
	cmp eax, 80h
	jnz loc_45BD30
	mov eax, dword_5128D0
	pop edx
	ret
;sub_45BD00 endp

sub_45BD70: ;SUBROUTINE
	push ebx
	push ecx
	push edx

loc_45BD73:
	mov edx, dword [dword_512A98]
	dec edx
	cmp edx, 0FFFFFFFFh
	jnz loc_45BD89
	mov dword [dword_512A98], edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_45BD89:
	push 1
	push 40000h
	mov ecx, dword dword_512A48[edx*8]
	push ecx
	mov ebx, dword dword_512A44[edx*8]
	push ebx
	mov dword [dword_512A98], edx
	call sub_471280
	jmp loc_45BD73
;sub_45BD70 endp

sub_45BDB0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 5Ch
	mov [esp+58h], eax
	mov ebx, edx
	mov edx, 16440h
	lea eax, [esp+54h]
	call sub_46FE70
	test eax, eax
	jz loc_45BFC8
	mov ecx, sub_45D960
	mov esi, sub_45D210
	mov edi, sub_45C8F0
	mov ebp, sub_45BFF0
	mov edx, sub_45E050
	xor eax, eax
	mov [esp+4], ecx
	mov dword [dword_512A9C], eax
	mov dword [dword_512A94], eax
	mov eax, [esp+58h]
	mov [esp+8], esi
	shl eax, 2
	mov [esp+0Ch], ebp
	lea ebp, 0[eax*8]
	mov [esp+10h], edi
	sub ebp, eax
	mov [esp], edx
	add ebp, ebx

loc_45BE1E:
	mov ecx, [esp+58h]
	dec ecx
	sub ebp, 1Ch
	mov [esp+58h], ecx
	cmp ecx, 0FFFFFFFFh
	jz loc_45BF93
	mov eax, [ebp+10h]
	mov cl, byte [dword_4DAB08]
	mov eax, [eax+8]
	shl eax, cl
	mov esi, ebp
	cmp eax, 6E0000h
	jle loc_45BF15
	cmp dword [ebp+0], 4
	jle loc_45BED2
	mov ecx, dword [dword_5222D8]
	lea eax, [ecx+24h]
	mov edi, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edi, edi
	jnz loc_45BEC9
	mov dword [dword_512A9C], ecx

loc_45BE76:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ecx
	mov eax, dword [dword_500CF4]

loc_45BE90:
	mov dword [ecx+4], 8
	mov [ecx+1Ch], eax
	mov eax, [esi+4]
	mov word [ecx+8], 1
	mov word [ecx+0Ah], 1
	mov [ecx+20h], eax
	mov eax, [esi+0Ch]
	mov [ecx+0Ch], eax
	mov eax, [esi+10h]
	mov [ecx+10h], eax
	mov eax, [esi+14h]
	mov [ecx+14h], eax
	mov eax, [esi+18h]
	mov [ecx+18h], eax
	jmp loc_45BE1E

loc_45BEC9:
	mov eax, dword [dword_512A94]
	mov [eax], ecx
	jmp loc_45BE76

loc_45BED2:
	mov ecx, dword [dword_5222D8]
	lea eax, [ecx+24h]
	mov ebx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test ebx, ebx
	jnz loc_45BF0C
	mov dword [dword_512A9C], ecx

loc_45BEF0:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ecx
	mov eax, dword [dword_500CF0]
	jmp loc_45BE90

loc_45BF0C:
	mov eax, dword [dword_512A94]
	mov [eax], ecx
	jmp loc_45BEF0

loc_45BF15:
	lea edi, [esp+34h]
	mov esi, [ebp+0Ch]
	movsd
	movsd
	movsd
	movsd
	lea edi, [esp+14h]
	mov esi, [ebp+10h]
	movsd
	movsd
	movsd
	movsd
	lea edi, [esp+24h]
	mov esi, [ebp+14h]
	movsd
	movsd
	movsd
	movsd
	lea edi, [esp+44h]
	mov esi, [ebp+18h]
	movsd
	movsd
	movsd
	movsd
	mov eax, [ebp+0]
	cmp eax, 4
	jle loc_45BF72
	lea esi, 0[eax*4]
	lea eax, [esp+44h]
	lea ecx, [esp+14h]
	push eax
	lea eax, [esp+28h]
	lea ebx, [esp+38h]
	push eax
	mov edx, 1
	mov eax, ebp
	call dword [esp+esi-0Ch]
	jmp loc_45BE1E

loc_45BF72:
	mov esi, eax
	lea eax, [esp+44h]
	lea ecx, [esp+14h]
	push eax
	lea eax, [esp+28h]
	lea ebx, [esp+38h]
	push eax
	xor edx, edx
	mov eax, ebp
	call dword [esp+esi*4+8]
	jmp loc_45BE1E

loc_45BF93:
	mov esi, dword [dword_512A98]
	cmp esi, 0Ah
	jge loc_45BFC8
	mov ecx, dword [dword_512A9C]
	mov dword dword_512A44[esi*8], ecx
	mov ecx, dword [dword_512A94]
	mov dword dword_512A48[esi*8], ecx
	test ecx, ecx
	jz loc_45BFC2
	mov dword [ecx], 0

loc_45BFC2:
	inc dword [dword_512A98]

loc_45BFC8:
	add esp, 5Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45BDB0 endp

sub_45BFE0: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_512A98], edx
	pop edx
	ret
;sub_45BFE0 endp

sub_45BFF0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov [esp+64h], eax
	mov edi, ebx
	mov esi, ecx
	mov eax, [eax+8]
	and eax, 6
	or eax, edx
	mov ebp, dword [dword_5222D8]
	mov ecx, dword dword_4D6DC0[eax*4]
	lea eax, [ebp+0F0h]
	mov dword [dword_5222D8], eax
	mov ebx, eax
	add eax, 24h
	mov edx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edx, edx
	jz loc_45C8D0
	mov eax, dword [dword_512A94]
	mov [eax], ebx

loc_45C03D:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esp+64h]
	mov eax, [eax+4]
	mov word [ebx+8], 1
	mov [ebx+20h], eax
	mov eax, [esp+64h]
	mov word [ebx+0Ah], 1
	mov eax, [eax+0Ch]
	mov [ebx+0Ch], eax
	mov [ebx+10h], ebp
	lea eax, [ebp+90h]
	mov [ebx+14h], eax
	mov eax, [esp+64h]
	mov eax, [eax+18h]
	mov [ebx+18h], eax
	mov ebx, dword [dword_5222D8]
	lea eax, [ebx+24h]
	mov dword [dword_5222D8], eax
	mov eax, dword [dword_512A9C]
	mov ecx, dword dword_4D6DC8[ecx*4]
	test eax, eax
	jnz loc_45C8DB
	mov dword [dword_512A9C], ebx

loc_45C0C1:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esp+64h]
	mov eax, [eax+4]
	mov word [ebx+8], 1
	mov [ebx+20h], eax
	lea eax, [ebp+30h]
	mov [ebx+0Ch], eax
	lea eax, [ebp+0C0h]
	mov [ebx+10h], eax
	mov eax, [esp+64h]
	mov word [ebx+0Ah], 1
	mov eax, [eax+14h]
	mov [ebx+14h], eax
	lea eax, [ebp+60h]
	mov ecx, [esp+7Ch]
	mov [ebx+18h], eax
	mov eax, [esp+80h]
	mov ecx, [ecx]
	mov edx, [eax]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax]
	add eax, ecx
	mov [ebp+90h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax]
	sub eax, ecx
	mov [ebp+60h], eax
	mov eax, [esp+7Ch]
	mov ecx, [eax+4]
	mov eax, [esp+80h]
	mov ebx, [eax+4]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax+4]
	add eax, ecx
	mov [ebp+94h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax+4]
	sub eax, ecx
	mov [ebp+64h], eax
	mov eax, [esp+7Ch]
	mov ecx, [eax+8]
	mov eax, [esp+80h]
	mov edx, [eax+8]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax+8]
	add eax, ecx
	mov [ebp+98h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax+8]
	sub eax, ecx
	mov [ebp+68h], eax
	mov ecx, [esi]
	mov ebx, [edi]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [ebx+ecx]
	mov [ebp+0], eax
	mov eax, [esi]
	mov edx, [ebp+60h]
	sub eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+30h], eax
	mov eax, [esp+7Ch]
	mov edx, [esi]
	mov ecx, [eax]
	lea eax, [edx+ecx]
	sar eax, 1
	mov [ebp+0C0h], eax
	mov ecx, [esi+4]
	mov ebx, [edi+4]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [ebx+ecx]
	mov [ebp+4], eax
	mov eax, [esi+4]
	mov edx, [ebp+64h]
	sub eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+34h], eax
	mov eax, [esp+7Ch]
	mov edx, [esi+4]
	mov ecx, [eax+4]
	lea eax, [edx+ecx]
	sar eax, 1
	mov [ebp+0C4h], eax
	mov ecx, [esi+8]
	mov ebx, [edi+8]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [ebx+ecx]
	mov [ebp+8], eax
	mov eax, [esi+8]
	mov edx, [ebp+68h]
	sub eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+38h], eax
	mov eax, [esp+7Ch]
	mov edx, [esi+8]
	mov ecx, [eax+8]
	lea eax, [edx+ecx]
	sar eax, 1
	mov [ebp+0C8h], eax
	mov ax, [edi+0Ch]
	mov [ebp+0CCh], ax
	mov [ebp+9Ch], ax
	mov [ebp+6Ch], ax
	mov [ebp+3Ch], ax
	mov [ebp+0Ch], ax
	mov eax, [ebp+0]
	mov [esp+0Ch], eax
	mov eax, [ebp+4]
	mov [esp+10h], eax
	mov eax, [ebp+8]
	mov [esp+14h], eax
	test eax, eax
	jnz loc_45C2B7
	mov dword [esp+14h], 1

loc_45C2B7:
	mov eax, [esp+14h]
	lea edx, [esp+40h]
	mov [esp+68h], eax
	lea esi, [ebp+10h]
	fild dword [esp+68h]
	lea eax, [esp+3Ch]
	fstp dword [esp+3Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+40h]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [ebp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45C3C6
	cmp eax, ecx
	jge loc_45C3C6
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45C39A
	cmp eax, ecx
	jl loc_45C39A
	cmp eax, edx
	jle loc_45C39E
	or ebx, 4
	jmp loc_45C39E

loc_45C39A:
	or ebx, 8
	nop

loc_45C39E:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45C3C1
	cmp eax, ecx
	jl loc_45C3C1
	cmp eax, edx
	jle loc_45C3CB
	or ebx, 2
	jmp loc_45C3CB

loc_45C3C1:
	or ebx, 1
	jmp loc_45C3CB

loc_45C3C6:
	mov ebx, 10h

loc_45C3CB:
	mov [edi], bl
	mov eax, [ebp+30h]
	mov [esp+30h], eax
	mov eax, [ebp+34h]
	mov [esp+34h], eax
	mov eax, [ebp+38h]
	mov [esp+38h], eax
	test eax, eax
	jnz loc_45C3EE
	mov dword [esp+38h], 1

loc_45C3EE:
	mov eax, [esp+38h]
	lea edx, [esp+48h]
	mov [esp+68h], eax
	lea esi, [ebp+40h]
	fild dword [esp+68h]
	lea eax, [esp+44h]
	fstp dword [esp+44h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+48h]
	lea eax, [esp+30h]
	mov ebx, esi
	lea edi, [ebp+54h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45C4FD
	cmp eax, ecx
	jge loc_45C4FD
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45C4D1
	cmp eax, ecx
	jl loc_45C4D1
	cmp eax, edx
	jle loc_45C4D5
	or ebx, 4
	jmp loc_45C4D5

loc_45C4D1:
	or ebx, 8
	nop

loc_45C4D5:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45C4F8
	cmp eax, ecx
	jl loc_45C4F8
	cmp eax, edx
	jle loc_45C502
	or ebx, 2
	jmp loc_45C502

loc_45C4F8:
	or ebx, 1
	jmp loc_45C502

loc_45C4FD:
	mov ebx, 10h

loc_45C502:
	mov [edi], bl
	mov eax, [ebp+60h]
	mov [esp], eax
	mov eax, [ebp+64h]
	mov [esp+4], eax
	mov eax, [ebp+68h]
	mov [esp+8], eax
	test eax, eax
	jnz loc_45C524
	mov dword [esp+8], 1

loc_45C524:
	mov eax, [esp+8]
	lea edx, [esp+50h]
	mov [esp+68h], eax
	lea esi, [ebp+70h]
	fild dword [esp+68h]
	lea eax, [esp+4Ch]
	fstp dword [esp+4Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+50h]
	mov eax, esp
	mov ebx, esi
	lea edi, [ebp+84h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45C634
	cmp eax, ecx
	jge loc_45C634
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45C608
	cmp eax, ecx
	jl loc_45C608
	cmp eax, edx
	jle loc_45C60C
	or ebx, 4
	jmp loc_45C60C

loc_45C608:
	or ebx, 8
	nop

loc_45C60C:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45C62F
	cmp eax, ecx
	jl loc_45C62F
	cmp eax, edx
	jle loc_45C639
	or ebx, 2
	jmp loc_45C639

loc_45C62F:
	or ebx, 1
	jmp loc_45C639

loc_45C634:
	mov ebx, 10h

loc_45C639:
	mov [edi], bl
	mov eax, [ebp+90h]
	mov [esp+18h], eax
	mov eax, [ebp+94h]
	mov [esp+1Ch], eax
	mov eax, [ebp+98h]
	mov [esp+20h], eax
	test eax, eax
	jnz loc_45C665
	mov dword [esp+20h], 1

loc_45C665:
	mov eax, [esp+20h]
	lea edx, [esp+58h]
	mov [esp+68h], eax
	lea esi, [ebp+0A0h]
	fild dword [esp+68h]
	lea eax, [esp+54h]
	fstp dword [esp+54h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+58h]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [ebp+0B4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45C77A
	cmp eax, ecx
	jge loc_45C77A
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45C74E
	cmp eax, ecx
	jl loc_45C74E
	cmp eax, edx
	jle loc_45C752
	or ebx, 4
	jmp loc_45C752

loc_45C74E:
	or ebx, 8
	nop

loc_45C752:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45C775
	cmp eax, ecx
	jl loc_45C775
	cmp eax, edx
	jle loc_45C77F
	or ebx, 2
	jmp loc_45C77F

loc_45C775:
	or ebx, 1
	jmp loc_45C77F

loc_45C77A:
	mov ebx, 10h

loc_45C77F:
	mov [edi], bl
	mov eax, [ebp+0C0h]
	mov [esp+24h], eax
	mov eax, [ebp+0C4h]
	mov [esp+28h], eax
	mov eax, [ebp+0C8h]
	mov [esp+2Ch], eax
	test eax, eax
	jnz loc_45C7AB
	mov dword [esp+2Ch], 1

loc_45C7AB:
	mov eax, [esp+2Ch]
	lea edx, [esp+60h]
	mov [esp+68h], eax
	lea esi, [ebp+0D0h]
	fild dword [esp+68h]
	lea eax, [esp+5Ch]
	fstp dword [esp+5Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+60h]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [ebp+0E4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45C8C0
	cmp eax, ecx
	jge loc_45C8C0
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45C894
	cmp eax, ecx
	jl loc_45C894
	cmp eax, edx
	jle loc_45C898
	or ebx, 4
	jmp loc_45C898

loc_45C894:
	or ebx, 8
	nop

loc_45C898:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45C8BB
	cmp eax, ecx
	jl loc_45C8BB
	cmp eax, edx
	jle loc_45C8C5
	or ebx, 2
	jmp loc_45C8C5

loc_45C8BB:
	or ebx, 1
	jmp loc_45C8C5

loc_45C8C0:
	mov ebx, 10h

loc_45C8C5:
	mov [edi], bl
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45C8D0:
	mov dword [dword_512A9C], ebx
	jmp loc_45C03D

loc_45C8DB:
	mov eax, dword [dword_512A94]
	mov [eax], ebx
	jmp loc_45C0C1
;sub_45BFF0 endp

sub_45C8F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov edi, eax
	mov esi, ebx
	mov [esp+64h], ecx
	mov eax, [eax+8]
	and eax, 6
	or eax, edx
	mov ebp, dword [dword_5222D8]
	mov ecx, dword dword_4D6DC0[eax*4]
	lea eax, [ebp+0F0h]
	mov dword [dword_5222D8], eax
	mov ebx, eax
	add eax, 24h
	mov edx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edx, edx
	jz loc_45D1EB
	mov eax, dword [dword_512A94]
	mov [eax], ebx

loc_45C93D:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [edi+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	lea eax, [ebp+0C0h]
	mov [ebx+0Ch], eax
	mov [ebx+10h], ebp
	lea eax, [ebp+90h]
	mov [ebx+14h], eax
	mov eax, [edi+18h]
	mov [ebx+18h], eax
	mov ebx, dword [dword_5222D8]
	lea eax, [ebx+24h]
	mov dword [dword_5222D8], eax
	mov eax, dword [dword_512A9C]
	mov ecx, dword dword_4D6DC8[ecx*4]
	test eax, eax
	jnz loc_45D1F6
	mov dword [dword_512A9C], ebx

loc_45C9B8:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [edi+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	lea eax, [ebp+30h]
	mov [ebx+0Ch], eax
	mov eax, [edi+10h]
	mov [ebx+10h], eax
	mov eax, [edi+14h]
	mov [ebx+14h], eax
	lea eax, [ebp+60h]
	mov ecx, [esp+7Ch]
	mov [ebx+18h], eax
	mov eax, [esp+80h]
	mov ecx, [ecx]
	mov edx, [eax]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax]
	add eax, ecx
	mov [ebp+90h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax]
	sub eax, ecx
	mov [ebp+60h], eax
	mov eax, [esp+7Ch]
	mov ecx, [eax+4]
	mov eax, [esp+80h]
	mov ebx, [eax+4]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax+4]
	add eax, ecx
	mov [ebp+94h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax+4]
	sub eax, ecx
	mov [ebp+64h], eax
	mov eax, [esp+7Ch]
	mov ecx, [eax+8]
	mov eax, [esp+80h]
	mov edi, [eax+8]
	sub ecx, edi
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+80h]
	mov eax, [eax+8]
	add eax, ecx
	mov [ebp+98h], eax
	mov eax, [esp+7Ch]
	mov eax, [eax+8]
	sub eax, ecx
	mov [ebp+68h], eax
	mov eax, [esp+64h]
	mov ecx, [eax]
	mov eax, [esi]
	sub ecx, eax
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+64h]
	mov eax, [eax]
	sub eax, ecx
	mov [ebp+30h], eax
	mov edx, [esi]
	mov ebx, [ebp+90h]
	add ecx, edx
	add ecx, ebx
	sar ecx, 1
	mov [ebp+0], ecx
	mov eax, [esp+80h]
	mov edx, [esi]
	mov edi, [eax]
	lea eax, [edx+edi]
	sar eax, 1
	mov [ebp+0C0h], eax
	mov eax, [esp+64h]
	mov ecx, [eax+4]
	mov eax, [esi+4]
	sub ecx, eax
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+64h]
	mov eax, [eax+4]
	sub eax, ecx
	mov [ebp+34h], eax
	mov edx, [esi+4]
	mov ebx, [ebp+94h]
	add ecx, edx
	add ecx, ebx
	sar ecx, 1
	mov [ebp+4], ecx
	mov eax, [esp+80h]
	mov edx, [esi+4]
	mov edi, [eax+4]
	lea eax, [edx+edi]
	sar eax, 1
	mov [ebp+0C4h], eax
	mov eax, [esp+64h]
	mov ecx, [eax+8]
	mov eax, [esi+8]
	sub ecx, eax
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+64h]
	mov eax, [eax+8]
	sub eax, ecx
	mov [ebp+38h], eax
	mov edx, [esi+8]
	mov ebx, [ebp+98h]
	add ecx, edx
	add ecx, ebx
	sar ecx, 1
	mov [ebp+8], ecx
	mov eax, [esp+80h]
	mov edx, [esi+8]
	mov edi, [eax+8]
	lea eax, [edx+edi]
	sar eax, 1
	mov [ebp+0C8h], eax
	mov ax, [esi+0Ch]
	mov [ebp+0CCh], ax
	mov [ebp+9Ch], ax
	mov [ebp+6Ch], ax
	mov [ebp+3Ch], ax
	mov [ebp+0Ch], ax
	mov eax, [ebp+0]
	mov [esp+0Ch], eax
	mov eax, [ebp+4]
	mov [esp+10h], eax
	mov eax, [ebp+8]
	mov [esp+14h], eax
	test eax, eax
	jnz loc_45CBD2
	mov dword [esp+14h], 1

loc_45CBD2:
	mov eax, [esp+14h]
	lea edx, [esp+40h]
	mov [esp+68h], eax
	lea esi, [ebp+10h]
	fild dword [esp+68h]
	lea eax, [esp+3Ch]
	fstp dword [esp+3Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+40h]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [ebp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45CCE1
	cmp eax, ecx
	jge loc_45CCE1
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45CCB5
	cmp eax, ecx
	jl loc_45CCB5
	cmp eax, edx
	jle loc_45CCB9
	or ebx, 4
	jmp loc_45CCB9

loc_45CCB5:
	or ebx, 8
	nop

loc_45CCB9:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45CCDC
	cmp eax, ecx
	jl loc_45CCDC
	cmp eax, edx
	jle loc_45CCE6
	or ebx, 2
	jmp loc_45CCE6

loc_45CCDC:
	or ebx, 1
	jmp loc_45CCE6

loc_45CCE1:
	mov ebx, 10h

loc_45CCE6:
	mov [edi], bl
	mov eax, [ebp+30h]
	mov [esp+30h], eax
	mov eax, [ebp+34h]
	mov [esp+34h], eax
	mov eax, [ebp+38h]
	mov [esp+38h], eax
	test eax, eax
	jnz loc_45CD09
	mov dword [esp+38h], 1

loc_45CD09:
	mov eax, [esp+38h]
	lea edx, [esp+48h]
	mov [esp+68h], eax
	lea esi, [ebp+40h]
	fild dword [esp+68h]
	lea eax, [esp+44h]
	fstp dword [esp+44h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+48h]
	lea eax, [esp+30h]
	mov ebx, esi
	lea edi, [ebp+54h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45CE18
	cmp eax, ecx
	jge loc_45CE18
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45CDEC
	cmp eax, ecx
	jl loc_45CDEC
	cmp eax, edx
	jle loc_45CDF0
	or ebx, 4
	jmp loc_45CDF0

loc_45CDEC:
	or ebx, 8
	nop

loc_45CDF0:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45CE13
	cmp eax, ecx
	jl loc_45CE13
	cmp eax, edx
	jle loc_45CE1D
	or ebx, 2
	jmp loc_45CE1D

loc_45CE13:
	or ebx, 1
	jmp loc_45CE1D

loc_45CE18:
	mov ebx, 10h

loc_45CE1D:
	mov [edi], bl
	mov eax, [ebp+60h]
	mov [esp], eax
	mov eax, [ebp+64h]
	mov [esp+4], eax
	mov eax, [ebp+68h]
	mov [esp+8], eax
	test eax, eax
	jnz loc_45CE3F
	mov dword [esp+8], 1

loc_45CE3F:
	mov eax, [esp+8]
	lea edx, [esp+50h]
	mov [esp+68h], eax
	lea esi, [ebp+70h]
	fild dword [esp+68h]
	lea eax, [esp+4Ch]
	fstp dword [esp+4Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+50h]
	mov eax, esp
	mov ebx, esi
	lea edi, [ebp+84h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45CF4F
	cmp eax, ecx
	jge loc_45CF4F
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45CF23
	cmp eax, ecx
	jl loc_45CF23
	cmp eax, edx
	jle loc_45CF27
	or ebx, 4
	jmp loc_45CF27

loc_45CF23:
	or ebx, 8
	nop

loc_45CF27:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45CF4A
	cmp eax, ecx
	jl loc_45CF4A
	cmp eax, edx
	jle loc_45CF54
	or ebx, 2
	jmp loc_45CF54

loc_45CF4A:
	or ebx, 1
	jmp loc_45CF54

loc_45CF4F:
	mov ebx, 10h

loc_45CF54:
	mov [edi], bl
	mov eax, [ebp+90h]
	mov [esp+18h], eax
	mov eax, [ebp+94h]
	mov [esp+1Ch], eax
	mov eax, [ebp+98h]
	mov [esp+20h], eax
	test eax, eax
	jnz loc_45CF80
	mov dword [esp+20h], 1

loc_45CF80:
	mov eax, [esp+20h]
	lea edx, [esp+58h]
	mov [esp+68h], eax
	lea esi, [ebp+0A0h]
	fild dword [esp+68h]
	lea eax, [esp+54h]
	fstp dword [esp+54h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+58h]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [ebp+0B4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D095
	cmp eax, ecx
	jge loc_45D095
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D069
	cmp eax, ecx
	jl loc_45D069
	cmp eax, edx
	jle loc_45D06D
	or ebx, 4
	jmp loc_45D06D

loc_45D069:
	or ebx, 8
	nop

loc_45D06D:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D090
	cmp eax, ecx
	jl loc_45D090
	cmp eax, edx
	jle loc_45D09A
	or ebx, 2
	jmp loc_45D09A

loc_45D090:
	or ebx, 1
	jmp loc_45D09A

loc_45D095:
	mov ebx, 10h

loc_45D09A:
	mov [edi], bl
	mov eax, [ebp+0C0h]
	mov [esp+24h], eax
	mov eax, [ebp+0C4h]
	mov [esp+28h], eax
	mov eax, [ebp+0C8h]
	mov [esp+2Ch], eax
	test eax, eax
	jnz loc_45D0C6
	mov dword [esp+2Ch], 1

loc_45D0C6:
	mov eax, [esp+2Ch]
	lea edx, [esp+60h]
	mov [esp+68h], eax
	lea esi, [ebp+0D0h]
	fild dword [esp+68h]
	lea eax, [esp+5Ch]
	fstp dword [esp+5Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+60h]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [ebp+0E4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D1DB
	cmp eax, ecx
	jge loc_45D1DB
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D1AF
	cmp eax, ecx
	jl loc_45D1AF
	cmp eax, edx
	jle loc_45D1B3
	or ebx, 4
	jmp loc_45D1B3

loc_45D1AF:
	or ebx, 8
	nop

loc_45D1B3:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D1D6
	cmp eax, ecx
	jl loc_45D1D6
	cmp eax, edx
	jle loc_45D1E0
	or ebx, 2
	jmp loc_45D1E0

loc_45D1D6:
	or ebx, 1
	jmp loc_45D1E0

loc_45D1DB:
	mov ebx, 10h

loc_45D1E0:
	mov [edi], bl
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45D1EB:
	mov dword [dword_512A9C], ebx
	jmp loc_45C93D

loc_45D1F6:
	mov eax, dword [dword_512A94]
	mov [eax], ebx
	jmp loc_45C9B8
;sub_45C8F0 endp

sub_45D210: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov esi, eax
	mov edi, ebx
	mov [esp+50h], ecx
	mov eax, [eax+8]
	and eax, 6
	or eax, edx
	mov ebp, dword [dword_5222D8]
	mov ecx, dword dword_4D6DC0[eax*4]
	lea eax, [ebp+0C0h]
	mov dword [dword_5222D8], eax
	mov ebx, eax
	add eax, 24h
	mov edx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edx, edx
	jz loc_45D940
	mov eax, dword [dword_512A94]
	mov [eax], ebx

loc_45D25D:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esi+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	mov eax, [esi+0Ch]
	mov [ebx+0Ch], eax
	mov [ebx+10h], ebp
	lea eax, [ebp+90h]
	mov [ebx+14h], eax
	mov eax, [esi+18h]
	mov [ebx+18h], eax
	mov ebx, dword [dword_5222D8]
	lea eax, [ebx+24h]
	mov dword [dword_5222D8], eax
	mov eax, dword [dword_512A9C]
	mov ecx, dword dword_4D6DC8[ecx*4]
	test eax, eax
	jnz loc_45D94B
	mov dword [dword_512A9C], ebx

loc_45D2D5:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esi+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	lea eax, [ebp+30h]
	mov [ebx+0Ch], eax
	mov eax, [esi+10h]
	mov [ebx+10h], eax
	mov eax, [esi+14h]
	mov [ebx+14h], eax
	lea eax, [ebp+60h]
	mov ecx, [esp+50h]
	mov [ebx+18h], eax
	mov ecx, [ecx]
	mov edx, [edi]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [edx+ecx]
	mov [ebp+0], eax
	mov eax, [esp+50h]
	mov eax, [eax]
	sub eax, ecx
	mov ecx, [esp+50h]
	mov [ebp+30h], eax
	mov ecx, [ecx+4]
	mov ebx, [edi+4]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [ebx+ecx]
	mov [ebp+4], eax
	mov eax, [esp+50h]
	mov eax, [eax+4]
	sub eax, ecx
	mov ecx, [esp+50h]
	mov [ebp+34h], eax
	mov ecx, [ecx+8]
	mov esi, [edi+8]
	sub ecx, esi
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [esi+ecx]
	mov [ebp+8], eax
	mov eax, [esp+50h]
	mov eax, [eax+8]
	sub eax, ecx
	mov ecx, [esp+68h]
	mov [ebp+38h], eax
	mov eax, [esp+6Ch]
	mov ecx, [ecx]
	mov edx, [eax]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax]
	add eax, ecx
	mov [ebp+90h], eax
	mov eax, [esp+68h]
	mov eax, [eax]
	sub eax, ecx
	mov [ebp+60h], eax
	mov eax, [esp+68h]
	mov ecx, [eax+4]
	mov eax, [esp+6Ch]
	mov ebx, [eax+4]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax+4]
	add eax, ecx
	mov [ebp+94h], eax
	mov eax, [esp+68h]
	mov eax, [eax+4]
	sub eax, ecx
	mov [ebp+64h], eax
	mov eax, [esp+68h]
	mov ecx, [eax+8]
	mov eax, [esp+6Ch]
	mov esi, [eax+8]
	sub ecx, esi
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax+8]
	add eax, ecx
	mov [ebp+98h], eax
	mov eax, [esp+68h]
	mov eax, [eax+8]
	sub eax, ecx
	mov [ebp+68h], eax
	mov ax, [edi+0Ch]
	mov [ebp+9Ch], ax
	mov [ebp+6Ch], ax
	mov [ebp+3Ch], ax
	mov [ebp+0Ch], ax
	mov eax, [ebp+0]
	mov [esp], eax
	mov eax, [ebp+4]
	mov [esp+4], eax
	mov eax, [ebp+8]
	mov [esp+8], eax
	test eax, eax
	jnz loc_45D46C
	mov dword [esp+8], 1

loc_45D46C:
	mov eax, [esp+8]
	lea edx, [esp+34h]
	mov [esp+54h], eax
	lea esi, [ebp+10h]
	fild dword [esp+54h]
	lea eax, [esp+30h]
	fstp dword [esp+30h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+34h]
	mov eax, esp
	mov ebx, esi
	lea edi, [ebp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D579
	cmp eax, ecx
	jge loc_45D579
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D54D
	cmp eax, ecx
	jl loc_45D54D
	cmp eax, edx
	jle loc_45D551
	or ebx, 4
	jmp loc_45D551

loc_45D54D:
	or ebx, 8
	nop

loc_45D551:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D574
	cmp eax, ecx
	jl loc_45D574
	cmp eax, edx
	jle loc_45D57E
	or ebx, 2
	jmp loc_45D57E

loc_45D574:
	or ebx, 1
	jmp loc_45D57E

loc_45D579:
	mov ebx, 10h

loc_45D57E:
	mov [edi], bl
	mov eax, [ebp+30h]
	mov [esp+0Ch], eax
	mov eax, [ebp+34h]
	mov [esp+10h], eax
	mov eax, [ebp+38h]
	mov [esp+14h], eax
	test eax, eax
	jnz loc_45D5A1
	mov dword [esp+14h], 1

loc_45D5A1:
	mov eax, [esp+14h]
	lea edx, [esp+3Ch]
	mov [esp+54h], eax
	lea esi, [ebp+40h]
	fild dword [esp+54h]
	lea eax, [esp+38h]
	fstp dword [esp+38h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+3Ch]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [ebp+54h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D6B0
	cmp eax, ecx
	jge loc_45D6B0
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D684
	cmp eax, ecx
	jl loc_45D684
	cmp eax, edx
	jle loc_45D688
	or ebx, 4
	jmp loc_45D688

loc_45D684:
	or ebx, 8
	nop

loc_45D688:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D6AB
	cmp eax, ecx
	jl loc_45D6AB
	cmp eax, edx
	jle loc_45D6B5
	or ebx, 2
	jmp loc_45D6B5

loc_45D6AB:
	or ebx, 1
	jmp loc_45D6B5

loc_45D6B0:
	mov ebx, 10h

loc_45D6B5:
	mov [edi], bl
	mov eax, [ebp+60h]
	mov [esp+18h], eax
	mov eax, [ebp+64h]
	mov [esp+1Ch], eax
	mov eax, [ebp+68h]
	mov [esp+20h], eax
	test eax, eax
	jnz loc_45D6D8
	mov dword [esp+20h], 1

loc_45D6D8:
	mov eax, [esp+20h]
	lea edx, [esp+44h]
	mov [esp+54h], eax
	lea esi, [ebp+70h]
	fild dword [esp+54h]
	lea eax, [esp+40h]
	fstp dword [esp+40h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+44h]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [ebp+84h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D7EA
	cmp eax, ecx
	jge loc_45D7EA
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D7BE
	cmp eax, ecx
	jl loc_45D7BE
	cmp eax, edx
	jle loc_45D7C2
	or ebx, 4
	jmp loc_45D7C2

loc_45D7BE:
	or ebx, 8
	nop

loc_45D7C2:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D7E5
	cmp eax, ecx
	jl loc_45D7E5
	cmp eax, edx
	jle loc_45D7EF
	or ebx, 2
	jmp loc_45D7EF

loc_45D7E5:
	or ebx, 1
	jmp loc_45D7EF

loc_45D7EA:
	mov ebx, 10h

loc_45D7EF:
	mov [edi], bl
	mov eax, [ebp+90h]
	mov [esp+24h], eax
	mov eax, [ebp+94h]
	mov [esp+28h], eax
	mov eax, [ebp+98h]
	mov [esp+2Ch], eax
	test eax, eax
	jnz loc_45D81B
	mov dword [esp+2Ch], 1

loc_45D81B:
	mov eax, [esp+2Ch]
	lea edx, [esp+4Ch]
	mov [esp+54h], eax
	lea esi, [ebp+0A0h]
	fild dword [esp+54h]
	lea eax, [esp+48h]
	fstp dword [esp+48h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+4Ch]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [ebp+0B4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45D930
	cmp eax, ecx
	jge loc_45D930
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45D904
	cmp eax, ecx
	jl loc_45D904
	cmp eax, edx
	jle loc_45D908
	or ebx, 4
	jmp loc_45D908

loc_45D904:
	or ebx, 8
	nop

loc_45D908:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45D92B
	cmp eax, ecx
	jl loc_45D92B
	cmp eax, edx
	jle loc_45D935
	or ebx, 2
	jmp loc_45D935

loc_45D92B:
	or ebx, 1
	jmp loc_45D935

loc_45D930:
	mov ebx, 10h

loc_45D935:
	mov [edi], bl
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45D940:
	mov dword [dword_512A9C], ebx
	jmp loc_45D25D

loc_45D94B:
	mov eax, dword [dword_512A94]
	mov [eax], ebx
	jmp loc_45D2D5
;sub_45D210 endp

sub_45D960: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov [esp+50h], eax
	mov esi, ebx
	mov edi, ecx
	mov eax, [eax+8]
	and eax, 6
	or eax, edx
	mov ebp, dword [dword_5222D8]
	mov ecx, dword dword_4D6DC0[eax*4]
	lea eax, [ebp+0C0h]
	mov dword [dword_5222D8], eax
	mov ebx, eax
	add eax, 24h
	mov edx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edx, edx
	jz loc_45E036
	mov eax, dword [dword_512A94]
	mov [eax], ebx

loc_45D9AD:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esp+50h]
	mov eax, [eax+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	mov [ebx+0Ch], ebp
	lea eax, [ebp+30h]
	mov [ebx+10h], eax
	lea eax, [ebp+60h]
	mov [ebx+14h], eax
	lea eax, [ebp+90h]
	mov edx, [esp+6Ch]
	mov [ebx+18h], eax
	mov eax, [esp+68h]
	mov ecx, [edx]
	mov eax, [eax]
	sub eax, ecx
	mov ebx, [esi]
	mov edx, eax
	mov ecx, [edi]
	sar edx, 2
	sar eax, 4
	sub ecx, ebx
	add eax, edx
	mov edx, ecx
	sar edx, 2
	sar ecx, 4
	add ecx, edx
	mov edx, [esp+6Ch]
	mov edx, [edx]
	add edx, eax
	mov [ebp+90h], edx
	mov edx, [esp+68h]
	mov edx, [edx]
	sub edx, eax
	mov [ebp+60h], edx
	mov eax, [esi]
	mov edx, [ebp+90h]
	add eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+0], eax
	mov eax, [edi]
	sub eax, ecx
	add eax, [ebp+60h]
	sar eax, 1
	mov [ebp+30h], eax
	mov eax, [esp+68h]
	mov edx, [eax+4]
	mov eax, [esp+6Ch]
	mov ebx, [eax+4]
	sub edx, ebx
	mov eax, edx
	sar edx, 2
	sar eax, 4
	mov ecx, [edi+4]
	add eax, edx
	mov edx, [esi+4]
	sub ecx, edx
	mov edx, ecx
	sar edx, 2
	sar ecx, 4
	add ecx, edx
	mov edx, [esp+6Ch]
	mov edx, [edx+4]
	add edx, eax
	mov [ebp+94h], edx
	mov edx, [esp+68h]
	mov edx, [edx+4]
	sub edx, eax
	mov [ebp+64h], edx
	mov eax, [esi+4]
	mov ebx, [ebp+94h]
	add eax, ecx
	add eax, ebx
	sar eax, 1
	mov [ebp+4], eax
	mov eax, [edi+4]
	mov edx, [ebp+64h]
	sub eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+34h], eax
	mov eax, [esp+68h]
	mov edx, [eax+8]
	mov eax, [esp+6Ch]
	sub edx, [eax+8]
	mov ebx, [esi+8]
	mov eax, edx
	mov ecx, [edi+8]
	sar edx, 2
	sar eax, 4
	sub ecx, ebx
	add eax, edx
	mov edx, ecx
	sar edx, 2
	sar ecx, 4
	add ecx, edx
	mov edx, [esp+6Ch]
	mov edx, [edx+8]
	add edx, eax
	mov [ebp+98h], edx
	mov edx, [esp+68h]
	mov edx, [edx+8]
	sub edx, eax
	mov [ebp+68h], edx
	mov eax, [esi+8]
	mov edx, [ebp+98h]
	add eax, ecx
	add eax, edx
	sar eax, 1
	mov [ebp+8], eax
	mov eax, [edi+8]
	sub eax, ecx
	add eax, [ebp+68h]
	sar eax, 1
	mov [ebp+38h], eax
	mov ax, [esi+0Ch]
	mov [ebp+9Ch], ax
	mov [ebp+6Ch], ax
	mov [ebp+3Ch], ax
	mov [ebp+0Ch], ax
	mov eax, [ebp+0]
	mov [esp+24h], eax
	mov eax, [ebp+4]
	mov [esp+28h], eax
	mov eax, [ebp+8]
	mov [esp+2Ch], eax
	test eax, eax
	jnz loc_45DB63
	mov dword [esp+2Ch], 1

loc_45DB63:
	mov eax, [esp+2Ch]
	lea edx, [esp+34h]
	mov [esp+54h], eax
	lea esi, [ebp+10h]
	fild dword [esp+54h]
	lea eax, [esp+30h]
	fstp dword [esp+30h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+34h]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [ebp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45DC72
	cmp eax, ecx
	jge loc_45DC72
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45DC46
	cmp eax, ecx
	jl loc_45DC46
	cmp eax, edx
	jle loc_45DC4A
	or ebx, 4
	jmp loc_45DC4A

loc_45DC46:
	or ebx, 8
	nop

loc_45DC4A:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45DC6D
	cmp eax, ecx
	jl loc_45DC6D
	cmp eax, edx
	jle loc_45DC77
	or ebx, 2
	jmp loc_45DC77

loc_45DC6D:
	or ebx, 1
	jmp loc_45DC77

loc_45DC72:
	mov ebx, 10h

loc_45DC77:
	mov [edi], bl
	mov eax, [ebp+30h]
	mov [esp+0Ch], eax
	mov eax, [ebp+34h]
	mov [esp+10h], eax
	mov eax, [ebp+38h]
	mov [esp+14h], eax
	test eax, eax
	jnz loc_45DC9A
	mov dword [esp+14h], 1

loc_45DC9A:
	mov eax, [esp+14h]
	lea edx, [esp+3Ch]
	mov [esp+54h], eax
	lea esi, [ebp+40h]
	fild dword [esp+54h]
	lea eax, [esp+38h]
	fstp dword [esp+38h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+3Ch]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [ebp+54h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45DDA9
	cmp eax, ecx
	jge loc_45DDA9
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45DD7D
	cmp eax, ecx
	jl loc_45DD7D
	cmp eax, edx
	jle loc_45DD81
	or ebx, 4
	jmp loc_45DD81

loc_45DD7D:
	or ebx, 8
	nop

loc_45DD81:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45DDA4
	cmp eax, ecx
	jl loc_45DDA4
	cmp eax, edx
	jle loc_45DDAE
	or ebx, 2
	jmp loc_45DDAE

loc_45DDA4:
	or ebx, 1
	jmp loc_45DDAE

loc_45DDA9:
	mov ebx, 10h

loc_45DDAE:
	mov [edi], bl
	mov eax, [ebp+60h]
	mov [esp], eax
	mov eax, [ebp+64h]
	mov [esp+4], eax
	mov eax, [ebp+68h]
	mov [esp+8], eax
	test eax, eax
	jnz loc_45DDD0
	mov dword [esp+8], 1

loc_45DDD0:
	mov eax, [esp+8]
	lea edx, [esp+44h]
	mov [esp+54h], eax
	lea esi, [ebp+70h]
	fild dword [esp+54h]
	lea eax, [esp+40h]
	fstp dword [esp+40h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+44h]
	mov eax, esp
	mov ebx, esi
	lea edi, [ebp+84h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45DEE0
	cmp eax, ecx
	jge loc_45DEE0
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45DEB4
	cmp eax, ecx
	jl loc_45DEB4
	cmp eax, edx
	jle loc_45DEB8
	or ebx, 4
	jmp loc_45DEB8

loc_45DEB4:
	or ebx, 8
	nop

loc_45DEB8:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45DEDB
	cmp eax, ecx
	jl loc_45DEDB
	cmp eax, edx
	jle loc_45DEE5
	or ebx, 2
	jmp loc_45DEE5

loc_45DEDB:
	or ebx, 1
	jmp loc_45DEE5

loc_45DEE0:
	mov ebx, 10h

loc_45DEE5:
	mov [edi], bl
	mov eax, [ebp+90h]
	mov [esp+18h], eax
	mov eax, [ebp+94h]
	mov [esp+1Ch], eax
	mov eax, [ebp+98h]
	mov [esp+20h], eax
	test eax, eax
	jnz loc_45DF11
	mov dword [esp+20h], 1

loc_45DF11:
	mov eax, [esp+20h]
	lea edx, [esp+4Ch]
	mov [esp+54h], eax
	lea esi, [ebp+0A0h]
	fild dword [esp+54h]
	lea eax, [esp+48h]
	fstp dword [esp+48h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+4Ch]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [ebp+0B4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45E026
	cmp eax, ecx
	jge loc_45E026
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45DFFA
	cmp eax, ecx
	jl loc_45DFFA
	cmp eax, edx
	jle loc_45DFFE
	or ebx, 4
	jmp loc_45DFFE

loc_45DFFA:
	or ebx, 8
	nop

loc_45DFFE:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45E021
	cmp eax, ecx
	jl loc_45E021
	cmp eax, edx
	jle loc_45E02B
	or ebx, 2
	jmp loc_45E02B

loc_45E021:
	or ebx, 1
	jmp loc_45E02B

loc_45E026:
	mov ebx, 10h

loc_45E02B:
	mov [edi], bl
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45E036:
	mov dword [dword_512A9C], ebx
	jmp loc_45D9AD
;sub_45D960 endp

sub_45E050: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov [esp+50h], eax
	mov esi, ebx
	mov edi, ecx
	mov eax, [eax+8]
	and eax, 6
	or eax, edx
	mov ebp, dword [dword_5222D8]
	mov ecx, dword dword_4D6DC0[eax*4]
	lea eax, [ebp+0C0h]
	mov dword [dword_5222D8], eax
	mov ebx, eax
	add eax, 24h
	mov edx, dword [dword_512A9C]
	mov dword [dword_5222D8], eax
	test edx, edx
	jz loc_45E6F6
	mov eax, dword [dword_512A94]
	mov [eax], ebx

loc_45E09D:
	mov edx, 3
	mov eax, 1
	mov dword [dword_512A94], ebx
	mov dword [ebx+4], 8
	mov eax, dword dword_500CF0[ecx*4]
	mov [ebx+1Ch], eax
	mov eax, [esp+50h]
	mov eax, [eax+4]
	mov word [ebx+8], 1
	mov word [ebx+0Ah], 1
	mov [ebx+20h], eax
	mov [ebx+0Ch], ebp
	lea eax, [ebp+30h]
	mov [ebx+10h], eax
	lea eax, [ebp+60h]
	mov [ebx+14h], eax
	lea eax, [ebp+90h]
	mov [ebx+18h], eax
	mov ecx, [edi]
	mov ebx, [esi]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [ebx+ecx]
	mov [ebp+0], eax
	mov eax, [edi]
	sub eax, ecx
	mov [ebp+30h], eax
	mov ecx, [edi+4]
	mov eax, [esi+4]
	sub ecx, eax
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esi+4]
	add eax, ecx
	mov [ebp+4], eax
	mov eax, [edi+4]
	sub eax, ecx
	mov [ebp+34h], eax
	mov ecx, [edi+8]
	mov edx, [esi+8]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	lea eax, [edx+ecx]
	mov [ebp+8], eax
	mov eax, [edi+8]
	sub eax, ecx
	mov ecx, [esp+68h]
	mov [ebp+38h], eax
	mov eax, [esp+6Ch]
	mov ecx, [ecx]
	mov ebx, [eax]
	sub ecx, ebx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax]
	add eax, ecx
	mov [ebp+90h], eax
	mov eax, [esp+68h]
	mov eax, [eax]
	sub eax, ecx
	mov ecx, [esp+68h]
	mov [ebp+60h], eax
	mov eax, [esp+6Ch]
	mov ecx, [ecx+4]
	mov edi, [eax+4]
	sub ecx, edi
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax+4]
	add eax, ecx
	mov [ebp+94h], eax
	mov eax, [esp+68h]
	mov eax, [eax+4]
	sub eax, ecx
	mov [ebp+64h], eax
	mov eax, [esp+68h]
	mov ecx, [eax+8]
	mov eax, [esp+6Ch]
	mov edx, [eax+8]
	sub ecx, edx
	mov eax, ecx
	sar eax, 2
	sar ecx, 4
	add ecx, eax
	mov eax, [esp+6Ch]
	mov eax, [eax+8]
	add eax, ecx
	mov [ebp+98h], eax
	mov eax, [esp+68h]
	mov eax, [eax+8]
	sub eax, ecx
	mov [ebp+68h], eax
	mov ax, [esi+0Ch]
	mov [ebp+9Ch], ax
	mov [ebp+6Ch], ax
	mov [ebp+3Ch], ax
	mov [ebp+0Ch], ax
	mov eax, [ebp+0]
	mov [esp+24h], eax
	mov eax, [ebp+4]
	mov [esp+28h], eax
	mov eax, [ebp+8]
	mov [esp+2Ch], eax
	test eax, eax
	jnz loc_45E223
	mov dword [esp+2Ch], 1

loc_45E223:
	mov eax, [esp+2Ch]
	lea edx, [esp+34h]
	mov [esp+54h], eax
	lea esi, [ebp+10h]
	fild dword [esp+54h]
	lea eax, [esp+30h]
	fstp dword [esp+30h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+34h]
	lea eax, [esp+24h]
	mov ebx, esi
	lea edi, [ebp+24h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45E332
	cmp eax, ecx
	jge loc_45E332
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45E306
	cmp eax, ecx
	jl loc_45E306
	cmp eax, edx
	jle loc_45E30A
	or ebx, 4
	jmp loc_45E30A

loc_45E306:
	or ebx, 8
	nop

loc_45E30A:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45E32D
	cmp eax, ecx
	jl loc_45E32D
	cmp eax, edx
	jle loc_45E337
	or ebx, 2
	jmp loc_45E337

loc_45E32D:
	or ebx, 1
	jmp loc_45E337

loc_45E332:
	mov ebx, 10h

loc_45E337:
	mov [edi], bl
	mov eax, [ebp+30h]
	mov [esp], eax
	mov eax, [ebp+34h]
	mov [esp+4], eax
	mov eax, [ebp+38h]
	mov [esp+8], eax
	test eax, eax
	jnz loc_45E359
	mov dword [esp+8], 1

loc_45E359:
	mov eax, [esp+8]
	lea edx, [esp+3Ch]
	mov [esp+54h], eax
	lea esi, [ebp+40h]
	fild dword [esp+54h]
	lea eax, [esp+38h]
	fstp dword [esp+38h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+3Ch]
	mov eax, esp
	mov ebx, esi
	lea edi, [ebp+54h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45E466
	cmp eax, ecx
	jge loc_45E466
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45E43A
	cmp eax, ecx
	jl loc_45E43A
	cmp eax, edx
	jle loc_45E43E
	or ebx, 4
	jmp loc_45E43E

loc_45E43A:
	or ebx, 8
	nop

loc_45E43E:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45E461
	cmp eax, ecx
	jl loc_45E461
	cmp eax, edx
	jle loc_45E46B
	or ebx, 2
	jmp loc_45E46B

loc_45E461:
	or ebx, 1
	jmp loc_45E46B

loc_45E466:
	mov ebx, 10h

loc_45E46B:
	mov [edi], bl
	mov eax, [ebp+60h]
	mov [esp+18h], eax
	mov eax, [ebp+64h]
	mov [esp+1Ch], eax
	mov eax, [ebp+68h]
	mov [esp+20h], eax
	test eax, eax
	jnz loc_45E48E
	mov dword [esp+20h], 1

loc_45E48E:
	mov eax, [esp+20h]
	lea edx, [esp+44h]
	mov [esp+54h], eax
	lea esi, [ebp+70h]
	fild dword [esp+54h]
	lea eax, [esp+40h]
	fstp dword [esp+40h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+44h]
	lea eax, [esp+18h]
	mov ebx, esi
	lea edi, [ebp+84h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45E5A0
	cmp eax, ecx
	jge loc_45E5A0
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45E574
	cmp eax, ecx
	jl loc_45E574
	cmp eax, edx
	jle loc_45E578
	or ebx, 4
	jmp loc_45E578

loc_45E574:
	or ebx, 8
	nop

loc_45E578:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45E59B
	cmp eax, ecx
	jl loc_45E59B
	cmp eax, edx
	jle loc_45E5A5
	or ebx, 2
	jmp loc_45E5A5

loc_45E59B:
	or ebx, 1
	jmp loc_45E5A5

loc_45E5A0:
	mov ebx, 10h

loc_45E5A5:
	mov [edi], bl
	mov eax, [ebp+90h]
	mov [esp+0Ch], eax
	mov eax, [ebp+94h]
	mov [esp+10h], eax
	mov eax, [ebp+98h]
	mov [esp+14h], eax
	test eax, eax
	jnz loc_45E5D1
	mov dword [esp+14h], 1

loc_45E5D1:
	mov eax, [esp+14h]
	lea edx, [esp+4Ch]
	mov [esp+54h], eax
	lea esi, [ebp+0A0h]
	fild dword [esp+54h]
	lea eax, [esp+48h]
	fstp dword [esp+48h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+4Ch]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [ebp+0B4h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_45E6E6
	cmp eax, ecx
	jge loc_45E6E6
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_45E6BA
	cmp eax, ecx
	jl loc_45E6BA
	cmp eax, edx
	jle loc_45E6BE
	or ebx, 4
	jmp loc_45E6BE

loc_45E6BA:
	or ebx, 8
	nop

loc_45E6BE:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_45E6E1
	cmp eax, ecx
	jl loc_45E6E1
	cmp eax, edx
	jle loc_45E6EB
	or ebx, 2
	jmp loc_45E6EB

loc_45E6E1:
	or ebx, 1
	jmp loc_45E6EB

loc_45E6E6:
	mov ebx, 10h

loc_45E6EB:
	mov [edi], bl
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_45E6F6:
	mov dword [dword_512A9C], ebx
	jmp loc_45E09D
;sub_45E050 endp

sub_45E710: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	mov edx, ecx
	sub edx, eax
	test ecx, ecx
	jl loc_45E737
	test eax, eax
	jl loc_45E725

loc_45E721:
	mov eax, edx

loc_45E723:
	pop ecx
	ret

loc_45E725:
	mov eax, edx
	cmp edx, 200h
	jle loc_45E723
	lea eax, [edx-400h]
	pop ecx
	ret

loc_45E737:
	test eax, eax
	jl loc_45E721
	sub eax, ecx
	cmp eax, 200h
	jle loc_45E74F
	mov edx, 400h
	sub edx, eax
	mov eax, edx
	pop ecx
	ret

loc_45E74F:
	neg eax
	pop ecx
	ret
;sub_45E710 endp

sub_45E760: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov esi, eax
	mov eax, [eax]
	mov edx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, [esi+4]
	mov edx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, [esi+8]
	mov edx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	bsr ecx, eax
	jz loc_45E7AE
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_45E7AE:
	test eax, eax
	jnz loc_45E7B6
	pop esi
	pop edx
	pop ecx
	ret

loc_45E7B6:
	push ebx
	mov ebx, eax
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, eax
	mov edx, ecx
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi], eax
	mov edx, ecx
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+4], eax
	mov edx, ecx
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+8], eax
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret
;sub_45E760 endp

sub_45E810: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov [esp+4], eax
	mov ebp, [eax+4]
	mov esi, [eax+8]
	mov edi, [eax]

loc_45E825:
	test edi, edi
	jle loc_45E83A
	mov eax, edi

loc_45E82B:
	cmp eax, 1000000h
	jle loc_45E840

loc_45E832:
	sar ebp, 1
	sar esi, 1
	sar edi, 1
	jmp loc_45E825

loc_45E83A:
	mov eax, edi
	neg eax
	jmp loc_45E82B

loc_45E840:
	test ebp, ebp
	jle loc_45E8D0
	mov eax, ebp

loc_45E84A:
	cmp eax, 1000000h
	jg loc_45E832
	test esi, esi
	jle loc_45E8D9
	mov eax, esi

loc_45E85B:
	cmp eax, 1000000h
	jg loc_45E832
	mov edx, edi
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov [esp+0Ch], eax
	mov edx, ebp
	mov eax, ebp

loc_45E87A:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov [esp+10h], eax
	mov edx, esi
	mov eax, esi
	shr ecx, 2
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	shr ebx, 2
	mov [esp+8], eax
	shr eax, 2
	add ecx, ebx
	add eax, ecx
	cmp eax, 40000000h
	jbe loc_45E8E2
	sar edi, 1
	mov edx, edi
	mov eax, edi
	sar ebp, 1
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov [esp+0Ch], eax
	mov edx, ebp
	mov eax, ebp
	sar esi, 1
	jmp loc_45E87A

loc_45E8D0:
	mov eax, ebp
	neg eax
	jmp loc_45E84A

loc_45E8D9:
	mov eax, esi
	neg eax
	jmp loc_45E85B

loc_45E8E2:
	mov eax, [esp+0Ch]
	mov edx, [esp+10h]
	mov ecx, [esp+8]
	add eax, edx
	add eax, ecx
	bsr ecx, eax
	jz loc_45E909
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_45E909:
	mov [esp], eax
	test eax, eax
	jnz loc_45E91A
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45E91A:
	mov ebx, eax
	mov eax, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, [esp+4]
	mov ebx, [esp]
	mov [ecx], eax
	mov eax, ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, [esp+4]
	mov ebx, [esp]
	mov [ecx+4], eax
	mov eax, esi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, [esp+4]
	mov [ecx+8], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45E810 endp

sub_45E990: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov edx, [eax]
	cmp edx, 0FFFF0000h
	jle loc_45E9F2
	cmp edx, 10000h
	jle loc_45E9F2
	mov edx, 10000h

loc_45E9AC:
	mov ebx, [eax+4]
	mov [eax], edx
	cmp ebx, 0FFFF0000h
	jle loc_45EA07
	cmp ebx, 10000h
	jle loc_45EA07
	mov edx, 10000h

loc_45E9C6:
	mov edi, [eax+8]
	mov [eax+4], edx
	cmp edi, 0FFFF0000h
	jle loc_45E9DC
	cmp edi, 10000h
	jg loc_45EA1F

loc_45E9DC:
	mov ebp, [eax+8]
	cmp ebp, 0FFFF0000h
	jle loc_45EA26
	mov edx, ebp

loc_45E9E9:
	mov [eax+8], edx
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45E9F2:
	mov ecx, [eax]
	cmp ecx, 0FFFF0000h
	jle loc_45EA00
	mov edx, ecx
	jmp loc_45E9AC

loc_45EA00:
	mov edx, 0FFFF0000h
	jmp loc_45E9AC

loc_45EA07:
	push esi
	mov esi, [eax+4]
	cmp esi, 0FFFF0000h
	jle loc_45EA18
	mov edx, esi

loc_45EA15:
	pop esi
	jmp loc_45E9C6

loc_45EA18:
	mov edx, 0FFFF0000h
	jmp loc_45EA15

loc_45EA1F:
	mov edx, 10000h
	jmp loc_45E9E9

loc_45EA26:
	mov edx, 0FFFF0000h
	mov [eax+8], edx
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45E990 endp

sub_45EA40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebx, [eax]
	mov ecx, [eax+4]
	mov esi, [eax+8]
	xor edi, edi

loc_45EA53:
	test ebx, ebx
	jle loc_45EA69
	mov eax, ebx

loc_45EA59:
	cmp eax, 1000000h
	jle loc_45EA6F

loc_45EA60:
	sar ecx, 1
	sar esi, 1
	inc edi
	sar ebx, 1
	jmp loc_45EA53

loc_45EA69:
	mov eax, ebx
	neg eax
	jmp loc_45EA59

loc_45EA6F:
	test ecx, ecx
	jle loc_45EB1F
	mov eax, ecx

loc_45EA79:
	cmp eax, 1000000h
	jg loc_45EA60
	test esi, esi
	jle loc_45EB28
	mov eax, esi

loc_45EA8A:
	cmp eax, 1000000h
	jg loc_45EA60
	mov edx, ebx
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov [esp+0Ch], eax
	mov edx, ecx
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov [esp+4], eax
	mov edx, esi
	mov eax, esi

loc_45EABE:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	shr ebp, 2
	mov edx, [esp]
	mov [esp+8], eax
	shr edx, 2
	shr eax, 2
	mov [esp+10h], edx
	add ebp, [esp+10h]
	add eax, ebp
	cmp eax, 40000000h
	jbe loc_45EB31
	sar ebx, 1
	mov edx, ebx
	mov eax, ebx
	sar ecx, 1
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov [esp+0Ch], eax
	mov edx, ecx
	mov eax, ecx
	sar esi, 1
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov [esp+4], eax
	mov edx, esi
	mov eax, esi
	inc edi
	jmp loc_45EABE

loc_45EB1F:
	mov eax, ecx
	neg eax
	jmp loc_45EA79

loc_45EB28:
	mov eax, esi
	neg eax
	jmp loc_45EA8A

loc_45EB31:
	mov eax, [esp+0Ch]
	mov ecx, [esp+4]
	mov ebx, [esp+8]
	add eax, ecx
	add eax, ebx
	test edi, edi
	jz loc_45EB4C

loc_45EB45:
	shl eax, 2
	dec edi
	jnz loc_45EB45
	nop

loc_45EB4C:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45EA40 endp

sub_45EB60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebx, [eax]
	mov esi, [eax+4]
	mov ecx, [eax+8]
	xor edi, edi

loc_45EB73:
	test ebx, ebx
	jle loc_45EB89
	mov eax, ebx

loc_45EB79:
	cmp eax, 1000000h
	jle loc_45EB8F

loc_45EB80:
	sar esi, 1
	sar ecx, 1
	inc edi
	sar ebx, 1
	jmp loc_45EB73

loc_45EB89:
	mov eax, ebx
	neg eax
	jmp loc_45EB79

loc_45EB8F:
	test esi, esi
	jle loc_45EC2A
	mov eax, esi

loc_45EB99:
	cmp eax, 1000000h
	jg loc_45EB80
	test ecx, ecx
	jle loc_45EC33
	mov eax, ecx

loc_45EBAA:
	cmp eax, 1000000h
	jg loc_45EB80
	mov edx, ebx
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov [esp+0Ch], eax
	mov edx, esi
	mov eax, esi

loc_45EBC9:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	shr ebp, 2
	mov [esp], eax
	mov [esp+4], eax
	mov edx, ecx
	mov [esp+10h], ebp
	mov eax, ecx
	mov ebp, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	shr ebp, 2
	shr eax, 2
	add ebp, [esp+10h]
	add eax, ebp
	cmp eax, 40000000h
	jbe loc_45EC3C
	sar ebx, 1
	sar esi, 1
	mov edx, ebx
	mov eax, ebx
	sar ecx, 1
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov [esp+0Ch], eax
	mov edx, esi
	mov eax, esi
	inc edi
	jmp loc_45EBC9

loc_45EC2A:
	mov eax, esi
	neg eax
	jmp loc_45EB99

loc_45EC33:
	mov eax, ecx
	neg eax
	jmp loc_45EBAA

loc_45EC3C:
	mov eax, [esp+0Ch]
	mov ecx, [esp+4]
	mov ebx, [esp+8]
	add eax, ecx
	add eax, ebx
	bsr ecx, eax
	jz loc_45EC63
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_45EC63:
	test edi, edi
	jz loc_45EC6C

loc_45EC67:
	add eax, eax
	dec edi
	jnz loc_45EC67

loc_45EC6C:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45EB60 endp

sub_45EC80: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov [esp], ecx
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, eax
	call sub_49C150
	mov ecx, eax
	mov eax, edx
	call sub_49C1C0
	mov edx, edi
	mov ebx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, esi
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebp, eax
	mov eax, [esp]
	mov edx, edi
	mov [eax], ebp
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, esi
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, [esp+14h]
	mov [eax], ecx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_45EC80 endp

sub_45ED00: ;SUBROUTINE
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov dword [eax+0Ch], 0
	mov dword [eax+10h], 10000h
	mov dword [eax+14h], 0
	mov dword [eax+18h], 0
	mov dword [eax+1Ch], 0
	mov dword [eax+20h], 10000h
	mov dword [eax], 10000h
	ret
;sub_45ED00 endp

sub_45ED40: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ecx, eax
	mov eax, edx
	cmp ecx, edx
	jle loc_45EE0E
	mov edx, ecx

loc_45ED56:
	mov ecx, edx
	sar ecx, 2
	mov [esp+4], ecx
	mov ecx, eax
	sar ecx, 10h
	mov [esp+0Ch], ecx
	mov ecx, eax
	sar ecx, 0Fh
	mov [esp+14h], ecx
	mov ecx, eax
	sar ecx, 0Eh
	mov [esp+20h], ecx
	mov ecx, eax
	sar ecx, 7
	mov esi, eax
	mov [esp+1Ch], ecx
	mov ecx, eax
	mov edi, eax
	sar ecx, 4
	sar esi, 9
	mov [esp+18h], ecx
	mov ecx, [esp+4]
	sar edi, 6
	cmp eax, ecx
	jl loc_45EE15
	mov ecx, edx
	sar ecx, 1
	mov [esp+8], ecx
	mov ecx, eax
	sar ecx, 0Ch
	mov [esp+24h], ecx
	mov ecx, eax
	mov ebx, eax
	sar ecx, 8
	sar ebx, 0Dh
	mov [esp+28h], ecx
	mov ecx, eax
	mov ebp, [esp+8]
	sar ecx, 5
	cmp eax, ebp
	jl loc_45EE35
	add ebp, [esp+4]
	mov [esp], ebp
	mov ebp, eax
	sar ebp, 0Bh
	mov [esp+10h], ebp
	mov ebp, eax
	sar ebp, 2
	add edx, ebp
	cmp eax, [esp]
	jge loc_45EE69
	add edx, ecx
	mov ecx, [esp+28h]
	sar eax, 0Ah
	add edx, ecx
	mov esi, [esp+10h]
	add eax, edx
	mov edi, [esp+24h]
	add eax, esi
	add eax, edi

loc_45EE03:
	add eax, ebx
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45EE0E:
	mov eax, ecx
	jmp loc_45ED56

loc_45EE15:
	add edx, [esp+18h]
	mov eax, [esp+1Ch]
	add edx, edi
	add edx, eax
	mov ecx, [esp+20h]
	add edx, esi
	mov eax, [esp+14h]
	add edx, ecx
	mov ebx, [esp+0Ch]
	add eax, edx
	jmp loc_45EE03

loc_45EE35:
	sar eax, 3
	add eax, edx
	add eax, ecx
	mov ebp, [esp+1Ch]
	add eax, edi
	mov edx, [esp+28h]
	add eax, ebp
	add eax, edx
	mov ecx, [esp+24h]
	add eax, esi
	add eax, ecx
	add eax, ebx
	mov ebx, [esp+20h]
	mov esi, [esp+0Ch]
	add eax, ebx
	add eax, esi
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_45EE69:
	add edx, [esp+18h]
	add edx, ecx
	mov ecx, [esp+1Ch]
	add edx, edi
	mov edi, [esp+28h]
	add edx, ecx
	add edx, edi
	mov ebp, [esp+10h]
	add esi, edx
	mov eax, [esp+24h]
	add esi, ebp
	add esi, eax
	mov eax, [esp+20h]
	add ebx, esi
	mov edx, [esp+14h]
	add eax, ebx
	add eax, edx
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45ED40 endp

sub_45EEB0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, [edx]
	mov ecx, [eax]
	sub ecx, ebx
	test ecx, ecx
	jle loc_45EEEF

loc_45EEBD:
	mov ebx, ecx
	mov esi, [edx+4]
	mov ecx, [eax+4]
	sub ecx, esi
	test ecx, ecx
	jle loc_45EEF3

loc_45EECB:
	mov eax, [eax+8]
	sub eax, [edx+8]
	test eax, eax
	jle loc_45EEF7

loc_45EED5:
	mov edx, eax
	cmp ebx, ecx
	jle loc_45EEFB
	mov eax, ecx
	sar eax, 2
	add eax, ebx
	cmp eax, edx
	jle loc_45EF0F
	sar edx, 2
	add eax, edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_45EEEF:
	neg ecx
	jmp loc_45EEBD

loc_45EEF3:
	neg ecx
	jmp loc_45EECB

loc_45EEF7:
	neg eax
	jmp loc_45EED5

loc_45EEFB:
	mov eax, ebx
	sar eax, 2
	add eax, ecx
	cmp eax, edx
	jle loc_45EF0F
	sar edx, 2
	add eax, edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_45EF0F:
	sar eax, 2
	add eax, edx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45EEB0 endp

sub_45EF20: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	mov ecx, edx
	mov edx, [edx]
	mov eax, [eax]
	sub eax, edx
	test eax, eax
	jle loc_45EF48

loc_45EF30:
	mov edx, eax
	mov eax, [ebx+8]
	sub eax, [ecx+8]
	test eax, eax
	jle loc_45EF4C
	cmp edx, eax
	jle loc_45EF5A
	sar eax, 2
	add eax, edx
	pop ecx
	pop ebx
	ret

loc_45EF48:
	neg eax
	jmp loc_45EF30

loc_45EF4C:
	neg eax
	cmp edx, eax
	jle loc_45EF5A
	sar eax, 2
	add eax, edx
	pop ecx
	pop ebx
	ret

loc_45EF5A:
	sar edx, 2
	add eax, edx
	pop ecx
	pop ebx
	ret
;sub_45EF20 endp

sub_45EF70: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov edx, aCNfs2seGameC_1 ; "c:\\nfs2se\\game\\common\\MinFront.c"
	mov ecx, 310h
	mov ebx, 20h
	mov eax, aFeDataStream ; "FE Data Stream"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	mov edx, 10000h
	call sub_484498
	mov esi, eax
	lea edx, [eax+4]
	mov dword [eax], 0
	mov eax, esi
	sub edx, esi
	call sub_488168
	mov eax, esi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_45EF70 endp

sub_45F980: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov dword [dword_512AC0], 1
	mov edx, dword [dword_4D5A2C]
	mov eax, edx
	xor ecx, ecx
	shl eax, 6
	mov dword [dword_512AB4], ecx
	add edx, eax
	mov dword [dword_512AA8], ecx
	add edx, edx
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, dword [dword_4D5A30]
	mov dword [dword_512AA0], eax
	mov eax, edx
	shl eax, 6
	add edx, eax
	add edx, edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov esi, dword [dword_5121F8]
	mov dword [dword_512AA4], eax
	test esi, esi
	jnz loc_45FA39
	mov edi, dword [dword_512208]
	test edi, edi
	jnz loc_45FA2B

loc_45F9EC:
	xor edx, edx

loc_45F9EE:
	cmp dword [dword_540D94], 2
	jnz loc_45F9F9
	xor edx, edx

loc_45F9F9:
	mov ebx, dword [dword_512208]
	xor ecx, ecx
	cmp ebx, 1
	jle loc_45FA40
	mov eax, 1

loc_45FA0B:
	mov dword [dword_512AB0], eax
	cmp byte [byte_512ECC], 0
	jnz loc_45FA44
	mov dword [dword_512AB8], ecx
	mov dword [dword_512ABC], edx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FA2B:
	cmp edi, 1
	jz loc_45F9EC
	cmp dword [dword_51220C], 0
	jz loc_45F9EC

loc_45FA39:
	mov edx, 1
	jmp loc_45F9EE

loc_45FA40:
	xor eax, eax
	jmp loc_45FA0B

loc_45FA44:
	xor esi, esi
	mov ecx, 1
	mov dword [dword_512AA0], esi
	mov dword [dword_512AB8], ecx
	mov dword [dword_512ABC], edx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45F980 endp

;	Attributes: thunk

sub_45FA70: ;SUBROUTINE
	jmp sub_42EDB0
;sub_45FA70 endp

sub_45FA80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov eax, dword [dword_512AB4]
	cmp eax, 1
	jnb loc_45FAF8
	test eax, eax
	jz loc_45FC56

loc_45FA97:
	cmp byte [byte_4D76B4], 0
	jnz loc_45FF41
	mov eax, dword [dword_4D5A2C]
	test eax, eax
	jz loc_45FF41
	mov edx, eax
	mov eax, dword [dword_51221C]
	call sub_4764B0
	cmp dword [dword_51221C], 0
	jz loc_45FAE9
	cmp byte [byte_4D96A4], 0
	jnz loc_45FAE9
	xor eax, eax
	mov al, byte [byte_4D5A05]
	call sub_49DF4C
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_4D5A04]
	call sub_49DF64

loc_45FAE9:
	mov byte [byte_4D76B4], 1

loc_45FAF0:
	xor eax, eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FAF8:
	jbe loc_45FB21
	cmp eax, 2
	jnz loc_45FA97
	mov edx, 1
	mov eax, 6
	call sub_45B980
	test eax, eax
	jz loc_45FBCA
	mov eax, 1
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FB21:
	mov edx, 1
	mov eax, 6
	call sub_45B980
	test eax, eax
	jz loc_45FB3F
	mov eax, 1
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FB3F:
	mov edx, 0Ch
	mov eax, 4
	call sub_45B910
	test eax, eax
	jz loc_45FB5E
	xor byte [dword_512AA8], 1
	jmp loc_45FA97

loc_45FB5E:
	mov edx, 0Ch
	mov eax, 3
	call sub_45B910
	test eax, eax
	jz loc_45FB7D
	xor byte [dword_512AA8], 1
	jmp loc_45FA97

loc_45FB7D:
	mov edx, 1
	mov eax, 5
	call sub_45B980
	test eax, eax
	jz loc_45FA97
	cmp dword [dword_512AA8], 0
	jz loc_45FBBF
	mov edx, 4
	xor eax, eax
	mov ebp, 1
	mov dword [dword_512AB4], eax
	mov dword [dword_512AA8], edx
	mov dword [dword_512AC0], ebp
	jmp loc_45FA97

loc_45FBBF:
	mov eax, 3
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FBCA:
	mov edx, 0Ch
	mov eax, 4
	call sub_45B910
	test eax, eax
	jz loc_45FBE9
	xor byte [dword_512AA8], 1
	jmp loc_45FA97

loc_45FBE9:
	mov edx, 0Ch
	mov eax, 3
	call sub_45B910
	test eax, eax
	jz loc_45FC08
	xor byte [dword_512AA8], 1
	jmp loc_45FA97

loc_45FC08:
	mov edx, 1
	mov eax, 5
	call sub_45B980
	test eax, eax
	jz loc_45FA97
	cmp dword [dword_512AA8], 0
	jz loc_45FC4B
	mov esi, 5
	xor ebx, ebx
	mov ecx, 1
	mov dword [dword_512AB4], ebx
	mov dword [dword_512AA8], esi
	mov dword [dword_512AC0], ecx
	jmp loc_45FA97

loc_45FC4B:
	mov eax, 4
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FC56:
	mov edx, 1
	mov eax, 6
	call sub_45B980
	test eax, eax
	jz loc_45FC74

loc_45FC69:
	mov eax, 1
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FC74:
	mov edx, 0Ch
	mov eax, 1
	call sub_45B910
	test eax, eax
	jz loc_45FCDD
	mov edx, dword [dword_512AB0]
	lea ecx, 0[edx*4]
	sub ecx, edx
	mov edx, dword [dword_512AB8]
	lea eax, 0[edx*4]
	sub eax, edx
	shl ecx, 3
	shl eax, 2
	mov edx, dword [dword_512ABC]
	add ecx, eax
	lea eax, 0[edx*4]
	sub eax, edx
	add eax, eax
	mov ebp, dword [dword_512AA8]
	add eax, ecx
	add eax, ebp
	mov al, byte byte_4D7650[eax]
	and eax, 0FFh
	mov dword [dword_512AA8], eax
	jmp loc_45FA97

loc_45FCDD:
	mov edx, 0Ch
	mov eax, 2
	call sub_45B910
	test eax, eax
	jz loc_45FD48
	push edi
	mov edx, dword [dword_512AB0]
	lea ecx, 0[edx*4]
	sub ecx, edx
	mov edx, dword [dword_512AB8]
	lea eax, 0[edx*4]
	sub eax, edx
	shl ecx, 3
	shl eax, 2
	mov edx, dword [dword_512ABC]
	add ecx, eax
	lea eax, 0[edx*4]
	sub eax, edx
	add eax, eax
	mov edi, dword [dword_512AA8]
	add eax, ecx
	add eax, edi
	mov al, byte byte_4D7680[eax]
	and eax, 0FFh
	mov dword [dword_512AA8], eax
	pop edi
	jmp loc_45FA97

loc_45FD48:
	mov eax, 3
	xor edx, edx
	call sub_45B980
	test eax, eax
	jz loc_45FE02
	mov edx, dword [dword_512AA8]
	cmp edx, 2
	jnz loc_45FDAF

loc_45FD67:
	mov ecx, dword [dword_512AA8]
	sub ecx, 2
	jnz loc_45FDBD
	mov esi, dword [dword_4D5A2C]
	test esi, esi
	jle loc_45FD88
	lea eax, [esi-3]
	test eax, eax
	jle loc_45FDB9

loc_45FD83:
	mov dword [dword_4D5A2C], eax

loc_45FD88:
	mov edx, dword [dword_4D5A2C]
	mov eax, edx
	shl eax, 6
	add edx, eax
	add edx, edx
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword dword_512AA0[ecx*4], eax
	jmp loc_45FA97

loc_45FDAF:
	cmp edx, 3
	jz loc_45FD67
	jmp loc_45FA97

loc_45FDB9:
	xor eax, eax
	jmp loc_45FD83

loc_45FDBD:
	mov ebx, dword [dword_4D5A30]
	test ebx, ebx
	jle loc_45FDD3
	lea eax, [ebx-3]
	test eax, eax
	jle loc_45FDFE

loc_45FDCE:
	mov dword [dword_4D5A30], eax

loc_45FDD3:
	mov eax, dword [dword_4D5A30]
	mov dword [dword_4D5A34], eax
	mov edx, eax
	shl eax, 6
	add edx, eax
	add edx, edx
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword dword_512AA0[ecx*4], eax
	jmp loc_45FA97

loc_45FDFE:
	xor eax, eax
	jmp loc_45FDCE

loc_45FE02:
	mov eax, 4
	xor edx, edx
	call sub_45B980
	test eax, eax
	jz loc_45FEC1
	mov esi, dword [dword_512AA8]
	cmp esi, 2
	jnz loc_45FE6F

loc_45FE21:
	mov ecx, dword [dword_512AA8]
	sub ecx, 2
	jnz loc_45FE79
	mov eax, dword [dword_4D5A2C]
	cmp eax, 7Fh
	jge loc_45FE48
	add eax, 3
	cmp eax, 7Fh
	jle loc_45FE43
	mov eax, 7Fh

loc_45FE43:
	mov dword [dword_4D5A2C], eax

loc_45FE48:
	mov edx, dword [dword_4D5A2C]
	mov eax, edx
	shl eax, 6
	add edx, eax
	add edx, edx
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword dword_512AA0[ecx*4], eax
	jmp loc_45FA97

loc_45FE6F:
	cmp esi, 3
	jz loc_45FE21
	jmp loc_45FA97

loc_45FE79:
	mov ebp, dword [dword_4D5A30]
	cmp ebp, 7Fh
	jge loc_45FE96
	lea eax, [ebp+3]
	cmp eax, 7Fh
	jle loc_45FE91
	mov eax, 7Fh

loc_45FE91:
	mov dword [dword_4D5A30], eax

loc_45FE96:
	mov eax, dword [dword_4D5A30]
	mov dword [dword_4D5A34], eax
	mov edx, eax
	shl eax, 6
	add edx, eax
	add edx, edx
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword dword_512AA0[ecx*4], eax
	jmp loc_45FA97

loc_45FEC1:
	mov edx, 1
	mov eax, 5
	call sub_45B980
	test eax, eax
	jz loc_45FA97
	mov ecx, dword [dword_512AA8]
	test ecx, ecx
	jz loc_45FC69
	cmp ecx, 1
	jz loc_45FF13
	cmp ecx, 4
	jnz loc_45FF1E
	cmp dword [dword_540D94], 2
	jge loc_45FBBF
	mov ecx, 1
	mov dword [dword_512AB4], ecx
	mov dword [dword_512AA8], ecx
	jmp loc_45FA97

loc_45FF13:
	mov eax, 2
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_45FF1E:
	cmp ecx, 5
	jnz loc_45FA97
	mov eax, 2
	mov ebp, 1
	mov dword [dword_512AB4], eax
	mov dword [dword_512AA8], ebp
	jmp loc_45FA97

loc_45FF41:
	cmp byte [byte_4D76B4], 0
	jz loc_45FAF0
	cmp dword [dword_4D5A2C], 0
	jnz loc_45FAF0
	xor ch, ch
	call sub_4762E0
	mov byte [byte_4D76B4], ch
	xor eax, eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45FA80 endp

dword_45FF70: times 4 dd 0

sub_45FF80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 24h
	mov ecx, eax
	mov ebx, [eax+14h]
	lea eax, 0[ebx*8]
	add eax, ebx
	mov esi, dword [dword_5118A4]
	shl eax, 2
	lea edi, [esp+0Ch]
	add esi, eax
	movsd
	movsd
	movsd
	lea edi, [esp+18h]
	lea esi, [ecx+9Ch]
	movsd
	movsd
	movsd
	mov edx, [esp+0Ch]
	mov eax, [esp+18h]
	sub eax, edx
	mov ebx, [esp+10h]
	mov [esp], eax
	mov eax, [esp+1Ch]
	sub eax, ebx
	mov esi, [esp+14h]
	mov [esp+4], eax
	mov eax, [esp+20h]
	sub eax, esi
	mov edx, [esp]
	mov [esp+8], eax
	mov eax, [ecx+118h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+11Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+120h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	add esp, 24h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_45FF80 endp

sub_460030: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ebp, eax
	mov edx, [eax+0F0h]
	push edx
	mov ecx, [eax+0ECh]
	push ecx
	mov ebx, [eax+0E8h]
	push ebx
	mov esi, [eax+0B0h]
	push esi
	mov edi, [eax+0ACh]
	push edi
	mov eax, [eax+0A8h]
	push eax
	mov edx, [ebp+0A4h]
	push edx
	mov ecx, [ebp+0A0h]
	push ecx
	mov ebx, [ebp+9Ch]
	xor eax, eax
	push ebx
	mov ax, [ebp+14Ch]
	push eax
	xor eax, eax
	mov al, [ebp+8Ch]
	push eax
	mov esi, [ebp+0]
	push esi
	push aNewtonAtlog1DD ; "NEWTON-ATLOG 1 (%d) [%d %d] [%d %d %d] "...
	push 1
	mov ah, [ebp+8Dh]
	add esp, 38h
	test ah, ah
	jz loc_4600E2
	cmp byte [ebp+8Ch], 0
	jz loc_460101
	test byte [ebp+1F4h], 40h
	jz loc_4600EC
	mov eax, [ebp+140h]

loc_4600C2:
	mov [ebp+0A0h], eax
	mov word [ebp+14Ch], 0
	mov byte [ebp+8Eh], 0
	mov dword [ebp+0ACh], 0

loc_4600E2:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4600EC:
	lea edx, [esp+0Ch]
	mov eax, ebp
	call sub_462EA0
	mov edx, [ebp+10Ch]
	add eax, edx
	jmp loc_4600C2

loc_460101:
	lea eax, [esp+20h]
	push eax
	lea eax, [esp+20h]
	mov edx, 3
	push eax
	lea eax, [esp+20h]
	mov ecx, [ebp+0]
	push eax
	mov ebx, [ebp+88h]
	mov eax, 1
	call sub_471620
	test eax, eax
	jz loc_4600E2
	test byte [ebp+1F4h], 4
	jz loc_46044D
	mov eax, [ebp+14h]
	call sub_460930
	mov edx, [ebp+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_460151:
	mov [esp+24h], eax
	mov dword [ebp+150h], 640000h
	imul eax, [esp+1Ch], 7599h
	mov edx, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0ACh]
	sub edx, eax
	mov eax, ebp
	mov [ebp+0ACh], edx
	lea edx, [esp+0Ch]
	call sub_462EA0
	mov esi, eax
	mov edx, eax
	mov eax, ebp
	call sub_460960
	mov cl, [ebp+1F4h]
	lea ebx, [ebp+13Ch]
	test cl, 40h
	jz loc_460458
	lea edx, [esp+0Ch]
	mov eax, ebp
	call sub_462C70

loc_4601B9:
	mov [esp+28h], eax
	mov [ebp+15Ch], eax
	cmp dword [ebp+17Ch], 0
	jz loc_4601DA
	cmp dword [ebp+18h], 0
	jnz loc_4601DA
	mov dword [esp+28h], 640000h

loc_4601DA:
	mov ecx, esi
	mov eax, [ebp+154h]
	mov edx, [esp+18h]
	sub ecx, eax
	imul ecx, edx
	cmp dword [ebp+218h], 107AEh
	jle loc_460214
	mov ebx, [esp+24h]
	mov eax, ecx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, eax

loc_460214:
	mov edi, esp
	mov [ebp+154h], esi
	lea esi, [esp+0Ch]
	movsd
	movsd
	movsd
	test byte [ebp+1F4h], 4
	jz loc_46023A
	cmp word [ebp+14Ch], 0
	jbe loc_460468

loc_46023A:
	mov edx, [esp+0Ch]
	mov eax, [ebp+0D0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ebp+0D4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ebp+0D8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esp
	add ebx, eax
	mov eax, ebp
	mov [ebp+100h], ebx
	call sub_461960
	mov esi, [ebp+0A8h]
	test esi, esi
	jle loc_460476
	mov edx, esi

loc_46029B:
	mov edi, [ebp+0B0h]
	test edi, edi
	jle loc_46047F
	mov eax, edi

loc_4602AB:
	cmp edx, eax
	jle loc_460488
	sar eax, 2

loc_4602B6:
	add eax, edx
	mov edx, [ebp+158h]
	mov [ebp+0BCh], eax
	mov eax, ecx
	sub eax, edx
	cmp eax, 0FFCE0000h
	jge loc_460490

loc_4602D3:
	mov ebx, [esp+28h]
	mov dword [ebp+0E8h], 0
	add ebx, 4CCC8h
	mov dword [ebp+0F0h], 0
	mov [esp+28h], ebx
	mov [ebp+15Ch], ebx

loc_4602FB:
	mov eax, [ebp+0BCh]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp eax, 100000h
	jge loc_460316
	mov eax, 100000h

loc_460316:
	mov edx, ecx
	sub edx, [ebp+158h]
	cmp edx, eax
	jle loc_460332
	mov dword [ebp+158h], 0
	mov ecx, [ebp+158h]

loc_460332:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	shl eax, 2
	test ecx, ecx
	jle loc_4604A1
	mov edx, dword dword_511D8C[eax]
	mov ebx, [ebp+158h]
	mov eax, ecx
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, [ebp+158h]
	add esi, eax
	mov ecx, esi
	mov [ebp+158h], esi

loc_46037B:
	mov edi, [esp+28h]
	mov byte [ebp+8Eh], 0
	cmp edi, 9999h
	jl loc_4604D0
	cmp word [ebp+14Ch], 0
	jnz loc_4603A3
	mov byte [ebp+8Eh], 1

loc_4603A3:
	mov eax, [esp+1Ch]
	add [ebp+14Ch], ax
	mov ecx, dword [dword_512204]
	lea eax, 0[ecx*8]
	sub eax, ecx
	shl eax, 2
	add eax, ecx
	mov ecx, [esp+1Ch]
	mov edx, dword dword_511D5C[eax*4]
	imul eax, ecx, 7599h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub [ebp+0ACh], eax

loc_4603F1:
	mov esi, [ebp+0F0h]
	push esi
	mov edi, [ebp+0ECh]
	push edi
	mov eax, [ebp+0E8h]
	push eax
	mov edx, [ebp+0B0h]
	push edx
	mov ecx, [ebp+0ACh]
	push ecx
	mov ebx, [ebp+0A8h]
	push ebx
	mov esi, [ebp+0A4h]
	push esi
	mov edi, [ebp+0A0h]
	push edi
	mov eax, [ebp+9Ch]
	push eax
	mov edx, [ebp+0]
	push edx
	push aNewtonAtlogXDD ; "NEWTON-ATLOG X (%d ) [%d %d %d] [%d %d "...
	push 1
	add esp, 30h
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46044D:
	mov eax, [ebp+94h]
	jmp loc_460151

loc_460458:
	lea edx, [esp+0Ch]
	mov eax, ebp
	call sub_462BF0
	jmp loc_4601B9

loc_460468:
	mov edx, esp
	mov eax, ebp
	call sub_4530C0
	jmp loc_46023A

loc_460476:
	mov edx, esi
	neg edx
	jmp loc_46029B

loc_46047F:
	mov eax, edi
	neg eax
	jmp loc_4602AB

loc_460488:
	sar edx, 2
	jmp loc_4602B6

loc_460490:
	cmp ecx, 0FF880000h
	jl loc_4602D3
	jmp loc_4602FB

loc_4604A1:
	mov edx, dword dword_511D90[eax]
	mov edi, [ebp+158h]
	mov eax, ecx
	sub eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+158h]
	add edx, eax
	mov ecx, edx
	mov [ebp+158h], edx
	jmp loc_46037B

loc_4604D0:
	cmp word [ebp+14Ch], 0
	jz loc_46088A
	test byte [ebp+1F4h], 4
	jz loc_4604EE
	mov eax, ebp
	call sub_46A3B0

loc_4604EE:
	mov esi, ecx
	mov eax, [ebp+0ACh]
	mov edx, dword [dword_512204]
	sub esi, eax
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	shl eax, 2
	mov edx, [ebp+100h]
	cmp edx, dword dword_511D7C[eax]
	jge loc_46067C

loc_460521:
	lea ebx, [ebp+13Ch]
	lea edx, [esp+0Ch]
	mov eax, ebp
	call sub_456420
	mov eax, ebp
	call sub_460A40
	mov edi, [ebp+160h]
	cmp edi, 50000h
	jle loc_46055E
	cmp edi, 140000h
	jge loc_460750
	mov eax, 140000h

loc_460558:
	mov [ebp+160h], eax

loc_46055E:
	mov edx, [ebp+0E8h]
	test edx, edx
	jle loc_46076C
	mov eax, edx

loc_46056E:
	cmp eax, 3333h
	jge loc_46063D
	mov ebx, [ebp+0F0h]
	test ebx, ebx
	jle loc_460775
	mov eax, ebx

loc_460589:
	cmp eax, 3333h
	jge loc_46063D
	mov esi, [ebp+0ECh]
	test esi, esi
	jle loc_46077E
	mov eax, esi

loc_4605A4:
	cmp eax, 3333h
	jge loc_460816
	mov ebx, [ebp+100h]
	cmp ebx, 0F70Bh
	jle loc_460787

loc_4605C1:
	mov word [ebp+14Ch], 0

loc_4605CA:
	mov edi, [ebp+100h]
	cmp edi, 8F5h
	jge loc_46063D
	cmp edi, 0FFFFF70Bh
	jle loc_46063D
	mov edx, [esp+0Ch]
	mov eax, [ebp+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ebp+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ebp+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ebp+0FCh], ebx
	cmp ebx, 0F70Bh
	jle loc_460798

loc_460634:
	mov word [ebp+14Ch], 0

loc_46063D:
	mov eax, [esp+28h]
	cmp eax, 51Eh
	jg loc_4603F1
	test byte [ebp+1F4h], 10h
	jz loc_4608B7
	mov edx, [ebp+0A0h]
	mov dword [ebp+15Ch], 0
	sub edx, eax
	mov [ebp+0A0h], edx
	mov [ebp+0ACh], ecx
	jmp loc_4603F1

loc_46067C:
	mov di, [ebp+14Ch]
	cmp di, 0Ah
	jb loc_460521
	jb loc_46055E
	mov ebx, esi
	sub ebx, dword dword_511D84[eax]
	test ebx, ebx
	jl loc_460757

loc_4606A3:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_511D80[eax*4]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test ecx, ecx
	jl loc_46075E
	mov [ebp+0ACh], eax

loc_4606D8:
	mov edx, [esp+28h]
	mov byte [ebp+90h], 5
	mov ebx, 0F5Ch
	mov eax, [ebp+0A0h]
	mov word [ebp+14Ch], 1
	add esi, esi
	mov [ebp+15Ch], ebx
	sub eax, edx
	mov [ebp+160h], esi
	add eax, 0F5Ch
	mov [esp+28h], ebx
	mov [ebp+0A0h], eax
	cmp esi, 0A0000h
	jge loc_460728
	mov dword [ebp+160h], 140000h

loc_460728:
	mov dword [ebp+164h], 0
	lea edi, [ebp+170h]
	lea esi, [ebp+9Ch]
	mov dword [ebp+168h], 10000h
	movsd
	movsd
	movsd
	jmp loc_46055E

loc_460750:
	mov eax, edi
	jmp loc_460558

loc_460757:
	xor ebx, ebx
	jmp loc_4606A3

loc_46075E:
	lea edx, [ecx+eax]
	mov [ebp+0ACh], edx
	jmp loc_4606D8

loc_46076C:
	mov eax, edx
	neg eax
	jmp loc_46056E

loc_460775:
	mov eax, ebx
	neg eax
	jmp loc_460589

loc_46077E:
	mov eax, esi
	neg eax
	jmp loc_4605A4

loc_460787:
	cmp ebx, 0FFFF08F5h
	jl loc_4605C1
	jmp loc_4605CA

loc_460798:
	cmp ebx, 0FFFF08F5h
	jl loc_460634
	test byte [ebp+1F4h], 40h
	jz loc_46063D
	mov edx, [esp+0Ch]
	mov eax, [ebp+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ebp+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ebp+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ebp+104h], ebx
	cmp ebx, 0F70Bh
	jg loc_460634
	cmp ebx, 0FFFF08F5h
	jl loc_460634
	jmp loc_46063D

loc_460816:
	cmp dword [ebp+100h], 0E666h
	jle loc_46063D
	mov eax, [ebp+0ECh]
	mov [ebp+150h], eax
	test eax, eax
	jle loc_460842
	cmp eax, 3333h
	jge loc_460850
	jmp loc_460634

loc_460842:
	neg eax
	cmp eax, 3333h
	jge loc_460850
	jmp loc_460634

loc_460850:
	mov eax, [ebp+0ECh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov dword [ebp+328h], 140000h
	mov edx, [ebp+0ECh]
	mov dword [ebp+324h], 140000h
	sub edx, eax
	mov [ebp+0ECh], edx
	jmp loc_46063D

loc_46088A:
	mov ah, [ebp+1F4h]
	lea ebx, [ebp+13Ch]
	test ah, 40h
	jz loc_4608A9
	mov edx, esp
	mov eax, ebp
	call sub_460DA0
	jmp loc_46063D

loc_4608A9:
	mov edx, esp
	mov eax, ebp
	call sub_460AE0
	jmp loc_46063D

loc_4608B7:
	mov ebx, eax
	neg ebx
	mov edx, [esp+0Ch]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov edi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	mov esi, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ebp+9Ch]
	mov dword [ebp+15Ch], 0
	add ebx, edi
	mov edx, [ebp+0A4h]
	mov [ebp+9Ch], ebx
	add edx, eax
	mov edi, [ebp+0A0h]
	mov [ebp+0A4h], edx
	add edi, esi
	mov [ebp+0A0h], edi
	mov [ebp+0ACh], ecx
	jmp loc_4603F1
;sub_460030 endp

sub_460930: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_51221C]
	mov edx, 10000h
	cmp ecx, 7
	jnz loc_460955
	cmp eax, 144h
	jle loc_460955
	cmp eax, 230h
	jge loc_460955
	mov edx, 30000h

loc_460955:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_460930 endp

sub_460960: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov ebp, edx
	mov edx, [eax+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov ebx, dword [dword_5118A4]
	shl eax, 2
	add eax, ebx
	xor ebx, ebx
	mov bl, [eax+1Eh]
	sar ebx, 4
	and ebx, 0Fh
	cmp ebx, 2
	jz loc_46099C
	mov al, [eax+1Eh]
	and al, 0Fh
	cmp al, 2
	jnz loc_4609F4

loc_46099C:
	mov edi, esp
	lea esi, [ecx+124h]
	movsd
	movsd
	movsd
	mov eax, 0A0000h
	mov ebx, [esp]
	mov esi, [esp+4]
	mov edi, [esp+8]
	neg ebx
	neg esi
	neg edi
	mov [esp], ebx
	mov [esp+4], esi
	mov ebx, dword [dword_51221C]
	mov [esp+8], edi
	cmp ebx, 4
	jnz loc_460A14
	cmp edx, 572h
	jle loc_4609FD
	cmp edx, 5A0h
	jge loc_4609FD
	mov eax, 180000h

loc_4609E8:
	mov edi, [ecx+0A0h]
	add eax, ebp
	cmp eax, edi
	jl loc_460A20

loc_4609F4:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4609FD:
	cmp edx, 3ECh
	jle loc_4609E8
	cmp edx, 42Ah
	jge loc_4609E8
	mov eax, 0E0000h
	jmp loc_4609E8

loc_460A14:
	cmp ebx, 8
	jnz loc_4609E8
	mov eax, 140000h
	jmp loc_4609E8

loc_460A20:
	lea ebx, [ecx+13Ch]
	mov edx, esp
	mov eax, ecx
	call sub_456420
	mov eax, ecx
	call sub_460A40
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_460960 endp

sub_460A40: ;SUBROUTINE
	push ebx
	push edx
	push edi
	mov edx, [eax+0E8h]
	cmp edx, 26666h
	jg loc_460A95
	cmp edx, 0FFFD999Ah
	jge loc_460A63
	mov dword [eax+0E8h], 0FFFD999Ah

loc_460A63:
	mov ebx, [eax+0ECh]
	cmp ebx, 26666h
	jle loc_460AA1
	mov dword [eax+0ECh], 26666h

loc_460A7B:
	mov edi, [eax+0F0h]
	cmp edi, 26666h
	jg loc_460AB5
	cmp edi, 0FFFD999Ah
	jl loc_460AC3
	pop edi
	pop edx
	pop ebx
	ret

loc_460A95:
	mov dword [eax+0E8h], 26666h
	jmp loc_460A63

loc_460AA1:
	cmp ebx, 0FFFD999Ah
	jge loc_460A7B
	mov dword [eax+0ECh], 0FFFD999Ah
	jmp loc_460A7B

loc_460AB5:
	mov dword [eax+0F0h], 26666h
	pop edi
	pop edx
	pop ebx
	ret

loc_460AC3:
	mov dword [eax+0F0h], 0FFFD999Ah
	pop edi
	pop edx
	pop ebx
	ret
;sub_460A40 endp

sub_460AE0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebx, [eax+100h]
	xor ebp, ebp
	test ebx, ebx
	jle loc_460C7B
	mov ebx, 1

loc_460AFB:
	mov eax, [ecx+0D0h]
	imul eax, ebx
	sub eax, [edx]
	mov esi, [ecx+0D8h]
	imul esi, ebx
	mov edi, [edx+8]
	sub edi, esi
	mov esi, edi
	test byte [ecx+1F4h], 4
	jz loc_460C85
	mov edi, 7AEh

loc_460B28:
	cmp dword [ecx+100h], 0E666h
	jle loc_460C8F

loc_460B38:
	test eax, eax
	jle loc_460CA4

loc_460B40:
	cmp eax, edi
	jle loc_460CAB

loc_460B48:
	mov esi, [ecx+0D0h]
	imul esi, ebx
	imul ebx, [ecx+0D8h]
	mov eax, [edx+8]
	mov edi, [edx]
	sub eax, ebx
	sub esi, edi
	mov ebx, eax
	test esi, esi
	jle loc_460CD4
	mov eax, esi

loc_460B6D:
	cmp eax, 1999h
	jle loc_460CDD

loc_460B78:
	mov eax, 0FC28h
	mov edx, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ACh]
	mov [ecx+0A8h], eax
	mov eax, 0FC28h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	mov [ecx+0ACh], eax
	mov eax, 0FC28h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0B0h], eax
	test esi, esi
	jle loc_460D07
	mov eax, esi

loc_460BD3:
	cmp eax, 3333h
	jle loc_460D10

loc_460BDE:
	mov eax, [ecx+0A8h]
	test eax, eax
	jle loc_460D3A

loc_460BEC:
	mov edx, [ecx+0B0h]
	test edx, edx
	jle loc_460D41

loc_460BFA:
	add eax, edx
	cmp eax, 280000h
	jge loc_460D5A
	mov edi, [ecx+0A8h]
	test edi, edi
	jle loc_460D48
	mov eax, edi

loc_460C17:
	mov ebp, [ecx+0B0h]
	test ebp, ebp
	jle loc_460D51
	mov edx, ebp

loc_460C27:
	add eax, edx

loc_460C29:
	mov [ecx+160h], eax
	mov eax, ecx
	mov dword [ecx+168h], 20003h
	call sub_478C70

loc_460C40:
	test esi, esi
	jle loc_460D64
	cmp esi, 4CCCh
	jle loc_460C55
	mov esi, 4CCCh

loc_460C55:
	test ebx, ebx
	jle loc_460D7A
	cmp ebx, 4CCCh
	jle loc_460C6A
	mov ebx, 4CCCh

loc_460C6A:
	mov [ecx+0E8h], ebx
	mov [ecx+0F0h], esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_460C7B:
	mov ebx, 0FFFFFFFFh
	jmp loc_460AFB

loc_460C85:
	mov edi, 0A3Dh
	jmp loc_460B28

loc_460C8F:
	cmp dword [ecx+100h], 0FFFF199Ah
	jl loc_460B38
	jmp loc_460B48

loc_460CA4:
	neg eax
	jmp loc_460B40

loc_460CAB:
	test esi, esi
	jle loc_460CD0

loc_460CAF:
	cmp esi, edi
	jg loc_460B48
	test ebp, ebp
	jnz loc_460B48
	mov [ecx+0E8h], ebp
	mov [ecx+0F0h], ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_460CD0:
	neg esi
	jmp loc_460CAF

loc_460CD4:
	mov eax, esi
	neg eax
	jmp loc_460B6D

loc_460CDD:
	test ebx, ebx
	jle loc_460CF3
	mov eax, ebx
	cmp eax, 1999h
	jg loc_460B78
	jmp loc_460C40

loc_460CF3:
	mov eax, ebx
	neg eax
	cmp eax, 1999h
	jg loc_460B78
	jmp loc_460C40

loc_460D07:
	mov eax, esi
	neg eax
	jmp loc_460BD3

loc_460D10:
	test ebx, ebx
	jle loc_460D26
	mov eax, ebx
	cmp eax, 3333h
	jg loc_460BDE
	jmp loc_460C40

loc_460D26:
	mov eax, ebx
	neg eax
	cmp eax, 3333h
	jg loc_460BDE
	jmp loc_460C40

loc_460D3A:
	neg eax
	jmp loc_460BEC

loc_460D41:
	neg edx
	jmp loc_460BFA

loc_460D48:
	mov eax, edi
	neg eax
	jmp loc_460C17

loc_460D51:
	mov edx, ebp
	neg edx
	jmp loc_460C27

loc_460D5A:
	mov eax, 280000h
	jmp loc_460C29

loc_460D64:
	cmp esi, 0FFFFB334h
	jg loc_460C55
	mov esi, 0FFFFB334h
	jmp loc_460C55

loc_460D7A:
	cmp ebx, 0FFFFB334h
	jg loc_460C6A
	mov ebx, 0FFFFB334h
	mov [ecx+0E8h], ebx
	mov [ecx+0F0h], esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_460AE0 endp

sub_460DA0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	mov edi, esp
	mov esi, edx
	movsd
	movsd
	movsd
	xor ebx, ebx
	mov edx, [esp]
	mov eax, [eax+0C4h]
	mov [esp+10h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	lea edi, [ebx+eax]
	mov eax, [ecx+0DCh]
	mov esi, [ecx+100h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	test edi, edi
	jle loc_460F6F
	mov edx, edi

loc_460E49:
	test esi, esi
	jle loc_460F78
	mov eax, esi

loc_460E53:
	test ebx, ebx
	jle loc_460F81
	mov ebp, ebx

loc_460E5D:
	mov [esp+0Ch], ebp
	cmp eax, edx
	jle loc_460F94
	cmp eax, ebp
	jle loc_460F94
	mov edi, esi
	test esi, esi
	jle loc_460F8A
	mov eax, 1

loc_460E80:
	mov esi, [ecx+0D0h]
	imul esi, eax
	imul eax, [ecx+0D8h]
	mov ebp, [esp]
	mov ebx, [esp+8]
	sub esi, ebp

loc_460E99:
	sub ebx, eax

loc_460E9B:
	test byte [ecx+1F4h], 4
	jz loc_461000
	mov eax, 7AEh

loc_460EAD:
	cmp edi, 0E666h
	jle loc_46100A

loc_460EB9:
	test esi, esi
	jle loc_46101B
	mov edx, esi

loc_460EC3:
	cmp edx, eax
	jle loc_461024

loc_460ECB:
	test esi, esi
	jle loc_461058
	mov eax, esi

loc_460ED5:
	cmp eax, 1999h
	jle loc_461061

loc_460EE0:
	mov eax, 0F333h
	mov edx, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ACh]
	mov [ecx+0A8h], eax
	mov eax, 0F333h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	mov [ecx+0ACh], eax
	mov eax, 0F333h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0B0h], eax

loc_460F31:
	test esi, esi
	jle loc_46108B
	cmp esi, 4CCCh
	jle loc_460F46
	mov esi, 4CCCh

loc_460F46:
	test ebx, ebx
	jle loc_4610A1
	cmp ebx, 4CCCh
	jle loc_460F5B
	mov ebx, 4CCCh

loc_460F5B:
	mov [ecx+0E8h], ebx
	mov [ecx+0F0h], esi
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_460F6F:
	mov edx, edi
	neg edx
	jmp loc_460E49

loc_460F78:
	mov eax, esi
	neg eax
	jmp loc_460E53

loc_460F81:
	mov ebp, ebx
	neg ebp
	jmp loc_460E5D

loc_460F8A:
	mov eax, 0FFFFFFFFh
	jmp loc_460E80

loc_460F94:
	cmp edx, eax
	jle loc_460FCC
	cmp edx, [esp+0Ch]
	jle loc_460FCC
	test edi, edi
	jle loc_460FC5
	mov eax, 1

loc_460FA7:
	mov esi, [ecx+0C4h]
	imul esi, eax
	imul eax, [ecx+0CCh]
	mov edx, [esp]
	mov ebx, [esp+8]
	sub esi, edx
	jmp loc_460E99

loc_460FC5:
	mov eax, 0FFFFFFFFh
	jmp loc_460FA7

loc_460FCC:
	mov edi, ebx
	test ebx, ebx
	jle loc_460FF9
	mov ebx, 1

loc_460FD7:
	mov esi, [ecx+0DCh]
	imul esi, ebx
	imul ebx, [ecx+0E4h]
	mov eax, [esp+8]
	mov ebp, [esp]
	sub eax, ebx
	sub esi, ebp
	mov ebx, eax
	jmp loc_460E9B

loc_460FF9:
	mov ebx, 0FFFFFFFFh
	jmp loc_460FD7

loc_461000:
	mov eax, 0A3Dh
	jmp loc_460EAD

loc_46100A:
	cmp edi, 0FFFF199Ah
	jl loc_460EB9
	jmp loc_460ECB

loc_46101B:
	mov edx, esi
	neg edx
	jmp loc_460EC3

loc_461024:
	test ebx, ebx
	jle loc_461052
	mov edx, ebx

loc_46102A:
	cmp edx, eax
	jg loc_460ECB
	mov edi, [esp+10h]
	test edi, edi
	jnz loc_460ECB
	mov [ecx+0E8h], edi
	mov [ecx+0F0h], edi
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_461052:
	mov edx, ebx
	neg edx
	jmp loc_46102A

loc_461058:
	mov eax, esi
	neg eax
	jmp loc_460ED5

loc_461061:
	test ebx, ebx
	jle loc_461077
	mov eax, ebx
	cmp eax, 1999h
	jg loc_460EE0
	jmp loc_460F31

loc_461077:
	mov eax, ebx
	neg eax
	cmp eax, 1999h
	jg loc_460EE0
	jmp loc_460F31

loc_46108B:
	cmp esi, 0FFFFB334h
	jg loc_460F46
	mov esi, 0FFFFB334h
	jmp loc_460F46

loc_4610A1:
	cmp ebx, 0FFFFB334h
	jg loc_460F5B
	mov ebx, 0FFFFB334h
	mov [ecx+0E8h], ebx
	mov [ecx+0F0h], esi
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_460DA0 endp

sub_4610D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0C8h
	mov [esp+0BCh], eax
	mov esi, eax
	lea edi, [esp+0A4h]
	lea esi, [esi+13Ch]
	movsd
	movsd
	movsd
	mov ecx, 2
	lea edi, [esp+8Ch]
	mov esi, dword_45FF70
	xor edx, edx
	xor ebp, ebp
	movsd
	movsd
	movsd
	mov [esp+0C0h], edx
	mov dx, [eax+14Ch]
	mov [esp+0C4h], ecx
	test dx, dx
	jnz loc_461141
	cmp dword [dword_51221C], 0
	jnz loc_4612B8
	test byte [eax+1F4h], 40h
	jz loc_4612B8

loc_461141:
	mov eax, 4
	xor ebp, ebp
	mov [esp+0C4h], eax

loc_46114F:
	mov eax, [esp+0BCh]
	cmp dword [eax+0BCh], 280000h
	jle loc_4611D9
	mov edx, [eax+0A8h]
	lea eax, 0[edx*4]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+0BCh]
	mov edx, [edx+0ACh]
	mov [esp+8Ch], eax
	lea eax, 0[edx*4]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+0BCh]
	mov edx, [edx+0B0h]
	mov [esp+90h], eax
	lea eax, 0[edx*4]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+94h], eax

loc_4611D9:
	mov esi, [esp+0BCh]
	mov ecx, 20h
	mov edi, esp
	lea esi, [esi+8]
	rep movsd
	mov ebx, [esp+0C4h]
	mov ecx, ebp
	cmp ebp, ebx
	jge loc_4612AB
	lea eax, 0[ebp*4]
	sub eax, ebp
	mov edi, [esp+0BCh]
	lea ebp, 0[eax*4]
	add ebp, edi

loc_461216:
	lea edi, [esp+80h]
	lea esi, [ebp+1ACh]
	movsd
	movsd
	movsd
	mov eax, [esp+8Ch]
	mov edx, [esp+80h]
	mov ebx, [esp+84h]
	mov esi, [esp+88h]
	add edx, eax
	mov eax, [esp+90h]
	mov [esp+80h], edx
	mov edx, esp
	add ebx, eax
	mov eax, [esp+94h]
	mov [esp+84h], ebx
	mov ebx, 1
	add esi, eax
	lea eax, [esp+80h]
	mov [esp+88h], esi
	call sub_44A6D0
	mov edx, 1
	mov eax, esp
	call sub_449AE0
	test al, 3Fh
	jz loc_4612E2
	cmp dword [esp+0C0h], 0
	jl loc_4612E2
	mov esi, [esp+0C4h]
	inc ecx
	add ebp, 0Ch
	cmp ecx, esi
	jl loc_461216

loc_4612AB:
	add esp, 0C8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4612B8:
	mov eax, [esp+0BCh]
	cmp dword [eax+2B8h], 0
	jge loc_46114F
	mov edi, 4
	mov ebp, 2
	mov [esp+0C4h], edi
	jmp loc_46114F

loc_4612E2:
	mov ebx, 4E3h
	mov edx, aCNfs2seGameC_9 ; "c:\\nfs2se\\game\\common\\newton.c"
	mov eax, esp
	call sub_44A930
	test eax, eax
	jz loc_4613C2
	cmp dword [esp+10h], 0
	jz loc_4613C2
	lea esi, [esp+20h]

loc_46130A:
	lea edi, [esp+0B0h]
	movsd
	movsd
	movsd
	mov eax, [esp+0ACh]
	sub eax, [esp+0B8h]
	mov ebx, [esp+0B0h]
	mov [esp+0A0h], eax
	mov eax, [esp+0A4h]
	xor esi, esi
	sub eax, ebx
	mov [esp+9Ch], esi
	mov [esp+98h], eax
	lea eax, [esp+98h]
	xor edx, edx
	call sub_45E810
	mov eax, [esp+0BCh]
	call sub_478CC0
	mov edi, [esp+0A0h]
	push edi
	mov ebp, [esp+0A0h]
	push ebp
	mov eax, [esp+0A0h]
	push eax
	mov eax, [esp+0C8h]
	mov esi, [esp+0C8h]
	call sub_4613E0
	lea eax, 0[ecx*4]
	mov edi, esi
	sub eax, ecx
	lea edi, [edi+170h]
	lea esi, [esi+eax*4+1ACh]
	mov eax, [esp+0BCh]
	movsd
	movsd
	movsd
	call sub_43D760
	add esp, 0C8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4613C2:
	mov edx, [esp+0Ch]
	lea eax, 0[edx*8]
	add eax, edx
	mov esi, dword [dword_5118A4]
	shl eax, 2
	add esi, eax
	jmp loc_46130A
;sub_4610D0 endp

sub_4613E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 48h
	mov ecx, eax
	mov edx, [eax+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	mov edx, [eax+0Fh]
	sar edx, 18h
	shl edx, 9
	mov [esp+3Ch], edx
	mov edx, [eax+10h]
	sar edx, 18h
	mov eax, [eax+11h]
	shl edx, 9
	sar eax, 18h
	mov [esp+40h], edx
	shl eax, 9
	mov edx, [esp+64h]
	mov [esp+44h], eax
	mov eax, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+68h]
	mov ebx, eax
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+6Ch]
	add ebx, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_46164F
	mov edx, eax

loc_46146F:
	cmp edx, 8000h
	jle loc_461499
	test eax, eax
	jle loc_461493
	mov edx, [esp+3Ch]
	mov [esp+64h], edx
	mov edx, [esp+40h]
	mov [esp+68h], edx
	mov edx, [esp+44h]
	mov [esp+6Ch], edx

loc_461493:
	jl loc_461658

loc_461499:
	mov eax, [esp+68h]
	xor edx, edx
	mov ebp, 10000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, ebp
	mov eax, [esp+6Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	xor edx, edx
	mov eax, [esp+6Ch]
	mov [esp+30h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	xor edx, edx
	mov eax, [esp+64h]
	mov esi, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebp
	sub ebx, eax
	mov eax, [esp+64h]
	mov [esp+34h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	xor edx, edx
	mov eax, [esp+68h]
	xor edi, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0A8h]
	sub ebx, eax
	mov eax, [esp+64h]
	mov [esp+38h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0ACh]
	mov eax, [esp+68h]
	mov [esp+28h], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	add ebx, eax
	mov eax, [esp+6Ch]
	mov [esp+2Ch], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	mov [esp+24h], edi
	test eax, eax
	jle loc_46168D
	mov eax, [esp+64h]
	mov edx, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0ACh]
	mov eax, [esp+68h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	add ebx, eax
	mov eax, [esp+6Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx

loc_4615B2:
	neg eax
	mov edx, eax
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	cmp eax, 0FFFFF852h
	jle loc_4616D6
	mov edx, 0FFFFF852h

loc_4615D1:
	mov eax, [esp+64h]
	mov [esp], eax
	mov eax, [esp+68h]
	mov [esp+4], eax
	mov eax, [esp+6Ch]
	mov [esp+8], eax
	mov eax, [esp+24h]
	mov [esp+0Ch], eax
	mov eax, [esp+28h]
	mov [esp+10h], eax
	mov eax, [esp+2Ch]
	mov [esp+14h], eax
	mov eax, [esp+30h]
	mov [esp+18h], eax
	mov eax, [esp+34h]
	mov [esp+1Ch], eax
	mov eax, [esp+38h]
	mov ebx, esp
	mov [esp+20h], eax
	mov eax, esi
	call sub_46B9C0
	mov edx, eax
	mov eax, 4
	mov ecx, [esp+38h]
	call sub_46B9B0
	push ecx
	mov ebx, [esp+38h]
	push ebx
	mov edi, [esp+38h]
	push edi
	mov eax, esi
	call sub_46B790
	add esp, 48h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 0Ch

loc_46164F:
	mov edx, eax
	neg edx
	jmp loc_46146F

loc_461658:
	mov eax, [esp+3Ch]
	mov [esp+64h], eax
	mov edx, eax
	mov eax, [esp+40h]
	neg edx
	mov [esp+68h], eax
	mov ebx, eax
	mov [esp+64h], edx
	mov eax, [esp+44h]
	neg ebx
	mov esi, eax
	mov [esp+6Ch], eax
	neg esi
	mov [esp+68h], ebx
	mov [esp+6Ch], esi
	jmp loc_461499

loc_46168D:
	mov eax, [esp+64h]
	mov edx, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0ACh]
	mov eax, [esp+68h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	add ebx, eax
	mov eax, [esp+6Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	neg eax
	jmp loc_4615B2

loc_4616D6:
	mov edx, eax
	jmp loc_4615D1
;sub_4613E0 endp

sub_4616E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ecx, eax
	mov edx, [ecx+110h]
	mov eax, [eax+110h]
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A0h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A4h]
	imul edx, ebx
	mov [esp+0Ch], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+1A8h]
	imul edx, ebx
	mov [esp+10h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+14h], eax
	mov eax, [ecx+108h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+188h]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+18Ch]
	imul edx, ebx
	mov [esp+24h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+190h]
	imul edx, ebx
	mov [esp+28h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [ecx+100h]
	mov [esp+2Ch], eax
	cmp edx, 0CCCCh
	jg loc_4618CE
	lea edi, [esp+18h]
	lea esi, [ecx+9Ch]
	movsd
	movsd
	movsd
	mov eax, [ecx+154h]
	mov [esp+1Ch], eax

loc_4617DE:
	mov eax, [esp+18h]
	add eax, [esp+0Ch]
	mov ebx, [esp+10h]
	mov [esp], eax
	mov eax, [esp+1Ch]
	add eax, ebx
	mov esi, [esp+14h]
	mov [esp+4], eax
	mov eax, [esp+20h]
	add eax, esi
	mov edi, [esp+24h]
	mov [esp+8], eax
	mov eax, [esp]
	sub eax, edi
	mov ebp, [esp+28h]
	mov [ecx+1ACh], eax
	mov eax, [esp+4]
	sub eax, ebp
	mov edx, [esp+2Ch]
	mov [ecx+1B0h], eax
	mov eax, [esp+8]
	sub eax, edx
	mov [ecx+1B4h], eax
	mov eax, [esp]
	add eax, edi
	mov [ecx+1B8h], eax
	mov eax, [esp+4]
	add eax, ebp
	mov [ecx+1BCh], eax
	mov eax, [esp+8]
	add eax, edx
	mov ebp, [esp+0Ch]
	mov [ecx+1C0h], eax
	mov eax, [esp+18h]
	sub eax, ebp
	mov [esp], eax
	mov eax, [esp+1Ch]
	sub eax, ebx
	mov [esp+4], eax
	mov eax, [esp+20h]
	sub eax, esi
	mov [esp+8], eax
	mov eax, [esp]
	mov esi, edi
	sub eax, edi
	mov edi, [esp+28h]
	mov [ecx+1C4h], eax
	mov eax, [esp+4]
	sub eax, edi
	mov [ecx+1C8h], eax
	mov eax, [esp+8]
	sub eax, edx
	mov [ecx+1CCh], eax
	mov eax, [esp]
	add eax, esi
	mov [ecx+1D0h], eax
	mov eax, [esp+4]
	add eax, edi
	mov [ecx+1D4h], eax
	mov eax, [esp+8]
	add eax, edx
	mov [ecx+1D8h], eax
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4618CE:
	mov eax, [ecx+10Ch]
	mov ebx, [ecx+15Ch]
	neg eax
	mov edx, [ecx+124h]
	sub eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov eax, [ecx+10Ch]
	mov edi, [ecx+15Ch]
	neg eax
	mov edx, [ecx+128h]
	sub eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [ecx+10Ch]
	mov ebp, [ecx+15Ch]
	neg eax
	mov edx, [ecx+12Ch]
	sub eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+9Ch]
	add edx, esi
	mov [esp+18h], edx
	mov edx, [ecx+0A0h]
	add edx, ebx
	mov [esp+1Ch], edx
	mov edx, [ecx+0A4h]
	add edx, eax
	mov [esp+20h], edx
	jmp loc_4617DE
;sub_4616E0 endp

sub_461960: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 0Ch
	and esp, 0FFFFFFF8h
	mov [esp+4], eax
	mov [esp], edx
	test byte [eax+1F4h], 4
	jnz loc_461988
	cmp ebx, 0E666h
	jg loc_461B69

loc_461988:
	mov eax, [esp]
	mov edx, [esp+4]
	mov eax, [eax]
	mov [edx+194h], eax
	mov eax, [esp]
	mov eax, [eax+4]
	mov [edx+198h], eax
	mov eax, [esp]
	mov eax, [eax+8]
	mov [edx+19Ch], eax
	cmp ebx, 8000h
	jl loc_461BAE

loc_4619BB:
	mov eax, [esp+4]
	mov edx, [eax+19Ch]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [eax+198h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, [esp+4]
	sub ebx, edx
	mov [eax+1A0h], ebx
	mov edx, [eax+194h]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+19Ch]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+1A4h], ebx
	mov edx, [eax+198h]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+194h]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	add eax, 1A0h
	mov edx, [esp+4]
	mov [eax+8], ebx
	call sub_45E760
	mov eax, [esp+4]
	mov edx, [edx+1A8h]
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+1A4h]
	mov eax, [eax+19Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+188h], ebx
	mov edx, [eax+1A0h]
	mov eax, [eax+19Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+1A8h]
	mov eax, [eax+194h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+18Ch], ebx
	mov edx, [eax+1A4h]
	mov eax, [eax+194h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+1A0h]
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+190h], ebx
	add eax, 188h
	call sub_45E760
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_461B69:
	mov edi, eax
	mov esi, eax
	mov ecx, 9
	lea edi, [edi+188h]
	lea esi, [esi+0C4h]
	mov eax, [esp]
	rep movsd
	mov edx, [esp+4]
	mov eax, [eax]
	mov [edx+194h], eax
	mov eax, [esp]
	mov eax, [eax+4]
	mov [edx+198h], eax
	mov eax, [esp]
	mov eax, [eax+8]
	mov [edx+19Ch], eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_461BAE:
	mov edx, [esp]
	mov eax, [esp+4]
	mov edx, [edx]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+4]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	add ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+8]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_461E21
	mov edx, [esp]
	mov eax, [esp+4]
	mov edx, [edx]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+4]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	add ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+8]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx

loc_461C5C:
	mov [esp+8], eax
	fild dword [esp+8]
	fcomp qword [dbl_4CD820]
	fnstsw ax
	sahf
	jbe loc_4619BB
	mov eax, [esp+4]
	mov edx, [eax+0E4h]
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [eax+0E0h]
	mov eax, [eax+19Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, [esp+4]
	sub ebx, edx
	mov [eax+188h], ebx
	mov edx, [eax+0DCh]
	mov eax, [eax+19Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+0E4h]
	mov eax, [eax+194h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+18Ch], ebx
	mov edx, [eax+0E0h]
	mov eax, [eax+194h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+0DCh]
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	add eax, 188h
	mov edx, [esp+4]
	mov [eax+8], ebx
	call sub_45E760
	mov eax, [esp+4]
	mov edx, [edx+19Ch]
	mov eax, [eax+18Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+198h]
	mov eax, [eax+190h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+1A0h], ebx
	mov edx, [eax+194h]
	mov eax, [eax+190h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+19Ch]
	mov eax, [eax+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+1A4h], ebx
	mov edx, [eax+198h]
	mov eax, [eax+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+194h]
	mov eax, [eax+18Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov eax, [esp+4]
	mov [eax+1A8h], ebx
	add eax, 1A0h
	call sub_45E760
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_461E21:
	mov edx, [esp]
	mov eax, [esp+4]
	mov edx, [edx]
	mov eax, [eax+0C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+4]
	mov eax, [eax+0C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	add ebx, eax
	mov eax, [esp+4]
	mov edx, [edx+8]
	mov eax, [eax+0CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	neg eax
	jmp loc_461C5C
;sub_461960 endp

sub_461E80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 28h
	mov esi, eax
	cmp byte [eax+8Dh], 0
	jnz loc_461E9A

loc_461E92:
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_461E9A:
	lea eax, [esi+98h]
	push eax
	push 1000h
	lea eax, [esp+2Ch]
	push eax
	mov eax, [esi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ecx, eax
	mov eax, [esi+0ECh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebx, eax
	mov eax, [esi+0E8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, eax
	lea eax, [esp+0Ch]
	call sub_462020
	test eax, eax
	jz loc_461E92
	lea eax, [esi+0C4h]
	mov edx, esp
	mov ebx, eax
	call sub_49E840
	cmp dword [esp+24h], 0
	jnz loc_461F23
	mov dl, [esi+8Fh]
	dec dl
	mov [esi+8Fh], dl
	test dl, dl
	ja loc_461E92

loc_461F23:
	lea eax, [esi+0C4h]
	call sub_49EBC8
	mov byte [esi+8Fh], 20h
	mov dword [esi+98h], 0
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_461E80 endp

sub_461F50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 28h
	mov esi, eax
	cmp byte [eax+8Dh], 0
	jnz loc_461F6A

loc_461F62:
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_461F6A:
	lea eax, [esi+98h]
	push eax
	push 1000h
	lea eax, [esp+2Ch]
	push eax
	mov eax, [esi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ecx, eax
	mov eax, [esi+0ECh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ebx, eax
	mov eax, [esi+0E8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov edx, eax
	lea eax, [esp+0Ch]
	call sub_462020
	test eax, eax
	jz loc_461F62
	lea eax, [esi+0C4h]
	mov edx, esp
	mov ebx, eax
	call sub_49E840
	mov dl, [esi+8Fh]
	dec dl
	mov [esi+8Fh], dl
	test dl, dl
	jbe loc_461FF3
	cmp dword [esp+24h], 0
	jz loc_461F62

loc_461FF3:
	lea eax, [esi+0C4h]
	call sub_49EBC8
	mov byte [esi+8Fh], 10h
	mov dword [esi+98h], 0
	add esp, 28h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_461F50 endp

sub_462020: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 9Ch
	mov [esp+94h], eax
	mov esi, edx
	mov ebp, ecx
	mov edx, ebx
	mov eax, [esp+0ACh]
	xor ebx, ebx
	mov [eax], ebx
	test esi, esi
	jle loc_462111
	mov eax, esi

loc_46204B:
	mov [esp+98h], eax
	test edx, edx
	jle loc_46211A
	mov edi, edx

loc_46205C:
	test ebp, ebp
	jle loc_462123
	mov eax, ebp

loc_462066:
	mov ecx, [esp+98h]
	add ecx, edi
	add ecx, eax
	mov [esp+90h], eax
	mov eax, ecx
	mov ecx, [esp+0B4h]
	add [ecx], eax
	mov eax, [ecx]
	cmp eax, [esp+0B0h]
	jle loc_46209B
	mov eax, [esp+0ACh]
	mov dword [eax], 1

loc_46209B:
	lea eax, [esp+6Ch]
	call sub_49E780
	cmp edi, 13h
	jle loc_4620AE
	mov ebx, 1

loc_4620AE:
	cmp dword [esp+98h], 0Dh
	jle loc_46212C
	lea eax, [esp+48h]
	mov edx, esi
	lea ebx, [esp+24h]
	call sub_49E720
	lea edx, [esp+6Ch]
	lea eax, [esp+48h]
	call sub_49E840
	mov ebx, 1

loc_4620D9:
	cmp dword [esp+90h], 0Dh
	jle loc_46214B
	mov eax, esp
	mov edx, ebp
	mov ebx, [esp+94h]
	call sub_49E7E0
	mov edx, esp
	lea eax, [esp+24h]
	call sub_49E840
	mov ebx, 1
	mov eax, ebx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_462111:
	mov eax, esi
	neg eax
	jmp loc_46204B

loc_46211A:
	mov edi, edx
	neg edi
	jmp loc_46205C

loc_462123:
	mov eax, ebp
	neg eax
	jmp loc_462066

loc_46212C:
	mov ecx, 24h
	lea esi, [esp+6Ch]
	lea edi, [esp+24h]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	jmp loc_4620D9

loc_46214B:
	mov ecx, 24h
	lea esi, [esp+24h]
	mov edi, [esp+94h]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, ebx
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_462020 endp

sub_462180: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp byte [eax+8Dh], 0
	jnz loc_46218E
	pop ecx
	ret

loc_46218E:
	push esi
	push edx
	push ebx
	mov eax, [ecx+0A8h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov edx, [ecx+9Ch]
	add edx, eax
	mov eax, [ecx+0ACh]
	mov [ecx+9Ch], edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ebx, [ecx+0A0h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov esi, [ecx+0A4h]
	mov [ecx+0A0h], ebx
	add esi, eax
	mov [ecx+0A4h], esi
	pop ebx
	pop edx
	pop esi
	pop ecx
	ret
;sub_462180 endp

sub_462200: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ebp, [esp+20h]
	mov esi, eax
	mov [esp+0Ch], edx
	mov edi, ecx
	mov ecx, [eax+0B4h]
	mov eax, [eax+0B8h]
	mov [esp], eax
	mov eax, [esi+0F4h]
	mov [esp+4], eax
	mov eax, [esi+0F8h]
	mov edx, 1DCh
	mov [esp+8], eax
	mov eax, esi
	call sub_48A01C
	mov dword [esi+18h], 0
	mov dword [esi+24h], 0
	mov byte [esi+8Ch], 0
	mov dword [esi+0A8h], 0
	mov dword [esi+0ACh], 0
	mov dword [esi+0B0h], 0
	mov eax, [esp]
	mov [esi+0B4h], ecx
	mov [esi+0B8h], eax
	mov eax, [esp+4]
	mov [esi+0F4h], eax
	mov eax, [esp+8]
	mov [esi+0F8h], eax
	mov eax, [esp+0Ch]
	mov edx, [esi+0B4h]
	mov [esi], eax
	test edx, edx
	jz loc_46244C

loc_4622AB:
	mov dword [esi+0ECh], 0
	mov dword [esi+0F0h], 0
	mov dword [esi+0FCh], 0
	mov dword [esi+100h], 10000h
	mov dword [esi+104h], 0
	mov ecx, [esi+0F4h]
	mov dword [esi+0E8h], 0
	test ecx, ecx
	jz loc_462477

loc_4622F5:
	mov eax, [esp+24h]
	mov edx, ebp
	mov [esi+10Ch], eax
	mov eax, [esp+28h]
	sar edx, 1Fh
	mov [esi+110h], eax
	mov eax, ebp
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ecx, eax
	imul ecx, eax
	mov eax, [esp+24h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul eax, eax
	add eax, ecx
	mov [esi+108h], ebp
	bsr ecx, eax
	jz loc_462350
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_462350:
	mov edx, eax
	sar edx, 1Fh
	mov [esi+114h], eax
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ecx, eax
	imul ecx, eax
	mov eax, [esp+28h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul eax, eax
	add eax, ecx
	bsr ecx, eax
	jz loc_462395
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_462395:
	mov word [esi+14Ch], 0
	mov byte [esi+8Eh], 0
	mov dword [esi+180h], 1
	mov dword [esi+158h], 0
	mov dword [esi+15Ch], 0
	mov byte [esi+90h], 0
	mov dword [esi+94h], 10000h
	mov dword [esi+0C0h], 0
	mov dword [esi+160h], 0
	mov dword [esi+164h], 0
	mov dword [esi+168h], 0
	mov dword [esi+16Ch], 0
	mov byte [esi+8Fh], 0
	mov word [esi+14Eh], 0
	mov byte [esi+8Dh], 1
	mov dword [esi+98h], 0
	mov dword [esi+150h], 640000h
	mov [esi+114h], eax
	mov eax, [esi+180h]
	mov [esi+184h], eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_46244C:
	mov eax, 10000h
	mov [esi+0B4h], ebx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esi+0B8h], eax
	jmp loc_4622AB

loc_462477:
	mov eax, 10000h
	mov ebx, edi
	mov [esi+0F4h], edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esi+0F8h], eax
	jmp loc_4622F5
;sub_462200 endp

sub_4624B0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov esi, eax
	mov edi, edx
	add eax, 8
	mov [esp+30h], eax
	mov edx, eax
	mov eax, edi
	call sub_44A690
	mov eax, edi
	shl eax, 3
	add eax, edi
	shl eax, 2
	mov [esp+34h], eax
	mov edx, [esp+34h]
	mov eax, dword [dword_5118A4]
	add eax, edx
	mov [esi+6], di
	mov edx, [eax+0Fh]
	sar edx, 18h
	shl edx, 9
	mov [esi+118h], edx
	mov edx, [eax+10h]
	sar edx, 18h
	shl edx, 9
	mov [esi+11Ch], edx
	mov edx, [eax+11h]
	sar edx, 18h
	shl edx, 9
	mov [esi+120h], edx
	mov edx, [eax+9]
	sar edx, 18h
	shl edx, 9
	mov [esi+124h], edx
	mov edx, [eax+0Ah]
	sar edx, 18h
	shl edx, 9
	mov [esi+128h], edx
	mov edx, [eax+0Bh]
	sar edx, 18h
	shl edx, 9
	mov [esi+12Ch], edx
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [esi+130h], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	shl edx, 9
	mov [esi+134h], edx
	mov eax, [eax+0Eh]
	sar eax, 18h
	shl eax, 9
	lea ebp, [esi+118h]
	mov [esi+138h], eax
	mov eax, ebp
	lea edi, [esi+124h]
	call sub_45E760
	mov eax, edi
	call sub_45E760
	lea eax, [esi+130h]
	mov edx, esp
	call sub_45E760
	mov eax, ebp
	call sub_49D890
	mov edx, [esp]
	mov eax, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebp, eax
	mov eax, [ebx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebp, eax
	mov eax, [ebx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebp, eax
	mov [esp+24h], ebp
	mov edx, [esp+0Ch]
	mov eax, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebp, eax
	mov eax, [ebx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebp, eax
	mov eax, [ebx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	add ebp, eax
	mov eax, [ebx]
	mov [esp+28h], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebp, eax
	mov eax, [ebx+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebp, eax
	mov eax, [ebx+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [esp+34h]
	add ebp, eax
	mov eax, dword [dword_5118A4]
	add eax, ebx
	mov ebx, [esp+24h]
	mov edx, [eax]
	add ebx, edx
	mov [esi+9Ch], ebx
	mov ebx, [esp+28h]
	mov edx, [eax+4]
	add ebx, edx
	mov [esi+0A0h], ebx
	mov eax, [eax+8]
	mov [esp+2Ch], ebp
	lea edx, [eax+ebp]
	mov eax, esi
	mov [esi+0A4h], edx
	call sub_4628B0
	mov eax, esi
	call sub_462FA0
	mov edx, ecx
	mov eax, esi
	call sub_4627F0
	mov edx, ecx
	mov eax, esi
	mov ebp, [esp+34h]
	call sub_462730
	mov eax, dword [dword_5118A4]
	add eax, ebp
	lea ebx, [esi+13Ch]
	mov eax, [eax+4]
	mov edx, edi
	mov [esi+154h], eax
	mov eax, esi
	call sub_462C70
	mov [esi+15Ch], eax
	mov edx, [esi+0A0h]
	mov dword [esi+15Ch], 0
	sub edx, eax
	mov ah, [esi+8Ch]
	mov [esi+0A0h], edx
	test ah, ah
	jz loc_46270E
	mov dword [esi+180h], 1

loc_4626F8:
	mov eax, [esi+180h]
	and eax, 3Fh
	mov [esi+184h], eax
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	ret

loc_46270E:
	mov edx, 1
	mov eax, [esp+30h]
	call sub_449AE0
	mov [esi+180h], eax
	jmp loc_4626F8
;sub_4624B0 endp

sub_462730: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	test edx, edx
	jnz loc_462752
	mov ecx, 9
	lea edi, [esi+188h]
	lea esi, [esi+118h]
	rep movsd
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_462752:
	push ebx
	lea edx, [esi+118h]
	mov esi, [edx]
	mov ecx, esi
	mov [eax+188h], esi
	neg ecx
	mov [eax+188h], ecx
	mov esi, [edx+4]
	mov ebx, esi
	mov [eax+18Ch], esi
	neg ebx
	mov [eax+18Ch], ebx
	mov esi, [edx+8]
	mov [eax+190h], esi
	neg esi
	mov [eax+190h], esi
	mov esi, [edx+0Ch]
	mov [eax+194h], esi
	mov esi, [edx+10h]
	mov [eax+198h], esi
	mov esi, [edx+14h]
	mov [eax+19Ch], esi
	mov esi, [edx+18h]
	mov edi, esi
	mov [eax+1A0h], esi
	neg edi
	mov [eax+1A0h], edi
	mov esi, [edx+1Ch]
	mov ebp, esi
	mov [eax+1A4h], esi
	neg ebp
	mov [eax+1A4h], ebp
	add eax, 188h
	mov edx, [edx+20h]
	mov [eax+20h], edx
	neg edx
	mov [eax+20h], edx
	pop ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_462730 endp

sub_4627F0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	test edx, edx
	jnz loc_462812
	mov ecx, 9
	lea edi, [esi+0C4h]
	lea esi, [esi+118h]
	rep movsd
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_462812:
	push ebx
	lea edx, [esi+118h]
	mov esi, [edx]
	mov ecx, esi
	mov [eax+0C4h], esi
	neg ecx
	mov [eax+0C4h], ecx
	mov esi, [edx+4]
	mov ebx, esi
	mov [eax+0C8h], esi
	neg ebx
	mov [eax+0C8h], ebx
	mov esi, [edx+8]
	mov [eax+0CCh], esi
	neg esi
	mov [eax+0CCh], esi
	mov esi, [edx+0Ch]
	mov [eax+0D0h], esi
	mov esi, [edx+10h]
	mov [eax+0D4h], esi
	mov esi, [edx+14h]
	mov [eax+0D8h], esi
	mov esi, [edx+18h]
	mov edi, esi
	mov [eax+0DCh], esi
	neg edi
	mov [eax+0DCh], edi
	mov esi, [edx+1Ch]
	mov ebp, esi
	mov [eax+0E0h], esi
	neg ebp
	mov [eax+0E0h], ebp
	add eax, 0C4h
	mov edx, [edx+20h]
	mov [eax+20h], edx
	neg edx
	mov [eax+20h], edx
	pop ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4627F0 endp

sub_4628B0: ;SUBROUTINE
	push ecx
	push ebp
	mov ecx, eax
	cmp byte [eax+8Dh], 0
	jnz loc_4628C0
	pop ebp
	pop ecx
	ret

loc_4628C0:
	push edi
	push esi
	mov eax, ecx
	call sub_462950
	cmp dword [ecx+17Ch], 0
	jz loc_462904
	cmp dword [ecx+18h], 0
	jnz loc_462904

loc_4628D8:
	mov esi, [ecx+144h]
	push esi
	mov edi, [ecx+140h]
	push edi
	mov ebp, [ecx+13Ch]
	push ebp
	mov eax, [ecx]
	push eax
	push aNewtonUriXDDDD ; "NEWTON-URI X (%d) [%d %d %d]"
	push 1
	add esp, 18h
	pop esi
	pop edi
	pop ebp
	pop ecx
	ret

loc_462904:
	mov eax, ecx
	call sub_4633A0
	cmp word [ecx+76h], 0
	jz loc_462919
	mov eax, ecx
	call sub_462FA0

loc_462919:
	cmp byte [ecx+8Ch], 0
	jnz loc_4628D8
	push edx
	mov edx, 1
	lea eax, [ecx+8]
	call sub_449AE0
	mov [ecx+180h], eax
	and eax, 3Fh
	mov [ecx+184h], eax
	pop edx
	jmp loc_4628D8
;sub_4628B0 endp

sub_462950: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 0Ch
	mov ecx, eax
	cmp dword [dword_511E40], 2
	jg loc_462BD6
	mov edx, dword [dword_51220C]
	mov edx, dword dword_511D08[edx*4]
	mov eax, [eax+9Ch]
	sub eax, [edx+9Ch]
	test eax, eax
	jle loc_462ADC

loc_462987:
	mov ebx, dword [dword_51220C]
	mov ebx, dword dword_511D08[ebx*4]
	mov edx, eax
	mov eax, [ecx+0A4h]
	sub eax, [ebx+0A4h]
	test eax, eax
	jle loc_462AE3

loc_4629AA:
	cmp edx, eax
	jle loc_462AEA
	sar eax, 2

loc_4629B5:
	add eax, edx
	mov [ecx+88h], eax
	mov eax, dword [dword_51220C]
	mov edx, dword dword_511D08[eax*4]
	mov edx, [edx+14h]
	mov eax, [ecx+14h]
	call sub_462F70
	mov edi, dword [dword_511E40]
	mov ebx, eax
	cmp edi, 2
	jnz loc_462A7D
	mov eax, 1
	sub eax, dword [dword_51220C]
	mov edx, dword dword_511D08[eax*4]
	mov eax, [ecx+9Ch]
	sub eax, [edx+9Ch]
	test eax, eax
	jle loc_462AF2

loc_462A0B:
	push esi
	mov edi, dword [dword_51220C]
	mov edx, eax
	mov eax, 1
	sub eax, edi
	mov esi, dword dword_511D08[eax*4]
	mov eax, [ecx+0A4h]
	sub eax, [esi+0A4h]
	test eax, eax
	jle loc_462AF9

loc_462A36:
	cmp edx, eax
	jle loc_462B00
	sar eax, 2

loc_462A41:
	add eax, edx
	mov edx, [ecx+88h]
	cmp eax, edx
	jle loc_462A4F
	mov eax, edx

loc_462A4F:
	mov esi, dword [dword_51220C]
	mov [ecx+88h], eax
	mov eax, 1
	sub eax, esi
	mov edx, dword dword_511D08[eax*4]
	mov edx, [edx+14h]
	mov eax, [ecx+14h]
	call sub_462F70
	cmp eax, ebx
	jle loc_462B08

loc_462A7C:
	pop esi

loc_462A7D:
	shl ebx, 12h
	mov edi, [ecx+88h]
	cmp ebx, edi
	jge loc_462A8C
	mov ebx, edi

loc_462A8C:
	mov [ecx+88h], ebx
	cmp ebx, 0F40000h
	jle loc_462B0F
	cmp byte [ecx+8Ch], 1
	jz loc_462AB9
	mov dword [ecx+180h], 1
	mov eax, [ecx+180h]
	mov [ecx+184h], eax

loc_462AB9:
	mov dword [ecx+0E8h], 0
	mov dword [ecx+0F0h], 0
	mov byte [ecx+8Ch], 1
	add esp, 0Ch
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_462ADC:
	neg eax
	jmp loc_462987

loc_462AE3:
	neg eax
	jmp loc_4629AA

loc_462AEA:
	sar edx, 2
	jmp loc_4629B5

loc_462AF2:
	neg eax
	jmp loc_462A0B

loc_462AF9:
	neg eax
	jmp loc_462A36

loc_462B00:
	sar edx, 2
	jmp loc_462A41

loc_462B08:
	mov ebx, eax
	jmp loc_462A7C

loc_462B0F:
	cmp byte [ecx+8Ch], 0
	jz loc_462BC7
	mov eax, ecx
	mov byte [ecx+8Ch], 0
	call sub_4633A0
	mov eax, ecx
	call sub_462FA0
	mov eax, ecx
	mov edx, esp
	call sub_462E60
	mov eax, ecx
	call sub_462EA0
	mov dword [ecx+180h], 1
	mov dword [ecx+158h], 0
	mov [ecx+154h], eax
	mov eax, [ecx+180h]
	mov [ecx+184h], eax
	lea ebx, [ecx+13Ch]
	mov edx, [ecx+10Ch]
	mov eax, [ecx+154h]
	mov dword [ecx+160h], 0
	add eax, edx
	lea edx, [ecx+124h]
	mov [ecx+0A0h], eax
	mov eax, ecx
	mov dword [ecx+164h], 0
	call sub_462C70
	mov [ecx+15Ch], eax
	mov ebx, [ecx+0A0h]
	mov dword [ecx+15Ch], 0
	sub ebx, eax
	mov eax, ecx
	mov [ecx+0A0h], ebx
	call sub_451FA0

loc_462BC7:
	mov byte [ecx+8Ch], 0
	add esp, 0Ch
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_462BD6:
	mov byte [eax+8Ch], 0
	mov dword [eax+88h], 0
	add esp, 0Ch
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_462950 endp

sub_462BF0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov esi, edx
	mov eax, [eax+9Ch]
	sub eax, [ebx]
	mov edi, [ebx+4]
	mov [esp], eax
	mov eax, [ecx+0A0h]
	sub eax, edi
	mov ebp, [ebx+8]
	mov [esp+4], eax
	mov eax, [ecx+0A4h]
	sub eax, ebp
	mov edx, [esp]
	mov [esp+8], eax
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+10Ch]
	add eax, ebx
	sub eax, edx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_462BF0 endp

sub_462C70: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ecx, eax
	mov esi, edx
	mov edi, [eax+108h]
	mov edx, [eax+0C4h]
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+0C8h]
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebp, eax
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov [esp], eax
	mov eax, [ecx+10Ch]
	mov edx, [ecx+0D0h]
	mov [esp+18h], eax
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+0D4h]
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebp, eax
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	add eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	mov eax, [ecx+110h]
	mov edx, [ecx+0DCh]
	mov [esp+18h], eax
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+0E0h]
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebp, eax
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+18h]
	add eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	test edi, edi
	jl loc_462E3A
	mov ebp, 0FFFFFFFFh

loc_462D91:
	cmp dword [esp+4], 0
	jl loc_462E44
	mov edi, 0FFFFFFFFh

loc_462DA1:
	cmp dword [esp+8], 0
	jl loc_462E4E
	mov dword [esp+1Ch], 0FFFFFFFFh

loc_462DB4:
	mov eax, [ecx+9Ch]
	mov edx, [ebx]
	sub eax, edx
	mov [esp+0Ch], eax
	mov edx, [ebx+4]
	mov eax, [ecx+0A0h]
	sub eax, edx
	mov [esp+10h], eax
	mov eax, [ebx+8]
	imul ebp, [esp]
	mov ecx, [ecx+0A4h]
	mov edx, [esp+0Ch]
	sub ecx, eax
	mov eax, [esi]
	mov [esp+14h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ecx, eax
	mov eax, [esi+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	imul edi, [esp+4]
	mov esi, [esp+8]
	add ecx, eax
	mov eax, [esp+1Ch]
	imul eax, esi
	add ebp, edi
	add eax, ebp
	add eax, ecx
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_462E3A:
	mov ebp, 1
	jmp loc_462D91

loc_462E44:
	mov edi, 1
	jmp loc_462DA1

loc_462E4E:
	mov dword [esp+1Ch], 1
	jmp loc_462DB4
;sub_462C70 endp

sub_462E60: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_46AEF0
	test eax, eax
	jnz loc_462E6E
	pop edx
	ret

loc_462E6E:
	mov dword [edx+160h], 0
	mov eax, edx
	mov dword [edx+164h], 0
	call sub_4633A0
	mov eax, edx
	call sub_462FA0
	pop edx
	ret
;sub_462E60 endp

sub_462EA0: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, [eax+124h]
	mov [edx], ebx
	mov ebx, [eax+128h]
	mov [edx+4], ebx
	mov ebx, [eax+12Ch]
	mov ecx, [edx+4]
	mov [edx+8], ebx
	cmp ecx, 1999h
	jg loc_462ECF
	mov eax, 83000000h
	pop ecx
	pop ebx
	ret

loc_462ECF:
	lea ebx, [eax+13Ch]
	add eax, 9Ch
	call sub_462EF0
	pop ecx
	pop ebx
	ret
;sub_462EA0 endp

sub_462EF0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov ecx, edx
	mov esi, ebx
	mov ebx, [edx+4]
	test ebx, ebx
	jle loc_462F5B
	mov eax, ebx

loc_462F03:
	cmp eax, 0Ah
	jge loc_462F0D
	mov ebx, 0Ah

loc_462F0D:
	mov eax, [edi]
	sub eax, [esi]
	mov ebp, [ecx]
	mov edx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [edi+8]
	mov edi, [esi+8]
	mov eax, [ecx+8]
	sub edx, edi
	neg ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebp, eax
	mov eax, ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	add eax, [esi+4]
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_462F5B:
	mov eax, ebx
	neg eax
	jmp loc_462F03
;sub_462EF0 endp

sub_462F70: ;SUBROUTINE
	push ebx
	push ecx
	cmp eax, edx
	jle loc_462F7C
	mov ecx, edx
	mov edx, eax
	mov eax, ecx

loc_462F7C:
	mov ebx, dword [dword_5118A0]
	mov ecx, edx
	sub ebx, edx
	sub ecx, eax
	add eax, ebx
	cmp ecx, eax
	jle loc_462F91
	pop ecx
	pop ebx
	ret

loc_462F91:
	mov eax, ecx
	pop ecx
	pop ebx
	ret
;sub_462F70 endp

sub_462FA0: ;SUBROUTINE
	push ecx
	push ebp
	mov ecx, eax
	mov ah, [eax+8Dh]
	mov ebp, 1
	test ah, ah
	jz loc_463170
	push edi
	push esi
	push edx
	push ebx
	cmp byte [ecx+8Ch], 0
	jz loc_463173
	xor ebp, ebp

loc_462FCA:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx

loc_462FE1:
	mov esi, eax
	lea edi, [ecx+13Ch]
	movsd
	movsd
	movsd
	test ebp, ebp
	jz loc_463269
	jz loc_46319F
	cmp dword [ecx+18h], 0
	jz loc_46319F
	mov eax, [ecx+20h]
	movsx eax, word [eax]
	add eax, eax

loc_46300C:
	mov [ecx+124h], eax
	test ebp, ebp
	jz loc_4631C0
	cmp dword [ecx+18h], 0
	jz loc_4631C0
	mov eax, [ecx+20h]
	mov eax, [eax]
	sar eax, 10h
	add eax, eax

loc_46302E:
	mov [ecx+128h], eax
	test ebp, ebp
	jz loc_4631E1
	cmp dword [ecx+18h], 0
	jz loc_4631E1
	mov eax, [ecx+20h]
	mov eax, [eax+2]
	sar eax, 10h
	add eax, eax

loc_463051:
	mov [ecx+12Ch], eax
	test ebp, ebp
	jz loc_463204
	cmp dword [ecx+18h], 0
	jz loc_463204
	mov eax, [ecx+20h]
	mov eax, [eax+4]
	sar eax, 10h
	add eax, eax

loc_463074:
	mov [ecx+130h], eax
	test ebp, ebp
	jz loc_463225
	cmp dword [ecx+18h], 0
	jz loc_463225
	mov eax, [ecx+20h]
	mov eax, [eax+6]
	sar eax, 10h
	add eax, eax

loc_463097:
	mov [ecx+134h], eax
	test ebp, ebp
	jz loc_463246
	cmp dword [ecx+18h], 0
	jz loc_463246
	mov eax, [ecx+20h]
	mov eax, [eax+8]
	sar eax, 10h
	add eax, eax

loc_4630BA:
	mov [ecx+138h], eax
	mov edx, eax
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+134h]
	mov eax, [ecx+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+130h]
	sub ebp, eax
	mov eax, [ecx+12Ch]
	mov [ecx+118h], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+138h]
	mov eax, [ecx+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+134h]
	sub ebp, eax
	mov eax, [ecx+124h]
	mov [ecx+11Ch], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, [ecx+130h]
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebp, eax
	mov [ecx+120h], ebp

loc_46315E:
	mov eax, [ecx+14h]
	call sub_463310
	mov [ecx+148h], eax
	pop ebx
	pop edx
	pop esi
	pop edi

loc_463170:
	pop ebp
	pop ecx
	ret

loc_463173:
	mov ebx, 0ABh
	mov edx, aCNfs2seGameC_9 ; "c:\\nfs2se\\game\\common\\newton.c"
	lea eax, [ecx+8]
	call sub_44A930
	test eax, eax
	jz loc_462FCA
	cmp dword [ecx+18h], 0
	jz loc_462FCA
	lea eax, [ecx+28h]
	jmp loc_462FE1

loc_46319F:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+9]
	sar eax, 18h
	shl eax, 9
	jmp loc_46300C

loc_4631C0:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+0Ah]
	sar eax, 18h
	shl eax, 9
	jmp loc_46302E

loc_4631E1:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov eax, [edx+eax+0Bh]
	sar eax, 18h
	shl eax, 9
	jmp loc_463051

loc_463204:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+0Ch]
	sar eax, 18h
	shl eax, 9
	jmp loc_463074

loc_463225:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov eax, [edx+eax*4+0Dh]
	sar eax, 18h
	shl eax, 9
	jmp loc_463097

loc_463246:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov eax, [edx+eax+0Eh]
	sar eax, 18h
	shl eax, 9
	jmp loc_4630BA

loc_463269:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	add eax, edx
	mov edx, [eax+0Fh]
	sar edx, 18h
	shl edx, 9
	mov [ecx+118h], edx
	mov edx, [eax+10h]
	sar edx, 18h
	shl edx, 9
	mov [ecx+11Ch], edx
	mov edx, [eax+11h]
	sar edx, 18h
	shl edx, 9
	mov [ecx+120h], edx
	mov edx, [eax+9]
	sar edx, 18h
	shl edx, 9
	mov [ecx+124h], edx
	mov edx, [eax+0Ah]
	sar edx, 18h
	shl edx, 9
	mov [ecx+128h], edx
	mov edx, [eax+0Bh]
	sar edx, 18h
	shl edx, 9
	mov [ecx+12Ch], edx
	mov edx, [eax+0Ch]
	sar edx, 18h
	shl edx, 9
	mov [ecx+130h], edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	shl edx, 9
	mov [ecx+134h], edx
	mov eax, [eax+0Eh]
	sar eax, 18h
	shl eax, 9
	mov [ecx+138h], eax
	jmp loc_46315E
;sub_462FA0 endp

sub_463310: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, eax
	mov ecx, dword [dword_5118A0]
	inc eax
	cmp eax, ecx
	jl loc_463324
	sub eax, ecx

loc_463324:
	mov ecx, eax
	shl eax, 3
	add eax, ecx
	mov ecx, dword [dword_5118A4]
	shl eax, 2
	lea esi, [ecx+eax]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	add ecx, eax
	mov edi, dword [dword_5118A0]
	mov ebx, [esi]
	mov esi, [ecx]
	lea eax, [edx+1]
	sub ebx, esi
	cmp eax, edi
	jl loc_46335A
	sub eax, edi

loc_46335A:
	mov ecx, eax
	shl eax, 3
	add eax, ecx
	mov ecx, dword [dword_5118A4]
	shl eax, 2
	lea esi, [ecx+eax]
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	add ecx, eax
	mov eax, [esi+8]
	mov edx, [ecx+8]
	sub eax, edx
	mov edx, eax
	mov eax, ebx
	call sub_49D7E0
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_463310 endp

sub_4633A0: ;SUBROUTINE
	push ebx
	push edx
	xor ebx, ebx
	mov edx, 1
	mov bl, [eax+8Ch]
	sub edx, ebx
	mov ebx, edx
	lea edx, [eax+8]
	add eax, 9Ch
	call sub_44A6D0
	pop edx
	pop ebx
	ret
;sub_4633A0 endp

main_: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	xor ecx, ecx
	call sub_430200
	call sub_47D400
	call sub_46F660
	mov dword [dword_4DABFC], ecx

loc_463437:
	test ebp, ebp
	jz loc_46358C
	cmp ecx, 1
	jz loc_46344B

; loc_463444:
	call sub_408020 ;Funkcja menu?
	mov ebp, eax

loc_46344B:
	test ebp, ebp
	jz loc_463437

	xor eax, eax ;ARGC
	xor edx, edx ;ARGV[]
	call sub_45EF70

;	xor ecx, ecx
	call sub_405DD4
;	mov dword_4D76B0, ecx
	call sub_463680
;	cmp dword_4D76B0, 0
;	jnz loc_463444 ;To sypie program przy utracie połączenia przy ładowaniu trasy
	call sub_4287F0

loc_463478:
	mov eax, dword [dword_540F20]
	test eax, eax
	jz loc_46350A
	xor ecx, ecx
	mov dword [dword_540F20], ecx
	call sub_470AF0
	call sub_4726E0
	call sub_449540
	call sub_44C840
	call sub_441CC0
	mov ebx, dword [dword_4D5A2C]
	test ebx, ebx
	jz loc_463500
	mov eax, dword [dword_51221C]
	mov edx, ebx
	call sub_4764B0
	mov byte [byte_4D76B4], 1

loc_4634C3:
	xor eax, eax
	call sub_483EB0
	cmp dword [dword_512208], 1
	jle loc_4634F1
	mov edx, 13h
	mov eax, 1400h
	call sub_463930
	mov edx, 14h
	mov eax, 0A00h
	call sub_463930

loc_4634F1:
	call sub_473B80
	call sub_471B80 ;Funkcja gry
	jmp loc_463478

loc_463500:
	xor ah, ah
	mov byte [byte_4D76B4], ah
	jmp loc_4634C3

loc_46350A:
	push eax
	push 4
	call sub_497738
	mov edx, 1
	mov eax, edx
	call sub_428830
	call sub_446310
	call sub_4762E0
	call sub_4635D0
	call sub_476250
	mov eax, 12Ch
	call sub_4769A0
	cmp dword [dword_4D5A08], 0
	jnz loc_463566
	mov dword [dword_4D5A08], 1

loc_463550:
	cmp word [word_4D21A4], 1
	jz loc_463570
	call sub_407E50
	mov ecx, eax
	jmp loc_463437

loc_463566:
	xor ecx, ecx
	mov dword [dword_4D5A08], ecx
	jmp loc_463550

loc_463570:
	xor ebx, ebx
	xor eax, eax
	xor ecx, ecx
	mov word [word_4D21A4], bx
	mov dword [dword_512214], eax
	mov dword [dword_4D5EF8], eax
	jmp loc_463437

loc_46358C:
	push 2
	call sub_497680
	push ebp
	push 4
	call sub_497738
	call sub_49769C
	call sub_4976B8
	call sub_48561C
	call sub_476C40
	call sub_4301B0
	pop ebp
	pop ecx
	pop ebx
	ret
;main_ endp

sub_4635D0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	call sub_46F670
	cmp dword [dword_4D5EF8], 0
	jz loc_463627

loc_4635E2:
	cmp dword [dword_512214], 0
	jnz loc_46365A
	xor edx, edx

loc_4635ED:
	mov edi, dword [dword_512260]
	movsx eax, dx
	cmp eax, edi
	jge loc_46365A
	mov esi, dword dword_511B48[eax*4]
	imul eax, 684h
	mov edi, dword [dword_4D5EF8]
	mov ecx, 684h
	add edi, eax
	inc edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	jmp loc_4635ED

loc_463627:
	push ebx
	mov ecx, aCNfs2seGameC_2 ; "c:\\nfs2se\\game\\common\\nfs2.c"
	mov ebx, 2D3h
	mov edx, 4E30h
	mov eax, aPasstats ; "passtats"
	mov dword [dword_4DB1DC], ebx
	mov ebx, 20h
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov dword [dword_4D5EF8], eax
	pop ebx
	jmp loc_4635E2

loc_46365A:
	call sub_470AC0
	call sub_453780
	call sub_472620
	call sub_45B670
	call sub_4490A0
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_4635D0 endp

sub_463680: ;SUBROUTINE
	push ecx
	push edx
	call sub_45B380
	call sub_470BE0
	call sub_463850
	xor eax, eax
	call sub_47D5E0
	call sub_473CE0
	call sub_47F160
	call sub_447040
	mov edx, dword [dword_512208]
	cmp edx, 1
	jnz loc_4636BE
	mov eax, edx
	call sub_47D5E0

loc_4636BE:
	call sub_4637B0
	call sub_44F910
	call sub_47CBB0
	call sub_42E910
	mov eax, 2
	call sub_47D5E0
;	mov ecx, dword_512208
;	test ecx, ecx
;	jz loc_4636FE
;	cmp ecx, 1
;	jz loc_4636FE
;	cmp word_51345A, 0
;	jnz loc_46379B

; loc_4636FE:
	mov eax, 1
	call sub_47D4C0
	mov eax, 2
	call sub_47D4C0
	call sub_476250
	mov eax, 64h
	call sub_4769A0
	call sub_4537A0
	call sub_4451C0
	call sub_46F710
	mov eax, dword [dword_500D28]
	call sub_4848FC
	call sub_47CB90
	mov eax, 4
	call sub_47D4C0
	call sub_449120
	mov eax, 6
	call sub_47D4C0
	call sub_45B680
	mov eax, 7
	call sub_47D4C0
	call sub_472750
	call sub_46F6C0
	call sub_47A270
	call sub_49F978
	cmp dword [dword_512208], 1
	jle loc_463793
	call sub_472D10

loc_463793:
	call sub_473CA0
	pop edx
	pop ecx
	ret

; loc_46379B:
;	mov dword_4D76B0, 1
;	pop edx
;	pop ecx
;	ret
;sub_463680 endp

sub_4637B0: ;SUBROUTINE
	push edx
	sub esp, 100h
	mov edx, dword [dword_513498]
	push edx
	push aSfxtext_fsh ; "%sfxtext.fsh"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	xor edx, edx
	mov eax, esp
	call sub_486F40
	mov dword [dword_500D28], eax
	mov dword [dword_51206C], eax
	mov dword [dword_55E3BC], eax
	mov dword [dword_55E430], eax
	mov dword [dword_4F227C], eax
	mov dword [dword_4F2280], eax
	mov dword [dword_512AAC], eax
	add esp, 100h
	pop edx
	ret
;sub_4637B0 endp

sub_463810: ;SUBROUTINE
	call sub_470AF0
	call sub_4726E0
	call sub_449540
	call sub_44C840
	jmp sub_441CC0
;sub_463810 endp

sub_463830: ;SUBROUTINE
	push ebx
	push edx
	mov dl, [eax]
	inc dl
	mov bl, [eax+2]
	mov [eax], dl
	inc bl
	mov dh, [eax+1]
	mov [eax+2], bl
	inc dh
	mov [eax+1], dh
	pop edx
	pop ebx
	ret
;sub_463830 endp

sub_463850: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov edx, dword_4D76D0
	mov edi, dword_513058
	lea ecx, [edx+38h]

loc_463861:
	mov esi, edx
	add edx, 4
	push edi

loc_463867:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_46387F
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_463867

loc_46387F:
	pop edi
	cmp edx, ecx
	jnz loc_463861
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_463850 endp

sub_463890: ;SUBROUTINE
	jmp sub_4301B0
;sub_463890 endp

sub_4638A0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp word [word_513458], 0
	jnz loc_4638C0
	cmp word [edx+2], 17h
	jnz loc_463903
	cmp word [word_51345A], 0
	jz loc_4638EC
	pop ecx
	ret

loc_4638C0:
	mov eax, dword [dword_4D770C]
	call sub_489F48
	mov eax, ecx
	call sub_463E00
	movsx ecx, ax
	mov ax, [edx+2]
	mov word (dword_513436+2)[ecx*2], ax
	mov eax, dword [dword_4D770C]
	call sub_489F60
	pop ecx
	ret

loc_4638EC:
	push edi
	mov edi, 1
	mov word [word_51345C], di
	mov word [word_51345A], di
	pop edi
	pop ecx
	ret

loc_463903:
	mov eax, dword [dword_4D770C]
	call sub_489F48
	mov ax, [edx+2]
	mov word [dword_513428+2], ax
	mov eax, dword [dword_4D770C]
	call sub_489F60
	pop ecx
	ret
;sub_4638A0 endp

sub_463930: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov [esp+8], dl
	cmp byte [byte_51345E], 0
	jz loc_4639C5
	cmp word [word_51345A], 0
	jnz loc_4639C5
	test ecx, ecx
	jnz loc_4639CE

loc_463959:
	movsx ax, byte [esp+8]
	mov dl, 3
	mov bx, word [word_513458]
	mov [esp+2], ax
	mov [esp], dl
	test bx, bx
	jnz loc_4639D7
	xor ebx, ebx

loc_463977:
	mov edx, [esp+5]
	mov eax, dword [dword_513428]
	sar edx, 18h
	sar eax, 10h
	cmp eax, edx
	jnz loc_463AFC
	mov eax, dword [dword_4D770C]
	call sub_489F48
	mov eax, dword [dword_513428]
	sar eax, 10h
	cmp eax, edx
	jnz loc_4639AD
	xor ecx, ecx
	mov word [dword_513428+2], cx

loc_4639AD:
	mov ebx, 4
	mov eax, dword [dword_4D770C]
	mov edx, esp
	call sub_489F60
	xor eax, eax
	call sub_464070

loc_4639C5:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4639CE:
	mov eax, dword [dword_5637F4]
	add ecx, eax
	jmp loc_463959

loc_4639D7:
	mov ebx, 4
	mov edx, esp
	xor eax, eax
	mov ebp, 4
	call sub_464070
	mov edx, 1
	mov edi, 2
	mov [esp+4], edx

loc_4639F8:
	mov eax, dword [dword_513408]
	mov edx, [esp+4]
	sar eax, 10h
	cmp eax, edx
	jle loc_4639C5
	mov eax, dword dword_513080[ebp]
	cmp dword [eax+4], 0
	jz loc_463A78
	cmp word word_513448[edi], 0
	jnz loc_463A78
	mov ebx, edi
	mov esi, ebp

loc_463A22:
	mov edx, [esp+5]
	mov eax, dword dword_513436[ebx]
	sar edx, 18h
	sar eax, 10h
	cmp eax, edx
	jnz loc_463A83

loc_463A36:
	mov eax, dword [dword_4D770C]
	mov edx, [esp+5]
	call sub_489F48
	mov eax, dword dword_513436[edi]
	sar edx, 18h
	sar eax, 10h
	cmp eax, edx
	jnz loc_463A5D
	xor eax, edx
	mov word (dword_513436+2)[edi], ax

loc_463A5D:
	mov eax, dword [dword_4D770C]
	call sub_489F60

loc_463A67:
	mov ebx, [esp+4]
	add edi, 2
	inc ebx
	add ebp, 4
	mov [esp+4], ebx
	jmp loc_4639F8

loc_463A78:
	xor edx, edx
	mov word (dword_513436+2)[edi], dx
	jmp loc_463A67

loc_463A83:
	xor eax, eax
	call sub_483EB0
	cmp word [word_51345A], 0
	jnz loc_463AAB
	mov eax, dword dword_513080[esi]
	cmp dword [eax+4], 0
	jnz loc_463ABD
	xor esi, esi
	mov word (dword_513436+2)[ebx], si
	jmp loc_463A36

loc_463AAB:
	xor edx, edx
	mov word (dword_513436+2)[ebx], dx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_463ABD:
	test ecx, ecx
	jz loc_463A22
	mov eax, dword [dword_5637F4]
	cmp eax, ecx
	jle loc_463A22
	xor edx, edx
	mov eax, dword dword_513080[esi]
	mov word (dword_513436+2)[ebx], dx
	mov ebx, 17h
	mov edx, esp
	mov [esp+2], bx
	mov ebx, 4
	call sub_464070
	jmp loc_463A36

loc_463AFC:
	mov eax, ebx
	call sub_483EB0
	cmp bx, word [word_51345A]
	jnz loc_463B4E
	cmp ebx, dword [dword_5130A4]
	jz loc_463B4E
	test ecx, ecx
	jz loc_463977
	mov eax, dword [dword_5637F4]
	cmp eax, ecx
	jle loc_463977
	mov edi, 1
	xor edx, edx
	mov word [word_51345C], di
	mov word [dword_513428+2], dx
	mov word [word_51345A], di
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_463B4E:
	mov ebx, 1
	xor esi, esi
	mov word [word_51345C], bx
	mov word [dword_513428+2], si
	mov word [word_51345A], bx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_463930 endp

sub_463B80: ;SUBROUTINE
	cmp word [word_513424], 0
	jnz loc_463B8D
	xor eax, eax
	ret

loc_463B8D:
	push ebx
	mov eax, dword [dword_4D7708]
	call sub_489F48
	xor ebx, ebx
	mov eax, dword [dword_4D7708]
	mov word [word_513424], bx
	call sub_489F60
	mov eax, 1
	pop ebx
	ret
;sub_463B80 endp

sub_463BC0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov esi, edx
	cmp dword [byte_513420], 0
	jnz loc_463C1F

loc_463BCE:
	xor eax, eax

loc_463BD0:
	add eax, 2
	xor edx, edx
	mov word word_513446[eax], dx
	cmp eax, 10h
	jnz loc_463BD0
	mov ecx, 60h
	mov edi, byte_5133C0
	mov ebx, 1
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, dword [byte_513420]
	mov word [word_513424], bx
	test ecx, ecx
	jnz loc_463C2B
	mov dword [byte_513420], 1
	pop edi
	pop esi
	pop ecx
	ret

loc_463C1F:
	mov eax, dword [dword_4D7708]
	call sub_489F48
	jmp loc_463BCE

loc_463C2B:
	mov eax, dword [dword_4D7708]
	call sub_489F60
	mov dword [byte_513420], 1
	pop edi
	pop esi
	pop ecx
	ret
;sub_463BC0 endp

sub_463C50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 64h
	mov ebx, 1
	xor ah, ah
	xor ecx, ecx
	xor edx, edx
	mov byte [byte_5133C0], ah
	mov word [word_513424], cx
	mov word [dword_51340C], dx
	mov word [dword_513408+2], bx
	mov ecx, dword_513378
	mov al, byte [byte_51345F]
	xor edx, edx
	mov byte [byte_51341E], al

loc_463C90:
	cmp dword dword_5130A4[edx], 0
	jnz loc_463D4D

loc_463C9D:
	add edx, 68h
	add ecx, 9
	cmp edx, 2D8h
	jnz loc_463C90
	mov ecx, dword_5130A0
	xor edi, edi
	mov edx, 2
	mov word [word_513448], di
	mov word [dword_51340C+2], di

loc_463CC5:
	add edx, 2
	xor ebx, ebx
	mov eax, ecx
	mov word word_513446[edx], bx
	call sub_463E00
	add ecx, 68h
	mov word dword_51340C[edx], ax
	cmp edx, 10h
	jnz loc_463CC5
	mov esi, 8
	mov ecx, 60h
	mov edi, esp
	mov [esp+60h], esi
	mov esi, byte_5133C0
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, 1
	mov eax, dword [dword_4D7708]
	mov ecx, 4
	call sub_489F48
	mov [esp+60h], edi
	mov edi, 60h

loc_463D29:
	mov eax, dword [dword_513408]
	mov ebp, [esp+60h]
	sar eax, 10h
	cmp eax, ebp
	jg loc_463D95
	mov eax, dword [dword_4D7708]
	call sub_489F60
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_463D4D:
	mov eax, dword [dword_513408]
	mov ebx, dword_5130A0
	sar eax, 10h
	add ebx, edx
	mov edi, byte_5133C1
	mov dword dword_513080[eax*4], ebx
	lea eax, [eax+eax*8]
	mov esi, ecx
	add edi, eax
	push edi

loc_463D70:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_463D88
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_463D70

loc_463D88:
	pop edi
	inc word [dword_513408+2]
	jmp loc_463C9D

loc_463D95:
	mov eax, [esp+60h]
	mov edx, esp
	mov ebx, edi
	mov [esp+4Ch], ax
	mov eax, dword dword_513080[ecx]
	call sub_464070
	lea eax, [ebp+1]
	add ecx, 4
	mov [esp+60h], eax
	jmp loc_463D29
;sub_463C50 endp

sub_463DC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	movsx ebx, si
	xor eax, eax
	xor edx, edx

loc_463DCD:
	mov ecx, dword dword_51340C[eax]
	sar ecx, 10h
	cmp ecx, ebx
	jz loc_463DED
	add eax, 2
	inc edx
	cmp eax, 10h
	jl loc_463DCD
	mov eax, 0FFFFFFFFh
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_463DED:
	mov eax, edx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_463DC0 endp

sub_463E00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	mov edx, 4
	mov eax, 1

loc_463E0F:
	mov ecx, dword [dword_513408]
	sar ecx, 10h
	cmp eax, ecx
	jge loc_463E2E
	cmp ebx, dword dword_513080[edx]
	jz loc_463E2A
	inc eax
	add edx, 4
	jmp loc_463E0F

loc_463E2A:
	pop edx
	pop ecx
	pop ebx
	ret

loc_463E2E:
	mov eax, 0FFFFFFFFh
	pop edx
	pop ecx
	pop ebx
	ret
;sub_463E00 endp

sub_463E40: ;SUBROUTINE
	xor eax, eax
	call sub_483EB0
	call sub_48A2B4
	xor eax, eax
	call sub_483EB0
	call sub_47E2B0
	call sub_421420
	call sub_40EA70
	xor eax, eax
	jmp sub_464030
;sub_463E40 endp

sub_463E70: ;SUBROUTINE
	push edx
	xor eax, eax
	call sub_483EB0
	xor eax, eax
	call sub_463F10
	mov edx, eax
	test eax, eax
	jz loc_463E8F

loc_463E8B:
	mov ah, byte [byte_4DB2F5]
	test ah, ah
	jnz loc_463E8B

loc_463E8F:
	mov eax, edx
	pop edx
	ret
;sub_463E70 endp

sub_463EA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor eax, eax

loc_463EA5:
	add eax, 2
	xor edx, edx
	mov word word_513422[eax], dx
	cmp eax, 14h
	jnz loc_463EA5
	xor eax, eax

loc_463EB8:
	add eax, 2
	xor ebx, ebx
	mov word word_513446[eax], bx
	mov word dword_513436[eax], bx
	cmp eax, 10h
	jnz loc_463EB8
	xor edx, edx
	mov ecx, 20h
	mov dword [byte_513420], edx
	call sub_40EAC0
	mov dword [dword_4DABE8], ecx
	call sub_48A270
	mov eax, dword_5130A0
	mov dword [dword_4DABE8], edx
	mov edx, 320h
	call sub_48A01C
	pop edx
	pop ecx
	pop ebx
	ret
;sub_463EA0 endp

sub_463F10: ;SUBROUTINE
	cmp word [word_513458], 0
	jz loc_463F30
	cmp byte [byte_51345E], 3
	jnz loc_463F30
	mov eax, dword [dword_5637F4]
	cmp eax, dword [dword_4DA1BC]
	jg loc_463F39

loc_463F30:
	cmp byte [byte_4DB2F5], 0
	jz loc_463F3F

loc_463F39:
	mov eax, 1
	ret

loc_463F3F:
	xor eax, eax
	ret
;sub_463F10 endp

sub_463F50: ;SUBROUTINE
	mov word [word_513424], 1
	cmp byte [byte_51345E], 3
	jnz loc_463F6C
	cmp word [word_513458], 0
	jnz loc_463F84

loc_463F6C:
	push ecx
	mov ecx, 1
	mov word [word_51345C], cx
	mov word [word_51345A], cx
	pop ecx
	xor eax, eax
	ret

loc_463F84:
	call sub_463E00
	cwde
	call sub_47E470
	xor eax, eax
	ret
;sub_463F50 endp

sub_463FA0: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, ebx
	mov si, word [word_51345A]
	mov bl, [edx]
	test si, si
	jnz loc_463FCC
	cmp bl, 0Ah
	jnb loc_463FD4
	and ebx, 0FFh
	lea esi, 0[ebx*4]
	mov ebx, ecx
	call dword off_4D7710[esi]

loc_463FCC:
	mov eax, 1
	pop esi
	pop ecx
	ret

loc_463FD4:
	xor eax, eax
	mov al, bl
	push eax
	mov edx, aCNfs2seGame_17 ; "c:\\nfs2se\\game\\common\\packet.c"
	mov ecx, 193h
	push aBugUnknownPktI ; "BUG: unknown pkt index <%d>"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	mov eax, 1
	add esp, 8
	pop esi
	pop ecx
	ret
;sub_463FA0 endp

sub_464010: ;SUBROUTINE
	mov dword [eax+18h], sub_463F50
	mov dword [eax+20h], sub_463FA0
	mov dword [eax+1Ch], 0
	mov dword [eax+14h], sub_463F10
	ret
;sub_464010 endp

sub_464030: ;SUBROUTINE
	push ecx
	push edx
	mov edx, 1
	xor ecx, ecx
	mov word [word_513458], dx
	mov word [dword_513408+2], dx
	xor dl, dl
	mov word [word_51345A], cx
	mov byte [byte_51345E], dl
	test eax, eax
	jnz loc_46405D
	pop edx
	pop ecx
	ret

loc_46405D:
	mov word [word_51345C], cx
	pop edx
	pop ecx
	ret
;sub_464030 endp

sub_464070: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov esi, edx
	mov edi, ebx
	cmp word [word_51345A], 0
	jnz loc_46409A
	cmp word [word_513458], 0
	jnz loc_4640A2

loc_464091:
	cmp dword [dword_5130A4], 0
	jnz loc_464103

loc_46409A:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4640A2:
	cmp byte [byte_51345F], 0
	jz loc_464091
	test ebp, ebp
	jz loc_4641F8
	cmp dword [ebp+4], 0
	jz loc_46409A
	mov ebx, edi
	mov edx, esi
	mov eax, ebp
	call sub_48A2F0
	test eax, eax
	jnz loc_46409A
	cmp dword [ebp+4], 0
	jz loc_4640E1
	mov ecx, 0Ah

loc_4640D3:
	cmp word [word_51345A], 0
	jz loc_4641AB

loc_4640E1:
	cmp byte [byte_51345E], 3
	jz loc_4641E3
	mov edx, 1
	mov word [word_51345C], dx
	mov word [word_51345A], dx
	jmp loc_46409A

loc_464103:
	mov eax, dword_5130A0
	mov ebx, edi
	mov edx, esi
	call sub_48A2F0
	test eax, eax
	jnz loc_46419B
	cmp byte [esi], 5
	jnz loc_464127
	cmp byte [byte_51345F], 1
	jz loc_46415A

loc_464127:
	cmp dword [dword_5130A4], 0
	jz loc_46413F
	mov ecx, 0Ah

loc_464135:
	cmp word [word_51345A], 0
	jz loc_464182

loc_46413F:
	mov edx, 1
	mov word [word_51345C], dx
	mov word [word_51345A], dx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46415A:
	mov dword [dword_513460], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46416C:
	add ecx, 32h
	cmp ecx, 1CCh
	jge loc_46413F
	cmp dword [dword_5130A4], 0
	jz loc_46413F
	jmp loc_464135

loc_464182:
	mov eax, ecx
	call sub_489B9C
	mov ebx, edi
	mov edx, esi
	mov eax, dword_5130A0
	call sub_48A2F0
	test eax, eax
	jz loc_46416C

loc_46419B:
	xor esi, esi
	mov dword [dword_513460], esi
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4641AB:
	mov eax, ecx
	call sub_489B9C
	mov ebx, edi
	mov edx, esi
	mov eax, ebp
	call sub_48A2F0
	test eax, eax
	jnz loc_46409A
	add ecx, 32h
	cmp ecx, 1CCh
	jge loc_4640E1
	cmp dword [ebp+4], 0
	jz loc_4640E1
	jmp loc_4640D3

loc_4641E3:
	mov eax, ebp
	call sub_463E00
	cwde
	call sub_47E470
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4641F8:
	xor ecx, ecx
	mov [esp], cx

loc_4641FE:
	mov eax, [esp-2]
	sar eax, 10h
	imul eax, 68h
	cmp dword dword_5130A4[eax], 0
	jz loc_464264
	add eax, dword_5130A0
	mov ebx, edi
	mov edx, esi
	call sub_48A2F0
	test eax, eax
	jnz loc_464264
	mov ecx, 0Ah
	xor ebp, ebp

loc_46422A:
	mov edx, [esp-2]
	sar edx, 10h
	imul edx, 68h
	cmp dword dword_5130A4[edx], 0
	jnz loc_464285

loc_46423D:
	test ebp, ebp
	jnz loc_464264
	cmp byte [byte_51345E], 3
	jnz loc_4642AC
	mov eax, [esp-2]
	sar eax, 10h
	imul eax, 68h
	add eax, dword_5130A0
	call sub_463E00
	cwde
	call sub_47E470

loc_464264:
	mov ecx, [esp]
	inc ecx
	mov [esp], cx
	cmp cx, 7
	jge loc_46409A
	jmp loc_4641FE

loc_464278:
	add ecx, 32h
	cmp ecx, 1CCh
	jl loc_46422A
	jmp loc_46423D

loc_464285:
	cmp word [word_51345A], 0
	jnz loc_46423D
	mov eax, ecx
	call sub_489B9C
	mov eax, dword_5130A0
	mov ebx, edi
	add eax, edx
	mov edx, esi
	call sub_48A2F0
	test eax, eax
	jz loc_464278
	jmp loc_464264

loc_4642AC:
	mov edx, 1
	mov word [word_51345C], dx
	mov word [word_51345A], dx
	jmp loc_464264
;sub_464070 endp

sub_4642D0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_513504]
	test edx, edx
	jnz loc_4642DD
	pop edx
	ret

loc_4642DD:
	mov eax, edx
	call sub_4848FC
	pop edx
	ret
;sub_4642D0 endp

sub_4642F0: ;SUBROUTINE
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 4
	mov eax, aInstall_win_0 ; "install.win"
	xor edx, edx
	call sub_486F40
	mov dword [dword_513504], eax
	mov [esp], eax
	call sub_484D94
	mov edx, dword [dword_513504]
	add eax, edx
	lea edx, [eax-2]
	xor eax, eax

loc_46431D:
	add eax, 4
	xor ecx, ecx
	mov dword dword_513460[eax], ecx
	cmp eax, 0A0h
	jnz loc_46431D
	cmp edx, [esp]
	jbe loc_464354

loc_464334:
	mov edi, [esp]
	add edi, 3
	mov eax, esp
	mov [esp], edi
	mov dword dword_513464[ecx], edi
	call sub_4643B0
	mov ebp, [esp]
	add ecx, 4
	cmp edx, ebp
	ja loc_464364

loc_464354:
	mov eax, dword [dword_5134BC]
	mov byte [eax], 0
	add esp, 4
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret

loc_464364:
	mov byte [ebp+0], 0
	inc dword [esp]
	mov eax, esp
	call sub_464390
	cmp edx, [esp]
	jbe loc_464354
	cmp edx, [esp]
	ja loc_464334
	mov eax, dword [dword_5134BC]
	mov byte [eax], 0
	add esp, 4
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret
;sub_4642F0 endp

sub_464390: ;SUBROUTINE
	push ebx
	push edx

loc_464392:
	mov edx, [eax]
	mov bl, [edx]
	cmp bl, 0Ah
	jz loc_4643A0
	cmp bl, 0Dh
	jnz loc_4643A4

loc_4643A0:
	inc dword [eax]
	jmp loc_464392

loc_4643A4:
	pop edx
	pop ebx
	ret
;sub_464390 endp

sub_4643B0: ;SUBROUTINE
	push ebx
	push edx
	mov edx, eax

loc_4643B4:
	mov eax, [edx]
	mov bl, [eax]
	cmp bl, 0Ah
	jz loc_4643C7
	cmp bl, 0Dh
	jz loc_4643C7
	inc eax
	mov [edx], eax
	jmp loc_4643B4

loc_4643C7:
	pop edx
	pop ebx
	ret
;sub_4643B0 endp

sub_4643D0: ;SUBROUTINE
	push edx
	cmp eax, 0Dh
	jle loc_4643D8

loc_4643D6:
	jmp loc_4643D6

loc_4643D8:
	mov edx, eax
	shl eax, 3
	sub eax, edx
	shl eax, 3
	add eax, edx
	mov edx, dword [dword_513508]
	shl eax, 2
	add eax, edx
	pop edx
	ret
;sub_4643D0 endp

sub_464400: ;SUBROUTINE
	push ecx
	mov ecx, eax
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, dword [dword_51350C]
	shl eax, 2
	add eax, edx
	mov al, [ecx+eax]
	and eax, 0FFh
	sub eax, 61h
	cmp eax, 0Dh
	jg loc_46442D
	test eax, eax
	jl loc_46442D
	pop ecx
	ret

loc_46442D:
	xor eax, eax
	pop ecx
	ret
;sub_464400 endp

sub_464440: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword_4D7738
	mov ecx, dword_4D7768
	mov dword [dword_51350C], edx
	mov dword [dword_513508], ecx
	call sub_464470
	pop edx
	pop ecx
	ret
;sub_464440 endp

sub_464470: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 2Ch
	mov edx, dword [dword_51346C]
	push edx
	push aSprsonal_dat ; "%sprsonal.dat"
	lea eax, [esp+8]
	push eax
	mov ebx, 1
	xor edx, edx
	call sprintf_
	add esp, 0Ch
	mov eax, esp
	xor edi, edi
	call sub_475F80
	mov edx, eax

loc_4644A3:
	mov esi, edi
	xor ecx, ecx

loc_4644A7:
	mov eax, edx
	call sub_475EB0
	mov ebx, dword [dword_51350C]
	inc ecx
	add ebx, esi
	mov [ecx+ebx-1], al
	cmp ecx, 0Ch
	jl loc_4644A7
	add edi, 0Ch
	cmp edi, 30h
	jnz loc_4644A3
	mov ecx, 61h
	xor edi, edi
	mov [esp+28h], ecx

loc_4644D3:
	mov eax, edx
	call sub_475EB0
	mov ecx, dword [dword_513508]
	mov [ecx+edi], al
	mov eax, edx
	call sub_475EB0
	mov eax, edx
	call sub_475EB0
	mov eax, edx
	call sub_475EB0
	mov eax, dword [dword_513508]
	mov al, [edi+eax]
	mov ebx, [esp+28h]
	and eax, 0FFh
	cmp eax, ebx
	jz loc_464513

loc_464511:
	jmp loc_464511

loc_464513:
	mov esi, edi
	xor ecx, ecx

loc_464517:
	mov eax, edx
	call sub_475F00
	mov ebx, dword [dword_513508]
	add ecx, 4
	add ebx, esi
	mov [ecx+ebx], eax
	cmp ecx, 54h
	jnz loc_464517
	mov esi, edi
	xor ecx, ecx

loc_464535:
	mov eax, edx
	call sub_475F00
	mov ebx, dword [dword_513508]
	add ecx, 4
	add ebx, esi
	mov [ecx+ebx+54h], eax
	cmp ecx, 54h
	jnz loc_464535
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0ACh], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0B0h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0B4h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0B8h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0BCh], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0C0h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0C4h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0C8h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0CCh], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0D0h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0D4h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0D8h], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0DCh], eax
	mov eax, edx
	call sub_475F00
	mov ecx, dword [dword_513508]
	mov [ecx+esi+0E0h], eax
	mov esi, [esp+28h]
	inc esi
	add edi, 0E4h
	mov [esp+28h], esi
	cmp edi, 0B94h
	jl loc_4644D3
	mov eax, edx
	call sub_475F50
	add esp, 2Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_464470 endp

dword_4646A0: times 2 dd 10000h
	dd 9999h, 0E666h, 18000h, 10000h
	times 2 dd 1999h
	dd 51Eh, 0CCCh, 1999h, 0
dword_4646D0: dd 1999h, 10000h
	times 2 dd 4CCCh
	dd 8000h
	times 2 dd 0
	dd 10000h, 28000h, 30000h, 40000h, 10000h

sub_464700: ;SUBROUTINE
	push ecx
	push edx
	mov edx, [eax+31Ch]
	test edx, edx
	jle loc_46471D
	lea ecx, [edx+1]
	mov [eax+31Ch], ecx
	cmp ecx, 80h
	jg loc_464720

loc_46471D:
	pop edx
	pop ecx
	ret

loc_464720:
	mov byte [eax+318h], 1
	mov dword [eax+31Ch], 0
	pop edx
	pop ecx
	ret
;sub_464700 endp

sub_464740: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 3Ch
	mov ecx, eax
	cmp word [eax+14Ch], 0
	jnz loc_464939
	mov edx, [eax+31Ch]
	test edx, edx
	jle loc_464939
	cmp edx, 0Ah
	jge loc_464939
	push edi
	push esi
	push ebx
	lea edi, [esp+3Ch]
	lea esi, [ecx+0A8h]
	movsd
	movsd
	movsd
	mov edx, [eax+0C4h]
	mov eax, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D0h]
	add ebx, eax
	mov eax, [esp+3Ch]
	mov [esp+30h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [esp+3Ch]
	mov [esp+34h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [esp+40h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [esp+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [esp+0Ch]
	add ebx, eax
	lea eax, [ecx+0C4h]
	mov [esp+38h], ebx
	call sub_49D890
	mov edx, [esp+0Ch]
	mov eax, [esp+30h]
	mov ebx, [esp+3Ah]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, 2
	mov edx, [esp+10h]
	mov [esp+3Ah], bx
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+3Ch], ebx
	mov edx, [esp+18h]
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+24h]
	add ebx, eax
	mov eax, [esp+30h]
	mov [esp+40h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+28h]
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+2Ch]
	add ebx, eax
	mov eax, [esp+38h]
	lea esi, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	lea edi, [ecx+0A8h]
	mov [esp+44h], ebx
	movsd
	movsd
	movsd
	pop ebx
	pop esi
	pop edi

loc_464939:
	xor eax, eax
	mov al, [ecx+318h]
	test eax, eax
	jz loc_464965
	cmp byte [ecx+2DDh], 0
	jz loc_464965
	mov byte [ecx+318h], 0
	mov dword [ecx+31Ch], 1
	add esp, 3Ch
	pop edx
	pop ecx
	ret

loc_464965:
	mov eax, ecx
	call sub_464700
	add esp, 3Ch
	pop edx
	pop ecx
	ret
;sub_464740 endp

sub_464980: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 54h
	mov ecx, eax
	cmp dword [eax+15Ch], 10000h
	jge loc_4649A9
	cmp word [eax+14Ch], 0
	jz loc_4649A9
	cmp dword [eax+0ACh], 0
	jl loc_4649D6

loc_4649A9:
	test byte [ecx+1F4h], 4
	jz loc_4649CD
	cmp dword [dword_4D5794], 0
	jz loc_464D4B

loc_4649BF:
	cmp word [ecx+14Ch], 0
	jz loc_464D72

loc_4649CD:
	add esp, 54h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4649D6:
	cmp dword [eax+198h], 8000h
	jle loc_4649A9
	mov edx, [eax+0D0h]
	mov eax, [eax+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_4649A9
	push edi
	lea edi, [esp+28h]
	lea esi, [ecx+0D0h]
	movsd
	movsd
	movsd
	mov eax, [esp+28h]
	mov edx, [ecx+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+18Ch]
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+190h]
	add ebx, eax
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+194h]
	add ebx, eax
	mov eax, [esp+28h]
	mov [esp+4Ch], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+198h]
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+19Ch]
	add ebx, eax
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	add ebx, eax
	mov eax, [esp+28h]
	mov [esp+50h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [esp+30h]
	lea edi, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea esi, [ecx+124h]
	movsd
	movsd
	movsd
	add ebx, eax
	mov eax, [esp+28h]
	mov edx, [ecx+188h]
	mov [esp+54h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+18Ch]
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+190h]
	add ebx, eax
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+40h], ebx
	pop edi
	mov eax, [esp+24h]
	mov edx, [ecx+194h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+198h]
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+19Ch]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	add ebx, eax
	mov eax, [esp+24h]
	mov [esp+40h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+4Ch]
	mov edx, ebx
	mov [esp+44h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov ebx, eax
	mov eax, [esp+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	sub ebx, eax
	mov eax, [esp+50h]
	mov [esp+30h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov ebx, eax
	mov eax, [esp+48h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	sub ebx, eax
	mov eax, [esp+48h]
	mov [esp+34h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+3Ch]
	mov ebx, eax
	mov eax, [esp+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ebx, eax
	mov [esp+38h], ebx
	mov edx, esp
	lea eax, [ecx+188h]
	call sub_49D890
	mov edx, [esp]
	mov eax, [esp+30h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0E8h], ebx
	mov eax, [esp+30h]
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0ECh], ebx
	mov eax, [esp+30h]
	mov edx, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [esp+34h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [esp+38h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+0F0h], ebx
	jmp loc_4649A9

loc_464D4B:
	mov ebp, aCNfs2seGame_18 ; "c:\\nfs2se\\game\\common\\physics.c"
	mov eax, 0F7Ch
	push aErrorAiSpeedFi ; "ERROR: AI SPEED file not loaded"
	mov dword [dword_4DB1D8], ebp
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4
	jmp loc_4649BF

loc_464D72:
	mov eax, [ecx+14h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4D5794]
	mov al, [edx+eax*2]
	and eax, 0FFh
	mov edx, 0E666h
	shl eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+2ECh]
	mov ebx, eax
	mov eax, [edx+0F4h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, ebx
	imul edx, eax
	mov ebx, 68h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov esi, eax
	mov edx, [ecx+0D0h]
	mov eax, [ecx+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_464EC1
	mov edx, [ecx+0D0h]
	mov eax, [ecx+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx

loc_464E64:
	cmp eax, 0D999h
	jle loc_464E84
	mov edx, [ecx+2F4h]
	test edx, edx
	jle loc_464F10
	mov eax, edx

loc_464E7B:
	cmp eax, 3
	jz loc_464F19

loc_464E84:
	cmp esi, [ecx+2B8h]
	jg loc_4649CD
	mov esi, [ecx+30Ch]
	cmp esi, 0FFFFFAE2h
	jle loc_464F2C
	cmp esi, 51Eh
	jl loc_4649CD
	mov dword [ecx+2F4h], 3
	add esp, 54h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_464EC1:
	mov edx, [ecx+0D0h]
	mov eax, [ecx+124h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	neg eax
	jmp loc_464E64

loc_464F10:
	mov eax, edx
	neg eax
	jmp loc_464E7B

loc_464F19:
	mov dword [ecx+2F4h], 0
	add esp, 54h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_464F2C:
	mov dword [ecx+2F4h], 0FFFFFFFDh
	add esp, 54h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_464980 endp

sub_464F40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ecx, eax
	mov dl, byte [byte_512218]
	mov eax, [eax+184h]
	test dl, 8
	jnz loc_4656E6
	mov al, byte byte_4D84D4[eax]

loc_464F66:
	and eax, 0FFh
	mov [ecx+200h], eax
	cmp dword [ecx+2F4h], 0
	jnz loc_464FCD
	cmp dword [ecx+2FCh], 0
	jnz loc_464FCD
	mov esi, [ecx+2FCh]
	cmp esi, 2
	jnz loc_4656F1

loc_464F92:
	mov eax, [ecx+324h]
	sub eax, 40000h
	test eax, eax
	jle loc_4656FE

loc_464FA5:
	mov [ecx+324h], eax

loc_464FAB:
	cmp dword [ecx+2FCh], 2
	jge loc_464FCD
	mov eax, [ecx+328h]
	sub eax, 40000h
	test eax, eax
	jle loc_465705

loc_464FC7:
	mov [ecx+328h], eax

loc_464FCD:
	mov eax, ecx
	call sub_467940
	mov edx, [ecx+188h]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+18Ch]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+190h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+194h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+198h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+19Ch]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+2B8h], ebx
	test ebx, ebx
	jle loc_46570C
	mov edx, ebx

loc_4650C8:
	mov ebx, [ecx+2B0h]
	test ebx, ebx
	jle loc_465715
	mov eax, ebx

loc_4650D8:
	call sub_45ED40
	mov esi, [ecx+2B8h]
	mov [ecx+304h], eax
	test esi, esi
	jl loc_46571E

loc_4650F1:
	mov edx, [ecx+188h]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+18Ch]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+190h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+194h]
	add ebx, eax
	xor eax, eax
	mov dword [dword_513518], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+198h]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+19Ch]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	add ebx, eax
	xor eax, eax
	mov dword [dword_51351C], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [ecx+2B0h]
	mov ebp, eax
	mov [ecx+2A4h], eax
	neg ebp
	mov eax, [ecx+2B4h]
	mov [ecx+2A4h], ebp
	mov [ecx+2A8h], eax
	neg eax
	mov [ecx+2A8h], eax
	mov eax, [ecx+2B8h]
	mov dword [dword_513520], ebx
	mov [ecx+2ACh], eax
	mov edx, eax
	mov eax, [ecx+0E8h]
	neg edx
	mov [esp+24h], eax
	mov ebx, eax
	mov [ecx+2ACh], edx
	neg ebx
	mov eax, [ecx+0ECh]
	mov [esp+24h], ebx
	mov [esp+28h], eax
	mov esi, eax
	mov eax, [ecx+0F0h]
	neg esi
	mov [esp+2Ch], eax
	mov edi, eax
	mov eax, ecx
	mov [esp+28h], esi
	call sub_46A620
	mov eax, ecx
	neg edi
	call sub_466AB0
	mov ebp, dword [dword_512230]
	mov [esp+2Ch], edi
	test ebp, ebp
	jz loc_465255
	mov eax, ecx
	call sub_464980

loc_465255:
	cmp word [ecx+14Ch], 0
	jnz loc_46572D
	mov eax, [ecx+2E8h]
	test eax, eax
	jnz loc_46572D
	mov edx, [ecx+1E8h]
	mov [ecx+284h], eax
	test edx, edx
	jnz loc_465769
	test byte [byte_512218], 10h
	jz loc_465769

loc_465292:
	cmp dword [ecx+288h], 0
	jnz loc_46577F
	mov eax, ecx
	call sub_465F60

loc_4652A6:
	mov eax, ecx
	call sub_465840
	mov edi, [ecx+304h]
	cmp edi, 0F0000h
	jge loc_4652E4
	test edi, edi
	jle loc_4652E4
	cmp byte [ecx+2DCh], 0
	jnz loc_4652E4
	mov eax, [ecx+310h]
	test eax, eax
	jle loc_465792
	cmp edi, eax
	jle loc_46578B

loc_4652DE:
	mov [ecx+310h], eax

loc_4652E4:
	mov ebp, [esp+28h]
	mov eax, [ecx+304h]
	mov esi, [ecx+2ACh]
	mov edi, [ecx+2A4h]
	add esi, eax
	mov eax, [ecx+310h]
	mov edx, esp
	add edi, eax
	mov eax, [ecx+30Ch]
	mov dword [ecx+2A8h], 0
	add ebp, eax
	xor eax, eax
	mov [ecx+2ACh], esi
	mov [esp+24h], eax
	mov [esp+2Ch], eax
	lea eax, [ecx+188h]
	mov [ecx+2A4h], edi
	call sub_49D890
	mov edx, 1
	mov eax, ecx
	call sub_453670
	mov edx, [esp]
	mov eax, [ecx+2A4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+28Ch], ebx
	mov eax, [ecx+2A4h]
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+290h], ebx
	mov eax, [ecx+2A4h]
	mov edx, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [ecx+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [ecx+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esp+28h], ebp
	mov [ecx+294h], ebx
	mov edx, [esp]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+298h], ebx
	xor eax, eax
	mov edx, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+29Ch], ebx
	xor eax, eax
	mov edx, [esp+18h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+2A0h], ebx
	mov eax, [ecx+298h]
	add [ecx+0E8h], eax
	mov esi, [ecx+0ECh]
	mov edi, [ecx+0F0h]
	mov ebp, [ecx+0A8h]
	mov edx, [ecx+0ACh]
	mov eax, [ecx+29Ch]
	mov ebx, [ecx+0B0h]
	add esi, eax
	mov eax, [ecx+2A0h]
	mov [ecx+0ECh], esi
	add edi, eax
	mov eax, [ecx+28Ch]
	mov [ecx+0F0h], edi
	add ebp, eax
	mov eax, [ecx+290h]
	mov [ecx+0A8h], ebp
	add edx, eax
	mov eax, [ecx+294h]
	mov [ecx+0ACh], edx
	add ebx, eax
	mov esi, [ecx+1E8h]
	mov [ecx+0B0h], ebx
	test esi, esi
	jnz loc_4657AB
	test byte [byte_512218], 10h
	jz loc_4657AB

loc_46555E:
	cmp dword [ecx+288h], 0
	jnz loc_46556E
	mov eax, ecx
	call sub_464740

loc_46556E:
	cmp byte [ecx+2DAh], 1
	jnz loc_465636
	mov eax, [ecx+2B8h]
	test eax, eax
	jle loc_4657CA

loc_465589:
	cmp eax, 140000h
	jge loc_465636
	mov eax, 0FEB8h
	mov edx, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ACh]
	mov [ecx+0A8h], eax
	mov eax, 0FEB8h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	mov [ecx+0ACh], eax
	mov eax, 0FEB8h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E8h]
	mov [ecx+0B0h], eax
	mov eax, 0FEB8h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ECh]
	mov [ecx+0E8h], eax
	mov eax, 0FEB8h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0F0h]
	mov [ecx+0ECh], eax
	mov eax, 0FEB8h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0F0h], eax

loc_465636:
	mov ebx, [ecx+2A4h]
	mov dword [ecx+204h], 0
	shl ebx, 3
	mov edx, [ecx+2ACh]
	mov [ecx+2A4h], ebx
	shl edx, 3
	mov esi, [ecx+2B0h]
	mov [ecx+2ACh], edx
	test esi, esi
	jle loc_4657D1
	mov edx, esi

loc_46566E:
	mov edi, [ecx+2B8h]
	test edi, edi
	jle loc_4657DA
	mov eax, edi

loc_46567E:
	cmp edx, eax
	jle loc_4657F5
	mov edx, [ecx+2B8h]
	test edx, edx
	jle loc_4657E3
	mov eax, edx

loc_465696:
	mov edx, eax
	mov ebx, [ecx+2B0h]
	sar edx, 2
	test ebx, ebx
	jle loc_4657EC
	mov eax, ebx

loc_4656AB:
	add eax, edx
	mov [ecx+304h], eax
	test eax, eax
	jle loc_46581B

loc_4656BB:
	cmp eax, 3333h
	jge loc_4656CF
	cmp byte [ecx+2D7h], 40h
	jb loc_465822

loc_4656CF:
	cmp dword [dword_540F44], 0
	jz loc_465822
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4656E6:
	mov al, byte byte_4D84E8[eax]
	jmp loc_464F66

loc_4656F1:
	test esi, esi
	jz loc_464F92
	jmp loc_464FAB

loc_4656FE:
	xor eax, eax
	jmp loc_464FA5

loc_465705:
	xor eax, eax
	jmp loc_464FC7

loc_46570C:
	mov edx, ebx
	neg edx
	jmp loc_4650C8

loc_465715:
	mov eax, ebx
	neg eax
	jmp loc_4650D8

loc_46571E:
	mov edi, eax
	neg edi
	mov [ecx+304h], edi
	jmp loc_4650F1

loc_46572D:
	mov dword [ecx+2A4h], 0
	mov dword [ecx+204h], 0
	mov dword [ecx+324h], 0
	mov dword [ecx+328h], 0
	mov dword [ecx+2ACh], 0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_465769:
	cmp dword [ecx+1E8h], 1
	jnz loc_46577F
	test byte [byte_512218], 20h
	jnz loc_465292

loc_46577F:
	mov eax, ecx
	call sub_466280
	jmp loc_4652A6

loc_46578B:
	mov eax, edi
	jmp loc_4652DE

loc_465792:
	mov eax, edi
	mov edx, [ecx+310h]
	neg eax
	cmp eax, edx
	jg loc_4652DE
	mov eax, edx
	jmp loc_4652DE

loc_4657AB:
	cmp dword [ecx+1E8h], 1
	jnz loc_46556E
	test byte [byte_512218], 20h
	jnz loc_46555E
	jmp loc_46556E

loc_4657CA:
	neg eax
	jmp loc_465589

loc_4657D1:
	mov edx, esi
	neg edx
	jmp loc_46566E

loc_4657DA:
	mov eax, edi
	neg eax
	jmp loc_46567E

loc_4657E3:
	mov eax, edx
	neg eax
	jmp loc_465696

loc_4657EC:
	mov eax, ebx

loc_4657EE:
	neg eax
	jmp loc_4656AB

loc_4657F5:
	mov ebp, [ecx+2B0h]
	test ebp, ebp
	jle loc_465815
	mov eax, ebp

loc_465801:
	mov edx, eax
	mov eax, [ecx+2B8h]
	sar edx, 2
	test eax, eax
	jle loc_4657EE
	jmp loc_4656AB

loc_465815:
	mov eax, ebp
	neg eax
	jmp loc_465801

loc_46581B:
	neg eax
	jmp loc_4656BB

loc_465822:
	mov dword [ecx+328h], 0
	mov dword [ecx+324h], 0
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_464F40 endp

sub_465840: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ebx, eax
	mov ecx, 6
	mov edi, esp
	mov esi, dword_4646D0
	rep movsd
	mov ecx, 6
	lea edi, [esp+18h]
	mov esi, (dword_4646D0+18h)
	rep movsd
	mov eax, [eax+21Ch]
	xor ebp, ebp
	mov ecx, [eax]
	mov [esp+30h], ebp
	cmp ecx, 0Eh
	jnz loc_465C81
	mov esi, [ebx+2F4h]
	test esi, esi
	jle loc_465C50
	mov eax, esi

loc_465890:
	cmp eax, 5
	jnz loc_465C59

loc_465899:
	mov dword [ebx+2F4h], 0

loc_4658A3:
	mov eax, [ebx+2F4h]
	neg eax

loc_4658AB:
	cmp eax, 3
	jnz loc_465CB9
	mov ecx, [ebx+304h]
	test ecx, ecx
	jle loc_465CA0
	mov eax, ecx

loc_4658C4:
	cmp eax, 0F0000h
	jge loc_465CA9

loc_4658CF:
	mov edi, [ebx+2F4h]
	test edi, edi
	jle loc_465CD5
	mov eax, edi

loc_4658DF:
	cmp eax, 5
	jz loc_465CB9
	mov dword [ebx+2F4h], 0

loc_4658F2:
	mov eax, [ebx+304h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ecx, eax
	imul ecx, eax
	mov eax, [ebx+30Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 9
	sbb eax, edx
	sar eax, 9
	imul eax, ecx
	test eax, eax
	jle loc_465CDE

loc_465928:
	mov ebp, eax
	mov dl, [ebx+2D7h]
	mov dword [ebx+2F4h], 0
	cmp dl, 40h
	jnb loc_4659CC
	mov ebp, [ebx+2ECh]
	mov ecx, [ebp+158h]
	mov ebp, eax
	sub ebp, ecx
	test ebp, ebp
	jl loc_465CE5

loc_46595B:
	mov eax, 10000h
	sub eax, ebp
	mov ebp, eax
	cmp eax, 9999h
	jge loc_4659A7
	mov eax, [ebx+324h]
	add eax, 3333h
	mov dword [ebx+2F4h], 5
	cmp eax, 50000h
	jle loc_46598C
	mov eax, 50000h

loc_46598C:
	mov [ebx+324h], eax
	mov eax, [ebx+364h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [ebx+364h], eax

loc_4659A7:
	cmp ebp, 8000h
	jge loc_4659CC
	mov eax, [ebx+328h]
	add eax, 3333h
	cmp eax, 50000h
	jle loc_4659C6
	mov eax, 50000h

loc_4659C6:
	mov [ebx+328h], eax

loc_4659CC:
	mov esi, [ebx+2F4h]
	test esi, esi
	jle loc_465CEC
	mov eax, esi

loc_4659DC:
	mov edi, [ebx+304h]
	mov esi, [esp+eax*4]
	test edi, edi
	jle loc_465CF5
	mov eax, edi

loc_4659EF:
	cmp eax, 50000h
	jge loc_465CFE
	cmp byte [ebx+2D7h], 20h
	jnb loc_465CFE

loc_465A07:
	add esi, esi

loc_465A09:
	cmp dword [ebx+30Ch], 0FFFFFAE2h
	jle loc_465D1D
	cmp dword [ebx+2F4h], 0FFFFFFFDh
	jnz loc_465D1D

loc_465A26:
	mov edx, 1
	mov ecx, [ebx+200h]
	mov [esp+30h], edx
	cmp ecx, 3
	jge loc_465A93
	cmp dword [dword_4D8508], 0C000h
	jle loc_465D5D
	mov ecx, [ebx+2F4h]
	test ecx, ecx
	jle loc_465D4B
	mov eax, ecx

loc_465A5A:
	mov eax, [esp+eax*4]
	lea ecx, 0[eax*4]
	sub ecx, eax
	mov eax, ecx
	lea ecx, 0[esi*4]
	sub ecx, esi
	cmp ecx, eax
	jle loc_465A91
	mov esi, [ebx+2F4h]
	test esi, esi
	jle loc_465D54
	mov eax, esi

loc_465A85:
	mov eax, [esp+eax*4]
	lea ecx, 0[eax*4]
	sub ecx, eax

loc_465A91:
	mov esi, ecx

loc_465A93:
	cmp dword [ebx+2F4h], 0FFFFFFFDh
	jnz loc_465DA2
	cmp dword [ebx+310h], 4CCCh
	jge loc_465DA2

loc_465AB0:
	mov dword [ebx+2F4h], 0
	mov dword [ebx+310h], 0

loc_465AC4:
	mov eax, [ebx+2F4h]
	neg eax

loc_465ACC:
	cmp eax, 2
	jl loc_465DF3
	mov eax, [ebx+2F4h]
	test eax, eax
	jle loc_465DCA

loc_465AE3:
	cmp eax, 5
	jz loc_465DF3
	mov edx, [ebx+2F4h]
	test edx, edx
	jle loc_465DD1
	mov eax, edx

loc_465AFC:
	mov edx, [esp+eax*4+18h]
	mov eax, [ebx+2ECh]
	mov eax, [eax+148h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, [ebx+30Ch]
	mov edx, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+304h]
	mov ebp, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edi, [ebx+304h]
	neg ecx
	test edi, edi
	jle loc_465DDA
	mov eax, edi

loc_465B50:
	cmp eax, 50000h
	jge loc_465B64
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, eax

loc_465B64:
	mov edx, dword [dword_4D8504]
	mov eax, dword [dword_4D8508]
	add eax, edx
	cmp eax, 1999h
	jge loc_465B7A
	add esi, esi

loc_465B7A:
	mov edi, [ebx+2B8h]
	test edi, edi
	jle loc_465DE3
	mov eax, edi

loc_465B8A:
	cmp eax, 50000h
	jge loc_465BB0
	mov eax, [ebx+2B8h]
	mov edx, 3333h
	test eax, eax
	jle loc_465DEC

loc_465BA4:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax

loc_465BB0:
	mov edx, 1999h
	mov eax, dword [dword_513518]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	test ecx, ecx
	jle loc_465DFA
	mov eax, ecx

loc_465BD0:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+310h]
	add ecx, eax
	sub ecx, edx
	cmp ecx, esi
	jle loc_465E03
	add esi, edx

loc_465BEE:
	mov [ebx+310h], esi
	test esi, esi
	jle loc_465E1E
	mov eax, esi

loc_465BFE:
	cmp eax, 3333h
	jge loc_465E27
	cmp dword [esp+30h], 0
	jnz loc_465E27

loc_465C14:
	mov edi, [ebx+2F4h]
	test edi, edi
	jle loc_465E7E
	mov eax, edi

loc_465C24:
	cmp eax, 5
	jz loc_465C3C
	cmp dword [ebx+2F4h], 1
	jz loc_465C3C
	mov dword [ebx+2F4h], 0

loc_465C3C:
	mov dword [ebx+310h], 0

loc_465C46:
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_465C50:
	mov eax, esi
	neg eax
	jmp loc_465890

loc_465C59:
	mov edi, [ebx+2F4h]
	test edi, edi
	jle loc_465C96
	mov eax, edi

loc_465C65:
	cmp eax, 1
	jz loc_465899
	mov eax, [ebx+2F4h]
	test eax, eax
	jle loc_465C9C

loc_465C78:
	cmp eax, 4
	jz loc_465899

loc_465C81:
	mov edx, [ebx+2F4h]
	test edx, edx
	jle loc_4658A3
	mov eax, edx
	jmp loc_4658AB

loc_465C96:
	mov eax, edi
	neg eax
	jmp loc_465C65

loc_465C9C:
	neg eax
	jmp loc_465C78

loc_465CA0:
	mov eax, ecx
	neg eax
	jmp loc_4658C4

loc_465CA9:
	cmp dword [ebx+2F0h], 0BB8h
	jl loc_4658CF

loc_465CB9:
	mov eax, [ebx+2F4h]
	test eax, eax
	jz loc_4658F2
	cmp eax, 5
	jz loc_4658F2
	jmp loc_4659CC

loc_465CD5:
	mov eax, edi
	neg eax
	jmp loc_4658DF

loc_465CDE:
	neg eax
	jmp loc_465928

loc_465CE5:
	xor ebp, ebp
	jmp loc_46595B

loc_465CEC:
	mov eax, esi
	neg eax
	jmp loc_4659DC

loc_465CF5:
	mov eax, edi
	neg eax
	jmp loc_4659EF

loc_465CFE:
	cmp dword [ebx+2F4h], 0
	jz loc_465A07
	cmp byte [ebx+2D7h], 0
	jz loc_465A07
	jmp loc_465A09

loc_465D1D:
	cmp dword [ebx+30Ch], 51Eh
	jge loc_465D36
	cmp dword [ebx+2F4h], 3
	jz loc_465A26

loc_465D36:
	mov edi, [ebx+2F4h]
	test edi, edi
	jle loc_465AC4
	mov eax, edi
	jmp loc_465ACC

loc_465D4B:
	mov eax, ecx
	neg eax
	jmp loc_465A5A

loc_465D54:
	mov eax, esi
	neg eax
	jmp loc_465A85

loc_465D5D:
	mov eax, [ebx+2F4h]
	test eax, eax
	jle loc_465D8F

loc_465D67:
	mov eax, [esp+eax*4]
	shl esi, 2
	shl eax, 2
	cmp esi, eax
	jle loc_465A93
	mov edx, [ebx+2F4h]
	test edx, edx
	jle loc_465D93
	mov eax, edx
	mov esi, [esp+eax*4]
	shl esi, 2
	jmp loc_465A93

loc_465D8F:
	neg eax
	jmp loc_465D67

loc_465D93:
	mov eax, edx
	neg eax
	mov esi, [esp+eax*4]
	shl esi, 2
	jmp loc_465A93

loc_465DA2:
	cmp dword [ebx+2F4h], 3
	jnz loc_465DBB
	cmp dword [ebx+310h], 0FFFFB334h
	jg loc_465AB0

loc_465DBB:
	mov dword [ebx+30Ch], 0
	jmp loc_465D36

loc_465DCA:
	neg eax
	jmp loc_465AE3

loc_465DD1:
	mov eax, edx
	neg eax
	jmp loc_465AFC

loc_465DDA:
	mov eax, edi
	neg eax
	jmp loc_465B50

loc_465DE3:
	mov eax, edi
	neg eax
	jmp loc_465B8A

loc_465DEC:
	neg eax
	jmp loc_465BA4

loc_465DF3:
	xor ecx, ecx
	jmp loc_465BB0

loc_465DFA:
	mov eax, ecx
	neg eax
	jmp loc_465BD0

loc_465E03:
	mov eax, esi
	neg eax
	cmp ecx, eax
	jge loc_465E16
	mov eax, edx
	sub eax, esi
	mov esi, eax
	jmp loc_465BEE

loc_465E16:
	lea esi, [edx+ecx]
	jmp loc_465BEE

loc_465E1E:
	mov eax, esi
	neg eax
	jmp loc_465BFE

loc_465E27:
	cmp dword [ebx+284h], 0
	jnz loc_465C14
	mov edx, [ebx+2F4h]
	test edx, edx
	jle loc_465E87
	mov eax, edx

loc_465E40:
	cmp eax, 2
	jnz loc_465E8D
	cmp dword [dword_4D8508], 8000h
	jge loc_465E8D

loc_465E51:
	mov esi, [ebx+2F4h]
	test esi, esi
	jle loc_465F2D
	mov eax, esi

loc_465E61:
	cmp eax, 5
	jz loc_465C46
	mov dword [ebx+2F4h], 0
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_465E7E:
	mov eax, edi
	neg eax
	jmp loc_465C24

loc_465E87:
	mov eax, edx
	neg eax
	jmp loc_465E40

loc_465E8D:
	mov esi, [ebx+2F4h]
	test esi, esi
	jle loc_465F24
	mov eax, esi

loc_465E9D:
	cmp eax, 2
	jle loc_465EAE
	cmp dword [ebx+2F0h], 0BB8h
	jl loc_465E51

loc_465EAE:
	mov eax, [ebx+328h]
	cmp eax, 140000h
	jge loc_465ED2
	add eax, 20000h
	cmp eax, 280000h
	jle loc_465ECC
	mov eax, 280000h

loc_465ECC:
	mov [ebx+328h], eax

loc_465ED2:
	test ebp, ebp
	jle loc_465F36
	mov eax, ebp

loc_465ED8:
	cmp eax, 4000h
	jle loc_465F42
	mov edx, [ebx+2F4h]
	test edx, edx
	jle loc_465F3C
	mov eax, edx

loc_465EEB:
	cmp eax, 2
	jz loc_465F42

loc_465EF0:
	mov ecx, [ebx+324h]
	cmp ecx, 140000h
	jge loc_465C46
	lea eax, [ecx+20000h]
	cmp eax, 280000h
	jle loc_465F14
	mov eax, 280000h

loc_465F14:
	mov [ebx+324h], eax
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_465F24:
	mov eax, esi
	neg eax
	jmp loc_465E9D

loc_465F2D:
	mov eax, esi
	neg eax
	jmp loc_465E61

loc_465F36:
	mov eax, ebp
	neg eax
	jmp loc_465ED8

loc_465F3C:
	mov eax, edx
	neg eax
	jmp loc_465EEB

loc_465F42:
	test ebp, ebp
	jle loc_465F58

loc_465F46:
	cmp ebp, 8000h
	jg loc_465EF0
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_465F58:
	neg ebp
	jmp loc_465F46
;sub_465840 endp

sub_465F60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov edx, [eax+288h]
	mov esi, [eax+14h]
	test edx, edx
	jle loc_466175
	mov eax, 1

loc_465F81:
	xor eax, dword [dword_512228]
	jnz loc_46617C
	mov eax, 1

loc_465F92:
	mov [esp+4], eax
	mov edx, [ecx+2E4h]
	test eax, eax
	jnz loc_465FA2
	neg edx

loc_465FA2:
	lea eax, 0[edx*4]
	add edx, eax
	shl edx, 11h
	mov ebx, 7Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, eax
	mov eax, ecx
	call sub_466200
	mov ebx, [ecx+3ACh]
	add eax, edx
	sub ebx, eax
	mov [ecx+394h], eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edi, eax
	test ebx, ebx
	jle loc_466183

loc_465FEC:
	cmp ebx, 38000h
	jg loc_4661E2
	cmp dword [ecx+2B8h], 0
	jl loc_4661E2
	cmp dword [esp+4], 0
	jz loc_46618A
	mov ebp, dword [dword_5118A0]
	lea eax, [esi+1]
	cmp eax, ebp
	jl loc_46601F
	sub eax, ebp

loc_46601F:
	mov ebx, dword [dword_5118A0]
	mov edx, eax
	lea eax, [esi+2]
	cmp eax, ebx
	jl loc_466030
	sub eax, ebx

loc_466030:
	mov [esp+8], eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	mov ebx, dword [dword_5118A4]
	mov [esp], eax
	lea edx, [eax+ebx]
	lea eax, 0[esi*8]
	add eax, esi
	shl eax, 2
	add ebx, eax
	mov eax, [edx]
	mov esi, [ebx]
	mov ebp, [ebx+8]
	mov edx, [edx+8]
	sub eax, esi
	sub edx, ebp
	call sub_49D7E0
	mov edx, [esp+8]
	mov ebx, eax
	mov ebp, eax
	lea eax, 0[edx*8]
	add eax, edx
	mov esi, dword [dword_5118A4]
	shl eax, 2
	lea edx, [esi+eax]
	add esi, [esp]
	mov eax, [edx]
	mov edx, [edx+8]
	sub eax, [esi]
	sub edx, [esi+8]
	call sub_49D7E0
	mov edx, ebx
	call sub_45E710
	mov esi, eax
	test eax, eax
	jle loc_4661BE

loc_4660AD:
	cmp eax, 1Eh
	jle loc_4660BF
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax

loc_4660BF:
	mov eax, ebp
	mov edx, [ecx+204h]
	call sub_45E710
	mov ebx, eax
	test eax, eax
	jle loc_4661C5

loc_4660D6:
	cmp eax, 64h
	jle loc_4660E8
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax

loc_4660E8:
	mov edx, [ecx+2ECh]
	mov eax, [edx+12Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov ebp, eax
	mov eax, [ecx+2B8h]
	mov edx, 1999h
	test eax, eax
	jle loc_4661CC

loc_466116:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov ebp, [esp+4]
	mov edx, eax
	test ebp, ebp
	jz loc_466145
	neg edi

loc_466145:
	lea eax, [esi+ebx]
	add eax, edi
	cmp eax, 7Fh
	jle loc_4661D3
	mov eax, 7Fh

loc_466158:
	imul edx, eax
	mov dword [ecx+368h], 0
	mov [ecx+30Ch], edx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_466175:
	xor eax, eax
	jmp loc_465F81

loc_46617C:
	xor eax, eax
	jmp loc_465F92

loc_466183:
	neg ebx
	jmp loc_465FEC

loc_46618A:
	lea eax, [esi-1]
	test eax, eax
	jl loc_46619F
	mov edx, eax
	lea eax, [esi-2]
	test eax, eax
	jl loc_4661B3
	jmp loc_466030

loc_46619F:
	add eax, dword [dword_5118A0]
	mov edx, eax
	lea eax, [esi-2]
	test eax, eax
	jl loc_4661B3
	jmp loc_466030

loc_4661B3:
	add eax, dword [dword_5118A0]
	jmp loc_466030

loc_4661BE:
	neg eax
	jmp loc_4660AD

loc_4661C5:
	neg eax
	jmp loc_4660D6

loc_4661CC:
	neg eax
	jmp loc_466116

loc_4661D3:
	cmp eax, 0FFFFFF81h
	jge loc_466158
	mov eax, 0FFFFFF81h
	jmp loc_466158

loc_4661E2:
	mov eax, ecx
	call sub_466280
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_465F60 endp

sub_466200: ;SUBROUTINE
	push ecx
	push edx
	mov edx, [eax+14h]
	call sub_43D830
	mov ecx, eax
	lea eax, 0[edx*8]
	add eax, edx
	shl eax, 2
	cmp ecx, 1
	jnz loc_466247
	mov edx, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+21h]
	mov al, [eax+1Fh]
	mov ecx, edx
	and al, 0Fh
	xor edx, edx
	shl ecx, 0Fh
	mov dl, al
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	pop edx
	pop ecx
	ret

loc_466247:
	mov edx, dword [dword_5118A4]
	add eax, edx
	xor edx, edx
	mov dl, [eax+20h]
	mov ecx, edx
	mov al, [eax+1Fh]
	shl ecx, 0Fh
	mov edx, eax
	and edx, 0FFh
	sar edx, 4
	neg ecx
	and edx, 0Fh
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	pop edx
	pop ecx
	ret
;sub_466200 endp

sub_466280: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ebp, eax
	mov ecx, 6
	mov edi, esp
	mov esi, dword_4646A0
	rep movsd
	mov ecx, 6
	lea edi, [esp+18h]
	mov esi, (dword_4646A0+18h)
	rep movsd
	mov edx, [eax+2ECh]
	mov eax, [edx+12Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov edx, 13333h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+2ECh]
	mov eax, [edx+12Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 6
	sbb eax, edx
	sar eax, 6
	mov esi, eax
	mov eax, [ebp+21Ch]
	cmp dword [eax], 0Eh
	jz loc_46678E

loc_4662FB:
	mov ecx, [ebp+2B8h]
	test ecx, ecx
	jle loc_4667A6
	mov eax, ecx

loc_46630B:
	cmp eax, 50000h
	jge loc_4667B8
	mov ecx, [ebp+2B8h]
	mov edx, 3333h
	test ecx, ecx
	jle loc_4667AF
	mov eax, ecx

loc_46632B:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_466341:
	mov esi, eax

loc_466343:
	mov ebx, [ebp+2FCh]
	cmp ebx, 1
	jnz loc_46682E

loc_466352:
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov esi, eax

loc_466363:
	cmp dword [dword_4D8500], 40h
	jle loc_46683C
	cmp dword [ebp+2F4h], 3
	jnz loc_46683C

loc_46637D:
	mov edi, dword [dword_4D8500]
	test edi, edi
	jle loc_46685E
	mov eax, edi

loc_46638D:
	cmp eax, 80h
	jle loc_466870
	mov edx, dword [dword_4D8500]
	test edx, edx
	jle loc_466867
	mov eax, edx

loc_4663A8:
	mov edx, [ebp+2ECh]
	mov ecx, [edx+154h]
	mov edx, eax
	sub edx, ecx
	shl edx, 10h
	mov eax, edx
	sar edx, 1Fh
	shl edx, 9
	sbb eax, edx
	sar eax, 9
	lea edx, [eax+10000h]

loc_4663CE:
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_4D84FC], eax
	mov eax, [ebp+2ECh]
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ebp+2B8h]
	mov ebx, eax
	test edi, edi
	jle loc_4668DA
	mov eax, edi

loc_466410:
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	cmp eax, 10000h
	jle loc_4668E3

loc_466430:
	mov eax, [ebp+2ECh]
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+2B8h]
	mov ebx, eax
	test edx, edx
	jle loc_46693C
	mov eax, edx

loc_466461:
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	cmp eax, 10000h
	jle loc_466945
	mov eax, 10000h

loc_466486:
	mov ecx, dword [dword_4D84FC]
	mov edx, eax
	mov eax, ecx

loc_466490:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword [dword_4D84FC], eax
	mov edx, 30A3h
	mov eax, dword [dword_513518]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, 100000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ecx, [ebp+2E4h]
	add ecx, eax
	cmp ecx, 7Fh
	jle loc_466992
	mov ecx, 7Fh

loc_4664E7:
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov esi, eax
	imul esi, ecx
	cmp dword [ebp+2B8h], 0
	jl loc_4669A5

loc_466508:
	test esi, esi
	jle loc_4669AC
	mov eax, esi

loc_466512:
	mov edi, [ebp+200h]
	mov [ebp+364h], eax
	cmp edi, 2
	jle loc_46658E
	mov eax, [ebp+2E4h]
	test eax, eax
	jle loc_4669B5

loc_466531:
	cmp eax, 40h
	jle loc_46658E
	mov edx, [ebp+2B8h]
	test edx, edx
	jle loc_4669BC
	mov eax, edx

loc_466546:
	cmp eax, 50000h
	jle loc_46658E
	mov ebx, [ebp+324h]
	cmp ebx, 140000h
	jge loc_466573
	lea eax, [ebx+20000h]
	cmp eax, 280000h
	jle loc_46656D
	mov eax, 280000h

loc_46656D:
	mov [ebp+324h], eax

loc_466573:
	mov eax, dword [dword_4D850C]
	mov edx, [ebp+364h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ebp+364h], eax

loc_46658E:
	mov edi, [ebp+2F4h]
	test edi, edi
	jle loc_4669C5
	mov eax, edi

loc_46659E:
	cmp eax, 2
	jl loc_466714
	mov eax, [ebp+2F4h]
	test eax, eax
	jle loc_4669CE

loc_4665B5:
	cmp eax, 5
	jz loc_466714
	mov edx, [ebp+2F4h]
	test edx, edx
	jle loc_4669D5
	mov eax, edx

loc_4665CE:
	cmp eax, 4
	jnz loc_4669EF
	cmp byte [ebp+2DAh], 0
	jbe loc_4669E5
	mov edi, [ebp+304h]
	cmp edi, 0A0000h
	jge loc_4669E5
	mov edx, 1999h
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jl loc_4669DE
	mov edx, 1999h
	mov eax, [ebp+304h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_466624:
	mov ebx, eax

loc_466626:
	mov eax, [ebp+21Ch]
	cmp dword [eax], 0Eh
	jz loc_466657
	mov edi, [ebp+2F4h]
	test edi, edi
	jle loc_466A21
	mov eax, edi

loc_466641:
	mov edx, [esp+eax*4]
	mov eax, dword [dword_4D84FC]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+30h], eax

loc_466657:
	test ecx, ecx
	jle loc_466A2A
	cmp dword [ebp+2F4h], 0
	jle loc_466A2A

loc_46666C:
	mov ecx, dword [dword_4D850C]

loc_466672:
	mov edx, [esp+30h]
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ebp+2F4h]
	test ebx, ebx
	jle loc_466A49
	mov edx, ebx

loc_466692:
	cmp edx, 2
	jnz loc_4666A5
	mov edx, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_4666A5:
	cmp dword [ebp+2F4h], 0
	jle loc_466A52
	lea ecx, [esi+eax]

loc_4666B5:
	mov ebx, ecx
	mov eax, [ebp+30Ch]
	mov edx, [ebp+2F4h]
	sub ebx, eax
	test edx, edx
	jle loc_466A5B
	mov eax, edx

loc_4666CF:
	mov edi, [ebp+2F4h]
	mov esi, [esp+eax*4+18h]
	cmp edi, 2
	jnz loc_4666E7
	cmp dword [ebp+2E0h], 0
	jle loc_4666F9

loc_4666E7:
	cmp dword [ebp+2F4h], 0FFFFFFFEh
	jnz loc_466706
	cmp dword [ebp+2E0h], 0
	jl loc_466706

loc_4666F9:
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax

loc_466706:
	cmp ebx, esi
	jle loc_466A64
	add esi, [ebp+30Ch]

loc_466714:
	mov edx, [ebp+2B8h]
	test edx, edx
	jle loc_466A82
	mov eax, edx

loc_466724:
	cmp eax, 10000h
	jge loc_466762
	cmp byte [ebp+2D7h], 32h
	jbe loc_466762
	cmp byte [ebp+2DAh], 1
	jz loc_466762
	mov ecx, [ebp+2ACh]
	cmp ecx, 0FFFFFAE2h
	jge loc_466A8B
	mov esi, [ebp+2E4h]

loc_466755:
	mov dword [ebp+2B8h], 0
	shl esi, 8

loc_466762:
	mov eax, [ebp+21Ch]
	cmp dword [eax], 0Eh
	jnz loc_466778
	cmp dword [ebp+2E4h], 0
	jnz loc_466778
	xor esi, esi

loc_466778:
	mov [ebp+368h], esi
	mov [ebp+30Ch], esi
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46678E:
	mov edx, 18000h
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	jmp loc_4662FB

loc_4667A6:
	mov eax, ecx
	neg eax
	jmp loc_46630B

loc_4667AF:
	mov eax, ecx
	neg eax
	jmp loc_46632B

loc_4667B8:
	mov ebx, [ebp+2B8h]
	cmp ebx, 140000h
	jle loc_466343
	cmp byte [ebp+2D7h], 80h
	jnb loc_466818
	mov edx, [ebp+2ECh]
	mov edx, [edx+15Ch]
	test ebx, ebx
	jle loc_466812

loc_4667E3:
	mov eax, ebx

loc_4667E5:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, 10000h
	mov ebx, eax
	mov eax, esi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	jmp loc_466341

loc_466812:
	mov eax, ebx
	neg eax
	jmp loc_4667E5

loc_466818:
	mov edx, [ebp+2ECh]
	mov edx, [edx+160h]
	test ebx, ebx
	jg loc_4667E3
	mov eax, ebx
	neg eax
	jmp loc_4667E5

loc_46682E:
	cmp ebx, 3
	jz loc_466352
	jmp loc_466363

loc_46683C:
	cmp dword [dword_4D8500], 0FFFFFFC0h
	jge loc_466852
	cmp dword [ebp+2F4h], 0FFFFFFFDh
	jz loc_46637D

loc_466852:
	mov edx, 0C000h
	mov eax, esi
	jmp loc_466490

loc_46685E:
	mov eax, edi
	neg eax
	jmp loc_46638D

loc_466867:
	mov eax, edx
	neg eax
	jmp loc_4663A8

loc_466870:
	mov eax, dword [dword_4D8500]
	test eax, eax
	jle loc_4668C3
	mov ecx, eax

loc_46687B:
	mov edx, [ebp+2ECh]
	mov eax, [edx+154h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, ecx
	sub edx, eax
	shl edx, 10h
	mov eax, edx
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	add eax, 8000h
	cmp eax, 10000h
	jle loc_4668C9

loc_4668B0:
	cmp eax, 10000h
	jle loc_4668BC
	mov eax, 10000h

loc_4668BC:
	mov edx, eax
	jmp loc_4663CE

loc_4668C3:
	mov ecx, eax
	neg ecx
	jmp loc_46687B

loc_4668C9:
	cmp eax, 0C000h
	jg loc_4668B0
	mov edx, 0C000h
	jmp loc_4663CE

loc_4668DA:
	mov eax, edi
	neg eax
	jmp loc_466410

loc_4668E3:
	mov eax, [ebp+2ECh]
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [ebp+2B8h]
	test eax, eax
	jle loc_466938

loc_46690E:
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	cmp eax, 8000h
	jg loc_466430
	mov eax, 8000h
	jmp loc_466486

loc_466938:
	neg eax
	jmp loc_46690E

loc_46693C:
	mov eax, edx
	neg eax
	jmp loc_466461

loc_466945:
	mov eax, [ebp+2ECh]
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [eax+198h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, [ebp+2B8h]
	mov ebx, eax
	test ecx, ecx
	jle loc_46698C
	mov eax, ecx

loc_466972:
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	jmp loc_466486

loc_46698C:
	mov eax, ecx
	neg eax
	jmp loc_466972

loc_466992:
	cmp ecx, 0FFFFFF81h
	jge loc_4664E7
	mov ecx, 0FFFFFF81h
	jmp loc_4664E7

loc_4669A5:
	neg esi
	jmp loc_466508

loc_4669AC:
	mov eax, esi
	neg eax
	jmp loc_466512

loc_4669B5:
	neg eax
	jmp loc_466531

loc_4669BC:
	mov eax, edx
	neg eax
	jmp loc_466546

loc_4669C5:
	mov eax, edi
	neg eax
	jmp loc_46659E

loc_4669CE:
	neg eax
	jmp loc_4665B5

loc_4669D5:
	mov eax, edx
	neg eax
	jmp loc_4665CE

loc_4669DE:
	xor eax, eax
	jmp loc_466624

loc_4669E5:
	mov ebx, 10000h
	jmp loc_466626

loc_4669EF:
	cmp byte [ebp+2DAh], 1
	jnz loc_466A12
	mov eax, dword [dword_4D8504]

loc_4669FD:
	cmp eax, 10000h
	jle loc_466624
	mov eax, 10000h
	jmp loc_466624

loc_466A12:
	mov ebx, dword [dword_4D8504]
	mov eax, dword [dword_4D8508]
	add eax, ebx
	jmp loc_4669FD

loc_466A21:
	mov eax, edi
	neg eax
	jmp loc_466641

loc_466A2A:
	test ecx, ecx
	jl loc_466A35
	xor ecx, ecx
	jmp loc_466672

loc_466A35:
	cmp dword [ebp+2F4h], 0
	jl loc_46666C
	xor ecx, ecx
	jmp loc_466672

loc_466A49:
	mov edx, ebx
	neg edx
	jmp loc_466692

loc_466A52:
	mov ecx, esi
	sub ecx, eax
	jmp loc_4666B5

loc_466A5B:
	mov eax, edx
	neg eax
	jmp loc_4666CF

loc_466A64:
	mov eax, esi
	neg eax
	cmp ebx, eax
	jge loc_466A7B
	mov eax, [ebp+30Ch]
	sub eax, esi
	mov esi, eax
	jmp loc_466714

loc_466A7B:
	mov esi, ecx
	jmp loc_466714

loc_466A82:
	mov eax, edx
	neg eax
	jmp loc_466724

loc_466A8B:
	cmp ecx, 51Eh
	jle loc_466762
	mov esi, [ebp+2E4h]
	neg esi
	jmp loc_466755
;sub_466280 endp

sub_466AB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov eax, [eax+2ECh]
	mov ebp, [esi+304h]
	xor edi, edi
	xor ecx, ecx
	mov eax, [eax+0FCh]
	mov [esp+0Ch], edi
	add eax, eax
	mov [esp+8], edi
	mov [esp+10h], eax
	cmp ebp, 0A0000h
	jl loc_466E98

loc_466AEB:
	mov [esp+4], eax
	mov eax, [esi+2F4h]
	test eax, eax
	jle loc_466EAC

loc_466AFD:
	cmp eax, 3
	jl loc_466B13
	mov eax, [esp+4]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+4], eax

loc_466B13:
	mov edx, 0CCCCh
	mov eax, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [esp+10h], eax
	mov edx, [edx+0F0h]
	mov eax, dword [dword_4D8508]
	shl edx, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebp, eax
	cmp byte [esi+2DAh], 1
	jnz loc_466EB3

loc_466B64:
	xor eax, eax
	mov ecx, [esi+2ECh]
	mov al, [esi+2D9h]
	mov edx, [ecx+eax*4+168h]
	mov eax, [esi+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, eax
	mov eax, [esi+2F0h]
	cmp ebp, eax
	jle loc_46719E
	add eax, 258h
	mov [esi+2F0h], eax
	cmp ebp, eax
	jge loc_467197

loc_466BC2:
	mov [esi+2F0h], ebp
	test ebx, ebx
	jle loc_4671B9
	sub edi, 64h

loc_466BD3:
	mov ecx, 1
	mov ebp, [esi+2F4h]
	mov [esp+0Ch], ecx
	cmp ebp, ecx
	jnz loc_466BF0
	mov dword [esi+2F4h], 0

loc_466BF0:
	mov dl, [esi+2D8h]
	mov dword [esi+2FCh], 0
	test dl, dl
	jz loc_4676C1

loc_466C08:
	cmp byte [esi+2DCh], 0
	jz loc_4676E8
	mov eax, [esi+2E4h]
	test eax, eax
	jle loc_4676D3
	mov dword [esi+2F4h], 4

loc_466C2D:
	mov ecx, 8000h
	mov byte [esi+2D8h], 80h
	mov dword [dword_4D8504], ecx

loc_466C3F:
	cmp dword [esi+2B8h], 0
	jl loc_46779D
	mov edx, [esp+4]
	mov eax, dword [dword_4D8504]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	neg ecx

loc_466C63:
	add [esp+8], ecx
	mov eax, dword [dword_512204]
	mov [esp], eax
	mov ebp, [esp]
	shl eax, 2
	add eax, ebp
	shl eax, 3
	mov [esp], eax
	mov eax, [esi+200h]
	mov ebp, [esp]
	shl eax, 2
	mov edx, [esp+10h]
	add eax, ebp
	add edx, 20000h
	mov eax, dword dword_4D8484[eax]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	neg eax
	cmp eax, edx
	jle loc_466CC9
	cmp dword [esi+200h], 3
	jge loc_4677B7
	cmp byte [esi+2DAh], 3
	jbe loc_4677B7

loc_466CC9:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, [esi+200h]
	shl edx, 2
	mov eax, dword dword_4D8484[edx+eax*8]
	mov edx, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	neg eax
	cmp eax, edx
	jle loc_46780C

loc_466D04:
	cmp dword [esi+200h], 3
	jge loc_46781E
	cmp byte [esi+2DAh], 3
	jbe loc_46781E

loc_466D1E:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, [esi+200h]
	shl edx, 2
	mov edx, dword dword_4D8484[edx+eax*8]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov ebp, [esi+2FCh]
	mov ecx, eax
	cmp ebp, 3
	jnz loc_466D6C
	cmp dword [esi+200h], 2
	jle loc_466D6C
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, eax

loc_466D6C:
	mov al, [esi+2DAh]
	cmp al, 1
	jnz loc_46788C
	xor eax, eax
	mov ebp, [esi+2ECh]
	mov al, [esi+2D9h]
	mov edx, [ebp+eax*4+168h]
	mov eax, ecx

loc_466D91:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	add edi, eax
	test edi, edi
	jl loc_4678A4

loc_466DBB:
	test edi, edi
	jle loc_466DC7
	test ebx, ebx
	jle loc_4678BE

loc_466DC7:
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebp, [esp+0Ch]
	mov edi, eax
	mov eax, ebx
	add ebx, edi
	test ebp, ebp
	jnz loc_466E00
	test edi, edi
	jl loc_4678D0

loc_466DEC:
	test edi, edi
	jle loc_466DF8
	test eax, eax
	jl loc_4678E7

loc_466DF8:
	test edi, edi
	jl loc_4678F6

loc_466E00:
	test edi, edi
	jle loc_46790C
	mov eax, [esi+2ECh]
	mov edx, [eax+0F0h]
	cmp ebx, edx
	jge loc_467905

loc_466E1C:
	mov eax, ebx

loc_466E1E:
	mov ebx, [esi+2ECh]
	mov ebx, [ebx+0F0h]
	shl eax, 10h
	shl ebx, 10h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, eax
	cmp byte [esi+2DAh], 1
	jnz loc_467927
	mov eax, [esi+2ECh]
	xor ebx, ebx
	mov edx, [eax+0F0h]
	mov bl, [esi+2D9h]

loc_466E68:
	shl edx, 10h
	mov eax, [eax+ebx*4+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+304h], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_466E98:
	mov edx, 0C000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	jmp loc_466AEB

loc_466EAC:
	neg eax
	jmp loc_466AFD

loc_466EB3:
	cmp word [esi+14Ch], 0
	jnz loc_466B64
	mov eax, [esi+1E8h]
	shl eax, 6
	cmp dword dword_512278[eax], 1
	jnz loc_466EDA
	mov eax, esi
	call sub_46AB20

loc_466EDA:
	xor eax, eax
	mov ebx, [esi+2ECh]
	mov al, [esi+2DAh]
	mov edx, [ebx+eax*4+168h]
	mov eax, [esi+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, eax
	test eax, eax
	jl loc_4671C7

loc_466F1F:
	mov dh, [esi+2DAh]
	cmp dh, 2
	jnz loc_467254

loc_466F2E:
	cmp byte [esi+2D9h], 1
	jnz loc_466F49
	mov al, [esi+2DAh]
	mov [esi+2F0h], ebp
	mov [esi+2D9h], al

loc_466F49:
	mov eax, [esi+2F0h]
	mov edi, [esi+2F4h]
	sub eax, ebx
	cmp edi, 1
	jnz loc_466F66
	mov dword [esi+2F4h], 0

loc_466F66:
	cmp eax, 5DCh
	jle loc_467293
	cmp byte [esi+2DAh], 4
	ja loc_467293
	cmp dword [dword_4D8508], 8000h
	jle loc_467293
	mov edi, [esi+2F4h]
	test edi, edi
	jle loc_467261
	mov edx, edi

loc_466F9E:
	cmp edx, 4
	jz loc_467293
	cmp dword [esi+284h], 0
	jnz loc_467293
	mov dh, [esi+2DAh]
	mov dword [esi+2F4h], 1
	cmp dh, 2
	jnz loc_466FEE
	cmp dword [esi+304h], 50000h
	jle loc_466FEE
	mov edi, [esi+2E4h]
	cmp edi, 20h
	jle loc_46726A
	mov dword [esi+2F4h], 2

loc_466FEE:
	xor edx, edx
	mov eax, 100h
	mov dl, [esi+2D7h]
	sub eax, edx
	mov edx, eax
	shl eax, 2
	add edx, eax
	shl edx, 2
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov dword [esi+328h], 280000h
	mov dl, [esi+2DAh]
	add eax, 0Ah
	cmp dl, 3
	jnz loc_467282
	add eax, 2Dh

loc_467033:
	mov edx, dword [dword_512204]
	lea edi, 0[edx*4]
	add edi, edx
	mov edx, [esi+200h]
	shl edi, 3
	shl edx, 2
	add edx, edi
	shl eax, 10h
	mov edx, dword dword_4D8484[edx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [esi+2F0h]
	sub edx, eax
	mov [esi+2F0h], edx

loc_46707E:
	mov edi, [esi+2ECh]
	mov eax, [esi+2F0h]
	cmp eax, [edi+0F0h]
	jle loc_4672F8
	mov edx, [edi+4]
	xor eax, eax
	dec edx
	mov al, [esi+2DAh]
	cmp eax, edx
	jge loc_4672F8
	cmp dword [esp+0Ch], 0
	jnz loc_46713F
	mov ecx, [edi+eax*4+1A8h]
	mov eax, [edi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, ecx
	mov eax, [edi+eax*4+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_512204]
	mov ecx, eax
	lea eax, 0[edx*4]
	add edx, eax
	shl edx, 3
	mov eax, [esi+200h]
	mov eax, dword dword_4D8484[edx+eax*4]
	mov edx, 400000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [esi+2E4h]
	cmp eax, edx
	jge loc_4672DF
	mov dword [esi+2F4h], 3

loc_46713F:
	cmp byte [esi+2DCh], 0
	jz loc_467155
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, eax

loc_467155:
	xor eax, eax
	mov edi, [esi+2ECh]
	mov al, [esi+2DAh]
	mov edx, [edi+eax*4+168h]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [edi+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esp+8], ecx
	mov edi, eax
	jmp loc_466BF0

loc_467197:
	mov ebp, eax
	jmp loc_466BC2

loc_46719E:
	lea edx, [eax-12Ch]
	mov [esi+2F0h], edx
	cmp ebp, edx
	jge loc_466BC2
	mov ebp, edx
	jmp loc_466BC2

loc_4671B9:
	jge loc_466BD3
	add edi, 64h
	jmp loc_466BD3

loc_4671C7:
	mov edi, 10000h
	mov eax, [esi+328h]
	mov byte [esi+2D8h], 0FFh
	mov dword [dword_4D8504], edi
	cmp eax, 1E0000h
	jge loc_4671FD
	add eax, 40000h
	cmp eax, 280000h
	jle loc_4671F7
	mov eax, 280000h

loc_4671F7:
	mov [esi+328h], eax

loc_4671FD:
	mov dword [esp+0Ch], 1
	cmp byte [esi+2DAh], 0
	jnz loc_466F1F
	cmp dword [esi+2B8h], 0A0000h
	jle loc_466F1F
	mov eax, [esi+2E4h]
	cmp eax, 10h
	jle loc_46723C
	mov dword [esi+2F4h], 4
	jmp loc_466F1F

loc_46723C:
	cmp eax, 0FFFFFFF0h
	jge loc_466F1F
	mov dword [esi+2F4h], 0FFFFFFFCh
	jmp loc_466F1F

loc_467254:
	test dh, dh
	jz loc_466F2E
	jmp loc_466F49

loc_467261:
	mov edx, edi
	neg edx
	jmp loc_466F9E

loc_46726A:
	cmp edi, 0FFFFFFE0h
	jge loc_466FEE
	mov dword [esi+2F4h], 0FFFFFFFEh
	jmp loc_466FEE

loc_467282:
	cmp dl, 4
	jnz loc_467033
	add eax, 4Bh
	jmp loc_467033

loc_467293:
	cmp eax, 0C8h
	jle loc_4672A9
	sub dword [esi+2F0h], 0C8h
	jmp loc_46707E

loc_4672A9:
	cmp eax, 0FFFFFF38h
	jge loc_4672BF
	add dword [esi+2F0h], 0C8h
	jmp loc_46707E

loc_4672BF:
	test ebx, ebx
	jle loc_4672D0
	mov eax, ebx
	mov [esi+2F0h], eax
	jmp loc_46707E

loc_4672D0:
	mov eax, ebx
	neg eax
	mov [esi+2F0h], eax
	jmp loc_46707E

loc_4672DF:
	neg eax
	cmp eax, edx
	jle loc_46713F
	mov dword [esi+2F4h], 0FFFFFFFDh
	jmp loc_46713F

loc_4672F8:
	cmp byte [esi+2DBh], 0
	jbe loc_467308
	xor ecx, ecx
	jmp loc_46713F

loc_467308:
	cmp byte [esi+2D7h], 0
	jbe loc_4675E6
	mov eax, ebp
	sub eax, ebx
	test eax, eax
	jle loc_46738E

loc_46731D:
	cmp eax, 0FAh
	jl loc_467392
	cmp ebp, ebx
	jg loc_4673EC
	jge loc_46713F
	xor eax, eax
	mov edx, [esi+2ECh]
	mov al, [esi+2DAh]
	mov ecx, [edx+eax*4+1A8h]
	mov eax, [esi+2F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, eax
	mov eax, esi
	call sub_46B980
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov edx, [edx+144h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	neg ecx
	jmp loc_46713F

loc_46738E:
	neg eax
	jmp loc_46731D

loc_467392:
	mov eax, [esi+2ECh]
	xor ecx, ecx
	mov edx, [eax+0F0h]
	mov cl, [esi+2DAh]
	shl edx, 10h
	mov eax, [eax+ecx*4+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, ebp
	mov edx, [esi+2ECh]
	sub eax, ebx
	mov edx, [edx+164h]
	shl eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	jmp loc_46713F

loc_4673EC:
	xor eax, eax
	mov edx, [esi+2ECh]
	mov al, [esi+2DAh]
	mov ecx, [edx+eax*4+1A8h]
	mov eax, [esi+2F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, eax
	mov eax, esi
	call sub_46B980
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, dword [dword_4D8508]
	mov edx, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2F4h]
	mov ecx, eax
	test edx, edx
	jnz loc_4674D8
	mov edx, dword [dword_512204]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, [esi+200h]
	shl eax, 3
	shl edx, 2
	add edx, eax
	mov eax, dword [dword_4D8508]
	cmp eax, dword dword_4D8484[edx]
	jle loc_4674D8
	cmp dword [esi+200h], 2
	jle loc_4674D8
	cmp byte [esi+2DAh], 3
	ja loc_4674D8
	mov eax, [esi+2E4h]
	cmp eax, 40h
	jle loc_467563
	mov dword [esi+2F4h], 2

loc_4674B2:
	mov edi, [esi+328h]
	cmp edi, 140000h
	jge loc_4674D8
	lea eax, [edi+20000h]
	cmp eax, 280000h
	jle loc_4674D2
	mov eax, 280000h

loc_4674D2:
	mov [esi+328h], eax

loc_4674D8:
	mov ebp, [esi+2F4h]
	test ebp, ebp
	jle loc_467586
	mov eax, ebp

loc_4674E8:
	cmp eax, 3
	jnz loc_46759D
	mov eax, [esi+30Ch]
	add eax, eax
	test eax, eax
	jle loc_46758F

loc_467501:
	mov edi, dword [dword_4D8508]
	mov edx, eax
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [eax+10000h]
	cmp edx, 30000h
	jge loc_467596

loc_467523:
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax

loc_467531:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*4]
	add edx, eax
	shl edx, 3
	mov eax, [esi+200h]
	mov edx, dword dword_4D8484[edx+eax*4]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	jmp loc_46713F

loc_467563:
	cmp eax, 0FFFFFFC0h
	jge loc_467577
	mov dword [esi+2F4h], 0FFFFFFFEh
	jmp loc_4674B2

loc_467577:
	mov dword [esi+2F4h], 1
	jmp loc_4674B2

loc_467586:
	mov eax, ebp
	neg eax
	jmp loc_4674E8

loc_46758F:
	neg eax
	jmp loc_467501

loc_467596:
	mov edx, 30000h
	jmp loc_467523

loc_46759D:
	mov eax, [esi+2F4h]
	test eax, eax
	jle loc_4675CB

loc_4675A7:
	cmp eax, 1
	jz loc_4675C1
	mov edx, [esi+2F4h]
	test edx, edx
	jle loc_4675CF
	mov eax, edx
	cmp eax, 2
	jnz loc_467531

loc_4675C1:
	mov edx, 8000h
	jmp loc_467523

loc_4675CB:
	neg eax
	jmp loc_4675A7

loc_4675CF:
	mov eax, edx
	neg eax
	cmp eax, 2
	jnz loc_467531
	mov edx, 8000h
	jmp loc_467523

loc_4675E6:
	mov ecx, [esi+2B8h]
	mov edx, 1999h
	test ecx, ecx
	jle loc_467688
	mov eax, ecx

loc_4675FB:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	xor eax, eax
	mov ecx, [esi+2ECh]
	mov al, [esi+2DAh]
	mov ecx, [ecx+eax*4+1A8h]
	mov eax, [esi+2F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, eax
	mov eax, esi
	call sub_46B980
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [esi+2B8h]
	mov ecx, eax
	test ebp, ebp
	jle loc_467691
	cmp byte [esi+2DAh], 0
	jnz loc_467691

loc_467659:
	mov edx, [esi+2ECh]
	mov eax, ecx
	mov edx, [edx+144h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax

loc_467673:
	mov edx, ecx
	mov eax, edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	jmp loc_46713F

loc_467688:
	mov eax, ecx
	neg eax
	jmp loc_4675FB

loc_467691:
	cmp dword [esi+2B8h], 0
	jge loc_4676A3
	cmp byte [esi+2DAh], 2
	jnb loc_467659

loc_4676A3:
	mov edx, [esi+2ECh]
	mov eax, ecx
	mov edx, [edx+144h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	neg ecx
	jmp loc_467673

loc_4676C1:
	cmp byte [esi+2DCh], 0
	jnz loc_466C08
	jmp loc_466DC7

loc_4676D3:
	jge loc_466C2D
	mov dword [esi+2F4h], 0FFFFFFFCh
	jmp loc_466C2D

loc_4676E8:
	cmp byte [esi+2D8h], 20h
	jbe loc_466C3F
	cmp dword [esi+284h], 0
	jnz loc_466C3F
	mov edx, dword [dword_512204]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, [esi+200h]
	shl edx, 2
	mov eax, dword dword_4D8484[edx+eax*8]
	mov edx, 400000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	cmp dword [esi+30Ch], 0
	jle loc_467766
	cmp eax, [esi+2E4h]
	jge loc_467766
	cmp dword [dword_4D8500], 19h
	jle loc_467766
	mov dword [esi+2F4h], 3
	jmp loc_466C3F

loc_467766:
	cmp dword [esi+30Ch], 0
	jge loc_466C3F
	neg eax
	cmp eax, [esi+2E4h]
	jle loc_466C3F
	cmp dword [dword_4D8500], 0FFFFFFE7h
	jge loc_466C3F
	mov dword [esi+2F4h], 0FFFFFFFDh
	jmp loc_466C3F

loc_46779D:
	mov edx, [esp+4]
	mov eax, dword [dword_4D8504]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	jmp loc_466C63

loc_4677B7:
	mov eax, [esi+304h]
	test eax, eax
	jle loc_467808

loc_4677C1:
	cmp eax, 3333h
	jle loc_466CC9
	mov edx, [esi+2FCh]
	inc edx
	mov ebp, [esi+324h]
	mov [esi+2FCh], edx
	cmp ebp, 1E0000h
	jge loc_466CC9
	lea eax, [ebp+40000h]
	cmp eax, 280000h
	jle loc_4677FD
	mov eax, 280000h

loc_4677FD:
	mov [esi+324h], eax
	jmp loc_466CC9

loc_467808:
	neg eax
	jmp loc_4677C1

loc_46780C:
	cmp byte [esi+2DCh], 0
	jnz loc_466D04
	jmp loc_466D1E

loc_46781E:
	mov eax, [esi+304h]
	test eax, eax
	jle loc_46785B

loc_467828:
	cmp eax, 3333h
	jle loc_466D1E
	cmp dword [esi+2F4h], 1
	jz loc_467843
	add dword [esi+2FCh], 2

loc_467843:
	cmp byte [esi+2DCh], 0
	jz loc_46785F
	mov dword [esi+328h], 280000h
	jmp loc_466D1E

loc_46785B:
	neg eax
	jmp loc_467828

loc_46785F:
	mov eax, [esi+328h]
	cmp eax, 1E0000h
	jge loc_466D1E
	add eax, 40000h
	cmp eax, 280000h
	jle loc_467881
	mov eax, 280000h

loc_467881:
	mov [esi+328h], eax
	jmp loc_466D1E

loc_46788C:
	xor edx, edx
	mov ebp, [esi+2ECh]
	mov dl, al
	mov eax, ecx
	mov edx, [ebp+edx*4+168h]
	jmp loc_466D91

loc_4678A4:
	test ebx, ebx
	jl loc_466DBB
	jnz loc_4678B3
	mov ebx, 1

loc_4678B3:
	xor ecx, ecx
	mov [esp+0Ch], ecx
	jmp loc_466DC7

loc_4678BE:
	jnz loc_4678C5
	mov ebx, 0FFFFFFFFh

loc_4678C5:
	xor edx, edx
	mov [esp+0Ch], edx
	jmp loc_466DC7

loc_4678D0:
	test eax, eax
	jle loc_466DEC
	test ebx, ebx
	jge loc_466DEC
	xor ebx, ebx
	jmp loc_466E00

loc_4678E7:
	test ebx, ebx
	jle loc_466DF8
	xor ebx, ebx
	jmp loc_466E00

loc_4678F6:
	test eax, eax
	jnz loc_466E00
	xor ebx, ebx
	jmp loc_466E00

loc_467905:
	mov ebx, edx
	jmp loc_466E1C

loc_46790C:
	mov eax, [esi+2ECh]
	mov eax, [eax+0F0h]
	neg eax
	cmp eax, ebx
	jg loc_466E1E
	jmp loc_466E1C

loc_467927:
	mov eax, [esi+2ECh]
	xor ebx, ebx
	mov edx, [eax+0F0h]
	mov bl, [esi+2DAh]
	jmp loc_466E68
;sub_466AB0 endp

sub_467940: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, [edx+204h]
	mov eax, [eax+148h]
	sub eax, ecx
	test eax, eax
	jle loc_467997

loc_467956:
	mov ecx, 400h
	sub ecx, eax
	cmp eax, ecx
	jle loc_467963
	mov eax, ecx

loc_467963:
	cmp eax, 100h
	jle loc_4679A3
	mov eax, [edx+14h]
	sub eax, 0Fh
	test eax, eax
	jl loc_46799B

loc_467974:
	call sub_463310

loc_467979:
	mov edx, [edx+148h]
	sub eax, edx
	mov dword [dword_4D8500], eax
	cmp eax, 200h
	jg loc_4679BE
	cmp eax, 0FFFFFE00h
	jl loc_4679CD
	pop edx
	pop ecx
	ret

loc_467997:
	neg eax
	jmp loc_467956

loc_46799B:
	add eax, dword [dword_5118A0]
	jmp loc_467974

loc_4679A3:
	push ebx
	mov eax, [edx+14h]
	mov ebx, dword [dword_5118A0]
	add eax, 0Fh
	cmp eax, ebx
	jl loc_4679B6
	sub eax, ebx

loc_4679B6:
	call sub_463310
	pop ebx
	jmp loc_467979

loc_4679BE:
	lea ecx, [eax-400h]
	mov dword [dword_4D8500], ecx
	pop edx
	pop ecx
	ret

loc_4679CD:
	lea edx, [eax+400h]
	mov dword [dword_4D8500], edx
	pop edx
	pop ecx
	ret
;sub_467940 endp

sub_4679E0: ;SUBROUTINE
	push edx
	push esi
	mov edx, eax
	test byte [byte_512219], 8
	jz loc_4679FD
	cmp byte [edx+2DDh], 0
	jz loc_4679FD
	mov eax, edx
	call sub_467A90

loc_4679FD:
	cmp dword [edx+100h], 199Ah
	jge loc_467A72
	mov dword [edx+310h], 0
	mov dword [edx+324h], 0
	mov dword [edx+328h], 0
	mov esi, [edx+2F0h]
	mov dword [edx+2F4h], 0
	cmp esi, 1F4h
	jle loc_467A5C
	push edi
	lea edi, [esi-1F4h]
	mov [edx+2F0h], edi
	pop edi

loc_467A4D:
	cmp dword [edx+15Ch], 8000h
	jl loc_467A68
	pop esi
	pop edx
	ret

loc_467A5C:
	mov dword [edx+2F0h], 0
	jmp loc_467A4D

loc_467A68:
	mov eax, edx
	call sub_46A180
	pop esi
	pop edx
	ret

loc_467A72:
	cmp dword [dword_512204], 0
	jz loc_467A85
	mov eax, edx
	call sub_464F40
	pop esi
	pop edx
	ret

loc_467A85:
	mov eax, edx
	call sub_467C10
	pop esi
	pop edx
	ret
;sub_4679E0 endp

sub_467A90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ebx, eax
	mov ecx, 280000h
	mov esi, [eax+2E8h]
	xor edx, edx
	mov [esp+14h], ecx
	mov [esp+10h], edx
	test esi, esi
	jnz loc_467B13
	cmp dword [eax+280h], 2
	jz loc_467B13
	cmp dword [dword_540F44], 0
	jz loc_467B13
	test byte [eax+1F4h], 4
	jz loc_467B13
	cmp dword [ebx+17Ch], 0
	jnz loc_467B13
	mov edx, dword [dword_511E3C]
	xor edi, edi
	test edx, edx
	jle loc_467B07
	mov eax, ebx
	add eax, 9Ch
	mov [esp+0Ch], eax

loc_467AEF:
	mov ecx, dword dword_511B48[esi]
	cmp ecx, ebx
	jnz loc_467B1D

loc_467AF9:
	mov ecx, dword [dword_511E3C]
	inc edi
	add esi, 4
	cmp edi, ecx
	jl loc_467AEF

loc_467B07:
	mov ebx, [esp+10h]
	test ebx, ebx
	jnz loc_467BF1

loc_467B13:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_467B1D:
	cmp byte [ecx+8Dh], 0
	jz loc_467AF9
	cmp word [ecx+14Ch], 0
	jnz loc_467AF9
	mov eax, [ecx+9Ch]
	mov ebp, [ebx+9Ch]
	sub eax, ebp
	mov [esp], eax
	mov eax, [ecx+0A0h]
	mov edx, [ebx+0A0h]
	sub eax, edx
	mov [esp+4], eax
	mov eax, [ecx+0A4h]
	mov ebp, [ebx+0A4h]
	sub eax, ebp
	mov [esp+8], eax
	mov eax, esp
	call sub_45E810
	mov edx, [esp]
	mov eax, [ebx+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebp, eax
	mov eax, [ebx+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebp, eax
	mov eax, [ebx+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebp
	cmp eax, 0CCCCh
	jle loc_467AF9
	mov edx, [esp+0Ch]
	lea eax, [ecx+9Ch]
	call sub_45EEB0
	test eax, eax
	jle loc_467AF9
	cmp eax, [esp+14h]
	jge loc_467AF9
	cmp eax, 280000h
	jge loc_467AF9
	mov [esp+10h], ecx
	mov [esp+14h], eax
	jmp loc_467AF9

loc_467BF1:
	mov eax, ebx
	call sub_4540A0
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_467A90 endp

sub_467C10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 9Ch
	mov esi, eax
	mov dword [eax+2A4h], 0
	mov dword [eax+2A8h], 0
	mov dword [eax+2ACh], 0
	mov dl, byte [byte_512218]
	mov edi, [eax+2ECh]
	mov eax, [eax+184h]
	test dl, 8
	jnz loc_468AAD
	mov al, byte byte_4D84D4[eax]

loc_467C5D:
	and eax, 0FFh
	mov [esi+200h], eax
	mov edx, [esi+188h]
	mov eax, [esi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+18Ch]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+190h]
	add ecx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+194h]
	add ecx, eax
	mov eax, [esi+0A8h]
	mov [esi+2B0h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+198h]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+19Ch]
	add ecx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A0h]
	add ecx, eax
	mov eax, [esi+0A8h]
	mov [esi+2B4h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+1A4h]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A8h]
	add ecx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+188h]
	add ecx, eax
	mov eax, [esi+0E8h]
	mov [esi+2B8h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+18Ch]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+190h]
	add ecx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov [esi+2BCh], ecx
	mov edx, [esi+194h]
	mov eax, [esi+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+198h]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+19Ch]
	add ecx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A0h]
	add ecx, eax
	mov eax, [esi+0E8h]
	mov [esi+2C0h], ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+1A4h]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A8h]
	add ecx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov edx, [esi+2B8h]
	mov [esi+2C4h], ecx
	cmp edx, 50000h
	jle loc_468AB8
	mov ebx, edx
	mov eax, [esi+2B0h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esi+310h], eax

loc_467E71:
	mov ecx, [esi+2B8h]
	test ecx, ecx
	jle loc_468AC7
	mov edx, ecx

loc_467E81:
	mov ebx, [esi+2B0h]
	test ebx, ebx
	jle loc_468AD0
	mov eax, ebx

loc_467E91:
	call sub_45ED40
	mov ebp, [esi+2B8h]
	mov [esi+304h], eax
	test ebp, ebp
	jl loc_468AD9

loc_467EAA:
	mov edx, [esi+2B0h]
	shl edx, 5
	neg edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esi+2B4h]
	shl edx, 5
	neg edx
	mov [esp+84h], eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esi+2B8h]
	shl edx, 5
	neg edx
	mov [esp+88h], eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+8Ch], eax
	mov eax, [esi+0ECh]
	mov edx, [edi+1CCh]
	shl eax, 5
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [esi+304h]
	neg ecx
	cmp edx, 2CA45Ah
	jge loc_468AE6
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1

loc_467F35:
	mov ecx, eax

loc_467F37:
	mov edx, [esi+188h]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+18Ch]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+190h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+194h]
	add ebx, eax
	xor eax, eax
	mov dword [dword_513518], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+198h]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+19Ch]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A0h]
	add ebx, eax
	xor eax, eax
	mov dword [dword_51351C], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+1A4h]
	mov eax, 0FFF60000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A8h]
	add ebx, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esp+84h]
	add eax, ecx
	mov [esp+10h], eax
	mov eax, [esp+88h]
	mov [esp+14h], eax
	mov eax, [esp+8Ch]
	mov [esp+18h], eax
	mov eax, [esp+84h]
	sub eax, ecx
	mov [esp+40h], eax
	mov eax, [esp+88h]
	mov [esp+44h], eax
	mov eax, [esp+8Ch]
	mov edx, 30A3h
	mov [esp+48h], eax
	mov eax, esi
	mov dword [dword_513520], ebx
	call sub_46A620
	mov eax, dword [dword_513518]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, 80000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	add eax, [esi+2E4h]
	cmp eax, 7Fh
	jle loc_468B2F
	mov eax, 7Fh

loc_468099:
	mov edx, [edi+12Ch]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov [esp+0Ch], eax
	mov ecx, [esi+2B8h]
	cmp ecx, 3C0000h
	jle loc_4680F1
	mov edx, 444h
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, [esp+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esp+0Ch], eax

loc_4680F1:
	mov ebp, 1
	mov edx, [esp+0Ch]
	xor ebx, ebx
	mov [esp+28h], ebp
	mov [esp+58h], ebx
	mov [esp+3Ch], ebx
	test edx, edx
	jz loc_4681E7
	mov ecx, [esi+2B8h]
	test ecx, ecx
	jle loc_468B42
	mov eax, ecx

loc_468120:
	cmp eax, 10000h
	jge loc_4681E7
	cmp byte [esi+2D7h], 20h
	jnb loc_4681E7
	cmp byte [esi+2DAh], 1
	jz loc_4681E7
	mov eax, 0E666h
	mov edx, [esi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0ACh]
	mov [esi+0A8h], eax
	mov eax, 0E666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0B0h]
	mov [esi+0ACh], eax
	mov eax, 0E666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0E8h]
	mov [esi+0B0h], eax
	mov eax, 0E666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0ECh]
	mov [esi+0E8h], eax
	mov eax, 0E666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0F0h]
	mov [esi+0ECh], eax
	mov eax, 0E666h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+0F0h], eax

loc_4681E7:
	mov eax, esi
	call sub_469820
	mov edx, [edi+0F8h]
	mov ecx, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esp], eax
	mov [esp+30h], ecx
	cmp word [esi+14Ch], 0
	jz loc_46822B
	mov edx, [esi+2ECh]
	mov eax, [esi+150h]
	cmp eax, [edx+14Ch]
	jg loc_468B4B

loc_46822B:
	mov ebp, [esi+2E8h]
	test ebp, ebp
	jnz loc_468B4B
	mov [esi+284h], ebp
	mov eax, dword [dword_4D8504]
	mov edx, [edi+0FCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, [esi+2B8h]
	test eax, eax
	jle loc_468B6C

loc_468264:
	shl eax, 5
	cmp edx, eax
	jle loc_468B7C
	mov edx, [esi+2B8h]
	test edx, edx
	jle loc_468B73
	mov eax, edx

loc_46827F:
	shl eax, 5

loc_468282:
	mov ebx, [esi+2B8h]
	mov ecx, eax
	test ebx, ebx
	jle loc_468290
	neg ecx

loc_468290:
	mov edx, [esi+21Ch]
	mov ebp, [edi+100h]
	mov edx, [edx+28h]
	mov eax, ecx
	add edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp]
	mov ebx, [esp+30h]
	sub ecx, eax
	add edx, eax
	add ebx, ecx
	mov eax, dword [dword_51351C]
	mov [esp], edx
	mov [esp+30h], ebx
	neg eax
	mov edx, [edi+138h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, esi
	call sub_469E40
	mov edx, dword [dword_513514]
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	test eax, eax
	jl loc_468AA0
	mov edx, [edi+128h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, [esi+320h]
	mov ecx, eax
	test ebp, ebp
	jl loc_468B83

loc_46831D:
	mov eax, ecx
	mov edx, [esi+320h]
	sub eax, edx
	mov [esp+4], eax
	mov edx, [esp+4]
	mov eax, dword [dword_513524]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	sub ebx, ecx
	mov eax, [esi+320h]
	add eax, ebx
	mov [esp+34h], eax
	mov edx, [esp+34h]
	mov eax, dword [dword_513510]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esp
	mov [esp+34h], eax
	mov eax, esi
	mov dword [esi+2FCh], 0
	call sub_468DF0
	lea edx, [esp+30h]
	mov eax, esi
	call sub_468DF0
	mov eax, [esp+24h]
	mov ecx, [esp+54h]
	add eax, ecx
	mov [esi+2ACh], eax
	mov eax, [esp+1Ch]
	mov ebx, [esp+4Ch]
	add eax, ebx
	mov [esi+2A4h], eax
	mov edx, [edi+1D4h]
	mov eax, [esi+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 1999h
	mov [esi+2ACh], eax
	mov eax, dword [dword_513520]
	mov dword [esi+2A8h], 0
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [edi+140h]
	mov eax, [esi+2ACh]
	neg ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	xor ebp, ebp
	mov [esi+320h], eax
	mov [esp+90h], ebp
	mov eax, [esp+1Ch]
	mov edx, [edi+1D0h]
	mov edi, [esp+4Ch]
	mov [esp+98h], ebp
	sub eax, edi
	mov ecx, 0FFFFFFFFh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2B8h]
	mov [esp+94h], eax
	test edx, edx
	jle loc_468518
	mov ebx, [esi+310h]
	test ebx, ebx
	jle loc_468B99
	mov eax, ebx

loc_468455:
	cmp eax, 0CCCh
	jle loc_468518
	mov edi, [esi+2F4h]
	test edi, edi
	jle loc_468BA2
	mov eax, edi

loc_468470:
	cmp eax, 1
	jl loc_468BF1
	cmp byte [esi+2DCh], 0
	jnz loc_468BF1
	mov ebp, [esi+2B8h]
	mov edx, 8000h
	test ebp, ebp
	jle loc_468BAB
	mov eax, ebp

loc_46849B:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	test edx, edx
	jl loc_468BB4
	mov eax, [esi+2B8h]
	mov edx, 8000h
	test eax, eax
	jle loc_468BBB

loc_4684C7:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	mov eax, edx

loc_4684DA:
	mov ebx, [esi+2ECh]
	mov edx, [esi+2C0h]
	cmp edx, [ebx+14Ch]
	jle loc_468BC2
	cmp dword [esp+94h], 0
	jle loc_468BC2

loc_468500:
	mov edx, [esp+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+94h], eax

loc_468518:
	lea edx, [esp+60h]
	lea eax, [esi+188h]
	call sub_49D890
	mov eax, esi
	xor edx, edx
	call sub_453670
	mov edx, [esp+60h]
	mov eax, [esi+2A4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ebx, eax
	mov eax, [esi+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+68h]
	add ebx, eax
	mov eax, [esi+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+28Ch], ebx
	mov eax, [esi+2A4h]
	mov edx, [esp+6Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+70h]
	mov ebx, eax
	mov eax, [esi+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+74h]
	add ebx, eax
	mov eax, [esi+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+290h], ebx
	mov eax, [esi+2A4h]
	mov edx, [esp+78h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+7Ch]
	mov ebx, eax
	mov eax, [esi+2A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+80h]
	add ebx, eax
	mov eax, [esi+2ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+294h], ebx
	mov eax, [esp+90h]
	mov edx, [esp+60h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ebx, eax
	mov eax, [esp+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+68h]
	add ebx, eax
	mov eax, [esp+98h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+298h], ebx
	mov edx, [esp+6Ch]
	mov eax, [esp+90h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+70h]
	mov ebx, eax
	mov eax, [esp+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+74h]
	add ebx, eax
	mov eax, [esp+98h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+29Ch], ebx
	mov eax, [esp+90h]
	mov edx, [esp+78h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+7Ch]
	mov ebx, eax
	mov eax, [esp+94h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+80h]
	add ebx, eax
	mov eax, [esp+98h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [esi+28Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov ebp, [esi+0A8h]
	add ebp, eax
	mov eax, [esi+290h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, [esi+0ACh]
	add edx, eax
	mov eax, [esi+294h]
	mov [esi+0ACh], edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov [esi+2A0h], ebx
	mov ebx, [esi+0B0h]
	add ebx, eax
	mov eax, [esi+298h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edi, [esi+0E8h]
	add edi, eax
	mov eax, [esi+29Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov [esi+0A8h], ebp
	mov ebp, [esi+0ECh]
	add ebp, eax
	mov eax, [esi+2A0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov [esi+0B0h], ebx
	mov [esi+0E8h], edi
	mov edx, [esi+0F0h]
	mov [esi+0ECh], ebp
	add edx, eax
	mov [esi+0F0h], edx
	test ecx, ecx
	jle loc_46899A
	mov edx, [esi+188h]
	mov eax, [esi+0E8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+18Ch]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+190h]
	add ebx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+194h]
	add ebx, eax
	mov eax, [esi+0E8h]
	mov [esi+2BCh], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [esi+198h]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+19Ch]
	add edi, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A0h]
	add edi, eax
	mov eax, [esi+0E8h]
	mov [esi+2C0h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+1A4h]
	mov eax, [esi+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A8h]
	add ebx, eax
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ecx
	add ebx, eax
	mov eax, [esi+2C0h]
	mov [esi+2C4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+2C0h], eax
	mov edx, [esp+60h]
	mov eax, [esi+2BCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+64h]
	mov ecx, eax
	mov eax, [esi+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+68h]
	add ecx, eax
	mov eax, [esi+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov [esi+0E8h], ecx
	mov edx, [esp+6Ch]
	mov eax, [esi+2BCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+70h]
	mov ecx, eax
	mov eax, [esi+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+74h]
	add ecx, eax
	mov eax, [esi+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov [esi+0ECh], ecx
	mov eax, [esi+2BCh]
	mov edx, [esp+78h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+7Ch]
	mov ecx, eax
	mov eax, [esi+2C0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+80h]
	add ecx, eax
	mov eax, [esi+2C4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov [esi+0F0h], ecx

loc_46899A:
	cmp byte [esi+2DAh], 1
	jnz loc_468A72
	mov ecx, dword [dword_513520]
	test ecx, ecx
	jle loc_468DA7
	mov eax, ecx

loc_4689B7:
	cmp eax, 8000h
	jge loc_468A72
	mov ebx, [esi+2B8h]
	test ebx, ebx
	jle loc_468DB0
	mov eax, ebx

loc_4689D2:
	cmp eax, 140000h
	jge loc_468DB9

loc_4689DD:
	mov ecx, 0FD70h

loc_4689E2:
	mov eax, ecx
	mov edx, [esi+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0ACh]
	mov [esi+0A8h], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0B0h]
	mov [esi+0ACh], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0E8h]
	mov [esi+0B0h], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0ECh]
	mov [esi+0E8h], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0F0h]
	mov [esi+0ECh], eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+0F0h], eax

loc_468A72:
	mov eax, [esi+2A4h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov [esi+2A4h], eax
	mov eax, [esi+2ACh]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esi+2ACh], eax

loc_468AA0:
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_468AAD:
	mov al, byte byte_4D84E8[eax]
	jmp loc_467C5D

loc_468AB8:
	mov dword [esi+310h], 0
	jmp loc_467E71

loc_468AC7:
	mov edx, ecx
	neg edx
	jmp loc_467E81

loc_468AD0:
	mov eax, ebx
	neg eax
	jmp loc_467E91

loc_468AD9:
	neg eax
	mov [esi+304h], eax
	jmp loc_467EAA

loc_468AE6:
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov ebx, [esi+304h]
	add edx, edx
	cmp ebx, 3C0000h
	jge loc_468B11
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	jmp loc_467F35

loc_468B11:
	cmp ebx, dword_500000
	jle loc_467F37
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	jmp loc_467F35

loc_468B2F:
	cmp eax, 0FFFFFF81h
	jge loc_468099
	mov eax, 0FFFFFF81h
	jmp loc_468099

loc_468B42:
	mov eax, ecx
	neg eax
	jmp loc_468120

loc_468B4B:
	mov dword [esi+328h], 0
	mov dword [esi+324h], 0
	add esp, 9Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_468B6C:
	neg eax
	jmp loc_468264

loc_468B73:
	mov eax, edx
	neg eax
	jmp loc_46827F

loc_468B7C:
	mov eax, edx
	jmp loc_468282

loc_468B83:
	mov edx, ebp
	mov eax, ebp
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esi+320h], eax
	jmp loc_46831D

loc_468B99:
	mov eax, ebx
	neg eax
	jmp loc_468455

loc_468BA2:
	mov eax, edi
	neg eax
	jmp loc_468470

loc_468BAB:
	mov eax, ebp
	neg eax
	jmp loc_46849B

loc_468BB4:
	xor eax, eax
	jmp loc_4684DA

loc_468BBB:
	neg eax
	jmp loc_4684C7

loc_468BC2:
	mov edx, [esi+2ECh]
	mov edx, [edx+14Ch]
	mov ebx, [esi+2C0h]
	neg edx
	cmp edx, ebx
	jle loc_468518
	cmp dword [esp+94h], 0
	jl loc_468500
	jmp loc_468518

loc_468BF1:
	cmp dword [esi+2B8h], 50000h
	jle loc_468518
	cmp dword [esi+2C0h], 0
	jle loc_468C88
	cmp dword [esi+2E4h], 40h
	jle loc_468C88
	cmp byte [esi+2DAh], 2
	jbe loc_468C88

loc_468C20:
	cmp byte [esi+2DCh], 0
	jz loc_468D18
	mov edx, [esi+2ECh]
	mov eax, [edx+150h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov edi, [esi+310h]
	mov edx, eax
	test edi, edi
	jle loc_468D0F
	mov eax, edi

loc_468C58:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	mov eax, edx
	cmp eax, 8000h
	jge loc_468C77
	mov eax, 8000h

loc_468C77:
	mov ecx, eax
	mov dword [esi+2F4h], 2
	jmp loc_468518

loc_468C88:
	cmp dword [esi+2C0h], 0
	jl loc_468CF7

loc_468C91:
	cmp byte [esi+2DCh], 0
	jnz loc_468518
	cmp byte [esi+2D8h], 0
	jbe loc_468D81
	mov edx, [esi+2ECh]
	mov edx, [edx+150h]
	mov eax, [esi+310h]
	add edx, edx
	test eax, eax
	jle loc_468D7A

loc_468CC7:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 10000h
	sub edx, eax
	mov eax, edx
	cmp eax, 8000h
	jge loc_468CE6
	mov eax, 8000h

loc_468CE6:
	mov ecx, eax
	mov dword [esi+2F4h], 2
	jmp loc_468518

loc_468CF7:
	cmp dword [esi+2E4h], 0FFFFFFC0h
	jge loc_468C91
	cmp byte [esi+2DAh], 2
	ja loc_468C20
	jmp loc_468C91

loc_468D0F:
	mov eax, edi
	neg eax
	jmp loc_468C58

loc_468D18:
	cmp byte [esi+2D8h], 0
	jbe loc_468D49
	mov edx, [esi+2ECh]
	mov edx, [edx+150h]
	mov ebx, [esi+310h]
	add edx, edx
	test ebx, ebx
	jle loc_468D40
	mov eax, ebx
	jmp loc_468C58

loc_468D40:
	mov eax, ebx
	neg eax
	jmp loc_468C58

loc_468D49:
	mov edx, [esi+2ECh]
	mov eax, [edx+150h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, [esi+310h]
	mov edx, eax
	test ecx, ecx
	jle loc_468D71
	mov eax, ecx
	jmp loc_468C58

loc_468D71:
	mov eax, ecx
	neg eax
	jmp loc_468C58

loc_468D7A:
	neg eax
	jmp loc_468CC7

loc_468D81:
	mov edx, [esi+2ECh]
	mov ebp, [esi+310h]
	mov edx, [edx+150h]
	test ebp, ebp
	jle loc_468D9E
	mov eax, ebp
	jmp loc_468CC7

loc_468D9E:
	mov eax, ebp
	neg eax
	jmp loc_468CC7

loc_468DA7:
	mov eax, ecx
	neg eax
	jmp loc_4689B7

loc_468DB0:
	mov eax, ebx
	neg eax
	jmp loc_4689D2

loc_468DB9:
	mov edi, [esi+2E4h]
	test edi, edi
	jle loc_468DD8
	mov eax, edi
	cmp eax, 20h
	jg loc_4689DD
	mov ecx, 0FF7Ch
	jmp loc_4689E2

loc_468DD8:
	mov eax, edi
	neg eax
	cmp eax, 20h
	jg loc_4689DD
	mov ecx, 0FF7Ch
	jmp loc_4689E2
;sub_467C10 endp

sub_468DF0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	xor ebp, ebp
	mov [edx+2Ch], ebp
	cmp dword [edx+0Ch], 0
	jnz loc_469027

loc_468E08:
	cmp dword [esi], 0
	jl loc_469041

loc_468E11:
	cmp dword [esi], 0
	jle loc_468E36
	cmp dword [esi+18h], 0
	jle loc_468E36
	cmp byte [edi+2D7h], 40h
	jbe loc_469084
	cmp byte [edi+2DAh], 1
	jbe loc_469084

loc_468E36:
	mov edx, [edi+2ECh]
	mov eax, [esi]
	mov edx, [edx+138h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi], eax
	test ebp, ebp
	jz loc_4690A2
	test eax, eax
	jle loc_46909B

loc_468E60:
	cmp eax, [esi+4]
	jle loc_4690A2

loc_468E69:
	cmp byte [edi+2DCh], 0
	jnz loc_46915C
	mov ecx, [edi+21Ch]
	mov ebp, [ecx]
	cmp ebp, 7
	jnz loc_4690E9

loc_468E87:
	mov ebp, [esi+4]
	cmp ebp, [esi]
	jge loc_469194
	mov [esi], ebp

loc_468E94:
	mov ecx, [edi+21Ch]
	mov ebx, [ecx]
	cmp ebx, 7
	jnz loc_4691A9

loc_468EA5:
	cmp dword [edi+2B8h], 280000h
	jge loc_468ED1
	mov eax, dword [dword_540F48]
	mov edx, eax
	mov ecx, 4
	sar edx, 1Fh
	idiv ecx
	test edx, edx
	jnz loc_4691E4

loc_468ECA:
	mov dword [esi+2Ch], 30000h

loc_468ED1:
	mov ebx, [esi+18h]
	test ebx, ebx
	jle loc_46921A
	mov eax, ebx

loc_468EDE:
	test eax, eax
	jz loc_469233
	mov edx, [esi+18h]
	neg edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ecx, [esi+10h]
	mov edx, eax
	mov eax, ecx
	call sub_49E630
	mov ebp, [esi+18h]
	mov ecx, eax
	test ebp, ebp
	jle loc_468F1B
	mov edx, [esi+10h]
	test edx, edx
	jle loc_469223
	mov ecx, 8000h

loc_468F19:
	sub ecx, eax

loc_468F1B:
	shl ecx, 8

loc_468F1E:
	cmp dword [esi+28h], 0
	jz loc_4692C1
	mov edx, dword [dword_513524]
	mov eax, [esi+4]
	mov ebx, 1555h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	test ecx, ecx
	jle loc_46923A
	mov eax, ecx

loc_468F4C:
	cmp eax, 100000h
	jle loc_469243
	mov eax, 100000h

loc_468F5C:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	test ecx, ecx
	jl loc_469257

loc_468F7C:
	mov eax, dword [dword_513518]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esi+1Ch], ebx
	lea ebp, [ebx+eax]
	mov eax, [esi+10h]
	mov [esi+1Ch], ebp
	test eax, eax
	jle loc_46925E

loc_468F9E:
	mov edx, [esi+18h]
	test edx, edx
	jle loc_469265

loc_468FA9:
	add eax, edx
	cmp eax, 200000h
	jge loc_468FDC
	cmp dword [esi+10h], 0
	jle loc_469283
	test ebx, ebx
	jle loc_46926C
	mov eax, ebx

loc_468FC6:
	mov edx, [esi+10h]
	cmp eax, edx
	jge loc_46927C
	test ebx, ebx
	jle loc_469275

loc_468FD9:
	mov [esi+1Ch], ebx

loc_468FDC:
	mov eax, [esi]
	mov edx, esi
	mov [esi+24h], eax
	mov eax, edi
	mov dword [esi+20h], 0
	call sub_469440
	cmp dword [esi+0Ch], 0
	jz loc_46900E
	lea eax, [esi+24h]
	mov ebx, [esi+0Ch]
	mov edx, [esi+24h]
	push eax
	lea ecx, [esi+1Ch]
	neg ebx
	mov eax, [esi+1Ch]
	call sub_45EC80

loc_46900E:
	cmp dword [esi+28h], 0
	jz loc_46920B
	mov eax, [esi+2Ch]
	mov [edi+324h], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_469027:
	lea eax, [esi+18h]
	mov ebx, [esi+0Ch]
	mov edx, [esi+18h]
	push eax
	lea ecx, [esi+10h]
	mov eax, [esi+10h]
	call sub_45EC80
	jmp loc_468E08

loc_469041:
	cmp dword [esi+18h], 0
	jge loc_468E11
	cmp byte [edi+2D7h], 40h
	jbe loc_469061
	cmp byte [edi+2DAh], 0
	jz loc_468E36

loc_469061:
	mov ebx, [esi+18h]
	mov eax, [esi]
	cmp eax, ebx
	jle loc_469076
	mov ebp, 1
	mov [esi], eax
	jmp loc_468E36

loc_469076:
	mov eax, ebx
	mov ebp, 1
	mov [esi], eax
	jmp loc_468E36

loc_469084:
	mov ecx, [esi+18h]
	mov eax, [esi]
	cmp eax, ecx
	jle loc_46908F
	mov eax, ecx

loc_46908F:
	mov ebp, 1
	mov [esi], eax
	jmp loc_468E36

loc_46909B:
	neg eax
	jmp loc_468E60

loc_4690A2:
	cmp byte [edi+2DCh], 0
	jz loc_468ED1
	cmp dword [esi+28h], 0
	jnz loc_468ED1
	mov ebx, [edi+2B8h]
	test ebx, ebx
	jle loc_4690D5
	mov eax, ebx
	cmp eax, 8000h
	jg loc_468E69
	jmp loc_468ED1

loc_4690D5:
	mov eax, ebx
	neg eax
	cmp eax, 8000h
	jg loc_468E69
	jmp loc_468ED1

loc_4690E9:
	cmp ebp, 8
	jz loc_468E87
	cmp ebp, 0Ah
	jz loc_468E87
	cmp ebp, 5
	jz loc_468E87
	cmp ebp, 9
	jz loc_468E87
	cmp ebp, 0Dh
	jz loc_468E87
	cmp ebp, 0Eh
	jz loc_468E87
	cmp dword [edi+2B8h], 280000h
	jg loc_468E87
	cmp byte [edi+2D8h], 0ECh
	jb loc_468E87
	mov ebx, [edi+2B8h]
	test ebx, ebx
	jle loc_46918E
	mov eax, ebx

loc_469148:
	cmp eax, 50000h
	jge loc_46915C
	cmp dword [edi+2F4h], 0
	jz loc_468E87

loc_46915C:
	cmp dword [esi+28h], 0
	jz loc_4691FF
	inc dword [edi+2FCh]

loc_46916C:
	mov edx, esi
	mov eax, edi
	call sub_469700
	cmp dword [esi+28h], 0
	jz loc_46920B
	mov eax, [esi+2Ch]
	mov [edi+324h], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46918E:
	mov eax, ebx
	neg eax
	jmp loc_469148

loc_469194:
	mov eax, ebp
	mov edx, [esi]
	neg eax
	cmp eax, edx
	jle loc_468E94
	mov [esi], eax
	jmp loc_468E94

loc_4691A9:
	cmp ebx, 8
	jz loc_468EA5
	cmp ebx, 0Ah
	jz loc_468EA5
	cmp ebx, 5
	jz loc_468EA5
	cmp ebx, 9
	jz loc_468EA5
	cmp ebx, 0Dh
	jz loc_468EA5
	cmp ebx, 0Eh
	jz loc_468EA5
	jmp loc_468ED1

loc_4691E4:
	mov eax, [edi+21Ch]
	cmp dword [eax], 7
	jz loc_468ECA
	mov dword [esi+2Ch], 0
	jmp loc_468ED1

loc_4691FF:
	add dword [edi+2FCh], 2
	jmp loc_46916C

loc_46920B:
	mov eax, [esi+2Ch]
	mov [edi+328h], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46921A:
	mov eax, ebx
	neg eax
	jmp loc_468EDE

loc_469223:
	jge loc_468F1B
	mov ecx, 0FFFF8000h
	jmp loc_468F19

loc_469233:
	xor ecx, ecx
	jmp loc_468F1E

loc_46923A:
	mov eax, ecx
	neg eax
	jmp loc_468F4C

loc_469243:
	test ecx, ecx
	jle loc_46924E
	mov eax, ecx
	jmp loc_468F5C

loc_46924E:
	mov eax, ecx
	neg eax
	jmp loc_468F5C

loc_469257:
	neg ebx
	jmp loc_468F7C

loc_46925E:
	neg eax
	jmp loc_468F9E

loc_469265:
	neg edx
	jmp loc_468FA9

loc_46926C:
	mov eax, ebx
	neg eax
	jmp loc_468FC6

loc_469275:
	neg ebx
	jmp loc_468FD9

loc_46927C:
	mov ebx, edx
	jmp loc_468FD9

loc_469283:
	test ebx, ebx
	jle loc_469299
	mov eax, ebx
	neg eax
	mov ebp, [esi+10h]
	cmp eax, ebp
	jge loc_4692AD
	mov ebx, ebp
	jmp loc_468FD9

loc_469299:
	mov eax, ebx
	neg eax
	neg eax
	mov ebp, [esi+10h]
	cmp eax, ebp
	jge loc_4692AD
	mov ebx, ebp
	jmp loc_468FD9

loc_4692AD:
	test ebx, ebx
	jle loc_4692B8

loc_4692B1:
	neg ebx
	jmp loc_468FD9

loc_4692B8:
	neg ebx
	neg ebx
	jmp loc_468FD9

loc_4692C1:
	mov edx, dword [dword_513510]
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 0A3Dh
	mov ebx, eax
	mov eax, [edi+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, 8000h
	jge loc_469384
	mov eax, 8000h

loc_4692FB:
	mov edx, eax
	test ecx, ecx
	jle loc_46939E
	mov eax, ecx

loc_469307:
	cmp eax, edx
	jle loc_4693B0
	test ecx, ecx
	jle loc_4693A7
	mov eax, ecx

loc_469319:
	cmp eax, 20000h
	jle loc_4693B7
	mov eax, 20000h

loc_469329:
	mov edx, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	test ecx, ecx
	jl loc_4693E2

loc_469348:
	mov eax, dword [dword_513518]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add ebx, eax
	cmp dword [esi+10h], 0
	jle loc_4693F9
	test ebx, ebx
	jle loc_4693E9
	mov eax, ebx

loc_46936C:
	mov ecx, [esi+10h]
	cmp eax, ecx
	jge loc_4693F2
	test ebx, ebx
	jle loc_4692B1
	jmp loc_468FD9

loc_469384:
	mov edx, 0A3Dh
	mov eax, [edi+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	jmp loc_4692FB

loc_46939E:
	mov eax, ecx
	neg eax
	jmp loc_469307

loc_4693A7:
	mov eax, ecx
	neg eax
	jmp loc_469319

loc_4693B0:
	mov eax, edx
	jmp loc_469319

loc_4693B7:
	test ecx, ecx
	jle loc_4693CC
	mov eax, ecx

loc_4693BD:
	cmp eax, edx
	jle loc_4693DB
	test ecx, ecx
	jle loc_4693D2
	mov eax, ecx
	jmp loc_469329

loc_4693CC:
	mov eax, ecx
	neg eax
	jmp loc_4693BD

loc_4693D2:
	mov eax, ecx
	neg eax
	jmp loc_469329

loc_4693DB:
	mov eax, edx
	jmp loc_469329

loc_4693E2:
	neg ebx
	jmp loc_469348

loc_4693E9:
	mov eax, ebx
	neg eax
	jmp loc_46936C

loc_4693F2:
	mov ebx, ecx
	jmp loc_468FD9

loc_4693F9:
	test ebx, ebx
	jle loc_469412
	mov eax, ebx

loc_4693FF:
	neg eax
	mov edx, [esi+10h]
	cmp eax, edx
	jge loc_469418
	mov eax, edx
	mov [esi+1Ch], eax
	jmp loc_468FDC

loc_469412:
	mov eax, ebx
	neg eax
	jmp loc_4693FF

loc_469418:
	test ebx, ebx
	jle loc_469428
	mov eax, ebx
	neg eax
	mov [esi+1Ch], eax
	jmp loc_468FDC

loc_469428:
	neg ebx
	mov eax, ebx
	neg eax
	mov [esi+1Ch], eax
	jmp loc_468FDC
;sub_468DF0 endp

sub_469440: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov eax, [eax+21Ch]
	xor edx, edx
	mov ecx, [eax]
	mov [esp], edx
	cmp ecx, 0Eh
	jz loc_4695FA
	mov ebx, [esi+1Ch]
	test ebx, ebx
	jle loc_469603
	mov eax, ebx

loc_46946F:
	mov ebp, [esi+24h]
	test ebp, ebp
	jle loc_46960C
	mov edx, ebp

loc_46947C:
	cmp eax, edx
	jle loc_469625
	mov ecx, [esi+24h]
	test ecx, ecx
	jle loc_469615
	mov eax, ecx

loc_469491:
	mov ebx, [esi+1Ch]
	sar eax, 2
	test ebx, ebx
	jle loc_46961E

loc_46949F:
	add ebx, eax
	mov ebp, [esi+1Ch]
	test ebp, ebp
	jle loc_46964A
	mov eax, ebp

loc_4694AE:
	cmp eax, 70000h
	jle loc_46965C
	mov edx, [esi+1Ch]
	test edx, edx
	jle loc_469653
	mov eax, edx

loc_4694C6:
	add eax, 1C000h

loc_4694CB:
	mov ecx, [esi+28h]
	mov ebp, eax
	test ecx, ecx
	jz loc_46967F
	mov edx, dword [dword_513524]

loc_4694DE:
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	cmp dword [esi+28h], 0
	jz loc_469509
	cmp dword [esi+1Ch], 0
	jle loc_46968A
	mov [edi+368h], ebx

loc_469503:
	mov [edi+364h], ecx

loc_469509:
	cmp ebx, ecx
	jle loc_4695FA
	mov edx, [edi+2B8h]
	test edx, edx
	jle loc_46969F
	mov eax, edx

loc_469521:
	cmp eax, 50000h
	jg loc_469532
	mov eax, [edi+2F4h]
	test eax, eax
	jz loc_469536

loc_469532:
	mov eax, ebx
	sub eax, ecx

loc_469536:
	mov [esi+2Ch], eax
	mov ah, [edi+2DAh]
	cmp ah, 2
	jnz loc_4696A8

loc_469548:
	cmp byte [edi+2D7h], 0
	jbe loc_46957F
	cmp dword [edi+2F4h], 0
	jnz loc_46957F
	cmp dword [esi+28h], 0
	jnz loc_46957F
	cmp ebp, ecx
	jge loc_46957F
	mov edx, 1
	mov eax, [esi+2Ch]
	mov [esp], edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov [esi+2Ch], eax

loc_46957F:
	mov edx, ebx
	mov ebp, [edi+200h]
	sub edx, ecx
	cmp ebp, 3
	jge loc_4696B5
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov ebp, eax
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	cmp eax, ebp
	jle loc_4695B6

loc_4695B4:
	mov eax, ebp

loc_4695B6:
	sub ecx, eax
	mov eax, ecx
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	mov ecx, eax
	mov eax, [esi+1Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+1Ch], eax
	cmp dword [esp], 0
	jz loc_4696E0
	cmp dword [edi+200h], 2
	jg loc_4696E0

loc_4695FA:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_469603:
	mov eax, ebx
	neg eax
	jmp loc_46946F

loc_46960C:
	mov edx, ebp
	neg edx
	jmp loc_46947C

loc_469615:
	mov eax, ecx
	neg eax
	jmp loc_469491

loc_46961E:
	neg ebx
	jmp loc_46949F

loc_469625:
	mov eax, [esi+1Ch]
	test eax, eax
	jle loc_46963D

loc_46962C:
	mov edx, [esi+24h]
	sar eax, 2
	test edx, edx
	jle loc_469641
	mov ebx, edx
	jmp loc_46949F

loc_46963D:
	neg eax
	jmp loc_46962C

loc_469641:
	mov ebx, edx
	neg ebx
	jmp loc_46949F

loc_46964A:
	mov eax, ebp
	neg eax
	jmp loc_4694AE

loc_469653:
	mov eax, edx
	neg eax
	jmp loc_4694C6

loc_46965C:
	mov eax, [esi+1Ch]
	test eax, eax
	jle loc_469670
	sar eax, 2
	add eax, 70000h
	jmp loc_4694CB

loc_469670:
	neg eax
	sar eax, 2
	add eax, 70000h
	jmp loc_4694CB

loc_46967F:
	mov edx, dword [dword_513510]
	jmp loc_4694DE

loc_46968A:
	mov eax, ebx
	mov [edi+368h], ebx
	neg eax
	mov [edi+368h], eax
	jmp loc_469503

loc_46969F:
	mov eax, edx
	neg eax
	jmp loc_469521

loc_4696A8:
	test ah, ah
	jz loc_469548
	jmp loc_46957F

loc_4696B5:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ebp, eax
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	cmp eax, ebp
	jg loc_4695B4
	jmp loc_4695B6

loc_4696E0:
	mov edx, ecx
	mov eax, [esi+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esi+24h], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_469440 endp

sub_469700: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, edx
	cmp dword [edx+28h], 0
	jnz loc_4697B5
	mov edx, dword [dword_513510]

loc_46971A:
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, [esi+10h]
	test ecx, ecx
	jle loc_4697C0
	mov ebx, ecx

loc_469734:
	mov edi, [esi+18h]
	test edi, edi
	jle loc_4697C9
	mov edx, edi

loc_469741:
	mov ecx, [esi+4]
	cmp ebx, edx
	jle loc_4697D2
	sar edx, 2
	lea ebp, [ebx+edx]

loc_469752:
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov edx, ecx
	sub edx, eax
	mov edi, ebp
	mov [esp], edx
	cmp ebp, ecx
	jle loc_4697DE
	sub ebp, ecx
	mov [esi+2Ch], ebp

loc_469773:
	test edi, edi
	jle loc_4697E7
	mov eax, edi

loc_469779:
	cmp eax, 100h
	jg loc_4697ED

loc_469780:
	mov edx, [esi+10h]
	imul edx, ebx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esi+18h]
	imul edx, ebx
	mov [esi+1Ch], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esi+24h], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4697B5:
	mov edx, dword [dword_513524]
	jmp loc_46971A

loc_4697C0:
	mov ebx, ecx
	neg ebx
	jmp loc_469734

loc_4697C9:
	mov edx, edi
	neg edx
	jmp loc_469741

loc_4697D2:
	mov ebp, ebx
	sar ebp, 2
	add ebp, edx
	jmp loc_469752

loc_4697DE:
	mov dword [esi+2Ch], 0
	jmp loc_469773

loc_4697E7:
	mov eax, edi
	neg eax
	jmp loc_469779

loc_4697ED:
	mov eax, [esp]
	mov ebx, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ebx, eax
	jmp loc_469780
;sub_469700 endp

sub_469820: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov esi, [eax+2ECh]
	xor edx, edx
	xor ebx, ebx
	mov eax, [eax+2F0h]
	mov edi, [esi+0F0h]
	mov [esp], edx
	cmp eax, edi
	jle loc_46986E
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebp, 1
	add eax, edi
	mov edi, [ecx+2F0h]
	mov [esp], ebp
	cmp eax, edi
	jge loc_46986E
	mov byte [ecx+2DCh], 1

loc_46986E:
	mov edx, [ecx+21Ch]
	mov eax, [edx+1Ch]
	add eax, [edx+20h]
	lea edx, [eax-20000h]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	lea edx, [eax+10000h]
	mov eax, [ecx+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, eax
	imul edx, eax
	imul edx, eax
	mov eax, [esi+1C8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov ebp, eax
	test byte [byte_512218], 4
	jz loc_4698EB
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jge loc_4698EB
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebp, eax

loc_4698EB:
	mov edx, dword [dword_4D8508]
	mov eax, [esi+0F0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dl, [ecx+2DAh]
	mov edi, eax
	cmp dl, 1
	jnz loc_469965

loc_46990E:
	mov esi, [ecx+2F0h]
	cmp edi, esi
	jle loc_469B5B
	cmp byte [ecx+2DBh], 0
	jnz loc_469B5B
	lea edx, [esi+1F4h]
	mov [ecx+2F0h], edx
	cmp edi, edx
	jge loc_469B54

loc_46993D:
	mov [ecx+2F0h], edi

loc_469943:
	mov dword [ecx+2F4h], 0
	mov dword [ecx+2F8h], 0

loc_469957:
	mov eax, ebx
	sub eax, ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_469965:
	cmp byte [ecx+2DBh], 0
	ja loc_46990E
	cmp word [ecx+14Ch], 0
	jnz loc_46990E
	mov eax, [ecx+1E8h]
	shl eax, 6
	cmp dword dword_512278[eax], 1
	jnz loc_469991
	mov eax, ecx
	call sub_46AB20

loc_469991:
	xor eax, eax
	mov al, [ecx+2DAh]
	mov edx, [esi+eax*4+0Ch]
	mov eax, [ecx+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, [esp]
	mov [esp+4], eax
	test ebx, ebx
	jz loc_469BB1
	xor eax, eax
	mov al, [ecx+2DAh]
	mov ebx, [esi+eax*4+1A8h]
	mov eax, [esi+0F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, ebx
	mov eax, [esi+eax*4+4Ch]

loc_4699F1:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	test byte [byte_512218], 4
	jz loc_469BE3
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jge loc_469BE3

loc_469A19:
	mov eax, [esp+4]
	mov edx, edi
	sub edx, eax
	test edx, edx
	jle loc_469C18
	mov eax, edx

loc_469A2B:
	cmp eax, 7Dh
	jge loc_469A41
	mov eax, [esi+0F0h]
	sub eax, 12Ch
	cmp edi, eax
	jge loc_469A41
	xor edx, edx

loc_469A41:
	mov eax, [ecx+2F0h]
	mov dword [ecx+2F4h], 0
	sub eax, [esp+4]
	mov dword [ecx+2F8h], 0
	mov [esp+8], eax
	cmp eax, 4E2h
	jle loc_469C21
	cmp byte [ecx+2DBh], 0
	jnz loc_469C21
	cmp byte [ecx+2DAh], 4
	ja loc_469C21

loc_469A88:
	test byte [byte_512218], 4
	jz loc_469AA6
	mov eax, [ecx+21Ch]
	cmp dword [eax], 0Fh
	jge loc_469AA6
	mov dword [ecx+2F8h], 1

loc_469AA6:
	mov edx, dword [dword_4D8508]
	mov eax, ebx
	add edx, 10000h
	mov dword [ecx+2F4h], 1
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dl, [ecx+2DAh]
	mov ebx, eax
	cmp dl, 2
	jnz loc_469C80
	mov eax, 5

loc_469ADE:
	mov esi, [esp+8]
	lea edx, [ecx+2F0h]
	cmp eax, esi
	jge loc_469C99

loc_469AF0:
	sub [edx], eax
	mov eax, [ecx+2F0h]
	cmp edi, eax
	jge loc_469CA0

loc_469B00:
	mov [ecx+2F0h], edi

loc_469B06:
	cmp dword [ecx+2F0h], 0
	jge loc_469957
	mov edx, [ecx+2B8h]
	shl edx, 5
	neg edx
	test ebx, ebx
	jle loc_469B32
	test edx, edx
	jle loc_469B32
	mov eax, ebx
	sub eax, edx
	test eax, eax
	jg loc_469957

loc_469B32:
	test ebx, ebx
	jl loc_469E19

loc_469B3A:
	mov ebx, edx
	mov dword [ecx+2F0h], 0
	mov eax, ebx
	sub eax, ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_469B54:
	mov edi, edx
	jmp loc_46993D

loc_469B5B:
	cmp byte [ecx+2DBh], 0
	jbe loc_469B88
	mov edi, [ecx+2F0h]
	sub edi, 32h
	mov [ecx+2F0h], edi
	test edi, edi
	jle loc_469B84
	mov eax, edi

loc_469B79:
	mov [ecx+2F0h], eax
	jmp loc_469943

loc_469B84:
	xor eax, eax
	jmp loc_469B79

loc_469B88:
	mov eax, [ecx+2F0h]
	cmp edi, eax
	jg loc_469943
	lea edx, [eax-0C8h]
	mov [ecx+2F0h], edx
	cmp edi, edx
	jge loc_46993D
	mov edi, edx
	jmp loc_46993D

loc_469BB1:
	xor eax, eax
	mov al, [ecx+2DAh]
	mov ebx, [esi+eax*4+1A8h]
	mov eax, [ecx+2F0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, eax
	mov eax, ecx
	call sub_46B980
	mov edx, ebx
	jmp loc_4699F1

loc_469BE3:
	cmp byte [ecx+2DAh], 2
	jnz loc_469C02
	cmp ebx, 0A0000h
	jle loc_469A19
	mov ebx, 0A0000h
	jmp loc_469A19

loc_469C02:
	cmp ebx, 80000h
	jle loc_469A19
	mov ebx, 80000h
	jmp loc_469A19

loc_469C18:
	mov eax, edx
	neg eax
	jmp loc_469A2B

loc_469C21:
	cmp byte [ecx+2DAh], 1
	jbe loc_469C43
	cmp dword [ecx+304h], 0FFFFE667h
	jge loc_469C43
	cmp byte [ecx+2D7h], 40h
	ja loc_469A88

loc_469C43:
	cmp byte [ecx+2DAh], 0
	jnz loc_469C65
	cmp dword [ecx+304h], 1999h
	jle loc_469C65
	cmp byte [ecx+2D7h], 40h
	ja loc_469A88

loc_469C65:
	test edx, edx
	jl loc_469CA7
	jnz loc_469D5A
	mov eax, [esp+4]
	mov ebx, ebp
	mov [ecx+2F0h], eax
	jmp loc_469B06

loc_469C80:
	cmp dl, 3
	jnz loc_469C8F
	mov eax, 19h
	jmp loc_469ADE

loc_469C8F:
	mov eax, 4Bh
	jmp loc_469ADE

loc_469C99:
	mov eax, esi
	jmp loc_469AF0

loc_469CA0:
	mov edi, eax
	jmp loc_469B00

loc_469CA7:
	mov eax, ebx
	mov edx, [esi+144h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, dword [dword_513520]
	neg ebx
	test eax, eax
	jle loc_469CD5
	mov dl, [ecx+2DAh]
	cmp dl, 1
	jbe loc_469CD5
	test ebx, ebx
	jl loc_469D33

loc_469CD5:
	cmp dword [dword_513520], 0
	jl loc_469D47

loc_469CDE:
	xor eax, eax
	mov al, [ecx+2DAh]
	mov eax, [esi+eax*4+188h]
	mov edx, 28000000h
	shl eax, 3
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov esi, [esp+8]
	neg esi
	lea edx, [ecx+2F0h]
	cmp esi, eax
	jle loc_469D56

loc_469D1C:
	add [edx], eax
	mov eax, [ecx+2F0h]
	cmp edi, eax
	jge loc_469B00
	mov edi, eax
	jmp loc_469B00

loc_469D33:
	cmp dl, 3
	jnb loc_469CD5

loc_469D38:
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, eax
	jmp loc_469CDE

loc_469D47:
	cmp byte [ecx+2DAh], 0
	jnz loc_469CDE
	test ebx, ebx
	jg loc_469D38
	jmp loc_469CDE

loc_469D56:
	mov eax, esi
	jmp loc_469D1C

loc_469D5A:
	mov edx, [esp+8]
	cmp edx, 0C8h
	jle loc_469DD4
	sub dword [ecx+2F0h], 0C8h

loc_469D70:
	mov esi, [ecx+2F0h]
	cmp edi, esi
	jge loc_469DF7

loc_469D7E:
	mov edx, dword [dword_4D8508]
	mov eax, ebx
	mov [ecx+2F0h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, 8000h
	mov edi, [ecx+310h]
	mov ebx, eax
	test edi, edi
	jle loc_469DFB
	mov eax, edi

loc_469DA9:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [eax+10000h]
	cmp edx, 28000h
	jge loc_469E01
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	jmp loc_469B06

loc_469DD4:
	cmp edx, 0FFFFFED4h
	jge loc_469DE8
	add dword [ecx+2F0h], 0C8h
	jmp loc_469D70

loc_469DE8:
	mov eax, [esp+4]
	mov [ecx+2F0h], eax
	jmp loc_469D70

loc_469DF7:
	mov edi, esi
	jmp loc_469D7E

loc_469DFB:
	mov eax, edi
	neg eax
	jmp loc_469DA9

loc_469E01:
	mov edx, 28000h
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	jmp loc_469B06

loc_469E19:
	test edx, edx
	jge loc_469B3A
	mov eax, ebx
	sub eax, edx
	test eax, eax
	jl loc_469957
	jmp loc_469B3A
;sub_469820 endp

sub_469E40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	mov edx, [eax+14h]
	lea eax, [edx-1]
	test eax, eax
	jl loc_469FF4
	mov ebp, eax

loc_469E5B:
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov ebx, [edx+eax*4+0Ch]
	mov esi, [edx+eax*4+0Dh]
	mov eax, [edx+eax*4+0Eh]
	mov edi, eax
	lea eax, 0[ebp*8]
	add eax, ebp
	shl eax, 2
	add eax, edx
	mov edx, [eax+0Dh]
	sar edx, 18h
	shl edx, 9
	mov [esp], edx
	mov edx, [eax+0Eh]
	sar ebx, 18h
	sar edx, 18h
	sar esi, 18h
	shl edx, 9
	shl ebx, 9
	mov [esp+4], edx
	mov edx, [eax+9]
	shl esi, 9
	sar edx, 18h
	mov ebp, [eax+0Ch]
	shl edx, 9
	sar ebp, 18h
	mov [esp+8], edx
	mov edx, [eax+0Ah]
	shl ebp, 9
	sar edx, 18h
	mov eax, [eax+0Bh]
	sar eax, 18h
	shl edx, 9
	shl eax, 9
	mov [esp+0Ch], edx
	mov [esp+10h], eax
	mov edx, ebx
	mov eax, ebp
	sar edi, 18h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, esi
	mov eax, [esp]
	shl edi, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add ebp, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebx
	add ebp, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, esi
	mov eax, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add ebx, eax
	mov eax, [esp+10h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, ebp
	add eax, ebx
	call sub_49D7E0
	lea esi, [eax+eax]
	mov eax, [ecx+2B8h]
	mov edx, 0A3Dh
	test eax, eax
	jle loc_46A001

loc_469F67:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, 20000h
	jle loc_46A008
	mov ebx, 20000h

loc_469F81:
	mov eax, esi
	mov edx, 28Fh
	shl eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, dword [dword_512204]
	mov ebx, eax
	lea eax, 0[edx*4]
	mov esi, 10000h
	add edx, eax
	mov eax, [ecx+200h]
	shl edx, 3
	mov dword [dword_513524], esi
	mov eax, dword dword_4D8484[edx+eax*4]
	mov dword [dword_513510], esi
	add eax, ebx
	mov ebp, [ecx+2B8h]
	mov dword [dword_513514], eax
	cmp ebp, 50000h
	jg loc_46A030
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_469FF4:
	mov ebp, dword [dword_5118A0]
	add ebp, eax
	jmp loc_469E5B

loc_46A001:
	neg eax
	jmp loc_469F67

loc_46A008:
	mov ebx, [ecx+2B8h]
	mov edx, 0A3Dh
	test ebx, ebx
	jle loc_46A02A
	mov eax, ebx

loc_46A019:
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	jmp loc_469F81

loc_46A02A:
	mov eax, ebx
	neg eax
	jmp loc_46A019

loc_46A030:
	mov edx, [ecx+21Ch]
	mov eax, [ecx+2ECh]
	mov edx, [edx+1Ch]
	mov eax, [eax+13Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, [ecx+2B8h]
	mov edx, eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov edx, [ecx+21Ch]
	mov dword [dword_513524], eax
	mov eax, [ecx+2ECh]
	mov edx, [edx+20h]
	mov eax, [eax+13Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov eax, [ecx+21Ch]
	mov edx, [eax]
	test edx, edx
	jnz loc_46A0F3

loc_46A095:
	cmp dword [ecx+2B8h], 240000h
	jle loc_46A0F8
	cmp byte [ecx+2D8h], 0
	jbe loc_46A0F8
	mov edx, [ecx+2ECh]
	mov eax, [ecx+21Ch]
	mov edx, [edx+13Ch]
	mov eax, [eax+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, eax

loc_46A0CB:
	mov ecx, [ecx+2B8h]
	mov edx, eax
	mov eax, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, 10000h
	mov dword [dword_513510], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46A0F3:
	cmp edx, 0Eh
	jz loc_46A095

loc_46A0F8:
	mov edx, [ecx+2ECh]
	mov eax, [ecx+21Ch]
	mov edx, [edx+13Ch]
	mov eax, [eax+20h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	jmp loc_46A0CB
;sub_469E40 endp

sub_46A130: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	call sub_46AEF0
	mov ecx, eax
	test eax, eax
	jz loc_46A15E
	test byte [edx+1F4h], 4
	jz loc_46A158
	cmp dword [dword_512204], 1
	jz loc_46A161
	mov eax, edx
	call sub_46A3B0

loc_46A158:
	mov [edx+284h], ecx

loc_46A15E:
	pop edx
	pop ecx
	ret

loc_46A161:
	mov eax, edx
	call sub_46A2E0
	mov [edx+284h], ecx
	pop edx
	pop ecx
	ret
;sub_46A130 endp

sub_46A180: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, [eax+0A8h]
	mov eax, 0F0A3h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0ACh]
	mov [ecx+0A8h], eax
	mov eax, 0F0A3h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0B0h]
	mov [ecx+0ACh], eax
	mov eax, 0F0A3h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+100h]
	mov [ecx+0B0h], eax
	cmp edx, 3333h
	jl loc_46A1E6
	pop edx
	pop ecx
	ret

loc_46A1E6:
	mov edx, 0FAE1h
	mov eax, [ecx+0ECh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [ecx+0ECh], eax
	pop edx
	pop ecx
	ret
;sub_46A180 endp

sub_46A210: ;SUBROUTINE
	push edx
	mov edx, [eax+1E8h]
	shl edx, 6
	mov byte [eax+2DAh], 2
	mov byte [eax+2D6h], 2
	mov dword [eax+290h], 0
	mov dword [eax+294h], 0
	mov dword [eax+298h], 0
	mov dword [eax+29Ch], 0
	mov dword [eax+2A0h], 0
	mov dword [eax+2B0h], 0
	mov dword [eax+2B4h], 0
	mov dword [eax+2B8h], 0
	mov dword [eax+2BCh], 0
	mov dword [eax+2C0h], 0
	mov dword [eax+2C4h], 0
	mov dword [eax+2F4h], 0
	mov dword [eax+310h], 0
	mov dword [eax+324h], 0
	mov dword [eax+328h], 0
	mov dword [eax+284h], 0
	mov dword [eax+28Ch], 0
	pop edx
	ret
;sub_46A210 endp

sub_46A2E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov edx, [eax+1A0h]
	mov eax, [eax+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov ah, [ecx+2DAh]
	mov [ecx+2B8h], ebx
	cmp ah, 1
	jnz loc_46A36A

loc_46A33E:
	mov dword [ecx+310h], 0
	mov dword [ecx+324h], 0
	mov dword [ecx+328h], 0
	mov dword [ecx+2F4h], 0
	pop edx
	pop ecx
	pop ebx
	ret

loc_46A36A:
	xor eax, eax
	mov ebx, [ecx+2ECh]
	mov al, [ecx+2DAh]
	mov edx, [ebx+eax*4+168h]
	mov eax, [ecx+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [ecx+2F0h], eax
	jmp loc_46A33E
;sub_46A2E0 endp

sub_46A3B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov esi, eax
	mov edx, [eax+188h]
	mov eax, [eax+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+18Ch]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+190h]
	add ebx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A0h]
	add ebx, eax
	mov eax, [esi+0A8h]
	mov [esi+2B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [esi+1A4h]
	mov eax, [esi+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+1A8h]
	add ebx, eax
	mov eax, [esi+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [esi+2B8h], ebx
	test ebx, ebx
	jle loc_46A4AE
	mov eax, ebx

loc_46A459:
	cmp eax, 10000h
	jge loc_46A4B4
	cmp byte [esi+2DAh], 2
	jnz loc_46A4B4

loc_46A469:
	mov dword [esi+310h], 0
	mov dword [esi+324h], 0
	mov dword [esi+328h], 0
	mov ecx, [esi+2B8h]
	mov dword [esi+2F4h], 0
	cmp ecx, 1999h
	jle loc_46A4A8
	cmp dword [dword_512204], 1
	jz loc_46A505

loc_46A4A8:
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46A4AE:
	mov eax, ebx
	neg eax
	jmp loc_46A459

loc_46A4B4:
	mov dl, [esi+2DAh]
	cmp dl, 1
	jnz loc_46A469
	cmp dl, dl
	jz loc_46A469
	xor eax, eax
	mov ebx, [esi+2ECh]
	mov al, dl
	mov edx, [ebx+eax*4+168h]
	mov eax, [esi+2B8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov [esi+2F0h], eax
	jmp loc_46A469

loc_46A505:
	mov ebx, ecx
	mov eax, [esi+2B0h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	test eax, eax
	jle loc_46A5DA
	mov ebx, [esi+2B8h]
	mov eax, [esi+2B0h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx

loc_46A54B:
	cmp eax, 1999h
	jle loc_46A4A8
	cmp dword [esi+2B0h], 0
	jl loc_46A602
	mov dword [esi+2F4h], 0FFFFFFFDh

loc_46A56D:
	mov edx, [esi+2B0h]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ebp, [esi+324h]
	mov [esi+310h], eax
	cmp ebp, 140000h
	jge loc_46A5AC
	lea eax, [ebp+20000h]
	cmp eax, 280000h
	jle loc_46A5A6
	mov eax, 280000h

loc_46A5A6:
	mov [esi+324h], eax

loc_46A5AC:
	mov eax, [esi+328h]
	cmp eax, 140000h
	jge loc_46A4A8
	add eax, 20000h
	cmp eax, 280000h
	jle loc_46A5CE
	mov eax, 280000h

loc_46A5CE:
	mov [esi+328h], eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46A5DA:
	mov ebx, [esi+2B8h]
	mov eax, [esi+2B0h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	neg eax
	jmp loc_46A54B

loc_46A602:
	mov dword [esi+2F4h], 3
	jmp loc_46A56D
;sub_46A3B0 endp

sub_46A620: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	cmp dword [dword_512208], 1
	jnz loc_46A71D
	cmp dword [eax+1E8h], 0
	jz loc_46A711
	mov dword [esp], 10000h

loc_46A64B:
	xor eax, eax
	mov [esp+4], eax
	cmp dword [esi+280h], 2
	jnz loc_46A727
	mov byte [esi+2D7h], 0
	mov byte [esi+2D8h], 0FFh

loc_46A66C:
	mov [esi+2E4h], eax

loc_46A672:
	cmp dword [dword_540F44], 0
	jnz loc_46A682
	mov byte [esi+2D8h], 0FFh

loc_46A682:
	cmp dword [esi+284h], 2
	jnz loc_46A692
	mov byte [esi+2D7h], 0

loc_46A692:
	xor eax, eax
	mov al, [esi+2D7h]
	lea edx, [eax+1]
	shl edx, 10h
	mov ecx, 0F8h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 10000h
	jge loc_46AAFD

loc_46A6B7:
	xor edx, edx
	mov dl, [esi+2D8h]
	inc edx
	mov ecx, 0F8h
	shl edx, 10h
	mov dword [dword_4D8508], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 10000h
	jge loc_46AB07

loc_46A6DF:
	mov dword [dword_4D8504], eax
	mov eax, [esi+2E4h]
	inc eax
	test eax, eax
	jle loc_46AB11

loc_46A6F3:
	shl eax, 10h
	mov edx, eax
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	mov dword [dword_4D850C], eax
	add esp, 0Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46A711:
	mov dword [esp], 0FFFF0000h
	jmp loc_46A64B

loc_46A71D:
	xor ecx, ecx
	mov [esp], ecx
	jmp loc_46A64B

loc_46A727:
	mov eax, [esi+21Ch]
	cmp dword [eax+14h], 0
	jz loc_46A90B
	mov dl, 10h

loc_46A739:
	xor eax, eax
	xor ecx, ecx
	mov al, [esi+2D7h]
	mov cl, [esi+2D4h]
	sub ecx, eax
	mov eax, ecx
	lea ecx, [esi+2D7h]
	test eax, eax
	jl loc_46A912
	and edx, 0FFh
	cmp edx, eax
	jle loc_46A767
	mov edx, eax

loc_46A767:
	xor eax, eax
	mov al, [ecx]
	add eax, edx

loc_46A76D:
	mov [ecx], al
	mov eax, [esi+21Ch]
	cmp dword [eax+18h], 0
	jz loc_46A96F
	xor edx, edx
	xor ecx, ecx
	mov dl, [esi+2D8h]
	mov cl, [esi+2D5h]
	mov eax, edx
	sub ecx, edx
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	lea ebx, [esi+2D8h]
	test ecx, ecx
	jl loc_46A93D
	mov edx, [esi+2ECh]
	mov al, [edx+eax+114h]
	and eax, 0FFh
	cmp eax, ecx
	jle loc_46A936

loc_46A7C6:
	xor eax, eax
	mov al, [ebx]
	add eax, ecx

loc_46A7CC:
	mov [ebx], al

loc_46A7CE:
	mov ah, [esi+2DBh]
	test ah, ah
	jbe loc_46A7E2
	mov dl, ah
	dec dl
	mov [esi+2DBh], dl

loc_46A7E2:
	cmp dword [dword_540F44], 0
	jz loc_46A8A1
	mov eax, [esi+1E8h]
	shl eax, 6
	cmp dword dword_512278[eax], 1
	jnz loc_46A814
	cmp dword [dword_540F48], 23Ch
	jge loc_46A814
	mov byte [esi+2D6h], 2

loc_46A814:
	mov dh, [esi+2DAh]
	cmp dh, [esi+2D6h]
	jz loc_46A8A1
	mov eax, [esi+1E8h]
	shl eax, 6
	cmp dword dword_512278[eax], 1
	jnz loc_46AA21
	mov bl, [esi+2D6h]
	cmp bl, 2
	jnb loc_46A980
	cmp dword [dword_512208], 2
	jl loc_46A862
	mov ecx, dword [dword_51220C]
	cmp ecx, [esi+1E8h]
	jnz loc_46A87A

loc_46A862:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830

loc_46A87A:
	mov al, [esi+2DAh]
	mov [esi+2D9h], al
	mov al, [esi+2D6h]

loc_46A88C:
	mov [esi+2DAh], al
	mov eax, [esi+2ECh]
	mov al, [eax+8]
	mov [esi+2DBh], al

loc_46A8A1:
	mov eax, [esi+21Ch]
	cmp dword [eax+10h], 0
	jz loc_46AAF2
	cmp dword [esi+2E0h], 0
	jl loc_46A8C7
	cmp dword [esi+2E4h], 0
	jl loc_46AA90

loc_46A8C7:
	cmp dword [esi+2E0h], 0
	jle loc_46AA83

loc_46A8D4:
	mov edx, [esi+2ECh]
	mov eax, [esi+2E0h]
	mov ecx, [esi+2E4h]
	mov edx, [edx+130h]
	sub eax, ecx
	lea ecx, [esi+2E4h]
	test eax, eax
	jl loc_46AADC
	cmp edx, eax
	jle loc_46AAD3
	add [ecx], eax
	jmp loc_46A672

loc_46A90B:
	mov dl, 18h
	jmp loc_46A739

loc_46A912:
	xor ebx, ebx
	mov bl, dl
	mov edx, eax
	neg edx
	cmp ebx, edx
	jle loc_46A929
	xor eax, eax
	mov al, [ecx]
	sub eax, edx
	jmp loc_46A76D

loc_46A929:
	mov edx, ebx
	xor eax, eax
	mov al, [ecx]
	sub eax, edx
	jmp loc_46A76D

loc_46A936:
	mov ecx, eax
	jmp loc_46A7C6

loc_46A93D:
	mov edx, [esi+2ECh]
	mov al, [edx+eax+11Ch]
	mov edx, ecx
	and eax, 0FFh
	neg edx
	cmp eax, edx
	jle loc_46A962
	xor eax, eax
	mov al, [ebx]
	sub eax, edx
	jmp loc_46A7CC

loc_46A962:
	mov edx, eax
	xor eax, eax
	mov al, [ebx]
	sub eax, edx
	jmp loc_46A7CC

loc_46A96F:
	mov al, [esi+2D5h]
	mov [esi+2D8h], al
	jmp loc_46A7CE

loc_46A980:
	jnz loc_46A8A1
	cmp bl, [esi+2DAh]
	jbe loc_46A8A1
	cmp dword [dword_512208], 2
	jl loc_46A9F8
	mov ebp, dword [dword_51220C]
	cmp ebp, [esi+1E8h]
	jz loc_46A9F8

loc_46A9A9:
	mov al, [esi+2DAh]
	mov [esi+2D9h], al
	mov eax, 2
	mov ebx, 8
	mov [esp+8], eax
	mov ecx, eax

loc_46A9C5:
	mov eax, [esi+2ECh]
	cmp ecx, [eax+4]
	jge loc_46AA18
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [ebx+eax+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	cmp eax, [esi+2B8h]
	jl loc_46AA12

loc_46A9F2:
	inc ecx
	add ebx, 4
	jmp loc_46A9C5

loc_46A9F8:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830
	jmp loc_46A9A9

loc_46AA12:
	mov [esp+8], ecx
	jmp loc_46A9F2

loc_46AA18:
	mov al, [esp+8]
	jmp loc_46A88C

loc_46AA21:
	cmp dword [dword_512208], 2
	jl loc_46AA38
	mov ebx, dword [dword_51220C]
	cmp ebx, [esi+1E8h]
	jnz loc_46AA50

loc_46AA38:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830

loc_46AA50:
	mov al, [esi+2DAh]
	mov [esi+2D9h], al
	mov al, [esi+2D6h]
	mov [esi+2DAh], al
	mov eax, [esi+2ECh]
	mov al, [eax+8]
	mov [esi+2DBh], al
	mov eax, esi
	call sub_478B10
	jmp loc_46A8A1

loc_46AA83:
	cmp dword [esi+2E4h], 0
	jle loc_46A8D4

loc_46AA90:
	mov eax, [esi+2E4h]
	mov edx, [esi+2ECh]
	lea ecx, [esi+2E4h]
	neg eax
	mov edx, [edx+134h]
	test eax, eax
	jl loc_46AABD
	cmp edx, eax
	jle loc_46AAB9

loc_46AAB2:
	add [ecx], eax
	jmp loc_46A672

loc_46AAB9:
	mov eax, edx
	jmp loc_46AAB2

loc_46AABD:
	neg eax
	cmp edx, eax
	jle loc_46AACA
	sub [ecx], eax
	jmp loc_46A672

loc_46AACA:
	mov eax, edx
	sub [ecx], eax
	jmp loc_46A672

loc_46AAD3:
	mov eax, edx
	add [ecx], eax
	jmp loc_46A672

loc_46AADC:
	neg eax
	cmp edx, eax
	jle loc_46AAE9
	sub [ecx], eax
	jmp loc_46A672

loc_46AAE9:
	mov eax, edx
	sub [ecx], eax
	jmp loc_46A672

loc_46AAF2:
	mov eax, [esi+2E0h]
	jmp loc_46A66C

loc_46AAFD:
	mov eax, 10000h
	jmp loc_46A6B7

loc_46AB07:
	mov eax, 10000h
	jmp loc_46A6DF

loc_46AB11:
	neg eax
	jmp loc_46A6F3
;sub_46A620 endp

sub_46AB20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	cmp dword [dword_512208], 1
	jnz loc_46AD15
	cmp dword [eax+1E8h], 0
	jz loc_46AD09
	mov dword [esp], 10000h

loc_46AB4C:
	xor eax, eax
	mov [esp+4], eax
	cmp byte [ecx+2DAh], 2
	jb loc_46ACFF
	mov eax, [ecx+2ECh]
	xor edx, edx
	mov eax, [eax+4]
	mov dl, [ecx+2DAh]
	dec eax
	cmp edx, eax
	jge loc_46AB76
	inc edx

loc_46AB76:
	mov [esp+10h], edx
	mov dl, [ecx+2DAh]
	cmp dl, 2
	jbe loc_46AD1F
	xor ebx, ebx
	mov bl, dl
	dec ebx

loc_46AB8E:
	mov dh, [ecx+2DAh]
	cmp dh, 3
	jbe loc_46AD28
	xor eax, eax
	mov al, dh
	sub eax, 2

loc_46ABA4:
	mov [esp+0Ch], eax
	xor eax, eax
	mov al, [ecx+2DAh]
	mov esi, [ecx+2ECh]
	shl eax, 2
	lea edx, [esi+eax]
	mov edx, [edx+168h]
	mov eax, [ecx+304h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, [ecx+2ECh]
	mov esi, eax
	mov eax, [esp+10h]
	mov edx, [edx+eax*4+168h]
	mov eax, [ecx+304h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, [ecx+2ECh]
	mov eax, [ecx+304h]
	mov edx, [edi+ebx*4+168h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [edi+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebp, [ecx+2ECh]
	mov edi, eax
	mov eax, [esp+0Ch]
	mov edx, [ebp+eax*4+168h]
	mov eax, [ecx+304h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0F0h]
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, dword [dword_4D8508]
	mov ebp, eax
	cmp edx, 0E666h
	jle loc_46AD31

loc_46AC8B:
	mov eax, [ecx+2ECh]
	mov edx, [eax+0F0h]
	sub edx, 1F4h
	cmp esi, edx
	jle loc_46ADDD
	mov edx, [eax+4]
	xor eax, eax
	dec edx
	mov al, [ecx+2DAh]
	cmp eax, edx
	jge loc_46ADDD
	cmp eax, [esp+10h]
	jz loc_46ACFF
	mov [ecx+2D9h], al
	mov al, [esp+10h]
	mov [ecx+2DAh], al
	mov eax, [ecx+2ECh]
	mov al, [eax+8]
	mov esi, dword [dword_512208]
	mov [ecx+2DBh], al
	cmp esi, 2
	jl loc_46ADAA
	mov edi, dword [dword_51220C]
	cmp edi, [ecx+1E8h]
	jz loc_46ADAA

loc_46ACFF:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46AD09:
	mov dword [esp], 0FFFF0000h
	jmp loc_46AB4C

loc_46AD15:
	xor ebx, ebx
	mov [esp], ebx
	jmp loc_46AB4C

loc_46AD1F:
	xor ebx, ebx
	mov bl, dl
	jmp loc_46AB8E

loc_46AD28:
	xor eax, eax
	mov al, dh
	jmp loc_46ABA4

loc_46AD31:
	test esi, esi
	jle loc_46ADCC
	mov [esp+8], esi

loc_46AD3D:
	mov edx, [ecx+2ECh]
	mov eax, [esp+8]
	cmp eax, [edx+0F0h]
	jg loc_46AC8B
	mov eax, [edx+0F0h]
	sub eax, 5DCh
	cmp edi, eax
	jge loc_46ACFF
	xor eax, eax
	mov al, [ecx+2DAh]
	cmp ebx, eax
	jz loc_46ACFF
	mov [ecx+2D9h], al
	mov eax, [ecx+2ECh]
	mov [ecx+2DAh], bl
	mov al, [eax+8]
	mov edx, dword [dword_512208]
	mov [ecx+2DBh], al
	cmp edx, 2
	jl loc_46AEBF
	mov eax, [ecx+1E8h]
	cmp eax, dword [dword_51220C]
	jnz loc_46ACFF

loc_46ADAA:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46ADCC:
	mov eax, esi
	mov [esp+8], esi
	neg eax
	mov [esp+8], eax
	jmp loc_46AD3D

loc_46ADDD:
	mov eax, [ecx+2ECh]
	mov eax, [eax+0F0h]
	sub eax, 5DCh
	cmp ebp, eax
	jge loc_46AE5E
	xor eax, eax
	mov esi, [esp+0Ch]
	mov al, [ecx+2DAh]
	cmp eax, esi
	jz loc_46AE5E
	mov [ecx+2D9h], al
	mov al, [esp+0Ch]
	mov [ecx+2DAh], al
	mov eax, [ecx+2ECh]
	mov al, [eax+8]
	mov [ecx+2DBh], al
	cmp dword [dword_512208], 2
	jl loc_46AE3C
	mov edx, dword [dword_51220C]
	cmp edx, [ecx+1E8h]
	jnz loc_46ACFF

loc_46AE3C:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46AE5E:
	mov eax, [ecx+2ECh]
	mov eax, [eax+0F0h]
	sub eax, 5DCh
	cmp edi, eax
	jge loc_46ACFF
	xor eax, eax
	mov al, [ecx+2DAh]
	cmp ebx, eax
	jz loc_46ACFF
	mov [ecx+2D9h], al
	mov eax, [ecx+2ECh]
	mov [ecx+2DAh], bl
	mov al, [eax+8]
	mov edi, dword [dword_512208]
	mov [ecx+2DBh], al
	cmp edi, 2
	jl loc_46AEBF
	mov ebp, dword [dword_51220C]
	cmp ebp, [ecx+1E8h]
	jnz loc_46ACFF

loc_46AEBF:
	mov eax, esp
	push eax
	mov edx, 7
	xor ecx, ecx
	push 0
	xor ebx, ebx
	mov eax, 0FFFFFFFFh
	call sub_444830
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46AB20 endp

sub_46AEF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 68h
	mov ecx, eax
	xor edx, edx
	mov eax, [eax+14h]
	mov [esp+50h], edx
	mov [esp+60h], eax
	mov edx, eax
	shl eax, 3
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add edx, eax
	mov [esp+44h], edx
	mov ebp, [edx+0Fh]
	mov ebx, [edx+10h]
	mov eax, [ecx+0A8h]
	mov edi, [edx+11h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, [ecx+9Ch]
	add edx, eax
	mov eax, edx
	mov edx, [esp+44h]
	sub eax, [edx]
	mov [esp+48h], eax
	mov eax, [ecx+0ACh]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, [ecx+0A0h]
	add edx, eax
	mov eax, edx
	mov edx, [esp+44h]
	sub eax, [edx+4]
	mov [esp+40h], eax
	mov eax, [ecx+0B0h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 5
	sbb eax, edx
	sar eax, 5
	mov edx, [ecx+0A4h]
	sar ebp, 18h
	add edx, eax
	sar ebx, 18h
	mov eax, edx
	mov edx, [esp+44h]
	shl ebp, 9
	sub eax, [edx+8]
	mov edx, [esp+48h]
	mov [esp+3Ch], eax
	mov eax, ebp
	shl ebx, 9
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+40h]
	mov [esp+44h], eax
	mov eax, ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	sar edi, 18h
	add edx, eax
	shl edi, 9
	mov [esp+44h], edx
	mov eax, edi
	mov edx, [esp+3Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	add edx, eax
	mov eax, [ecx+0DCh]
	mov [esp+54h], eax
	mov eax, [ecx+0E0h]
	mov [esp+64h], edx
	mov [esp+58h], eax
	mov eax, [ecx+0E4h]
	mov [ecx+0C0h], edx
	mov [esp+5Ch], eax
	mov eax, [ecx+0C8h]
	mov edx, [ecx+0C4h]
	mov [esp+4Ch], eax
	mov [esp+24h], edx
	mov edx, [esp+4Ch]
	mov eax, [ecx+0CCh]
	mov [esp+28h], edx
	mov [esp+2Ch], eax
	mov eax, [esp+54h]
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+44h], eax
	mov edx, ebx
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	xor esi, esi
	add edx, eax
	mov eax, [esp+5Ch]
	mov [esp+44h], edx
	mov edx, edi
	mov [esp+0Ch], ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+44h]
	mov [esp+10h], ebx
	add edx, eax
	mov eax, [ecx+110h]
	mov [esp+14h], edi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jg loc_46B46B
	mov eax, [esp+54h]
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, ebx
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add ebp, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [eax+ebp]
	mov eax, [ecx+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax

loc_46B0F5:
	mov edx, [esp+0Ch]
	mov edi, eax
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [ebx+eax]
	mov eax, [ecx+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	test eax, eax
	jle loc_46B4B7
	mov edx, [esp+0Ch]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [ebx+eax]
	mov eax, [ecx+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx

loc_46B199:
	add edi, eax
	mov eax, [esp+60h]
	lea ebx, 0[eax*8]
	add ebx, eax
	mov edx, dword [dword_5118A4]
	shl ebx, 2
	add edx, ebx
	xor eax, eax
	mov ax, [edx+1Ah]
	mov ebx, edi
	shl eax, 8
	sub ebx, eax
	lea eax, [ebx+4000h]
	mov ebx, [esp+64h]
	cmp eax, ebx
	jle loc_46B1F3
	mov dl, [edx+1Eh]
	and edx, 0FFh
	sar edx, 4
	test dl, 0Fh
	jz loc_46B1F3
	mov esi, 0FFFFFFFFh
	sub eax, ebx
	and edx, 0Fh
	mov [esp+50h], eax
	mov dword [dword_4D8510], edx

loc_46B1F3:
	mov edx, [esp+60h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	shl eax, 2
	add eax, edx
	xor edx, edx
	mov dx, [eax+1Ch]
	shl edx, 8
	sub edx, edi
	mov ebx, [esp+64h]
	sub edx, 4000h
	cmp edx, ebx
	jge loc_46B50B
	test byte [eax+1Eh], 0Fh
	jz loc_46B50B
	mov ebx, [esp+64h]
	mov esi, 1
	mov al, [eax+1Eh]
	sub ebx, edx
	and al, 0Fh
	mov [esp+50h], ebx
	and eax, 0FFh
	mov dword [dword_4D8510], eax

loc_46B250:
	mov edx, esi
	mov eax, ecx
	call sub_478CC0
	cmp dword [ecx+17Ch], 0
	jnz loc_46B45F
	mov eax, [ecx+108h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+0Ch]
	imul edx, eax
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+10h]
	imul edx, ebx
	mov [esp], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+14h]
	imul edx, ebx
	mov [esp+4], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [esp+8], eax
	test esi, esi
	jle loc_46B51F
	mov edi, [esp]
	mov eax, [ecx+9Ch]
	add eax, edi
	mov [ecx+170h], eax
	mov ebp, [esp+4]
	mov eax, [ecx+0A0h]
	add eax, ebp
	mov [ecx+174h], eax
	mov edx, [esp+8]
	mov eax, [ecx+0A4h]
	add eax, edx

loc_46B2F9:
	mov [ecx+178h], eax
	test byte [ecx+1F4h], 4
	jz loc_46B553

loc_46B30C:
	cmp dword [dword_4D8514], 0
	jz loc_46B5F8
	cmp dword [ecx+0BCh], 2CA3D7h
	jle loc_46B5F8
	mov edx, dword [dword_51221C]
	mov eax, [ecx+14h]
	cmp edx, 6
	jnz loc_46B61F
	cmp eax, 168h
	jle loc_46B5E6
	cmp eax, 426h
	jge loc_46B5E6

loc_46B351:
	mov dword [dword_4D8510], 7

loc_46B35B:
	mov edx, [esp+0Ch]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_46B68A
	mov edx, [esp+0Ch]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx

loc_46B3E7:
	cmp eax, 0A0000h
	jle loc_46B560
	mov dword [ecx+168h], 40004h
	mov dword [ecx+164h], 0
	mov dword [ecx+578h], 80h
	mov dword [ecx+58Ch], 1
	mov dword [ecx+160h], 1E0000h
	mov eax, [ecx+14h]
	mov esi, [ecx+0E8h]
	mov [ecx+17Ch], eax
	add esi, 18000h
	mov bx, [ecx+0F2h]
	mov [ecx+0E8h], esi
	inc ebx
	mov al, [ecx+2D7h]
	mov [ecx+0F2h], bx
	cmp al, 0C8h
	jbe loc_46B45F
	mov eax, ecx
	call sub_4540A0

loc_46B45F:
	xor eax, eax
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46B46B:
	mov eax, [esp+54h]
	mov edx, ebp
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, ebx
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	add ebp, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [eax+ebp]
	mov eax, [ecx+110h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	jmp loc_46B0F5

loc_46B4B7:
	mov edx, [esp+0Ch]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [ebx+eax]
	mov eax, [ecx+108h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	neg eax
	jmp loc_46B199

loc_46B50B:
	test esi, esi
	jnz loc_46B250
	xor eax, eax
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46B51F:
	mov ebp, [esp]
	mov eax, [ecx+9Ch]
	sub eax, ebp
	mov [ecx+170h], eax
	mov edx, [esp+4]
	mov eax, [ecx+0A0h]
	sub eax, edx
	mov [ecx+174h], eax
	mov ebx, [esp+8]
	mov eax, [ecx+0A4h]
	sub eax, ebx
	jmp loc_46B2F9

loc_46B553:
	cmp dword [ecx+53Ch], 0
	jg loc_46B30C

loc_46B560:
	cmp dword [ecx+15Ch], 9999h
	jle loc_46B6D3

loc_46B570:
	test esi, esi
	jl loc_46B76C
	mov eax, [esp+0Ch]
	mov [esp+30h], eax
	mov ebp, eax
	mov eax, [esp+10h]
	mov [esp+34h], eax
	neg eax
	mov [esp+34h], eax
	mov eax, [esp+14h]
	neg ebp
	mov edx, eax
	mov [esp+38h], eax
	neg edx
	mov [esp+30h], ebp
	mov [esp+38h], edx

loc_46B5A6:
	lea ebx, [ecx+9Ch]
	lea edx, [esp+30h]
	mov eax, ecx
	call sub_456420
	cmp dword [ecx+160h], 0
	jz loc_46B5DA
	mov eax, dword [dword_4D8510]
	mov dword [ecx+164h], 0
	or eax, 40000h
	mov [ecx+168h], eax

loc_46B5DA:
	mov eax, esi
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46B5E6:
	cmp eax, 488h
	jle loc_46B5F8
	cmp eax, 649h
	jl loc_46B351

loc_46B5F8:
	cmp dword [dword_4D8510], 6
	jnz loc_46B60D
	cmp dword [ecx+15Ch], 30000h
	jg loc_46B63D

loc_46B60D:
	cmp dword [dword_4D8510], 7
	jz loc_46B35B
	jmp loc_46B560

loc_46B61F:
	cmp edx, 7
	jnz loc_46B5F8
	cmp eax, 4B0h
	jle loc_46B5F8
	cmp eax, 6B9h
	jge loc_46B5F8
	mov dword [dword_4D8510], edx
	jmp loc_46B35B

loc_46B63D:
	mov dword [ecx+578h], 60h
	mov dword [ecx+58Ch], 1
	mov ebx, [ecx+0E8h]
	mov eax, [ecx+14h]
	mov esi, [ecx+0F0h]
	add ebx, 8000h
	mov [ecx+17Ch], eax
	add esi, 3333h
	mov [ecx+0E8h], ebx
	xor eax, eax
	mov [ecx+0F0h], esi
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46B68A:
	mov edx, [esp+0Ch]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ebx, eax
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	neg eax
	jmp loc_46B3E7

loc_46B6D3:
	cmp dword [ecx+100h], 0E666h
	jl loc_46B570
	cmp word [ecx+14Ch], 0
	jnz loc_46B570
	mov eax, [esp+50h]
	add eax, eax
	lea ebx, [ecx+118h]
	test eax, eax
	jle loc_46B789

loc_46B705:
	mov edx, esi
	imul edx, eax
	mov eax, ecx
	call sub_46B9C0
	mov edx, [esp+60h]
	lea ebx, 0[edx*8]
	add ebx, edx
	mov edx, dword [dword_5118A4]
	shl ebx, 2
	add edx, ebx
	mov ebx, [edx+0Ch]
	sar ebx, 18h
	shl ebx, 9
	mov [esp+18h], ebx
	mov ebx, [edx+0Dh]
	mov edx, [edx+0Eh]
	sar edx, 18h
	shl edx, 9
	sar ebx, 18h
	push edx
	shl ebx, 9
	mov edi, [esp+1Ch]
	push ebx
	mov [esp+28h], edx
	mov edx, eax
	push edi
	mov eax, ecx
	mov [esp+28h], ebx
	call sub_46B790
	mov eax, esi
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46B76C:
	mov eax, [esp+0Ch]
	mov [esp+30h], eax
	mov eax, [esp+10h]
	mov [esp+34h], eax
	mov eax, [esp+14h]
	mov [esp+38h], eax
	jmp loc_46B5A6

loc_46B789:
	neg eax
	jmp loc_46B705
;sub_46AEF0 endp

sub_46B790: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov eax, edx
	test byte [ecx+1F4h], 4
	jz loc_46B91E
	cmp eax, 0F0000h
	jl loc_46B7BF
	cmp dword [ecx+2B8h], 140000h
	jg loc_46B947

loc_46B7BF:
	push ebx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	add eax, eax
	mov [ecx+160h], eax
	mov eax, dword [dword_4D8510]
	or eax, 40000h
	mov edx, [ecx+1A8h]
	mov [ecx+168h], eax
	mov eax, [esp+28h]
	mov dword [ecx+164h], 0
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	sub ebx, eax
	mov eax, [esp+2Ch]
	mov [esp+4], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A8h]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A4h]
	sub ebx, eax
	mov eax, [esp+24h]
	mov [esp+8], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A0h]
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A0h]
	sub ebx, eax
	mov eax, [esp+24h]
	mov [esp+0Ch], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+1A4h]
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+1A8h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	test eax, eax
	jle loc_46B8DD
	mov esi, [esp+8]
	mov edi, [esp+0Ch]
	mov ebx, [esp+4]
	neg esi
	neg edi
	neg ebx
	mov [esp+8], esi
	mov [esp+0Ch], edi
	mov [esp+4], ebx

loc_46B8DD:
	mov eax, [esp+4]
	mov ebp, [ecx+0E8h]
	mov edx, [ecx+0ECh]
	mov ebx, [ecx+0F0h]
	add ebp, eax
	mov eax, [esp+8]
	mov [ecx+0E8h], ebp
	add edx, eax
	mov eax, [esp+0Ch]
	mov [ecx+0ECh], edx
	add ebx, eax
	mov [ecx+0F0h], ebx
	pop ebx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret 0Ch

loc_46B91E:
	mov esi, dword [dword_4D8510]
	push esi
	mov edi, [esp+2Ch]
	push edi
	mov ebp, [esp+2Ch]
	push ebp
	mov edx, [esp+2Ch]
	push edx
	mov edx, eax
	mov eax, ecx
	call sub_43FEF0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret 0Ch

loc_46B947:
	mov edx, eax
	shl eax, 2
	sub eax, edx
	add eax, eax
	mov [ecx+160h], eax
	mov eax, dword [dword_4D8510]
	mov dword [ecx+164h], 0
	or eax, 40000h
	mov [ecx+168h], eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret 0Ch
;sub_46B790 endp

sub_46B980: ;SUBROUTINE
	cmp edx, 28h
	jle loc_46B99A

loc_46B985:
	cmp edx, 28h
	jle loc_46B98F
	mov edx, 28h

loc_46B98F:
	mov eax, [eax+2ECh]
	mov eax, [eax+edx*4+4Ch]
	ret

loc_46B99A:
	test edx, edx
	jg loc_46B985
	xor edx, edx
	mov eax, [eax+2ECh]
	mov eax, [eax+edx*4+4Ch]
	ret
;sub_46B980 endp

sub_46B9B0: ;SUBROUTINE
	mov dword [dword_4D8510], eax
	ret
;sub_46B9B0 endp

sub_46B9C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov ecx, eax
	mov esi, edx
	mov [esp+24h], edx
	xor edx, edx
	mov eax, esi
	mov [esp+28h], edx
	mov [esp+2Ch], edx
	mov edx, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [ebx+4]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+8]
	add edi, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+0Ch]
	lea ebp, [edi+eax]
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	mov edx, [ebx+10h]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+14h]
	add edi, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+18h]
	add edi, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx+1Ch]
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+20h]
	add esi, eax
	xor eax, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+9Ch]
	add eax, esi
	sub edx, ebp
	mov esi, [ecx+0A0h]
	mov [ecx+9Ch], edx
	add esi, edi
	mov edi, [ecx+0A4h]
	mov [ecx+0A0h], esi
	add edi, eax
	mov [ecx+0A4h], edi
	mov eax, [ecx+0A8h]
	mov edx, [ebx]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx+4]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+8]
	add esi, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov ebp, eax
	mov [esp+24h], eax
	neg ebp
	mov [esp+24h], ebp
	mov edx, [ebx+18h]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ebx+1Ch]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx+20h]
	add esi, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov [esp+2Ch], esi
	test ebp, ebp
	jle loc_46BD4D
	mov edx, ebp

loc_46BB33:
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	mov eax, [esp+24h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	mov [esp+24h], eax
	xor edx, edx
	mov [esp+24h], edx
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add edx, eax
	mov edi, [esp+2Ch]
	shl edx, 2
	test edi, edi
	jle loc_46BD92
	cmp edi, 50000h
	jg loc_46BD56

loc_46BB88:
	mov edx, esp
	mov eax, ebx
	call sub_49D890
	mov edx, [esp]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+4]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov eax, [ecx+0ACh]
	mov [ecx+0A8h], ebx
	test eax, eax
	jle loc_46BBE6
	mov dword [ecx+0ACh], 0

loc_46BBE6:
	mov edx, [esp+18h]
	mov eax, [esp+24h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+1Ch]
	mov ebx, eax
	mov eax, [esp+28h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+20h]
	add ebx, eax
	mov eax, [esp+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0C4h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+0B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D0h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov edx, [ecx+0A8h]
	mov [ecx+2B8h], ebx
	test edx, edx
	jle loc_46BDD9

loc_46BD20:
	mov ebx, [ecx+0B0h]
	test ebx, ebx
	jle loc_46BDE0
	mov eax, ebx

loc_46BD30:
	cmp edx, eax
	jle loc_46BDE9
	sar eax, 2
	add eax, edx
	mov [ecx+0BCh], eax
	mov eax, esi
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46BD4D:
	mov edx, ebp
	neg edx
	jmp loc_46BB33

loc_46BD56:
	mov eax, dword dword_511D94[edx]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, edi
	sub edx, eax
	mov [esp+2Ch], edx
	test edx, edx
	jge loc_46BB88
	xor ebp, ebp
	mov [esp+2Ch], ebp
	jmp loc_46BB88

loc_46BD92:
	cmp edi, 0FFFB0000h
	jge loc_46BB88
	mov eax, dword dword_511D94[edx]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov edx, eax
	mov eax, esi
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	lea edx, [edi+eax]
	mov [esp+2Ch], edx
	test edx, edx
	jle loc_46BB88
	xor ebp, ebp
	mov [esp+2Ch], ebp
	jmp loc_46BB88

loc_46BDD9:
	neg edx
	jmp loc_46BD20

loc_46BDE0:
	mov eax, ebx
	neg eax
	jmp loc_46BD30

loc_46BDE9:
	sar edx, 2
	add eax, edx
	mov [ecx+0BCh], eax
	mov eax, esi
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_46B9C0 endp

sub_46BE00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ebx, [eax+2ECh]
	mov eax, 10000h
	mov edx, eax
	mov ecx, [ebx+0F0h]
	sar edx, 1Fh
	idiv ecx
	mov [ebx+164h], eax
	mov eax, [esi+2ECh]
	xor edi, edi
	mov dword [eax+1D8h], 0

loc_46BE38:
	mov eax, [esi+2ECh]
	lea edx, [eax+edi]
	mov ebx, [eax+1D8h]
	mov ebp, [edx+4Ch]
	cmp ebx, ebp
	jl loc_46BFCA

loc_46BE52:
	add edi, 4
	cmp edi, 0A4h
	jnz loc_46BE38
	xor edi, edi
	xor ebp, ebp

loc_46BE61:
	mov eax, [esi+2ECh]
	cmp ebp, [eax+4]
	jge loc_46C00A
	cmp dword [dword_512204], 0
	jnz loc_46BEAB
	mov edx, [esi+21Ch]
	mov ecx, [edx+2Ch]
	test ecx, ecx
	jz loc_46BEAB
	mov ebx, ecx
	mov eax, [edi+eax+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+edi+0Ch], eax

loc_46BEAB:
	mov eax, [esi+2ECh]
	add eax, edi
	mov ebx, [eax+0Ch]
	test ebx, ebx
	jz loc_46BFD5
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+edi+188h], eax

loc_46BEE5:
	mov eax, [esi+2ECh]
	mov ebx, [eax]
	mov eax, [edi+eax+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+edi+1A8h], eax
	mov eax, [esi+2ECh]
	mov ebx, 0A0000h
	mov eax, [edi+eax+1A8h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+edi+1A8h], eax
	mov eax, [esi+2ECh]
	mov edx, [edi+eax+2Ch]
	mov eax, [edi+eax+1A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [edx+edi+1A8h], eax
	test byte [byte_512218], 4
	jnz loc_46BFE4

loc_46BF78:
	mov eax, [esi+2ECh]
	mov edx, [eax+0F0h]
	shl edx, 10h
	mov eax, [edi+eax+188h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov eax, 10000h
	add edi, 4
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	inc ebp
	mov [edx+edi+164h], eax
	jmp loc_46BE61

loc_46BFCA:
	mov [eax+1D8h], ebp
	jmp loc_46BE52

loc_46BFD5:
	mov dword [eax+188h], 28Fh
	jmp loc_46BEE5

loc_46BFE4:
	mov eax, [esi+21Ch]
	cmp dword [eax], 0Fh
	jge loc_46BF78
	mov eax, [esi+2ECh]
	mov ecx, [edi+eax+1A8h]
	add ecx, ecx
	mov [edi+eax+1A8h], ecx
	jmp loc_46BF78

loc_46C00A:
	test byte [byte_512218], 4
	jz loc_46C04F
	mov edx, [esi+21Ch]
	cmp dword [edx], 0Fh
	jge loc_46C04F
	mov dword [eax+0F8h], 7333h
	mov eax, [esi+2ECh]
	mov edx, 14000h
	mov eax, [eax+138h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [edx+138h], eax

loc_46C04F:
	mov eax, [esi+2ECh]
	mov edx, [eax+4]
	mov edx, [eax+edx*4+8]
	mov eax, [eax+0F4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ebx, [esi+2ECh]
	mov edi, [ebx+4]
	mov edi, [ebx+edi*4+1A4h]
	mov edx, edi
	mov eax, [ebx+eax*4+4Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov edi, eax
	mov eax, [edx+0F4h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, eax
	imul ebx, eax
	imul ebx, eax
	mov eax, edi
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+1C8h], eax
	mov edx, [esi+2ECh]
	mov eax, [edx+124h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, eax
	mov eax, 10000h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [edx+1CCh], eax
	mov eax, [esi+2ECh]
	mov edx, 648h
	mov eax, [eax+1CCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [edx+1CCh], eax
	mov eax, [esi+2ECh]
	shl dword [eax+1CCh], 8
	mov ebx, [esi+2ECh]
	mov eax, 10000h
	mov ebx, [ebx+1CCh]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov [edx+1D0h], eax
	mov ebx, [esi+2ECh]
	mov eax, 10000h
	mov ebx, [ebx+138h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esi+2ECh]
	mov edi, dword [dword_512204]
	mov [edx+1D4h], eax
	test edi, edi
	jz loc_46C1CF
	xor ebx, ebx
	mov dword [dword_4D8514], ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46C1CF:
	mov edx, [esi+21Ch]
	mov eax, [esi+2ECh]
	mov edx, [edx+24h]
	mov eax, [eax+12Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esi+2ECh]
	mov [edx+12Ch], eax
	xor ebx, ebx
	mov dword [dword_4D8514], ebx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46BE00 endp

sub_46C210: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+4], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+8], eax
	xor ebx, ebx

loc_46C246:
	mov eax, edx
	add ebx, 4
	call sub_475F00
	mov esi, [ecx+2ECh]
	mov [esi+ebx+8], eax
	cmp ebx, 20h
	jnz loc_46C246
	xor ebx, ebx

loc_46C261:
	mov eax, edx
	add ebx, 4
	call sub_475F00
	mov esi, [ecx+2ECh]
	mov [esi+ebx+28h], eax
	cmp ebx, 20h
	jnz loc_46C261
	xor ebx, ebx

loc_46C27C:
	mov eax, edx
	add ebx, 4
	call sub_475F00
	mov esi, [ecx+2ECh]
	mov [esi+ebx+48h], eax
	cmp ebx, 0A4h
	jnz loc_46C27C
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+0F0h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+0F4h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+0F8h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+0FCh], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+100h], eax
	xor ebx, ebx

loc_46C2F9:
	mov eax, edx
	inc ebx
	call sub_475EB0
	mov esi, [ecx+2ECh]
	mov [esi+ebx+103h], al
	cmp ebx, 8
	jl loc_46C2F9
	xor ebx, ebx

loc_46C315:
	mov eax, edx
	inc ebx
	call sub_475EB0
	mov esi, [ecx+2ECh]
	mov [esi+ebx+10Bh], al
	cmp ebx, 8
	jl loc_46C315
	xor ebx, ebx

loc_46C331:
	mov eax, edx
	inc ebx
	call sub_475EB0
	mov esi, [ecx+2ECh]
	mov [esi+ebx+113h], al
	cmp ebx, 8
	jl loc_46C331
	xor ebx, ebx

loc_46C34D:
	mov eax, edx
	inc ebx
	call sub_475EB0
	mov esi, [ecx+2ECh]
	mov [esi+ebx+11Bh], al
	cmp ebx, 8
	jl loc_46C34D
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+124h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+128h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+12Ch], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+130h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+134h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+138h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+13Ch], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+144h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+140h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+148h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+14Ch], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+150h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+154h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+158h], eax
	mov eax, edx
	call sub_475F00
	mov ebx, [ecx+2ECh]
	mov [ebx+15Ch], eax
	mov eax, edx
	call sub_475F00
	mov edx, [ecx+2ECh]
	mov [edx+160h], eax
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46C210 endp

sub_46C4A0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	movsx ecx, word [eax]
	lea ebx, [ecx+ecx]
	mov edi, [eax]
	mov [esp], ebx
	mov ebx, [eax+2]
	mov eax, [eax+4]
	mov ebp, [esp]
	sar eax, 10h
	imul ebp, eax
	sar edi, 10h
	lea esi, [edi+edi]
	mov [esp+4], ebp
	mov ebp, eax
	imul ebp, esi
	sar ebx, 10h
	mov [esp+14h], ebx
	add ebx, ebx
	imul eax, ebx
	mov [esp+8], ebp
	mov ebp, [esp]
	imul ebp, ecx
	mov [esp+0Ch], ebp
	mov ebp, ecx
	imul ebp, esi
	imul ecx, ebx
	imul esi, edi
	imul edi, ebx
	mov [esp+10h], ebp
	imul ebx, [esp+14h]
	mov ebp, 10000000h
	sub ebp, esi
	sub ebp, ebx
	sar ebp, 0Ch
	mov [edx], ebp
	mov ebp, [esp+10h]
	add ebp, eax
	sar ebp, 0Ch
	mov [edx+4], ebp
	mov ebp, ecx
	sub ebp, [esp+8]
	sar ebp, 0Ch
	mov [edx+8], ebp
	mov ebp, [esp+10h]
	sub ebp, eax
	mov eax, ebp
	sar eax, 0Ch
	mov ebp, [esp+0Ch]
	mov [edx+0Ch], eax
	mov eax, 10000000h
	sub eax, ebp
	mov ebp, eax
	sub ebp, ebx
	mov ebx, ebp
	sub eax, esi
	sar ebx, 0Ch
	sar eax, 0Ch
	mov [edx+10h], ebx
	mov ebx, [esp+4]
	mov ebp, [esp+4]
	add ebx, edi
	mov [edx+20h], eax
	sar ebx, 0Ch
	sub edi, ebp
	mov [edx+14h], ebx
	mov ebx, [esp+8]
	sar edi, 0Ch
	add ecx, ebx
	mov [edx+1Ch], edi
	sar ecx, 0Ch
	mov [edx+18h], ecx
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46C4A0 endp

sub_46C590: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	mov [esp+8], ecx
	mov ebx, [esp+1Ch]
	mov ecx, 10000h
	sub ecx, ebx
	movsx eax, word [eax]
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	mov edx, ebx
	movsx eax, word [edi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, [esp+4]
	add eax, [esp]
	mov edx, [esp+20h]
	mov [edx], ax
	mov eax, [esi]
	mov edx, ecx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	mov eax, [edi]
	mov edx, ebx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, [esp+4]
	add eax, [esp]
	mov edx, [esp+20h]
	mov [edx+2], ax
	mov eax, [esi+2]
	mov edx, ecx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, [edi+2]
	mov edx, ebx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+4], eax
	mov eax, [esp]
	add eax, [esp+4]
	mov edx, [esp+20h]
	mov [edx+4], ax
	mov eax, [esi+4]
	mov edx, ecx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov eax, [edi+4]
	mov edx, ebx
	sar eax, 10h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov eax, [esp+20h]
	mov [eax+6], si
	mov edx, ecx
	mov eax, [ebp+0]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov eax, [esp+8]
	mov edx, ebx
	mov eax, [eax]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov eax, [esp+24h]
	mov [eax], esi
	mov edx, ecx
	mov eax, [ebp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov eax, [esp+8]
	mov edx, ebx
	mov eax, [eax+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add esi, eax
	mov eax, [esp+24h]
	mov [eax+4], esi
	mov edx, ecx
	mov eax, [ebp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov eax, [esp+8]
	mov edx, ebx
	mov eax, [eax+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov eax, [esp+24h]
	mov [eax+8], ecx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_46C590 endp

sub_46C710: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edi, eax
	mov eax, dword [dword_51220C]
	xor edx, edx
	mov eax, dword dword_511D08[eax*4]
	mov dword [dword_4D9548], edx
	call sub_46EA10
	mov word [word_4D9530], ax
	mov eax, edi
	call sub_46C820
	mov eax, dword [dword_5222E0]
	xor esi, esi
	call sub_44B660
	mov ecx, dword [dword_511E3C]
	mov [esp], eax
	test ecx, ecx
	jle loc_46C781
	mov [esp+4], edx
	xor ebp, ebp

loc_46C760:
	cmp dword dword_513658[ebp], 0
	jge loc_46C795

loc_46C769:
	mov ebx, [esp+4]
	mov eax, dword [dword_511E3C]
	add ebp, 20h
	add ebx, 4
	inc esi
	mov [esp+4], ebx
	cmp esi, eax
	jl loc_46C760

loc_46C781:
	mov eax, dword [dword_540F48]
	mov dword [dword_4D928C], eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46C795:
	mov ecx, [esp+4]
	mov eax, dword [dword_5222E0]
	mov ecx, dword dword_511B48[ecx]
	call sub_44B2C0
	cmp eax, ecx
	jnz loc_46C7C2
	mov ebx, [esp]
	test ebx, ebx
	jz loc_46C769
	cmp dword [dword_5222DC], 1
	jz loc_46C769
	cmp ebx, 1
	jz loc_46C769

loc_46C7C2:
	mov eax, ecx
	call sub_4616E0
	cmp dword [ecx+16Ch], 0
	jz loc_46C807
	mov edx, dword [dword_540F48]
	cmp edx, [ecx+630h]
	jz loc_46C7E6
	inc dword [ecx+62Ch]

loc_46C7E6:
	mov eax, dword [dword_540F48]
	mov [ecx+630h], eax
	test byte [ecx+62Ch], 1
	jz loc_46C807
	cmp dword [dword_540F28], 0
	jz loc_46C769

loc_46C807:
	mov ebx, esi
	mov edx, edi
	mov eax, ecx
	call sub_46CDD0
	jmp loc_46C769
;sub_46C710 endp

sub_46C820: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ecx, eax
	mov eax, 0C80000h
	xor edx, edx
	mov ebx, 280000h
	mov dword [dword_5222A8], edx
	mov dword [dword_5222AC], edx
	mov dword [dword_5222B0], edx
	mov dword [dword_5222B8], edx
	mov dword [dword_5222B4], edx
	mov [esp+18h], eax
	mov [esp+10h], ebx
	mov [esp+14h], ebx
	mov eax, [ecx+4]
	mov edx, 190000h
	call sub_44B660
	mov [esp+0Ch], edx
	cmp eax, 5
	jz loc_46C977

loc_46C87B:
	cmp dword [dword_512208], 1
	jnz loc_46C89F
	mov edx, 12C000h
	mov ebx, 1E0000h
	mov eax, 960000h
	mov [esp+0Ch], edx
	mov [esp+10h], ebx
	mov [esp+18h], eax

loc_46C89F:
	cmp dword [ecx], 1
	jnz loc_46C8BC
	mov eax, 1AAAAAh
	xor ebp, ebp
	mov edi, 960000h
	mov [esp+0Ch], ebp
	mov [esp+10h], eax
	mov [esp+18h], edi

loc_46C8BC:
	mov edx, dword [dword_511E3C]
	xor edi, edi
	test edx, edx
	jle loc_46C94C
	xor ebx, ebx
	xor ebp, ebp

loc_46C8D0:
	mov edx, dword [dword_512208]
	mov esi, dword dword_511B48[ebp]
	cmp edx, 1
	jnz loc_46C984
	mov eax, dword [dword_5222E0]
	call sub_44B2C0
	mov edx, [eax+14h]

loc_46C8F2:
	mov eax, [esi+14h]
	call sub_462F70
	cmp dword [dword_512208], 1
	jl loc_46C924
	mov edx, dword [dword_51221C]
	cmp edx, 3
	jnz loc_46C998

loc_46C912:
	cmp byte [esi+8Ch], 0
	jz loc_46C9A3
	mov eax, 64h

loc_46C924:
	cmp byte [esi+8Dh], 0
	jnz loc_46C9AA

loc_46C931:
	mov dword dword_513658[ebx], 0FFFFFFFFh

loc_46C93B:
	mov esi, dword [dword_511E3C]
	add ebp, 4
	inc edi
	add ebx, 20h
	cmp edi, esi
	jl loc_46C8D0

loc_46C94C:
	mov ebx, [esp+14h]
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	call sub_46CC50
	cmp dword [dword_5222B4], 578h
	jge loc_46CBE9

loc_46C96D:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46C977:
	mov dword [esp+14h], dword_500000
	jmp loc_46C87B

loc_46C984:
	mov eax, dword [dword_51220C]
	mov edx, dword dword_511D08[eax*4]
	mov edx, [edx+14h]
	jmp loc_46C8F2

loc_46C998:
	cmp edx, 5
	jz loc_46C912
	jmp loc_46C924

loc_46C9A3:
	xor eax, eax
	jmp loc_46C924

loc_46C9AA:
	cmp eax, 32h
	jg loc_46C931
	xor edx, edx
	mov eax, 63h
	mov dword dword_513660[ebx], edx
	mov dword dword_513658[ebx], eax
	mov eax, [esi+9Ch]
	mov edx, [ecx+8]
	sub eax, edx
	mov [esp], eax
	mov edx, [ecx+0Ch]
	mov eax, [esi+0A0h]
	sub eax, edx
	mov [esp+4], eax
	mov eax, [esi+0A4h]
	mov esi, [ecx+10h]
	sub eax, esi
	mov [esp+8], eax
	mov eax, [esp]
	test eax, eax
	jle loc_46CA19

loc_46C9F5:
	mov edx, [esp+8]
	test edx, edx
	jle loc_46CA1D

loc_46C9FD:
	cmp eax, edx
	jle loc_46CA21
	sar edx, 2

loc_46CA04:
	add eax, edx
	mov esi, [esp+18h]
	mov dword dword_513648[ebx], eax
	cmp eax, esi
	jle loc_46CA26
	jmp loc_46C931

loc_46CA19:
	neg eax
	jmp loc_46C9F5

loc_46CA1D:
	neg edx
	jmp loc_46C9FD

loc_46CA21:
	sar eax, 2
	jmp loc_46CA04

loc_46CA26:
	mov eax, [esp]
	mov edx, [ecx+2Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+30h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+34h]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov edx, [esp+18h]
	mov dword dword_513654[ebx], eax
	cmp eax, edx
	jg loc_46C931
	cmp eax, 0FFFE0000h
	jl loc_46C931
	mov eax, [esp]
	mov edx, [ecx+44h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+48h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+4Ch]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov dword dword_51364C[ebx], eax
	mov eax, [esp]
	mov edx, [ecx+50h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov esi, eax
	mov edx, [ecx+54h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+58h]
	add esi, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	mov edx, dword dword_51364C[ebx]
	mov dword dword_513650[ebx], eax
	xor eax, eax
	xor esi, esi
	mov [esp+1Ch], eax
	test edx, edx
	jle loc_46CB7E
	mov eax, edx

loc_46CB0F:
	cmp eax, dword dword_513654[ebx]
	jle loc_46CB84

loc_46CB17:
	mov eax, dword dword_51364C[ebx]
	test eax, eax
	jle loc_46CB9C
	mov edx, eax

loc_46CB27:
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp eax, dword dword_513654[ebx]
	jle loc_46CBA2

loc_46CB3C:
	mov dword [esp+1Ch], 1

loc_46CB44:
	cmp dword dword_513654[ebx], 0A0000h
	jge loc_46CB6A
	mov eax, dword dword_51364C[ebx]
	test eax, eax
	jle loc_46CBCE

loc_46CB5E:
	cmp eax, 1E0000h
	jge loc_46CB6A
	mov esi, 1

loc_46CB6A:
	cmp dword [esp+1Ch], 0
	jz loc_46CBD2
	test esi, esi
	jnz loc_46CBD2
	jmp loc_46C931

loc_46CB7E:
	mov eax, edx
	neg eax
	jmp loc_46CB0F

loc_46CB84:
	mov eax, dword dword_513650[ebx]
	test eax, eax
	jle loc_46CB98

loc_46CB8E:
	cmp eax, dword dword_513654[ebx]
	jg loc_46CB17
	jmp loc_46CB44

loc_46CB98:
	neg eax
	jmp loc_46CB8E

loc_46CB9C:
	mov edx, eax
	neg edx
	jmp loc_46CB27

loc_46CBA2:
	mov eax, dword dword_513650[ebx]
	test eax, eax
	jle loc_46CBC8
	mov edx, eax

loc_46CBAE:
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp eax, dword dword_513654[ebx]
	jg loc_46CB3C
	jmp loc_46CB44

loc_46CBC8:
	mov edx, eax
	neg edx
	jmp loc_46CBAE

loc_46CBCE:
	neg eax
	jmp loc_46CB5E

loc_46CBD2:
	test esi, esi
	jz loc_46C93B
	mov dword dword_513660[ebx], 1
	jmp loc_46C93B

loc_46CBE9:
	mov ebx, [esp+14h]
	mov edx, 140000h
	mov eax, 0A0000h
	call sub_46CC50
	cmp dword [dword_5222B4], 578h
	jl loc_46C96D
	mov ebx, [esp+14h]
	mov edx, 0A0000h
	mov eax, 50000h
	call sub_46CC50
	cmp dword [dword_5222B4], 578h
	jl loc_46C96D
	mov ebx, [esp+14h]
	xor edx, edx
	xor eax, eax
	call sub_46CC50
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46C820 endp

sub_46CC50: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov [esp], eax
	mov edi, edx
	mov esi, ebx
	mov edx, dword [dword_511E3C]
	xor ecx, ecx
	test edx, edx
	jle loc_46CCFF
	xor eax, eax
	xor edx, edx

loc_46CC72:
	xor ebp, ebp
	mov ebx, dword dword_513658[eax]
	mov dword dword_513664[eax], ebp
	test ebx, ebx
	jl loc_46CCEA
	cmp dword dword_513654[eax], 6E0000h
	jg loc_46CD3E
	mov dword dword_51365C[eax], 8

loc_46CC9E:
	cmp dword [dword_512248], 0
	jnz loc_46CCCA
	mov ebx, dword dword_511B48[edx]
	mov ebx, [ebx+21Ch]
	cmp dword [ebx], 0Fh
	jg loc_46CCCA
	cmp esi, dword dword_513654[eax]
	jle loc_46CCCA
	mov dword dword_513664[eax], 1

loc_46CCCA:
	mov ebp, [esp]
	cmp ebp, dword dword_513654[eax]
	jle loc_46CD4D

loc_46CCD5:
	mov ebp, dword [dword_5222A8]
	xor ebx, ebx
	inc ebp
	mov dword dword_513658[eax], ebx
	mov dword [dword_5222A8], ebp

loc_46CCEA:
	mov ebx, dword [dword_511E3C]
	add edx, 4
	inc ecx
	add eax, 20h
	cmp ecx, ebx
	jl loc_46CC72

loc_46CCFF:
	mov edx, dword [dword_5222AC]
	lea ecx, 0[edx*4]
	sub ecx, edx
	shl ecx, 2
	add ecx, edx
	mov edx, dword [dword_5222A8]
	mov eax, edx
	shl eax, 5
	add ecx, ecx
	add eax, edx
	mov edx, dword [dword_5222B0]
	add eax, eax
	shl edx, 2
	add eax, ecx
	add eax, edx
	mov dword [dword_5222B4], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46CD3E:
	mov dword dword_51365C[eax], 9
	jmp loc_46CC9E

loc_46CD4D:
	cmp ecx, dword [dword_5222E0]
	jz loc_46CCD5
	cmp dword [dword_4DAC24], 1F4h
	jg loc_46CCD5
	cmp edi, dword dword_513654[eax]
	jle loc_46CD8B

loc_46CD6D:
	mov ebx, 1
	mov ebp, dword [dword_5222AC]
	add ebp, ebx
	mov dword dword_513658[eax], ebx
	mov dword [dword_5222AC], ebp
	jmp loc_46CCEA

loc_46CD8B:
	mov ebx, dword dword_511B48[edx]
	cmp dword [ebx+17Ch], 0
	jnz loc_46CD6D
	cmp dword [ebx+100h], 0CCCCh
	jl loc_46CD6D
	mov ebp, dword [dword_5222B0]
	mov ebx, 2
	inc ebp
	mov dword dword_513658[eax], ebx
	mov dword [dword_5222B0], ebp
	jmp loc_46CCEA
;sub_46CC50 endp

sub_46CDD0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0A4h
	mov ebp, eax
	mov [esp+0A0h], edx
	mov [esp+98h], ebx
	mov eax, ebx
	shl eax, 5
	mov edx, dword dword_513658[eax]
	mov eax, dword dword_51365C[eax]
	mov [esp+9Ch], edx
	call sub_480A00
	cmp dword [dword_512204], 1
	jz loc_46D243

loc_46CE14:
	mov ecx, [esp+9Ch]
	shl ecx, 2
	mov ebx, [ebp+314h]
	add ecx, ebp
	test ebx, ebx
	jz loc_46D254
	lea eax, [esp+30h]
	mov edx, ebx
	call sub_49E780
	lea eax, [esp+30h]
	mov ebx, [ecx+568h]
	lea edx, [ebp+0C4h]
	add ebx, 50h
	call sub_49E840

loc_46CE51:
	mov eax, [esp+9Ch]
	mov esi, [ebp+eax*4+568h]
	lea edi, [esi+74h]
	lea esi, [ebp+9Ch]
	movsd
	movsd
	movsd
	mov eax, [ebp+eax*4+568h]
	mov esi, [eax+78h]
	add esi, 2000h
	mov edi, [esp+9Ch]
	mov [eax+78h], esi
	test edi, edi
	jnz loc_46D26F
	mov edx, [esp+0A0h]
	mov eax, [ebp+9Ch]
	sub eax, [edx+8]
	mov ebx, [edx+0Ch]
	mov [esp+54h], eax
	mov eax, [ebp+0A0h]
	sub eax, ebx
	mov esi, [edx+10h]
	mov [esp+58h], eax
	mov eax, [ebp+0A4h]
	sub eax, esi
	mov edx, [ebp+0C4h]
	mov [esp+5Ch], eax
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0C8h]
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0CCh]
	add ecx, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0D0h]
	lea ebx, [ecx+eax]
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0D4h]
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0D8h]
	add ecx, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0DCh]
	lea esi, [ecx+eax]
	mov eax, [esp+54h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ecx, eax
	mov edx, [ebp+0E0h]
	mov eax, [esp+58h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebp+0E4h]
	add ecx, eax
	mov eax, [esp+5Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, eax
	mov edx, ecx
	mov eax, ebx
	call sub_49E630
	mov dword [dword_545224], eax
	mov edx, ecx
	mov eax, esi
	call sub_49E630
	mov dword [dword_545228], eax

loc_46CFA3:
	mov edx, [esp+0A0h]
	lea eax, [ebp+1ACh]
	call sub_4755C0
	mov ecx, eax
	mov eax, ebp
	call sub_46EA10
	cwde
	call sub_4802B0
	call sub_475350
	mov eax, [ebp+21Ch]
	cmp dword [eax], 0Eh
	jnz loc_46D280
	cmp dword [ebp+60Ch], 58h
	jnz loc_46D280
	mov eax, 1

loc_46CFEA:
	mov edx, [esp+98h]
	shl edx, 5
	mov ebx, dword dword_513664[edx]
	mov dword [dword_4D9288], eax
	test ebx, ebx
	jz loc_46D28F
	mov edx, [esp+0A0h]
	cmp dword [edx], 1
	jz loc_46D287

loc_46D017:
	mov dword [dword_4D9538], 1
	mov eax, ebp
	call sub_46F5D0
	mov dword [dword_4D953C], eax

loc_46D02D:
	mov edi, [esp+9Ch]
	mov edx, [esp+0A0h]
	mov ebx, [ebp+618h]
	mov eax, [ebp+edi*4+568h]
	call sub_475380
	xor edx, edx
	lea esi, [esp+78h]
	mov dword [dword_4D9284], edx
	mov dword [dword_4D9280], edx
	mov dword [dword_4D9288], edx
	mov dword [dword_4D9538], edx
	call sub_46FE50
	lea edx, [esp+78h]
	mov eax, [ebp+edi*4+568h]
	call sub_475300
	cmp dword [esp+78h], 0
	jnz loc_46D092
	cmp dword [esp+7Ch], 0
	jz loc_46D233

loc_46D092:
	mov esi, [esp+7Ch]
	push esi
	mov edi, [esp+7Ch]
	push edi
	mov eax, [ebp+614h]
	lea esi, [esp+88h]
	call sub_475880
	call sub_46FE10
	mov eax, [esp+8Ch]
	push eax
	mov edx, [esp+8Ch]
	push edx
	lea esi, [esp+88h]
	call sub_46FDA0
	mov ebx, [esp+7Ch]
	push ebx
	mov esi, [esp+7Ch]
	mov eax, 0Bh
	push esi
	xor edx, edx
	lea esi, [esp+70h]
	call sub_46D350
	mov edi, [esp+74h]
	push edi
	mov eax, [esp+74h]
	push eax
	lea esi, [esp+88h]
	call sub_46FDA0
	mov edx, [esp+7Ch]
	push edx
	mov ebx, [esp+7Ch]
	mov eax, 8
	push ebx
	lea esi, [esp+78h]
	mov edx, 1
	call sub_46D350
	mov esi, [esp+7Ch]
	push esi
	mov edi, [esp+7Ch]
	push edi
	lea esi, [esp+88h]
	mov edx, 0FF00h
	call sub_46FDA0
	mov eax, 0Bh
	lea esi, [esp+60h]
	call sub_46D350
	mov eax, [esp+64h]
	push eax
	mov edx, [esp+64h]
	push edx
	mov ebx, [esp+84h]
	push ebx
	mov esi, [esp+84h]
	push esi
	lea esi, [esp+88h]
	mov edx, 2
	call sub_46FDA0
	mov eax, 8
	lea esi, [esp+90h]
	call sub_46D350
	mov edi, [esp+94h]
	push edi
	mov eax, [esp+94h]
	push eax
	mov edx, [esp+84h]
	push edx
	mov ebx, [esp+84h]
	push ebx
	lea esi, [esp+88h]
	call sub_46FDA0
	test ecx, ecx
	jz loc_46D1C8
	cmp dword [ebp+17Ch], 0
	jz loc_46D29C
	cmp dword [ebp+18h], 0
	jnz loc_46D29C

loc_46D1C8:
	mov eax, esp
	mov edx, [esp+0A0h]
	mov ebx, 1
	lea ecx, [ebp+9Ch]
	push eax
	mov eax, [esp+0A4h]
	add edx, 38h
	add eax, 44h
	call sub_480540
	mov eax, [esp+98h]
	shl eax, 5
	mov edx, 1
	mov esi, dword dword_513660[eax]
	mov eax, edx
	sub eax, esi
	push eax
	mov edi, [esp+80h]
	push edi
	mov ebp, [esp+80h]
	push ebp
	lea ecx, [esp+0Ch]
	lea ebx, [esp+0Ch]
	push 0A0000h
	lea edx, [esp+10h]
	lea eax, [esp+10h]
	call sub_471050

loc_46D233:
	call sub_4809F0
	add esp, 0A4h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46D243:
	mov eax, [ebp+204h]
	mov [ebp+314h], eax
	jmp loc_46CE14

loc_46D254:
	mov esi, [ecx+568h]
	mov ecx, 9
	lea edi, [esi+50h]
	lea esi, [ebp+0C4h]
	rep movsd
	jmp loc_46CE51

loc_46D26F:
	xor eax, eax
	mov dword [dword_545228], eax
	mov dword [dword_545224], eax
	jmp loc_46CFA3

loc_46D280:
	xor eax, eax
	jmp loc_46CFEA

loc_46D287:
	test eax, eax
	jnz loc_46D017

loc_46D28F:
	xor edi, edi
	mov dword [dword_4D9538], edi
	jmp loc_46D02D

loc_46D29C:
	mov eax, [esp+7Ch]
	push eax
	mov edx, [esp+7Ch]
	push edx
	lea esi, [esp+90h]
	mov eax, ecx
	call sub_46FE10
	mov ecx, [esp+94h]
	push ecx
	mov ebx, [esp+94h]
	push ebx
	lea esi, [esp+88h]
	call sub_46FDA0
	jmp loc_46D1C8
;sub_46CDD0 endp

sub_46D2E0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	test byte [byte_512219], 10h
	jz loc_46D329

loc_46D2EC:
	mov eax, [ecx+634h]
	mov edx, [ecx]
	mov eax, [ecx+eax*4+61Ch]
	and edx, 0Fh
	mov [ecx+618h], eax
	lea eax, 0[edx*4]
	sub eax, edx
	lea edx, 0[eax*4]
	mov eax, [ecx+634h]
	mov eax, dword dword_5119C8[edx+eax*4]
	mov [ecx+614h], eax
	pop ecx
	ret

loc_46D329:
	push ebx
	mov edx, [ecx+634h]
	inc edx
	mov ebx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov [ecx+634h], edx
	pop ebx
	jmp loc_46D2EC
;sub_46D2E0 endp

sub_46D350: ;SUBROUTINE
	push ebx
	push ecx
	push edi
	sub esp, 0Ch
	mov ecx, esi
	mov ebx, eax
	mov esi, edx
	mov edx, 10h
	lea eax, [esp+8]
	call sub_46FEA0
	test eax, eax
	jz loc_46D3AB
	mov eax, [esp+8]
	mov dword [eax+4], 1Bh
	mov eax, [esp+8]
	mov dword [eax], 0
	mov eax, [esp+8]
	mov [eax+8], esi
	mov eax, [esp+8]
	mov [eax+0Ch], ebx
	mov esi, esp
	mov eax, [esp+8]
	call sub_46FE10
	mov esi, esp
	mov edi, ecx
	movsd
	movsd
	mov eax, ecx
	add esp, 0Ch
	pop edi
	pop ecx
	pop ebx
	ret

loc_46D3AB:
	mov esi, esp
	call sub_46FE50
	mov esi, esp
	mov edi, ecx
	movsd
	movsd
	mov eax, ecx
	add esp, 0Ch
	pop edi
	pop ecx
	pop ebx
	ret
;sub_46D350 endp

sub_46D3D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0A8h
	mov [esp+8Ch], eax
	mov eax, [eax+21Ch]
	mov eax, [eax]
	call sub_46E208
	mov edx, eax
	mov [esp+7Ch], eax
	shl eax, 2
	sub eax, edx
	shl eax, 2
	lea ecx, [edx+eax]
	mov eax, edx
	shl eax, 6
	add edx, eax
	shl ecx, 2
	shl edx, 3
	mov eax, ecx
	add ecx, 34h

loc_46D413:
	add edx, 14h
	mov bx, word word_4D8518[eax]
	add eax, 2
	mov word word_4D863E[edx], bx
	cmp eax, ecx
	jnz loc_46D413
	mov eax, [esp+8Ch]
	test byte [eax+1], 1
	jnz loc_46D59A
	mov eax, [eax+21Ch]
	cmp dword [eax], 28h
	jge loc_46D8ED
	mov eax, [esp+8Ch]
	mov eax, [eax]
	mov ecx, dword [dword_512260]
	and eax, 1Fh
	mov edx, ecx
	sub eax, ecx
	sub edx, eax
	lea eax, [edx-1]
	test eax, eax
	jle loc_46D8E6

loc_46D46E:
	mov edx, dword dword_511B48[eax*4]
	mov ecx, [esp+8Ch]
	mov edx, [edx+56Ch]
	mov [ecx+568h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+56Ch]
	mov [ecx+56Ch], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+570h]
	mov [ecx+570h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+628h]
	mov [ecx+628h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+0B4h]
	mov [ecx+0B4h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+0B8h]
	mov [ecx+0B8h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+0F4h]
	mov [ecx+0F4h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+0F8h]
	mov [ecx+0F8h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+108h]
	mov [ecx+108h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+10Ch]
	mov [ecx+10Ch], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+110h]
	mov [ecx+110h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+114h]
	mov [ecx+114h], edx
	mov edx, dword dword_511B48[eax*4]
	mov edx, [edx+114h]
	mov [ecx+114h], edx
	mov edi, [esp+8Ch]
	mov esi, dword dword_511B48[eax*4]
	mov ecx, 1Eh
	lea edi, [edi+60Ch]
	lea esi, [esi+60Ch]
	rep movsd
	add esp, 0A8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46D59A:
	mov eax, [eax]
	and eax, 0Fh
	shl eax, 6
	mov edx, [esp+8Ch]
	mov eax, dword dword_51227C[eax]
	mov [edx+60Ch], eax

loc_46D5B5:
	mov ebp, [esp+8Ch]
	mov ebp, [ebp+21Ch]
	mov ebp, [ebp+0]
	shl ebp, 2
	mov ebx, dword dword_513528[ebp]
	test ebx, ebx
	jnz loc_46D93D
	mov esi, [esp+8Ch]
	mov edi, esp
	add esi, 1DCh
	push edi

loc_46D5E6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_46D5FE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_46D5E6

loc_46D5FE:
	pop edi
	mov eax, [esp+8Ch]
	mov eax, [eax+21Ch]
	cmp dword [eax], 11h
	jge loc_46D903
	mov ebx, [esp+8Ch]
	mov edx, 1
	mov eax, esp
	call sub_46E270
	mov edx, [esp+8Ch]
	mov edx, [edx+21Ch]
	mov edx, [edx]
	mov ebp, eax
	mov dword dword_513528[edx*4], eax
	inc dword [dword_4D9540]

loc_46D646:
	mov ecx, [esp+8Ch]
	mov ecx, [ecx+21Ch]
	mov edx, [ecx]
	cmp edx, 11h
	jl loc_46D719
	cmp edx, 28h
	jge loc_46D719
	cmp edx, 24h
	jz loc_46D719
	mov eax, [esp+8Ch]
	mov eax, [eax+60Ch]
	add eax, edx
	lea edx, [eax+eax]
	mov ebx, 49h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	lea edi, [edx+0Fh]
	mov eax, [ecx]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	mov ebx, eax
	mov edx, [edx+60Ch]
	mov eax, [esp+8Ch]
	sar edx, 1Fh
	mov eax, [eax+60Ch]
	sub eax, edx
	sar eax, 1
	add eax, ebx
	lea edx, [eax+eax]
	inc edx
	mov ebx, 49h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	lea esi, [edx+0Fh]
	mov ebx, 1
	mov edx, [ecx]
	mov eax, [esp+8Ch]
	mov ecx, edi
	mov edx, dword dword_513528[edx*4]
	call sub_477230
	mov eax, [esp+8Ch]
	mov eax, [eax+21Ch]
	mov ebx, 2
	mov edx, [eax]
	mov ecx, esi
	mov eax, [esp+8Ch]
	mov edx, dword dword_513528[edx*4]
	call sub_477230

loc_46D719:
	mov eax, 2
	mov edx, [esp+8Ch]
	call sub_475960
	mov [edx+56Ch], eax
	mov edx, [esp+7Ch]
	mov eax, edx
	shl eax, 6
	add eax, edx
	mov ecx, dword_4D8650
	shl eax, 3
	add ecx, eax
	mov eax, [esp+8Ch]
	mov edx, [ebp+54h]
	lea ebx, [ecx+190h]
	mov eax, [eax+56Ch]
	call sub_475920
	mov eax, [esp+8Ch]
	lea ebx, [ecx+1A4h]
	mov edx, [ebp+58h]
	mov eax, [eax+56Ch]
	call sub_475920
	mov eax, [esp+8Ch]
	lea ebx, [ecx+1B8h]
	mov edx, [ebp+5Ch]
	mov eax, [eax+56Ch]
	call sub_475920
	mov eax, [esp+8Ch]
	lea ebx, [ecx+1CCh]
	mov edx, [ebp+60h]
	mov eax, [eax+56Ch]
	call sub_475920
	mov eax, [esp+8Ch]
	mov eax, [eax+21Ch]
	cmp dword [eax], 28h
	jl loc_46D961
	mov eax, [esp+8Ch]
	mov edx, [esp+8Ch]
	mov eax, [eax+56Ch]
	mov [edx+570h], eax

loc_46D7E1:
	mov eax, [esp+8Ch]
	mov eax, [eax+21Ch]
	cmp dword [eax], 11h
	jge loc_46DD78
	mov eax, 1
	mov edx, [esp+8Ch]
	call sub_475960
	mov [edx+568h], eax
	cmp dword [ebp+28h], 0
	jz loc_46D9B3
	mov ebx, edx
	mov edx, sub_46E7A0
	call sub_4758F0
	mov edx, [esp+8Ch]
	mov edx, [edx+21Ch]
	mov edx, [edx]
	mov esi, eax
	lea eax, 0[edx*4]
	sub eax, edx
	mov ebx, [esp+8Ch]
	mov edx, dword off_4D9298[eax*4]
	mov eax, esi
	call sub_4758C0
	mov edx, [esp+7Ch]
	mov ecx, eax
	mov eax, edx
	shl eax, 6
	add eax, edx
	shl eax, 3
	add eax, dword_4D8650
	lea ebx, [eax+0B4h]
	mov edx, [ebp+28h]
	mov eax, ecx
	call sub_475920
	mov eax, [ebp+8]
	mov edi, [ecx+48h]
	xor ebx, ebx
	mov eax, [eax+0Ch]
	xor edx, edx
	sub edi, eax
	mov eax, esi
	mov [ecx+48h], edi

loc_46D88C:
	call sub_4758C0
	mov edi, eax
	mov edx, [esp+7Ch]
	mov eax, edx
	shl eax, 6
	add eax, edx
	shl eax, 3
	mov ecx, ebp
	mov [esp+84h], eax
	lea eax, [ebp+24h]
	xor esi, esi
	mov [esp+80h], eax

loc_46D8B6:
	mov eax, [esp+84h]
	mov edx, [esp+80h]
	add eax, dword_4D8650
	cmp ecx, edx
	jz loc_46D9BF
	mov edx, [ecx+4]
	lea ebx, [esi+eax]
	mov eax, edi
	add ecx, 4
	call sub_475920
	add esi, 14h
	jmp loc_46D8B6

loc_46D8E6:
	xor eax, eax
	jmp loc_46D46E

loc_46D8ED:
	mov eax, [esp+8Ch]
	mov dword [eax+60Ch], 0
	jmp loc_46D5B5

loc_46D903:
	mov ebx, [esp+8Ch]
	mov eax, esp
	xor edx, edx
	call sub_46E270
	mov edx, [esp+8Ch]
	mov edi, dword [dword_4D9544]
	mov edx, [edx+21Ch]
	inc edi
	mov edx, [edx]
	mov ebp, eax
	mov dword [dword_4D9544], edi
	mov dword dword_513528[edx*4], eax
	jmp loc_46D646

loc_46D93D:
	mov ecx, [esp+8Ch]
	mov ebp, ebx
	mov eax, [esp+8Ch]
	mov edx, ebp
	mov ecx, [ecx+60Ch]
	xor ebx, ebx
	call sub_477230
	jmp loc_46D646

loc_46D961:
	mov eax, 2
	mov edx, [esp+8Ch]
	call sub_475960
	mov [edx+570h], eax
	mov eax, [esp+8Ch]
	lea ebx, [ecx+1E0h]
	mov edx, [ebp+64h]
	mov eax, [eax+570h]
	call sub_475920
	mov eax, [esp+8Ch]
	lea ebx, [ecx+1F4h]
	mov edx, [ebp+68h]
	mov eax, [eax+570h]
	call sub_475920
	jmp loc_46D7E1

loc_46D9B3:
	mov ebx, edx
	mov edx, sub_46E7A0
	jmp loc_46D88C

loc_46D9BF:
	mov ecx, [ebp+2Ch]
	test ecx, ecx
	jz loc_46D9D5
	lea ebx, [eax+0C8h]
	mov edx, ecx
	mov eax, edi
	call sub_475920

loc_46D9D5:
	cmp dword [ebp+30h], 0
	jz loc_46DA0C
	mov edx, [esp+7Ch]
	mov eax, edx
	shl eax, 6
	add eax, edx
	shl eax, 3
	add eax, dword_4D8650
	lea ebx, [eax+0DCh]
	mov edx, [ebp+30h]
	mov eax, edi
	call sub_475920
	mov eax, [esp+8Ch]
	mov edx, ebp
	call sub_46DFD0

loc_46DA0C:
	mov esi, [esp+8Ch]
	mov ecx, 1
	push ebp
	mov ebx, 0Dh
	sub eax, eax
	push esi
	mov [edi+48h], eax
	mov edx, 0Ch
	mov eax, [esi+568h]
	call sub_46E120
	push ebp
	mov ecx, 1
	mov ebx, 0Fh
	push esi
	mov edx, 0Eh
	mov eax, [esi+568h]
	call sub_46E120
	push ebp
	mov ebx, 11h
	mov edx, 10h
	push esi
	mov eax, [esi+568h]
	xor ecx, ecx
	call sub_46E120
	push ebp
	mov ebx, 13h
	mov edx, 12h
	push esi
	mov eax, [esi+568h]
	xor ecx, ecx
	call sub_46E120
	mov edx, ebp
	mov eax, esi
	call sub_46E020

loc_46DA8B:
	mov edx, [esp+8Ch]
	mov edx, [edx+21Ch]
	mov edx, [edx]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, [esp+8Ch]
	mov eax, dword dword_4D9290[eax*4]
	mov [edx+628h], eax
	mov edx, [edx+21Ch]
	mov edx, [edx]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, [esp+8Ch]
	mov eax, dword dword_4D9294[eax*4]
	mov [edx+0B4h], eax
	mov eax, [edx+21Ch]
	mov edx, aSilSpd ; "SIL SPD"
	add eax, 34h
	call strcmp_
	test eax, eax
	jnz loc_46DB01
	mov eax, [esp+8Ch]
	shl dword [eax+0B4h], 2

loc_46DB01:
	mov ebx, [esp+8Ch]
	mov eax, 10000h
	mov ebx, [ebx+0B4h]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov edx, [esp+8Ch]
	mov [edx+0B8h], eax
	test byte [edx+1F4h], 2
	jz loc_46DDCA
	cmp dword [dword_512200], 0
	jnz loc_46DD97
	mov edx, [esp+8Ch]
	mov edx, [edx+0B4h]
	shl edx, 2
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	mov [edx+0F4h], eax
	mov eax, [edx+0B4h]
	mov edx, 0D999h
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+8Ch]
	mov [edx+0B4h], eax

loc_46DB97:
	mov ebx, [esp+8Ch]
	mov eax, 10000h
	mov edi, 630000h
	mov ebx, [ebx+0F4h]
	mov [esp+90h], ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esp+70h], edi
	mov [esp+74h], edi
	mov [esp+78h], edi
	mov edx, [esp+8Ch]
	mov ecx, 0FF9D0000h
	xor edi, edi
	mov [esp+64h], ecx
	mov [esp+68h], ecx
	mov [esp+6Ch], ecx
	mov [esp+88h], edi
	mov [edx+0F8h], eax

loc_46DBFD:
	mov edi, [esp+88h]
	mov eax, [esp+90h]
	xor ecx, ecx
	xor ebx, ebx
	shl edi, 2
	mov [esp+0A0h], eax
	mov [esp+94h], eax
	mov [esp+98h], eax
	mov [esp+0A4h], eax
	mov [esp+9Ch], eax

loc_46DC35:
	lea edx, [edi+ebp]
	mov edx, [edx+4]
	cmp ebx, [edx]
	jge loc_46DE31
	mov eax, [edx+14h]
	movsx esi, word [ecx+eax]
	mov eax, [edx+8]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov edx, [esp+70h]
	add eax, esi
	cmp eax, edx
	jge loc_46DF96

loc_46DC68:
	mov edx, [esp+9Ch]
	mov edx, [edx+4]
	mov [esp+70h], eax
	mov eax, [edx+14h]
	mov esi, [ecx+eax]
	mov eax, [edx+0Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	sar esi, 10h
	add eax, esi
	mov esi, [esp+74h]
	cmp eax, esi
	jge loc_46DF9D

loc_46DC9D:
	mov edx, [esp+0A4h]
	mov edx, [edx+4]
	mov [esp+74h], eax
	mov eax, [edx+14h]
	mov esi, [ecx+eax+2]
	mov eax, [edx+10h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	sar esi, 10h
	mov edx, [esp+78h]
	add eax, esi
	cmp eax, edx
	jge loc_46DFA4

loc_46DCD3:
	mov edx, [esp+98h]
	mov edx, [edx+4]
	mov [esp+78h], eax
	mov eax, [edx+14h]
	movsx esi, word [ecx+eax]
	mov eax, [edx+8]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	add eax, esi
	mov esi, [esp+64h]
	cmp eax, esi
	jge loc_46DD04
	mov eax, esi

loc_46DD04:
	mov edx, [esp+94h]
	mov edx, [edx+4]
	mov [esp+64h], eax
	mov eax, [edx+14h]
	mov esi, [ecx+eax]
	mov eax, [edx+0Ch]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	sar esi, 10h
	mov edx, [esp+68h]
	add eax, esi
	cmp eax, edx
	jge loc_46DD37
	mov eax, edx

loc_46DD37:
	mov edx, [esp+0A0h]
	mov edx, [edx+4]
	mov [esp+68h], eax
	mov eax, [edx+10h]
	mov esi, [edx+14h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov esi, [ecx+esi+2]
	sar esi, 10h
	add eax, esi
	mov esi, [esp+6Ch]
	cmp eax, esi
	jge loc_46DD6B
	mov eax, esi

loc_46DD6B:
	add ecx, 6
	inc ebx
	mov [esp+6Ch], eax
	jmp loc_46DC35

loc_46DD78:
	mov eax, [esp+8Ch]
	mov edx, [esp+8Ch]
	mov eax, [eax+56Ch]
	mov [edx+568h], eax
	jmp loc_46DA8B

loc_46DD97:
	mov edx, [esp+8Ch]
	mov edx, [edx+0B4h]
	lea eax, 0[edx*4]
	sub eax, edx
	add eax, eax
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	mov [edx+0F4h], eax
	jmp loc_46DB97

loc_46DDCA:
	cmp dword [dword_512200], 0
	jnz loc_46DE06
	mov edx, [esp+8Ch]
	mov edx, [edx+0B4h]
	lea eax, 0[edx*8]
	add edx, eax
	add edx, edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	mov [edx+0F4h], eax
	jmp loc_46DB97

loc_46DE06:
	mov edx, [esp+8Ch]
	mov edx, [edx+0B4h]
	shl edx, 3
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	mov [edx+0F4h], eax
	jmp loc_46DB97

loc_46DE31:
	mov ecx, [esp+88h]
	mov edx, [esp+90h]
	inc ecx
	add edx, 4
	mov [esp+88h], ecx
	mov [esp+90h], edx
	cmp ecx, 20h
	jl loc_46DBFD
	mov edx, [esp+64h]
	mov esi, [esp+70h]
	sub edx, esi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	shl eax, 8
	mov edi, [esp+74h]
	mov [edx+108h], eax
	mov edx, [esp+68h]
	sub edx, edi
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	shl eax, 8
	mov ebp, [esp+78h]
	mov [edx+10Ch], eax
	mov edx, [esp+6Ch]
	sub edx, ebp
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, [esp+8Ch]
	shl eax, 8
	mov [edx+110h], eax
	mov eax, [edx+108h]
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ecx, eax
	imul ecx, eax
	mov edx, [esp+8Ch]
	mov edx, [edx+10Ch]
	mov eax, [esp+8Ch]
	sar edx, 1Fh
	mov eax, [eax+10Ch]
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul eax, eax
	add eax, ecx
	bsr ecx, eax
	jz loc_46DF1C
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_46DF1C:
	mov edx, [esp+8Ch]
	mov [edx+114h], eax
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov ecx, eax
	imul ecx, eax
	mov edx, [esp+8Ch]
	mov edx, [edx+110h]
	mov eax, [esp+8Ch]
	sar edx, 1Fh
	mov eax, [eax+110h]
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul eax, eax
	add eax, ecx
	bsr ecx, eax
	jz loc_46DF7C
	mul dword dword_4DD4AC[ecx*4]
	shrd eax, edx, 10h
	add eax, dword dword_4DD530[ecx*4]

loc_46DF7C:
	mov edx, [esp+8Ch]
	mov [edx+114h], eax
	add esp, 0A8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46DF96:
	mov eax, edx
	jmp loc_46DC68

loc_46DF9D:
	mov eax, esi
	jmp loc_46DC9D

loc_46DFA4:
	mov eax, edx
	jmp loc_46DCD3
;sub_46D3D0 endp

sub_46DFB0: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_475A20
	mov eax, edx
	add edx, 0Ch

loc_46DFBD:
	add eax, 4
	mov dword [eax+564h], 0
	cmp eax, edx
	jnz loc_46DFBD
	pop edx
	ret
;sub_46DFB0 endp

sub_46DFD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov edi, edx
	cmp dword [edx+30h], 0
	jz loc_46E00D
	xor edx, edx
	xor ecx, ecx

loc_46DFE0:
	mov ebx, [edi+30h]
	cmp ecx, [ebx+4]
	jge loc_46E00D
	mov esi, [ebx+18h]
	add esi, edx
	test byte [esi], 0E0h
	jnz loc_46DFF8

loc_46DFF2:
	inc ecx
	add edx, 0Ch
	jmp loc_46DFE0

loc_46DFF8:
	mov ebx, [eax+65Ch]
	mov [eax+ebx*4+64Ch], esi
	inc dword [eax+65Ch]
	jmp loc_46DFF2

loc_46E00D:
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46DFD0 endp

sub_46E020: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, [edx+34h]
	test ecx, ecx
	jnz loc_46E057

loc_46E02B:
	mov ebx, [edx+3Ch]
	test ebx, ebx
	jz loc_46E03B
	mov ecx, [ebx+18h]
	mov [eax+63Ch], ecx

loc_46E03B:
	mov esi, [edx+44h]
	test esi, esi
	jz loc_46E04B
	mov ecx, [esi+18h]
	mov [eax+640h], ecx

loc_46E04B:
	mov edi, [edx+4Ch]
	test edi, edi
	jnz loc_46E062
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46E057:
	mov ecx, [ecx+18h]
	mov [eax+638h], ecx
	jmp loc_46E02B

loc_46E062:
	mov edx, [edi+18h]
	mov [eax+644h], edx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46E020 endp

sub_46E070: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	xor edx, edx
	xor ecx, ecx

loc_46E079:
	mov ebx, dword dword_513528[edx]
	cmp ecx, ebx
	jz loc_46E0B9
	mov esi, [ebx+88h]
	mov eax, ebx
	cmp ecx, esi
	jz loc_46E0A2
	mov eax, esi
	call sub_4848FC
	mov eax, dword dword_513528[edx]
	mov [eax+88h], ecx

loc_46E0A2:
	mov edi, dword dword_513528[edx]
	cmp ecx, edi
	jz loc_46E0B9
	mov eax, edi
	call sub_4848FC
	mov dword dword_513528[edx], ecx

loc_46E0B9:
	add edx, 4
	cmp edx, 0E0h
	jnz loc_46E079
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46E070 endp

sub_46E0D0: ;SUBROUTINE
	push edx
	xor eax, eax

loc_46E0D3:
	add eax, 4
	xor edx, edx
	mov dword dword_513524[eax], edx
	cmp eax, 0E0h
	jnz loc_46E0D3
	mov dword [dword_4D9544], edx
	mov dword [dword_4D9534], edx
	mov dword [dword_4D9538], edx
	mov dword [dword_4D9540], edx
	pop edx
	ret
;sub_46E0D0 endp

sub_46E100: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_4D9544], edx
	mov dword [dword_4D9534], edx
	mov dword [dword_4D9538], edx
	mov dword [dword_4D9540], edx
	pop edx
	ret
;sub_46E100 endp

sub_46E120: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	mov ebx, [esp+14h]
	mov eax, [ebx+21Ch]
	mov eax, [eax]
	call sub_46E208
	mov [esp], eax
	test ecx, ecx
	jz loc_46E1BF
	mov edx, sub_46E4F0

loc_46E149:
	mov eax, esi
	call sub_4758C0
	mov ecx, eax
	mov ebx, [esp]
	mov eax, ebx
	shl eax, 6
	add eax, ebx
	mov esi, dword_4D8650
	shl eax, 3
	add esi, eax
	lea eax, 0[edi*4]
	add eax, edi
	lea edx, 0[edi*4]
	mov edi, [esp+18h]
	shl eax, 2
	add edx, edi
	lea ebx, [esi+eax]
	mov eax, ecx
	mov edx, [edx+4]
	call sub_475920
	lea eax, 0[ebp*4]
	add eax, ebp
	mov edx, edi
	shl eax, 2
	mov edx, [edx+ebp*4+4]
	lea ebx, [esi+eax]
	mov eax, ecx
	call sub_475920
	mov eax, [edi+8]
	mov ebp, [ecx+48h]
	mov eax, [eax+0Ch]
	sub ebp, eax
	mov [ecx+48h], ebp
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_46E1BF:
	mov edx, sub_46E600
	jmp loc_46E149
;sub_46E120 endp

off_46E1D0: dd loc_46E215
	dd loc_46E233 ; jump table for switch statement
	dd loc_46E233
	dd loc_46E21B
	dd loc_46E221
	dd loc_46E233
	dd loc_46E233
	dd loc_46E233
	dd loc_46E215
	dd loc_46E233
	dd loc_46E22D
	dd loc_46E227
	dd loc_46E215
	dd loc_46E22D

sub_46E208: ;SUBROUTINE
	dec eax
	cmp eax, 0Dh ; switch 14 cases
	ja loc_46E233 ; jumptable 0046E20E default case
	jmp off_46E1D0[eax*4] ; switch jump

loc_46E215:
	mov eax, 4 ; jumptable 0046E20E cases 0,8,12
	ret

loc_46E21B:
	mov eax, 1 ; jumptable 0046E20E case 3
	ret

loc_46E221:
	mov eax, 2 ; jumptable 0046E20E case 4
	ret

loc_46E227:
	mov eax, 3 ; jumptable 0046E20E case 11
	ret

loc_46E22D:
	mov eax, 5 ; jumptable 0046E20E cases 10,13
	ret

loc_46E233:
	xor eax, eax ; jumptable 0046E20E default case
	ret
;sub_46E208 endp

sub_46E240: ;SUBROUTINE
	test eax, eax
	jnz loc_46E245
	ret

loc_46E245:
	push ecx
	mov cl, [edx+1]
	mov [eax+21h], cl
	mov cx, [edx+2]
	mov [eax+22h], cx
	mov ecx, [edx+4]
	mov [eax+24h], ecx
	mov ecx, [edx+8]
	mov [eax+28h], ecx
	mov ecx, [edx+0Ch]
	mov [eax+2Ch], ecx
	mov edx, [edx+10h]
	mov [eax+30h], edx
	pop ecx
	ret
;sub_46E240 endp

sub_46E270: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 110h
	mov [esp+108h], ebx
	mov edi, esp
	mov esi, eax
	push edi

loc_46E286:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_46E29E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_46E286

loc_46E29E:
	pop edi
	mov esi, a_geo ; ".geo"
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_46E2AF:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_46E2C7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_46E2AF

loc_46E2C7:
	pop edi
	mov edx, dword [dword_4D5EF0]
	xor ebp, ebp
	test edx, edx
	jnz loc_46E42C

loc_46E2D8:
	mov edi, [esp+10Ch]
	test edi, edi
	jz loc_46E4A5
	add ebp, 8Ch
	mov ecx, edi
	mov [esp+104h], edi
	xor ebx, ebx
	xor edi, edi

loc_46E2FA:
	mov eax, [esp+10Ch]
	add eax, ebp
	mov [ecx+4], eax
	mov edx, [eax]
	add ebp, 34h
	cmp edi, edx
	jz loc_46E32F
	mov edx, [esp+10Ch]
	add edx, ebp
	mov [eax+14h], edx
	mov eax, [ecx+4]
	test byte [eax], 1
	jz loc_46E4B4
	mov eax, [eax]
	inc eax
	imul eax, 6

loc_46E32D:
	add ebp, eax

loc_46E32F:
	mov eax, [ecx+4]
	cmp edi, [eax+4]
	jz loc_46E34C
	mov edx, [esp+10Ch]
	add edx, ebp
	mov [eax+18h], edx
	mov eax, [ecx+4]
	imul eax, [eax+4], 0Ch
	add ebp, eax

loc_46E34C:
	cmp ebx, 0Ch
	jnz loc_46E4BC

loc_46E355:
	cmp edi, [ecx+4]
	jz loc_46E382
	mov eax, [esp+108h]
	mov eax, [eax+21Ch]
	cmp dword [eax], 4
	jnz loc_46E382
	cmp ebx, 0Eh
	jnz loc_46E4CA
	mov edx, 1

loc_46E37A:
	mov eax, [ecx+4]
	call sub_46ED30

loc_46E382:
	cmp ebx, 10h
	jnz loc_46E4D1

loc_46E38B:
	cmp edi, [ecx+4]
	jz loc_46E3B8
	mov eax, [esp+108h]
	mov eax, [eax+21Ch]
	cmp dword [eax], 0Fh
	jge loc_46E3B8
	cmp ebx, 12h
	jnz loc_46E4DF
	mov edx, 1

loc_46E3B0:
	mov eax, [ecx+4]
	call sub_46ECD0

loc_46E3B8:
	inc ebx
	add ecx, 4
	cmp ebx, 20h
	jl loc_46E2FA
	mov eax, [esp+108h]
	mov eax, [eax+21Ch]
	cmp dword [eax], 0Fh
	jge loc_46E407
	mov ebp, [esp+104h]
	xor ecx, ecx

loc_46E3E0:
	mov eax, [ebp+4]
	cmp dword [eax+4], 0
	jz loc_46E3FE
	mov edx, [esp+104h]
	mov eax, [esp+108h]
	mov ebx, ecx
	call sub_46ED80

loc_46E3FE:
	inc ecx
	add ebp, 4
	cmp ecx, 20h
	jl loc_46E3E0

loc_46E407:
	mov edx, [esp+108h]
	mov eax, [esp+104h]
	call sub_476F60
	mov eax, [esp+104h]
	add esp, 110h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46E42C:
	lea eax, [esp+100h]
	push ebp
	lea ecx, [esp+100h]
	xor ebx, ebx
	push eax
	mov eax, edx
	lea edx, [esp+8]
	call sub_49D3CC
	test eax, eax
	jz loc_46E2D8
	mov ecx, aCNfs2seGameC_8 ; "c:\\nfs2se\\game\\common\\R3DCar.c"
	mov ebx, 4DEh
	mov edx, [esp+100h]
	mov eax, aCargeo ; "carGeo"
	mov dword [dword_4DB1DC], ebx
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov esi, [esp+0FCh]
	mov ebx, [esp+100h]
	mov ecx, dword [dword_4D5EF0]
	mov [esp+10Ch], eax
	add ecx, esi
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_46E2D8

loc_46E4A5:
	jmp ExitProcess1

loc_46E4B4:
	imul eax, [eax], 6
	jmp loc_46E32D

loc_46E4BC:
	cmp ebx, 0Eh
	jz loc_46E355
	jmp loc_46E382

loc_46E4CA:
	mov edx, edi
	jmp loc_46E37A

loc_46E4D1:
	cmp ebx, 12h
	jz loc_46E38B
	jmp loc_46E3B8

loc_46E4DF:
	mov edx, edi
	jmp loc_46E3B0
;sub_46E270 endp

sub_46E4F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	mov esi, eax
	mov ecx, edx
	mov ebx, [ecx+2E4h]
	mov edx, 2Ah
	test ebx, ebx
	jz loc_46E58A
	mov eax, [ecx+21Ch]
	cmp dword [eax], 4
	jz loc_46E58A
	mov ebp, dword [dword_545224]
	xor edx, edx
	cmp ebp, 0FFFFCE00h
	jle loc_46E5AF
	cmp ebp, 3200h
	jge loc_46E5AF
	test ebp, ebp
	jle loc_46E5A9
	mov edx, ebp

loc_46E540:
	mov eax, dword [dword_5222E0]
	call sub_44B660
	cmp eax, 7
	jnz loc_46E576
	cmp dword [ecx+2E4h], 0
	jle loc_46E576
	mov eax, [ecx+21Ch]
	cmp dword [eax], 7
	jnz loc_46E5E0
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2

loc_46E574:
	mov edx, eax

loc_46E576:
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	cmp eax, 2Ah
	jge loc_46E5EB

loc_46E588:
	mov edx, eax

loc_46E58A:
	imul edx, [ecx+2E4h]
	lea eax, [esi+20h]
	xor ebx, ebx
	call sub_49E780
	mov edx, ecx
	mov eax, esi
	call sub_46E610
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_46E5A9:
	mov edx, ebp
	neg edx
	jmp loc_46E540

loc_46E5AF:
	mov ebx, dword [dword_545224]
	cmp ebx, 4600h
	jle loc_46E5C9
	mov edx, 7F00h
	sub edx, ebx
	jmp loc_46E540

loc_46E5C9:
	cmp ebx, 0FFFFBA00h
	jge loc_46E540
	lea edx, [ebx+7F00h]
	jmp loc_46E540

loc_46E5E0:
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	jmp loc_46E574

loc_46E5EB:
	mov eax, 2Ah
	jmp loc_46E588
;sub_46E4F0 endp

sub_46E600: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_46E610
	pop ebx
	ret
;sub_46E600 endp

sub_46E610: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov eax, dword [dword_540F48]
	mov ecx, dword [dword_4D928C]
	xor edi, edi
	cmp eax, ecx
	jz loc_46E6EE
	cmp dword [edx+680h], 2C0000h
	jle loc_46E6FD
	mov eax, [edx+67Ch]
	cmp eax, 2666h
	jle loc_46E6F3
	mov ecx, eax

loc_46E64E:
	cmp ecx, 28Fh
	jle loc_46E67D
	mov edi, [edx+15Ch]
	test edi, edi
	jle loc_46E708
	mov eax, edi

loc_46E666:
	add eax, 28Fh
	cmp eax, 0A3Dh
	jle loc_46E711
	mov eax, 0A3Dh

loc_46E67B:
	mov edi, eax

loc_46E67D:
	test ebx, ebx
	jz loc_46E73F
	cmp dword [edx+2F4h], 0
	jz loc_46E69A
	cmp ecx, 0B333h
	jle loc_46E735

loc_46E69A:
	call sub_488074
	shr eax, 8
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ch
	sbb eax, edx
	sar eax, 0Ch
	test eax, eax
	jle loc_46E762
	call sub_488074
	shr eax, 8
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ch
	sbb eax, edx
	sar eax, 0Ch
	neg eax
	sub eax, edi
	mov [esi+84h], eax

loc_46E6EE:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_46E6F3:
	mov ecx, 2666h
	jmp loc_46E64E

loc_46E6FD:
	mov ecx, [edx+67Ch]
	jmp loc_46E64E

loc_46E708:
	mov eax, edi
	neg eax
	jmp loc_46E666

loc_46E711:
	mov ebp, [edx+15Ch]
	test ebp, ebp
	jle loc_46E727
	mov eax, ebp
	add eax, 28Fh
	jmp loc_46E67B

loc_46E727:
	mov eax, ebp
	neg eax
	add eax, 28Fh
	jmp loc_46E67B

loc_46E735:
	mov ecx, 0B333h
	jmp loc_46E69A

loc_46E73F:
	cmp dword [edx+2F8h], 0
	jz loc_46E69A
	cmp ecx, 0B333h
	jg loc_46E69A
	mov ecx, 0B333h
	jmp loc_46E69A

loc_46E762:
	call sub_488074
	shr eax, 8
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Ch
	sbb eax, edx
	sar eax, 0Ch
	neg eax
	neg eax
	sub eax, edi
	mov [esi+84h], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_46E610 endp

sub_46E7A0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 4Ch
	mov esi, eax
	mov ecx, edx
	cmp dword [edx+280h], 2
	jnz loc_46E94E
	cmp dword [ecx+0BCh], 20000h
	jge loc_46E94E
	mov dword [ecx+664h], 0

loc_46E7D2:
	mov eax, [ecx+664h]
	cmp eax, 0FFFFC000h
	jle loc_46E96D

loc_46E7E3:
	mov ebp, [ecx+664h]
	cmp ebp, 4000h
	jge loc_46E963
	mov eax, ebp

loc_46E7F7:
	mov [ecx+664h], eax
	mov eax, [ecx+668h]
	cmp eax, 4CCCh
	jge loc_46E815
	cmp eax, 0FFFFB334h
	jle loc_46E981

loc_46E815:
	mov edx, [ecx+668h]
	cmp edx, 4CCCh
	jge loc_46E977
	mov eax, edx

loc_46E829:
	mov edx, eax
	mov [ecx+668h], eax
	mov eax, esp
	call sub_49E7E0
	lea eax, [esp+24h]
	mov edx, [ecx+664h]
	lea ebx, [esi+20h]
	call sub_49E720
	lea edx, [esp+24h]
	mov eax, esp
	call sub_49E840
	cmp dword [ecx+65Ch], 0
	jz loc_46E89C
	cmp byte [ecx+2D8h], 0
	jz loc_46E98B
	mov dword [esp+48h], 1

loc_46E873:
	mov ebp, [ecx+65Ch]
	xor edx, edx
	test ebp, ebp
	jle loc_46E89C
	mov eax, ecx

loc_46E881:
	mov esi, [eax+64Ch]
	mov bl, [esp+48h]
	mov [esi+1], bl
	inc edx
	mov ebx, [ecx+65Ch]
	add eax, 4
	cmp edx, ebx
	jl loc_46E881

loc_46E89C:
	mov esi, [ecx+2B8h]
	test esi, esi
	jle loc_46E996
	mov eax, esi

loc_46E8AC:
	mov edx, dword [dword_540F48]
	cmp edx, dword [dword_4D928C]
	jz loc_46E8C0
	inc dword [ecx+648h]

loc_46E8C0:
	cmp eax, 140000h
	jle loc_46E99F
	mov eax, 3

loc_46E8D0:
	mov edx, eax

loc_46E8D2:
	cmp dword [ecx+2F4h], 0
	jz loc_46E8E0
	mov edx, 3

loc_46E8E0:
	cmp dword [ecx+2F8h], 0
	jz loc_46E8EE
	mov eax, 3

loc_46E8EE:
	cmp dword [ecx+280h], 2
	jnz loc_46E9EF
	cmp dword [ecx+0BCh], 20000h
	jge loc_46E9EF
	mov dword [ecx+2FCh], 3

loc_46E915:
	xor eax, eax

loc_46E917:
	test byte [ecx+2FCh], 2
	jz loc_46E922
	xor edx, edx

loc_46E922:
	mov ebx, [ecx+638h]
	mov [ebx+1], al
	mov ebx, [ecx+63Ch]
	mov [ebx+1], al
	mov eax, [ecx+640h]
	mov [eax+1], dl
	mov eax, [ecx+644h]
	mov [eax+1], dl
	add esp, 4Ch
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_46E94E:
	cmp dword [ecx+664h], 4000h
	jl loc_46E7D2
	jmp loc_46E7E3

loc_46E963:
	mov eax, 4000h
	jmp loc_46E7F7

loc_46E96D:
	mov eax, 0FFFFC000h
	jmp loc_46E7F7

loc_46E977:
	mov eax, 4CCCh
	jmp loc_46E829

loc_46E981:
	mov eax, 0FFFFB334h
	jmp loc_46E829

loc_46E98B:
	xor esi, esi
	mov [esp+48h], esi
	jmp loc_46E873

loc_46E996:
	mov eax, esi
	neg eax
	jmp loc_46E8AC

loc_46E99F:
	cmp eax, 70000h
	jle loc_46E9B5
	mov eax, [ecx+648h]
	and eax, 1
	inc eax
	jmp loc_46E8D0

loc_46E9B5:
	cmp eax, 28000h
	jle loc_46E9CD
	mov eax, [ecx+648h]
	and eax, 2
	sar eax, 1
	inc eax
	jmp loc_46E8D0

loc_46E9CD:
	cmp eax, 3333h
	jle loc_46E9E6
	mov eax, [ecx+648h]
	and eax, 4
	sar eax, 2
	inc eax
	jmp loc_46E8D0

loc_46E9E6:
	xor edx, edx
	xor eax, eax
	jmp loc_46E8D2

loc_46E9EF:
	cmp dword [ecx+2FCh], 0
	jz loc_46E922
	test byte [ecx+2FCh], 1
	jnz loc_46E915
	jmp loc_46E917
;sub_46E7A0 endp

sub_46EA10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 4
	mov ecx, eax
	xor eax, eax
	mov edx, 1
	mov al, [ecx+8Ch]
	sub edx, eax
	jnz loc_46EA42

loc_46EA29:
	mov eax, 0FFFFh
	mov [esp], eax
	mov eax, esp
	mov eax, [esp]
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret

loc_46EA42:
	mov ebx, 3FFh
	mov edx, aCNfs2seGameC_8 ; "c:\\nfs2se\\game\\common\\R3DCar.c"
	lea eax, [ecx+8]
	call sub_44A930
	test eax, eax
	jz loc_46EA29
	mov edx, [ecx+18h]
	test edx, edx
	jz loc_46EA29
	mov ax, [edx+2]
	and eax, 0FFFFh
	mov [esp], eax
	mov eax, esp
	mov eax, [esp]
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46EA10 endp

sub_46EA80: ;SUBROUTINE
	push ebx
	push edi
	push ebp
	cmp dword [edx+2B8h], 2C0000h
	jle loc_46EABB
	mov edi, [edx+660h]
	cmp edi, 2147h
	jge loc_46EAA9
	lea ebp, [edi+147h]
	mov [edx+660h], ebp

loc_46EAA9:
	add eax, 20h
	mov edx, [edx+660h]
	call sub_49E720
	pop ebp
	pop edi
	pop ebx
	ret

loc_46EABB:
	mov ebx, [edx+660h]
	test ebx, ebx
	jle loc_46EAA9
	push esi
	lea esi, [ebx-147h]
	mov [edx+660h], esi
	pop esi
	add eax, 20h
	mov edx, [edx+660h]
	call sub_49E720
	pop ebp
	pop edi
	pop ebx
	ret
;sub_46EA80 endp

sub_46EAF0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov ecx, edx
	cmp dword [edx+660h], 0
	jle loc_46EB6D
	mov edx, 1

loc_46EB07:
	mov ah, [ecx+1F4h]
	mov esi, edx
	test ah, 4
	jz loc_46EB74
	mov edi, [ecx+2F0h]
	cmp edi, 3E8h
	jle loc_46EB86
	mov edx, edi
	shl edx, 10h
	mov edi, 2710h
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	cmp eax, 10000h
	jge loc_46EB7F

loc_46EB3A:
	mov edx, 10000h
	sub edx, eax
	mov eax, edx
	sar eax, 5
	imul esi, eax
	mov [ecx+660h], esi

loc_46EB4F:
	mov ebp, [ecx+660h]
	neg ebp
	lea eax, [ebx+20h]
	mov edx, ebp
	mov [ecx+660h], ebp
	call sub_49E7E0
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46EB6D:
	mov edx, 0FFFFFFFFh
	jmp loc_46EB07

loc_46EB74:
	shl edx, 0Bh
	mov [ecx+660h], edx
	jmp loc_46EB4F

loc_46EB7F:
	mov eax, 10000h
	jmp loc_46EB3A

loc_46EB86:
	mov dword [ecx+660h], 0
	jmp loc_46EB4F
;sub_46EAF0 endp

sub_46EBA0: ;SUBROUTINE
	push ebx
	push ecx
	push edi
	mov ecx, eax
	mov ebx, [edx+2B8h]
	xor eax, eax
	cmp ebx, 0A0000h
	jle loc_46EBD0
	cmp ebx, 430000h
	jle loc_46EBC2
	mov eax, 0A3Dh

loc_46EBC2:
	cmp byte [edx+2D8h], 64h
	jbe loc_46EBD0
	mov eax, 147Ah

loc_46EBD0:
	lea ebx, [eax-147h]
	mov edi, [edx+660h]
	cmp ebx, edi
	jg loc_46EC07
	add eax, 147h
	cmp eax, edi
	jge loc_46EBF5
	lea eax, [edi-28Fh]
	mov [edx+660h], eax

loc_46EBF5:
	lea eax, [ecx+20h]
	mov edx, [edx+660h]
	call sub_49E720
	pop edi
	pop ecx
	pop ebx
	ret

loc_46EC07:
	lea ebx, [edi+51Eh]
	mov [edx+660h], ebx
	lea eax, [ecx+20h]
	mov edx, [edx+660h]
	call sub_49E720
	pop edi
	pop ecx
	pop ebx
	ret
;sub_46EBA0 endp

sub_46EC30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	mov ecx, eax
	mov ebx, [edx+2B8h]
	xor eax, eax
	cmp ebx, 0E0000h
	jle loc_46EC5B
	mov bl, [edx+2D8h]
	mov eax, 0F5Ch
	cmp bl, 64h
	jbe loc_46EC5B
	mov eax, 28F5h

loc_46EC5B:
	lea ebx, [eax-147h]
	mov esi, [edx+660h]
	cmp ebx, esi
	jg loc_46EC93
	add eax, 147h
	cmp eax, esi
	jge loc_46EC80
	lea ebp, [esi-51Eh]
	mov [edx+660h], ebp

loc_46EC80:
	lea eax, [ecx+20h]
	mov edx, [edx+660h]
	call sub_49E720
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_46EC93:
	lea eax, [esi+51Eh]
	mov [edx+660h], eax
	lea eax, [ecx+20h]
	mov edx, [edx+660h]
	call sub_49E720
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46EC30 endp

sub_46ECC0: ;SUBROUTINE
	add eax, 20h
	xor edx, edx
	jmp sub_49E720
;sub_46ECC0 endp

sub_46ECD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, [eax+14h]
	mov eax, [eax+18h]
	test eax, eax
	jz loc_46ED04
	test byte [eax], 2
	jz loc_46ED04
	lea ebx, [eax+4]
	test edx, edx
	jz loc_46ED09

loc_46ECEA:
	xor edx, edx
	mov dl, [eax+4]
	imul edx, 6
	mov di, [ecx+edx]
	sub edi, 5
	inc eax
	mov [ecx+edx], di
	cmp eax, ebx
	jnz loc_46ECEA

loc_46ED04:
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46ED09:
	xor edx, edx
	mov dl, [eax+4]
	imul edx, 6
	mov si, [ecx+edx]
	add esi, 5
	inc eax
	mov [ecx+edx], si
	cmp eax, ebx
	jnz loc_46ED09
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46ECD0 endp

sub_46ED30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, [eax+14h]
	mov eax, [eax+18h]
	lea ebx, [eax+4]
	test edx, edx
	jz loc_46ED5E

loc_46ED41:
	xor edx, edx
	mov dl, [eax+4]
	imul edx, 6
	mov di, [ecx+edx]
	sub edi, 5
	inc eax
	mov [ecx+edx], di
	cmp eax, ebx
	jnz loc_46ED41
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_46ED5E:
	xor edx, edx
	mov dl, [eax+4]
	imul edx, 6
	mov si, [ecx+edx]
	add esi, 5
	inc eax
	mov [ecx+edx], si
	cmp eax, ebx
	jnz loc_46ED5E
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_46ED30 endp

sub_46ED80: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 14DCh
	mov [esp+14C4h], edx
	mov [esp+14C0h], ebx
	lea eax, 0[ebx*4]
	add eax, edx
	mov eax, [eax+4]
	mov [esp+14CCh], eax
	mov eax, [eax+14h]
	mov [esp+14D8h], eax
	mov eax, [esp+14CCh]
	mov ecx, [eax]
	mov dword [eax+1Ch], 0
	cmp ecx, 7Dh
	jg loc_46F0E9
	cmp dword [eax+4], 41h
	jg loc_46F0E9
	push edi
	push esi
	xor eax, eax

loc_46EDDA:
	add eax, 4
	xor esi, esi
	mov [esp+eax+12B0h], esi
	cmp eax, 1F4h
	jnz loc_46EDDA
	mov eax, [esp+14D4h]
	mov edi, [eax+4]
	xor ebp, ebp
	test edi, edi
	jle loc_46EF46
	mov [esp+14D8h], esi

loc_46EE08:
	mov eax, [esp+14D4h]
	mov edx, [esp+14D8h]
	mov eax, [eax+18h]
	add edx, eax
	mov [esp+14C0h], edx
	test byte [edx], 2
	jnz loc_46F0F2
	mov edx, [esp+14C0h]
	xor eax, eax
	mov al, [edx+6]
	imul eax, 6
	xor ebx, ebx
	mov bl, [edx+5]
	imul ebx, 6
	mov ecx, [esp+14E0h]
	add ecx, eax
	add ebx, [esp+14E0h]
	xor eax, eax
	mov al, [edx+4]
	imul eax, 6
	mov edx, [esp+14E0h]
	mov edi, 3
	add edx, eax
	lea eax, [esp+14B4h]
	mov [esp+14C4h], edi
	call sub_46F490

loc_46EE7B:
	mov eax, [esp+14C0h]
	test byte [eax], 4
	jz loc_46EEB7
	mov esi, [esp+14B8h]
	mov edi, [esp+14BCh]
	mov ebx, [esp+14B4h]
	neg esi
	neg edi
	neg ebx
	mov [esp+14B8h], esi
	mov [esp+14BCh], edi
	mov [esp+14B4h], ebx

loc_46EEB7:
	cmp ebp, 41h
	jge loc_46EED4
	mov edi, [esp+14D8h]
	lea esi, [esp+14B4h]
	lea edi, [esp+edi+0FA8h]
	movsd
	movsd
	movsd

loc_46EED4:
	mov eax, [esp+14C4h]
	xor ecx, ecx
	test eax, eax
	jle loc_46EF2D
	mov ebx, [esp+14C0h]

loc_46EEE8:
	xor edx, edx
	mov dl, [ebx+4]
	cmp edx, 7Dh
	jge loc_46EF20
	lea eax, 0[edx*4]
	mov esi, [esp+eax+12B4h]
	cmp esi, 8
	jge loc_46EF20
	shl edx, 5
	shl esi, 2
	mov edi, [esp+eax+12B4h]
	add esi, edx
	inc edi
	mov [esp+esi+8], ebp
	mov [esp+eax+12B4h], edi

loc_46EF20:
	mov edx, [esp+14C4h]
	inc ecx
	inc ebx
	cmp ecx, edx
	jl loc_46EEE8

loc_46EF2D:
	add dword [esp+14D8h], 0Ch
	mov eax, [esp+14D4h]
	inc ebp
	cmp ebp, [eax+4]
	jl loc_46EE08

loc_46EF46:
	mov edx, dword [dword_4D9534]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, dword_513848
	shl eax, 2
	xor ecx, ecx
	add edx, eax
	mov eax, [esp+14D4h]
	mov [esp+14DCh], ecx
	mov ebx, [eax]
	mov [eax+1Ch], edx
	test ebx, ebx
	jle loc_46F0D0
	mov edi, [esp+14E0h]
	mov [esp+14D0h], ecx
	xor ebp, ebp

loc_46EF8C:
	xor eax, eax
	mov ebx, [esp+ebp+12B4h]
	mov [esp+14ACh], eax
	mov [esp+14A8h], eax
	mov [esp+14B0h], eax
	test ebx, ebx
	jz loc_46F056
	mov ecx, [esp+14D0h]
	mov esi, ebp
	mov eax, [esp+ebp+12B4h]
	xor ebx, ebx
	test eax, eax
	jle loc_46F011

loc_46EFC8:
	mov edx, [esp+ecx+8]
	imul edx, 0Ch
	mov eax, [esp+edx+0FA8h]
	add [esp+14A8h], eax
	mov eax, [esp+edx+0FACh]
	add ecx, 4
	add [esp+14ACh], eax
	mov eax, [esp+edx+0FB0h]
	mov edx, [esp+14B0h]
	inc ebx
	add edx, eax
	mov eax, [esp+esi+12B4h]
	mov [esp+14B0h], edx
	cmp ebx, eax
	jl loc_46EFC8

loc_46F011:
	push 0Ch
	lea ebx, [esp+14ACh]
	mov edx, [esp+14CCh]
	mov eax, [esp+14D0h]
	mov ecx, edi
	call sub_46F160
	lea eax, [esp+14A8h]
	call sub_45E810
	lea eax, [esp+14A8h]
	call sub_45E990
	cmp word [edi], 0
	jnz loc_46F056
	xor edx, edx
	mov [esp+14A8h], edx

loc_46F056:
	mov ecx, [esp+14DCh]
	mov edx, dword [dword_4D9534]
	add edx, ecx
	cmp edx, 1388h
	jge loc_46F097
	imul edx, 0Ch
	mov eax, [esp+14A8h]
	mov dword dword_513848[edx], eax
	mov eax, [esp+14ACh]
	mov dword dword_51384C[edx], eax
	mov eax, [esp+14B0h]
	mov dword dword_513850[edx], eax

loc_46F097:
	mov eax, [esp+14D0h]
	mov edx, [esp+14DCh]
	add eax, 20h
	inc edx
	mov [esp+14D0h], eax
	mov [esp+14DCh], edx
	mov eax, edx
	mov edx, [esp+14D4h]
	add ebp, 4
	mov ecx, [edx]
	add edi, 6
	cmp eax, ecx
	jl loc_46EF8C

loc_46F0D0:
	mov eax, [esp+14D4h]
	mov ebx, dword [dword_4D9534]
	mov eax, [eax]
	add ebx, eax
	mov dword [dword_4D9534], ebx
	pop esi
	pop edi

loc_46F0E9:
	add esp, 14DCh
	pop ebp
	pop ecx
	ret

loc_46F0F2:
	mov dword [esp+14C4h], 4
	mov edx, [esp+14C0h]
	xor eax, eax
	mov al, [edx+7]
	imul eax, 6
	mov ecx, [esp+14E0h]
	add eax, ecx
	push eax
	xor eax, eax
	mov al, [edx+6]
	imul eax, 6
	add ecx, eax
	xor eax, eax
	mov al, [edx+5]
	imul eax, 6
	mov ebx, [esp+14E4h]
	add ebx, eax
	xor eax, eax
	mov al, [edx+4]
	imul eax, 6
	mov edx, [esp+14E4h]
	add edx, eax
	lea eax, [esp+14B8h]
	call sub_46F430
	jmp loc_46EE7B
;sub_46ED80 endp

sub_46F160: ;SUBROUTINE
	push ebp
	sub esp, 2Ch
	mov [esp+10h], edx
	mov [esp+0Ch], ebx
	mov ebp, ecx
	xor edx, edx
	mov ecx, [esp+10h]
	mov [esp+1Ch], edx
	cmp ecx, 0Ah
	jz loc_46F1D3
	cmp ecx, 9
	jz loc_46F1D3
	cmp ecx, 2
	jz loc_46F1D3
	cmp ecx, 14h
	jge loc_46F1CA
	push edi
	push esi
	mov [esp+1Ch], eax
	mov [esp+20h], edx

loc_46F196:
	mov eax, [esp+1Ch]
	mov eax, [eax+4]
	mov [esp+28h], eax
	mov ecx, [eax+4]
	mov edi, [eax+14h]
	test ecx, ecx
	jnz loc_46F1D7

loc_46F1AB:
	mov ecx, [esp+20h]
	mov edx, [esp+1Ch]
	inc ecx
	add edx, 4
	mov [esp+20h], ecx
	mov [esp+1Ch], edx
	cmp ecx, 14h
	jl loc_46F196
	mov edx, [esp+24h]
	pop esi
	pop edi

loc_46F1CA:
	mov eax, edx
	add esp, 2Ch
	pop ebp
	ret 4

loc_46F1D3:
	xor edx, edx
	jmp loc_46F1CA

loc_46F1D7:
	mov eax, [esp+20h]
	cmp eax, [esp+18h]
	jz loc_46F1AB
	cmp eax, 2
	jz loc_46F1AB
	cmp eax, 0Ah
	jz loc_46F1AB
	cmp eax, 9
	jz loc_46F1AB
	test eax, eax
	jz loc_46F1AB
	cmp eax, 0Bh
	jz loc_46F1AB
	mov eax, [esp+28h]
	xor esi, esi
	mov edx, [eax+4]
	mov [esp+30h], esi
	test edx, edx
	jle loc_46F1AB
	mov [esp+2Ch], esi

loc_46F20E:
	mov esi, [esp+28h]
	mov edx, [esp+2Ch]
	mov esi, [esi+18h]
	add esi, edx
	mov ah, [esi]
	xor ecx, ecx
	test ah, 2
	jz loc_46F34F
	xor edx, edx
	mov dl, [esi+4]
	imul edx, 6
	mov ebx, [esp+3Ch]
	mov eax, ebp
	add edx, edi
	call sub_46F3D0
	test eax, eax
	jz loc_46F2F5

loc_46F245:
	xor eax, eax
	mov al, [esi+7]
	imul eax, 6
	xor ecx, ecx
	mov cl, [esi+6]
	imul ecx, 6
	xor edx, edx
	mov dl, [esi+4]
	imul edx, 6
	add eax, edi
	push eax
	xor eax, eax
	mov al, [esi+5]
	imul eax, 6
	add ecx, edi
	lea ebx, [edi+eax]
	lea eax, [esp+0Ch]
	add edx, edi
	call sub_46F430

loc_46F278:
	mov ecx, 1

loc_46F27D:
	test byte [esi], 4
	jz loc_46F2A0
	mov esi, [esp+0Ch]
	mov eax, [esp+10h]
	mov ebx, [esp+8]
	neg esi
	neg eax
	neg ebx
	mov [esp+0Ch], esi
	mov [esp+10h], eax
	mov [esp+8], ebx

loc_46F2A0:
	test ecx, ecx
	jz loc_46F2CD
	mov edx, [esp+14h]
	mov eax, [esp+8]
	add [edx], eax
	mov ebx, [edx+4]
	mov eax, [esp+0Ch]
	add ebx, eax
	mov [edx+4], ebx
	mov esi, [edx+8]
	add esi, [esp+10h]
	mov eax, [esp+24h]
	inc eax
	mov [edx+8], esi
	mov [esp+24h], eax

loc_46F2CD:
	mov ecx, [esp+2Ch]
	mov ebx, [esp+30h]
	mov edx, [esp+28h]
	add ecx, 0Ch
	inc ebx
	mov esi, [edx+4]
	mov [esp+2Ch], ecx
	mov [esp+30h], ebx
	cmp ebx, esi
	jge loc_46F1AB
	jmp loc_46F20E

loc_46F2F5:
	xor edx, edx
	mov dl, [esi+5]
	imul edx, 6
	mov ebx, [esp+3Ch]
	mov eax, ebp
	add edx, edi
	call sub_46F3D0
	test eax, eax
	jnz loc_46F245
	mov al, [esi+6]
	imul eax, 6
	mov ebx, [esp+3Ch]
	lea edx, [edi+eax]
	mov eax, ebp
	call sub_46F3D0
	test eax, eax
	jnz loc_46F245
	mov al, [esi+7]
	imul eax, 6
	mov ebx, [esp+3Ch]
	lea edx, [edi+eax]
	mov eax, ebp
	call sub_46F3D0
	test eax, eax
	jnz loc_46F245
	jmp loc_46F27D

loc_46F34F:
	xor edx, edx
	mov dl, [esi+4]
	imul edx, 6
	mov ebx, [esp+3Ch]
	mov eax, ebp
	add edx, edi
	call sub_46F3D0
	test eax, eax
	jnz loc_46F380
	mov al, [esi+5]
	imul eax, 6
	mov ebx, [esp+3Ch]
	lea edx, [edi+eax]
	mov eax, ebp
	call sub_46F3D0
	test eax, eax
	jz loc_46F3AD

loc_46F380:
	xor ecx, ecx
	mov cl, [esi+6]
	imul ecx, 6
	xor ebx, ebx
	mov bl, [esi+5]
	imul ebx, 6
	xor eax, eax
	mov al, [esi+4]
	imul eax, 6
	add ecx, edi
	add ebx, edi
	lea edx, [edi+eax]
	lea eax, [esp+8]
	call sub_46F490
	jmp loc_46F278

loc_46F3AD:
	mov al, [esi+6]
	imul eax, 6
	mov ebx, [esp+3Ch]
	lea edx, [edi+eax]
	mov eax, ebp
	call sub_46F3D0
	test eax, eax
	jnz loc_46F380
	jmp loc_46F27D
;sub_46F160 endp

sub_46F3D0: ;SUBROUTINE
	push ecx
	push esi
	movsx esi, word [edx]
	movsx ecx, word [eax]
	sub ecx, esi
	test ecx, ecx
	jle loc_46F413

loc_46F3DE:
	cmp ecx, ebx
	jg loc_46F40E
	mov esi, [edx]
	mov ecx, [eax]
	sar esi, 10h
	sar ecx, 10h
	sub ecx, esi
	test ecx, ecx
	jle loc_46F417

loc_46F3F2:
	cmp ecx, ebx
	jg loc_46F40E
	mov ecx, [eax+2]
	mov eax, [edx+2]
	sar ecx, 10h
	sar eax, 10h
	sub ecx, eax
	mov eax, ecx
	test ecx, ecx
	jle loc_46F41B
	cmp eax, ebx
	jle loc_46F426

loc_46F40E:
	xor eax, eax
	pop esi
	pop ecx
	ret

loc_46F413:
	neg ecx
	jmp loc_46F3DE

loc_46F417:
	neg ecx
	jmp loc_46F3F2

loc_46F41B:
	neg eax
	cmp eax, ebx
	jle loc_46F426
	xor eax, eax
	pop esi
	pop ecx
	ret

loc_46F426:
	mov eax, 1
	pop esi
	pop ecx
	ret
;sub_46F3D0 endp

sub_46F430: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov esi, eax
	mov ebp, edx
	mov edi, ecx
	lea eax, [esp+0Ch]
	call sub_46F490
	mov ecx, [esp+28h]
	mov eax, esp
	mov ebx, edi
	mov edx, ebp
	call sub_46F490
	mov eax, [esp+0Ch]
	add eax, [esp]
	sar eax, 1
	mov [esi], eax
	mov eax, [esp+10h]
	add eax, [esp+4]
	sar eax, 1
	mov [esi+4], eax
	mov eax, [esp+14h]
	add eax, [esp+8]
	sar eax, 1
	mov [esi+8], eax
	mov eax, esi
	call sub_45E810
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_46F430 endp

sub_46F490: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov esi, eax
	movsx edi, word [ebx]
	movsx eax, word [edx]
	sub edi, eax
	mov [esp], edi
	mov edi, [ebx]
	mov eax, [edx]
	sar edi, 10h
	sar eax, 10h
	sub edi, eax
	mov [esp+4], edi
	mov ebx, [ebx+2]
	mov eax, [edx+2]
	sar ebx, 10h
	sar eax, 10h
	sub ebx, eax
	mov [esp+8], ebx
	movsx ebx, word [ecx]
	movsx eax, word [edx]
	sub ebx, eax
	mov [esp+0Ch], ebx
	mov ebx, [ecx]
	mov eax, [edx]
	sar ebx, 10h
	sar eax, 10h
	sub ebx, eax
	mov [esp+10h], ebx
	mov ebx, [esp+8]
	mov ebp, [esp+10h]
	mov ecx, [ecx+2]
	mov eax, [edx+2]
	mov edx, [esp]
	sar ecx, 10h
	sar eax, 10h
	shl ebx, 8
	shl ebp, 8
	shl edx, 8
	mov [esp+8], ebx
	sub ecx, eax
	mov [esp+10h], ebp
	mov [esp+14h], ecx
	mov [esp], edx
	mov eax, [esp+14h]
	mov ecx, edi
	mov edi, [esp+0Ch]
	shl ecx, 8
	shl eax, 8
	mov [esp+4], ecx
	shl edi, 8
	mov [esp+14h], eax
	mov eax, esp
	mov [esp+0Ch], edi
	call sub_45E810
	lea eax, [esp+0Ch]
	call sub_45E810
	mov edx, [esp+14h]
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+10h]
	mov ecx, eax
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esi], ecx
	mov edx, [esp+0Ch]
	mov eax, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+14h]
	mov ecx, eax
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov [esi+4], ecx
	mov edx, [esp+10h]
	mov eax, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [esp+0Ch]
	mov ecx, eax
	mov eax, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sub ecx, eax
	mov eax, esi
	mov [esi+8], ecx
	call sub_45E810
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret
;sub_46F490 endp

sub_46F5D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 10h
	mov esi, eax
	lea eax, [esp+0Ch]
	lea ecx, [esp+8]
	lea ebx, [esp+4]
	push eax
	lea edx, [esp+4]
	mov eax, [esi+60Ch]
	call sub_458670
	mov eax, [esi+21Ch]
	mov edx, [eax]
	cmp edx, 4
	jz loc_46F61E
	cmp edx, 0Ch
	jz loc_46F61E
	cmp edx, 0Dh
	jz loc_46F625
	cmp edx, 0Eh
	jnz loc_46F62C
	mov eax, 90000000h

loc_46F616:
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46F61E:
	mov eax, 80000000h
	jmp loc_46F616

loc_46F625:
	mov eax, 70000000h
	jmp loc_46F616

loc_46F62C:
	mov eax, [esp+8]
	sar eax, 2
	add eax, 40h
	shl eax, 18h
	add esp, 10h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46F5D0 endp


sub_46F660: ;SUBROUTINE
	call sub_470D40
	call sub_49C110
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, sub_42A8B0
	mov esi, nullsub_9
	mov ebp, sub_42C4C0
	mov edx, nullsub_11
	mov ebx, sub_42A7D0
	mov edi, sub_42AD80
	mov eax, sub_42AAC0
	mov dword [dword_4EC544], ecx
	mov dword [dword_4EC504], esi
	mov dword [dword_4EC508], esi
	mov dword [dword_4EC50C], ebp
	mov dword [dword_4EC510], ebp
	mov dword [dword_4EC514], ebp
	mov dword [dword_4EC558], ebp
	mov dword [dword_4EC500], edx
	mov dword [dword_4EC548], ebx
	mov dword [dword_4EC554], edi
	mov dword [dword_4EC54C], eax
	mov ecx, sub_42C8B0
	mov esi, sub_42AD80
	mov ebp, sub_42ABF0
	mov edx, sub_42A980
	mov ebx, sub_42BCD0
	mov edi, sub_42B320
	mov eax, sub_42B970
	mov dword [dword_4EC518], ecx
	mov dword [dword_4EC550], esi
	mov dword [dword_4EC578], ebp
	mov dword [dword_4EC574], edx
	mov dword [dword_4EC584], ebx
	mov dword [dword_4EC580], edi
	mov dword [dword_4EC528], eax
	mov ecx, sub_42C0D0
	mov esi, sub_42B6B0
	mov edx, sub_42BBA0
	mov ebx, sub_42AF00
	mov eax, sub_42A710
	mov edi, sub_42A680
	mov dword [dword_4EC51C], ecx
	mov dword [dword_4EC520], esi
	mov dword [dword_4EC524], esi
	mov dword [dword_4EC52C], edx
	mov dword [dword_4EC57C], ebx
	mov dword [dword_4EC560], eax
	mov dword [dword_4EC56C], edi
	mov ecx, sub_42B170
	mov edx, sub_42A700
	mov ebx, nullsub_10
	mov esi, sub_42A6D0
	mov dword [dword_4EC530], ecx
	mov dword [dword_4EC534], ecx
	mov dword [dword_4EC538], ecx
	mov dword [dword_4EC53C], ecx
	mov dword [dword_4EC55C], edx
	mov dword [dword_4EC570], ebx
	mov ecx, sub_42A6F0
	mov dword [dword_4EC568], esi
	mov dword [dword_4EC564], ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46F660 endp

sub_46F670: ;SUBROUTINE
	push edx
	mov eax, dword [dword_5222D4]
	xor edx, edx
	call sub_430860
	mov dword [dword_5222D4], edx
	call sub_47F150
	call sub_434F10
	call sub_47F2A0
	call sub_4594E0
	call sub_4594D0
	call sub_470F50
	pop edx
	ret
;sub_46F670 endp

sub_46F6C0: ;SUBROUTINE
	push edx
	xor edx, edx
	call sub_434F20
	mov dword [dword_5222D0], edx
	call sub_46FEE0
	pop edx
	ret
;sub_46F6C0 endp

sub_46F6E0: ;SUBROUTINE
	call sub_47F2B0
	call sub_474260
	call sub_475B40
	call sub_42D810
	jmp sub_4381C0
;sub_46F6E0 endp

sub_46F710: ;SUBROUTINE
	call sub_428F60
	call sub_434F30
	call sub_474280
	call sub_47F2C0
	call sub_475B50
	call sub_4595F0
	mov eax, 3
	call sub_47D4C0
	call sub_4595D0
	call sub_42ED30
	call sub_42D920
	call sub_437D10
	jmp sub_470F70
;sub_46F710 endp

sub_46F760: ;SUBROUTINE
	push edx
	mov edx, 1
	xor eax, eax
	call sub_45B9E0
	test eax, eax
	jz loc_46F78D
	mov edx, dword [dword_4D9550]
	inc edx
	mov dword [dword_4D9550], edx
	cmp edx, 1
	jle loc_46F78D
	push ebx
	xor ebx, ebx
	mov dword [dword_4D9550], ebx
	pop ebx

loc_46F78D:
	pop edx
	ret
;sub_46F760 endp

sub_46F7A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov eax, dword [dword_5222D0]
	call sub_46F930
	cmp dword [dword_512208], 1
	jz loc_46F89A
	push 0
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	call sub_46F980
	cmp dword [dword_5222D0], 0
	jnz loc_46F841
	cmp dword [dword_4D9550], 0
	jnz loc_46F81D
	cmp dword [dword_512054], 0
	jz loc_46F81D
	xor eax, eax
	call sub_44B6E0
	test eax, eax
	jz loc_46F81D
	lea ebx, [esp+8]
	lea edx, [esp+4]
	mov eax, esp
	call sub_477710
	mov ebp, [esp+8]
	mov ecx, [esp+4]
	mov ebx, [esp]
	push ebp
	mov eax, 1
	xor edx, edx
	call sub_46F980

loc_46F81D:
	push 0
	mov eax, 2
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	call sub_46F980
	push 0
	mov eax, 3
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx

loc_46F83C:
	call sub_46F980

loc_46F841:
	test esi, esi
	jz loc_46F87A
	cmp dword [dword_5222D0], 0
	jnz loc_46F867
	mov dword [dword_5222D0], 1
	call sub_430840
	call sub_45F980

loc_46F867:
	call sub_428E80
	cmp dword [dword_4D966C], 0
	jnz loc_46F87A
	call sub_45FA70

loc_46F87A:
	call sub_429FF0
	call sub_428FB0
	test esi, esi
	jnz loc_46F900
	cmp dword [dword_5222D0], 0
	jnz loc_46F907

loc_46F891:
	add esp, 0Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46F89A:
	push 0
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	call sub_46F980
	push 0
	mov edx, 1
	xor ecx, ecx
	xor ebx, ebx
	xor eax, eax
	call sub_46F980
	mov eax, dword [dword_5222D0]
	test eax, eax
	jnz loc_46F841
	push eax
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 2
	call sub_46F980
	push 0
	mov eax, 3
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	call sub_46F980
	push 0
	mov edx, 1
	mov eax, 3
	xor ecx, ecx
	xor ebx, ebx
	jmp loc_46F83C

loc_46F900:
	call sub_428E50
	jmp loc_46F891

loc_46F907:
	push edi
	xor edi, edi
	mov dword [dword_5222D0], edi
	call sub_428EB0
	call sub_430850
	pop edi
	add esp, 0Ch
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46F7A0 endp

sub_46F930: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	call sub_448240
	call sub_4744A0
	test edx, edx
	jnz loc_46F95A
	mov ecx, 1

loc_46F947:
	test edx, edx
	jnz loc_46F95E
	mov eax, 1
	mov edx, ecx
	call sub_428FC0
	pop edx
	pop ecx
	ret

loc_46F95A:
	xor ecx, ecx
	jmp loc_46F947

loc_46F95E:
	xor eax, eax
	mov edx, ecx
	call sub_428FC0
	pop edx
	pop ecx
	ret
;sub_46F930 endp

off_46F970: dd loc_46F9CC
	dd loc_46F9CC ; jump table for switch statement
	dd loc_46FA0C
	dd loc_46FA23

sub_46F980: ;SUBROUTINE
	push esi
	push edi
	sub esp, 10h
	mov esi, eax
	mov edi, edx
	mov eax, dword [dword_5222D4]
	mov dword [dword_5222DC], esi
	mov dword [dword_5222E0], edx
	mov dword [dword_522344], ebx
	mov dword [dword_5222D8], eax
	mov eax, [esp+1Ch]
	xor edx, edx
	mov dword [dword_52234C], eax
	mov eax, dword_5222DC
	mov dword [dword_522348], ecx
	call sub_44EEC0
	cmp esi, 3 ; switch 4 cases
	ja loc_46F9DD ; jumptable 0046F9C5 default case
	jmp off_46F970[esi*4] ; switch jump

loc_46F9CC:
	mov eax, dword_5222DC ; jumptable 0046F9C5 cases 0,1
	call sub_448050
	mov eax, esi
	call sub_46FA40

loc_46F9DD:
	mov edx, 2 ; jumptable 0046F9C5 default case
	mov eax, dword_5222DC
	call sub_44EEC0
	mov edx, dword [dword_5222C0]
	push edx
	mov ecx, dword [dword_5222BC]
	push ecx
	mov eax, dword_5222DC
	call sub_429010
	add esp, 10h
	pop edi
	pop esi
	ret 4

loc_46FA0C:
	mov eax, dword_5222DC ; jumptable 0046F9C5 case 2
	mov esi, esp
	mov edi, dword_5222BC
	call sub_458A10
	mov esi, esp
	movsd
	movsd
	jmp loc_46F9DD ; jumptable 0046F9C5 default case

loc_46FA23:
	lea esi, [esp+8] ; jumptable 0046F9C5 case 3
	mov eax, edi
	call sub_458B10
	lea esi, [esp+8]
	mov edi, dword_5222BC
	movsd
	movsd
	jmp loc_46F9DD ; jumptable 0046F9C5 default case
;sub_46F980 endp

sub_46FA40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 48h
	mov ecx, eax
	call sub_4713D0
	mov eax, dword_5222DC
	call sub_42A5B0
	mov eax, dword_5222DC
	mov esi, esp
	call sub_448120
	xor eax, eax
	mov edi, dword_5222BC
	call sub_46FC20
	mov esi, esp
	mov eax, dword_5222DC
	movsd
	movsd
	call sub_45BD70
	mov eax, dword_5222BC
	lea esi, [esp+8]
	mov edi, dword_5222BC
	call sub_46FC20
	lea esi, [esp+8]
	mov eax, dword_5222DC
	movsd
	movsd
	call sub_47F310
	mov eax, dword_5222BC
	lea esi, [esp+10h]
	mov edi, dword_5222BC
	call sub_46FC20
	lea esi, [esp+10h]
	mov eax, dword_5222DC
	movsd
	movsd
	call sub_46C710
	mov eax, dword_5222BC
	lea esi, [esp+18h]
	mov edi, dword_5222BC
	call sub_46FC20
	lea esi, [esp+18h]
	mov eax, dword_5222DC
	movsd
	movsd
	call sub_4742A0
	mov eax, dword_5222BC
	lea esi, [esp+20h]
	mov edi, dword_5222BC
	call sub_46FBC0
	lea esi, [esp+20h]
	movsd
	movsd
	mov eax, dword_5222DC
	lea esi, [esp+28h]
	call sub_435C50
	mov edx, [esp+2Ch]
	push edx
	mov ebx, [esp+2Ch]
	push ebx
	mov esi, dword [dword_5222C0]
	push esi
	mov edi, dword [dword_5222BC]
	push edi
	lea esi, [esp+40h]
	call sub_46FDA0
	lea esi, [esp+30h]
	mov edi, dword_5222BC
	mov edx, 1
	mov eax, dword_5222DC
	movsd
	movsd
	call sub_44EEC0
	mov ebp, dword [dword_5222C0]
	push ebp
	mov eax, dword [dword_5222BC]
	push eax
	lea esi, [esp+40h]
	mov eax, dword_5222DC
	call sub_45B580
	mov edx, [esp+44h]
	push edx
	mov ebx, [esp+44h]
	push ebx
	lea esi, [esp+50h]
	mov edi, dword_5222BC
	call sub_46FDA0
	lea esi, [esp+40h]
	movsd
	movsd
	cmp ecx, 1
	jz loc_46FB93
	add esp, 48h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_46FB93:
	mov ecx, 46h
	mov ebx, 96h
	mov edx, 28h
	mov eax, 1E6h
	call sub_46FC70
	add esp, 48h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46FA40 endp

sub_46FBC0: ;SUBROUTINE
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 8
	mov edx, esi
	mov ecx, eax
	mov esi, esp
	call sub_470FE0
	test ecx, ecx
	jnz loc_46FBE6
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret

loc_46FBE6:
	push ebx
	mov ebx, [esp+8]
	push ebx
	mov esi, [esp+8]
	push esi
	mov edi, [ecx+4]
	push edi
	mov ebp, [ecx]
	push ebp
	lea esi, [esp+14h]
	call sub_46FDA0
	pop ebx
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret
;sub_46FBC0 endp

sub_46FC20: ;SUBROUTINE
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 8
	mov edx, esi
	mov ecx, eax
	mov esi, esp
	call sub_470FE0
	test ecx, ecx
	jnz loc_46FC4B

loc_46FC36:
	mov esi, esp
	mov edi, edx
	call sub_4713D0
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	ret

loc_46FC4B:
	push ebx
	mov ebx, [esp+8]
	push ebx
	mov esi, [esp+8]
	push esi
	mov edi, [ecx+4]
	push edi
	mov ebp, [ecx]
	push ebp
	lea esi, [esp+14h]
	call sub_46FDA0
	pop ebx
	jmp loc_46FC36
;sub_46FC20 endp

sub_46FC70: ;SUBROUTINE
	push esi
	push edi
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov edx, 14h
	mov eax, esp
	call sub_46FE70
	test eax, eax
	jnz loc_46FC8F
	add esp, 4
	pop edi
	pop esi
	ret

loc_46FC8F:
	mov edx, 14h
	mov eax, esp
	call sub_46FEA0
	mov eax, [esp]
	mov edx, dword [dword_5222BC]
	mov [eax], edx
	mov eax, [esp]
	mov dword [eax+4], 18h
	mov eax, [esp]
	mov word [eax+8], 1
	mov eax, [esp]
	mov [eax+0Ah], di
	mov eax, [esp]
	mov [eax+0Ch], si
	mov eax, [esp]
	add edi, ebx
	mov [eax+0Eh], di
	mov eax, [esp]
	add esi, ecx
	mov [eax+10h], si
	mov eax, [esp]
	mov dword [dword_5222BC], eax
	add esp, 4
	pop edi
	pop esi
	ret
;sub_46FC70 endp

sub_46FCF0: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov eax, esi
	mov edx, dword [dword_5222CC]
	mov [esp], edx
	mov edx, dword [dword_5222C8]
	mov [esp+4], edx
	test edx, edx
	jnz loc_46FD1A
	mov esi, esp
	mov edi, eax
	movsd
	movsd
	add esp, 8
	pop edi
	pop edx
	ret

loc_46FD1A:
	mov dword [edx], 0
	mov esi, esp
	mov edi, eax
	movsd
	movsd
	add esp, 8
	pop edi
	pop edx
	ret
;sub_46FCF0 endp

sub_46FD30: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_46FEA0
	test eax, eax
	jz loc_46FD5A
	cmp dword [dword_5222CC], 0
	jz loc_46FD5C
	mov eax, dword [dword_5222C8]
	mov edx, [ecx]
	mov [eax], edx
	mov eax, [ecx]
	mov dword [dword_5222C8], eax
	mov eax, 1

loc_46FD5A:
	pop ecx
	ret

loc_46FD5C:
	mov eax, [ecx]
	mov dword [dword_5222CC], eax
	mov eax, [ecx]
	mov dword [dword_5222C8], eax
	mov eax, 1
	pop ecx
	ret
;sub_46FD30 endp

sub_46FD80: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_5222C8], edx
	mov dword [dword_5222CC], edx
	pop edx
	ret
;sub_46FD80 endp

sub_46FDA0: ;SUBROUTINE
	push ebx
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	cmp dword [esp+18h], 0
	jz loc_46FDD0
	mov ebx, [esp+20h]
	test ebx, ebx
	jnz loc_46FDD8
	mov edi, esp
	lea esi, [esp+18h]

loc_46FDBD:
	movsd
	movsd
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	pop ebx
	ret 10h

loc_46FDD0:
	mov edi, esp
	lea esi, [esp+20h]
	jmp loc_46FDBD

loc_46FDD8:
	push ecx
	mov eax, [esp+28h]
	mov ecx, [esp+20h]
	lea edi, [esp+4]
	lea esi, [esp+1Ch]
	mov [esp+20h], eax
	mov [ecx], ebx
	movsd
	movsd
	pop ecx
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	pop ebx
	ret 10h
;sub_46FDA0 endp

sub_46FE10: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	mov [esp], eax
	mov [esp+4], eax
	test eax, eax
	jnz loc_46FE30
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret

loc_46FE30:
	mov dword [eax], 0
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret
;sub_46FE10 endp

sub_46FE50: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov eax, esi
	mov edi, esi
	xor edx, edx
	mov esi, esp
	mov [esp+4], edx
	mov [esp], edx
	movsd
	movsd
	add esp, 8
	pop edi
	pop edx
	ret
;sub_46FE50 endp

sub_46FE70: ;SUBROUTINE
	push ecx
	mov edx, dword [dword_5222D8]
	mov [eax], edx
	mov eax, edx
	mov edx, dword [dword_5222D4]
	mov ecx, dword [dword_5222C4]
	sub eax, edx
	cmp eax, ecx
	jle loc_46FE91
	xor eax, eax
	pop ecx
	ret

loc_46FE91:
	mov eax, 1
	pop ecx
	ret
;sub_46FE70 endp

sub_46FEA0: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, dword [dword_5222D8]
	mov [eax], ebx
	add ebx, edx
	mov edx, dword [dword_5222D4]
	mov eax, ebx
	mov ecx, dword [dword_5222C4]
	sub eax, edx
	cmp eax, ecx
	jle loc_46FECB
	xor eax, eax
	mov dword [dword_5222D8], ebx
	pop ecx
	pop ebx
	ret

loc_46FECB:
	mov eax, 1
	mov dword [dword_5222D8], ebx
	pop ecx
	pop ebx
	ret
;sub_46FEA0 endp

sub_46FEE0: ;SUBROUTINE
	push edx
	mov eax, dword_5222C4
	call sub_430870
	mov edx, dword [dword_5222C4]
	mov dword [dword_5222D4], eax
	sub edx, 64h
	mov dword [dword_5222D8], eax
	mov dword [dword_5222C4], edx
	pop edx
	ret
;sub_46FEE0 endp

sub_46FF10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ecx, eax
	shl eax, 2
	add eax, ecx
	shl eax, 2
	mov esi, dword [dword_540F48]
	mov edx, dword dword_5227C0[eax]
	sub esi, 200h
	test edx, edx
	jnz loc_47000B
	mov eax, dword dword_5227BC[eax]
	shl eax, 2
	mov ebx, dword dword_4D9584[eax]
	cmp ebx, 6
	jnz loc_470012

loc_46FF52:
	mov edx, 280h

loc_46FF57:
	lea eax, 0[ecx*4]
	add eax, ecx
	shl eax, 2
	mov ebx, esi
	sub ebx, dword dword_5227B4[eax]
	cmp ebx, edx
	jle loc_47000B
	mov eax, dword dword_5227BC[eax]
	shl eax, 2
	mov edx, dword dword_4D9584[eax]
	cmp edx, 6
	jz loc_46FF8C
	cmp edx, 5
	jnz loc_46FFA0

loc_46FF8C:
	lea eax, 0[ecx*4]
	add eax, ecx
	mov dword dword_5227C0[eax*4], 1

loc_46FFA0:
	mov eax, ecx
	shl eax, 4
	add eax, ecx
	shl eax, 4
	mov eax, dword dword_4D5C74[eax]
	cmp dword [eax+288h], 0
	jz loc_470025
	mov edx, 2
	lea eax, 0[ecx*4]
	xor esi, esi
	add eax, ecx
	mov dword [dword_4D9588], edx
	mov dword [dword_4D9594], edx
	mov dword dword_5227C0[eax*4], esi

loc_46FFDC:
	lea ebx, 0[ecx*4]
	add ebx, ecx
	shl ebx, 2
	mov edx, dword dword_5227BC[ebx]
	inc edx
	mov esi, 6
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov edi, dword dword_5227C0[ebx]
	mov dword dword_5227BC[ebx], edx
	test edi, edi
	jz loc_470038

loc_47000B:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470012:
	cmp ebx, 5
	jz loc_46FF52
	mov edx, 140h
	jmp loc_46FF57

loc_470025:
	mov ebp, 6
	mov dword [dword_4D9588], ebp
	mov dword [dword_4D9594], ebp
	jmp loc_46FFDC

loc_470038:
	mov eax, ecx
	call sub_470050
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_46FF10 endp

sub_470050: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, eax
	cmp dword [dword_540D94], 2
	jnz loc_470087
	call rand_
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Bh
	sbb eax, edx
	sar eax, 0Bh
	cmp eax, 4
	jge loc_4700E4
	cmp eax, 2
	jge loc_4700DD
	mov edx, 547Ah

loc_470080:
	mov eax, ecx

loc_470082:
	call sub_44B280

loc_470087:
	lea ebx, 0[ecx*4]
	add ebx, ecx
	shl ebx, 2
	mov edx, dword dword_5227BC[ebx]
	mov eax, ecx
	mov edx, dword dword_4D9584[edx*4]
	call sub_44B5B0
	mov eax, dword dword_5227BC[ebx]
	cmp dword dword_4D9584[eax*4], 6
	jz loc_4700EA

loc_4700B7:
	mov eax, ecx
	shl ecx, 2
	add ecx, eax
	xor esi, esi
	mov eax, dword [dword_540F48]
	mov dword dword_5227C0[ecx*4], esi
	sub eax, 200h
	mov dword dword_5227B4[ecx*4], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4700DD:
	mov edx, 0FFFFAB86h
	jmp loc_470080

loc_4700E4:
	mov eax, ecx
	xor edx, edx
	jmp loc_470082

loc_4700EA:
	mov eax, ecx
	call sub_44D460
	jmp loc_4700B7
;sub_470050 endp

off_470100: dd loc_47028B
	dd loc_4702A6 ; jump table for switch statement
	dd loc_470304
	dd loc_470319

sub_470110: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov eax, dword [dword_52279C]
	mov edx, dword dword_4D9560[eax*4]
	mov esi, 1
	cmp edx, 5
	jnz loc_47013F
	cmp byte [byte_4D5C7C], 7
	jnz loc_47013F
	mov dword [dword_52279C], 4

loc_47013F:
	cmp dword [dword_512208], 1
	jnz loc_47014D
	mov esi, 2

loc_47014D:
	mov edi, dword [dword_5227AC]
	test edi, edi
	jle loc_4701B2
	cmp dword [dword_5227A8], 0
	jz loc_4701B2
	mov dword [dword_52279C], edi
	xor ecx, ecx
	test esi, esi
	jle loc_4701B2
	xor ebx, ebx

loc_47016E:
	xor eax, eax
	xor edx, edx
	mov dword dword_5227B0[ebx], eax
	mov eax, ecx
	call sub_44B280
	mov edx, dword [dword_52279C]
	mov eax, ecx
	mov edx, dword dword_4D9560[edx*4]
	call sub_44B5B0
	mov edx, dword [dword_52279C]
	cmp dword dword_4D9560[edx*4], 6
	jnz loc_4701AA
	mov eax, ecx
	call sub_44D460

loc_4701AA:
	inc ecx
	add ebx, 14h
	cmp ecx, esi
	jl loc_47016E

loc_4701B2:
	xor ebp, ebp
	mov eax, dword [dword_5227A4]
	mov dword [dword_5227A8], ebp
	test eax, eax
	jle loc_4701E0
	lea esi, [eax-1]

loc_4701C6:
	mov dword [dword_5227A4], esi

loc_4701CC:
	cmp dword [dword_540F2C], 0 ; jumptable 00470284 default case
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4701E0:
	mov edx, 1
	mov eax, 3
	call sub_45B980
	test eax, eax
	jz loc_47021A
	mov ecx, dword [dword_5227A0]
	test ecx, ecx
	jle loc_4701CC ; jumptable 00470284 default case
	lea ebx, [ecx-1]
	mov dword [dword_5227A0], ebx
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47021A:
	mov edx, 1
	mov eax, 4
	call sub_45B980
	test eax, eax
	jz loc_470254
	mov eax, dword [dword_5227A0]
	cmp eax, 3
	jge loc_4701CC ; jumptable 00470284 default case
	lea edx, [eax+1]
	mov dword [dword_5227A0], edx
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470254:
	mov edx, 1
	mov eax, 5
	call sub_45B980
	test eax, eax
	jz loc_4701CC ; jumptable 00470284 default case
	mov dword [dword_5227A4], 8
	mov edx, dword [dword_5227A0]
	cmp edx, 3 ; switch 4 cases
	ja loc_4701CC ; jumptable 00470284 default case
	jmp off_470100[edx*4] ; switch jump

loc_47028B:
	xor byte [dword_522790], 1 ; jumptable 00470284 case 0
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4702A6:
	mov edx, dword [dword_522794] ; jumptable 00470284 case 1
	mov ebp, dword [dword_512208]
	inc edx
	cmp ebp, 1
	jnz loc_4702DE
	mov ecx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_522794], edx
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4702DE:
	mov ecx, 4
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_522794], edx
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470304:
	mov edi, 1 ; jumptable 00470284 case 2
	mov esi, 18h
	mov dword [dword_522798], edi
	jmp loc_4701C6

loc_470319:
	mov ecx, 1 ; jumptable 00470284 case 3
	mov edx, dword [dword_52279C]
	mov dword [dword_5227A8], ecx
	add edx, ecx
	mov ecx, 8
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_52279C], edx
	mov ebx, dword dword_4D9560[edx*4]
	mov dword [dword_5227AC], edx
	cmp ebx, 0Ah
	jnz loc_4701CC ; jumptable 00470284 default case
	xor ebx, ebx
	test esi, esi
	jle loc_4701CC ; jumptable 00470284 default case
	mov edi, 1
	xor ecx, ecx

loc_470365:
	add ecx, 14h
	mov edx, dword [dword_540F48]
	xor ebp, ebp
	mov dword dword_52279C[ecx], edi
	mov eax, ebx
	mov dword dword_5227A4[ecx], ebp
	sub edx, 200h
	mov dword dword_5227A8[ecx], ebp
	add ebx, edi
	mov dword dword_5227A0[ecx], edx
	mov edx, dword dword_4D9584[ebp*4]
	mov dword dword_5227AC[ecx], ebp
	call sub_44B5B0
	cmp ebx, esi
	jl loc_470365
	cmp dword [dword_540F2C], 0
	jnz loc_4703B8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4703B8:
	call sub_44CB04
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470110 endp

sub_4703D0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_540D94]
	test edx, edx
	jz loc_4703E0
	cmp edx, 1
	jnz loc_4703ED

loc_4703E0:
	mov eax, [eax+1ECh]
	call sub_470670
	pop edx
	ret

loc_4703ED:
	mov eax, [eax+1ECh]
	call sub_4704E0
	pop edx
	ret
;sub_4703D0 endp

sub_470400: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 5Ch
	push aReplay_rpy_0 ; "replay.rpy"
	lea eax, [esp+4]
	lea ecx, [esp+58h]
	xor edx, edx
	push eax
	lea ebx, [esp+58h]
	mov [esp+58h], edx
	call sprintf_
	add esp, 8
	lea edx, [esp+58h]
	mov eax, esp
	call sub_4877BC
	mov ecx, [esp+58h]
	test ecx, ecx
	jnz loc_470446
	mov dword [dword_540D94], ecx
	add esp, 5Ch
	pop edx
	pop ecx
	pop ebx
	ret

loc_470446:
	mov ebx, [esp+54h]
	mov edx, dword_5227D8
	mov eax, ecx
	call sub_487958
	mov eax, [esp+58h]
	call sub_487950
	add esp, 5Ch
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470400 endp

sub_470470: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 3Ch
	push aReplay_rpy_0 ; "replay.rpy"
	lea eax, [esp+4]
	push eax
	call sprintf_
	mov edx, dword [dword_540D94]
	add esp, 8
	test edx, edx
	jnz loc_47049E
	mov eax, dword [dword_540F48]
	mov dword [dword_4D955C], eax

loc_47049E:
	mov ecx, 16Ch
	mov edi, dword_5227D8
	mov esi, dword_5121F8
	mov ebx, 1E5B4h
	mov edx, dword_5227D8
	rep movsd
	mov eax, dword [dword_4D955C]
	mov ecx, 2
	mov dword [dword_522D88], eax
	mov eax, esp
	mov dword [dword_5227F4], ecx
	call sub_4875B0
	add esp, 3Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470470 endp

sub_4704E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 80h
	mov edx, eax
	cmp dword dword_522370[eax*4], 0
	jnz loc_470592
	mov eax, dword [dword_540D90]
	cmp byte byte_522D8C[eax], 0
	jnz loc_470571
	mov dword [dword_540D94], 4

loc_470513:
	mov ebp, dword dword_522370[edx*4]
	inc ebp
	mov eax, dword [dword_512208]
	mov dword dword_522370[edx*4], ebp
	cmp eax, 2
	jl loc_470615
	cmp edx, dword [dword_51220C]
	jnz loc_470615

loc_47053C:
	cmp dword [dword_5227B0], 0
	jz loc_470555
	cmp dword [dword_540F44], 0
	jz loc_470555
	xor eax, eax

loc_470550:
	call sub_46FF10

loc_470555:
	shl edx, 2
	cmp dword dword_522370[edx], 20h
	jz loc_470657
	add esp, 80h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470571:
	push edi
	lea esi, [esp+4]
	call sub_470730
	mov esi, edx
	shl esi, 7
	mov ecx, 20h
	lea edi, byte byte_522390[esi]
	lea esi, [esp+4]
	rep movsd
	pop edi

loc_470592:
	mov ebx, dword [dword_540D94]
	cmp ebx, 2
	jnz loc_4705ED
	mov ecx, edx
	mov eax, dword dword_522370[edx*4]
	shl ecx, 7
	mov bl, byte byte_522390[ecx+eax]
	sub bl, 40h
	shl bl, 2
	mov byte [dword_512A35+3], bl
	mov bl, byte byte_5223B0[ecx+eax]
	shl bl, 3
	mov byte [byte_512A39], bl
	mov bl, byte byte_5223D0[ecx+eax]
	shl bl, 3
	mov al, byte byte_5223F0[ecx+eax]
	mov byte [byte_512A3A], bl
	mov byte [byte_512A3B], al
	jmp loc_470513

loc_4705ED:
	cmp ebx, 3
	jnz loc_470513
	xor bh, bh
	mov byte [byte_512A39], bh
	mov byte [byte_512A3A], bh
	mov byte [byte_512A3B], bh
	mov byte [dword_512A35+3], bh
	jmp loc_470513

loc_470615:
	mov ebx, dword [dword_512208]
	test ebx, ebx
	jz loc_47053C
	cmp ebx, 1
	jnz loc_470555
	lea eax, 0[edx*4]
	add eax, edx
	cmp dword dword_5227B0[eax*4], 0
	jz loc_470555
	cmp dword [dword_540F44], 0
	jz loc_470555
	mov eax, edx
	jmp loc_470550

loc_470657:
	xor esi, esi
	mov dword dword_522370[edx], esi
	add esp, 80h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4704E0 endp

sub_470670: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ebx, eax
	call sub_45BAA0
	mov edx, dword [dword_512A35]
	sar edx, 18h
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	lea ecx, 0[ebx*4]
	mov esi, ebx
	shl esi, 7
	mov ebx, dword dword_522370[ecx]
	xor edx, edx
	add eax, 40h
	mov dl, byte [byte_512A39]
	mov byte byte_522390[esi+ebx], al
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	xor edx, edx
	mov dl, byte [byte_512A3A]
	mov byte byte_5223B0[esi+ebx], al
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	lea edx, [ebx+1]
	mov byte byte_5223D0[esi+ebx], al
	mov al, byte [byte_512A3B]
	mov dword dword_522370[ecx], edx
	mov byte byte_5223F0[esi+ebx], al
	cmp edx, 20h
	jz loc_470704
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470704:
	push edi
	sub esp, 80h
	xor edi, edi
	lea esi, byte byte_522390[esi]
	mov dword dword_522370[ecx], edi
	mov ecx, edx
	mov edi, esp
	rep movsd
	call sub_4708F0
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470670 endp

sub_470730: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 0A4h
	mov edx, esi
	mov esi, dword [dword_540D90]
	xor ecx, ecx
	lea edi, [esp+80h]
	mov cl, byte byte_522D8C[esi]
	add esi, byte_522D8C
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea eax, [esp+80h]
	mov ecx, 20h
	mov edi, esp
	call sub_470C50
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov ecx, dword [dword_540D90]
	mov al, [esp+80h]
	mov esi, byte_522D8C
	add ecx, eax
	lea edi, [esp+80h]
	mov dword [dword_540D90], ecx
	mov eax, ecx
	xor ecx, ecx
	add esi, eax
	mov cl, byte byte_522D8C[eax]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea eax, [esp+80h]
	mov ecx, 20h
	lea edi, [esp+20h]
	call sub_470C50
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov ebx, dword [dword_540D90]
	mov al, [esp+80h]
	mov esi, byte_522D8C
	add ebx, eax
	xor ecx, ecx
	lea edi, [esp+80h]
	mov cl, byte byte_522D8C[ebx]
	add esi, ebx
	mov dword [dword_540D90], ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea eax, [esp+80h]
	mov ecx, 20h
	lea edi, [esp+40h]
	call sub_470C50
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov esi, dword [dword_540D90]
	mov al, [esp+80h]
	add esi, eax
	xor ecx, ecx
	mov dword [dword_540D90], esi
	mov eax, esi
	mov cl, byte byte_522D8C[esi]
	mov esi, byte_522D8C
	lea edi, [esp+80h]
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea eax, [esp+80h]
	mov ecx, 20h
	lea edi, [esp+60h]
	call sub_470C50
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov edi, dword [dword_540D90]
	mov al, [esp+80h]
	mov ecx, 20h
	add edi, eax
	mov esi, esp
	mov dword [dword_540D90], edi
	mov edi, edx
	rep movsd
	mov eax, edx
	add esp, 0A4h
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470730 endp

sub_4708F0: ;SUBROUTINE
	push edi
	push ebp
	sub esp, 24h
	mov eax, dword [dword_540D8C]
	add eax, 80h
	cmp eax, 1E000h
	jl loc_470923
	mov eax, dword [dword_540F48]
	mov edi, 1
	mov dword [dword_4D955C], eax
	mov dword [dword_540D94], edi
	add esp, 24h
	pop ebp
	pop edi
	ret 80h

loc_470923:
	push esi
	push edx
	push ecx
	push ebx
	lea eax, [esp+40h]
	mov ecx, 21h
	lea edi, [esp+10h]
	call sub_470CC0
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, byte_522D8C
	lea esi, [esp+10h]
	xor ecx, ecx
	mov edx, dword [dword_540D8C]
	mov cl, [esp+10h]
	add edi, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov ecx, dword [dword_540D8C]
	mov al, [esp+10h]
	lea edi, [esp+10h]
	add ecx, eax
	lea eax, [esp+60h]
	mov dword [dword_540D8C], ecx
	call sub_470CC0
	mov ecx, 21h
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, byte_522D8C
	lea esi, [esp+10h]
	xor ecx, ecx
	mov ebx, dword [dword_540D8C]
	mov cl, [esp+10h]
	add edi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 21h
	xor eax, eax
	mov esi, dword [dword_540D8C]
	mov al, [esp+10h]
	lea edi, [esp+10h]
	add esi, eax
	lea eax, [esp+80h]
	mov dword [dword_540D8C], esi
	call sub_470CC0
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, byte_522D8C
	lea esi, [esp+10h]
	xor ecx, ecx
	mov ebp, dword [dword_540D8C]
	mov cl, [esp+10h]
	add edi, ebp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 21h
	xor eax, eax
	mov edx, dword [dword_540D8C]
	mov al, [esp+10h]
	lea edi, [esp+10h]
	add edx, eax
	lea eax, [esp+0A0h]
	mov dword [dword_540D8C], edx
	call sub_470CC0
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edi, byte_522D8C
	lea esi, [esp+10h]
	xor ecx, ecx
	mov ebx, dword [dword_540D8C]
	mov cl, [esp+10h]
	add edi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor eax, eax
	mov esi, dword [dword_540D8C]
	mov al, [esp+10h]
	add esi, eax
	mov dword [dword_540D8C], esi
	pop ebx
	pop ecx
	pop edx
	pop esi
	add esp, 24h
	pop ebp
	pop edi
	ret 80h
;sub_4708F0 endp

sub_470AC0: ;SUBROUTINE
	cmp dword [dword_540D94], 1
	jle loc_470ADC

loc_470AC9:
	cmp dword [dword_540D94], 1
	jle locret_470ADB
	cmp dword [dword_512208], 2
	jge loc_470AE3

locret_470ADB:
	ret

loc_470ADC:
	call sub_470470
	jmp loc_470AC9

loc_470AE3:
	push esi
	xor esi, esi
	mov dword [dword_512208], esi
	pop esi
	ret
;sub_470AC0 endp

sub_470AF0: ;SUBROUTINE
	push edx
	push esi
	push ebp
	mov edx, dword [dword_540D94]
	push ecx
	push ebx
	test edx, edx
	jnz loc_470B6C

loc_470AFF:
	xor eax, eax

loc_470B01:
	inc eax
	xor bl, bl
	mov byte (dword_522D88+3)[eax], bl
	cmp eax, 1E000h
	jl loc_470B01
	xor ebp, ebp
	mov dword [dword_540D90], ebp
	mov dword [dword_540D8C], ebp

loc_470B1F:
	xor eax, eax
	mov ebx, 1
	xor ecx, ecx

loc_470B28:
	add eax, 14h
	mov dword dword_5227A0[eax], ecx
	mov dword dword_5227A4[eax], ecx
	mov dword dword_5227A8[eax], ecx
	mov dword dword_5227AC[eax], ecx
	mov dword dword_52279C[eax], ebx
	cmp eax, 28h
	jnz loc_470B28
	xor eax, eax
	pop ebx
	pop ecx

loc_470B52:
	add eax, 4
	xor esi, esi
	mov dword dword_52236C[eax], esi
	cmp eax, 20h
	jnz loc_470B52
	mov dword [dword_540D94], edx
	pop ebp
	pop esi
	pop edx
	ret

loc_470B6C:
	cmp edx, 1
	jz loc_470AFF
	cmp edx, 2
	jl loc_470B1F
	xor ecx, ecx
	mov dword [dword_522790], ecx
	mov dword [dword_522798], ecx
	mov dword [dword_5227A0], ecx
	mov dword [dword_5227A4], ecx
	mov dword [dword_5227A8], ecx
	mov dword [dword_540D90], ecx
	cmp edx, 4
	jnz loc_470BBD
	cmp dword [dword_52279C], 0
	jz loc_470BB9
	mov eax, 1

loc_470BAF:
	mov dword [dword_5227A8], eax
	jmp loc_470B1F

loc_470BB9:
	xor eax, eax
	jmp loc_470BAF

loc_470BBD:
	mov ebx, 2
	mov dword [dword_5227AC], ecx
	mov dword [dword_52279C], ecx
	mov dword [dword_522794], ebx
	jmp loc_470B1F
;sub_470AF0 endp

sub_470BE0: ;SUBROUTINE
	sub esp, 2Ch
	mov eax, dword [dword_512214]
	mov dword [dword_540D94], eax
	cmp eax, 2
	jz loc_470BF6
	add esp, 2Ch
	ret

loc_470BF6:
	push edi
	push esi
	push ecx
	mov ecx, 0Bh
	lea edi, [esp+0Ch]
	mov esi, dword_512234
	rep movsd
	mov ecx, 16Ch
	mov edi, dword_5121F8
	mov esi, dword_5227D8
	call sub_470400
	rep movsd
	mov ecx, 0Bh
	lea esi, [esp+0Ch]
	mov edi, dword_512234
	rep movsd
	mov eax, dword [dword_522D88]
	xor ecx, ecx
	mov dword [dword_4D955C], eax
	mov dword [dword_540D90], ecx
	pop ecx
	pop esi
	pop edi
	add esp, 2Ch
	ret
;sub_470BE0 endp

sub_470C50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	xor ecx, ecx
	mov edx, 1
	mov cl, [ebp+0]
	xor eax, eax
	mov [esp], ecx
	cmp ecx, edx
	jle loc_470C99

loc_470C6E:
	lea esi, [edx+ebp]
	mov cl, [esi]
	cmp cl, 0FFh
	jnz loc_470CA8
	movzx edi, byte [esi+1]
	xor ecx, ecx
	test edi, edi
	jle loc_470C91

loc_470C82:
	inc eax
	mov bl, [esi+2]
	inc ecx
	mov byte (dword_52234C+3)[eax], bl
	cmp ecx, edi
	jl loc_470C82

loc_470C91:
	add edx, 3

loc_470C94:
	cmp edx, [esp]
	jl loc_470C6E

loc_470C99:
	mov eax, dword_522350
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470CA8:
	inc eax
	inc edx
	mov byte (dword_52234C+3)[eax], cl
	jmp loc_470C94
;sub_470C50 endp

sub_470CC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, eax
	mov eax, 1
	xor ecx, ecx

loc_470CCE:
	lea esi, [edi+ecx]
	xor edx, edx
	mov bl, [esi]

loc_470CD5:
	inc ecx
	mov bh, [esi+1]
	inc esi
	inc edx
	cmp bh, bl
	jnz loc_470CE4
	cmp ecx, 20h
	jl loc_470CD5

loc_470CE4:
	cmp edx, 3
	jl loc_470D1D
	add eax, 3
	mov dh, 0FFh
	mov byte (dword_540D94+3)[eax], bl
	mov byte (dword_540D94+2)[eax], dl
	mov byte (dword_540D94+1)[eax], dh

loc_470D00:
	cmp ecx, 20h
	jl loc_470CCE
	mov byte [byte_540D98], al
	xor bl, bl
	mov byte byte_540D98[eax], bl
	mov eax, byte_540D98
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_470D1D:
	xor esi, esi
	test edx, edx
	jle loc_470D00

loc_470D23:
	inc eax
	inc esi
	mov byte (dword_540D94+3)[eax], bl
	cmp esi, edx
	jl loc_470D23
	jmp loc_470D00
;sub_470CC0 endp

sub_470D40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ebx, 60000h
	mov eax, 10000h
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	xor ebp, ebp
	mov ebx, 30000h
	mov [esp+8], eax
	mov eax, 20000h
	mov [esp+0Ch], ebp
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov [esp+4], eax

loc_470D95:
	mov ebx, 130000h
	mov eax, [esp+0Ch]
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ebx, 60000h
	mov edx, eax
	mov esi, eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, esi
	mov [esp], eax
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edi, eax
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov dword dword_540E5C[ebp], eax
	mov eax, [esp]
	sub eax, edi
	add eax, esi
	mov ecx, [esp+8]
	sar eax, 1
	add eax, ecx
	mov dword dword_540EAC[ebp], eax
	mov eax, edi
	mov ebx, [esp]
	sar eax, 1
	mov edx, [esp+4]
	sub eax, ebx
	add eax, edx
	mov dword dword_540DBC[ebp], eax
	mov eax, ebx
	add ebp, 4
	sub eax, esi
	mov ebx, 60000h
	mov esi, eax
	mov eax, edi
	sar esi, 1
	cdq
	idiv ebx
	mov ecx, eax
	xor eax, eax
	shrd eax, edx, 10h
	sar edx, 10h
	idiv ebx
	shl ecx, 10h
	add eax, ecx
	mov ecx, [esp+8]
	mov edx, [esp+0Eh]
	sub esi, eax
	inc edx
	lea eax, [esi+ecx]
	mov [esp+0Eh], dx
	mov dword dword_540E08[ebp], eax
	cmp ebp, 50h
	jnz loc_470D95
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470D40 endp

sub_470E70: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov edx, [edx]
	mov eax, [eax]
	sub eax, edx
	test eax, eax
	jle loc_470EA1

loc_470E80:
	mov edx, eax
	mov eax, [esi+8]
	sub eax, [ecx+8]
	test eax, eax
	jle loc_470EA5

loc_470E8C:
	cmp edx, eax
	jle loc_470EA9
	sar eax, 2
	add eax, edx
	cmp eax, ebx
	jge loc_470EBA
	mov eax, 1
	pop esi
	pop ecx
	ret

loc_470EA1:
	neg eax
	jmp loc_470E80

loc_470EA5:
	neg eax
	jmp loc_470E8C

loc_470EA9:
	sar edx, 2
	add eax, edx
	cmp eax, ebx
	jge loc_470EBA
	mov eax, 1
	pop esi
	pop ecx
	ret

loc_470EBA:
	xor eax, eax
	pop esi
	pop ecx
	ret
;sub_470E70 endp

sub_470EC0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	sub esp, 100h
	mov esi, eax
	push ebx
	mov bl, 2Fh
	mov edx, [eax]
	xor ecx, ecx

loc_470ED2:
	xor eax, eax
	mov al, [edx]
	call sub_470F30
	test al, al
	jz loc_470EF7
	pop ebx

loc_470EE0:
	xor eax, eax
	mov al, [edx]
	call sub_470F30
	test al, al
	jz loc_470F0B
	inc ecx
	mov al, [edx]
	inc edx
	mov [esp+ecx-1], al
	jmp loc_470EE0

loc_470EF7:
	mov eax, edx
	mov bh, [eax]
	inc edx
	cmp bl, bh
	jnz loc_470ED2

loc_470F00:
	mov eax, edx
	mov bh, [eax]
	inc edx
	cmp bl, bh
	jnz loc_470F00
	jmp loc_470ED2

loc_470F0B:
	mov [esp+ecx], al
	mov eax, esp
	call unknown_libname_3 ; Watcom v9-*1.5 32bit NT runtime
	mov [esi], edx
	add esp, 100h
	pop esi
	pop edx
	pop ecx
	ret
;sub_470EC0 endp

sub_470F30: ;SUBROUTINE
	cmp al, 30h
	jb loc_470F38
	cmp al, 39h
	jbe loc_470F40

loc_470F38:
	cmp al, 2Dh
	jz loc_470F40
	cmp al, 2Bh
	jnz loc_470F43

loc_470F40:
	mov al, 1
	ret

loc_470F43:
	xor al, al
	ret
;sub_470F30 endp

sub_470F50: ;SUBROUTINE
	mov eax, dword [dword_540EFC]
	call sub_4848FC
	mov eax, dword [dword_540F00]
	jmp sub_4848FC
;sub_470F50 endp

sub_470F70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, aCNfs2seGameC_6 ; "c:\\nfs2se\\game\\common\\risk.c"
	mov ecx, 0D0h
	mov eax, aHeadZSortingBu ; "Head z sorting buffers"
	mov esi, 0D1h
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, 1360h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ebx, aCNfs2seGameC_6 ; "c:\\nfs2se\\game\\common\\risk.c"
	mov edx, 1360h
	mov dword [dword_540EFC], eax
	mov eax, aTailZSortingBu ; "Tail z sorting buffers"
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], esi
	call sub_484498
	mov dword [dword_540F00], eax
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_470F70 endp

sub_470FE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, dword [dword_540EFC]
	mov [esp+8], esi
	xor ecx, ecx
	xor eax, eax
	xor ebx, ebx

loc_470FF8:
	mov edx, ebp
	cmp dword [edx+eax], 0
	jnz loc_47102C

loc_471000:
	add eax, 4
	cmp eax, 1360h
	jnz loc_470FF8
	mov edi, [esp+8]
	mov esi, esp
	mov [esp+4], ecx
	mov [esp], ebx
	movsd
	movsd
	mov eax, [esp+8]
	mov dword [dword_540EFC], ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47102C:
	mov edx, dword [dword_540F00]
	add edx, eax
	mov esi, [edx]
	mov [esi], ebx
	test ecx, ecx
	jnz loc_47103E
	mov ecx, [edx]

loc_47103E:
	mov edx, ebp
	mov ebx, [edx+eax]
	jmp loc_471000
;sub_470FE0 endp

sub_471050: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, [esp+14h]
	mov esi, edx
	mov edx, ecx
	mov ecx, [esp+20h]
	sub edi, 0A0000h
	test ecx, ecx
	jz loc_4710AE
	mov ebp, [eax]
	test ebp, ebp
	jle loc_471128
	mov ecx, ebp

loc_471078:
	cmp ecx, [eax+8]
	jle loc_4710AE
	mov ecx, [esi]
	test ecx, ecx
	jle loc_471131

loc_471087:
	cmp ecx, [esi+8]
	jle loc_4710AE
	mov ecx, [ebx]
	test ecx, ecx
	jle loc_471138

loc_471096:
	cmp ecx, [ebx+8]
	jle loc_4710AE
	mov ecx, [edx]
	test ecx, ecx
	jle loc_47113F

loc_4710A5:
	cmp ecx, [edx+8]
	jg loc_47115B

loc_4710AE:
	mov ecx, [eax+0Ah]
	sar ecx, 10h
	mov eax, [eax+8]
	shl eax, cl
	mov ecx, [esi+0Ah]
	mov [esp], eax
	sar ecx, 10h
	mov eax, [esi+8]
	mov esi, [esp]
	shl eax, cl
	mov ecx, [ebx+0Ah]
	add esi, eax
	sar ecx, 10h
	mov eax, [ebx+8]
	shl eax, cl
	mov ecx, [edx+0Ah]
	sar ecx, 10h
	mov edx, [edx+8]
	add eax, esi
	shl edx, cl
	add eax, edx
	sar eax, 2
	sub eax, edi
	sar eax, 0Fh
	test eax, eax
	jl loc_47115B
	cmp eax, 4D7h
	jg loc_47115B
	mov edx, dword [dword_540EFC]
	lea ecx, 0[eax*4]
	add edx, ecx
	mov eax, [edx]
	test eax, eax
	jz loc_471146
	mov ecx, [esp+1Ch]
	mov [ecx], eax
	mov eax, [esp+18h]
	mov [edx], eax

loc_47111A:
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_471128:
	mov ecx, ebp
	neg ecx
	jmp loc_471078

loc_471131:
	neg ecx
	jmp loc_471087

loc_471138:
	neg ecx
	jmp loc_471096

loc_47113F:
	neg ecx
	jmp loc_4710A5

loc_471146:
	mov eax, [esp+18h]
	mov [edx], eax
	mov eax, dword [dword_540F00]
	add ecx, eax
	mov eax, [esp+1Ch]
	mov [ecx], eax
	jmp loc_47111A

loc_47115B:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_471050 endp

sub_471170: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, [esp+18h]
	mov esi, ecx
	mov ecx, [esp+14h]
	sub ecx, 0A0000h
	mov ebp, [eax]
	mov [esp+14h], ecx
	test ebp, ebp
	jle loc_471241
	mov ecx, ebp

loc_471196:
	cmp ecx, [eax+8]
	jle loc_4711CC
	mov ecx, [edx]
	test ecx, ecx
	jle loc_47124A

loc_4711A5:
	cmp ecx, [edx+8]
	jle loc_4711CC
	mov ecx, [ebx]
	test ecx, ecx
	jle loc_471251

loc_4711B4:
	cmp ecx, [ebx+8]
	jle loc_4711CC
	mov ecx, [esi]
	test ecx, ecx
	jle loc_471258

loc_4711C3:
	cmp ecx, [esi+8]
	jg loc_47126D

loc_4711CC:
	mov ecx, [eax+0Ah]
	sar ecx, 10h
	mov eax, [eax+8]
	shl eax, cl
	mov ecx, [edx+0Ah]
	mov [esp], eax
	sar ecx, 10h
	mov eax, [edx+8]
	mov edx, [esp]
	shl eax, cl
	mov ecx, [ebx+0Ah]
	add edx, eax
	sar ecx, 10h
	mov eax, [ebx+8]
	shl eax, cl
	mov ecx, [esi+0Ah]
	add edx, eax
	sar ecx, 10h
	mov eax, [esi+8]
	shl eax, cl
	add eax, edx
	mov edx, [esp+14h]
	sar eax, 2
	sub eax, edx
	sar eax, 0Fh
	test eax, eax
	jl loc_47126D
	cmp eax, 4D7h
	jg loc_47126D
	lea edx, 0[eax*4]
	mov eax, dword [dword_540EFC]
	add eax, edx
	mov ecx, [eax]
	test ecx, ecx
	jz loc_47125F
	mov [edi], ecx
	mov [eax], edi

loc_471233:
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_471241:
	mov ecx, ebp
	neg ecx
	jmp loc_471196

loc_47124A:
	neg ecx
	jmp loc_4711A5

loc_471251:
	neg ecx
	jmp loc_4711B4

loc_471258:
	neg ecx
	jmp loc_4711C3

loc_47125F:
	mov [edi], ecx
	mov [eax], edi
	mov eax, dword [dword_540F00]
	mov [edx+eax], edi
	jmp loc_471233

loc_47126D:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_471170 endp

sub_471280: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edx, [esp+2Ch]
	sub edx, 0A0000h
	mov eax, [esp+24h]
	mov [esp+2Ch], edx
	test eax, eax
	jz loc_4712F1

loc_47129F:
	mov ebp, [esp+30h]
	mov edx, [eax]
	mov ebx, [eax+0Ch]
	mov esi, [eax+10h]
	mov edi, [eax+14h]
	mov [esp+4], edx
	mov edx, [eax+18h]
	test ebp, ebp
	jz loc_47130D
	mov ecx, [ebx]
	test ecx, ecx
	jle loc_4712FD

loc_4712C3:
	cmp ecx, [ebx+8]
	jle loc_47130D
	mov ecx, [esi]
	test ecx, ecx
	jle loc_471301

loc_4712CE:
	cmp ecx, [esi+8]
	jle loc_47130D
	mov ecx, [edi]
	test ecx, ecx
	jle loc_471305

loc_4712D9:
	cmp ecx, [edi+8]
	jle loc_47130D
	mov ecx, [edx]
	test ecx, ecx
	jle loc_471309

loc_4712E4:
	cmp ecx, [edx+8]
	jle loc_47130D

loc_4712E9:
	mov eax, [esp+4]
	test eax, eax
	jnz loc_47129F

loc_4712F1:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 10h

loc_4712FD:
	neg ecx
	jmp loc_4712C3

loc_471301:
	neg ecx
	jmp loc_4712CE

loc_471305:
	neg ecx
	jmp loc_4712D9

loc_471309:
	neg ecx
	jmp loc_4712E4

loc_47130D:
	mov ecx, [ebx+0Ah]
	sar ecx, 10h
	mov ebx, [ebx+8]
	shl ebx, cl
	mov ecx, [esi+0Ah]
	mov [esp], ebx
	sar ecx, 10h
	mov ebx, [esi+8]
	shl ebx, cl
	add ebx, [esp]
	mov ecx, [edi+0Ah]
	mov esi, [edi+8]
	sar ecx, 10h
	shl esi, cl
	mov ecx, [edx+0Ah]
	sar ecx, 10h
	mov edx, [edx+8]
	add ebx, esi
	shl edx, cl
	add edx, ebx
	mov ebx, [esp+2Ch]
	sar edx, 2
	sub edx, ebx
	sar edx, 0Fh
	test edx, edx
	jl loc_4712E9
	cmp edx, 4D7h
	jg loc_4712E9
	lea ecx, 0[edx*4]
	mov edx, dword [dword_540EFC]
	add edx, ecx
	mov esi, [edx]
	test esi, esi
	jz loc_471379
	mov [eax], esi
	mov [edx], eax
	jmp loc_4712E9

loc_471379:
	mov [eax], esi
	mov [edx], eax
	mov edx, dword [dword_540F00]
	mov [ecx+edx], eax
	jmp loc_4712E9
;sub_471280 endp

sub_471390: ;SUBROUTINE
	push ebx
	push ecx
	lea ecx, 0[eax*4]
	mov eax, dword [dword_540EFC]
	add eax, ecx
	mov ebx, [eax]
	test ebx, ebx
	jz loc_4713AD
	mov [edx], ebx
	mov [eax], edx
	pop ecx
	pop ebx
	ret

loc_4713AD:
	mov [edx], ebx
	mov [eax], edx
	mov eax, dword [dword_540F00]
	mov [ecx+eax], edx
	pop ecx
	pop ebx
	ret
;sub_471390 endp

sub_4713C0: ;SUBROUTINE
	add eax, 0A0000h
	sar eax, 0Fh
	ret
;sub_4713C0 endp

sub_4713D0: ;SUBROUTINE
	push edx
	mov edx, 1360h
	mov eax, dword [dword_540EFC]
	call sub_48A01C
	pop edx
	ret
;sub_4713D0 endp

sub_4713F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	mov edx, [eax+4]
	xor ecx, ecx
	test edx, edx
	jle loc_471412
	mov edx, eax

loc_471401:
	cmp dword [edx+0Ch], 0
	jnz loc_471417
	inc ecx
	mov ebx, [esi+4]
	add edx, 10h
	cmp ecx, ebx
	jl loc_471401

loc_471412:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_471417:
	mov ebx, edx
	mov eax, [edx+10h]
	call dword [ebx+0Ch]
	inc ecx
	mov ebx, [esi+4]
	add edx, 10h
	cmp ecx, ebx
	jl loc_471401
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4713F0 endp

sub_471430: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 4
	mov [esp], eax
	mov ebp, ebx
	mov eax, edx
	mov edx, [esp]
	mov ecx, [edx+4]
	test ecx, ecx
	jz loc_4714CB
	push edi
	push esi
	xor ebx, ebx
	test ecx, ecx
	jle loc_4714AF

loc_471452:
	cmp eax, [edx+0Ch]
	jnz loc_4714A0
	cmp ebp, [edx+10h]
	jnz loc_4714A0
	mov eax, [esp+8]
	mov edx, ebx
	add eax, 8
	shl edx, 4
	mov ebp, ebx
	lea ebx, [edx+eax]
	add edx, 10h
	add edx, eax

loc_471472:
	mov eax, [esp+8]
	mov eax, [eax+4]
	dec eax
	cmp ebp, eax
	jge loc_4714AF
	mov ecx, 10h
	mov esi, edx
	mov edi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	inc ebp
	add ebx, 10h
	add edx, 10h
	jmp loc_471472

loc_4714A0:
	mov ecx, [esp+8]
	inc ebx
	mov edi, [ecx+4]
	add edx, 10h
	cmp ebx, edi
	jl loc_471452

loc_4714AF:
	mov eax, [esp+8]
	mov eax, [eax+4]
	mov edi, [esp+8]
	shl eax, 4
	add eax, edi
	mov dword [eax+8], 7FFEh
	dec dword [edi+4]
	pop esi
	pop edi

loc_4714CB:
	add esp, 4
	pop ebp
	pop ecx
	ret
;sub_471430 endp

sub_4714E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp+10h], eax
	mov [esp+4], edx
	mov [esp], ebx
	mov [esp+8], ecx
	mov ecx, [eax+4]
	xor edx, edx
	inc ecx
	mov [esp+0Ch], edx
	mov [eax+4], ecx
	test ecx, ecx
	jle loc_471528
	mov ebx, eax

loc_471508:
	mov eax, [esp+8]
	mov edi, [ebx+8]
	mov [esp+0Ch], edx
	cmp eax, edi
	jl loc_471550
	mov eax, [esp+10h]
	inc edx
	mov esi, [eax+4]
	add ebx, 10h
	cmp edx, esi
	jl loc_471508

loc_471528:
	mov edx, [esp+0Ch]
	mov ebx, [esp+10h]
	shl edx, 4
	add edx, ebx
	mov eax, [esp+8]
	mov [edx+8], eax
	mov eax, [esp+4]
	mov [edx+0Ch], eax
	mov eax, [esp]
	mov [edx+10h], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_471550:
	mov eax, [esp+10h]
	mov eax, [eax+4]
	dec eax
	mov [esp+14h], eax
	cmp edx, eax
	jge loc_471528
	mov ebx, [esp+14h]
	mov eax, [esp+10h]
	shl ebx, 4
	add eax, 8
	lea ebp, [ebx+eax]
	sub ebx, 10h
	add ebx, eax

loc_471576:
	mov ecx, 10h
	mov esi, ebx
	mov edi, ebp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+14h]
	sub ebp, 10h
	dec eax
	sub ebx, 10h
	mov [esp+14h], eax
	cmp edx, eax
	jl loc_471576
	jmp loc_471528
;sub_4714E0 endp

;	Attributes: thunk

sub_4715B0: ;SUBROUTINE
	jmp sub_4848FC
;sub_4715B0 endp

sub_4715C0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, edx
	mov dword [dword_4DB1D8], aCNfs2seGame_10 ; "c:\\nfs2se\\game\\common\\schedule.c"
	mov edx, esi
	mov ecx, 56h
	shl edx, 4
	xor ebx, ebx
	add edx, 18h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov dword [eax+4], 0
	mov [eax], esi
	mov ecx, eax
	mov ebx, [eax]
	xor edx, edx
	test ebx, ebx
	jle loc_471614

loc_4715FC:
	mov dword [eax+8], 7FFEh
	mov dword [eax+0Ch], 0
	inc edx
	mov esi, [ecx]
	add eax, 10h
	cmp edx, esi
	jl loc_4715FC

loc_471614:
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4715C0 endp

sub_471620: ;SUBROUTINE
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	mov edx, ebx
	mov ebx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov edx, eax
	cmp eax, 14h
	jl loc_471650
	mov edx, 13h

loc_471650:
	lea eax, 0[esi*4]
	add eax, esi
	shl eax, 2
	add edx, eax
	xor eax, eax
	mov al, byte byte_4D960C[edx]
	shl eax, 2
	mov ecx, [esp+0Ch]
	mov edx, dword dword_4D959C[eax]
	mov [ecx], edx
	mov ecx, [esp+14h]
	mov edx, dword dword_4D95D4[eax]
	mov [ecx], edx
	mov ecx, [esp+10h]
	mov edx, dword dword_4D95B8[eax]
	mov [ecx], edx
	cmp dword [dword_540F48], 0
	jnz loc_4716BB
	xor ecx, ecx

loc_471698:
	mov eax, dword [dword_540F48]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	imul ebx, edi
	add eax, ebx
	and eax, ecx
	cmp eax, ecx
	jnz loc_4716C3
	mov eax, 1
	pop edi
	pop esi
	ret 0Ch

loc_4716BB:
	mov ecx, dword dword_4D95F0[eax]
	jmp loc_471698

loc_4716C3:
	xor eax, eax
	pop edi
	pop esi
	ret 0Ch
;sub_471620 endp

sub_4716D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ah, 6
	mov esi, dword_512F4C
	lea edi, [esp+8]
	mov ebx, 14h
	mov edx, esp
	mov [esp], ah
	mov eax, dword [dword_5637F4]
	mov [esp+4], eax
	push edi

loc_4716F8:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_471710
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4716F8

loc_471710:
	pop edi
	xor eax, eax
	call sub_464070
	cmp word [word_513430], 0
	jnz loc_471739

loc_471722:
	call sub_463E70
	test eax, eax
	jnz loc_4717D2
	cmp word [word_513430], 0
	jz loc_471722

loc_471739:
	xor ecx, ecx
	mov dl, byte [byte_51345E]
	mov word [word_513430], cx
	cmp dl, 2
	jnz loc_47185A
	mov eax, [esp+4]
	mov edx, dword [dword_540F08]
	cmp eax, edx
	jle loc_4717D6
	mov edi, 1
	xor ebp, ebp
	xor eax, eax
	mov dword [dword_51220C], ebp

loc_47176E:
	mov word [dword_51340C], ax
	mov word [word_513458], di

loc_47177B:
	mov esi, dword_540F0C
	mov edi, dword_513378
	push edi

loc_471786:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47179E
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_471786

loc_47179E:
	pop edi
	mov esi, dword_512F4C
	mov edi, byte_5133C1
	push edi

loc_4717AA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4717C2
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4717AA

loc_4717C2:
	pop edi
	mov eax, 1

loc_4717C8:
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4717D2:
	xor eax, eax
	jmp loc_4717C8

loc_4717D6:
	jge loc_471805
	mov edi, 1
	mov esi, 1
	mov word [word_513458], cx
	mov dword [dword_51220C], edi
	mov word [dword_51340C], si
	mov eax, 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_471805:
	mov edx, dword_540F0C
	lea eax, [esp+8]
	call strcmp_
	test eax, eax
	jl loc_47182D
	jle loc_4717D2
	mov edi, 1
	xor ebx, ebx
	xor eax, eax
	mov dword [dword_51220C], ebx
	jmp loc_47176E

loc_47182D:
	mov esi, 1
	mov ebx, 1
	mov word [word_513458], cx
	mov dword [dword_51220C], esi
	mov word [dword_51340C], bx
	mov eax, 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47185A:
	cmp word [word_513458], 0
	jnz loc_47177B
	mov eax, 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4716D0 endp

sub_471880: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov edx, eax
	call sub_463EA0
	call sub_421430
	mov ebx, 2
	mov ah, byte [byte_51345E]
	mov word [dword_513408+2], bx
	cmp ah, 1
	jz loc_47192A
	mov eax, [edx]
	mov dword [dword_5130D4], eax

loc_4718B3:
	mov edx, dword [dword_4DABCC]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov dl, byte [byte_51345E]
	mov dword [dword_5130C4], eax
	cmp dl, 1
	jnz loc_47196F
	mov edx, dword [dword_4DABCC]
	mov ecx, 5

loc_4718E5:
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_5130C8], eax
	mov dword [dword_5130CC], eax
	mov ebx, 9
	mov ebp, 3
	mov eax, dword_5130A0
	xor esi, esi
	mov dword [dword_5130DC], ebx
	mov dword [dword_5130E0], esi
	mov dword [dword_5130E4], esi
	mov dword [dword_5130E8], ebp
	call sub_464010
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47192A:
	call sub_423B70
	mov cx, word [word_513458]
	mov dword [dword_5130D8], eax
	test cx, cx
	jz loc_471953
	xor edx, edx
	mov dword [dword_513100], edx
	mov dword [dword_513104], edx
	jmp loc_4718B3

loc_471953:
	mov eax, edx
	add eax, 4
	mov dword [dword_513104], eax
	mov eax, [edx+2Ch]
	add eax, 0A0h
	mov dword [dword_513100], eax
	jmp loc_4718B3

loc_47196F:
	mov edx, dword [dword_4DABCC]
	mov ecx, 0Ah
	jmp loc_4718E5
;sub_471880 endp

sub_471980: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 14h
	mov edi, dword_540F04
	mov esi, edx
	mov edx, 1
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov word [word_513430], dx
	pop edi
	pop esi
	pop ecx
	ret
;sub_471980 endp

sub_4719B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	xor ah, ah
	mov byte [byte_51345F], ah
	mov al, byte [byte_512DA9]
	xor ebx, ebx
	cmp al, 2
	jb loc_471A35
	ja loc_471A28
	mov byte [byte_51345E], 1

loc_4719D2:
	mov edx, 307h
	mov eax, 304h
	call sub_4023D0
	mov ecx, eax
	mov eax, esi
	call sub_471880
	mov al, byte [byte_51345E]
	cmp al, 1
	jnb loc_471A5D

loc_4719F3:
	test ebx, ebx
	jnz loc_471A99

loc_4719FB:
	test ebx, ebx
	jnz loc_471B63

loc_471A03:
	mov edx, 303h
	mov eax, ecx
	call sub_402340
	call sub_463E40
	call sub_483401
	test eax, eax
	jz loc_471B46

loc_471A21:
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_471A28:
	cmp al, 3
	jnz loc_471A35
	mov byte [byte_51345E], 2
	jmp loc_4719D2

loc_471A35:
	mov edx, aCNfs2seGameC_7 ; "c:\\nfs2se\\game\\common\\serial.c"
	mov ecx, 71h
	push aSerial_connect ; "Serial_Connect() called with invaild co"...
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	add esp, 4
	jmp loc_4719D2

loc_471A5D:
	jbe loc_471A7E
	cmp al, 2
	jnz loc_4719F3
	mov ebx, 7
	mov edx, 64h
	mov eax, dword_5130A0
	call sub_49FC80
	mov ebx, eax
	jmp loc_4719F3

loc_471A7E:
	mov ebx, 7
	mov edx, 64h
	mov eax, dword_5130A0
;	call sub_41FFE0
	mov ebx, eax
	jmp loc_4719F3

loc_471A99:
	mov eax, dword [dword_4D7708]
	call sub_489F48
	call sub_4716D0
	test eax, eax
	jz loc_471B30
	cmp word [word_513458], 0
	jnz loc_471AFC
	push edi
	xor esi, esi

loc_471ABD:
	mov di, word [word_513424]
	cmp si, di
	jnz loc_471AEC
	call sub_463E70
	test eax, eax
	jz loc_471B10
	mov edx, 1
	xor ebx, ebx
	mov word [word_51345A], dx
	mov word [word_51345C], dx
	call sub_48A2B4

loc_471AEC:
	mov eax, dword [dword_4D7708]
	call sub_489F60
	pop edi
	jmp loc_4719FB

loc_471AFC:
	mov eax, dword [dword_4D7708]
	call sub_489F60
	call sub_463C50
	jmp loc_4719FB

loc_471B10:
	cmp di, word [word_51345A]
	jz loc_471ABD
	call sub_48A2B4
	xor ebx, ebx
	mov eax, dword [dword_4D7708]
	call sub_489F60
	pop edi
	jmp loc_4719FB

loc_471B30:
	call sub_48A2B4
	mov eax, dword [dword_4D7708]
	call sub_489F60
	xor ebx, ebx
	jmp loc_471A03

loc_471B46:
	call sub_405910
	test eax, eax
	jnz loc_471A21
	call sub_483401
	test eax, eax
	jz loc_471B46
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_471B63:
	mov eax, ecx
	xor edx, edx
	call sub_402340
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4719B0 endp

sub_471B80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	xor eax, eax
	mov esi, dword [dword_511E58]
	call sub_483EB0
	xor ecx, ecx
	mov edx, dword [dword_511E58]
	add esi, 2710h
	test edx, edx
	jle loc_471D40
	mov eax, dword [dword_512A3C]
	xor ebx, ebx
	xor edx, edx
	mov dword [dword_540F4C], eax
	call sub_4824BC
	xor eax, eax
	call sub_422060
	cmp dword [dword_540F24], 0
	jnz loc_471D29

loc_471BDD:

;	push dword_511E50
;	call MyWait
;	add esp, 4
;	test eax, eax
;	jz asdzq1
;	mov eax, dword_511E50
;	call sub_489E5C

;	call sub_45BB50
;	call sub_45BAD0
;	asdzq1:
	xor eax, eax
	call sub_483EB0
	mov eax, dword [dword_4D9678]
	add eax, eax
	mov dword [dword_540F30], eax
	mov eax, dword [dword_511E58]
	mov edx, eax
	sub edx, esi
	mov esi, edx
	mov edx, dword [dword_540F30]
	sub edx, ecx
	cmp esi, edx
	jle loc_471C0D
	inc dword [dword_540F30]

loc_471C0D:
	mov esi, eax
	xor eax, eax
	mov edx, dword [dword_540F4C]
	mov dword [dword_540F3C], eax
	mov eax, dword [dword_512A3C]
	sub eax, edx
	mov ecx, dword [dword_540F30]
	cmp eax, 10h
	jg loc_471D4F

loc_471C32:
	mov ebp, 2
	mov edi, 1
	xor ebx, ebx

loc_471C3E:
	mov edx, dword [dword_512A3C]
	cmp edx, dword [dword_540F4C]
	jl loc_471C58
	cmp ebx, dword [dword_540F24]
	jz loc_471D5E

loc_471C58:
	cmp dword [dword_540F28], 0
	jnz loc_47210B
	cmp dword [dword_540F2C], 0
	jnz loc_47210B
	cmp dword [dword_540F24], 0
	jnz loc_47210B
	mov edx, dword [dword_540F30]
	cmp edx, dword [dword_540F34]
	jl loc_472029

loc_471C91:
	mov edi, 2
	mov ebp, 1
	xor ebx, ebx

loc_471C9D:
	mov edx, dword [dword_540F30]
	cmp edx, dword [dword_540F34]
	jl loc_471CBA
	mov eax, ebx
	call sub_472170
	test eax, eax
	jz loc_472038

loc_471CBA:
	cmp dword [dword_540F3C], 0
	jnz loc_471CCD
	mov eax, dword [dword_540F28]
	call sub_46F7A0

loc_471CCD:
	cmp dword [dword_512208], 4
	jnz loc_471CED
	cmp dword [dword_512214], 1
	jg loc_471CED
	cmp dword [dword_51220C], 0
	jnz loc_471CED
	call sub_47E570

loc_471CED:
	call sub_45B8F0
	test eax, eax
	jz loc_472115

loc_471CFA:
	cmp dword [dword_512214], 1
	jg loc_471D14
	mov ebx, 1
	mov dword [dword_4D9680], ebx
	mov dword [dword_4D967C], ebx

loc_471D14:
	mov eax, 1
	mov edi, 1
	call sub_4748F0
	mov dword [dword_540F24], edi

loc_471D29:
	cmp dword [dword_512214], 1
	jle loc_47214E
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_471D40:
	jmp ExitProcess1

loc_471D4F:
	mov eax, dword [dword_512A3C]
	mov dword [dword_540F4C], eax
	jmp loc_471C32

loc_471D5E:
	cmp ebp, dword [dword_512208]
	jle loc_471D6B
	call sub_46F760

loc_471D6B:
	cmp ebp, dword [dword_540D94]
	jnz loc_471DBA
	mov edx, dword [dword_540F28]
	cmp ebx, edx
	jnz loc_471DBA
	call sub_470110
	cmp dword [dword_5227A4], 4
	jnz loc_471DBA
	mov eax, dword [dword_522798]
	mov dword [dword_5227A4], edx
	mov dword [dword_540F24], eax
	cmp edx, eax
	jz loc_471F5B
	cmp edx, dword [dword_540F2C]
	jz loc_471F5B
	mov dword [dword_540F2C], edx
	call sub_4421B0

loc_471DBA:
	mov edx, dword [dword_540F24]
	cmp ebx, edx
	jnz loc_471DD5
	cmp edx, dword [dword_540F28]
	jz loc_471F90
	call sub_472220

loc_471DD5:
	cmp ebx, dword [dword_540F28]
	jnz loc_471FB5
	mov eax, 0Bh
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471DF6
	call sub_42A380

loc_471DF6:
	mov eax, 0Ah
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E0B
	call sub_42A3A0

loc_471E0B:
	mov eax, 0Dh
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E20
	call sub_446590

loc_471E20:
	mov eax, 0Eh
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E35
	call sub_42E650

loc_471E35:
	mov eax, 12h
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E4C
	mov eax, ebx
	call sub_459480

loc_471E4C:
	mov eax, 13h
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E63
	mov eax, edi
	call sub_459480

loc_471E63:
	mov eax, 11h
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E78
	call sub_459440

loc_471E78:
	mov eax, 16h
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471E8D
	call sub_442050

loc_471E8D:
	mov eax, 15h
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471EA2
	call sub_442010

loc_471EA2:
	mov eax, 9
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471ECB
	mov eax, 36h
	call sub_486550
	test eax, eax
	jz loc_471F9C

loc_471EC4:
	mov eax, edi

loc_471EC6:
	call sub_428910

loc_471ECB:
	mov eax, ebx
	call sub_477C40
	test eax, eax
	jz loc_471EE5
	cmp ebp, dword [dword_540D94]
	jle loc_471EE5
	mov eax, ebx
	call sub_44B2E0

loc_471EE5:
	mov eax, dword [dword_512208]
	cmp edi, eax
	jnz loc_471F06
	call sub_477C40
	test eax, eax
	jz loc_471F06
	cmp ebp, dword [dword_540D94]
	jle loc_471F06
	mov eax, edi
	call sub_44B2E0

loc_471F06:
	mov eax, 17h
	mov edx, ebx
	call sub_45B980
	mov dword [dword_5128C8], eax
	cmp edi, dword [dword_512208]
	jnz loc_471F30
	mov eax, 19h
	mov edx, ebx
	call sub_45B980
	mov dword [dword_5128CC], eax

loc_471F30:
	cmp ebp, dword [dword_512208]
	jle loc_472002

loc_471F3C:
	mov eax, 8
	mov edx, edi
	call sub_45B980
	test eax, eax
	jnz loc_472019
	inc dword [dword_540F4C]
	jmp loc_471C3E

loc_471F5B:
	mov edx, dword [dword_522790]
	cmp edx, dword [dword_540F2C]
	jz loc_471DBA
	mov dword [dword_540F2C], edx
	cmp ebx, edx
	jz loc_471F86
	call sub_44CB04
	call sub_442240
	jmp loc_471DBA

loc_471F86:
	call sub_442220
	jmp loc_471DBA

loc_471F90:
	mov eax, edi
	call sub_472170
	jmp loc_471DD5

loc_471F9C:
	mov eax, 2Ah
	call sub_486550
	test eax, eax
	jnz loc_471EC4
	mov eax, ebx
	jmp loc_471EC6

loc_471FB5:
	mov eax, 9
	mov edx, edi
	call sub_45B980
	test eax, eax
	jz loc_471FDA
	mov eax, 36h
	call sub_486550
	test eax, eax
	jz loc_471FF0

loc_471FD3:
	mov eax, edi

loc_471FD5:
	call sub_428910

loc_471FDA:
	cmp edi, dword [dword_512208]
	jl loc_471F30
	call sub_472350
	jmp loc_471F30

loc_471FF0:
	mov eax, 2Ah
	call sub_486550
	test eax, eax
	jnz loc_471FD3
	mov eax, ebx
	jmp loc_471FD5

loc_472002:
	cmp edi, dword [dword_512214]
	jl loc_471F3C
	inc dword [dword_540F4C]
	jmp loc_471C3E

loc_472019:
	inc dword [dword_540F4C]
	jmp loc_471C3E

loc_472029:
	mov dword [dword_540F3C], 1
	jmp loc_471C91

loc_472038:
	mov eax, dword [dword_540F34]
	test ebp, eax
	jnz loc_472048
	sar eax, 1
	call sub_473830

loc_472048:
	mov edx, dword [dword_540D94]
	mov dword [dword_4D965C], ebx
	cmp edi, edx
	jnz loc_4720D9
	cmp ebx, dword [dword_522794]
	jnz loc_472091
	mov eax, dword [dword_540F34]
	mov edx, eax
	mov dword [esp], 4
	sar edx, 1Fh
	idiv dword [esp]
	test edx, edx
	jnz loc_472091

loc_47207C:
	mov eax, dword [dword_540F34]
	call sub_472480
	inc dword [dword_540F34]
	jmp loc_471C9D

loc_472091:
	cmp ebp, dword [dword_522794]
	jnz loc_4720A9
	mov eax, dword [dword_540F34]
	mov edx, eax
	sar edx, 1Fh
	idiv edi
	test edx, edx
	jz loc_47207C

loc_4720A9:
	mov eax, dword [dword_522794]
	cmp edi, eax
	jz loc_47207C
	cmp eax, 3
	jnz loc_4720C3
	mov eax, dword [dword_540F34]
	call sub_472480
	jmp loc_47207C

loc_4720C3:
	mov dword [dword_4D965C], ebp
	call sub_44CB04
	inc dword [dword_540F34]
	jmp loc_471C9D

loc_4720D9:
	cmp edx, 4
	jnz loc_47207C
	call sub_442080
	call sub_463810
	mov edx, 2
	mov ebx, 1
	xor edi, edi
	mov dword [dword_540D94], edx
	mov dword [dword_540F3C], ebx
	mov dword [dword_4D9678], edi
	jmp loc_471CCD

loc_47210B:
	call sub_44CB04
	jmp loc_471CBA

loc_472115:
	cmp word [word_51345A], 0
	jnz loc_471CFA
	cmp dword [dword_540D94], 3
	jnz loc_47213C
	cmp dword [dword_540F48], 240h
	jg loc_471CFA

loc_47213C:
	cmp dword [dword_540F24], 0
	jz loc_471BDD
	jmp loc_471D29

loc_47214E:
	mov eax, 1
	mov dword [dword_4D9680], eax
	mov dword [dword_4D967C], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_471B80 endp

sub_472170: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	cmp dword [dword_540F20], 0
	jnz loc_4721CB
	mov ecx, dword [dword_540F48]
	cmp ecx, 20h
	jl loc_4721CB
	cmp ecx, 140h
	jge loc_472198
	cmp dword [dword_512214], 1
	jle loc_4721CB

loc_472198:
	test eax, eax
	jz loc_4721BE
	mov edx, 1
	mov eax, 6
	call sub_45B980
	mov edx, 1
	mov ecx, eax
	mov eax, 7
	call sub_45B980
	or eax, ecx

loc_4721BE:
	call sub_473260
	test eax, eax
	jnz loc_4721D1
	pop ebp
	pop edx
	pop ecx
	ret

loc_4721CB:
	xor eax, eax
	pop ebp
	pop edx
	pop ecx
	ret

loc_4721D1:
	xor edx, edx
	xor eax, eax
	call sub_428830
	cmp dword [dword_512208], 2
	jl loc_472211
	mov eax, dword [dword_511E5C]
	add eax, 20h

loc_4721EB:
	mov dword [dword_540F40], eax
	mov ebp, 1
	call sub_442240
	mov dword [dword_4D967C], ebp
	mov dword [dword_540F28], ebp
	call sub_4792A0
	mov eax, ebp
	pop ebp
	pop edx
	pop ecx
	ret

loc_472211:
	mov eax, dword [dword_511E5C]
	add eax, 10h
	jmp loc_4721EB
;sub_472170 endp

sub_472220: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov edx, dword [dword_511E5C]
	cmp edx, dword [dword_540F40]
	jl loc_47223B
	mov ecx, dword [dword_4D966C]
	test ecx, ecx
	jz loc_47223F

loc_47223B:
	pop esi
	pop edx
	pop ecx
	ret

loc_47223F:
	call sub_45FA80
	call sub_472EE0
	cmp eax, 1
	jz loc_4722B4
	cmp eax, 2
	jz loc_4722E5
	cmp eax, 3
	jz loc_472312
	cmp eax, 4
	jnz loc_47223B
	call sub_4421B0
	push 2
	call sub_497680
	push 0
	push 4
	call sub_497738
	call sub_49769C
	call sub_4976B8
	call sub_479260
	call sub_446310
	call sub_4762E0
	call sub_4635D0
	call sub_48561C
	call sub_463890
	jmp ExitProcess1

loc_4722B4:
	call sub_4287F0
	call sub_4594F0
	cmp dword [dword_540F2C], 0
	jnz loc_4722CC
	call sub_442220

loc_4722CC:
	push ebx
	xor ebx, ebx
	mov dword [dword_4D967C], ebx
	mov dword [dword_540F28], ebx
	call sub_479280
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret

loc_4722E5:
	call sub_4287F0
	call sub_4594F0
	call sub_442160
	mov eax, 1
	mov dword [dword_540F28], ecx
	mov dword [dword_540F24], eax
	mov dword [dword_540F20], eax
	call sub_479260
	pop esi
	pop edx
	pop ecx
	ret

loc_472312:
	call sub_4287F0
	call sub_4594F0
	call sub_4421B0
	mov esi, 1
	mov dword [dword_540F28], ecx
	mov dword [dword_540F20], ecx
	mov dword [dword_540F24], esi
	call sub_479260
	mov eax, esi
	call sub_4748F0
	pop esi
	pop edx
	pop ecx
	ret
;sub_472220 endp

sub_472350: ;SUBROUTINE
	push edx
	cmp dword [dword_4D966C], 0
	jnz loc_4723F2

loc_47235E:
	cmp dword [dword_4D966C], 0
	jnz loc_472391
	mov edx, 1
	mov eax, 0Bh
	call sub_45B980
	test eax, eax
	jz loc_472391
	cmp dword [dword_4D966C], 0
	jnz loc_47242B

loc_472387:
	mov eax, 1

loc_47238C:
	mov dword [dword_4D966C], eax

loc_472391:
	mov edx, 1
	mov eax, 0Dh
	call sub_45B980
	test eax, eax
	jz loc_4723CD
	cmp dword [dword_4D5EAC], 0
	jnz loc_472432
	mov eax, 1

loc_4723B6:
	mov dword [dword_4D5EAC], eax
	test eax, eax
	jz loc_472436
	mov eax, dword [dword_4D5EB0]
	mov dword [dword_540F38], eax

loc_4723CD:
	mov eax, 0Ah
	xor edx, edx
	call sub_45B980
	test eax, eax
	jz loc_472442
	push ebx
	mov ebx, 0FFFFFFFFh
	mov dword [dword_540F38], ebx
	mov dword [dword_4D5EB0], ebx
	pop ebx

loc_4723F0:
	pop edx
	ret

loc_4723F2:
	mov edx, 1
	mov eax, 6
	call sub_45B980
	test eax, eax
	jz loc_472413

loc_472405:
	cmp dword [dword_4D966C], 0
	jnz loc_47242B
	jmp loc_472387

loc_472413:
	mov edx, 1
	mov eax, 0Bh
	call sub_45B980
	test eax, eax
	jnz loc_472405
	jmp loc_47235E

loc_47242B:
	xor eax, eax
	jmp loc_47238C

loc_472432:
	xor eax, eax
	jmp loc_4723B6

loc_472436:
	mov eax, dword [dword_540F38]
	mov dword [dword_4D5EB0], eax
	jmp loc_4723CD

loc_472442:
	mov eax, 0Eh
	xor edx, edx
	call sub_45B980
	test eax, eax
	jnz loc_472462
	cmp dword [dword_4D5EAC], 0
	jz loc_4723F0
	mov dword [dword_4D5EB0], eax
	pop edx
	ret

loc_472462:
	mov edx, 1
	mov dword [dword_540F38], edx
	mov dword [dword_4D5EB0], edx
	pop edx
	ret
;sub_472350 endp

sub_472480: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	cmp dword [dword_540F44], 0
	jnz loc_4724DE
	mov ecx, dword [dword_540F48]
	cmp ecx, 200h
	jl loc_472536
	mov esi, 1
	mov ch, byte [byte_4D5A0C]
	mov dword [dword_540F44], esi
	test ch, ch
	jz loc_4724DE
	mov ecx, 7Fh
	mov edi, dword [dword_4D96B0]
	push 40h
	test edi, edi
	jz loc_47252F
	xor ebx, ebx

loc_4724C8:
	mov edx, 3
	mov eax, dword [dword_50B434]
	call sub_442280
	xor al, al
	mov byte [byte_4D5A0C], al

loc_4724DE:
	call sub_453F20
	call sub_474EA0
	test byte [dword_540F48], 1
	jnz loc_472507
	xor eax, eax
	call sub_483EB0
	mov eax, dword [dword_540F54]
	call sub_4713F0
	call sub_474820

loc_472507:
	mov eax, dword [dword_540F50]
	call sub_4713F0
	inc dword [dword_540F48]
	test byte [dword_540F48], 1
	jz loc_472610
	call sub_474EE0
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47252F:
	mov ebx, 40h
	jmp loc_4724C8

loc_472536:
	cmp ecx, 1C0h
	jl loc_47257C
	cmp byte [byte_4D5A0C], 1
	jz loc_4724DE
	mov ecx, 7Fh
	mov ebx, dword [dword_4D96B0]
	push 40h
	test ebx, ebx
	jz loc_472575
	xor ebx, ebx

loc_47255A:
	mov edx, 2
	mov eax, dword [dword_50B434]
	call sub_442280
	mov byte [byte_4D5A0C], 1
	jmp loc_4724DE

loc_472575:
	mov ebx, 40h
	jmp loc_47255A

loc_47257C:
	cmp ecx, 180h
	jl loc_4725C6
	cmp byte [byte_4D5A0C], 2
	jz loc_4724DE
	mov ecx, 7Fh
	mov edx, dword [dword_4D96B0]
	push 40h
	test edx, edx
	jz loc_4725BF
	xor ebx, ebx

loc_4725A4:
	mov edx, 1
	mov eax, dword [dword_50B434]
	call sub_442280
	mov byte [byte_4D5A0C], 2
	jmp loc_4724DE

loc_4725BF:
	mov ebx, 40h
	jmp loc_4725A4

loc_4725C6:
	cmp ecx, 140h
	jl loc_4724DE
	cmp byte [byte_4D5A0C], 3
	jz loc_4724DE
	mov ecx, 7Fh
	mov eax, dword [dword_4D96B0]
	push 40h
	test eax, eax
	jz loc_472609
	xor ebx, ebx

loc_4725F1:
	mov eax, dword [dword_50B434]
	xor edx, edx
	call sub_442280
	mov byte [byte_4D5A0C], 3
	jmp loc_4724DE

loc_472609:
	mov ebx, 40h
	jmp loc_4725F1

loc_472610:
	call sub_441DD0
	call sub_474EE0
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_472480 endp

sub_472620: ;SUBROUTINE
	push ebx
	push edx
	call sub_479220
	call sub_473B50
	mov edx, sub_44CB04
	mov eax, dword [dword_540F50]
	xor ebx, ebx
	call sub_471430
	call sub_43CB40
	call sub_44F4E0
	call sub_46E070
	call sub_476EF0
	mov eax, dword [dword_540F54]
	call sub_4715B0
	mov eax, dword [dword_540F50]
	call sub_4715B0
	call sub_459500
	call sub_472690
	pop edx
	pop ebx
	ret
;sub_472620 endp

sub_472690: ;SUBROUTINE
	call sub_42A370
	mov dword [dword_512240], eax
	mov byte [byte_512ECE], al
	call sub_42A390
	mov dword [dword_512244], eax
	mov byte [byte_512ECF], al
	mov al, byte [dword_512248]
	mov byte [byte_512ED1], al
	call sub_4466A0
	mov dword [dword_51224C], eax
	mov byte [byte_512ED0], al
	mov eax, dword [dword_4EEBE8]
	mov dword [dword_512250], eax
	mov byte [byte_512ED2], al
	jmp sub_408BF0
;sub_472690 endp

sub_4726E0: ;SUBROUTINE
	push edx
	xor edx, edx
	mov eax, dword [dword_512224]
	mov dword [dword_540F24], edx
	mov dword [dword_540F28], edx
	mov dword [dword_540F2C], edx
	mov dword [dword_540F30], edx
	mov dword [dword_540F34], edx
	mov dword [dword_540F44], edx
	mov dword [dword_540F48], edx
	call sub_45B2E0
	call sub_43CA90
	call sub_46E100
	call sub_44FC40
	call sub_43C930
	call sub_46F6E0
	call sub_479240
	mov eax, dword [dword_512A3C]
	mov dword [dword_540F4C], eax
	pop edx
	ret
;sub_4726E0 endp

sub_472750: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, 1
	mov eax, aSc32 ; "Sc32"
	xor ecx, ecx
	xor ebx, ebx
	mov dword [dword_540F20], edx
	mov dword [dword_540F24], ecx
	mov dword [dword_540F28], ecx
	mov dword [dword_540F2C], ecx
	mov dword [dword_540F30], ecx
	mov dword [dword_540F34], ecx
	mov dword [dword_540F44], ecx
	mov edx, 90h
	mov dword [dword_540F48], ecx
	call sub_4715C0
	mov edx, 90h
	mov dword [dword_540F54], eax
	mov eax, aSc64 ; "Sc64"
	mov ecx, 8
	call sub_4715C0
	mov edx, sub_44F1E0
	mov dword [dword_540F50], eax
	mov eax, dword [dword_540F54]
	call sub_4714E0
	mov eax, dword [dword_512224]
	call sub_45B2E0
	call sub_43CAA0
	call sub_46E0D0
	call sub_476F10
	call sub_44F6D0
	call sub_4790E0
	mov eax, 8
	mov ecx, 64h
	call sub_47D4C0
	mov eax, 9
	mov edx, sub_44CB04
	call sub_47D4C0
	call sub_43CA70
	mov eax, 0Ah
	xor ebx, ebx
	call sub_47D4C0
	call sub_446390
	mov eax, dword [dword_540F50]
	call sub_4714E0
	call sub_44F670
	pop edx
	pop ecx
	pop ebx
	ret
;sub_472750 endp

sub_472950: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp dword [dword_4D9670], 0
	jz loc_472998
	cmp word [word_513458], 0
	jnz loc_47299A
	cmp byte [byte_51345F], 1
	jnz loc_47299A
	mov ecx, dword [dword_512264]
	dec ecx
	test ecx, ecx
	jl loc_472998
	lea ebx, 0[ecx*4]
	inc edx
	add ebx, edx

loc_472984:
	mov edx, ebx
	mov eax, ecx
	call sub_473A14
	dec ecx
	sub ebx, 4
	test ecx, ecx
	jge loc_472984

loc_472998:
	pop ecx
	ret

loc_47299A:
	movsx eax, byte [edx+1]
	call sub_473650
	mov bl, byte [byte_51345F]
	add edx, 2
	cmp bl, 1
	jz loc_4729C6
	cmp dword [dword_51220C], 0
	jnz loc_4729E9
	mov eax, 1
	call sub_473A14
	pop ecx
	ret

loc_4729C6:
	mov eax, dword [dword_540F6C]
	call sub_489F48
	mov eax, ecx
	call sub_463E00
	cwde
	call sub_4738E0
	mov eax, dword [dword_540F6C]
	call sub_489F60
	pop ecx
	ret

loc_4729E9:
	xor eax, eax
	call sub_473A14
	pop ecx
	ret
;sub_472950 endp

sub_472A00: ;SUBROUTINE
	push ebx
	push edx
	push esi
	sub esp, 24h
	mov esi, eax
	cmp byte [byte_51345F], 1
	jnz loc_472A6E
	cmp word [word_513458], 0
	jz loc_472A6E
	mov bl, 5
	mov eax, dword [dword_540F6C]
	mov edx, esi
	mov [esp], bl
	call sub_489F48
	mov eax, dword [dword_51220C]
	call sub_473A14
	test eax, eax
	jnz loc_472A4B
	mov eax, dword [dword_540F6C]
	call sub_489F60

loc_472A44:
	add esp, 24h
	pop esi
	pop edx
	pop ebx
	ret

loc_472A4B:
	lea eax, [esp+1]
	mov ebx, 21h
	call sub_4736E0
	mov eax, dword [dword_540F6C]
	mov edx, esp
	call sub_489F60
	xor eax, eax
	call sub_464070
	jmp loc_472A44

loc_472A6E:
	call sub_473670
	mov dl, byte [byte_51345F]
	mov byte [byte_540F79], al
	test dl, dl
	jnz loc_472A92
	mov eax, dword [dword_51220C]
	mov edx, esi
	call sub_473A14
	test eax, eax
	jz loc_472A44

loc_472A92:
	push edi
	push ecx
	mov dh, 5
	mov ecx, 4
	mov edi, word_540F7A
	mov ebx, 6
	mov byte [byte_540F78], dh
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edx, byte_540F78
	xor eax, eax
	call sub_464070
	pop ecx
	pop edi
	add esp, 24h
	pop esi
	pop edx
	pop ebx
	ret
;sub_472A00 endp

sub_472AD0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov esi, edx
	mov edi, dword [dword_540F5C]
	mov ecx, dword [dword_540F58]
	lea edx, [ebx-1]
	inc esi
	add edi, ecx
	mov ecx, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	add dword [dword_540F58], edx
	pop edi
	pop esi
	pop ecx
	ret
;sub_472AD0 endp

sub_472B10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 94h
	mov ecx, 2Ch
	mov esi, dword_512234
	lea edi, [esp+64h]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	xor edx, edx
	mov ecx, dword_5121F8
	mov eax, 2D00h
	mov dword [dword_540F58], edx
	mov edx, 3
	mov dword [dword_540F5C], ecx
	call sub_463930
	cmp word [word_513458], 0
	jz loc_472C4A
	mov ebx, dword [dword_4D76BC]
	test ebx, ebx
	jz loc_472B90
	mov ecx, 12h
	mov edi, dword_512704
	mov esi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi

loc_472B90:
	mov esi, dword [dword_4D76B8]
	test esi, esi
	jnz loc_472C25

loc_472B9E:
	mov ecx, 48h
	mov esi, byte_512E84
	mov edi, word_512716
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ah, 4
	mov edi, 5B0h
	mov [esp], ah
	mov [esp+90h], edi

loc_472BCE:
	mov ebp, 62h

loc_472BD3:
	lea edi, [esp+1]
	mov esi, dword [dword_540F5C]
	mov ecx, ebp
	mov edx, esp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	lea ebx, [ebp+1]
	xor eax, eax
	call sub_464070
	mov eax, dword [dword_540F5C]
	mov edx, [esp+90h]
	add eax, ebp
	sub edx, 62h
	mov dword [dword_540F5C], eax
	mov [esp+90h], edx
	test edx, edx
	jle loc_472C4A
	cmp edx, 62h
	jge loc_472BCE
	mov ebp, edx
	jmp loc_472BD3

loc_472C25:
	mov ecx, 10h
	mov edi, dword_5126F4
	add esi, 2B0h
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	jmp loc_472B9E

loc_472C4A:
	mov edx, 4
	mov eax, 0F00h
	mov ecx, 2Ch
	call sub_463930
	mov edx, dword [dword_513408+2]
	lea esi, [esp+64h]
	sar edx, 10h
	mov edi, dword_512234
	mov dword [dword_51220C], edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov esi, dword [dword_4D76BC]
	test esi, esi
	jz loc_472CAC
	mov ecx, 12h
	mov edi, esi
	mov esi, dword_512704
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi

loc_472CAC:
	mov edi, dword [dword_4D76B8]
	test edi, edi
	jnz loc_472CE2

loc_472CB6:
	mov ecx, 48h
	mov esi, word_512716
	mov edi, byte_512E84
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	add esp, 94h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_472CE2:
	mov ecx, 10h
	mov esi, dword_5126F4
	add edi, 2B0h
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	jmp loc_472CB6
;sub_472B10 endp

sub_472D10: ;SUBROUTINE
	sub esp, 28h
	cmp dword [dword_512214], 1
	jle loc_472D20
	add esp, 28h
	ret

loc_472D20:
	push edi
	push esi
	push edx
	push ecx
	push ebx
	call sub_428E80
	push 2
	call sub_497680
	push 0
	push 4
	call sub_497738
	call sub_49769C
	mov eax, 1
	lea edi, [esp+14h]
	call sub_459970
	mov esi, eax
	push edi

loc_472D53:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_472D6B
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_472D53

loc_472D6B:
	pop edi
	mov esi, a____0 ; "..."
	lea edi, [esp+14h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_472D7E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_472D96
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_472D7E

loc_472D96:
	pop edi
	lea edi, [esp+14h]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	shr ecx, 1
	lea eax, 0[ecx*4]
	add eax, ecx
	mov edx, 140h
	add eax, eax
	mov ebx, 0E6h
	sub edx, eax
	lea eax, [esp+14h]
	call sub_47BDC0
	call sub_4976B8
	push 2
	call sub_497680
	call sub_49769C
	call sub_428F20
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	add esp, 28h
	ret
;sub_472D10 endp

off_472DF0: dd loc_472E16
	dd loc_472E61 ; jump table for switch statement
	dd loc_472E82
	dd loc_472E97

sub_472E00: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov al, [edx+1]
	cmp al, 3
	ja loc_472E27
	and eax, 0FFh ; switch 4 cases
	jmp off_472DF0[eax*4] ; switch jump

loc_472E16:
	cmp dword [dword_51220C], 0 ; jumptable 00472E0F case 0
	jz loc_472E29
	mov eax, [edx+4]
	mov dword [dword_540F64], eax

loc_472E27:
	pop ecx
	ret

loc_472E29:
	mov eax, dword [dword_540F6C]
	call sub_489F48
	cmp dword [dword_540F64], 0
	jnz loc_472E55
	call sub_4736D0
	mov ebx, 8
	mov dword [dword_540F64], eax
	mov [edx+4], eax
	xor eax, eax
	call sub_464070

loc_472E55:
	mov eax, dword [dword_540F6C]
	call sub_489F60
	pop ecx
	ret

loc_472E61:
	cmp word [word_513458], 0 ; jumptable 00472E0F case 1
	jz loc_472E77
	mov dword [dword_540F60], 1
	pop ecx
	ret

loc_472E77:
	mov word [dword_513428+2], 12h
	pop ecx
	ret

loc_472E82:
	cmp word [word_513458], 0 ; jumptable 00472E0F case 2
	jnz loc_472E27
	mov word [dword_513428+2], 15h
	pop ecx
	ret

loc_472E97:
	cmp word [word_513458], 0 ; jumptable 00472E0F case 3
	jnz loc_472EAC
	mov word [dword_513428+2], 16h
	pop ecx
	ret

loc_472EAC:
	mov eax, dword [dword_4D770C]
	call sub_489F48
	mov eax, ecx
	call sub_463E00
	cwde
	mov word (dword_513436+2)[eax*2], 16h
	mov eax, dword [dword_4D770C]
	call sub_489F60
	pop ecx
	ret
;sub_472E00 endp

sub_472EE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ebx, eax
	mov edx, dword [dword_512208]
	test edx, edx
	jz loc_472F03
	cmp edx, 1
	jz loc_472F03
	cmp dword [dword_512214], 1
	jle loc_472F11

loc_472F03:
	mov edx, ebx
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_472F11:
	mov eax, dword [dword_5637F4]
	mov esi, eax
	call sub_482030
	mov ecx, eax
	and ecx, 0FFFFh
	cmp ecx, 0FFh
	jge loc_472F36
	mov eax, ecx
	call toupper_
	mov ecx, eax

loc_472F36:
	test ecx, ecx
	jz loc_472FEC
	cmp ecx, dword [dword_540F74]
	jz loc_472FE0

loc_472F4A:
	mov edx, 1
	mov eax, ecx
	call sub_420FD0
	cmp ecx, dword [dword_540F74]
	jz loc_472FFE
	add esi, 0Fh

loc_472F65:
	mov dword [dword_540F70], esi
	mov dword [dword_540F74], ecx

loc_472F71:
	cmp word [word_513458], 0
	jz loc_473122
	mov ecx, 1
	cmp ecx, dword [dword_512264]
	jge loc_473061
	mov edx, 2

loc_472F95:
	cmp dword [dword_540F60], 0
	jz loc_473006

loc_472F9E:
	mov edx, 12h
	mov eax, 0A00h
	call sub_463930
	xor edi, edi
	mov edx, 1
	mov dword [dword_4D9680], edi
	mov dword [dword_540F60], edi
	call sub_420FC0
	mov eax, 0A00h
	call sub_463930
	mov edx, 1
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_472FE0:
	cmp esi, dword [dword_540F70]
	jg loc_472F4A

loc_472FEC:
	xor eax, eax
	mov dword [dword_540F74], ecx
	mov dword [dword_540F70], eax
	jmp loc_472F71

loc_472FFE:
	add esi, 5
	jmp loc_472F65

loc_473006:
	mov ax, word (dword_513436+2)[edx]
	test ax, ax
	jbe loc_47304F
	cmp ax, 16h
	jnz loc_473084
	cmp byte [byte_51345F], 1
	jnz loc_47307D
	mov eax, ecx
	call sub_47E470

loc_473028:
	mov eax, dword [dword_4D770C]
	call sub_489F48
	cmp word (dword_513436+2)[edx], 16h
	jnz loc_473045
	xor edi, edi
	mov word (dword_513436+2)[edx], di

loc_473045:
	mov eax, dword [dword_4D770C]
	call sub_489F60

loc_47304F:
	mov ebp, dword [dword_512264]
	inc ecx
	add edx, 2
	cmp ecx, ebp
	jl loc_472F95

loc_473061:
	cmp ebx, 2
	jnb loc_4730A3
	cmp ebx, 1
	jz loc_472F9E

loc_47306F:
	xor edx, edx
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47307D:
	mov ebx, 3
	jmp loc_473028

loc_473084:
	mov eax, dword [dword_4D770C]
	call sub_489F48
	cmp word (dword_513436+2)[edx], 16h
	jz loc_473045
	xor esi, esi
	mov word (dword_513436+2)[edx], si
	jmp loc_473045

loc_4730A3:
	jbe loc_4730FD
	cmp ebx, 3
	jnz loc_47306F
	mov edx, dword [dword_511E40]
	xor eax, eax
	test edx, edx
	jle loc_4730D8
	xor edx, edx

loc_4730B8:
	mov ecx, dword dword_511D08[edx]
	inc eax
	mov dword [ecx+280h], 1
	mov ecx, dword [dword_511E40]
	add edx, 4
	cmp eax, ecx
	jl loc_4730B8

loc_4730D8:
	mov edx, 16h
	mov eax, 0A00h
	call sub_463930
	call sub_420FC0
	mov edx, 3
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4730FD:
	mov edx, 15h
	mov eax, 0A00h
	call sub_463930
	call sub_420FC0
	mov edx, 2
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_473122:
	mov ax, word [dword_513428+2]
	cmp ax, 15h
	jnb loc_47316B
	cmp ax, 12h
	jz loc_4731C5

loc_473138:
	cmp ebx, 1
	jnz loc_473201
	mov bl, 7
	lea edx, [esp+8]
	mov [esp+8], bl
	mov bh, 1
	xor eax, eax
	mov [esp+9], bh
	mov ebx, 8
	call sub_464070

loc_47315D:
	xor edx, edx
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47316B:
	jbe loc_4730FD
	cmp ax, 16h
	jnz loc_473138
	mov ecx, dword [dword_511E40]
	xor eax, eax
	test ecx, ecx
	jle loc_4731A0
	xor edx, edx

loc_473181:
	mov edi, dword [dword_511E40]
	mov ecx, dword dword_511D08[edx]
	add edx, 4
	inc eax
	mov dword [ecx+280h], 1
	cmp eax, edi
	jl loc_473181
	nop

loc_4731A0:
	mov edx, 16h
	mov eax, 0A00h
	call sub_463930
	call sub_420FC0
	mov edx, 3
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4731C5:
	mov edx, 12h
	mov eax, 0A00h
	call sub_463930
	xor ebx, ebx
	mov edx, 1
	mov dword [dword_4D9680], ebx
	call sub_420FC0
	mov eax, 0A00h
	call sub_463930
	mov edx, 1
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_473201:
	cmp ebx, 3
	jnz loc_47315D
	mov ah, 7
	mov dl, 3
	mov ebx, 8
	mov [esp], ah
	mov [esp+1], dl
	mov edx, esp
	xor eax, eax
	call sub_464070
	cmp byte [byte_51345F], 1
	jnz loc_47315D
	mov ebx, 1
	mov edx, 3
	mov word [word_51345C], bx
	mov word [word_51345A], bx
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_472EE0 endp

sub_473260: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push ebp
	sub esp, 8
	mov edx, dword [dword_512208]
	test edx, edx
	jz loc_4732EC
	cmp edx, 1
	jz loc_4732EC
	cmp dword [dword_512214], 1
	jg loc_4732EC
	test eax, eax
	jz loc_4732E1
	mov esi, dword [dword_540F64]
	test esi, esi
	jnz loc_4732E1
	cmp dword [dword_4D9674], 0
	jnz loc_4732E1
	mov edx, dword [dword_540F68]
	add edx, 20h
	call sub_4736C0
	cmp edx, eax
	jge loc_4732E1
	mov ah, 7
	xor dl, dl
	mov ebp, dword [dword_51220C]
	mov [esp+1], dl
	mov [esp], ah
	test ebp, ebp
	jz loc_4732F4
	mov ebx, 8
	mov edx, esp
	xor eax, eax
	mov [esp+4], esi
	call sub_464070
	mov dword [dword_4D9674], 1

loc_4732E1:
	cmp dword [dword_540F64], 0
	jnz loc_473326

loc_4732EA:
	xor eax, eax

loc_4732EC:
	add esp, 8
	pop ebp
	pop esi
	pop edx
	pop ebx
	ret

loc_4732F4:
	mov ebx, 8
	mov eax, dword [dword_540F6C]
	mov edx, esp
	call sub_489F48
	call sub_4736D0
	mov dword [dword_540F64], eax
	mov [esp+4], eax
	xor eax, eax
	call sub_464070
	mov eax, dword [dword_540F6C]
	call sub_489F60
	jmp loc_4732E1

loc_473326:
	call sub_4736C0
	cmp eax, dword [dword_540F64]
	jnz loc_4732EA
	push edi
	mov esi, 1
	mov edx, 11h
	mov eax, 0F00h
	xor edi, edi
	mov dword [dword_4D967C], esi
	call sub_463930
	mov eax, dword [dword_540F64]
	mov dword [dword_4D9674], edi
	mov dword [dword_540F60], edi
	xor edx, edx
	mov dword [dword_540F68], eax
	mov dword [dword_540F64], edi
	pop edi

loc_47336F:
	call sub_486E5C
	test eax, eax
	jz loc_473381
	mov eax, edx
	call sub_483EB0
	jmp loc_47336F

loc_473381:
	mov eax, 1
	add esp, 8
	pop ebp
	pop esi
	pop edx
	pop ebx
	ret
;sub_473260 endp

sub_473390: ;SUBROUTINE
	push edx
	mov edx, 10h
	mov eax, 3C00h
	call sub_463930
	xor edx, edx
	mov eax, dword [dword_540F6C]
	mov dword [dword_4D9670], edx
	call sub_489F74
	cmp word [word_51345A], 0
	jnz loc_4733BE
	pop edx
	ret

loc_4733BE:
	call sub_48A2B4
	pop edx
	ret
;sub_473390 endp

sub_4733D0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, 20h
	xor edx, edx
	mov dword [dword_540F68], ecx
	mov dword [dword_540F64], edx
	pop edx
	pop ecx
	ret
;sub_4733D0 endp

sub_4733F0: ;SUBROUTINE
	push edx
	call sub_489EF8
	mov edx, 1
	mov dword [dword_540F6C], eax
	mov dword [dword_4D9670], edx
	pop edx
	ret
;sub_4733F0 endp

off_473410: dd loc_47343F
	dd loc_473541 ; jump table for switch statement
	dd loc_473465
	dd loc_473465
	dd loc_473465

sub_473424: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_512208]
	cmp edx, 4 ; switch 5 cases
	ja loc_473551 ; jumptable 00473438 default case
	jmp off_473410[edx*4] ; switch jump

loc_47343F:
	mov ebp, dword [dword_5423CC] ; jumptable 00473438 case 0
	mov eax, dword [dword_5423A4]
	mov edx, dword [dword_5423A8]
	add eax, ebp
	cmp eax, edx
	jg loc_473549

loc_47345A:
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_473465:
	cmp byte [byte_51345F], 1 ; jumptable 00473438 cases 2-4
	jnz loc_4734C8
	cmp dword [dword_51220C], 0
	jnz loc_4734AE
	cmp dword [dword_4D9680], 0
	jz loc_473484
	test eax, eax
	jnz loc_47345A

loc_473484:
	test eax, eax
	jnz loc_473497
	mov ebx, dword [dword_5423C8]
	mov al, byte [byte_5423D0]
	cmp eax, ebx
	jg loc_4734B6

loc_473497:
	mov esi, dword [dword_5423CC]
	mov eax, dword [dword_5423A4]
	mov edi, dword [dword_5423A8]
	add eax, esi
	cmp eax, edi
	jle loc_47345A

loc_4734AE:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_4734B6:
	sar eax, 1
	mov byte [byte_5423D0], al
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_4734C8:
	mov ebx, dword [dword_51220C]
	cmp eax, ebx
	jnz loc_4734AE
	xor edx, edx
	mov dl, byte [byte_5423D0]
	cmp edx, 8
	jg loc_47352E
	lea edx, 0[ebx*4]
	mov eax, dword [dword_5423A4]
	mov esi, dword [dword_5423C8]
	mov edi, dword dword_5423A8[edx]
	add eax, esi
	cmp eax, edi
	jle loc_47345A
	mov eax, dword [dword_5423AC]
	mov edx, dword [dword_5423A8]
	cmp edx, eax
	jle loc_473512
	mov edx, eax

loc_473512:
	mov ebp, dword [dword_5423CC]
	mov eax, dword [dword_5423A4]
	add eax, ebp
	cmp edx, eax
	jl loc_4734AE
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_47352E:
	xor dh, dh
	mov eax, 1
	mov byte [byte_5423D0], dh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_473541:
	test eax, eax ; jumptable 00473438 case 1
	jz loc_47343F ; jumptable 00473438 case 0

loc_473549:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret

loc_473551:
	push ecx ; jumptable 00473438 default case
	mov edx, aCNfs2seGame_16 ; "c:\\nfs2se\\game\\common\\simqueue.c"
	mov ecx, 3AEh
	push aGamesetup_gdat ; "GameSetup_gData.commMode invalid in Sim"...
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	add esp, 4
	xor eax, eax
	pop ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ebx
	ret
;sub_473424 endp

off_473580: dd loc_4735B3
	dd loc_4735B3 ; jump table for switch statement
	dd loc_473615
	dd loc_47362E
	dd loc_4735C7

sub_473594: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_5423CC]
	mov ecx, dword [dword_5423C8]
	mov eax, dword [dword_512208]
	cmp eax, 4 ; switch 5 cases
	ja loc_4735B8 ; jumptable 004735AC default case
	jmp off_473580[eax*4] ; switch jump

loc_4735B3:
	mov edx, 4 ; jumptable 004735AC cases 0,1

loc_4735B8:
	mov dword [dword_5423C8], ecx ; jumptable 004735AC default case
	mov dword [dword_5423CC], edx
	pop edx
	pop ecx
	ret

loc_4735C7:
	cmp byte [byte_51345F], 1 ; jumptable 004735AC case 4
	jnz loc_4735F6
	push ebx
	mov ebx, 2
	mov ecx, 10h
	mov edx, 8
	mov dword [byte_540FA0], ebx
	pop ebx
	mov dword [dword_5423C8], ecx
	mov dword [dword_5423CC], edx
	pop edx
	pop ecx
	ret

loc_4735F6:
	mov edx, 10h
	mov ecx, 20h
	mov dword [byte_540FA0], edx
	mov dword [dword_5423C8], ecx
	mov dword [dword_5423CC], edx
	pop edx
	pop ecx
	ret

loc_473615:
	mov ecx, 18h ; jumptable 004735AC case 2
	mov edx, 8
	mov dword [dword_5423C8], ecx
	mov dword [dword_5423CC], edx
	pop edx
	pop ecx
	ret

loc_47362E:
	mov edx, 4 ; jumptable 004735AC case 3
	mov ecx, edx
	mov dword [dword_5423C8], ecx
	mov dword [dword_5423CC], edx
	pop edx
	pop ecx
	ret
;sub_473594 endp

sub_473650: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dl, byte [byte_5423D0]
	cmp eax, edx
	jle loc_473664
	mov byte [byte_5423D0], al
	pop edx
	ret

loc_473664:
	mov eax, edx
	mov byte [byte_5423D0], al
	pop edx
	ret
;sub_473650 endp

sub_473670: ;SUBROUTINE
	push edx
	cmp byte [byte_51345F], 1
	jz loc_47369E
	cmp dword [dword_51220C], 0
	jnz loc_4736AF
	mov eax, 1

loc_473688:
	mov edx, dword [dword_51220C]
	mov al, byte dword_5423A8[eax*4]
	sub al, byte dword_5423A8[edx*4]
	pop edx
	ret

loc_47369E:
	push ebx
	mov bh, byte [dword_5423A4]
	mov al, byte [dword_5423A8]
	sub al, bh
	pop ebx
	pop edx
	ret

loc_4736AF:
	xor eax, eax
	jmp loc_473688
;sub_473670 endp

sub_4736C0: ;SUBROUTINE
	mov eax, dword [dword_5423A4]
	ret
;sub_4736C0 endp

sub_4736D0: ;SUBROUTINE
	mov eax, dword [dword_5423A8]
	add eax, 2
	ret
;sub_4736D0 endp

sub_4736E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov eax, dword [dword_5423A8]
	dec eax
	mov edx, dword [dword_512264]
	and eax, 7Fh
	xor ebx, ebx
	mov [esp+4], eax
	test edx, edx
	jle loc_4737D7
	mov edx, [esp+4]
	dec edx
	shl eax, 2
	mov [esp], edx
	mov edx, [esp+4]
	mov [esp+8], ecx
	mov [esp+0Ch], edx
	mov edx, eax
	mov ebp, eax
	add edx, byte_540FA4

loc_473729:
	mov eax, [esp+0Ch]
	cmp byte byte_541FA4[eax], 0
	jnz loc_47378C
	inc dword dword_5423A8[ebx*4]
	mov eax, [esp+0Ch]
	mov ch, 1
	mov esi, [esp+4]
	mov byte byte_541FA4[eax], ch
	mov ecx, 4
	test esi, esi
	jz loc_4737E7
	mov eax, [esp]

loc_47375D:
	and eax, 7Fh
	lea esi, 0[eax*4]
	mov eax, ebx
	shl eax, 9
	add eax, byte_540FA4
	mov edi, edx
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	and byte byte_540FA7[ebp], 0BCh

loc_47378C:
	mov ecx, 4
	mov edi, [esp+8]
	mov esi, edx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	add ebp, 200h
	inc ebx
	mov ecx, [esp+0Ch]
	lea esi, [edi+4]
	add edx, 200h
	mov edi, dword [dword_512264]
	add ecx, 80h
	mov [esp+8], esi
	mov [esp+0Ch], ecx
	cmp ebx, edi
	jl loc_473729

loc_4737D7:
	inc dword [dword_4D9678]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4737E7:
	mov eax, 7Fh
	jmp loc_47375D
;sub_4736E0 endp

sub_473800: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov esi, dword_540F80
	mov ecx, 4
	shl eax, 2
	mov edi, edx
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	pop edi
	pop esi
	pop ecx
	ret
;sub_473800 endp

sub_473830: ;SUBROUTINE
	push edx
	push ebp
	sub esp, 4
	and eax, 7Fh
	mov edx, dword [dword_512214]
	mov [esp], eax
	cmp edx, 1
	jg loc_4738D2
	push edi
	push esi
	push ecx
	push ebx
	mov ecx, dword [dword_512264]
	xor ebp, ebp
	test ecx, ecx
	jle loc_47389C
	lea edx, 0[eax*4]
	mov ebx, dword_540F80
	add edx, byte_540FA4

loc_47386C:
	mov ecx, 4
	mov esi, edx
	mov edi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	inc ebp
	mov esi, dword [dword_512264]
	add ebx, 4
	add edx, 200h
	cmp ebp, esi
	jl loc_47386C

loc_47389C:
	mov edi, dword [dword_512264]
	xor ebx, ebx
	test edi, edi
	jle loc_4738C8
	mov edx, [esp+10h]
	mov ebp, dword [dword_512264]

loc_4738B2:
	add edx, 80h
	xor ah, ah
	inc ebx
	mov byte byte_541F24[edx], ah
	cmp ebx, ebp
	jl loc_4738B2

loc_4738C8:
	inc dword [dword_5423A4]
	pop ebx
	pop ecx
	pop esi
	pop edi

loc_4738D2:
	add esp, 4
	pop ebp
	pop edx
	ret
;sub_473830 endp

sub_4738E0: ;SUBROUTINE
	push ebp
	sub esp, 8
	mov [esp], eax
	mov [esp+4], edx
	lea edx, 0[eax*4]
	mov ebp, dword dword_5423A8[edx]
	call sub_473424
	and ebp, 7Fh
	test eax, eax
	jnz loc_4739ED
	mov eax, [esp]
	shl eax, 7
	mov al, byte byte_541FA4[eax+ebp]
	test al, al
	jnz loc_4739ED
	push edi
	push esi
	push ecx
	push ebx
	mov ebx, dword [byte_540FA0]
	mov ecx, dword [dword_5423A8]
	mov esi, dword dword_5423A8[edx]
	add ecx, ebx
	cmp ecx, esi
	jge loc_4739A1
	mov ebx, [esp+10h]
	lea edi, [esi-1]
	mov ebp, edx
	mov dword dword_5423A8[edx], edi
	shl ebx, 9
	mov ecx, dword [dword_5423A8]
	add ebx, byte_540FA4
	cmp ecx, edi
	jge loc_473998

loc_47395B:
	lea edx, [ecx+1]
	and ecx, 7Fh
	mov esi, edx
	lea edi, 0[ecx*4]
	and esi, 7Fh
	mov ecx, 4
	shl esi, 2
	add edi, ebx
	add esi, ebx
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov esi, dword dword_5423A8[ebp]
	mov ecx, edx
	cmp edx, esi
	jl loc_47395B

loc_473998:
	mov ebp, dword dword_5423A8[ebp]
	and ebp, 7Fh

loc_4739A1:
	mov eax, [esp+10h]
	mov ecx, 4
	shl eax, 9
	lea edi, 0[ebp*4]
	add eax, byte_540FA4
	mov esi, [esp+14h]
	add edi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+10h]
	shl eax, 7
	mov byte byte_541FA4[eax+ebp], 1
	mov eax, [esp+10h]
	inc dword dword_5423A8[eax*4]
	pop ebx
	pop ecx
	pop esi
	pop edi

loc_4739ED:
	add esp, 8
	pop ebp
	ret
;sub_4738E0 endp

off_473A00: dd loc_473AD5
	dd loc_473B36 ; jump table for switch statement
	dd loc_473AE8
	dd loc_473AE8
	dd loc_473AE8

sub_473A14: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov esi, edx
	lea edx, 0[eax*4]
	mov edi, dword dword_5423A8[edx]
	mov cx, word [word_51345A]
	and edi, 7Fh
	test cx, cx
	jz loc_473A4D
	mov eax, 1
	xor ebx, ebx
	mov dword [dword_4D967C], eax
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_473A4D:
	call sub_473424
	test eax, eax
	jnz loc_473A82
	mov ebp, ebx
	shl ebp, 7
	add ebp, edi
	cmp byte byte_541FA4[ebp], 0
	jz loc_473A8C
	cmp dword [dword_512208], 1
	jle loc_473A82
	mov esi, 1
	mov word [word_51345C], si
	mov word [word_51345A], si

loc_473A82:
	xor ebx, ebx
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_473A8C:
	mov eax, ebx
	shl eax, 9
	shl edi, 2
	add eax, byte_540FA4
	mov ecx, 4
	add edi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov byte byte_541FA4[ebp], 1
	mov ecx, dword dword_5423A8[edx]
	inc ecx
	mov eax, dword [dword_512208]
	mov dword dword_5423A8[edx], ecx
	cmp eax, 4 ; switch 5 cases
	ja loc_473ADB ; jumptable 00473ACE default case
	jmp off_473A00[eax*4] ; switch jump

loc_473AD5:
	inc dword [dword_4D9678] ; jumptable 00473ACE case 0

loc_473ADB:
	mov ebx, 1 ; jumptable 00473ACE default case
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_473AE8:
	cmp byte [byte_51345F], 1 ; jumptable 00473ACE cases 2-4
	jnz loc_473B11
	test ebx, ebx
	jnz loc_473ADB ; jumptable 00473ACE default case
	cmp dword [dword_51220C], 0
	jz loc_473ADB ; jumptable 00473ACE default case
	inc dword [dword_4D9678]
	mov ebx, 1
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_473B11:
	mov edx, dword [dword_5423AC]
	mov eax, dword [dword_5423A8]
	cmp eax, edx
	jge loc_473B22
	mov edx, eax

loc_473B22:
	dec edx
	mov dword [dword_4D9678], edx
	mov ebx, 1
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_473B36:
	test ebx, ebx ; jumptable 00473ACE case 1
	jz loc_473ADB ; jumptable 00473ACE default case
	inc dword [dword_4D9678]
	mov ebx, 1
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_473A14 endp

sub_473B50: ;SUBROUTINE
	cmp dword [dword_512214], 1
	jle loc_473B5A
	ret

loc_473B5A:
	push ecx
	mov ecx, 1
	mov dword [dword_4D967C], ecx
	mov dword [dword_4D9680], ecx
	call sub_473390
	pop ecx
	ret
;sub_473B50 endp

sub_473B80: ;SUBROUTINE
	push ebp
	sub esp, 0Ch
	cmp dword [dword_512214], 1
	jg loc_473C0C
	push edi
	push esi
	push edx
	push ecx
	push ebx
	mov ecx, 1
	xor esi, esi
	mov dword [dword_4D9680], ecx
	mov [esp+1Ch], esi
	mov [esp+14h], esi
	mov [esp+18h], esi
	mov dword [dword_4D967C], ecx
	mov bh, 1

loc_473BB7:
	mov ebp, [esp+1Ch]
	mov esi, [esp+14h]
	xor edx, edx
	mov edi, ebp
	xor bl, bl

loc_473BC5:
	lea eax, [edx+edi]
	mov byte byte_541FA4[eax], bh
	lea eax, 0[edx*4]
	add eax, esi
	lea ecx, [edx+ebp]

loc_473BDA:
	add eax, 4
	mov byte byte_540FA1[eax], bl
	mov byte byte_540FA2[eax], bl
	inc ecx
	mov byte byte_540FA3[eax], bl
	inc edx
	mov byte byte_540FA0[eax], bl
	cmp edx, 80h
	jge loc_473C18
	cmp edx, 4
	jl loc_473BC5
	mov byte byte_541FA4[ecx], bl
	jmp loc_473BDA

loc_473C0C:
	xor eax, eax
	mov dword [dword_4D9678], eax
	add esp, 0Ch
	pop ebp
	ret

loc_473C18:
	mov ecx, [esp+1Ch]
	mov esi, [esp+14h]
	mov eax, [esp+18h]
	mov edx, 4
	add ecx, 80h
	add esi, 200h
	lea edi, [eax+edx]
	mov dword dword_5423A8[eax], edx
	mov [esp+1Ch], ecx
	mov [esp+14h], esi
	mov [esp+18h], edi
	cmp edi, 20h
	jnz loc_473BB7
	mov edx, 3
	xor eax, eax
	xor ecx, ecx
	mov dword [dword_5423A4], eax
	mov dword [dword_4D9678], edx
	call sub_4733D0
	xor ah, ah
	mov edx, 0Fh
	mov byte [byte_5423D0], ah
	mov eax, 1E00h
	mov dword [dword_4D9680], ecx
	call sub_463930
	mov dword [dword_4D967C], ecx
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	add esp, 0Ch
	pop ebp
	ret
;sub_473B80 endp

sub_473CA0: ;SUBROUTINE
	cmp dword [dword_512214], 1
	jle loc_473CAA
	ret

loc_473CAA:
	push ecx
	mov ecx, 1
	mov dword [dword_4D967C], ecx
	mov dword [dword_4D9680], ecx
	call sub_4733F0
	call sub_473594
	pop ecx
	ret
;sub_473CA0 endp

sub_473CE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov eax, a_dat ; ".dat"
	mov ebx, 1
	xor edx, edx
	call sub_473E20
	call sub_475F80
	mov edx, eax
	call sub_475F00
	mov ecx, dword [dword_5126F0]
	cmp eax, ecx
	jle loc_473D0E
	mov eax, ecx

loc_473D0E:
	mov dword [dword_5126F0], eax
	xor ebx, ebx
	test eax, eax
	jle loc_473D90
	mov esi, 10h
	xor ecx, ecx

loc_473D20:
	mov eax, edx
	call sub_475F00
	mov dword dword_5423F0[ecx], eax
	xor edi, edi
	mov dword dword_5423F4[ecx], esi
	mov dword dword_5423F8[ecx], edi
	mov eax, edx
	mov dword dword_5423FC[ecx], edi
	call sub_475F00
	mov dword dword_542430[ecx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_542434[ecx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_542438[ecx], eax
	mov eax, edx
	call sub_475F00
	mov dword dword_54243C[ecx], eax
	mov eax, edx
	inc ebx
	call sub_475F00
	mov dword dword_542440[ecx], eax
	mov eax, dword [dword_5126F0]
	add ecx, 54h
	cmp ebx, eax
	jl loc_473D20
	nop

loc_473D90:
	mov eax, edx
	call sub_475F50
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_473CE0 endp

sub_473DA0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov eax, [eax]
	mov edx, dword [dword_512260]
	and eax, 1Fh
	sub eax, edx
	mov edx, eax
	shl eax, 2
	add eax, edx
	shl eax, 2
	add eax, edx
	mov edx, dword dword_542430[eax*4]
	mov [ecx+14h], edx
	mov edx, dword dword_542434[eax*4]
	mov [ecx+9Ch], edx
	mov edx, dword dword_542438[eax*4]
	mov [ecx+0A0h], edx
	mov edx, dword dword_54243C[eax*4]
	mov byte [ecx+8Ch], 1
	mov [ecx+0A4h], edx
	mov edx, dword dword_542440[eax*4]
	lea eax, [ecx+0C4h]
	call sub_49E780
	mov eax, ecx
	call sub_4628B0
	pop edx
	pop ecx
	ret
;sub_473DA0 endp

sub_473E20: ;SUBROUTINE
	push ecx
	push edx
	push eax
	mov edx, dword [dword_51221C]
	push edx
	mov ecx, dword [dword_513488]
	push ecx
	push aSsm02dS ; "%sSm%02d%s"
	push dword_542594
	call sprintf_
	mov eax, dword_542594
	add esp, 14h
	pop edx
	pop ecx
	ret
;sub_473E20 endp

sub_473E60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov ecx, eax
	cmp byte [eax+8Ch], 0
	jnz loc_473EDB
	cmp word [ecx+14Ch], 0
	jbe loc_473EE0
	cmp dword [ecx+15Ch], 8000h
	jl loc_473F97

loc_473E89:
	mov edx, dword [dword_512204]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov edx, [ecx+160h]
	cmp edx, dword dword_511D48[eax*4]
	jg loc_47406E
	cmp dword [ecx+578h], 0
	jle loc_473ECE

loc_473EB9:
	mov ebp, [ecx+578h]
	dec ebp
	mov [ecx+578h], ebp
	test ebp, ebp
	jle loc_474084

loc_473ECE:
	cmp dword [ecx+578h], 0
	jle loc_474095

loc_473EDB:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_473EE0:
	mov ebx, [ecx+0A8h]
	imul edx, ebx, 0E6h
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul edx, [ecx+0ACh], 0E6h
	mov [ecx+0A8h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul edx, [ecx+0B0h], 0E6h
	mov [ecx+0ACh], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul edx, [ecx+0E8h], 0E6h
	mov [ecx+0B0h], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0E8h], eax
	mov eax, [ecx+0ECh]
	imul edx, eax, 0E6h
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	imul edx, [ecx+0F0h], 0E6h
	mov [ecx+0ECh], eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0F0h], eax
	jmp loc_473E89

loc_473F97:
	mov eax, [ecx+0A8h]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0A8h], eax
	mov eax, [ecx+0ACh]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0ACh], eax
	mov eax, [ecx+0B0h]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0B0h], eax
	mov eax, [ecx+0E8h]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0E8h], eax
	mov eax, [ecx+0ECh]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0ECh], eax
	mov eax, [ecx+0F0h]
	shl eax, 3
	mov edx, eax
	shl eax, 5
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 8
	sbb eax, edx
	sar eax, 8
	mov [ecx+0F0h], eax
	jmp loc_473E89

loc_47406E:
	mov eax, ecx
	call sub_4540A0
	mov dword [ecx+578h], 1C0h
	jmp loc_473EB9

loc_474084:
	mov eax, ecx
	call sub_4741C0
	mov dword [ecx+578h], 0

loc_474095:
	mov ebx, [ecx+184h]
	test ebx, ebx
	jz loc_4740B1
	cmp ebx, 0Eh
	jz loc_4740B1
	cmp dword [ecx+17Ch], 0
	jz loc_473EDB

loc_4740B1:
	mov dword [ecx+578h], 1C0h
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_473E60 endp

sub_4740C0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp byte [eax+8Ch], 0
	jz loc_4740CE
	pop ecx
	ret

loc_4740CE:
	push edx
	push ebx
	mov edx, [ecx+0C4h]
	mov eax, [ecx+0A8h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0C8h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0CCh]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D0h]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B0h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0D4h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0D8h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0DCh]
	add ebx, eax
	mov eax, [ecx+0A8h]
	mov [ecx+2B4h], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0E0h]
	mov eax, [ecx+0ACh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+0E4h]
	add ebx, eax
	mov eax, [ecx+0B0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	mov [ecx+2B8h], ebx
	pop ebx
	pop edx
	pop ecx
	ret
;sub_4740C0 endp

sub_4741C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ecx, eax
	mov dword [eax+0A8h], 0
	mov dword [eax+0ACh], 0
	mov dword [eax+0B0h], 0
	lea edi, [eax+13Ch]
	mov dword [eax+0E8h], 0
	lea esi, [eax+124h]
	mov dword [eax+0ECh], 0
	add eax, 9Ch
	mov ebx, edi
	mov edx, esi
	mov dword [eax+54h], 0
	call sub_462EF0
	mov ebx, edi
	mov edx, esi
	mov [ecx+0A0h], eax
	mov eax, ecx
	call sub_462C70
	mov [ecx+15Ch], eax
	mov edx, [ecx+0A0h]
	mov dword [ecx+15Ch], 0
	sub edx, eax
	mov [ecx+0A0h], edx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4741C0 endp

sub_474260: ;SUBROUTINE
	push edx
	mov eax, dword [dword_540F48]
	xor edx, edx
	mov dword [dword_5450FC], eax
	mov dword [dword_5450F4], edx
	mov dword [dword_5450F8], edx
	pop edx
	ret
;sub_474260 endp

sub_474280: ;SUBROUTINE
	push edx
	mov eax, dword [dword_540F48]
	xor edx, edx
	mov dword [dword_5450FC], eax
	mov dword [dword_5450F4], edx
	mov dword [dword_5450F8], edx
	pop edx
	ret
;sub_474280 endp

sub_4742A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 3E0h
	mov [esp+3D4h], eax
	mov edx, 4
	mov eax, dword [dword_5450F8]
	xor edx, edx
	mov ebx, dword [dword_5450F8]
	mov [esp+3D8h], edx
	mov [esp+3D0h], edx
	test ebx, ebx
	jle loc_47433A
	mov eax, [esp+3D4h]
	add eax, 38h
	mov [esp+3C0h], eax
	mov eax, [esp+3D4h]
	add eax, 44h
	mov [esp+3C8h], eax
	mov eax, [esp+3D4h]
	mov edi, byte_5425D4
	add eax, 8
	xor ebp, ebp
	mov [esp+3CCh], eax

loc_474316:
	mov ah, [edi]
	mov esi, edi
	test ah, ah
	jnz loc_47436A

loc_47431E:
	mov esi, [esp+3D8h]
	mov edx, dword [dword_5450F8]
	inc esi
	add edi, 5Ch
	mov [esp+3D8h], esi
	cmp esi, edx
	jl loc_474316

loc_47433A:
	mov ecx, [esp+3D0h]
	test ecx, ecx
	jz loc_47435D
	xor ebx, ebx
	mov edi, esp
	mov [esp], ebx
	cmp ecx, 1
	jg loc_4743EC

loc_474355:
	test edi, edi
	jnz loc_474486

loc_47435D:
	add esp, 3E0h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47436A:
	mov ebx, 320000h
	lea ecx, [edi+10h]
	mov edx, [esp+3CCh]
	mov eax, ecx
	call sub_470E70
	test eax, eax
	jz loc_47431E
	lea eax, [edi+28h]
	mov ebx, 1
	push eax
	mov edx, [esp+3C4h]
	mov eax, [esp+3CCh]
	call sub_480540
	mov dl, [edi]
	cmp dl, 4
	jz loc_4743D0
	cmp dl, 5
	jz loc_4743D0
	cmp dword [edi+30h], 10000h
	jl loc_4743E3

loc_4743B5:
	mov edx, [esp+3D0h]
	add ebp, 8
	inc edx
	mov [esp+ebp-4], esi
	mov [esp+3D0h], edx
	jmp loc_47431E

loc_4743D0:
	mov eax, [esp+3D4h]
	mov edx, esi
	call sub_433C14
	jmp loc_47431E

loc_4743E3:
	mov dword [edi+30h], 10000h
	jmp loc_4743B5

loc_4743EC:
	lea eax, [edi+8]
	mov [esp+3DCh], eax
	lea eax, 0[ecx*8]
	mov ebp, 8
	mov [esp+3C4h], eax

loc_474409:
	mov eax, [edi+4]
	mov edx, [esp+ebp+4]
	mov eax, [eax+30h]
	cmp eax, [edx+30h]
	jle loc_474447
	mov [esp+ebp], edi
	mov edi, [esp+3DCh]

loc_474422:
	mov ecx, [esp+3DCh]
	mov ebx, [esp+3C4h]
	add ecx, 8
	add ebp, 8
	mov [esp+3DCh], ecx
	cmp ebp, ebx
	jge loc_474355
	jmp loc_474409

loc_474447:
	cmp dword [edi], 0
	jz loc_474476
	mov esi, ebp
	mov edx, edi

loc_474450:
	mov eax, [edx]
	mov ecx, [eax+4]
	mov ebx, [esp+esi+4]
	mov ecx, [ecx+30h]
	cmp ecx, [ebx+30h]
	jge loc_474469
	mov ecx, [eax]
	mov edx, eax
	test ecx, ecx
	jnz loc_474450

loc_474469:
	mov eax, [edx]
	mov [esp+ebp], eax
	mov eax, esp
	add eax, ebp
	mov [edx], eax
	jmp loc_474422

loc_474476:
	mov eax, [esp+3DCh]
	xor edx, edx
	mov [edi], eax
	mov [esp+ebp], edx
	jmp loc_474422

loc_474486:
	mov eax, [esp+3D4h]
	mov edx, [edi+4]
	call sub_433C14
	mov edi, [edi]
	jmp loc_474355
;sub_4742A0 endp

sub_4744A0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, dword [dword_5450F8]
	mov edx, dword [dword_5450FC]
	mov eax, dword [dword_540F48]
	sub eax, edx
	cmp eax, 3
	jle loc_474569
	mov eax, dword [dword_540F48]
	mov dword [dword_5450FC], eax
	test ebp, ebp
	jnz loc_474579

loc_4744D7:
	mov ebp, dword [dword_5450F8]
	xor ebx, ebx
	test ebp, ebp
	jle loc_47454E
	mov edx, byte_5425D4

loc_4744E8:
	mov ah, [edx+2]
	mov ecx, edx
	test ah, ah
	jz loc_4745FF
	mov edi, [esp]
	mov eax, [edx+1Ch]
	mov esi, [edx+10h]
	add eax, edi
	add esi, eax
	mov [edx+10h], esi
	mov edi, [esp+4]
	mov eax, [edx+20h]
	mov esi, [edx+14h]
	add eax, edi
	add esi, eax
	mov [edx+14h], esi
	mov edi, [esp+8]
	mov eax, [edx+24h]
	mov esi, [edx+18h]
	add eax, edi

loc_474522:
	add esi, eax
	mov dword [dword_5450F8], ebp
	mov [edx+18h], esi
	mov eax, ecx
	call sub_474780
	mov edi, [ecx+4]
	dec edi
	mov [ecx+4], edi
	jnz loc_474540
	mov byte [ecx], 0

loc_474540:
	mov ebp, dword [dword_5450F8]
	inc ebx
	add edx, 5Ch
	cmp ebx, ebp
	jl loc_4744E8

loc_47454E:
	xor eax, eax
	test ebp, ebp
	jle loc_474569

loc_474554:
	imul esi, eax, 5Ch
	cmp byte byte_5425D4[esi], 0
	jz loc_474620

loc_474564:
	inc eax
	cmp eax, ebp
	jl loc_474554

loc_474569:
	mov dword [dword_5450F8], ebp
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_474579:
	mov ecx, dword [dword_5450F4]
	add ecx, 2
	mov eax, ecx
	mov dword [dword_5450F4], ecx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, 0CCCh
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp], eax
	mov eax, dword [dword_5450F4]
	xor ebx, ebx
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, 0CCCh
	mov [esp+4], ebx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov [esp+8], eax
	jmp loc_4744D7

loc_4745FF:
	mov esi, [edx+10h]
	mov eax, [edx+1Ch]
	add esi, eax
	mov [edx+10h], esi
	mov edi, [edx+14h]
	mov eax, [edx+20h]
	mov esi, [edx+18h]
	add edi, eax
	mov eax, [edx+24h]
	mov [edx+14h], edi
	jmp loc_474522

loc_474620:
	lea edx, [ebp-1]
	imul ebx, edx, 5Ch
	mov ecx, 17h
	lea edi, byte byte_5425D4[esi]
	lea esi, byte byte_5425D4[ebx]
	dec eax
	mov ebp, edx
	rep movsd
	jmp loc_474564
;sub_4744A0 endp

off_474650: dd loc_474720
	dd loc_474720 ; jump table for switch statement
	dd loc_474720
	dd loc_474751
	dd loc_474751
	dd loc_474720
	dd loc_474751
	dd loc_474751
	dd loc_474751

sub_474674: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, dword [dword_5450F8]
	mov esi, eax
	mov [esp+0Ch], edx
	mov [esp+10h], ebx
	xor ebx, ebx
	cmp ebp, 78h
	jnz loc_474749
	mov eax, 1
	mov ecx, dword [dword_5425D8]
	cmp ebp, eax
	jle loc_4746C0
	mov edx, 5Ch

loc_4746AA:
	mov edi, dword dword_5425D8[edx]
	cmp ecx, edi
	jle loc_4746B8
	mov ecx, edi
	mov ebx, eax

loc_4746B8:
	inc eax
	add edx, 5Ch
	cmp eax, ebp
	jl loc_4746AA

loc_4746C0:
	lea eax, 0[ebx*4]
	sub eax, ebx
	shl eax, 3
	sub eax, ebx
	mov edx, byte_5425D4
	shl eax, 2
	add edx, eax
	lea edi, [edx+10h]
	movsd
	movsd
	movsd
	mov al, [esp+0Ch]
	mov dword [edx+4], 0
	mov [edx], al
	mov eax, [esp+10h]
	mov [edx+1], bl
	test eax, eax
	jnz loc_474709
	mov eax, esp
	xor ecx, ecx
	mov [esp+10h], eax
	mov [esp], ecx
	mov [esp+4], ecx
	mov [esp+8], ecx

loc_474709:
	mov eax, [esp+0Ch]
	dec eax
	mov dword [dword_5450F8], ebp
	cmp eax, 8 ; switch 9 cases
	ja loc_474732 ; jumptable 00474719 default case
	jmp off_474650[eax*4] ; switch jump

loc_474720:
	mov eax, edx ; jumptable 00474719 cases 0-2,5
	call sub_4747E0
	mov eax, edx
	mov byte [edx+2], 1

loc_47472D:
	call sub_4747C0

loc_474732:
	mov eax, edx ; jumptable 00474719 default case
	call sub_433BA4
	mov ebp, dword [dword_5450F8]
	mov eax, edx
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_474749:
	mov ebx, ebp
	inc ebp
	jmp loc_4746C0

loc_474751:
	mov eax, [esp+10h] ; jumptable 00474719 cases 3,4,6-8
	mov eax, [eax]
	sar eax, 5
	mov [edx+1Ch], eax
	mov eax, [esp+10h]
	mov eax, [eax+4]
	sar eax, 5
	mov [edx+20h], eax
	mov eax, [esp+10h]
	mov eax, [eax+8]
	sar eax, 5
	mov [edx+24h], eax
	mov eax, edx
	mov byte [edx+2], 0
	jmp loc_47472D
;sub_474674 endp

sub_474780: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	mov ecx, [eax+8]
	add ecx, [eax+0Ch]
	mov ebx, [eax+0Ch]
	mov [eax+8], ecx
	cmp ebx, 0FFFFFFFDh
	jl loc_47479D
	cmp ebx, 3
	jg loc_4747A7
	pop ebp
	pop ecx
	pop ebx
	ret

loc_47479D:
	lea ebp, [ebx+1]
	mov [eax+0Ch], ebp
	pop ebp
	pop ecx
	pop ebx
	ret

loc_4747A7:
	push edi
	lea edi, [ebx-1]
	mov [eax+0Ch], edi
	pop edi
	pop ebp
	pop ecx
	pop ebx
	ret
;sub_474780 endp

sub_4747C0: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_488074
	mov [edx+8], eax
	call sub_488074
	and eax, 7Fh
	sub eax, 3Fh
	mov [edx+0Ch], eax
	pop edx
	ret
;sub_4747C0 endp

sub_4747E0: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_488074
	and eax, 3FFh
	mov [edx+1Ch], eax
	call sub_488074
	and eax, 3FFh
	mov [edx+24h], eax
	call sub_488074
	and eax, 3FFh
	add eax, 7FFh
	mov [edx+20h], eax
	pop edx
	ret
;sub_4747E0 endp

sub_474820: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edx, dword [dword_540F24]
	xor ebx, ebx
	xor esi, esi
	test edx, edx
	jnz loc_4748A0
	cmp dword [dword_511E40], 0
	jle loc_474891
	mov edx, dword [dword_511E40]
	xor eax, eax
	add edx, edx
	xor ecx, ecx
	mov [esp], edx

loc_474853:
	mov edx, dword dword_511D08[ecx]
	mov edi, [edx+21Ch]
	cmp dword [edi], 24h
	jz loc_4748BF
	cmp dword [edx+280h], 2
	jnz loc_4748AA
	mov edx, [edx+224h]
	mov ebp, dword [dword_540F48]
	add edx, 140h
	cmp edx, ebp
	jge loc_4748AA

loc_474883:
	inc ebx

loc_474884:
	mov edi, [esp]
	add eax, 2
	add ecx, 4
	cmp eax, edi
	jl loc_474853

loc_474891:
	mov eax, dword [dword_511E40]
	sub eax, esi
	cmp ebx, eax
	jnz loc_4748A0
	test eax, eax
	jg loc_4748C2

loc_4748A0:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4748AA:
	cmp dword [dword_512208], 4
	jnz loc_474884
	cmp word word_513448[eax], 0
	jnz loc_474883
	jmp loc_474884

loc_4748BF:
	inc esi
	jmp loc_474884

loc_4748C2:
	mov ebp, 1
	mov eax, 2
	mov dword [dword_540F24], ebp
	call sub_4748F0
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_474820 endp

sub_4748F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov edx, 1
	mov ecx, dword [dword_511E40]
	xor esi, esi
	mov [esp], edx
	test ecx, ecx
	jle loc_47498E
	xor ecx, ecx

loc_474915:
	mov edx, dword [dword_5118A0]
	imul edx, dword [dword_5121FC]
	mov ebx, dword dword_511D08[ecx]
	mov eax, [ebx+21Ch]
	cmp dword [eax], 24h
	jnz loc_474A23
	mov ebp, [ebx+220h]
	cmp edx, ebp
	jle loc_474957
	test ebp, ebp
	jnz loc_474A09
	xor eax, eax

loc_47494B:
	mov edx, dword dword_511D08[ecx]
	mov [edx+234h], eax

loc_474957:
	mov eax, dword dword_511D08[ecx]
	mov [eax+280h], edi

loc_474963:
	cmp edi, 1
	jnz loc_474980
	cmp edi, dword [dword_5121F8]
	jz loc_474A8C
	mov eax, dword dword_511D08[ecx]

loc_47497A:
	mov [eax+280h], edi

loc_474980:
	mov ebx, dword [dword_511E40]
	inc esi
	add ecx, 4
	cmp esi, ebx
	jl loc_474915

loc_47498E:
	mov ebp, dword [dword_511E30]
	xor esi, esi
	test ebp, ebp
	jle loc_4749FF
	xor ecx, ecx

loc_47499C:
	mov ebx, dword dword_511C48[ecx]
	cmp dword [ebx+280h], 2
	jz loc_4749E0
	cmp dword [ebx+220h], 0
	jnz loc_474AB0
	xor eax, eax

loc_4749BA:
	mov edx, dword dword_511C48[ecx]
	mov [edx+234h], eax
	cmp dword [esp], 0
	jz loc_474ADD
	mov eax, dword dword_511C48[ecx]
	mov dword [eax+280h], 2

loc_4749E0:
	cmp edi, 1
	jnz loc_4749F1
	mov eax, dword dword_511C48[ecx]
	mov [eax+280h], edi

loc_4749F1:
	mov ebp, dword [dword_511E30]
	inc esi
	add ecx, 4
	cmp esi, ebp
	jl loc_47499C

loc_4749FF:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_474A09:
	mov eax, [ebx+224h]
	sub eax, 200h
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	jmp loc_47494B

loc_474A23:
	cmp dword [ebx+280h], 2
	jz loc_474963
	mov ebp, [ebx+220h]
	test ebp, ebp
	jnz loc_474A6B
	xor eax, eax

loc_474A3C:
	mov edx, dword dword_511D08[ecx]
	mov [edx+234h], eax
	cmp dword [dword_5121F8], 1
	jz loc_474A82

loc_474A51:
	mov eax, dword dword_511D08[ecx]
	mov dword [eax+280h], 1

loc_474A61:
	xor ebx, ebx
	mov [esp], ebx
	jmp loc_474963

loc_474A6B:
	mov eax, [ebx+224h]
	sub eax, 200h
	imul edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	jmp loc_474A3C

loc_474A82:
	cmp esi, dword [dword_51220C]
	jnz loc_474A61
	jmp loc_474A51

loc_474A8C:
	mov eax, dword dword_511D08[ecx]
	cmp dword [eax+280h], 2
	jz loc_474980
	cmp esi, dword [dword_51220C]
	jnz loc_474980
	jmp loc_47497A

loc_474AB0:
	mov edx, dword [dword_5118A0]
	imul edx, dword [dword_5121FC]
	mov eax, [ebx+224h]
	sub eax, 200h
	imul edx, eax
	mov ebp, [ebx+220h]
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	jmp loc_4749BA

loc_474ADD:
	mov eax, dword dword_511C48[ecx]
	mov [eax+280h], edi
	jmp loc_4749E0
;sub_4748F0 endp

sub_474AF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov edx, [eax+230h]
	cmp edx, 8
	jge loc_474B79
	lea eax, 0[edx*4]
	lea edx, [eax+ebp]
	mov eax, [ebp+2B8h]
	cmp eax, [edx+258h]
	jle loc_474B79
	test byte [ebp+1F4h], 8
	jz loc_474DBF
	mov eax, [ebp+21Ch]
	mov ebx, [eax]
	cmp ebx, 0Fh
	jge loc_474DBF
	cmp dword [dword_512208], 2
	jl loc_474D75
	imul eax, [ebp+1E8h], 1999h
	mov edx, dword dword_4D5F74[ebx*4]
	sub edx, eax
	mov ebx, [ebp+2B8h]
	mov eax, edx
	cmp edx, ebx
	jge loc_474D6E

loc_474B6C:
	mov edx, [ebp+230h]
	mov [ebp+edx*4+258h], eax

loc_474B79:
	mov esi, [ebp+1F8h]
	cmp esi, [ebp+230h]
	jz loc_474C1C
	cmp dword [ebp+280h], 2
	jz loc_474C1C
	mov eax, dword [dword_540F48]
	mov edx, [ebp+234h]
	sub eax, edx
	mov edx, eax
	mov eax, [ebp+230h]
	mov [ebp+eax*4+238h], edx
	mov eax, dword [dword_540F48]
	mov [ebp+234h], eax
	mov eax, [ebp+1F8h]
	mov ecx, dword [dword_5121FC]
	mov [ebp+230h], eax
	cmp eax, ecx
	jnz loc_474C1C
	mov eax, [ebp+21Ch]
	cmp dword [eax], 24h
	jz loc_474C1C
	mov edx, [ebp+230h]
	mov eax, dword [dword_540F48]
	inc edx
	mov [ebp+224h], eax
	mov eax, dword [dword_5118A0]
	imul edx, eax
	mov esi, [ebp+234h]
	mov dword [ebp+280h], 2
	sub esi, 200h
	mov [ebp+234h], esi
	mov [ebp+220h], edx

loc_474C1C:
	mov edi, [ebp+14h]
	cmp edi, [ebp+228h]
	jz loc_474C7C
	mov eax, [ebp+280h]
	mov [ebp+228h], edi
	cmp eax, 2
	jz loc_474C7C
	mov eax, dword [dword_540F48]
	mov edx, dword [dword_512228]
	mov [ebp+224h], eax
	test edx, edx
	jz loc_474DDC
	mov edx, dword [dword_5118A0]
	sub edx, [ebp+228h]

loc_474C5D:
	mov ebx, [ebp+1FCh]
	mov eax, [ebp+230h]
	mov esi, dword [dword_5118A0]
	sub eax, ebx
	imul eax, esi
	add eax, edx
	mov [ebp+220h], eax

loc_474C7C:
	mov eax, [ebp+21Ch]
	cmp dword [eax], 24h
	jz loc_474D64
	xor eax, eax
	mov edx, dword [dword_511E44]
	mov [esp+4], eax
	test edx, edx
	jle loc_474D64
	lea eax, [edx-2]
	mov [esp], eax

loc_474CA5:
	mov eax, [esp+4]
	shl eax, 4
	mov edx, [ebp+220h]
	mov esi, dword dword_545104[eax]
	cmp edx, esi
	jle loc_474DE7

loc_474CC0:
	mov eax, [esp]
	mov ebx, [esp+4]
	cmp eax, ebx
	jl loc_474D0A
	mov edi, ebx
	shl eax, 4
	shl edi, 4

loc_474CD3:
	sub eax, 10h
	mov esi, dword dword_545110[eax]
	mov edx, dword dword_545114[eax]
	mov dword dword_545120[eax], esi
	mov dword dword_545124[eax], edx
	mov ebx, dword dword_545118[eax]
	mov ecx, dword dword_54511C[eax]
	mov dword dword_545128[eax], ebx
	mov dword dword_54512C[eax], ecx
	cmp eax, edi
	jge loc_474CD3

loc_474D0A:
	mov eax, [esp+4]
	mov edx, [ebp+220h]
	mov ecx, [ebp+224h]
	mov esi, [ebp+1E8h]
	shl eax, 4
	mov ebx, [ebp+1F4h]
	mov dword dword_545100[eax], esi
	mov dword dword_545104[eax], edx
	and ebx, 4
	mov dword dword_545108[eax], ecx
	mov esi, 14h
	mov dword dword_54510C[eax], ebx
	mov [esp+4], esi

loc_474D4D:
	mov ecx, [esp+4]
	inc ecx
	mov ebx, dword [dword_511E44]
	mov [esp+4], ecx
	cmp ecx, ebx
	jl loc_474CA5

loc_474D64:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_474D6E:
	mov eax, ebx
	jmp loc_474B6C

loc_474D75:
	call rand_
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, dword dword_4D5F74[ebx*4]
	mov edi, [ebp+2B8h]
	sub edx, eax
	cmp edx, edi
	jge loc_474DB8
	mov eax, [ebp+21Ch]
	mov ecx, [eax]
	call rand_
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, dword dword_4D5F74[ecx*4]
	sub edx, eax
	mov eax, edx
	jmp loc_474B6C

loc_474DB8:
	mov eax, edi
	jmp loc_474B6C

loc_474DBF:
	mov eax, [ebp+230h]
	shl eax, 2
	lea edx, [eax+ebp]
	mov eax, [ebp+2B8h]
	mov [edx+258h], eax
	jmp loc_474B79

loc_474DDC:
	mov edx, [ebp+228h]
	jmp loc_474C5D

loc_474DE7:
	jnz loc_474D4D
	mov ecx, dword dword_545108[eax]
	cmp ecx, [ebp+224h]
	jg loc_474CC0
	jmp loc_474D4D
;sub_474AF0 endp

sub_474E10: ;SUBROUTINE
	cmp eax, 1
	jle loc_474E26
	shl eax, 4
	mov eax, dword dword_5450E0[eax]
	mov eax, dword dword_511B48[eax*4]
	ret

loc_474E26:
	xor eax, eax
	ret
;sub_474E10 endp

sub_474E30: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_511E44]
	xor edx, edx
	test ecx, ecx
	jle loc_474E54
	shl ecx, 4
	xor eax, eax

loc_474E43:
	cmp dword dword_545100[eax], 0FFFFFFFFh
	jz loc_474E4D
	inc edx

loc_474E4D:
	add eax, 10h
	cmp eax, ecx
	jl loc_474E43

loc_474E54:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_474E30 endp

sub_474E60: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, dword [dword_511E44]
	mov ebx, [eax+1E8h]
	xor ecx, ecx
	xor eax, eax
	test esi, esi
	jle loc_474E8D
	xor edx, edx

loc_474E7A:
	cmp ebx, dword dword_545100[edx]
	jnz loc_474E85
	lea ecx, [eax+1]

loc_474E85:
	inc eax
	add edx, 10h
	cmp eax, esi
	jl loc_474E7A

loc_474E8D:
	mov eax, ecx
	mov dword [dword_511E44], esi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_474E60 endp

sub_474EA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, 0FFFFFFFFh
	mov ecx, 0FFFE7961h
	xor eax, eax

loc_474EAF:
	add eax, 10h
	mov dword dword_5450F4[eax], ecx
	xor ebx, ebx
	mov dword dword_5450F0[eax], edx
	mov dword dword_5450F8[eax], ebx
	mov dword dword_5450FC[eax], ebx
	cmp eax, 0C0h
	jnz loc_474EAF
	pop edx
	pop ecx
	pop ebx
	ret
;sub_474EA0 endp

sub_474EE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, dword [dword_511E40]
	mov edi, 63h
	mov ecx, dword [dword_511E44]
	xor edx, edx
	test ecx, ecx
	jle loc_474F51
	xor ebx, ebx
	xor ecx, ecx

loc_474F01:
	mov eax, dword dword_511CC8[ebx]
	call sub_474E60
	mov esi, dword dword_511CC8[ebx]
	mov [esi+278h], eax
	cmp dword dword_54510C[ecx], 0
	jz loc_474F40
	cmp edi, 63h
	jnz loc_474F40
	mov eax, dword dword_545100[ecx]
	mov eax, dword dword_511CC8[eax*4]
	mov eax, [eax+21Ch]
	cmp dword [eax], 24h
	jz loc_474F40
	mov edi, edx

loc_474F40:
	mov esi, dword [dword_511E44]
	add ecx, 10h
	inc edx
	add ebx, 4
	cmp edx, esi
	jl loc_474F01

loc_474F51:
	mov eax, dword [dword_512210]
	mov ebp, dword [dword_511E40]
	test eax, eax
	jz loc_474FAB
	xor esi, esi
	test ebp, ebp
	jle loc_474FAB
	shl edi, 4
	xor ebx, ebx

loc_474F6B:
	mov eax, dword dword_511D08[ebx]
	mov edx, [eax+21Ch]
	cmp dword [edx], 24h
	jz loc_474F99
	mov edx, [eax+220h]
	mov ecx, dword dword_545104[edi]
	sub ecx, edx
	imul edx, dword [dword_512204], 74h
	cmp ecx, dword dword_511D9C[edx]
	jge loc_474FB8

loc_474F99:
	mov dword [eax+218h], 10000h

loc_474FA3:
	inc esi
	add ebx, 4
	cmp esi, ebp
	jl loc_474F6B

loc_474FAB:
	mov dword [dword_511E40], ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_474FB8:
	cmp ecx, dword dword_511DA0[edx]
	jge loc_474FCE
	mov edx, dword dword_511DAC[edx]
	mov [eax+218h], edx
	jmp loc_474FA3

loc_474FCE:
	cmp ecx, dword dword_511DA4[edx]
	jge loc_474FE4
	mov edx, dword dword_511DB0[edx]
	mov [eax+218h], edx
	jmp loc_474FA3

loc_474FE4:
	cmp ecx, dword dword_511DA8[edx]
	jge loc_474FFA
	mov edx, dword dword_511DB4[edx]
	mov [eax+218h], edx
	jmp loc_474FA3

loc_474FFA:
	mov edx, dword dword_511DB8[edx]
	mov [eax+218h], edx
	jmp loc_474FA3
;sub_474EE0 endp

dword_475014: dd 8
dword_475018: dd 0Ah
dword_47501C: dd 0Ch
dword_475020: dd 10h
dword_475024: dd 40h
dword_475028: dd 18h

sub_475030: ;SUBROUTINE
	add eax, dword [dword_475020]
	ret
;sub_475030 endp

sub_475040: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_47501C]
	mov ebx, eax
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	movsx eax, word [ebx+eax*2]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_475040 endp

sub_475060: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_475018]
	mov ebx, eax
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	movsx eax, word [ebx+eax*2]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_475060 endp

sub_475080: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ebp, edx
	xor edx, edx
	mov eax, dword [dword_475014]
	mov [esp], edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	movsx edi, word [esi+eax*2]
	test edi, edi
	jz loc_4750CE
	mov eax, dword [dword_475024]
	add eax, esi
	mov edx, [eax]
	add edx, eax
	xor eax, eax
	test edi, edi
	jle loc_4750CE

loc_4750B8:
	mov ecx, [edx]
	add ecx, esi
	xor ebx, ebx
	mov bx, [ecx+4]
	cmp ebx, ebp
	jz loc_4750DA
	inc eax
	add edx, 4
	cmp eax, edi
	jl loc_4750B8

loc_4750CE:
	mov eax, [esp]
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4750DA:
	mov [esp], ecx
	mov eax, [esp]
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_475080 endp

sub_4750F0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	xor ecx, ecx
	mov cx, [eax+0Ah]
	lea eax, 0[ecx*4]
	sub eax, ecx
	mov ecx, dword [dword_475028]
	add eax, eax
	add ecx, edx
	mov dx, [edx+4]
	add ecx, eax
	and edx, 0FFFFh
	lea eax, 0[edx*4]
	sub eax, edx
	add eax, eax
	add eax, ecx
	pop edx
	pop ecx
	ret
;sub_4750F0 endp

sub_475130: ;SUBROUTINE
	add eax, dword [dword_475028]
	ret
;sub_475130 endp

sub_475140: ;SUBROUTINE
	add eax, dword [dword_475024]
	ret
;sub_475140 endp

sub_475150: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp eax, dword [dword_5451DC]
	jnb loc_475166
	mov eax, dword [dword_4D968C]
	movsx eax, word [eax+ecx*2]
	pop ecx
	ret

loc_475166:
	mov eax, dword [dword_4D968C]
	movsx eax, word [eax+ecx*2]
	pop ecx
	ret
;sub_475150 endp

sub_475190: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	xor eax, eax
	mov ax, [ecx+4]
	cmp edx, eax
	jge loc_4751AB
	lea eax, [ecx+0Ch]
	mov eax, [eax+esi*4]
	add eax, ecx
	pop esi
	pop ecx
	ret

loc_4751AB:
	lea eax, [ecx+0Ch]
	mov eax, [eax+esi*4]
	add eax, ecx
	pop esi
	pop ecx
	ret
;sub_475190 endp

sub_4751D0: ;SUBROUTINE
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, dword [dword_4D9688]
	shl eax, 2
	add eax, edx
	pop edx
	ret
;sub_4751D0 endp

sub_4751F0: ;SUBROUTINE
	push esi
	push edi
	lea eax, 0[edx*4]
	sub eax, edx
	mov esi, dword [dword_4D9688]
	shl eax, 2
	mov edi, ebx
	add esi, eax
	movsd
	movsd
	movsd
	pop edi
	pop esi
	ret
;sub_4751F0 endp

sub_475210: ;SUBROUTINE
	cmp eax, dword [dword_5451E0]
	jnz loc_47521E
	mov eax, dword [dword_5451CC]
	ret

loc_47521E:
	mov eax, dword [dword_5451CC]
	ret
;sub_475210 endp

sub_475240: ;SUBROUTINE
	cmp eax, dword [dword_5451E0]
	jnz loc_47524E
	mov eax, dword [dword_5451C8]
	ret

loc_47524E:
	mov eax, dword [dword_5451C8]
	ret
;sub_475240 endp

sub_475270: ;SUBROUTINE
	cmp eax, dword [dword_5451E0]
	jnz loc_47527E
	mov eax, dword [dword_5451D8]
	ret

loc_47527E:
	mov eax, dword [dword_5451D8]
	ret
;sub_475270 endp

sub_4752A0: ;SUBROUTINE
	cmp eax, dword [dword_5451E0]
	jnz loc_4752AE
	mov eax, dword [dword_5451DC]
	ret

loc_4752AE:
	mov eax, dword [dword_5451DC]
	ret
;sub_4752A0 endp

sub_4752D0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_5451E0]
	test edx, edx
	jnz loc_4752DD
	pop edx
	ret

loc_4752DD:
	mov eax, edx
	call sub_47FA50
	pop edx
	ret
;sub_4752D0 endp

sub_4752F0: ;SUBROUTINE
	mov eax, 1
	ret
;sub_4752F0 endp

sub_475300: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ecx, edx
	xor edx, edx

loc_47530C:
	mov ebx, dword dword_545230[edx]
	push ebx
	mov esi, dword dword_54522C[edx]
	push esi
	mov edi, [ecx+4]
	push edi
	mov ebp, [ecx]
	push ebp
	lea esi, [esp+10h]
	call sub_46FDA0
	mov edi, ecx
	mov esi, esp
	add edx, 8
	movsd
	movsd
	cmp edx, 100h
	jnz loc_47530C
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_475300 endp

sub_475350: ;SUBROUTINE
	push edx
	push esi
	push edi
	sub esp, 8
	xor edx, edx

loc_475358:
	mov esi, esp
	call sub_46FE50
	mov esi, esp
	lea edi, dword dword_54522C[edx]
	add edx, 8
	movsd
	movsd
	cmp edx, 100h
	jnz loc_475358
	add esp, 8
	pop edi
	pop esi
	pop edx
	ret
;sub_475350 endp

sub_475380: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 70h
	mov esi, eax
	mov edi, edx
	mov [esp+64h], ebx
	cmp dword [eax+0BCh], 0
	jnz loc_475450

loc_47539C:
	mov ecx, [esi+4]
	test ecx, ecx
	jz loc_47541E
	lea ebx, [esi+50h]
	lea edx, [ecx+50h]
	lea eax, [esi+20h]
	call sub_49E840
	mov eax, [esi+44h]
	mov ebx, [esi+80h]
	add eax, ebx
	mov [esp+24h], eax
	mov eax, [esi+48h]
	mov ebp, [esi+84h]
	add eax, ebp
	mov [esp+28h], eax
	mov eax, [esi+4Ch]
	mov edx, [esi+88h]
	add eax, edx
	mov [esp+2Ch], eax
	lea ebx, [esp+30h]
	mov edx, [esi+4]
	lea eax, [esp+24h]
	add edx, 50h
	call sub_480720
	mov eax, [esi+4]
	mov edx, [esp+30h]
	mov eax, [eax+74h]
	add edx, eax
	mov [esi+74h], edx
	mov eax, [esi+4]
	mov edx, [esp+34h]
	mov eax, [eax+78h]
	add edx, eax
	mov [esi+78h], edx
	mov eax, [esi+4]
	mov edx, [esp+38h]
	mov eax, [eax+7Ch]
	add edx, eax
	mov [esi+7Ch], edx

loc_47541E:
	cmp dword [esi], 1
	jnz loc_475467
	mov edx, [esi+8]
	xor ebp, ebp
	test edx, edx
	jle loc_475448
	mov ecx, esi

loc_47542E:
	mov ebx, [esp+64h]
	mov edx, edi
	mov eax, [ecx+0Ch]
	call sub_475380
	inc ebp
	mov eax, [esi+8]
	add ecx, 4
	cmp ebp, eax
	jl loc_47542E
	nop

loc_475448:
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_475450:
	mov edx, [eax+0C4h]
	mov eax, [eax+0C0h]
	call dword [esi+0BCh]
	jmp loc_47539C

loc_475467:
	mov ebx, [esi+8Ch]
	test ebx, ebx
	jz loc_475448
	xor ebp, ebp
	mov [esp+6Ch], ebp
	test ebx, ebx
	jle loc_475448
	lea eax, [esi+50h]
	mov [esp+68h], eax
	lea eax, [edi+44h]
	mov ebp, esi
	mov [esp+60h], eax

loc_47548B:
	mov eax, [ebp+90h]
	cmp dword [eax], 0
	jz loc_4754A5
	cmp dword [dword_4D9288], 0
	jz loc_4754BD
	cmp byte [eax+20h], 0
	jnz loc_4754BD

loc_4754A5:
	mov ecx, [esp+6Ch]
	add ebp, 4
	inc ecx
	mov ebx, [esi+8Ch]
	mov [esp+6Ch], ecx
	cmp ecx, ebx
	jge loc_475448
	jmp loc_47548B

loc_4754BD:
	mov eax, [ebp+90h]
	mov ebx, [eax+24h]
	cmp ebx, 20000h
	jnz loc_475581

loc_4754D2:
	mov eax, [esi+74h]
	mov edx, [edi+8]
	sub eax, edx
	mov [esp+48h], eax
	mov eax, [esi+78h]
	mov ecx, [edi+0Ch]
	sub eax, ecx
	mov [esp+4Ch], eax
	mov eax, [esi+7Ch]
	mov ebx, [edi+10h]
	mov edx, [esp+60h]
	sub eax, ebx
	lea ebx, [esp+54h]
	mov [esp+50h], eax
	lea eax, [esp+48h]
	call sub_480720
	mov ebx, esp
	mov edx, [esp+60h]
	mov eax, [esp+68h]
	call sub_49E840
	mov eax, [ebp+90h]
	mov eax, [eax+20h]
	mov edx, dword [dword_4D9280]
	sar eax, 10h
	test edx, edx
	jz loc_475538
	cmp eax, 5
	jge loc_475538
	mov eax, dword dword_513608[eax*4]

loc_475538:
	mov edx, [esi+74h]
	mov ecx, [edi+8]
	sub edx, ecx
	mov [esp+3Ch], edx
	mov edx, [esi+78h]
	sub edx, [edi+0Ch]
	mov ebx, [esp+64h]
	mov [esp+40h], edx
	push ebx
	mov edx, [esi+7Ch]
	mov ecx, [edi+10h]
	mov ebx, [esp+6Ch]
	push eax
	sub edx, ecx
	lea eax, [esp+5Ch]
	lea ecx, [esp+44h]
	mov [esp+4Ch], edx
	push eax
	lea edx, [esp+0Ch]
	mov eax, [ebp+90h]
	call sub_47FCD0
	jmp loc_4754A5

loc_475581:
	mov edx, dword [dword_545224]
	cmp edx, ebx
	jle loc_4754D2
	cmp edx, [eax+28h]
	jge loc_4754D2
	mov edx, dword [dword_545228]
	cmp edx, [eax+2Ch]
	jle loc_4754D2
	cmp edx, [eax+30h]
	jl loc_4754A5
	jmp loc_4754D2
;sub_475380 endp

sub_4755C0: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 8
	mov ebx, eax
	mov ecx, edx
	mov edx, 0C0h
	mov eax, esp
	call sub_46FEA0
	test eax, eax
	jnz loc_4755E1

loc_4755D9:
	xor eax, eax
	add esp, 8
	pop ecx
	pop ebx
	ret

loc_4755E1:
	mov edx, [esp]
	push edx
	lea edx, [ecx+38h]
	lea eax, [ecx+44h]
	mov ecx, ebx
	mov ebx, 4
	call sub_475690
	mov edx, 24h
	lea eax, [esp+4]
	call sub_46FEA0
	test eax, eax
	jz loc_4755D9
	mov eax, [esp+4]
	mov dword [eax], 0
	mov eax, [esp+4]
	mov dword [eax+4], 0Ah
	mov eax, [esp+4]
	mov edx, dword [dword_500F40]
	mov [eax+1Ch], edx
	mov eax, [esp+4]
	mov dword [eax+20h], 8FFFFFFFh
	mov eax, [esp+4]
	mov word [eax+0Ah], 1
	mov eax, [esp+4]
	mov word [eax+8], 3
	mov edx, [esp+4]
	mov eax, [esp]
	mov [edx+0Ch], eax
	mov edx, [esp+4]
	add eax, 30h
	mov [edx+10h], eax
	mov eax, [esp]
	mov edx, [esp+4]
	add eax, 90h
	mov [edx+14h], eax
	mov eax, [esp]
	mov edx, [esp+4]
	add eax, 60h
	mov [edx+18h], eax
	mov eax, [esp+4]
	add esp, 8
	pop ecx
	pop ebx
	ret
;sub_4755C0 endp

sub_475690: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ebp, [esp+3Ch]
	mov [esp+1Ch], eax
	mov [esp+24h], edx
	mov [esp+10h], ebx
	lea eax, [ebp+10h]
	mov [esp+20h], ecx
	mov [esp+0Ch], eax

loc_4756B1:
	mov edx, [esp+10h]
	dec edx
	mov [esp+10h], edx
	cmp edx, 0FFFFFFFFh
	jnz loc_4756C8
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4756C8:
	mov ebx, esp
	mov edx, [esp+1Ch]
	mov eax, [esp+20h]
	call sub_49EAC8
	mov ebx, [esp+4]
	add ebx, 2000h
	mov eax, [esp+24h]
	mov [esp+4], ebx
	mov esi, [esp]
	add esi, [eax]
	mov eax, [esp+24h]
	mov [esp], esi
	mov eax, [eax+4]
	lea edi, [ebx+eax]
	mov eax, [esp+24h]
	mov [esp+4], edi
	mov edx, [esp+8]
	mov eax, [eax+8]
	add edx, eax
	mov [esp+8], edx
	mov [ebp+0], esi
	mov eax, [esp+4]
	mov [ebp+4], eax
	mov eax, [esp+8]
	mov word [ebp+0Ch], 0
	mov [ebp+8], eax
	mov ecx, [esp+8]
	mov esi, [esp+0Ch]
	test ecx, ecx
	jnz loc_47573B
	mov dword [esp+8], 1

loc_47573B:
	mov eax, [esp+8]
	mov [esp+28h], eax
	lea edx, [esp+18h]
	fild dword [esp+28h]
	lea eax, [esp+14h]
	fstp dword [esp+14h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+18h]
	mov eax, esp
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_475845
	cmp eax, ecx
	jge loc_475845
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_475819
	cmp eax, ecx
	jl loc_475819
	cmp eax, edx
	jle loc_47581D
	or ebx, 4
	jmp loc_47581D

loc_475819:
	or ebx, 8
	nop

loc_47581D:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_475840
	cmp eax, ecx
	jl loc_475840
	cmp eax, edx
	jle loc_47584A
	or ebx, 2
	jmp loc_47584A

loc_475840:
	or ebx, 1
	jmp loc_47584A

loc_475845:
	mov ebx, 10h

loc_47584A:
	mov [edi], bl
	cmp dword [esp+8], 0
	jl loc_475877
	xor eax, eax

loc_475855:
	mov edi, [esp+0Ch]
	mov [ebp+0Eh], ax
	add ebp, 30h
	mov eax, [esp+20h]
	add edi, 30h
	add eax, 0Ch
	mov [esp+0Ch], edi
	mov [esp+20h], eax
	jmp loc_4756B1

loc_475877:
	mov eax, 1
	jmp loc_475855
;sub_475690 endp

sub_475880: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 4
	mov bl, al
	mov edx, 0Ch
	mov eax, esp
	call sub_46FEA0
	test eax, eax
	jnz loc_47589D
	add esp, 4
	pop edx
	pop ebx
	ret

loc_47589D:
	mov eax, [esp]
	mov dword [eax+4], 1Ah
	mov eax, [esp]
	mov dword [eax], 0
	mov eax, [esp]
	mov [eax+8], bl
	mov eax, [esp]
	add esp, 4
	pop edx
	pop ebx
	ret
;sub_475880 endp

sub_4758C0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, 2
	call sub_475960
	mov [eax+4], ecx
	mov [eax+0BCh], edx
	mov [eax+0C0h], eax
	mov [eax+0C4h], ebx
	mov edx, [ecx+8]
	mov [ecx+edx*4+0Ch], eax
	inc dword [ecx+8]
	pop ecx
	ret
;sub_4758C0 endp

sub_4758F0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, 1
	call sub_475960
	mov [eax+4], ecx
	mov [eax+0BCh], edx
	mov [eax+0C0h], eax
	mov [eax+0C4h], ebx
	mov edx, [ecx+8]
	mov [ecx+edx*4+0Ch], eax
	inc dword [ecx+8]
	pop ecx
	ret
;sub_4758F0 endp

sub_475920: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	mov eax, [eax+8Ch]
	mov [ecx+eax*4+90h], edx
	mov edx, ebx
	mov eax, esi
	call sub_46E240
	mov eax, [esi+8]
	mov [ecx+44h], eax
	mov eax, [esi+0Ch]
	mov [ecx+48h], eax
	mov eax, [esi+10h]
	mov [ecx+4Ch], eax
	mov al, [ebx]
	mov [esi+20h], al
	inc dword [ecx+8Ch]
	pop esi
	pop ecx
	ret
;sub_475920 endp

sub_475960: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, aTrnfnode ; "TrnfNode"
	call sub_475980
	mov dword [eax+8], 0
	mov [eax], edx
	pop edx
	ret
;sub_475960 endp

sub_475980: ;SUBROUTINE
	push ebx
	push edx
	mov edx, 0C8h
	xor ebx, ebx
	call sub_475A80
	mov edx, eax
	add eax, 20h
	mov dword [eax-1Ch], 0
	mov dword [eax-18h], 0
	mov dword [eax+6Ch], 0
	mov dword [eax+9Ch], 0
	mov dword [eax+0A0h], 0
	mov dword [eax+0A4h], 0
	call sub_45ED00
	lea eax, [edx+50h]
	call sub_45ED00
	mov dword [edx+44h], 0
	mov dword [edx+48h], 0
	mov dword [edx+4Ch], 0
	mov dword [edx+80h], 0
	mov dword [edx+84h], 0
	mov dword [edx+88h], 0
	mov dword [edx+74h], 0
	mov dword [edx+78h], 0
	mov eax, edx
	mov dword [edx+7Ch], 0
	pop edx
	pop ebx
	ret
;sub_475980 endp

sub_475A20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, dword [dword_4D9690]
	xor ecx, ecx
	test edx, edx
	jle loc_475A54
	xor edx, edx

loc_475A34:
	mov edi, dword dword_5451E4[edx]
	test edi, edi
	jnz loc_475A69

loc_475A3E:
	mov esi, dword [dword_4D9690]
	add edx, 4
	xor ebx, ebx
	inc ecx
	mov dword dword_5451E0[edx], ebx
	cmp ecx, esi
	jl loc_475A34

loc_475A54:
	xor ebp, ebp
	mov dword [dword_4D9690], ebp
	mov dword [dword_4D9694], ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_475A69:
	mov eax, edi
	call sub_4848FC
	jmp loc_475A3E
;sub_475A20 endp

sub_475A80: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, dword [dword_4D9694]
	test ecx, ecx
	jz loc_475ACE
	mov eax, dword [dword_4D9690]
	lea ebx, 0[eax*4]
	lea eax, 0[ecx*4]
	sub eax, ecx
	shl eax, 3
	add eax, ecx
	mov edx, dword dword_5451E0[ebx]
	shl eax, 3
	inc ecx
	lea esi, [edx+eax]
	mov ebx, 0Ah
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	mov ecx, edx
	mov eax, esi
	mov dword [dword_4D9694], ecx
	pop esi
	pop ecx
	ret

loc_475ACE:
	mov edx, aCNfs2seGame_13 ; "c:\\nfs2se\\game\\common\\Transfmr.c"
	mov ebx, 4Fh
	mov eax, aTrnfset ; "TrnfSet"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov edx, 7D0h
	xor ebx, ebx
	call sub_484498
	mov edx, dword [dword_4D9690]
	mov ecx, dword [dword_4D9694]
	lea esi, [edx+1]
	inc ecx
	mov dword dword_5451E4[edx*4], eax
	mov dword [dword_4D9690], esi
	mov eax, dword dword_5451E0[esi*4]
	mov dword [dword_4D9694], ecx
	pop esi
	pop ecx
	ret
;sub_475A80 endp

;	Attributes: thunk

sub_475B40: ;SUBROUTINE
	jmp sub_475B50
;sub_475B40 endp

sub_475B50: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, 10h
	mov edx, dword [dword_540F48]
	xor ebx, ebx
	mov dword [dword_54592C], edx
	mov dword [dword_545930], edx
	xor edi, edi

loc_475B70:
	mov eax, ebx
	mov ecx, esi
	shl eax, 4

loc_475B77:
	add eax, 4
	mov dword dword_545628[eax], edx
	mov dword dword_545828[eax], edi
	mov dword dword_545728[eax], edx
	cmp eax, ecx
	jnz loc_475B77
	inc ebx
	add esi, 10h
	cmp ebx, 10h
	jl loc_475B70
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_475B50 endp

sub_475BA0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov ebp, edx
	mov esi, ebx
	mov edx, ecx
	and edi, 0Fh
	test ecx, ecx
	jnz loc_475BD2
	mov eax, edi
	lea ecx, 0[ebp*4]
	shl eax, 4
	add ecx, eax
	mov eax, dword [dword_540F48]
	sub eax, dword dword_54562C[ecx]
	test eax, eax
	jle loc_475C22

loc_475BD2:
	mov ecx, edi
	lea eax, 0[ebp*4]
	shl ecx, 4
	add ecx, eax
	mov eax, dword [dword_540F48]
	mov dword dword_54562C[ecx], eax
	lea eax, 0[ebp*4]
	sub eax, ebp
	mov [esp+8], ecx
	lea ecx, 0[eax*4]
	lea eax, 0[edi*4]
	sub eax, edi
	shl eax, 4
	lea ebx, [eax+ecx]
	mov [esp], ebx
	mov ebx, [esp+8]
	cmp dword dword_54582C[ebx], 0
	jnz loc_475C42
	test edx, edx
	jz loc_475C29

loc_475C22:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_475C29:
	mov edi, [esp]
	mov edx, 1
	lea edi, dword dword_54532C[edi]
	mov dword dword_54582C[ebx], edx
	movsd
	movsd
	movsd
	jmp loc_475C22

loc_475C42:
	add eax, dword_54532C
	add eax, ecx
	mov [esp+4], eax
	test edx, edx
	jz loc_475C86
	mov ebx, 3333h
	mov edx, esi
	call sub_470E70
	test eax, eax
	jnz loc_475C73
	push eax
	mov ebx, [esp+8]
	mov ecx, esi
	push 2
	mov edx, ebp
	mov eax, edi
	call sub_475CD0

loc_475C73:
	shl edi, 4
	xor eax, eax
	mov dword dword_54582C[edi+ebp*4], eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_475C86:
	mov ebx, 8000h
	mov edx, esi
	call sub_470E70
	test eax, eax
	jnz loc_475C22
	push eax
	mov ebx, [esp+8]
	mov ecx, esi
	push 1
	mov edx, ebp
	mov eax, edi
	call sub_475CD0
	mov eax, [esp+8]
	mov dword dword_54582C[eax], 1
	mov edi, [esp]
	lea edi, dword dword_54532C[edi]
	movsd
	movsd
	movsd
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_475BA0 endp

sub_475CD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov edi, eax
	mov [esp+10h], edx
	mov ebp, ebx
	mov esi, ecx
	mov ecx, [esp+28h]
	mov ebx, 0E0000h
	mov edx, esi
	mov eax, ebp
	call sub_470E70
	test eax, eax
	jnz loc_475D78
	cmp ecx, 3
	jge loc_475D5B
	mov eax, [esi]
	add eax, eax
	sar eax, 1
	mov [esp], eax
	mov eax, [esi+4]
	mov edx, [esp+10h]
	add eax, eax
	inc ecx
	sar eax, 1
	mov ebx, ebp
	mov [esp+4], eax
	push ecx
	mov eax, [esi+8]
	mov [esp+10h], ecx
	add eax, eax
	push 1
	sar eax, 1
	lea ecx, [esp+8]
	mov [esp+10h], eax
	mov eax, edi
	call sub_475CD0
	mov edx, [esp+0Ch]
	mov ecx, [esp+24h]
	push edx
	lea ebx, [esp+4]
	mov eax, edi
	push ecx
	mov edx, [esp+18h]
	mov ecx, esi
	call sub_475CD0
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_475D5B:
	mov ecx, [esp+24h]
	mov edx, [esp+10h]
	mov ebx, ebp
	push ecx
	mov eax, edi
	mov ecx, esi
	call sub_47F740
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_475D78:
	mov edx, [esp+24h]
	mov ecx, esi
	mov ebx, ebp
	push edx
	mov eax, edi
	mov edx, [esp+14h]
	call sub_47F740
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_475CD0 endp

sub_475DA0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, dword [dword_54592C]
	mov eax, dword [dword_540F48]
	sub eax, edx
	cmp eax, 4
	jg loc_475DB9
	pop edx
	pop ecx
	ret

loc_475DB9:
	push ebx
	mov eax, dword [dword_540F48]
	mov dword [dword_54592C], eax
	call sub_488074
	test al, 7
	jz loc_475DE2
	mov edx, 2
	mov eax, ecx
	xor ebx, ebx
	call sub_474674
	add dword [eax+20h], 0F5Ch

loc_475DE2:
	mov edx, 3
	mov eax, ecx
	xor ebx, ebx
	call sub_474674
	add dword [eax+20h], 0F5Ch
	pop ebx
	pop edx
	pop ecx
	ret
;sub_475DA0 endp

sub_475E00: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov eax, ebx
	mov edx, ecx
	mov ebx, [esp+0Ch]
	and esi, 0Fh
	cmp ecx, 8
	jnz loc_475E34

loc_475E16:
	shl edi, 2
	shl esi, 4
	add edi, esi
	mov esi, dword [dword_540F48]
	sub esi, dword dword_54572C[edi]
	cmp esi, 2
	jg loc_475E57

loc_475E2F:
	pop edi
	pop esi
	ret 4

loc_475E34:
	cmp ecx, 7
	jz loc_475E16
	cmp ecx, 9
	jz loc_475E16
	shl edi, 2
	shl esi, 4
	add edi, esi
	mov esi, dword [dword_540F48]
	sub esi, dword dword_54572C[edi]
	cmp esi, 5
	jle loc_475E2F

loc_475E57:
	mov esi, dword [dword_540F48]
	mov dword dword_54572C[edi], esi
	call sub_474674
	pop edi
	pop esi
	ret 4
;sub_475E00 endp

sub_475E70: ;SUBROUTINE
	push ebp
	mov ebp, eax
	cmp byte [eax], 0
	jnz loc_475E8D
	mov eax, [ebp+4]
	call sub_487958
	test eax, eax
	jz loc_475E86
	pop ebp
	ret

loc_475E86:
	jmp ExitProcess0

loc_475E8D:
	push edi
	push esi
	push ecx
	mov ecx, ebx
	mov edi, edx
	mov esi, [ebp+8]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	add [ebp+8], ebx
	pop ecx
	pop esi
	pop edi
	pop ebp
	ret
;sub_475E70 endp

sub_475EB0: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 4
	mov edx, eax
	cmp byte [eax], 0
	jz loc_475ED0
	mov eax, [edx+8]
	mov al, [eax]
	mov [esp], al
	inc dword [edx+8]

loc_475EC7:
	mov al, [esp]
	add esp, 4
	pop edx
	pop ebx
	ret

loc_475ED0:
	mov ebx, 1
	mov eax, [edx+4]
	mov edx, esp
	call sub_487958
	test eax, eax
	jnz loc_475EC7
	jmp ExitProcess0
;sub_475EB0 endp

sub_475F00: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 4
	mov edx, eax
	cmp byte [eax], 0
	jz loc_475F21
	mov eax, [edx+8]
	mov eax, [eax]
	mov [esp], eax
	add dword [edx+8], 4

loc_475F18:
	mov eax, [esp]
	add esp, 4
	pop edx
	pop ebx
	ret

loc_475F21:
	mov ebx, 4
	mov eax, [edx+4]
	mov edx, esp
	call sub_487958
	test eax, eax
	jnz loc_475F18
	jmp ExitProcess0
;sub_475F00 endp

sub_475F50: ;SUBROUTINE
	push edx
	mov edx, eax
	test eax, eax
	jz loc_475F73
	push ecx
	cmp byte [eax], 0
	jnz loc_475F6B
	mov ecx, [edx+4]
	test ecx, ecx
	jz loc_475F6B
	mov eax, ecx
	call sub_487950

loc_475F6B:
	mov eax, edx
	call sub_4848FC
	pop ecx

loc_475F73:
	pop edx
	ret
;sub_475F50 endp

sub_475F80: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov ebp, edx
	mov [esp+8], ebx
	mov edx, aCNfs2seGame_14 ; "c:\\nfs2se\\game\\common\\udff.c"
	mov ecx, 0Ch
	mov ebx, 20h
	mov eax, aUdffhandle ; "udffhandle"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	mov ecx, 1
	mov edx, 0Ch
	call sub_4844C4
	mov esi, eax
	test eax, eax
	jnz loc_475FF7
	cmp dword [esp+8], 0
	jz loc_475FED
	mov ebp, aCNfs2seGame_14 ; "c:\\nfs2se\\game\\common\\udff.c"
	mov eax, 10h
	push aUdff_openaNotE ; "Udff_Opena - not enough memory"
	mov dword [dword_4DB1D8], ebp
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_475FED:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_475FF7:
	test edi, edi
	jnz loc_47603E
	test ebp, ebp
	jnz loc_47603E

loc_475FFF:
	test esi, esi
	jz loc_47600A
	mov eax, esi
	call sub_4848FC

loc_47600A:
	cmp dword [esp+8], 0
	jz loc_475FED
	mov ebx, aCNfs2seGame_14 ; "c:\\nfs2se\\game\\common\\udff.c"
	mov esi, 18h
	push aUdff_openaBadU ; "Udff_Opena - bad usage"
	mov dword [dword_4DB1D8], ebx
	mov dword [dword_4DB1DC], esi
	call sub_4840F0
	add esp, 4
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_47603E:
	test edi, edi
	jz loc_476046
	test ebp, ebp
	jnz loc_475FFF

loc_476046:
	test ebp, ebp
	jz loc_476061
	mov dword [esi+4], 0
	mov byte [esi], 1
	mov [esi+8], ebp

loc_476057:
	mov eax, esi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_476061:
	mov eax, [esp+8]
	lea ecx, [esp+4]
	mov ebx, esp
	mov [esp], ebp
	mov [esp+4], ebp
	lea edx, [esi+4]
	push eax
	mov byte [esi], 0
	mov eax, edi
	mov [esi+8], ebp
	call sub_487668
	cmp dword [esi+4], 0
	jnz loc_476057
	mov eax, esi
	call sub_4848FC
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_475F80 endp

dword_4760A0: dd 9, 0
	dd 0Bh, 2, 0Dh, 4, 0Eh, 5, 0Ch, 3, 0Fh, 6, 10h, 7, 11h
	dd 8

sub_4760F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov ebp, edx
	mov edi, esp
	mov esi, eax
	push edi

loc_476102:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47611A
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_476102

loc_47611A:
	pop edi
	mov esi, a_bnk ; ".bnk"
	mov edi, esp
	xor edx, edx
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_47612D:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_476145
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47612D

loc_476145:
	pop edi
	mov eax, esp
	call sub_486F50
	mov ecx, eax
	mov ebx, eax
	mov edx, eax
	lea eax, [esp+100h]
	call sub_485364
	cmp eax, 7
	jz loc_476193

loc_476164:
	lea eax, 0[ebp*4]
	sub eax, ebp
	lea ecx, 0[eax*4]
	mov eax, [esp+100h]
	mov dword dword_50B418[ecx], ebx
	mov dword dword_50B410[ecx], eax
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_476193:
	mov edx, aCNfs2seGamePcA ; "c:\\nfs2se\\game\\pc\\audio.c"
	mov ebx, 310h
	mov eax, [esp+100h]
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	call sub_485160
	mov edx, eax
	xor ebx, ebx
	mov eax, aBhdr ; "bhdr"
	call sub_484498
	mov edx, [esp+100h]
	mov ebx, eax
	call sub_485218
	mov eax, ecx
	call sub_4848FC
	jmp loc_476164
;sub_4760F0 endp

sub_4761E0: ;SUBROUTINE
	push edx
	mov eax, 0FFFFFFFFh
	call sub_486404
	mov edx, dword [dword_50B418]
	test edx, edx
	jnz loc_4761F7
	pop edx
	ret

loc_4761F7:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_50B418], ecx
	pop ecx
	pop edx
	ret
;sub_4761E0 endp

sub_476210: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor edx, edx

loc_476215:
	mov ecx, dword dword_50B418[edx]
	test ecx, ecx
	jnz loc_47622B
	add edx, 0Ch
	cmp edx, 6Ch
	jnz loc_476215
	pop edx
	pop ecx
	pop ebx
	ret

loc_47622B:
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword dword_50B418[edx], ebx
	add edx, 0Ch
	cmp edx, 6Ch
	jnz loc_476215
	pop edx
	pop ecx
	pop ebx
	ret
;sub_476210 endp

sub_476250: ;SUBROUTINE
	cmp byte [byte_512ECC], 0
	jnz locret_476262
	cmp dword [dword_4D5A20], 0
	jnz loc_476263

locret_476262:
	ret

loc_476263:
	push ecx
	call sub_495990
	mov eax, dword [dword_4D96A8]
	xor ecx, ecx
	call sub_4939AC
	mov dword [dword_4D96A8], ecx
	pop ecx
	ret
;sub_476250 endp

sub_476280: ;SUBROUTINE
	push ecx
	cmp byte [byte_512ECC], 0
	jnz loc_476293
	cmp dword [dword_4D5A20], 0
	jnz loc_476295

loc_476293:
	pop ecx
	ret

loc_476295:
	xor eax, eax
	call sub_489800
	call sub_495B2C
	cmp byte [byte_4D96A4], 0
	jz loc_4762CC
	call sub_495990

loc_4762AF:
	mov ecx, dword [dword_545940]
	test ecx, ecx
	jz loc_476293
	push ebx
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword [dword_545940], ebx
	pop ebx
	pop ecx
	ret

loc_4762CC:
	call sub_49DFEC
	jmp loc_4762AF
;sub_476280 endp

sub_4762E0: ;SUBROUTINE
	push ecx
	push edx
	cmp byte [byte_512ECC], 0
	jnz loc_4762F4
	cmp dword [dword_4D5A20], 0
	jnz loc_4762F7

loc_4762F4:
	pop edx
	pop ecx
	ret

loc_4762F7:
	mov eax, 64h
	xor edx, edx
	call sub_4864A0

loc_476303:
	call sub_49FEF0
	test eax, eax
	jle loc_476315
	xor eax, eax
	call sub_483EB0
	jmp loc_476303

loc_476315:
	call sub_495B2C
	cmp byte [byte_4D96A4], 0
	jz loc_476346
	call sub_495990

loc_476328:
	mov ecx, dword [dword_545940]
	test ecx, ecx
	jz loc_4762F4
	push ebx
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword [dword_545940], ebx
	pop ebx
	pop edx
	pop ecx
	ret

loc_476346:
	call sub_49DFEC
	jmp loc_476328
;sub_4762E0 endp

sub_476350: ;SUBROUTINE
	push ebx
	push ebp
	sub esp, 110h
	mov ebx, edx
	cmp eax, 63h
	jnz loc_476361
	xor eax, eax

loc_476361:
	cmp byte [byte_512ECC], 0
	jnz loc_476443
	cmp dword [dword_4D5A20], 0
	jz loc_476443
	cmp eax, 13h
	jg loc_476443
	test eax, eax
	jnz loc_47644C
	mov dword [dword_4D5A38], eax

loc_476391:
	cmp dword [dword_4D5A08], 1
	jnz loc_4763AB
	cmp eax, 9
	jge loc_4763AB
	cmp byte [byte_512F3F], 0
	jz loc_4763AB
	add eax, 9

loc_4763AB:
	push edi
	push esi
	push ecx
	cmp eax, 12h
	jz loc_47645B
	mov edx, dword off_4D9758[eax*4]
	push edx
	mov ecx, dword [dword_5134A0]
	push ecx
	push aSS_4 ; "%s%s"
	lea eax, [esp+18h]
	push eax
	call sprintf_
	add esp, 10h

loc_4763D8:
	mov esi, a_asf ; ".asf"
	lea edi, [esp+0Ch]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4763EA:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_476402
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4763EA

loc_476402:
	pop edi
	lea eax, [esp+10Ch]
	call sub_485380
	xor al, al
	lea edx, [esp+10Ch]
	mov [esp+114h], al
	mov eax, dword [dword_4D96A8]
	call sub_4958D0
	lea eax, [esp+0Ch]
	xor edx, edx
	call sub_4959EC
	mov eax, 64h
	mov edx, ebx
	call sub_4864A0
	pop ecx
	pop esi
	pop edi

loc_476443:
	add esp, 110h
	pop ebp
	pop ebx
	ret

loc_47644C:
	mov dword [dword_4D5A38], 1
	jmp loc_476391

loc_47645B:
	cmp byte [byte_4D97AA], 0
	jz loc_476491
	mov eax, dword [dword_5134A0]
	push eax
	push aSshow2 ; "%sshow2"

loc_47646F:
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	cmp byte [byte_4D97AA], 0
	jnz loc_47649F
	mov al, 1
	mov byte [byte_4D97AA], al
	jmp loc_4763D8

loc_476491:
	mov ebp, dword [dword_5134A0]
	push ebp
	push aSshow ; "%sshow"
	jmp loc_47646F

loc_47649F:
	xor al, al
	mov byte [byte_4D97AA], al
	jmp loc_4763D8
;sub_476350 endp

sub_4764B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov ebp, eax
	mov [esp+100h], edx
	mov ebx, 5DCh
	cmp eax, 63h
	jnz loc_4764D0
	xor ebp, eax

loc_4764D0:
	xor ah, ah
	mov dl, byte [byte_512ECC]
	mov byte [byte_4D96A4], ah
	test dl, dl
	jnz loc_476525
	cmp dword [dword_4D5A20], 0
	jz loc_476525
	cmp ebp, 13h
	jg loc_476525
	cmp byte [byte_512F3F], 0
	jnz loc_476531
	cmp ebp, 9
	jge loc_476531
	cmp byte [byte_512F40], 0
	jbe loc_476510
	mov eax, ebp
	call sub_4766D0
	mov ebp, eax

loc_476510:
	mov edx, [esp+100h]
	mov eax, ebp
	call sub_476350
	mov byte [byte_4D96A4], 1

loc_476525:
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_476531:
	test ebp, ebp
	jnz loc_476668
	mov dword [dword_4D5A38], ebp

loc_47653F:
	cmp dword [dword_4D5A08], 1
	jnz loc_476550
	cmp ebp, 9
	jge loc_476550
	add ebp, 9

loc_476550:
	cmp ebp, 12h
	jz loc_476677
	mov ecx, dword off_4D9758[ebp*4]
	push ecx
	mov esi, dword [dword_5134A0]
	push esi
	push aSS_4 ; "%s%s"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h

loc_47657A:
	mov esi, a_map ; ".map"
	mov edi, esp
	mov edx, 20h
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_47658F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4765A7
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47658F

loc_4765A7:
	pop edi
	mov eax, esp
	call sub_486F40
	mov dword [dword_545940], eax
	call sub_49DDD4
	mov edi, dword [dword_513484]
	push edi
	push aStemp ; "%stemp"
	lea eax, [esp+8]
	push eax
	mov esi, a_mus ; ".mus"
	call sprintf_
	add esp, 0Ch
	mov edi, esp
	mov edx, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4765E4:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4765FC
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4765E4

loc_4765FC:
	pop edi
	mov eax, dword [dword_4D96A8]
	call sub_49DE70
	mov eax, 1
	xor edx, edx
	call sub_4864A0
	mov edx, [esp+100h]
	mov eax, 64h
	call sub_4864A0
	cmp dword [dword_512228], 0
	jz loc_476525
	test ebp, ebp
	jz loc_476525
	cmp ebp, 9
	jz loc_476525
	mov al, byte byte_4D96B8[ebp*4]
	mov byte [byte_4D5A04], al
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_4D5A04]
	call sub_49DF64
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_476668:
	mov dword [dword_4D5A38], 1
	jmp loc_47653F

loc_476677:
	cmp byte [byte_4D97A9], 0
	jz loc_4766AE
	mov edx, dword [dword_5134A0]
	push edx
	push aSshow2 ; "%sshow2"

loc_47668C:
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	cmp byte [byte_4D97A9], 0
	jnz loc_4766BB
	mov al, 1
	mov byte [byte_4D97A9], al
	jmp loc_47657A

loc_4766AE:
	mov eax, dword [dword_5134A0]
	push eax
	push aSshow ; "%sshow"
	jmp loc_47668C

loc_4766BB:
	xor al, al
	mov byte [byte_4D97A9], al
	jmp loc_47657A
;sub_4764B0 endp

sub_4766D0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	sub esp, 40h
	mov ecx, 10h
	mov edi, esp
	mov esi, dword_4760A0
	mov dl, byte [byte_512F3F]
	rep movsd
	test dl, dl
	jnz loc_476702
	mov dh, byte [byte_512F40]
	cmp dh, 11h
	jz loc_47670A
	xor eax, eax
	mov al, dh
	mov eax, [esp+eax*4-4]

loc_476702:
	add esp, 40h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_47670A:
	push ebx
	mov bl, byte [byte_50B480]
	xor edx, edx
	mov dl, bl
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	mov ecx, 10h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	inc bl
	mov byte [byte_50B480], bl
	mov eax, [esp+edx*4+4]
	pop ebx
	add esp, 40h
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_4766D0 endp

sub_476750: ;SUBROUTINE
	push ebx
	push ebp
	sub esp, 104h
	mov ebx, eax
	mov ebp, edx
	mov dword [esp+100h], 5DCh
	cmp eax, 63h
	jnz loc_47676E
	xor ebx, eax

loc_47676E:
	xor ah, ah
	mov dl, byte [byte_512ECC]
	mov byte [byte_4D96A4], ah
	test dl, dl
	jnz loc_4768D1
	cmp dword [dword_4D5A20], 0
	jz loc_4768D1
	cmp ebx, 13h
	jg loc_4768D1
	cmp byte [byte_512F3F], 0
	jnz loc_4767AC
	cmp ebx, 9
	jl loc_4768DA

loc_4767AC:
	test ebx, ebx
	jnz loc_4768F3
	mov dword [dword_4D5A38], ebx

loc_4767BA:
	cmp dword [dword_4D5A08], 1
	jnz loc_4767CB
	cmp ebx, 9
	jge loc_4767CB
	add ebx, 9

loc_4767CB:
	push edi
	push esi
	push ecx
	cmp ebx, 12h
	jz loc_476902
	mov esi, dword off_4D9758[ebx*4]
	push esi
	mov edi, dword [dword_5134A0]
	push edi
	push aSS_4 ; "%s%s"
	lea eax, [esp+18h]
	push eax
	call sprintf_
	add esp, 10h

loc_4767F8:
	mov esi, a_map ; ".map"
	lea edi, [esp+0Ch]
	mov edx, 20h
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_47680F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_476827
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47680F

loc_476827:
	pop edi
	lea eax, [esp+0Ch]
	call sub_486F40
	mov dword [dword_545940], eax
	call sub_49DDD4
	cmp ebx, 12h
	jz loc_476956
	mov ecx, dword off_4D9708[ebx*4]
	push ecx
	mov ebx, dword [dword_5134A0]
	push ebx
	push aSS_4 ; "%s%s"
	lea eax, [esp+18h]
	push eax
	call sprintf_
	add esp, 10h

loc_476865:
	mov esi, a_mus ; ".mus"
	lea edi, [esp+0Ch]
	mov ebx, [esp+10Ch]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_47687E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_476896
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47687E

loc_476896:
	pop edi
	xor eax, eax
	lea edx, [esp+0Ch]
	call sub_49DAB0
	mov eax, dword [dword_4D96A8]
	call sub_49DE70
	mov eax, 1
	xor edx, edx
	call sub_4864A0
	mov eax, 7Fh
	call sub_49DAB0
	mov edx, ebp
	mov eax, 64h
	call sub_4864A0
	pop ecx
	pop esi
	pop edi

loc_4768D1:
	add esp, 104h
	pop ebp
	pop ebx
	ret

loc_4768DA:
	mov edx, ebp
	mov eax, ebx
	call sub_476350
	mov byte [byte_4D96A4], 1
	add esp, 104h
	pop ebp
	pop ebx
	ret

loc_4768F3:
	mov dword [dword_4D5A38], 1
	jmp loc_4767BA

loc_476902:
	cmp byte [byte_4D97A8], 0
	jnz loc_476934
	mov al, 1

loc_47690D:
	mov byte [byte_4D97A8], al
	test al, al
	jz loc_476938
	mov ecx, dword [dword_5134A0]
	push ecx
	push aSshow2 ; "%sshow2"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_4767F8

loc_476934:
	xor al, al
	jmp loc_47690D

loc_476938:
	mov edx, dword [dword_5134A0]
	push edx
	push aSshow ; "%sshow"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_4767F8

loc_476956:
	cmp byte [byte_4D97A8], 0
	jz loc_47697D
	mov edx, dword [dword_5134A0]
	push edx
	push aSshow2 ; "%sshow2"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_476865

loc_47697D:
	mov eax, dword [dword_5134A0]
	push eax
	push aSshow ; "%sshow"
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_476865
;sub_476750 endp

sub_4769A0: ;SUBROUTINE
	cmp byte [byte_512ECC], 0
	jnz locret_4769B2
	cmp dword [dword_4D5A20], 0
	jnz loc_4769B3

locret_4769B2:
	ret

loc_4769B3:
	push edx
	push ebx
	mov edx, 4000h
	shl eax, 0Ah
	xor ebx, ebx
	call sub_493718
	mov dword [dword_4D96A8], eax
	pop ebx
	pop edx
	ret
;sub_4769A0 endp

sub_4769D0: ;SUBROUTINE
	cmp byte [byte_512ECC], 0
	jnz locret_4769E2
	cmp dword [dword_4D5A20], 0
	jnz loc_4769E3

locret_4769E2:
	ret

loc_4769E3:
	push edx
	push ebx
	mov edx, 4000h
	mov eax, 4B000h
	xor ebx, ebx
	call sub_493718
	mov dword [dword_4D96A8], eax
	pop ebx
	pop edx
	ret
;sub_4769D0 endp

sub_476A00: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 120h
	mov ecx, eax
	mov esi, 80000h
	xor edi, edi
	mov ah, byte [byte_512F3F]
	mov [esp+11Ch], edi
	test ah, ah
	jz loc_476B83
	cmp byte [byte_512ECC], 0
	jnz loc_476B83
	cmp dword [dword_4D5A08], 1
	jnz loc_476A46
	cmp ecx, 9
	jge loc_476A46
	add ecx, 9

loc_476A46:
	push edx
	push ebx
	mov ebp, aCNfs2seGamePcA ; "c:\\nfs2se\\game\\pc\\audio.c"
	mov eax, 15Ah
	mov edx, esi
	xor ebx, ebx
	mov dword [dword_4DB1DC], eax
	mov eax, aBufptr ; "bufPtr"
	mov dword [dword_4DB1D8], ebp
	call sub_484498
	mov edx, dword off_4D9708[ecx*4]
	push edx
	mov ecx, dword [dword_5134A0]
	push ecx
	push aSS_mus ; "%s%s.mus"
	mov ebp, eax
	lea eax, [esp+14h]
	push eax
	call sprintf_
	add esp, 10h
	mov ebx, dword [dword_513484]
	push ebx
	push aStemp_mus ; "%stemp.mus"
	lea eax, [esp+90h]
	push eax
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+8]
	call sub_49E380
	mov [esp+120h], eax
	lea eax, [esp+88h]
	call sub_488570
	jmp loc_476ACE

loc_476ACE:
	lea ecx, [esp+118h]
	lea ebx, [esp+108h]
	lea edx, [esp+110h]
	lea eax, [esp+8]
	call sub_4877B4
	lea ecx, [esp+11Ch]
	lea ebx, [esp+10Ch]
	lea edx, [esp+114h]
	lea eax, [esp+88h]
	call sub_4877C4

loc_476B0D:
	mov eax, [esp+120h]
	sub eax, edi
	cmp eax, esi
	jge loc_476B27
	mov dword [esp+124h], 1
	mov esi, eax

loc_476B27:
	mov eax, [esp+110h]
	mov edx, edi
	call sub_487968
	mov ebx, esi
	mov eax, [esp+110h]
	mov edx, ebp
	call sub_487958
	mov eax, [esp+114h]
	mov ebx, esi
	mov edx, ebp
	call sub_487960
	mov eax, [esp+124h]
	add edi, esi
	test eax, eax
	jz loc_476B0D
	mov eax, [esp+110h]
	call sub_487950
	mov eax, [esp+114h]
	call sub_487950
	mov eax, ebp
	call sub_4848FC
	pop ebx
	pop edx

loc_476B83:
	add esp, 120h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_476A00 endp

sub_476BB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 8Ch
	mov edx, dword [dword_513484]
	push edx
	push aStemp_mus ; "%stemp.mus"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, esp
	mov esi, 0F00000h
	call sub_488570
	test eax, eax
	jnz loc_476C28

loc_476BE3:
	lea ecx, [esp+84h]
	lea ebx, [esp+88h]
	lea edx, [esp+80h]
	mov eax, esp
	call sub_4877C4
	mov eax, [esp+80h]
	mov edx, esi
	call sub_4599F0
	mov edx, eax
	mov eax, [esp+80h]
	call sub_487950
	mov eax, edx
	add esp, 8Ch
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_476C28:
	mov eax, esp
	call sub_4879AE
	jmp loc_476BE3
;sub_476BB0 endp

sub_476C40: ;SUBROUTINE
	push edx
	sub esp, 80h
	mov edx, dword [dword_513484]
	push edx
	push aStemp_mus ; "%stemp.mus"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	mov eax, esp
	call sub_488570
	test eax, eax
	jnz loc_476C73
	add esp, 80h
	pop edx
	ret

loc_476C73:
	push ecx
	lea eax, [esp+4]
	call sub_4879AE
	pop ecx
	add esp, 80h
	pop edx
	ret
;sub_476C40 endp

sub_476CA0: ;SUBROUTINE
	cmp dword [dword_4D5A1C], 0
	jnz sub_49FD50
	cmp dword [dword_4D5A20], 0
	jnz sub_49FD50
	ret
;sub_476CA0 endp

sub_49FD50: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jnz loc_49FD5F
	mov eax, 0FFFFFFF6h
	ret

loc_49FD5F:
	call sub_49DB20
	cmp dword [dword_4DDA94], 0
	jz loc_49FD73
	call dword [dword_4DDA94]

loc_49FD73:
	cmp dword [dword_4DDA98], 0
	jz loc_49FD82
	call dword [dword_4DDA98]

loc_49FD82:
	cmp dword [dword_4DDA9C], 0
	jz loc_49FD91
	call dword [dword_4DDA9C]

loc_49FD91:
	cmp dword [dword_4DDA8C], 0
	jz loc_49FDA5
	mov eax, 0FFFFFFFFh
	call dword [dword_4DDA8C]

loc_49FDA5:
	cmp dword [dword_4DDAA0], 0
	jz loc_49FDB4
	call dword [dword_4DDAA0]

loc_49FDB4:
	cmp dword [dword_4DDA90], 0
	jz loc_49FDC3
	call dword [dword_4DDA90]

loc_49FDC3:
	push edx
	call sub_488BA4
	mov edx, eax
	test eax, eax
	jl loc_49FDD9
	push ebx
	xor bl, bl
	mov byte [byte_4DDA74], bl
	pop ebx

loc_49FDD9:
	mov eax, dword [dword_59C600]
	call sub_489F74
	mov eax, edx
	pop edx
	ret
;sub_49FD50 endp

sub_476CC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	xor esi, esi
	mov edi, dword [dword_4D5A1C]
	mov dword [dword_4D96B0], esi
	test edi, edi
	jz loc_476D1B

loc_476CD6:
	test eax, eax
	jnz loc_476D32
	test edx, edx
	jnz loc_476D32
	and ebx, 808h
	cmp ebx, 808h
	jz loc_476D29

loc_476CEC:
	mov edx, 0FFFFFFFFh
	mov eax, edx

loc_476CF3:
	call sub_49FD00
	mov ecx, eax

loc_476CFA:
	test ecx, ecx
	jge loc_476D9D
	xor ecx, ecx
	mov dword [dword_4D5A20], ecx
	mov dword [dword_4D5A3C], ecx
	mov dword [dword_4D5A1C], ecx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_476D1B:
	cmp dword [dword_4D5A20], 0
	jnz loc_476CD6
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_476D29:
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	jmp loc_476CF3

loc_476D32:
	test eax, eax
	jnz loc_476D52
	cmp edx, 1
	jnz loc_476D52
	and ebx, 804h
	cmp ebx, 804h
	jnz loc_476CEC
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	jmp loc_476CF3

loc_476D52:
	cmp eax, 1
	jnz loc_476D72
	test edx, edx
	jnz loc_476D72
	and ebx, 802h
	cmp ebx, 802h
	jnz loc_476CEC
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	jmp loc_476CF3

loc_476D72:
	cmp eax, 1
	jnz loc_476CFA
	cmp edx, eax
	jnz loc_476CFA
	and ebx, 801h
	cmp ebx, 801h
	jnz loc_476CEC
	mov edx, 0FFFFFFFFh
	mov eax, ebx
	jmp loc_476CF3

loc_476D9D:
	call sub_442130
	mov eax, 0FFFFFFFFh
	call sub_48883C
	xor eax, eax
	mov dword [dword_4D96B4], eax
	mov dword [dword_4D96B0], eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_476CC0 endp

sub_476DC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	xor edx, edx
	xor eax, eax

loc_476DC9:
	mov dword dword_50B410[edx], eax
	inc eax
	add edx, 0Ch
	cmp eax, 9
	jl loc_476DC9
	movzx edi, byte [byte_512F3E]
	mov esi, dword [dword_4D5A1C]
	xor ebx, ebx
	xor edx, edx
	mov bl, byte [byte_512DFF]
	mov dword [dword_4D96B0], edx
	mov dl, byte [byte_512F41]
	test esi, esi
	jnz loc_476E08
	cmp dword [dword_4D5A20], 0
	jz loc_476E60

loc_476E08:
	mov eax, 0FFFFFFFFh
	call sub_48883C
	mov esi, eax
	test edx, edx
	jnz loc_476E6F
	test ebx, ebx
	jnz loc_476E6F
	and esi, 808h
	cmp esi, 808h
	jz loc_476E66

loc_476E2A:
	mov edx, 0FFFFFFFFh
	mov eax, edx

loc_476E31:
	call sub_49FD00
	mov ecx, eax

loc_476E38:
	test ecx, ecx
	jl loc_476ECA
	test edi, edi
	jz loc_476EE4
	xor eax, eax

loc_476E4A:
	call sub_488898
	call sub_442130
	xor eax, eax
	mov dword [dword_4D96B4], eax
	mov dword [dword_4D96B0], eax

loc_476E60:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_476E66:
	mov edx, 0FFFFFFFFh
	mov eax, esi
	jmp loc_476E31

loc_476E6F:
	test edx, edx
	jnz loc_476E8B
	cmp ebx, 1
	jnz loc_476E8B
	and eax, 804h
	cmp eax, 804h
	jnz loc_476E2A
	mov edx, 0FFFFFFFFh
	jmp loc_476E31

loc_476E8B:
	cmp edx, 1
	jnz loc_476EA7
	test ebx, ebx
	jnz loc_476EA7
	and eax, 802h
	cmp eax, 802h
	jnz loc_476E2A
	mov edx, 0FFFFFFFFh
	jmp loc_476E31

loc_476EA7:
	cmp edx, 1
	jnz loc_476E38
	cmp ebx, edx
	jnz loc_476E38
	and eax, 801h
	cmp eax, 801h
	jnz loc_476E2A
	mov edx, 0FFFFFFFFh
	jmp loc_476E31

loc_476ECA:
	xor ecx, ecx
	mov dword [dword_4D5A20], ecx
	mov dword [dword_4D5A3C], ecx
	mov dword [dword_4D5A1C], ecx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_476EE4:
	mov eax, 0FFFFFFCEh
	jmp loc_476E4A
;sub_476DC0 endp

sub_476EF0: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D97AC]
	test edx, edx
	jnz loc_476EFD
	pop edx
	ret

loc_476EFD:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D97AC], ecx
	pop ecx
	pop edx
	ret
;sub_476EF0 endp

sub_476F10: ;SUBROUTINE
	push ecx
	push edx
	xor edx, edx
	mov ecx, dword [dword_4D97AC]
	mov dword [dword_4D97B0], edx
	test ecx, ecx
	jz loc_476F27
	pop edx
	pop ecx
	ret

loc_476F27:
	push esi
	push ebx
	mov ebx, aCNfs2seGamePcC ; "c:\\nfs2se\\game\\pc\\CarIO.c"
	mov esi, 2ECh
	mov edx, 14820h
	mov eax, aDraw_tpixmap ; "Draw_tPixMap"
	mov dword [dword_4DB1D8], ebx
	xor ebx, ebx
	mov dword [dword_4DB1DC], esi
	call sub_4844B0
	mov dword [dword_4D97AC], eax
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret
;sub_476F10 endp

sub_476F60: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov [esp+5Ch], eax
	mov esi, edx
	mov eax, [edx]
	and eax, 0Fh
	mov eax, dword dword_511B88[eax*4]
	mov [edx+610h], eax
	mov edx, [esp+5Ch]
	mov [edx+88h], eax
	mov edx, [esi]
	and edx, 0Fh
	lea eax, 0[edx*4]
	sub eax, edx
	mov ebx, [esi+21Ch]
	mov eax, dword dword_5119C8[eax*4]
	xor edx, edx
	mov [esi+614h], eax
	mov eax, esi
	mov ebx, [ebx+0Ch]
	xor ecx, ecx
	call sub_4773F0
	mov eax, dword [dword_4D97B0]
	mov edx, [esp+5Ch]
	mov [esi+618h], eax
	mov [esp+50h], ecx
	mov [edx+84h], eax
	mov edx, 1
	mov [esi+61Ch], eax
	mov eax, [esp+5Ch]
	mov dword [dword_4D97B8], edx
	mov [esp+54h], eax

loc_476FEB:
	mov edx, [esp+54h]
	mov edx, [edx+4]
	mov eax, [esp+50h]
	mov ebx, [edx+4]
	shl eax, 2
	test ebx, ebx
	jnz loc_477033

loc_477000:
	mov edi, [esp+50h]
	mov ebx, [esp+54h]
	inc edi
	add ebx, 4
	mov [esp+50h], edi
	mov [esp+54h], ebx
	cmp edi, 20h
	jl loc_476FEB
	call sub_47F0A0
	mov dword [off_4DA200], eax
	xor eax, eax
	mov dword [dword_4D97B8], eax
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_477033:
	mov edx, [esp+54h]
	mov [esp+58h], eax
	xor edi, edi
	mov [esp+68h], edx
	mov ebp, edx
	mov [esp+4Ch], edi
	mov [esp+60h], edi

loc_47704B:
	mov eax, [esp+5Ch]
	add eax, [esp+58h]
	mov eax, [eax+4]
	mov edx, [esp+60h]
	cmp edx, [eax+4]
	jge loc_477000
	mov ebx, [esp+4Ch]
	mov eax, [eax+18h]
	add eax, ebx
	mov dl, [eax]
	test dl, 0E0h
	jz loc_4771AE
	mov al, dl
	and eax, 0FFh
	sar eax, 5
	mov [esp+64h], eax

loc_477081:
	xor eax, eax
	mov edx, [esp+64h]
	mov [esp+48h], eax
	test edx, edx
	jle loc_477195
	mov eax, [esp+4Ch]
	mov edi, eax
	mov [esp+44h], eax

loc_47709D:
	mov eax, [ebp+4]
	mov eax, [eax+18h]
	mov al, [edi+eax+8]
	mov [esp+38h], al
	mov eax, [ebp+4]
	mov eax, [eax+18h]
	mov al, [edi+eax+9]
	mov [esp+39h], al
	mov eax, [ebp+4]
	mov eax, [eax+18h]
	mov al, [edi+eax+0Ah]
	mov [esp+3Ah], al
	mov eax, [ebp+4]
	mov eax, [eax+18h]
	mov al, [edi+eax+0Bh]
	mov bl, [esp+39h]
	mov [esp+3Bh], al
	mov al, [esp+48h]
	xor dh, dh
	add bl, al
	mov [esp+3Ch], dh
	mov [esp+39h], bl
	mov eax, [ebp+4]
	mov eax, [eax+18h]
	add eax, edi
	mov bh, [eax]
	test bh, 4
	jz loc_4771E8
	test bh, 1
	jz loc_4771BB
	mov ecx, esp
	lea edx, [esp+38h]
	mov ebx, [esi+614h]
	mov eax, [esi+610h]
	call sub_4352C0
	imul ebx, dword [dword_4D97B0], 1Ch
	mov eax, dword [dword_4D97AC]
	mov edx, 4

loc_47712D:
	add ebx, eax
	mov eax, esp

loc_477131:
	call sub_435104
	mov edx, [esp+5Ch]
	mov ax, word [dword_4D97B0]
	mov bx, [edx+84h]
	mov edx, eax
	mov eax, [esp+68h]
	mov ecx, [esp+48h]
	sub edx, ebx
	mov eax, [eax+4]
	sub edx, ecx
	mov ecx, [esp+44h]
	mov eax, [eax+18h]
	add eax, ecx
	mov [eax+2], dx
	mov eax, [esp+68h]
	mov eax, [eax+4]
	mov eax, [eax+18h]
	mov edx, [esp+48h]
	add eax, ecx
	inc edx
	mov byte [eax+1], 0
	mov eax, dword [dword_4D97B0]
	mov [esp+48h], edx
	inc eax
	mov ecx, [esp+64h]
	mov dword [dword_4D97B0], eax
	cmp edx, ecx
	jl loc_47709D

loc_477195:
	mov edi, [esp+60h]
	mov ebx, [esp+4Ch]
	inc edi
	add ebx, 0Ch
	mov [esp+60h], edi
	mov [esp+4Ch], ebx
	jmp loc_47704B

loc_4771AE:
	mov dword [esp+64h], 1
	jmp loc_477081

loc_4771BB:
	mov ecx, esp
	lea edx, [esp+38h]
	mov ebx, [esi+614h]
	mov eax, [esi+610h]
	call sub_4352C0
	imul ebx, dword [dword_4D97B0], 1Ch
	mov eax, dword [dword_4D97AC]
	mov edx, 2
	jmp loc_47712D

loc_4771E8:
	mov ecx, esp
	lea edx, [esp+38h]
	mov ebx, [esi+614h]
	mov eax, [esi+610h]
	call sub_4352C0
	lea ebx, [esp+1Ch]
	mov edx, 1
	mov eax, esp
	call sub_435104
	imul ebx, dword [dword_4D97B0], 1Ch
	mov eax, dword [dword_4D97AC]
	mov edx, 3
	add ebx, eax
	lea eax, [esp+1Ch]
	jmp loc_477131
;sub_476F60 endp

sub_477230: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov [esp+20h], eax
	mov [esp+4], edx
	mov edx, ebx
	mov ebx, [eax]
	and ebx, 0Fh
	lea eax, 0[ebx*4]
	lea esi, 0[edx*4]
	sub eax, ebx
	mov ebx, [esp+20h]
	mov eax, dword dword_5119C8[esi+eax*4]
	mov [ebx+614h], eax
	mov eax, [esp+20h]
	mov ebx, ecx
	call sub_4773F0
	mov edx, [esp+20h]
	add esi, edx
	mov eax, dword [dword_4D97B0]
	mov [esi+61Ch], eax
	xor ecx, ecx
	mov [edx+618h], eax
	mov eax, [esp+4]
	mov [esp+0Ch], ecx
	mov [esp+10h], eax

loc_477296:
	mov eax, [esp+10h]
	mov eax, [eax+4]
	mov edx, [esp+0Ch]
	mov ebx, [eax+4]
	shl edx, 2
	test ebx, ebx
	jnz loc_4772DF

loc_4772AB:
	mov edx, [esp+0Ch]
	mov eax, [esp+10h]
	inc edx
	add eax, 4
	mov [esp+0Ch], edx
	mov [esp+10h], eax
	cmp edx, 20h
	jl loc_477296
	mov eax, [esp+20h]
	mov edx, [esp+20h]
	mov eax, [eax+61Ch]
	mov [edx+618h], eax
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret

loc_4772DF:
	mov edi, [esp+10h]
	xor esi, esi
	mov [esp+14h], edx
	mov [esp], esi
	mov [esp+18h], esi

loc_4772F0:
	mov eax, [esp+4]
	add eax, [esp+14h]
	mov eax, [eax+4]
	mov edx, [esp+18h]
	cmp edx, [eax+4]
	jge loc_4772AB
	mov ebx, [esp]
	mov eax, [eax+18h]
	add eax, ebx
	mov dl, [eax]
	test dl, 0E0h
	jz loc_4773DC
	mov al, dl
	and eax, 0FFh
	sar eax, 5
	mov [esp+1Ch], eax

loc_477325:
	mov ebp, [esp+1Ch]
	xor ecx, ecx
	test ebp, ebp
	jle loc_4773C5
	mov esi, [esp]
	mov ebp, [esp+4]

loc_47733A:
	imul edx, dword [dword_4D97B0], 1Ch
	mov eax, dword [dword_4D97AC]
	lea ebx, [eax+edx]
	mov [esp+8], ebx
	mov ebx, [edi+4]
	mov edx, [esp+20h]
	mov ebx, [ebx+18h]
	mov edx, [edx+614h]
	mov bx, [esi+ebx+2]
	and ebx, 0FFFFh
	add ebx, [ebp+84h]
	add ebx, ecx
	imul ebx, 1Ch
	add eax, ebx
	mov ebx, [esp+8]
	call sub_4352A0
	mov edx, [esp+20h]
	mov ax, word [dword_4D97B0]
	mov bx, [edx+618h]
	mov edx, eax
	mov eax, [edi+4]
	sub edx, ebx
	mov eax, [eax+18h]
	sub edx, ecx
	mov [esi+eax+2], dx
	mov edx, dword [dword_4D97B0]
	mov eax, [edi+4]
	mov ebx, [esp+1Ch]
	inc edx
	mov eax, [eax+18h]
	inc ecx
	mov dword [dword_4D97B0], edx
	mov byte [esi+eax+1], 0
	cmp ecx, ebx
	jl loc_47733A

loc_4773C5:
	mov ebp, [esp+18h]
	mov esi, [esp]
	inc ebp
	add esi, 0Ch
	mov [esp+18h], ebp
	mov [esp], esi
	jmp loc_4772F0

loc_4773DC:
	mov dword [esp+1Ch], 1
	jmp loc_477325
;sub_477230 endp

sub_4773F0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 310h
	mov esi, eax
	mov edi, ebx
	mov eax, [eax]
	and eax, 0Fh
	mov eax, dword dword_511B88[eax*4]
	mov ecx, dword [dword_4D97B4]
	mov [esi+610h], eax
	cmp ecx, 40h
	jl loc_477423
	xor ebx, ebx
	mov dword [dword_4D97B4], ebx

loc_477423:
	mov ebp, dword [dword_4D97B4]
	mov eax, dword [dword_4D97B4]
	mov ecx, [esi]
	shl ebp, 0Ah
	mov ebx, eax
	and ecx, 0Fh
	mov [esi+614h], eax
	lea eax, 0[ecx*4]
	add ebp, dword_545944
	sub eax, ecx
	shl edx, 2
	mov dword [off_4DA200], ebp
	mov dword dword_5119C8[edx+eax*4], ebx
	mov edx, ebx
	mov ecx, 100h
	inc edx
	mov eax, [esi+610h]
	mov dword [dword_4D97B4], edx
	mov edx, esp
	mov ebx, esp
	call sub_47F1C0
	mov eax, 2
	mov edx, edi
	call sub_458430
	lea eax, [esp+300h]
	lea ecx, [esp+30Ch]
	push eax
	mov eax, [esi+21Ch]
	lea ebx, [esp+30Ch]
	lea edx, [esp+308h]
	mov eax, [eax+0Ch]
	call sub_458670
	mov ecx, [esp+304h]
	mov ebp, dword [off_4DA200]
	test ecx, ecx
	jz loc_47755C

loc_4774C6:
	xor esi, esi
	xor al, al

loc_4774CA:
	mov bh, [esp+esi]
	cmp al, bh
	jnz loc_4774D8
	mov cl, bh
	inc cl
	mov [esp+esi], cl

loc_4774D8:
	mov ch, [esp+esi+1]
	cmp al, ch
	jnz loc_4774E8
	mov ah, ch
	inc ah
	mov [esp+esi+1], ah

loc_4774E8:
	mov dl, [esp+esi+2]
	cmp al, dl
	jnz loc_4774F8
	mov dh, dl
	inc dh
	mov [esp+esi+2], dh

loc_4774F8:
	add esi, 3
	cmp esi, 2FDh
	jl loc_4774CA

loc_477503:
	xor bl, bl
	mov [esp+esi], bl
	xor bh, bh
	mov [esp+esi+1], bl
	mov edi, ebp
	mov [esp+esi+2], bl
	xor esi, esi

loc_477516:
	mov edx, ebp
	lea eax, 0[esi*4]
	mov byte [edx+eax+3], 0FFh
	lea edx, [esi+esi*2]

loc_477527:
	lea ecx, [eax+ebp]
	mov bl, [esp+edx]
	mov [ecx+2], bl
	mov bl, [esp+edx+1]
	add edx, 3
	mov [ecx+1], bl
	inc esi
	mov bl, [esp+edx-1]
	add eax, 4
	mov [ecx], bl
	cmp eax, 400h
	jge loc_4775B8
	cmp eax, 3FCh
	jnz loc_477516
	mov [edi+eax+3], bh
	jmp loc_477527

loc_47755C:
	cmp dword [esp+308h], 0
	jnz loc_4774C6
	mov esi, [esp+30Ch]
	test esi, esi
	jnz loc_4774C6
	cmp dword [esp+300h], 0
	jnz loc_4774C6
	mov al, 50h
	xor ah, ah

loc_47758B:
	cmp al, [esp+esi]
	jbe loc_477593
	mov [esp+esi], ah

loc_477593:
	cmp al, [esp+esi+1]
	jbe loc_47759D
	mov [esp+esi+1], ah

loc_47759D:
	cmp al, [esp+esi+2]
	jbe loc_4775A7
	mov [esp+esi+2], ah

loc_4775A7:
	add esi, 3
	cmp esi, 2FDh
	jge loc_477503
	jmp loc_47758B

loc_4775B8:
	mov dword [off_4DA200], ebp
	add esp, 310h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4773F0 endp

sub_477620: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	mov esi, esp
	mov edi, edx
	call sub_46FE50
	mov esi, esp
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret
;sub_477620 endp

sub_477640: ;SUBROUTINE
	push edx
	push edi
	sub esp, 10h
	mov edx, esi
	mov ah, byte [byte_557518]
	test ah, ah
	jnz loc_47769C
	push ecx
	push ebx
	mov ebx, 1Ch
	mov esi, dword_55750C
	lea edi, [esp+8]
	mov byte [byte_557514], al
	xor ecx, ecx
	mov dword [dword_557510], ebx
	mov [esp+10h], esi
	mov [esp+14h], esi
	lea esi, [esp+10h]
	mov bl, ah
	mov dword [dword_55750C], ecx
	inc bl
	movsd
	movsd
	mov byte [byte_557518], bl
	pop ebx
	pop ecx
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 10h
	pop edi
	pop edx
	ret

loc_47769C:
	mov esi, esp
	call sub_46FE50
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 10h
	pop edi
	pop edx
	ret
;sub_477640 endp

sub_4776C0: ;SUBROUTINE
	push edx
	xor eax, eax
	call sub_44B2A0
	mov edx, eax
	xor eax, eax
	call sub_44B660
	test eax, eax
	jnz loc_4776EC
	cmp byte [edx+2DEh], 0
	jnz loc_4776EC
	mov eax, dword [dword_51205C]
	mov eax, dword dword_4D986C[eax*4]
	pop edx
	ret

loc_4776EC:
	mov eax, 1E0h
	pop edx
	ret
;sub_4776C0 endp

sub_477700: ;SUBROUTINE
	mov eax, dword [dword_51205C]
	shl eax, 3
	add eax, dword_4D980C
	ret
;sub_477700 endp

sub_477710: ;SUBROUTINE
	mov dword [eax], 0
	mov dword [edx], 0
	mov dword [ebx], 0
	ret
;sub_477710 endp

sub_477730: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_557500], edx
	pop edx
	ret
;sub_477730 endp

nullsub_56: ;SUBROUTINE
	ret
;nullsub_56 endp

dword_477780: times 8 dd 0

sub_4777A0: ;SUBROUTINE
	xor eax, eax
	ret
;sub_4777A0 endp

sub_4777B0: ;SUBROUTINE
	and eax, 0FFh
	jnz loc_477810
	test byte [dword_557968], 20h
	jnz loc_47780A

loc_4777C4:
	cmp eax, 4Bh
	jnz loc_4777D2
	test byte [dword_557968], 4
	jnz loc_47780A

loc_4777D2:
	cmp eax, 4Dh
	jnz loc_4777E0
	test byte [dword_557968], 8
	jnz loc_47780A

loc_4777E0:
	cmp eax, 48h
	jnz loc_4777EE
	test byte [dword_557968], 1
	jnz loc_47780A

loc_4777EE:
	cmp eax, 50h
	jnz loc_4777FC
	test byte [dword_557968], 2
	jnz loc_47780A

loc_4777FC:
	cmp eax, 1Ch
	jnz loc_47781B
	test byte [dword_557968], 10h
	jz loc_47781B

loc_47780A:
	mov eax, 0FFh
	ret

loc_477810:
	cmp byte byte_4DB2F4[eax], 0
	jz loc_4777C4
	jmp loc_47780A

loc_47781B:
	xor eax, eax
	ret
;sub_4777B0 endp

sub_477820: ;SUBROUTINE
	and eax, 0FFh
	cmp byte byte_4DB2F4[eax], 0
	jnz loc_477831
	xor eax, eax
	ret

loc_477831:
	push edx
	xor dh, dh
	mov eax, 0FFh
	mov byte [byte_4DB32B], dh
	pop edx
	ret
;sub_477820 endp

sub_477850: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov edx, eax
	shr edx, 14h
	shr eax, 10h
	shl edx, 6
	and eax, 7
	mov eax, dword dword_557540[edx+eax*4]
	mov edx, ecx
	and ecx, 0FFh
	and edx, 0FF00h
	shl ecx, 8
	cmp edx, ecx
	jge loc_4778B3
	cmp eax, edx
	jl loc_477890
	cmp eax, ecx
	jle loc_477896

loc_477887:
	mov eax, 0FFh
	pop edx
	pop ecx
	pop ebx
	ret

loc_477890:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_477896:
	sub eax, edx
	mov ebx, eax
	shl eax, 4
	add eax, ebx
	mov ebx, eax
	shl eax, 4
	sub eax, ebx
	sub ecx, edx
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	pop edx
	pop ecx
	pop ebx
	ret

loc_4778B3:
	jle loc_4778BD
	cmp eax, ecx
	jl loc_477887
	cmp eax, edx
	jle loc_4778C3

loc_4778BD:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4778C3:
	mov ebx, edx
	sub ebx, eax
	mov eax, ebx
	shl eax, 4
	add eax, ebx
	mov ebx, eax
	shl eax, 4
	sub edx, ecx
	sub eax, ebx
	mov ecx, edx
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_477850 endp

sub_4778F0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	shr eax, 14h
	shr edx, 10h
	mov ecx, eax
	call sub_4779A0
	mov eax, dword_557520
	shl ecx, 6
	and edx, 7
	add eax, ecx
	shl edx, 2
	add eax, 20h
	add eax, edx
	mov dword dword_557520[ecx+edx], eax
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_4778F0 endp

sub_477930: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	and eax, 1Fh
	shr edx, 10h
	mov cl, al
	mov eax, 1
	shl edx, 6
	shl eax, cl
	test dword dword_55755C[edx], eax
	jz loc_477956
	mov eax, 0FFh
	pop edx
	pop ecx
	ret

loc_477956:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_477930 endp

sub_477960: ;SUBROUTINE
	push edx
	mov edx, eax
	shr edx, 10h
	cmp edx, 10h
	jge loc_477982
	push ecx
	and eax, 1Fh
	mov cl, al
	mov eax, 1
	shl eax, cl
	not eax
	and dword dword_557920[edx*4], eax
	pop ecx

loc_477982:
	mov eax, edx
	call sub_4779A0
	mov eax, dword_557520
	shl edx, 6
	add eax, edx
	add eax, 3Ch
	mov dword dword_55753C[edx], eax
	xor eax, eax
	pop edx
	ret
;sub_477960 endp

sub_4779A0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov eax, byte_55796C

loc_4779A9:
	movsx edx, byte [eax]
	cmp edx, 0FFFFFFFFh
	jle loc_4779B8
	cmp edx, ecx
	jz loc_4779B8
	inc eax
	jmp loc_4779A9

loc_4779B8:
	cmp byte [eax], 0
	jl loc_4779C0
	pop edx
	pop ecx
	ret

loc_4779C0:
	mov byte [eax+1], 0FFh
	mov [eax], cl
	pop edx
	pop ecx
	ret
;sub_4779A0 endp

sub_4779D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	xor edx, edx
	mov edi, byte_55796C
	mov dword [dword_557968], edx

loc_4779E6:
	movsx esi, byte [edi]
	cmp esi, 0FFFFFFFFh
	jle loc_477A1E
	mov eax, esi
	shl eax, 6
	add eax, dword_557520
	mov ebp, [eax+18h]
	push ebp
	mov edx, [eax+14h]
	push edx
	mov ecx, [eax+10h]
	push ecx
	mov ebx, [eax+0Ch]
	mov ebp, [eax+8]
	push ebx
	mov edx, [eax+1Ch]
	mov ecx, [eax+4]
	push ebp
	mov ebx, [eax]
	mov eax, esi
	inc edi
	call sub_477C10
	jmp loc_4779E6

loc_477A1E:
	mov eax, 0Fh
	call sub_486550
	test eax, eax
	jnz loc_477A79
	cmp dword [dword_540F28], 0
	jz loc_477A70

loc_477A35:
	mov edi, dword [dword_557964]
	xor esi, esi
	test edi, edi
	jle loc_477A79
	mov [esp+0Ch], esi

loc_477A45:
	lea ebp, [esp+4]
	lea edi, [esp+8]
	xor ebx, ebx
	mov ecx, byte_55796C
	mov [esp+4], ebx
	mov [esp+8], ebx
	mov [esp], ebx
	mov ebx, esp

loc_477A61:
	movsx eax, byte [ecx]
	cmp eax, 0FFFFFFFFh
	jle loc_477ABA
	cmp eax, esi
	jz loc_477A83

loc_477A6D:
	inc ecx
	jmp loc_477A61

loc_477A70:
	cmp dword [dword_512214], 2
	jge loc_477A35

loc_477A79:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_477A83:
	mov edx, dword_557520
	shl eax, 6
	add edx, eax
	mov eax, [edx]
	test eax, eax
	jz loc_477A9A
	mov eax, [eax]
	xor ebx, ebx
	mov [esp], eax

loc_477A9A:
	mov eax, [edx+4]
	test eax, eax
	jz loc_477AA9
	mov eax, [eax]
	xor ebp, ebp
	mov [esp+4], eax

loc_477AA9:
	mov eax, [edx+1Ch]
	test eax, eax
	jz loc_477A6D
	mov eax, [eax]
	xor edi, edi
	mov [esp+8], eax
	jmp loc_477A6D

loc_477ABA:
	push 0
	push 0
	push 0
	push 0
	mov ecx, ebp
	push 0
	mov edx, edi
	mov eax, esi
	call sub_477C10
	test eax, eax
	jz loc_477B21
	mov eax, [esp]
	cmp eax, 4000h
	jge loc_477B40
	or byte [dword_557968], 4

loc_477AE4:
	mov ecx, [esp+4]
	cmp ecx, 4000h
	jge loc_477B50
	or byte [dword_557968], 1

loc_477AF7:
	mov edx, dword [dword_557968]
	mov edi, dword [dword_512214]
	or dl, 10h
	cmp edi, 2
	jl loc_477B61
	mov ecx, [esp+0Ch]
	mov eax, [esp+8]
	test dword dword_557920[ecx], eax

loc_477B19:
	jz loc_477B21
	mov dword [dword_557968], edx

loc_477B21:
	mov eax, [esp+0Ch]
	mov edx, dword [dword_557964]
	add eax, 4
	inc esi
	mov [esp+0Ch], eax
	cmp esi, edx
	jge loc_477A79
	jmp loc_477A45

loc_477B40:
	cmp eax, 0C000h
	jle loc_477AE4
	or byte [dword_557968], 8
	jmp loc_477AE4

loc_477B50:
	cmp ecx, 0C000h
	jle loc_477AF7
	or byte [dword_557968], 2
	jmp loc_477AF7

loc_477B61:
	cmp dword [esp+8], 0
	jmp loc_477B19
;sub_4779D0 endp

sub_477B70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 4
	xor edx, edx
	push edx
	push edx
	push edx
	push edx
	xor ecx, ecx
	xor ebx, ebx
	push edx
	mov [esp+14h], edx
	lea edx, [esp+14h]
	call sub_477C10
	mov eax, [esp]
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret
;sub_477B70 endp

sub_477BA0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov ecx, 6
	mov edi, esp
	mov esi, dword_477780
	rep movsd
	xor ecx, ecx
	mov [esp+18h], ecx
	cmp edx, 6
	jge loc_477BCF
	lea ecx, 0[edx*4]
	lea edx, [esp+18h]
	mov [esp+ecx], edx

loc_477BCF:
	push 0
	mov ebx, [esp+18h]
	push ebx
	mov esi, [esp+18h]
	push esi
	mov edi, [esp+18h]
	push edi
	mov ebp, [esp+18h]
	mov ecx, [esp+14h]
	push ebp
	xor edx, edx
	mov ebx, [esp+14h]
	call sub_477C10
	mov eax, [esp+18h]
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_477BA0 endp

sub_477C10: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, [esp+20h]
	push esi
	mov edi, [esp+20h]
	push edi
	mov ebp, [esp+20h]
	push ebp
	mov esi, [esp+20h]
	push esi
	mov edi, [esp+20h]
	push edi
	call sub_421B90
	pop ebp
	pop edi
	pop esi
	ret 14h
;sub_477C10 endp

sub_477C40: ;SUBROUTINE
	push edx
	mov edx, 1
	test eax, eax
	jz loc_477C56
	mov eax, 1Ah
	call sub_45B980
	pop edx
	ret

loc_477C56:
	mov eax, 18h
	call sub_45B980
	pop edx
	ret
;sub_477C40 endp

sub_477C70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	cmp dword [dword_557960], 0
	jz loc_477CA8
	xor edx, edx

loc_477C81:
	mov eax, dword dword_5128D0[edx]
	and eax, 0FFh
	cmp eax, 1
	jnz loc_477C9D
	mov eax, edx
	add eax, dword_5128D0
	call sub_477E20

loc_477C9D:
	add edx, 4
	cmp edx, 160h
	jnz loc_477C81

loc_477CA8:
	mov ecx, 103h
	mov esi, 4804h
	mov edi, 5004h
	mov ebp, 4B04h
	mov eax, 4D04h
	mov edx, 1C04h
	xor ebx, ebx
	mov dword [dword_512948], ecx
	mov dword [dword_51294C], ebx
	mov dword [dword_512934], esi
	mov dword [dword_512938], edi
	mov dword [dword_51293C], ebp
	mov dword [dword_512940], eax
	mov dword [dword_512944], edx
	mov ecx, 0F03h
	mov ebx, 3B03h
	mov esi, 3C03h
	mov edi, 3D03h
	mov ebp, 3E03h
	mov eax, 3F03h
	mov edx, 4003h
	mov dword [dword_512950], ecx
	mov dword [dword_51295C], ebx
	mov dword [dword_512958], esi
	mov dword [dword_512964], edi
	mov dword [dword_512968], ebp
	mov dword [dword_512978], eax
	mov dword [dword_51297C], edx
	mov ecx, 4103h
	mov ebx, 4203h
	mov esi, 4303h
	mov edi, 4403h
	mov eax, dword [dword_512214]
	xor ebp, ebp
	mov dword [dword_512974], ecx
	mov dword [dword_512988], ebx
	mov dword [dword_512984], esi
	mov dword [dword_512954], edi
	mov dword [dword_512930], ebp
	cmp eax, 2
	jl loc_477DED
	mov ecx, 0FFFFFFFFh
	xor edx, edx

loc_477D86:
	add edx, 4
	mov dword dword_55791C[edx], ecx
	cmp edx, 40h
	jnz loc_477D86
	mov eax, dword [dword_51298C]
	mov edx, eax
	and edx, 0FFh
	cmp edx, 2
	jnz loc_477DD1
	mov edx, eax
	sar edx, 18h
	cmp edx, 10h
	jge loc_477DD1
	mov ecx, eax
	sar ecx, 8
	mov eax, 1
	and ecx, 1Fh
	shl eax, cl
	mov ebx, dword dword_557920[edx*4]
	not eax
	and ebx, eax
	mov dword dword_557920[edx*4], ebx

loc_477DD1:
	mov eax, dword [dword_512994]
	mov edx, eax
	and edx, 0FFh
	cmp edx, 2
	jnz loc_477DED
	mov edx, eax
	sar edx, 18h
	cmp edx, 10h
	jl loc_477DF4

loc_477DED:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_477DF4:
	mov ecx, eax
	sar ecx, 8
	mov eax, 1
	and ecx, 1Fh
	shl eax, cl
	mov esi, dword dword_557920[edx*4]
	not eax
	and esi, eax
	mov dword dword_557920[edx*4], esi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_477C70 endp

sub_477E20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+0Ch], eax
	mov ebx, [esp+0Ch]
	mov esi, [esp+0Ch]
	mov ecx, dword [dword_557960]
	mov eax, [eax]
	xor edi, edi
	sar eax, 1Ch
	add ecx, 4
	mov [esp+8], eax
	mov eax, [esp+0Ch]
	mov ebx, [ebx]
	mov esi, [esi]
	mov eax, [eax]
	sar ebx, 8
	sar eax, 18h
	mov edx, [esp+8]
	and eax, 7
	shl edx, 1Ch
	mov [esp+4], eax
	shl eax, 18h
	and esi, 0FF00h
	add edx, eax
	and ebx, 0FF00h
	mov [esp], edx

loc_477E7B:
	mov eax, dword [dword_557960]
	cmp edi, [eax]
	jge loc_478007
	mov ebp, [esp+8]
	cmp ebp, [ecx]
	jz loc_477E96

loc_477E90:
	add ecx, 14h
	inc edi
	jmp loc_477E7B

loc_477E96:
	mov edx, [esp+4]
	cmp edx, [ecx+4]
	jnz loc_477E90
	lea eax, [ebx-8000h]
	lea ebp, [esi-8000h]
	cmp ebx, esi
	jge loc_477F7E
	cmp ebx, 8000h
	jge loc_477F4A
	mov ebp, [ecx+0Ch]
	mov edx, [ecx+10h]
	sub edx, ebp
	mov ebp, edx
	sar ebp, 1
	mov edx, ebx
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov edx, esi
	imul edx, ebp
	mov ebx, [ecx+0Ch]
	add ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov esi, [ecx+0Ch]

loc_477EF7:
	add esi, eax

loc_477EF9:
	sar ebx, 8
	sar esi, 8
	test ebx, ebx
	jl loc_477FF9
	cmp ebx, 0FFh
	jle loc_477F14
	mov ebx, 0FFh

loc_477F14:
	test esi, esi
	jl loc_478000
	cmp esi, 0FFh
	jle loc_477F29
	mov esi, 0FFh

loc_477F29:
	mov eax, ebx
	mov edx, [esp]
	shl eax, 10h
	add edx, eax
	mov eax, esi
	shl eax, 8
	add eax, edx
	mov edx, [esp+0Ch]
	inc eax
	mov [edx], eax
	add ecx, 14h
	inc edi
	jmp loc_477E7B

loc_477F4A:
	mov ebx, [ecx+8]
	mov esi, [ecx+10h]
	sub esi, ebx
	imul eax, esi
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov edx, ebp
	imul edx, esi
	add ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov esi, [ecx+8]
	jmp loc_477EF7

loc_477F7E:
	cmp ebx, 8000h
	jle loc_477FC3
	mov esi, [ecx+0Ch]
	mov ebp, [ecx+10h]
	sub ebp, esi
	mov edx, ebx
	sar ebp, 1
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov esi, [ecx+10h]
	sub esi, eax
	mov edx, esi
	imul edx, ebp
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov ebx, [ecx+10h]
	sub ebx, eax
	jmp loc_477EF9

loc_477FC3:
	mov ebx, [ecx+8]
	mov esi, [ecx+0Ch]
	sub esi, ebx
	imul eax, esi
	mov edx, eax
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov edx, ebp
	imul edx, esi
	sub ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 0Fh
	sbb eax, edx
	sar eax, 0Fh
	mov esi, [ecx+8]
	sub esi, eax
	jmp loc_477EF9

loc_477FF9:
	xor ebx, ebx
	jmp loc_477F14

loc_478000:
	xor esi, esi
	jmp loc_477F29

loc_478007:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_477E20 endp

sub_478020: ;SUBROUTINE
	push edx
	mov edx, dword [dword_557960]
	test edx, edx
	jnz loc_47802D
	pop edx
	ret

loc_47802D:
	mov eax, edx
	call sub_4848FC
	pop edx
	ret
;sub_478020 endp

sub_478040: ;SUBROUTINE
	push edx
	mov eax, aJoycal_cfg ; "JOYCAL.CFG"
	xor edx, edx
	call sub_486F50
	mov dword [dword_557960], eax
	pop edx
	ret
;sub_478040 endp

sub_478060: ;SUBROUTINE
	push edx
	push ecx
	call sub_421F10
	call SDL_NumJoysticks_wrap
	cmp eax, 10h
	jb loc_4780AB
	mov eax, 10h

loc_478078:
	mov edx, 0FFFFFFFFh
	mov dword [dword_557964], eax
	xor eax, eax
	pop ecx

loc_478085:
	add eax, 4
	mov dword dword_55791C[eax], edx
	cmp eax, 40h
	jnz loc_478085
	mov edx, 400h
	mov eax, dword_557520
	call sub_48A01C
	mov byte [byte_55796C], 0FFh
	pop edx
	ret

loc_4780AB:
	call SDL_NumJoysticks_wrap
	jmp loc_478078
;sub_478060 endp

sub_4780C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov eax, dword [dword_512E0C]
	mov edx, dword [dword_512E10]
	mov ecx, dword [dword_512E14]
	or eax, edx
	mov ebx, dword [dword_512E18]
	or eax, ecx
	mov esi, dword [dword_512E1C]
	or eax, ebx
	mov edi, dword [dword_512E20]
	or eax, esi
	mov ebp, dword [dword_512E24]
	or eax, edi
	mov edx, dword [dword_512E28]
	or eax, ebp
	mov ecx, dword [dword_512E2C]
	or eax, edx
	mov ebx, dword [dword_512E30]
	or eax, ecx
	or eax, ebx
	call sub_404D40
	test al, 3
	jz loc_478128
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478128:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4780C0 endp

sub_478140: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, dword [dword_511E40]
	cmp ecx, dword [dword_51220C]
	jle loc_47817D
	mov edx, [eax+2B8h]

loc_478156:
	mov ecx, 23D70h
	test edx, edx
	jle loc_478185
	mov eax, edx

loc_478161:
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	pop edx
	pop ecx
	ret

loc_47817D:
	mov edx, [eax+3A0h]
	jmp loc_478156

loc_478185:
	mov eax, edx
	neg eax
	jmp loc_478161
;sub_478140 endp

sub_478190: ;SUBROUTINE
	push ebx
	cmp word [word_4D991C], 0
	jnz loc_4781A6
	xor ebx, ebx
	mov word [word_4D991C], bx
	pop ebx
	ret

loc_4781A6:
	mov eax, dword [dword_557982]
	sar eax, 10h
	call sub_422980
	xor ebx, ebx
	mov word [word_4D991C], bx
	pop ebx
	ret
;sub_478190 endp

sub_4781C0: ;SUBROUTINE
	push ecx
	cmp dword [dword_4D9910], 0
	jnz loc_4781E0

loc_4781CA:
	xor ecx, ecx
	mov dword [dword_4D9914], ecx
	mov dword [dword_4D9918], ecx
	mov dword [dword_4D9910], ecx
	pop ecx
	ret

loc_4781E0:
	mov eax, dword [dword_55797E+2]
	sar eax, 10h
	call sub_422980
	jmp loc_4781CA
;sub_4781C0 endp

;Provides Force Feedback (Constant Force) when you crash on something
sub_4781F0: ;SUBROUTINE
	push esi
	mov esi, dword [dword_511E60]
	cmp esi, dword [dword_4D9920]
	jge loc_478201
	pop esi
	ret

loc_478201:
	push ecx
	push 0
	mov ecx, [edx]
	push 0
	sar ecx, 3
	push ebx
	mov esi, dword [dword_511E60]
	push 0
	add esi, ecx
	mov ebx, eax
	mov dword [dword_4D9920], esi
	mov esi, dword [dword_55797E]
	mov ecx, edx
	sar esi, 10h
	mov edx, 1
	mov eax, esi
	call sub_4225C0
	pop ecx
	pop esi
	ret
;sub_4781F0 endp

sub_478240: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 58h
	mov edx, 2710h
	mov ecx, 0C8h
	xor ah, ah
	xor esi, esi
	mov [esp], ah
	mov [esp+4], edx
	mov [esp+34h], ecx
	mov [esp+38h], edx
	mov dl, 2
	mov [esp+40h], esi
	mov [esp+3Ch], dl
	mov dh, 0FFh
	xor eax, eax
	mov [esp+3Dh], dh
	mov edx, esp
	mov [esp+44h], esi
	call sub_422A34
	test ax, ax
	jge loc_478292

loc_478287:
	xor eax, eax
	add esp, 58h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478292:
	mov bl, 3
	mov ebp, 2710h
	mov ecx, 72E4h
	mov edx, esp
	mov word [dword_55797E+2], ax
	mov [esp+8], esi
	mov [esp+0Ch], esi
	mov [esp], bl
	mov [esp+4], ebp
	mov [esp+10h], ecx
	mov ebx, 0FFFFFFh
	xor eax, eax
	mov [esp+34h], ebx
	call sub_422A34
	test ax, ax
	jl loc_478287
	mov bh, 9
	mov word [dword_557982], ax
	mov [esp+4], esi
	mov [esp+0Ch], ebp
	mov [esp+8], ebp
	mov [esp+14h], ebp
	mov edx, ebp
	mov [esp+10h], ebp
	mov [esp+18h], esi
	mov [esp+1Ch], esi
	mov [esp+24h], ebp
	mov [esp+20h], ebp
	mov [esp+2Ch], ebp
	mov [esp+28h], ebp
	xor edx, ebp
	mov eax, ebp
	mov [esp+30h], edx
	xor eax, ebp
	mov edx, esp
	mov [esp], bh
	call sub_422A34
	test ax, ax
	jl loc_478287
	mov word [dword_557982+2], ax
	mov eax, 1
	add esp, 58h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_478240 endp

sub_478340: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47834A
	ret

loc_47834A:
	push ecx
	mov eax, 10h
	xor ecx, ecx
	call sub_422E90
	mov dword [dword_4D98EC], ecx
	pop ecx
	ret
;sub_478340 endp

sub_478360: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ecx, eax
	cmp dword [dword_4D98F0], 0
	jz loc_47845B
	cmp eax, dword [dword_4D990C]
	jnz loc_47845B
	cmp dword [dword_512214], 1
	jle loc_47839A
	cmp dword [dword_522794], 2
	jnz loc_478465

loc_47839A:
	cmp dword [ecx+15Ch], 0
	jl loc_478471
	xor eax, eax
	mov dx, [ecx+14Ch]
	mov dword [dword_4D9900], eax
	test dx, dx
	jnz loc_478487
	cmp dword [dword_4D98FC], 0
	jz loc_478413
	mov esi, 244h
	mov ebx, 2710h
	mov [esp+18h], esi
	mov [esp], ebx
	mov edi, dword [dword_511E60]
	test di, 1
	jz loc_47849E
	mov dword [esp+1Ch], 14h

loc_4783F1:
	mov ebx, esp
	lea edx, [esp+18h]
	lea eax, [esp+1Ch]
	call sub_4781F0
	mov edx, 2
	xor ebx, ebx
	mov dword [dword_4D9930], edx
	mov dword [dword_4D98FC], ebx

loc_478413:
	mov esi, dword [dword_4D9908]
	test esi, esi
	jz loc_47842F
	lea edi, [esi-1]
	mov dword [dword_4D9908], edi
	test edi, edi
	jnz loc_47842F
	call sub_4781C0

loc_47842F:
	cmp dword [dword_4D98FC], 0
	jnz loc_478448
	cmp dword [dword_4D9900], 0
	jnz loc_478448
	mov eax, ecx
	call sub_47855C

loc_478448:
	mov ebx, dword [dword_4D9930]
	test ebx, ebx
	jle loc_4784AB
	lea esi, [ebx-1]
	mov dword [dword_4D9930], esi

loc_47845B:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478465:
	call sub_4781C0
	call sub_478190
	jmp loc_47845B

loc_478471:
	call sub_4781C0
	call sub_478190
	mov dword [dword_4D9900], 1
	jmp loc_47845B

loc_478487:
	call sub_4781C0
	mov ebp, 1
	call sub_478190
	mov dword [dword_4D98FC], ebp
	jmp loc_47845B

loc_47849E:
	mov dword [esp+1Ch], 154h
	jmp loc_4783F1

loc_4784AB:
	mov eax, ecx
	mov edi, 5
	call sub_47895C
	mov dword [dword_4D9930], edi
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_478360 endp

sub_4784D0: ;SUBROUTINE
	cmp dword [dword_4D98F0], 0
	jz loc_47850C
	cmp eax, dword [dword_4D990C]
	jnz loc_47850C
	cmp dword [dword_4D9900], 0
	jnz loc_47850C
	cmp dword [dword_512214], 1
	jle loc_4784FC
	cmp dword [dword_522794], 2
	jnz loc_478502

loc_4784FC:
	mov eax, 1
	ret

loc_478502:
	call sub_4781C0
	call sub_478190

loc_47850C:
	xor eax, eax
	ret
;sub_4784D0 endp

off_478520: dd loc_47859D
	dd loc_4787A0 ; jump table for switch statement
	dd loc_4786A3
	dd loc_478820
	dd loc_478724
	dd loc_4785A2
	dd loc_47889D
	dd loc_47859D
	dd loc_47859D
	dd loc_47859D
	dd loc_478820
	dd loc_47889D
	dd loc_478724
	dd loc_47859D
	dd loc_47859D

sub_47855C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 20h
	and esp, 0FFFFFFF8h
	mov edx, eax
	call sub_478140
	cmp eax, 2
	jl loc_4785B7
	cmp eax, 5
	jge loc_4785BE
	mov esi, 9C4h
	mov edi, 5

loc_478585:
	mov eax, [edx+184h]
	mov dword [dword_4D98F4], eax
	dec eax
	cmp eax, 0Eh ; switch 15 cases
	ja loc_47859D ; jumptable 00478596 default case
	jmp off_478520[eax*4] ; switch jump

loc_47859D:
	call sub_4781C0 ; jumptable 00478596 default case

loc_4785A2:
	mov dword [dword_4D9918], esi ; jumptable 00478596 case 5
	mov dword [dword_4D9914], edi

loc_4785AE:
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4785B7:
	call sub_4781C0
	jmp loc_4785AE

loc_4785BE:
	cmp eax, 0Ah
	jge loc_4785CF
	mov esi, 0BB8h
	mov edi, 6
	jmp loc_478585

loc_4785CF:
	cmp eax, 0Fh
	jge loc_4785E0
	mov esi, 0DACh
	mov edi, 7
	jmp loc_478585

loc_4785E0:
	cmp eax, 14h
	jge loc_4785F1
	mov esi, 0FA0h
	mov edi, 8
	jmp loc_478585

loc_4785F1:
	cmp eax, 1Eh
	jge loc_478602
	mov esi, 1194h
	mov edi, 9
	jmp loc_478585

loc_478602:
	cmp eax, 28h
	jge loc_478616
	mov esi, 1388h
	mov edi, 0Ah
	jmp loc_478585

loc_478616:
	cmp eax, 3Ch
	jge loc_47862A
	mov esi, 1194h
	mov edi, 0Bh
	jmp loc_478585

loc_47862A:
	cmp eax, 50h
	jge loc_47863E
	mov esi, 0FA0h
	mov edi, 0Ch
	jmp loc_478585

loc_47863E:
	cmp eax, 64h
	jge loc_478652
	mov esi, 0FA0h
	mov edi, 0Dh
	jmp loc_478585

loc_478652:
	cmp eax, 8Ch
	jge loc_478668
	mov esi, 0DACh
	mov edi, 0Eh
	jmp loc_478585

loc_478668:
	cmp eax, 6A4h
	jge loc_47867E
	mov esi, 0DACh
	mov edi, 0Fh
	jmp loc_478585

loc_47867E:
	cmp eax, 0C8h
	jge loc_478694
	mov esi, 0DACh
	mov edi, 10h
	jmp loc_478585

loc_478694:
	mov esi, 0BB8h
	mov edi, 11h
	jmp loc_478585

loc_4786A3:
	mov ecx, dword [dword_4D9910] ; jumptable 00478596 case 2
	sub edi, 2
	sub esi, 3E8h
	test ecx, ecx
	jz loc_4786CA
	cmp edi, dword [dword_4D9914]
	jnz loc_4786CA
	cmp esi, dword [dword_4D9918]
	jz loc_4785A2 ; jumptable 00478596 case 5

loc_4786CA:
	xor edx, edx
	mov [esp+18h], edi
	mov [esp+1Ch], edx
	fild qword [esp+18h]
	fdivr qword [dbl_4CE850]
	mov eax, esp
	push edx
	mov [esp+4], esi
	xor ecx, ecx
	push edx
	xor ebx, ebx
	mov [esp+0Ch], edx
	push eax
	mov [esp+14h], edx
	mov eax, dword [dword_55797E+2]
	push edx
	mov edx, 1
	fadd qword [dbl_4CE858]
	sar eax, 10h
	call __CHP
	fistp dword [esp+1Ch]
	call sub_4225C0
	mov dword [dword_4D9910], 1
	jmp loc_4785A2 ; jumptable 00478596 case 5

loc_478724:
	mov eax, dword [dword_4D9910] ; jumptable 00478596 cases 4,12
	dec edi
	sub esi, 5DCh
	test eax, eax
	jz loc_478748
	cmp edi, dword [dword_4D9914]
	jnz loc_478748
	cmp esi, dword [dword_4D9918]
	jz loc_4785A2 ; jumptable 00478596 case 5

loc_478748:
	xor ebx, ebx
	mov [esp+18h], edi
	mov [esp+1Ch], ebx
	fild qword [esp+18h]
	fdivr qword [dbl_4CE850]
	mov eax, esp
	push ebx
	mov edx, 1
	mov [esp+4], esi
	push ebx
	xor ecx, ecx
	mov [esp+0Ch], ebx
	push eax
	mov [esp+14h], ebx
	mov eax, dword [dword_55797E+2]
	push ebx
	fadd qword [dbl_4CE858]
	sar eax, 10h
	call __CHP
	fistp dword [esp+1Ch]
	call sub_4225C0
	mov dword [dword_4D9910], 1
	jmp loc_4785A2 ; jumptable 00478596 case 5

loc_4787A0:
	mov edx, dword [dword_4D9910] ; jumptable 00478596 case 1
	inc edi
	sub esi, 1F4h
	test edx, edx
	jz loc_4787C5
	cmp edi, dword [dword_4D9914]
	jnz loc_4787C5
	cmp esi, dword [dword_4D9918]
	jz loc_4785A2 ; jumptable 00478596 case 5

loc_4787C5:
	xor eax, eax
	mov [esp+18h], edi
	mov [esp+1Ch], eax
	fild qword [esp+18h]
	fdivr qword [dbl_4CE850]
	mov edx, 1
	mov [esp], esi
	push eax
	mov [esp+8], eax
	mov [esp+0Ch], eax
	push eax
	lea eax, [esp+8]
	xor ecx, ecx
	push eax
	xor ebx, ebx
	mov eax, dword [dword_55797E+2]
	push ecx
	fadd qword [dbl_4CE858]
	sar eax, 10h
	call __CHP
	fistp dword [esp+1Ch]
	call sub_4225C0
	mov dword [dword_4D9910], 1
	jmp loc_4785A2 ; jumptable 00478596 case 5

loc_478820:
	mov ebx, dword [dword_4D9910] ; jumptable 00478596 cases 3,10
	inc edi
	add esi, 3E8h
	test ebx, ebx
	jz loc_478845
	cmp edi, dword [dword_4D9914]
	jnz loc_478845
	cmp esi, dword [dword_4D9918]
	jz loc_4785A2 ; jumptable 00478596 case 5

loc_478845:
	xor ecx, ecx
	mov [esp+18h], edi
	mov [esp+1Ch], ecx
	fild qword [esp+18h]
	fdivr qword [dbl_4CE850]
	mov eax, esp
	push ecx
	mov edx, 1
	mov [esp+4], esi
	push ecx
	xor ebx, ebx
	mov [esp+0Ch], ecx
	push eax
	mov [esp+14h], ecx
	mov eax, dword [dword_55797E+2]
	push ecx
	fadd qword [dbl_4CE858]
	sar eax, 10h
	call __CHP
	fistp dword [esp+1Ch]
	call sub_4225C0
	mov dword [dword_4D9910], 1
	jmp loc_4785A2 ; jumptable 00478596 case 5

loc_47889D:
	mov edx, dword [dword_4D9910] ; jumptable 00478596 cases 6,11
	sub edi, 5
	add esi, 7D0h
	test edx, edx
	jz loc_4788C4
	cmp edi, dword [dword_4D9914]
	jnz loc_4788C4
	cmp esi, dword [dword_4D9918]
	jz loc_4785A2 ; jumptable 00478596 case 5

loc_4788C4:
	xor eax, eax
	mov [esp+18h], edi
	mov [esp+1Ch], eax
	fild qword [esp+18h]
	fdivr qword [dbl_4CE850]
	mov edx, 1
	mov [esp], esi
	push eax
	mov [esp+8], eax
	mov [esp+0Ch], eax
	push eax
	lea eax, [esp+8]
	xor ecx, ecx
	push eax
	xor ebx, ebx
	mov eax, dword [dword_55797E+2]
	push ecx
	fadd qword [dbl_4CE858]
	sar eax, 10h
	call __CHP
	fistp dword [esp+1Ch]
	call sub_4225C0
	mov dword [dword_4D9910], 1
	jmp loc_4785A2 ; jumptable 00478596 case 5
;sub_47855C endp

off_478920: dd loc_478A3F
	dd loc_478A3F ; jump table for switch statement
	dd loc_478AD4
	dd loc_478A3F
	dd loc_478AE6
	dd loc_478A3F
	dd loc_478A3F
	dd loc_478AFF
	dd loc_478AF8
	dd loc_478A3F
	dd loc_478A3F
	dd loc_478A3F
	dd loc_478AE6
	dd loc_478A3F
	dd loc_478AF8

sub_47895C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov edx, eax
	call sub_478140
	and al, 0F8h
	mov ebp, eax
	mov eax, [edx+664h]
	and al, 0F8h
	shl eax, 7
	mov ecx, dword [dword_4D992C]
	neg eax
	add eax, ecx
	sar eax, 1
	and al, 0F8h
	cmp eax, 0FFFFD8F0h
	jge loc_478995
	mov eax, 0FFFFD8F0h

loc_478995:
	cmp eax, 2710h
	jle loc_4789A1
	mov eax, 2710h

loc_4789A1:
	mov ebx, eax
	test ebp, ebp
	jnz loc_4789A9
	xor ebx, eax

loc_4789A9:
	mov dword [dword_4D992C], ebx
	test ebx, ebx
	jl loc_478AC4
	mov edi, ebx

loc_4789B9:
	mov eax, [edx+668h]
	sar eax, 1
	mov esi, dword [dword_4D9928]
	neg eax
	add eax, esi
	sar eax, 1
	cmp eax, 0FFFFFF9Ch
	jge loc_4789D7
	mov eax, 0FFFFFF9Ch

loc_4789D7:
	cmp eax, 64h
	jle loc_4789E1
	mov eax, 64h

loc_4789E1:
	mov esi, eax
	test ebp, ebp
	jnz loc_4789E9
	xor esi, eax

loc_4789E9:
	mov cl, byte [dword_4D9904]
	sar ebp, cl
	and ebp, 0FFFFFFF8h
	mov ecx, ebp
	shr ecx, 2
	add ecx, esi
	shr ecx, 1
	mov dword [dword_4D9928], esi
	cmp ecx, 64h
	jle loc_478A0D
	mov ecx, 64h

loc_478A0D:
	mov ebp, [edx+324h]
	mov eax, ecx
	cmp ebp, 10000h
	jle loc_478A20
	lea eax, [ecx-0Ah]

loc_478A20:
	test eax, eax
	jl loc_478ACD
	mov edx, eax

loc_478A2A:
	mov ecx, dword [dword_4D98F4]
	dec ecx
	mov eax, edx
	cmp ecx, 0Eh ; switch 15 cases
	ja loc_478A3F ; jumptable 00478A38 default case
	jmp off_478920[ecx*4] ; switch jump

loc_478A3F:
	mov edx, eax ; jumptable 00478A38 default case
	mov [esp+18h], ebx
	mov [esp+1Ch], edi
	mov [esp+20h], edi
	shl eax, 2
	mov [esp+24h], edi
	sub eax, edx
	mov [esp+28h], edi
	shl eax, 3
	xor ecx, ecx
	add eax, edx
	xor ebx, ebx
	shl eax, 2
	lea edx, 0[esi*4]
	mov [esp+4], eax
	mov [esp+8], eax
	mov [esp+0Ch], eax
	mov [esp+10h], eax
	sub edx, esi
	xor eax, eax
	shl edx, 3
	mov [esp+14h], eax
	push eax
	mov [esp+30h], eax
	add esi, edx
	push eax
	lea eax, [esp+8]
	shl esi, 2
	push eax
	xor edx, edx
	mov eax, dword [dword_557982]
	push edx
	mov edx, 1
	sar eax, 10h
	mov [esp+10h], esi
	call sub_4225C0
	mov word [word_4D991C], 1
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478AC4:
	mov edi, ebx
	neg edi
	jmp loc_4789B9

loc_478ACD:
	xor edx, edx
	jmp loc_478A2A

loc_478AD4:
	lea eax, [edx-0Ah] ; jumptable 00478A38 case 2
	test eax, eax
	jge loc_478A3F ; jumptable 00478A38 default case
	xor eax, eax
	jmp loc_478A3F ; jumptable 00478A38 default case

loc_478AE6:
	sub eax, 14h ; jumptable 00478A38 cases 4,12
	test eax, eax
	jge loc_478A3F ; jumptable 00478A38 default case
	xor eax, eax
	jmp loc_478A3F ; jumptable 00478A38 default case

loc_478AF8:
	sub eax, 1Eh ; jumptable 00478A38 cases 8,14
	test eax, eax
	jl loc_478B06

loc_478AFF:
	neg eax ; jumptable 00478A38 case 7
	jmp loc_478A3F ; jumptable 00478A38 default case

loc_478B06:
	xor eax, eax
	neg eax
	jmp loc_478A3F ; jumptable 00478A38 default case
;sub_47895C endp

sub_478B10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov edx, eax
	mov bl, byte [byte_4D9924]
	call sub_4784D0
	test eax, eax
	jz loc_478B60
	cmp byte [byte_4D9924], 64h
	jz loc_478B6A
	mov ecx, [edx+2B8h]
	cmp ecx, 1999h
	jl loc_478B60
	mov al, [edx+2DAh]
	mov byte [byte_4D9924], al
	cmp al, 2
	jnb loc_478BD0
	cmp al, 1
	jz loc_478B60
	cmp ecx, 10000h
	jg loc_478B77

loc_478B60:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478B6A:
	mov al, [edx+2DAh]
	mov byte [byte_4D9924], al
	jmp loc_478B60

loc_478B77:
	mov ebx, 20h
	mov esi, 1388h
	mov eax, 9C40h
	mov edx, 1
	xor edi, edi
	xor ecx, ecx
	mov dword [dword_4D9908], ebx
	push edi
	mov [esp+4], esi
	mov [esp+10h], eax
	push edi
	lea eax, [esp+8]
	mov [esp+0Ch], edi
	push eax
	xor ebx, ebx
	mov eax, dword [dword_55797E+2]
	push edi
	sar eax, 10h
	mov [esp+18h], edi
	call sub_4225C0
	mov dword [dword_4D9910], 1
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478BD0:
	cmp bl, al
	jbe loc_478C14
	mov dword [esp+18h], 0B5h

loc_478BDC:
	mov edi, [edx+2F0h]
	cmp edi, 7D0h
	jge loc_478C1E
	mov edx, 64h
	mov eax, 1068h
	mov [esp+1Ch], edx
	mov [esp], eax

loc_478BFB:
	mov ebx, esp
	lea edx, [esp+1Ch]
	lea eax, [esp+18h]
	call sub_4781F0
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_478C14:
	mov dword [esp+18h], 1
	jmp loc_478BDC

loc_478C1E:
	cmp edi, 0BB8h
	jge loc_478C39
	mov ebp, 96h
	mov edi, 1450h
	mov [esp+1Ch], ebp
	mov [esp], edi
	jmp loc_478BFB

loc_478C39:
	cmp edi, 0FA0h
	jge loc_478C54
	mov esi, 0C8h
	mov ebx, 1838h
	mov [esp+1Ch], esi
	mov [esp], ebx
	jmp loc_478BFB

loc_478C54:
	mov ecx, 0FAh
	mov edx, 1C20h
	mov [esp+1Ch], ecx
	mov [esp], edx
	jmp loc_478BFB
;sub_478B10 endp

sub_478C70: ;SUBROUTINE
	sub esp, 20h
	call sub_4784D0
	test eax, eax
	jnz loc_478C80
	add esp, 20h
	ret

loc_478C80:
	push edx
	push ecx
	push ebx
	mov edx, 1F40h
	mov ecx, 5Ah
	mov ebx, 10Eh
	lea eax, [esp+28h]
	mov [esp+0Ch], edx
	mov [esp+28h], ebx
	lea ebx, [esp+0Ch]
	lea edx, [esp+24h]
	mov [esp+24h], ecx
	call sub_4781F0
	pop ebx
	pop ecx
	pop edx
	add esp, 20h
	ret
;sub_478C70 endp

sub_478CC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 20h
	mov ecx, eax
	mov ebx, edx
	call sub_4784D0
	test eax, eax
	jnz loc_478CDC

loc_478CD4:
	add esp, 20h
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_478CDC:
	mov edx, [ecx+14h]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edx, [edx+eax*4+0Ch]
	sar edx, 18h
	mov eax, [ecx+0DCh]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+14h]
	mov esi, eax
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_5118A4]
	mov edx, [edx+eax*4+0Dh]
	sar edx, 18h
	mov eax, [ecx+0E0h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+14h]
	add esi, eax
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_5118A4]
	shl edx, 2
	mov edx, [edx+eax+0Eh]
	sar edx, 18h
	mov eax, [ecx+0E4h]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, esi
	test eax, eax
	jl loc_478DA3

loc_478D63:
	test ebx, ebx
	jle loc_478DAB
	mov dword [esp+1Ch], 5Ah

loc_478D6F:
	mov eax, ecx
	call sub_478140
	cmp eax, 28h
	jle loc_478DCF
	mov ebx, 0C8h
	mov ecx, 2710h
	mov [esp+18h], ebx
	mov [esp], ecx

loc_478D8C:
	mov ebx, esp
	lea edx, [esp+18h]
	lea eax, [esp+1Ch]
	call sub_4781F0
	add esp, 20h
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_478DA3:
	test ebx, ebx
	jz loc_478D63
	neg ebx
	jmp loc_478D63

loc_478DAB:
	jge loc_478DB7
	mov dword [esp+1Ch], 10Eh
	jmp loc_478D6F

loc_478DB7:
	mov eax, ecx
	call sub_478140
	cmp eax, 5
	jle loc_478CD4
	xor edx, edx
	mov [esp+1Ch], edx
	jmp loc_478D6F

loc_478DCF:
	mov eax, ecx
	call sub_478140
	cmp eax, 14h
	jle loc_478DEE
	mov edx, 12Ch
	mov eax, 2328h
	mov [esp+18h], edx
	mov [esp], eax
	jmp loc_478D8C

loc_478DEE:
	push edi
	mov ebp, 190h
	mov edi, 1B58h
	mov [esp+1Ch], ebp
	mov [esp+4], edi
	pop edi
	jmp loc_478D8C
;sub_478CC0 endp

sub_478E10: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 20h
	mov ebx, [esp+40h]
	mov ecx, edx
	mov esi, dword [dword_51220C]
	cmp esi, [eax+1E8h]
	jnz loc_478EEC
	mov edx, eax

loc_478E31:
	call sub_4784D0
	test eax, eax
	jz loc_478EF3

loc_478E3E:
	push edi
	cmp ebx, 2000h
	jge loc_478F03
	mov ecx, 1F40h
	mov eax, 28Ah

loc_478E55:
	mov [esp+4], ecx
	mov [esp+1Ch], eax

loc_478E5D:
	mov ebx, dword [dword_4D98F8]
	mov esi, dword [dword_4D98F8]
	mov eax, [edx+9Ch]
	mov ebp, [edx+9Ch]
	mov edi, eax
	add ebx, eax
	mov eax, [edx+170h]
	sub edi, esi
	cmp eax, ebp
	jle loc_478F6F
	mov ecx, 1

loc_478E8E:
	mov eax, [edx+178h]
	cmp eax, [edx+0A4h]
	jle loc_478F76
	mov eax, 1

loc_478EA5:
	mov ebp, [edx+170h]
	mov esi, eax
	cmp ebx, ebp
	jge loc_478F7D

loc_478EB5:
	mov eax, 1

loc_478EBA:
	test esi, esi
	jz loc_478FA4
	test eax, eax
	jz loc_478F8C
	xor eax, eax

loc_478ECC:
	mov [esp+20h], eax
	lea ebx, [esp+4]
	lea edx, [esp+1Ch]
	lea eax, [esp+20h]
	call sub_4781F0
	pop edi

loc_478EE2:
	add esp, 20h
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret 10h

loc_478EEC:
	mov edx, ecx
	jmp loc_478E31

loc_478EF3:
	mov eax, ecx
	call sub_4784D0
	test eax, eax
	jz loc_478EE2
	jmp loc_478E3E

loc_478F03:
	cmp ebx, 5000h
	jge loc_478F22
	mov ebp, 2134h
	mov edi, 1F4h
	mov [esp+4], ebp
	mov [esp+1Ch], edi
	jmp loc_478E5D

loc_478F22:
	cmp ebx, 10000h
	jge loc_478F41
	mov esi, 2328h
	mov ebx, 190h
	mov [esp+4], esi
	mov [esp+1Ch], ebx
	jmp loc_478E5D

loc_478F41:
	cmp ebx, 100000h
	jge loc_478F58
	mov ecx, 251Ch
	mov eax, 15Eh
	jmp loc_478E55

loc_478F58:
	mov ebp, 2710h
	mov edi, 15Eh
	mov [esp+4], ebp
	mov [esp+1Ch], edi
	jmp loc_478E5D

loc_478F6F:
	xor ecx, ecx
	jmp loc_478E8E

loc_478F76:
	xor eax, eax
	jmp loc_478EA5

loc_478F7D:
	cmp edi, ebp
	jg loc_478EB5
	xor eax, eax
	jmp loc_478EBA

loc_478F8C:
	test ecx, ecx
	jz loc_478F9A
	mov eax, 2Dh
	jmp loc_478ECC

loc_478F9A:
	mov eax, 13Bh
	jmp loc_478ECC

loc_478FA4:
	test eax, eax
	jz loc_478FB2
	mov eax, 0B4h
	jmp loc_478ECC

loc_478FB2:
	test ecx, ecx
	jz loc_478FC0
	mov eax, 87h
	jmp loc_478ECC

loc_478FC0:
	mov eax, 0E1h
	jmp loc_478ECC
;sub_478E10 endp

sub_478FD0: ;SUBROUTINE
	push esi
	push edi
	sub esp, 20h
	mov esi, eax
	mov edi, edx
	mov edx, ebx
	call sub_4784D0
	test eax, eax
	jnz loc_478FEA

loc_478FE4:
	add esp, 20h
	pop edi
	pop esi
	ret

loc_478FEA:
	mov eax, esi
	call sub_478140
	mov ebx, eax
	test eax, eax
	jz loc_478FE4
	mov esi, 258h
	sar eax, 1
	sub esi, eax
	mov [esp+18h], esi
	cmp esi, 0C8h
	jnb loc_479014
	mov dword [esp+18h], 0C8h

loc_479014:
	mov eax, ebx
	shl eax, 4
	add eax, 2134h
	mov [esp], eax
	cmp eax, 2710h
	jle loc_47902F
	mov dword [esp], 2710h

loc_47902F:
	test edx, edx
	jle loc_47906F
	mov dword [esp+1Ch], 1Eh

loc_47903B:
	test edi, edi
	jnz loc_47905A
	mov eax, 1964h
	shl ebx, 2
	sub eax, ebx
	mov ebx, [esp+18h]
	sub ebx, 15Eh
	mov [esp], eax
	mov [esp+18h], ebx

loc_47905A:
	mov ebx, esp
	lea edx, [esp+18h]
	lea eax, [esp+1Ch]
	call sub_4781F0
	add esp, 20h
	pop edi
	pop esi
	ret

loc_47906F:
	mov dword [esp+1Ch], 14Ah
	jmp loc_47903B
;sub_478FD0 endp

sub_479080: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47908A
	ret

loc_47908A:
	push ecx
	call sub_4781C0
	xor ecx, ecx
	call sub_478190
	mov dword [dword_5579E4], ecx
	mov dword [dword_4D9920], ecx
	pop ecx
	ret
;sub_479080 endp

off_4790B0: dd loc_47914A
	dd loc_47914A ; jump table for switch statement
	dd loc_479190
	dd loc_479190
	dd loc_479190
	dd loc_479190
	dd loc_47914A
	dd loc_47914A
	dd loc_479190
	dd loc_479190
	dd loc_47914A
	dd loc_479190

sub_4790E0: ;SUBROUTINE
	push ebx
	push ebp
	call sub_4791B4
	mov ebx, dword dword_511D08[eax*4]
	call sub_4780C0
	test eax, eax
	jz loc_479185
	cmp dword [dword_4D98EC], 0
	jz loc_479185
	cmp byte [dword_512ED4], 0
	jz loc_479185
	push edx
	push ecx
	mov edx, [ebx+108h]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov dword [dword_4D98F8], eax
	mov eax, [ebx+21Ch]
	mov ecx, 1
	mov eax, [eax]
	mov dword [dword_4D98F0], ecx
	cmp eax, 0Bh ; switch 12 cases
	ja loc_479190 ; jumptable 00479143 default case
	jmp off_4790B0[eax*4] ; switch jump

loc_47914A:
	push edi ; jumptable 00479143 cases 0,1,6,7,10
	xor edi, edi
	mov dword [dword_4D9904], edi
	pop edi

loc_479154:
	call sub_4791B4
	mov ecx, 0Ah
	mov eax, dword dword_511D08[eax*4]
	mov edx, sub_478360
	mov dword [dword_4D990C], eax
	mov ebx, eax
	mov eax, dword [dword_540F54]
	call sub_4714E0
	call sub_479080
	pop ecx
	pop edx
	pop ebp
	pop ebx
	ret

loc_479185:
	xor ebp, ebp
	mov dword [dword_4D98F0], ebp
	pop ebp
	pop ebx
	ret

loc_479190:
	mov dword [dword_4D9904], 1 ; jumptable 00479143 default case
	jmp loc_479154
;sub_4790E0 endp

off_4791A0: dd loc_4791CA
	dd loc_4791D6 ; jump table for switch statement
	dd loc_4791CA
	dd loc_4791CA
	dd loc_4791CA

sub_4791B4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov eax, dword [dword_512208]
	xor ebx, ebx
	cmp eax, 4 ; switch 5 cases
	ja loc_4791D0 ; jumptable 004791C3 default case
	jmp off_4791A0[eax*4] ; switch jump

loc_4791CA:
	mov ebx, dword [dword_51220C] ; jumptable 004791C3 cases 0,2-4

loc_4791D0:
	mov eax, ebx ; jumptable 004791C3 default case
	pop edx
	pop ecx
	pop ebx
	ret

loc_4791D6:
	xor edx, edx ; jumptable 004791C3 case 1
	xor eax, eax

loc_4791DA:
	mov ecx, dword off_4D201C[edx]
	mov ecx, [ecx]
	and ecx, 0FFh
	cmp ecx, 3
	jnz loc_4791F8
	inc eax
	add edx, 4
	cmp eax, 14h
	jge loc_4791D0 ; jumptable 004791C3 default case
	jmp loc_4791DA

loc_4791F8:
	cmp eax, 9
	jle loc_47920F
	mov ecx, 1
	mov ebx, ecx
	inc eax
	add edx, 4
	cmp eax, 14h
	jge loc_4791D0 ; jumptable 004791C3 default case
	jmp loc_4791DA

loc_47920F:
	xor ecx, ecx
	mov ebx, ecx
	inc eax
	add edx, 4
	cmp eax, 14h
	jge loc_4791D0 ; jumptable 004791C3 default case
	jmp loc_4791DA
;sub_4791B4 endp

sub_479220: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47922A
	ret

loc_47922A:
	mov eax, 10h
	jmp sub_422E90
;sub_479220 endp

sub_479240: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47924A
	ret

loc_47924A:
	mov eax, 10h
	jmp sub_422EF0
;sub_479240 endp

sub_479260: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47926A
	ret

loc_47926A:
	call sub_479080
	mov eax, 10h
	call sub_422F60
	jmp sub_479220
;sub_479260 endp

sub_479280: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_47928A
	ret

loc_47928A:
	mov eax, 10h
	jmp sub_422F60
;sub_479280 endp

sub_4792A0: ;SUBROUTINE
	cmp dword [dword_4D98EC], 0
	jnz loc_4792AA
	ret

loc_4792AA:
	mov eax, 10h
	jmp sub_422FC0
;sub_4792A0 endp

sub_4792C0: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, 10h
	call sub_422D60
	pop edx
	ret
;sub_4792C0 endp

sub_4792D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 4
	mov byte [esp], 0FFh
	mov eax, dword [dword_55797E+2]
	sar eax, 10h
	call sub_4228F0
	push 0
	lea eax, [esp+4]
	push eax
	xor ecx, ecx
	xor ebx, ebx
	push 0
	xor edx, edx
	mov eax, dword [dword_55797E+2]
	push 0
	sar eax, 10h
	call sub_4225C0
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4792D0 endp

sub_479310: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, 10h
	call sub_422D60
	cmp word [word_4D991E], 0
	jz loc_479329
	pop edx
	ret

loc_479329:
	mov eax, dword [dword_55797E+2]
	sar eax, 10h
	call sub_4229B0
	pop edx
	ret
;sub_479310 endp

sub_479340: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 20h
	mov edx, 0FFFFFFh
	mov ecx, 1388h
	mov edi, 72E4h
	xor ebx, ebx
	xor ah, ah
	mov [esp+18h], edx
	mov [esp], ecx
	mov [esp+4], ebx
	mov [esp+8], ebx
	mov [esp+0Ch], edi
	mov dx, word [word_4D991E]
	mov [esp+1Ch], ah
	test dx, dx
	jz loc_4793AB
	mov al, 3

loc_47937F:
	push 0
	lea edx, [esp+20h]
	lea ecx, [esp+1Ch]
	push edx
	lea edx, [esp+8]
	xor ebx, ebx
	push edx
	movsx edx, al
	mov eax, dword [dword_55797E+2]
	push 0
	sar eax, 10h
	call sub_4225C0
	add esp, 20h
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4793AB:
	mov al, 1
	jmp loc_47937F
;sub_479340 endp

sub_4793B0: ;SUBROUTINE
	push edx
	mov eax, dword [dword_5637F4]
	mov edx, dword [dword_4D98EC]
	test edx, edx
	jz loc_4793C7
	mov eax, 2
	pop edx
	ret

loc_4793C7:
	call sub_442240
	call sub_423020
	mov dword [dword_4D98EC], eax
	test eax, eax
	jz loc_47942A
	call sub_478240
	test eax, eax
	jz loc_479433
	push ebx
	call sub_4421F0
	mov eax, 10h
	mov dl, byte [dword_512ED4]
	call sub_422D60
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	call sub_421BD0
	test eax, eax
	jz loc_479422
	mov edx, aMicrosoft ; "Microsoft"
	add eax, 9
	call strstr_
	test eax, eax
	jz loc_479422
	mov word [word_4D991E], 1

loc_479422:
	mov eax, 2
	pop ebx
	pop edx
	ret

loc_47942A:
	call sub_4421F0
	xor eax, eax
	pop edx
	ret

loc_479433:
	call sub_4421F0
	mov dword [dword_4D98EC], edx
	xor eax, eax
	pop edx
	ret
;sub_4793B0 endp

dword_479450: dd 0FFA42626h, 0FFE30000h, 0FFFFFF30h, 0FF00F70Dh
dword_479460: dd 3F1F0000h
	times 2 dd 3F510000h
	dd 3F1F0000h
dword_479470: times 2 dd 3F020000h
	times 2 dd 3F340000h
dword_479480: dd 0Dh, 0Bh, 0Fh, 11h
dword_479490: dd 0Ch, 0Ah, 0Eh, 10h
dword_4794A0: dd 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h
dword_4794C4: dd 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
	times 2 dd 0
off_4794F0: dd loc_479592
	dd loc_479642
	dd loc_47966F
	dd loc_47969B
off_479500: dd loc_4796D7
	dd loc_47971A
	dd loc_479742
	dd loc_479769

sub_479510: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 70h
	mov ebp, esi
	lea edi, [esp+58h]
	mov esi, dword_479480
	movsd
	movsd
	movsd
	movsd
	lea edi, [esp+48h]
	mov esi, dword_479490
	movsd
	movsd
	movsd
	movsd
	mov ecx, 9
	lea edi, [esp+24h]
	mov esi, dword_4794A0
	rep movsd
	mov ecx, 9
	mov edi, esp
	mov esi, dword_4794C4
	xor ebx, ebx
	xor edx, edx
	rep movsd
	call sub_46FD80
	mov ecx, 15h
	xor eax, eax
	call sub_479840
	xor esi, esi
	xor edi, edi

loc_47956B:
	mov edx, dword [dword_5227A0]
	cmp esi, edx
	jnz loc_479791
	mov ebx, dword [dword_5227A4]
	test ebx, ebx
	jz loc_4796C8
	cmp edx, 3
	ja loc_4795C8
	jmp off_4794F0[edi]

loc_479592:
	mov ecx, 14h
	mov edx, 0FFFFFFE1h
	mov eax, 4
	xor ebx, ebx
	call sub_479840
	mov edx, dword [dword_522790]
	cmp edx, 1
	jnz loc_47962F
	mov ecx, 14h
	mov eax, 9
	mov ebx, edx

loc_4795C3:
	call sub_479840

loc_4795C8:
	inc esi
	add edi, 4
	cmp esi, 4
	jl loc_47956B
	mov ecx, dword [dword_4D955C]
	test ecx, ecx
	jz loc_479613
	mov edx, dword [dword_540F48]
	mov eax, edx
	shl eax, 4
	add edx, eax
	shl edx, 3
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	cmp eax, 88h
	jle loc_4797F6
	mov edx, 88h

loc_479602:
	mov ecx, 14h
	mov eax, 24h
	xor ebx, ebx
	call sub_479840

loc_479613:
	lea esi, [esp+68h]
	mov edi, ebp
	call sub_46FCF0
	lea esi, [esp+68h]
	movsd
	movsd
	mov eax, ebp
	add esp, 70h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47962F:
	mov ecx, 14h
	mov ebx, 1
	mov eax, 5
	mov edx, ebx
	jmp loc_4795C3

loc_479642:
	mov ecx, 14h
	mov eax, 4
	xor ebx, ebx
	xor edx, edx
	call sub_479840
	mov ebx, 1
	mov eax, dword [dword_522794]
	mov ecx, 14h
	mov edx, ebx
	mov eax, [esp+eax*4+58h]
	jmp loc_4795C3

loc_47966F:
	mov ecx, 14h
	mov edx, 1Fh
	mov eax, 4
	xor ebx, ebx
	call sub_479840
	mov ecx, 14h
	mov ebx, 1
	mov eax, 6
	mov edx, ebx
	jmp loc_4795C3

loc_47969B:
	mov ecx, 14h
	mov eax, 2
	xor ebx, ebx
	xor edx, edx
	call sub_479840
	mov ebx, 1
	mov eax, dword [dword_52279C]
	mov ecx, 14h
	mov edx, ebx
	mov eax, [esp+eax*4+24h]
	jmp loc_4795C3

loc_4796C8:
	cmp edx, 3
	ja loc_4795C8
	jmp off_479500[edi]

loc_4796D7:
	mov ecx, 14h
	mov edx, 0FFFFFFE1h
	mov eax, 3
	call sub_479840
	cmp dword [dword_522790], 1
	jnz loc_479707
	mov ecx, 14h
	mov eax, 9
	xor ebx, ebx
	xor edx, edx
	jmp loc_4795C3

loc_479707:
	mov ecx, 14h
	mov eax, 5
	xor ebx, ebx
	xor edx, edx
	jmp loc_4795C3

loc_47971A:
	mov ecx, 14h
	mov eax, 3
	xor edx, edx
	call sub_479840
	mov ecx, 14h
	mov eax, dword [dword_522794]
	xor ebx, ebx
	xor edx, edx
	mov eax, [esp+eax*4+58h]
	jmp loc_4795C3

loc_479742:
	mov ecx, 14h
	mov edx, 1Fh
	mov eax, 3
	call sub_479840
	mov ecx, 14h
	mov eax, 6
	xor ebx, ebx
	xor edx, edx
	jmp loc_4795C3

loc_479769:
	mov ecx, 14h
	mov eax, 1
	xor edx, edx
	call sub_479840
	mov ecx, 14h
	mov eax, dword [dword_52279C]
	xor ebx, ebx
	xor edx, edx
	mov eax, [esp+eax*4+24h]
	jmp loc_4795C3

loc_479791:
	cmp esi, 1
	jnb loc_4797BE
	test esi, esi
	jnz loc_4795C8
	cmp dword [dword_522790], 1
	jnz loc_4795C8
	mov ecx, 14h
	mov eax, 8
	xor ebx, ebx
	xor edx, edx
	jmp loc_4795C3

loc_4797BE:
	jbe loc_4797DF
	cmp esi, 3
	jnz loc_4795C8
	mov ecx, 14h
	mov eax, dword [dword_52279C]
	xor ebx, ebx
	xor edx, edx
	mov eax, [esp+eax*4]
	jmp loc_4795C3

loc_4797DF:
	mov ecx, 14h
	mov eax, dword [dword_522794]
	xor ebx, ebx
	xor edx, edx
	mov eax, [esp+eax*4+48h]
	jmp loc_4795C3

loc_4797F6:
	mov edx, eax
	jmp loc_479602
;sub_479510 endp

sub_479800: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 8
	mov ebp, esi
	call sub_46FD80
	mov ecx, 15h
	xor ebx, ebx
	xor edx, edx
	xor eax, eax
	mov esi, esp
	call sub_479840
	mov edi, ebp
	call sub_46FCF0
	mov esi, esp
	movsd
	movsd
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_479800 endp

sub_479840: ;SUBROUTINE
	push esi
	push edi
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov edx, 24h
	mov eax, esp
	call sub_46FD30
	test eax, eax
	jnz loc_47985F
	add esp, 4
	pop edi
	pop esi
	ret

loc_47985F:
	mov eax, [esp]
	mov [eax+4], ecx
	mov eax, [esp]
	mov edx, edi
	mov dword [eax+20h], dword_5588C8
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, dword dword_4D9958[eax*8]
	mov ecx, [esp]
	add edx, esi
	mov [ecx+8], edx
	mov edx, dword dword_4D995C[eax*8]
	mov ecx, [esp]
	add edx, ebx
	mov [ecx+0Ch], edx
	mov edx, [esp]
	mov ecx, dword dword_4D9950[eax*8]
	mov [edx+10h], ecx
	mov edx, [esp]
	mov ecx, dword dword_4D9954[eax*8]
	mov [edx+14h], ecx
	mov edx, [esp]
	mov ecx, dword dword_4D9948[eax*8]
	mov [edx+18h], ecx
	mov edx, dword dword_4D994C[eax*8]
	mov eax, [esp]
	mov [eax+1Ch], edx
	add esp, 4
	pop edi
	pop esi
	ret
;sub_479840 endp

sub_4798E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 3Ch
	mov [esp+0Ch], esi
	call sub_44B2A0
	mov edx, 35h
	mov ecx, 44h
	mov ebx, dword [dword_5118A0]
	mov [esp+24h], edx
	mov edx, [eax+14h]
	mov [esp+30h], ecx
	shl edx, 7
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword [dword_4DA110], eax
	mov eax, [ecx+9Ch]
	sar eax, 13h
	mov [esp+20h], eax
	mov ebx, eax
	mov eax, [ecx+0A4h]
	neg ebx
	sar eax, 13h
	mov [esp+20h], ebx
	mov [esp+1Ch], eax
	mov esi, eax
	mov eax, ecx
	neg esi
	call sub_47A0F0
	mov eax, dword [dword_55E300]
	mov [esp+1Ch], esi
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ebx, eax
	mov [esp+28h], eax
	mov eax, dword [dword_55E300]
	mov esi, [esp+20h]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	add esi, dword [dword_4D9D10]
	mov [esp+2Ch], eax
	imul eax, esi
	mov edi, 7Eh
	mov edx, dword_4D9D10
	mov [esp+34h], edi
	add edx, 4
	mov edi, [esp+1Ch]
	mov [esp+38h], edx
	add edi, dword [dword_4D9F10]
	imul ebx, edi
	mov ebp, dword_4D9F10
	mov ecx, dword_55E44C
	add ebp, 4
	mov edx, dword [dword_512228]
	sub eax, ebx
	xor edx, dword [dword_51222C]
	sar eax, 10h
	test edx, edx
	jz loc_479D4F
	mov edx, 35h
	sub edx, eax
	mov eax, edx

loc_479A00:
	imul edi, [esp+2Ch]
	mov [esp+14h], eax
	imul esi, [esp+28h]
	lea eax, [esi+edi]
	mov edx, dword [dword_512228]
	sar eax, 10h
	test edx, edx
	jz loc_479D57
	add eax, [esp+30h]

loc_479A26:
	mov ebx, dword_4DA114
	mov [esp+18h], eax
	xor edx, edx
	mov eax, dword_4DA118

loc_479A36:
	mov edi, [esp+14h]
	movsx si, byte [ebx]
	inc ebx
	add edi, esi
	inc eax
	mov [ecx+8], di
	mov edi, [esp+18h]
	movsx si, byte [eax-1]
	add ecx, 14h
	add edi, esi
	inc edx
	mov [ecx-0Ah], di
	cmp edx, 4
	jl loc_479A36
	sub ecx, 50h

loc_479A61:
	mov eax, [esp+38h]
	mov edx, [esp+20h]
	lea esi, [eax+4]
	mov edi, [eax]
	mov eax, ebp
	mov ebx, [esp+1Ch]
	mov [esp+38h], esi
	mov esi, [eax]
	add edx, edi
	add ebx, esi
	mov esi, [esp+2Ch]
	imul esi, edx
	mov edi, dword [dword_51222C]
	xor edi, dword [dword_512228]
	mov eax, [esp+28h]
	imul eax, ebx
	sub esi, eax
	add ebp, 4
	sar esi, 10h
	test edi, edi
	jz loc_479D64
	mov eax, [esp+24h]
	sub eax, esi
	mov esi, eax

loc_479AB0:
	mov eax, [esp+2Ch]
	imul eax, ebx
	imul edx, [esp+28h]
	add eax, edx
	mov edi, dword [dword_512228]
	sar eax, 10h
	test edi, edi
	jz loc_479D6D
	add eax, [esp+30h]

loc_479AD3:
	mov edx, dword_4DA114
	mov ebx, dword_4DA118
	mov [esp+8], eax
	xor eax, eax

loc_479AE3:
	movsx di, byte [edx]
	add edi, esi
	inc ebx
	mov [ecx+0Ch], di
	inc edx
	movsx di, byte [ebx-1]
	add ecx, 14h
	add edi, [esp+8]
	inc eax
	mov [ecx-6], di
	cmp eax, 4
	jl loc_479AE3
	mov ebx, dword_4DA118
	mov edx, dword_4DA114
	xor eax, eax

loc_479B11:
	movsx di, byte [edx]
	add edi, esi
	inc ebx
	mov [ecx+8], di
	inc edx
	movsx di, byte [ebx-1]
	add ecx, 14h
	add edi, [esp+8]
	inc eax
	mov [ecx-0Ah], di
	cmp eax, 4
	jl loc_479B11
	mov ebx, [esp+34h]
	dec ebx
	sub ecx, 50h
	mov [esp+34h], ebx
	cmp ebx, 0FFFFFFFFh
	jnz loc_479A61
	mov ebx, [esp+20h]
	mov edi, dword [dword_4D9D10]
	mov eax, [esp+2Ch]
	add ebx, edi
	imul eax, ebx
	mov edx, [esp+1Ch]
	mov ebp, dword [dword_4D9F10]
	mov esi, dword [dword_51222C]
	mov edi, dword [dword_512228]
	add edx, ebp
	xor edi, esi
	mov esi, [esp+28h]
	imul esi, edx
	sub eax, esi
	sar eax, 10h
	test edi, edi
	jz loc_479D7A
	mov esi, [esp+24h]
	sub esi, eax

loc_479B8F:
	imul edx, [esp+2Ch]
	mov eax, [esp+28h]
	imul eax, ebx
	add eax, edx
	mov ebp, dword [dword_512228]
	sar eax, 10h
	test ebp, ebp
	jz loc_479D85
	add eax, [esp+30h]

loc_479BB2:
	mov ebx, dword_4DA114
	mov edx, dword_4DA118
	mov [esp+8], eax
	xor eax, eax

loc_479BC2:
	movsx di, byte [ebx]
	add edi, esi
	inc edx
	mov [ecx+0Ch], di
	inc ebx
	movsx di, byte [edx-1]
	add ecx, 14h
	add edi, [esp+8]
	inc eax
	mov [ecx-6], di
	cmp eax, 4
	jl loc_479BC2
	mov ebx, [esp+20h]
	mov eax, dword [dword_5118A4]
	mov ebp, [esp+1Ch]
	mov esi, dword [dword_4D9D10]
	mov edx, [eax+0Fh]
	mov edi, [eax+11h]
	add ebx, esi
	sar edx, 18h
	mov eax, dword [dword_4D9F10]
	shl edx, 9
	add ebp, eax
	sar edx, 0Dh
	mov eax, [esp+2Ch]
	add ebx, edx
	imul eax, ebx
	sar edi, 18h
	shl edi, 9
	sar edi, 0Dh
	mov [esp+10h], edx
	add ebp, edi
	mov edx, [esp+28h]
	imul edx, ebp
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	imul ebx, [esp+28h]
	mov edx, [esp+2Ch]
	imul edx, ebp
	add edx, ebx
	mov esi, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, dword [dword_51222C]
	mov [esp+8], eax
	mov eax, dword [dword_512228]
	xor eax, ebx
	jz loc_479D92
	mov eax, [esp+24h]
	sub eax, esi

loc_479C77:
	mov esi, dword [dword_512228]
	mov [ecx+8], ax
	test esi, esi
	jz loc_479D9D
	mov eax, [esp+30h]
	add eax, [esp+8]

loc_479C91:
	mov [ecx+0Ah], ax
	mov ebp, [esp+20h]
	mov ebx, dword [dword_4D9D10]
	mov esi, [esp+10h]
	add ebp, ebx
	mov edx, [esp+2Ch]
	sub ebp, esi
	imul edx, ebp
	mov eax, dword [dword_4D9F10]
	mov ebx, [esp+1Ch]
	add ebx, eax
	mov eax, [esp+28h]
	sub ebx, edi
	imul eax, ebx
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	imul ebp, [esp+28h]
	mov edx, [esp+2Ch]
	imul edx, ebx
	add edx, ebp
	mov esi, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 10h
	sbb eax, edx
	sar eax, 10h
	mov ebx, dword [dword_51222C]
	mov [esp+8], eax
	mov eax, dword [dword_512228]
	xor eax, ebx
	jz loc_479DAA
	mov eax, [esp+24h]
	sub eax, esi

loc_479D0B:
	mov esi, dword [dword_512228]
	mov [ecx+0Ch], ax
	test esi, esi
	jz loc_479DB5
	mov eax, [esp+30h]
	add eax, [esp+8]

loc_479D25:
	mov edx, dword_560C4C
	mov edi, [esp+0Ch]
	mov esi, esp
	mov [ecx+0Eh], ax
	mov eax, dword_55E44C
	mov [esp+4], edx
	mov [esp], eax
	movsd
	movsd
	mov eax, [esp+0Ch]
	add esp, 3Ch
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_479D4F:
	add eax, 35h
	jmp loc_479A00

loc_479D57:
	mov edx, [esp+30h]
	sub edx, eax
	mov eax, edx
	jmp loc_479A26

loc_479D64:
	add esi, [esp+24h]
	jmp loc_479AB0

loc_479D6D:
	mov edx, [esp+30h]
	sub edx, eax
	mov eax, edx
	jmp loc_479AD3

loc_479D7A:
	mov esi, [esp+24h]
	add esi, eax
	jmp loc_479B8F

loc_479D85:
	mov edx, [esp+30h]
	sub edx, eax
	mov eax, edx
	jmp loc_479BB2

loc_479D92:
	mov eax, [esp+24h]
	add eax, esi
	jmp loc_479C77

loc_479D9D:
	mov eax, [esp+30h]
	sub eax, [esp+8]
	jmp loc_479C91

loc_479DAA:
	mov eax, [esp+24h]
	add eax, esi
	jmp loc_479D0B

loc_479DB5:
	mov eax, [esp+30h]
	sub eax, [esp+8]
	jmp loc_479D25
;sub_4798E0 endp

sub_479DD0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 34h
	mov ebx, dword [dword_55E434]
	mov [esp+14h], esi
	mov edx, eax
	mov ecx, 35h
	mov esi, 44h
	lea eax, 0[ebx*4]
	mov [esp+0Ch], ecx
	add eax, ebx
	mov ecx, dword_55BF60
	shl eax, 3
	mov [esp+10h], esi
	add ecx, eax
	mov eax, edx
	mov [esp], ecx
	call sub_44B2A0
	mov edx, [eax+9Ch]
	mov [esp+24h], eax
	sar edx, 13h
	mov eax, [eax+0A4h]
	mov [esp+20h], edx
	mov edi, edx
	sar eax, 13h
	neg edi
	mov [esp+1Ch], eax
	mov ebp, eax
	mov eax, dword [dword_55E300]
	mov [esp+20h], edi
	neg ebp
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov [esp+30h], eax
	mov eax, dword [dword_55E300]
	mov [esp+1Ch], ebp
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ebx, dword [dword_55E434]
	mov edx, dword [dword_51222C]
	mov [esp+2Ch], eax
	mov eax, dword [dword_512228]
	xor ecx, ecx
	xor eax, edx
	mov [esp+28h], ecx
	mov [esp+18h], eax
	xor edx, edx

loc_479EB2:
	mov esi, dword [dword_511E44]
	lea eax, [ebx+1]
	cmp ecx, esi
	jge loc_47A011
	mov edi, [esp+24h]
	cmp edi, dword dword_511CC8[edx]
	jz loc_47A004
	cmp ebx, 77h
	jl loc_479EDA
	xor eax, eax

loc_479EDA:
	imul eax, 28h
	mov esi, dword_55BF60
	add esi, eax
	imul eax, ebx, 28h
	mov ebp, 1Eh
	mov dword dword_55BF60[eax], esi
	mov esi, dword dword_511CC8[edx]
	mov dword dword_55BF64[eax], ebp
	test byte [esi+1F4h], 4
	jz loc_479FDF
	mov edi, 9

loc_479F10:
	mov dword dword_55BF74[eax], edi
	mov dword dword_55BF70[eax], edi
	mov esi, [esi+60Ch]
	mov esi, dword dword_560C6C[esi*4]
	mov dword dword_55BF84[eax], esi
	mov eax, dword dword_511CC8[edx]
	mov edi, [eax+9Ch]
	mov esi, [esp+20h]
	sar edi, 13h
	add edi, esi
	mov esi, [esp+2Ch]
	imul esi, edi
	mov eax, [eax+0A4h]
	mov ebp, [esp+1Ch]
	sar eax, 13h
	add eax, ebp
	mov [esp+8], esi
	mov esi, [esp+30h]
	imul esi, eax
	mov ebp, [esp+8]
	sub ebp, esi
	mov esi, ebp
	imul edi, [esp+30h]
	imul eax, [esp+2Ch]
	add edi, eax
	imul eax, ebx, 28h
	mov dword dword_55BF80[eax], dword_5588C8
	xor ebp, ebp
	mov dword dword_55BF78[eax], ebp
	mov ebp, 2Ch
	sar esi, 10h
	mov dword dword_55BF7C[eax], ebp
	mov eax, [esp+18h]
	sar edi, 10h
	test eax, eax
	jz loc_479FE9
	mov eax, 35h
	sub eax, esi
	lea esi, [eax-4]

loc_479FB1:
	imul eax, ebx, 28h
	mov dword dword_55BF68[eax], esi
	cmp dword [dword_512228], 0
	jz loc_479FEE
	lea eax, [edi+40h]

loc_479FC6:
	imul esi, ebx, 28h
	mov dword dword_55BF6C[esi], eax
	cmp ebx, 77h
	jl loc_479FFA
	xor ebx, ebx
	inc ecx
	add edx, 4
	jmp loc_479EB2

loc_479FDF:
	mov edi, 6
	jmp loc_479F10

loc_479FE9:
	add esi, 31h
	jmp loc_479FB1

loc_479FEE:
	mov eax, 44h
	sub eax, edi
	sub eax, 4
	jmp loc_479FC6

loc_479FFA:
	inc ebx
	inc ecx
	add edx, 4
	jmp loc_479EB2

loc_47A004:
	mov [esp+28h], ecx
	inc ecx
	add edx, 4
	jmp loc_479EB2

loc_47A011:
	lea edx, 0[ebx*4]
	add edx, ebx
	xor edi, edi
	mov ecx, dword_5588C8
	mov dword dword_55BF60[edx*8], edi
	mov ebp, 1Eh
	mov dword dword_55BF80[edx*8], ecx
	mov ecx, [esp+0Ch]
	mov dword dword_55BF64[edx*8], ebp
	sub ecx, 4
	mov esi, 9
	mov dword dword_55BF68[edx*8], ecx
	mov ecx, [esp+10h]
	mov dword dword_55BF70[edx*8], esi
	sub ecx, 4
	mov dword dword_55BF6C[edx*8], ecx
	mov dword dword_55BF7C[edx*8], 2Ch
	mov ecx, [esp+28h]
	mov dword dword_55BF74[edx*8], esi
	mov ecx, dword dword_511CC8[ecx*4]
	mov dword dword_55BF78[edx*8], edi
	mov ecx, [ecx+60Ch]
	mov ecx, dword dword_560C6C[ecx*4]
	mov dword dword_55BF84[edx*8], ecx
	cmp ebx, 77h
	jl loc_47A0A2
	xor eax, eax

loc_47A0A2:
	mov ebx, eax
	test eax, eax
	jle loc_47A0DD
	lea esi, [eax-1]

loc_47A0AB:
	lea eax, 0[esi*4]
	add eax, esi
	mov edx, dword_55BF60
	shl eax, 3
	mov edi, [esp+14h]
	add edx, eax
	mov esi, esp
	mov [esp+4], edx
	movsd
	movsd
	mov eax, [esp+14h]
	mov dword [dword_55E434], ebx
	add esp, 34h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47A0DD:
	mov esi, 77h
	jmp loc_47A0AB
;sub_479DD0 endp

sub_47A0F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov edx, dword [dword_5118A0]
	mov eax, [eax+14h]
	xor esi, esi
	xor ebx, ebx
	mov [esp], edx
	xor edx, edx

loc_47A10D:
	imul edi, eax, 24h
	mov ecx, dword [dword_5118A4]
	add ecx, edi
	mov edi, [ecx+0Ch]
	mov ecx, [ecx+0Eh]
	inc eax
	sar ecx, 18h
	sar edi, 18h
	shl ecx, 9
	shl edi, 9
	add ebx, ecx
	mov ecx, [esp]
	add esi, edi
	cmp eax, ecx
	jge loc_47A17B

loc_47A136:
	inc edx
	cmp edx, 20h
	jl loc_47A10D
	mov edx, esi
	mov eax, ebx
	sar edx, 5
	sar eax, 5
	call sub_49D7E0
	mov ebx, [ebp+288h]
	mov edx, eax
	cmp ebx, 94h
	jl loc_47A16C
	add eax, 200h
	cmp eax, 200h
	jl loc_47A16C
	sub eax, 400h

loc_47A16C:
	mov dword [dword_55E300], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47A17B:
	xor eax, eax
	jmp loc_47A136
;sub_47A0F0 endp

sub_47A180: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 18h
	mov ebp, esi
	mov edi, esp
	push dword_557D14
	mov ecx, 87h
	mov esi, dword_55BF50
	mov ebx, 6Ch
	xor edx, edx
	movsd
	movsd
	xor eax, eax
	lea esi, [esp+0Ch]
	call sub_47A220
	mov edx, [esp+4]
	push edx
	mov ecx, [esp+4]
	push ecx
	mov ebx, [esp+14h]
	mov esi, [esp+10h]
	push ebx
	mov edx, 5
	mov ecx, 7Fh
	push esi
	lea esi, [esp+18h]
	mov ebx, 61h
	call sub_46FDA0
	push dword_557D00
	lea esi, [esp+14h]
	mov eax, edx
	call sub_47A220
	mov edi, [esp+14h]
	push edi
	mov eax, [esp+14h]
	push eax
	mov edx, [esp+14h]
	push edx
	mov ecx, [esp+14h]
	push ecx
	lea esi, [esp+18h]
	mov edi, ebp
	call sub_46FDA0
	lea esi, [esp+8]
	movsd
	movsd
	mov eax, ebp
	add esp, 18h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47A180 endp

sub_47A220: ;SUBROUTINE
	push edi
	push ebp
	sub esp, 8
	mov ebp, esi
	mov esi, eax
	mov eax, [esp+14h]
	mov dword [eax+4], 18h
	mov word [eax+8], 0
	mov dword [eax], 0
	mov [esp], eax
	mov [eax+0Ah], si
	mov edi, ebp
	mov [eax+0Ch], dx
	add esi, ebx
	add edx, ecx
	mov [eax+0Eh], si
	mov esi, esp
	mov [esp+4], eax
	mov [eax+10h], dx
	movsd
	movsd
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	ret 4
;sub_47A220 endp

sub_47A270: ;SUBROUTINE
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	push ecx
	push ebx
	mov ah, 0FFh
	mov dl, 40h
	mov ecx, dword_55E44C
	mov ebp, 4
	xor edi, edi
	mov [esp+0Ch], ah
	mov [esp+10h], dl
	mov dh, 0E0h
	mov [esp+8], edi
	mov [esp+14h], dh
	mov [esp+18h], dl

loc_47A29F:
	mov esi, [esp+8]
	xor ebx, ebx

loc_47A2A5:
	mov edx, dword [dword_5118A0]
	imul edx, edi
	mov eax, edx
	sar edx, 1Fh
	shl edx, 7
	sbb eax, edx
	sar eax, 7
	imul eax, 24h
	mov edx, dword [dword_5118A4]
	add eax, edx
	mov edx, [eax]
	sar edx, 13h
	mov dword dword_4D9D10[esi], edx
	mov eax, [eax+8]
	sar eax, 13h
	mov dword dword_4D9F10[esi], eax
	lea eax, [ecx+50h]
	add ecx, 14h
	mov dword [ecx-10h], 12h
	mov byte [ecx-4], 0FFh
	mov byte [ecx-3], 0E0h
	mov byte [ecx-2], 0E0h
	mov byte [ecx-1], 0E0h
	inc ebx
	mov [ecx-14h], eax
	cmp ebx, 4
	jl loc_47A2A5
	mov ebx, [esp+8]
	add ebx, ebp
	inc edi
	mov [esp+8], ebx
	cmp edi, 80h
	jl loc_47A29F
	mov al, [esp+0Ch]
	mov dword [ecx+4], 12h
	mov [ecx+10h], al
	mov al, [esp+10h]
	mov [ecx+11h], al
	mov al, [esp+14h]
	mov edx, dword_55E44C
	mov [ecx+12h], al
	mov al, [esp+18h]
	add edx, 14h
	mov [ecx+13h], al
	mov eax, 27B0h
	pop ebx
	pop ecx

loc_47A348:
	mov dword dword_55E44C[eax], edx
	add eax, 14h
	add edx, 14h
	cmp eax, 27ECh
	jnz loc_47A348
	mov edx, dword_55E44C
	mov eax, 27B0h
	add edx, 14h

loc_47A368:
	mov dword dword_55E44C[eax], edx
	add eax, 14h
	add edx, 14h
	cmp eax, 27ECh
	jnz loc_47A368
	xor edi, edi
	mov esi, dword_560C4C
	mov dword [dword_560C4C], edi
	mov dword [dword_560C38], esi
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	ret
;sub_47A270 endp

sub_47A3A0: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	mov esi, dword [dword_51201C]
	cmp esi, 1
	jnb loc_47A3CD
	test esi, esi
	jnz loc_47A3E6
	mov edi, esp
	mov esi, dword_55BF58

loc_47A3BD:
	movsd
	movsd
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret

loc_47A3CD:
	jbe loc_47A3DD
	cmp esi, 2
	jnz loc_47A3E6
	mov edi, esp
	mov esi, dword_558C88
	jmp loc_47A3BD

loc_47A3DD:
	mov edi, esp
	mov esi, dword_55BF38
	jmp loc_47A3BD

loc_47A3E6:
	mov esi, esp
	call sub_46FE50
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret
;sub_47A3A0 endp

off_47A400: dd loc_47A553
	dd loc_47AC54 ; jump table for switch statement
	dd loc_47AC85
	dd loc_47ACB6
	dd loc_47ACE6
	dd loc_47AD15

sub_47A418: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 3Ch
	mov [esp+30h], esi
	mov ebp, edx
	cmp dword [dword_511FD4], 0
	jz loc_47AC3A
	test eax, eax
	jle loc_47AC3A
	mov edi, 0F1h

loc_47A43E:
	add ebp, ebp
	lea esi, 0[ebp*8]
	sub esi, ebp
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv ebx
	mov [esp+38h], eax
	cmp eax, 0Eh
	jle loc_47AC41
	mov dword [esp+38h], 0Eh

loc_47A467:
	mov edx, dword_558C98
	push 52h
	mov eax, dword [dword_4D9934]
	mov ebp, dword [dword_4D9938]
	lea esi, 0[eax*8]
	push 55h
	add esi, eax
	mov eax, dword_55D220
	shl esi, 2
	push 52h
	add eax, esi
	lea esi, 0[ebp*4]
	push 0FFh
	sub esi, ebp
	mov [esp+28h], eax
	shl esi, 2
	mov eax, dword_55AA98
	sub esi, ebp
	lea ebp, [edi+39h]
	shl esi, 2
	push ebp
	mov ebx, 35h
	add eax, esi
	push 0Ah
	mov [esp+28h], eax
	lea esi, [edi+20h]
	mov eax, dword [dword_4D993C]
	push ebp
	mov ecx, esi
	shl eax, 6
	push 35h
	add edx, eax
	mov eax, 0Ah
	mov [esp+28h], edx
	mov edx, esi
	call sub_47D1A0
	push 52h
	push 55h
	push 52h
	push 0FFh
	push esi
	push 20h
	mov ebx, 69h
	lea eax, [edi+8]
	push esi
	mov [esp+44h], eax
	mov ecx, eax
	push 69h
	mov edx, eax
	mov eax, 20h
	call sub_47D1A0
	push 52h
	push 55h
	push 52h
	push 0FFh
	lea eax, [edi+12h]
	push eax
	push 69h
	push eax
	mov ecx, [esp+44h]
	mov ebx, 0B0h
	push 0B0h
	mov edx, ecx
	mov eax, 69h
	call sub_47D1A0
	mov eax, [esp+38h]
	mov al, byte byte_4D9CE2[eax]
	cmp al, 5
	ja loc_47A553 ; jumptable 0047A54C case 0
	and eax, 0FFh ; switch 6 cases
	jmp off_47A400[eax*4] ; switch jump

loc_47A553:
	mov eax, [esp+38h] ; jumptable 0047A54C case 0
	cmp byte byte_4D9CF1[eax], 6
	jbe loc_47AA8C
	push 0
	push 0AEh
	push 0DEh
	push 0FFh
	lea eax, [edi+24h]
	push eax
	push 20h
	lea ebp, [edi+20h]
	mov ebx, 2Dh
	push ebp
	lea esi, [edi+1Ah]
	mov ecx, ebp
	push 20h
	mov edx, esi
	mov eax, 27h
	call sub_47D1A0
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 7
	jbe loc_47AA8C
	push 0
	push 0A2h
	push 0D1h
	push 0FFh
	lea eax, [edi+0Eh]
	push eax
	push 2Eh
	push 0
	push 0A2h
	push 0D1h
	push 0FFh
	push ebp
	push 3Dh
	push 0
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 2Dh
	mov ecx, 0DEh
	push 0
	mov ebx, 0FFh
	mov edx, esi
	push 0AEh
	mov [esp+7Ch], eax
	mov eax, 27h
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 8
	jbe loc_47AA8C
	push 0
	push 96h
	push 0C5h
	push 0FFh
	push ebp
	push 4Ch
	push 0
	push 96h
	push 0C5h
	push 0FFh
	lea eax, [edi+0Bh]
	push eax
	push 39h
	push 0
	push 0A2h
	push 0D1h
	push 0FFh
	mov ecx, [esp+6Ch]
	push ecx
	push 2Eh
	mov ebx, 0FFh
	push 0
	mov edx, ebp
	mov [esp+80h], eax
	push 0A2h
	mov eax, 3Dh
	mov ecx, 0D1h
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 9
	jbe loc_47AA8C
	push 0
	push 96h
	push 0C5h
	push 0FFh
	lea esi, [edi+8]
	push esi
	push 48h
	push 0
	push 96h
	push 0C5h
	push 0FFh
	push ebp
	push 56h
	push 0
	push 96h
	push 0C5h
	push 0FFh
	push ebp
	push 4Ch
	push 0
	mov ecx, 0C5h
	mov ebx, 0FFh
	push 96h
	mov edx, [esp+84h]
	mov eax, 39h
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 0Ah
	jbe loc_47AA8C
	push 4
	push 91h
	push 0C1h
	push 0FFh
	push ebp
	push 5Bh
	push 4
	push 91h
	push 0C1h
	push 0FFh
	push esi
	push 57h
	push 0
	push 96h
	push 0C5h
	push 0FFh
	push esi
	push 48h
	push 0
	mov ecx, 0C5h
	mov ebx, 0FFh
	push 96h
	mov eax, 56h
	mov edx, ebp
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 0Bh
	jbe loc_47AA8C
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push esi
	push 64h
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push ebp
	push 64h
	push 4
	push 91h
	push 0C1h
	push 0FFh
	push ebp
	push 5Bh
	push 4
	mov ecx, 0C1h
	mov ebx, 0FFh
	push 91h
	mov eax, 57h
	mov edx, esi
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 0Ch
	jbe loc_47AA8C
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push ebp
	push 69h
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push esi
	push 69h
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push esi
	push 64h
	push 8
	mov ecx, 0BDh
	mov ebx, 0FFh
	push 8Ch
	mov eax, 64h
	mov edx, ebp
	call sub_47D040
	push 0Ch
	push 87h
	push 0B9h
	push 0FFh
	push esi
	push 6Eh
	push 0Ch
	push 87h
	push 0B9h
	push 0FFh
	lea ebp, [edi+12h]
	push ebp
	push 6Eh
	push 8
	push 8Ch
	push 0BDh
	push 0FFh
	push ebp
	push 69h
	push 8
	mov ecx, 0BDh
	mov ebx, 0FFh
	push 8Ch
	mov eax, 69h
	mov edx, esi
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9D00[eax], 0Fh
	jbe loc_47AA8C
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push ebp
	push 79h
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push esi
	push 7Eh
	push 0Ch
	push 87h
	push 0B9h
	push 0FFh
	push esi
	push 6Eh
	push 0Ch
	mov ecx, 0B9h
	mov ebx, 0FFh
	push 87h
	mov eax, 6Eh
	mov edx, ebp
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9D00[eax], 10h
	jbe loc_47AA8C
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push esi
	push 8Ch
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push ebp
	push 86h
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push ebp
	push 79h
	push 10h
	mov ecx, 0B5h
	mov ebx, 0FFh
	push 82h
	mov eax, 7Eh
	mov edx, esi
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9D00[eax], 11h
	jbe loc_47AA8C
	push 3Ah
	push 3Dh
	push 0C5h
	push 0FFh
	push ebp
	push 8Ch
	push 3Ah
	push 3Dh
	push 0C5h
	push 0FFh
	push esi
	push 95h
	push 10h
	push 82h
	push 0B5h
	push 0FFh
	push esi
	push 8Ch
	push 10h
	mov ecx, 0B5h
	mov ebx, 0FFh
	push 82h
	mov eax, 86h
	mov edx, ebp
	call sub_47D040
	push 10h
	push 10h
	push 94h
	push 0FFh
	push ebp
	push 93h
	push 10h
	push 10h
	push 94h
	push 0FFh
	push esi
	push 9Ch
	push 3Ah
	push 3Dh
	push 0C5h
	push 0FFh
	push esi
	push 95h
	push 3Ah
	mov ecx, 0C5h
	mov ebx, 0FFh
	push 3Dh
	mov eax, 8Ch
	mov edx, ebp
	call sub_47D040
	mov eax, [esp+38h]
	cmp byte byte_4D9D00[eax], 12h
	jbe loc_47AA8C
	push 10h
	push 10h
	push 94h
	push 0FFh
	push esi
	push 0AFh
	push 10h
	push 10h
	push 94h
	push 0FFh
	push ebp
	push 0AFh
	push 10h
	push 10h
	push 94h
	push 0FFh
	push ebp
	push 93h
	push 10h
	mov ecx, 94h
	mov ebx, 0FFh
	push 10h
	mov eax, 9Ch
	mov edx, esi
	call sub_47D040

loc_47AA8C:
	push 1Ah
	push 2Bh
	push 35h
	mov ebx, 0Ah
	mov edx, dword_5588C8
	push 0
	mov eax, 14h
	lea ecx, [edi+20h]
	call sub_47D290
	push 18h
	push 49h
	push 4Fh
	mov ebx, 20h
	mov edx, dword_5588C8
	push 0
	mov eax, 14h
	lea ecx, [edi+8]
	call sub_47D290
	push 0Ch
	push 47h
	push 67h
	mov ebx, 69h
	mov edx, dword_5588C8
	push 0
	mov eax, 14h
	lea ecx, [edi+7]
	call sub_47D290
	push 20h
	push 20h
	push 73h
	mov ebx, 3
	mov edx, dword_5588C8
	push 0
	mov eax, 14h
	lea ecx, [edi+2]
	call sub_47D290
	mov ebx, dword [dword_4D9934]
	test ebx, ebx
	jle loc_47AD44
	lea edi, [ebx-1]

loc_47AB19:
	lea esi, 0[edi*8]
	add esi, edi
	xor edi, edi
	mov ebp, dword [dword_4D9938]
	mov dword dword_55D220[esi*4], edi
	test ebp, ebp
	jle loc_47AD4E
	lea edi, [ebp-1]

loc_47AB3C:
	lea esi, 0[edi*4]
	sub esi, edi
	shl esi, 2
	sub esi, edi
	xor eax, eax
	mov edx, dword [dword_4D9934]
	mov dword dword_55AA98[esi*4], eax
	test edx, edx
	jle loc_47AD58
	lea eax, [edx-1]

loc_47AB64:
	lea esi, 0[eax*8]
	add esi, eax
	mov eax, dword_55D220
	shl esi, 2
	add eax, esi
	mov ecx, dword [dword_4D9938]
	mov [esp+1Ch], eax
	test ecx, ecx
	jle loc_47AD62
	lea edi, [ecx-1]

loc_47AB8C:
	lea esi, 0[edi*4]
	sub esi, edi
	shl esi, 2
	sub esi, edi
	mov eax, dword_55AA98
	shl esi, 2
	add eax, esi
	mov [esp+14h], eax
	mov eax, [esp+38h]
	cmp byte byte_4D9CF1[eax], 7
	jbe loc_47AD80
	mov eax, dword [dword_4D993C]
	test eax, eax
	jle loc_47AD6C
	dec eax

loc_47ABC7:
	shl eax, 6
	xor edx, edx
	mov ecx, dword [dword_4D993C]
	mov dword dword_558C98[eax], edx
	test ecx, ecx
	jle loc_47AD76
	lea eax, [ecx-1]

loc_47ABE3:
	mov edx, dword_558C98
	mov ebx, [esp+1Ch]
	mov esi, [esp+18h]
	push ebx
	shl eax, 6
	push esi
	add edx, eax
	push edx
	mov ebp, [esp+14h]
	push ebp
	lea esi, [esp+30h]
	call sub_46FDA0
	mov eax, [esp+24h]
	push eax
	mov [esp+10h], edx
	mov edx, [esp+24h]
	push edx
	mov ecx, [esp+1Ch]
	push ecx
	mov ebx, [esp+1Ch]
	push ebx

loc_47AC1E:
	lea esi, [esp+10h]
	call sub_46FDA0
	mov edi, [esp+30h]
	mov esi, esp
	movsd
	movsd
	mov eax, [esp+30h]
	add esp, 3Ch
	pop ebp
	pop edi
	pop ecx
	ret

loc_47AC3A:
	xor edi, edi
	jmp loc_47A43E

loc_47AC41:
	test eax, eax
	jge loc_47A467
	xor esi, esi
	mov [esp+38h], esi
	jmp loc_47A467

loc_47AC54:
	push 0 ; jumptable 0047A54C case 1
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 0Ah
	push ebp
	mov ebx, 1Eh
	lea ecx, [edi+32h]
	push 1Eh
	mov eax, 0Ah
	lea edx, [edi+30h]
	call sub_47D1A0
	jmp loc_47A553 ; jumptable 0047A54C case 0

loc_47AC85:
	push 0 ; jumptable 0047A54C case 2
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 0Ah
	push ebp
	mov ebx, 22h
	lea ecx, [edi+2Dh]
	push 22h
	mov eax, 0Ah
	lea edx, [edi+24h]
	call sub_47D1A0
	jmp loc_47A553 ; jumptable 0047A54C case 0

loc_47ACB6:
	push 0 ; jumptable 0047A54C case 3
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 0Ah
	push ebp
	mov ebx, 29h
	mov eax, 1Ah
	push 29h
	lea ecx, [edi+27h]
	mov edx, esi
	call sub_47D1A0
	jmp loc_47A553 ; jumptable 0047A54C case 0

loc_47ACE6:
	push 0 ; jumptable 0047A54C case 4
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 0Ah
	push ebp
	mov ebx, 2Eh
	mov eax, 0Ah
	push 35h
	mov ecx, esi
	mov edx, esi
	call sub_47D1A0
	jmp loc_47A553 ; jumptable 0047A54C case 0

loc_47AD15:
	push 0 ; jumptable 0047A54C case 5
	push 0AEh
	push 0DEh
	push 0FFh
	push ebp
	push 0Ah
	push ebp
	mov ebx, 35h
	mov eax, 0Ah
	push 35h
	mov ecx, esi
	mov edx, esi
	call sub_47D1A0
	jmp loc_47A553 ; jumptable 0047A54C case 0

loc_47AD44:
	mov edi, 77h
	jmp loc_47AB19

loc_47AD4E:
	mov edi, 77h
	jmp loc_47AB3C

loc_47AD58:
	mov eax, 77h
	jmp loc_47AB64

loc_47AD62:
	mov edi, 77h
	jmp loc_47AB8C

loc_47AD6C:
	mov eax, 77h
	jmp loc_47ABC7

loc_47AD76:
	mov eax, 77h
	jmp loc_47ABE3

loc_47AD80:
	mov ebx, [esp+1Ch]
	push ebx
	mov esi, [esp+1Ch]
	push esi
	mov edi, [esp+1Ch]
	push edi
	mov ebp, [esp+1Ch]
	push ebp
	jmp loc_47AC1E
;sub_47A418 endp

sub_47ADA0: ;SUBROUTINE
	push edx
	push edi
	sub esp, 8
	mov edx, esi
	mov esi, esp
	mov edi, edx
	call sub_46FE50
	mov esi, esp
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop edi
	pop edx
	ret
;sub_47ADA0 endp

sub_47ADC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	sub esp, 88h
	mov ecx, esi
	mov edx, dword [dword_511FF4]
	cmp edx, 0FFFFFFFFh
	jz loc_47AE12
	cmp byte [byte_511FF8], 0
	jnz loc_47AE20
	mov ebx, 0Dh
	lea esi, [esp+80h]
	mov eax, edx

loc_47ADEE:
	xor edx, edx
	call sub_459970
	call sub_47AE50

loc_47ADFA:
	lea esi, [esp+80h]
	mov edi, ecx
	movsd
	movsd
	mov eax, ecx
	add esp, 88h
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47AE12:
	lea esi, [esp+80h]
	call sub_46FE50
	jmp loc_47ADFA

loc_47AE20:
	push byte_511FF8
	mov eax, edx
	call sub_459970
	push eax
	lea eax, [esp+8]
	push eax
	mov ebx, 0Dh
	lea esi, [esp+8Ch]
	call sprintf_
	add esp, 0Ch
	mov eax, dword [dword_511FF4]
	jmp loc_47ADEE
;sub_47ADC0 endp

sub_47AE50: ;SUBROUTINE
	push edi
	push ebp
	sub esp, 28h
	mov [esp+14h], esi
	mov [esp+20h], eax
	mov [esp+18h], ebx
	cmp dword dword_51201C[edx*4], 1
	jnz loc_47AE7D
	cmp ebx, 8
	jz loc_47AF27
	cmp ebx, 7
	jz loc_47AF27

loc_47AE7D:
	mov eax, [esp+20h]
	call sub_47B110
	test eax, eax
	jnz loc_47AF27
	cmp dword [dword_511FD4], 0
	jz loc_47AF40
	shl edx, 4
	lea eax, 0[edx*8]
	sub eax, edx
	add eax, dword_557C18

loc_47AEAC:
	mov edx, [esp+18h]
	mov ebp, [eax+edx*8]
	mov [esp+10h], eax
	test ebp, ebp
	jl loc_47AF27
	cmp edx, 9
	jnz loc_47AF4A
	mov ebx, 62h

loc_47AEC9:
	push ecx
	mov edx, [esp+1Ch]
	cmp edx, 9
	jl loc_47B0C9
	mov edx, [esp+24h]
	xor ebp, ebp
	xor esi, esi

loc_47AEDF:
	mov edi, [esp+24h]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp ebp, ecx
	jnb loc_47AF59
	cmp esi, ebx
	jge loc_47AF59
	xor eax, eax
	mov al, [edx]
	call sub_47B150
	and eax, 0FFh
	mov eax, dword dword_558880[eax*4]
	test eax, eax
	jz loc_47AF54
	mov eax, [eax]
	mov ecx, [eax+6]
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar ecx, 10h
	sar eax, 14h
	add ecx, eax
	add esi, ecx

loc_47AF23:
	inc ebp
	inc edx
	jmp loc_47AEDF

loc_47AF27:
	mov esi, esp
	call sub_46FE50
	mov edi, [esp+14h]
	mov esi, esp
	movsd
	movsd
	mov eax, [esp+14h]
	add esp, 28h
	pop ebp
	pop edi
	ret

loc_47AF40:
	mov eax, dword_557BA8
	jmp loc_47AEAC

loc_47AF4A:
	mov ebx, 280h
	jmp loc_47AEC9

loc_47AF54:
	add esi, 0Ah
	jmp loc_47AF23

loc_47AF59:
	cmp esi, ebx
	jl loc_47AF93
	mov eax, [esp+24h]
	mov al, [eax+ebp]
	and eax, 0FFh
	call toupper_
	mov eax, dword dword_558880[eax*4]
	test eax, eax
	jz loc_47B0C1
	mov eax, [eax]
	mov edx, [eax+6]
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar edx, 10h
	sar eax, 14h
	add eax, edx
	sub esi, eax

loc_47AF92:
	dec ebp

loc_47AF93:
	mov eax, [esp+1Ch]
	mov ebx, [esp+14h]
	shl eax, 3
	add eax, ebx
	sar esi, 1
	mov edi, [eax]
	dec ebp
	add esi, edi

loc_47AFA7:
	mov eax, [esp+1Ch]
	mov edx, [esp+14h]
	shl eax, 3
	add eax, edx
	mov eax, [eax+4]
	mov edx, dword [dword_4D9934]
	mov [esp+20h], eax
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword_55D220
	shl eax, 2
	add edx, eax
	mov [esp+0Ch], edx
	test ebp, ebp
	jl loc_47B05F
	mov eax, [esp+24h]
	add eax, ebp
	mov [esp+28h], eax

loc_47AFEA:
	mov edx, [esp+28h]
	xor eax, eax
	mov al, [edx]
	call sub_47B150
	and eax, 0FFh
	mov edi, dword dword_558880[eax*4]
	test edi, edi
	jz loc_47B0EE
	mov eax, [edi]
	mov edx, [eax+6]
	sar edx, 10h
	sub esi, edx
	mov edx, [eax+4]
	sar edx, 10h
	push edx
	mov edx, [eax+2]
	mov ecx, [eax+0Ch]
	sar edx, 10h
	shl ecx, 4
	push edx
	sar ecx, 14h
	mov eax, [esp+28h]
	push 0
	mov ebx, esi
	add ecx, eax
	push 0
	mov eax, 15h
	mov edx, edi
	call sub_47D290
	mov eax, [edi]
	mov eax, [eax+0Ch]
	shl eax, 14h
	sar eax, 14h
	sub esi, eax

loc_47B051:
	mov ecx, [esp+28h]
	dec ecx
	dec ebp
	mov [esp+28h], ecx
	test ebp, ebp
	jge loc_47AFEA

loc_47B05F:
	mov ebx, dword [dword_4D9934]
	test ebx, ebx
	jle loc_47B0F6
	lea edx, [ebx-1]

loc_47B070:
	lea eax, 0[edx*8]
	add eax, edx
	xor esi, esi
	mov edi, dword [dword_4D9934]
	mov dword dword_55D220[eax*4], esi
	test edi, edi
	jle loc_47B100
	lea eax, [edi-1]

loc_47B08F:
	mov edx, eax
	shl eax, 3
	add eax, edx
	mov edx, dword_55D220
	shl eax, 2
	lea edi, [esp+4]
	add edx, eax
	lea esi, [esp+0Ch]
	mov [esp+10h], edx
	movsd
	movsd
	pop ecx
	mov edi, [esp+14h]
	mov esi, esp
	movsd
	movsd
	mov eax, [esp+14h]
	add esp, 28h
	pop ebp
	pop edi
	ret

loc_47B0C1:
	sub esi, 0Ah
	jmp loc_47AF92

loc_47B0C9:
	mov ecx, [esp+14h]
	lea esi, 0[edx*8]
	add esi, ecx
	mov edi, [esp+24h]
	mov esi, [esi]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	lea ebp, [ecx-1]
	jmp loc_47AFA7

loc_47B0EE:
	sub esi, 0Ah
	jmp loc_47B051

loc_47B0F6:
	mov edx, 77h
	jmp loc_47B070

loc_47B100:
	mov eax, 77h
	jmp loc_47B08F
;sub_47AE50 endp

sub_47B110: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov ebx, eax
	mov edi, eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edx, ecx
	mov esi, ecx
	mov ecx, 1
	test edx, edx
	jz loc_47B145
	xor eax, eax
	test edx, edx
	jle loc_47B145
	mov edx, ebx

loc_47B138:
	cmp byte [edx], 20h
	jz loc_47B13F
	xor ecx, ecx

loc_47B13F:
	inc eax
	inc edx
	cmp eax, esi
	jl loc_47B138

loc_47B145:
	mov eax, ecx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47B110 endp

sub_47B150: ;SUBROUTINE
	mov ah, al
	cmp al, 0E4h
	jnb loc_47B176
	cmp al, 60h
	jnb loc_47B1E4
	cmp al, 5Dh
	jnb loc_47B216
	cmp al, 5Bh
	jnz loc_47B16C

loc_47B16A:
	mov al, 28h

loc_47B16C:
	and eax, 0FFh
	jmp toupper_

loc_47B176:
	jbe loc_47B244
	cmp al, 0F1h
	jnb loc_47B194
	cmp al, 0E9h
	jnb loc_47B1CE
	cmp al, 0E7h
	jnz loc_47B16C
	mov al, 0C7h
	and eax, 0FFh
	jmp toupper_

loc_47B194:
	jbe loc_47B25C
	cmp al, 0F6h
	jnb loc_47B1AE
	cmp al, 0F3h
	jnz loc_47B16C
	mov al, 0D3h
	and eax, 0FFh
	jmp toupper_

loc_47B1AE:
	jbe loc_47B268
	cmp al, 0FAh
	jb loc_47B16C
	jbe loc_47B274
	cmp al, 0FCh
	jnz loc_47B16C
	mov al, 0DCh
	and eax, 0FFh
	jmp toupper_

loc_47B1CE:
	jbe loc_47B250
	cmp al, 0EDh
	jnz loc_47B16C
	mov al, 0CDh
	and eax, 0FFh
	jmp toupper_

loc_47B1E4:
	jbe loc_47B220
	cmp al, 7Ch
	jnb loc_47B1FC
	cmp al, 7Bh
	jz loc_47B16A
	and eax, 0FFh
	jmp toupper_

loc_47B1FC:
	jbe loc_47B238
	cmp al, 7Dh
	jbe loc_47B22C
	cmp al, 0E1h
	jnz loc_47B16C
	mov al, 0C1h
	and eax, 0FFh
	jmp toupper_

loc_47B216:
	jbe loc_47B22C
	cmp al, 5Eh
	jnz loc_47B16C

loc_47B220:
	mov al, 91h
	and eax, 0FFh
	jmp toupper_

loc_47B22C:
	mov al, 29h
	and eax, 0FFh
	jmp toupper_

loc_47B238:
	mov al, 49h
	and eax, 0FFh
	jmp toupper_

loc_47B244:
	mov al, 0C4h
	and eax, 0FFh
	jmp toupper_

loc_47B250:
	mov al, 0C9h
	and eax, 0FFh
	jmp toupper_

loc_47B25C:
	mov al, 0D1h
	and eax, 0FFh
	jmp toupper_

loc_47B268:
	mov al, 0D6h
	and eax, 0FFh
	jmp toupper_

loc_47B274:
	mov al, 0DAh
	and eax, 0FFh
	jmp toupper_
;sub_47B150 endp

off_47B280: dd loc_47B41F
	dd loc_47B4DA ; jump table for switch statement
	dd loc_47B4F1
	dd loc_47B508
	dd loc_47B522
	dd loc_47B53C
	dd loc_47B556
	dd loc_47B570
	dd loc_47B587
	dd loc_47B59E
off_47B2A8: dd loc_47B5DD
	dd loc_47B5F4 ; jump table for switch statement
	dd loc_47B60B
	dd loc_47B625
	dd loc_47B63F
	dd loc_47B659
	dd loc_47B673
	dd loc_47B68D
off_47B2C8: dd loc_47B6C3
	dd loc_47B6DA ; jump table for switch statement
	dd loc_47B6F1
	dd loc_47B708
	dd loc_47B71F
	dd loc_47B736
	dd loc_47B74D
	dd loc_47B764
	dd loc_47B77E
	dd loc_47B798

sub_47B2F0: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 34h
	mov [esp+1Ch], esi
	mov [esp+2Ch], eax
	mov [esp+24h], edx
	mov [esp+30h], ebx
	cmp ebx, 0Bh
	jz loc_47B4BA
	cmp dword dword_51201C[edx*4], 1
	jnz loc_47B322
	cmp ebx, 2
	jle loc_47B4C5

loc_47B322:
	cmp dword [dword_511FD4], 0
	jz loc_47B4D0
	mov eax, [esp+24h]
	shl eax, 4
	mov edx, eax
	shl eax, 3
	sub eax, edx
	add eax, dword_557C18

loc_47B342:
	mov ebp, [esp+30h]
	shl ebp, 3
	add ebp, eax
	mov edi, [ebp+0]
	test edi, edi
	jl loc_47B4C5
	mov edx, dword [dword_4D9934]
	lea eax, 0[edx*8]
	mov esi, edi
	add eax, edx
	mov edx, dword_55D220
	shl eax, 2
	mov ebp, [ebp+4]
	add edx, eax
	xor eax, eax
	mov edi, [esp+2Ch]
	mov [esp+28h], eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	lea edi, [ecx-1]
	mov [esp], edx
	test edi, edi
	jl loc_47B44D
	mov eax, [esp+24h]
	mov edx, [esp+30h]
	shl eax, 4
	shl edx, 5
	add edx, eax
	mov [esp+20h], edx

loc_47B3AA:
	mov eax, [esp+2Ch]
	add eax, edi
	mov dl, [eax]
	cmp dl, 27h
	jnz loc_47B3BD
	cmp dl, [eax-1]
	jnz loc_47B3BD
	dec edi

loc_47B3BD:
	mov eax, [esp+2Ch]
	add eax, edi
	mov [esp+18h], eax
	mov edx, [esp+18h]
	mov eax, [esp+20h]
	mov dl, [edx]
	lea ecx, [esp+10h]
	mov byte byte_5579E8[edi+eax], dl
	lea eax, [esp+14h]
	mov edx, [esp+18h]
	push eax
	xor eax, eax
	mov ebx, [esp+28h]
	mov al, [edx]
	mov edx, [esp+34h]
	call sub_47C1A0
	test eax, eax
	jz loc_47B43E
	mov eax, [esp+30h]
	cmp eax, 4
	jnz loc_47B5B8
	mov eax, [esp+18h]
	mov al, [eax]
	sub al, 30h
	cmp al, 9
	ja loc_47B43A
	and eax, 0FFh ; switch 10 cases
	jmp off_47B280[eax*4] ; switch jump

loc_47B41F:
	push 18h ; jumptable 0047B418 case 0
	push 1Eh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 2Bh

loc_47B431:
	mov ecx, ebp
	mov ebx, esi
	call sub_47D290

loc_47B43A:
	inc dword [esp+28h]

loc_47B43E:
	mov edx, [esp+14h]
	dec edi
	sub esi, edx
	test edi, edi
	jge loc_47B3AA

loc_47B44D:
	cmp dword [esp+28h], 0
	jz loc_47B4C5
	mov ebx, dword [dword_4D9934]
	test ebx, ebx
	jle loc_47B7B2
	lea eax, [ebx-1]

loc_47B465:
	mov edx, eax
	shl eax, 3
	add eax, edx
	xor esi, esi
	mov edi, dword [dword_4D9934]
	mov dword dword_55D220[eax*4], esi
	test edi, edi
	jle loc_47B7BC
	lea edx, [edi-1]

loc_47B486:
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword_55D220
	shl eax, 2
	lea edi, [esp+8]
	add edx, eax
	mov esi, esp
	mov [esp+4], edx
	movsd
	movsd

loc_47B4A5:
	mov edi, [esp+1Ch]
	lea esi, [esp+8]
	movsd
	movsd
	mov eax, [esp+1Ch]
	add esp, 34h
	pop ebp
	pop edi
	pop ecx
	ret

loc_47B4BA:
	lea esi, [esp+8]
	call sub_47AE50
	jmp loc_47B4A5

loc_47B4C5:
	lea esi, [esp+8]
	call sub_46FE50
	jmp loc_47B4A5

loc_47B4D0:
	mov eax, dword_557BA8
	jmp loc_47B342

loc_47B4DA:
	push 18h ; jumptable 0047B418 case 1
	push 1Dh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 48h
	jmp loc_47B431

loc_47B4F1:
	push 18h ; jumptable 0047B418 case 2
	push 1Eh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 65h
	jmp loc_47B431

loc_47B508:
	push 18h ; jumptable 0047B418 case 3
	push 1Eh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 82h
	jmp loc_47B431

loc_47B522:
	push 18h ; jumptable 0047B418 case 4
	push 1Eh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 0A0h
	jmp loc_47B431

loc_47B53C:
	push 18h ; jumptable 0047B418 case 5
	push 1Eh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 0BDh
	jmp loc_47B431

loc_47B556:
	push 18h ; jumptable 0047B418 case 6
	push 1Dh
	push 2Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 0DAh
	jmp loc_47B431

loc_47B570:
	push 18h ; jumptable 0047B418 case 7
	push 1Dh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 49h
	jmp loc_47B431

loc_47B587:
	push 18h ; jumptable 0047B418 case 8
	push 1Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 66h
	jmp loc_47B431

loc_47B59E:
	push 18h ; jumptable 0047B418 case 9
	push 1Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 83h
	jmp loc_47B431

loc_47B5B8:
	cmp eax, 3
	jnz loc_47B6A7
	mov eax, [esp+18h]
	mov al, [eax]
	sub al, 30h
	cmp al, 7
	ja loc_47B43A
	and eax, 0FFh ; switch 8 cases
	jmp off_47B2A8[eax*4] ; switch jump

loc_47B5DD:
	push 18h ; jumptable 0047B5D6 case 0
	push 0Eh
	push 5Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 57h
	jmp loc_47B431

loc_47B5F4:
	push 18h ; jumptable 0047B5D6 case 1
	push 0Eh
	push 5Fh
	mov edx, dword_5588C8
	mov eax, 14h
	push 49h
	jmp loc_47B431

loc_47B60B:
	push 18h ; jumptable 0047B5D6 case 2
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0A0h
	jmp loc_47B431

loc_47B625:
	push 18h ; jumptable 0047B5D6 case 3
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0AEh
	jmp loc_47B431

loc_47B63F:
	push 18h ; jumptable 0047B5D6 case 4
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0BCh
	jmp loc_47B431

loc_47B659:
	push 18h ; jumptable 0047B5D6 case 5
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0CAh
	jmp loc_47B431

loc_47B673:
	push 18h ; jumptable 0047B5D6 case 6
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0D8h
	jmp loc_47B431

loc_47B68D:
	push 18h ; jumptable 0047B5D6 case 7
	push 0Eh
	push 47h
	mov edx, dword_5588C8
	mov eax, 14h
	push 0E6h
	jmp loc_47B431

loc_47B6A7:
	mov eax, [esp+18h]
	mov al, [eax]
	sub al, 30h
	cmp al, 9
	ja loc_47B43A
	and eax, 0FFh ; switch 10 cases
	jmp off_47B2C8[eax*4] ; switch jump

loc_47B6C3:
	push 1Ah ; jumptable 0047B6BC case 0
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 30h
	jmp loc_47B431

loc_47B6DA:
	push 1Ah ; jumptable 0047B6BC case 1
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 3Ch
	jmp loc_47B431

loc_47B6F1:
	push 1Ah ; jumptable 0047B6BC case 2
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 48h
	jmp loc_47B431

loc_47B708:
	push 1Ah ; jumptable 0047B6BC case 3
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 54h
	jmp loc_47B431

loc_47B71F:
	push 1Ah ; jumptable 0047B6BC case 4
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 60h
	jmp loc_47B431

loc_47B736:
	push 1Ah ; jumptable 0047B6BC case 5
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 6Ch
	jmp loc_47B431

loc_47B74D:
	push 1Ah ; jumptable 0047B6BC case 6
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 78h
	jmp loc_47B431

loc_47B764:
	push 1Ah ; jumptable 0047B6BC case 7
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 84h
	jmp loc_47B431

loc_47B77E:
	push 1Ah ; jumptable 0047B6BC case 8
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 90h
	jmp loc_47B431

loc_47B798:
	push 1Ah ; jumptable 0047B6BC case 9
	push 0Ch
	push 15h
	mov edx, dword_5588C8
	mov eax, 14h
	push 9Ch
	jmp loc_47B431

loc_47B7B2:
	mov eax, 77h
	jmp loc_47B465

loc_47B7BC:
	mov edx, 77h
	jmp loc_47B486
;sub_47B2F0 endp

sub_47B7D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 18h
	mov edx, esi
	mov ebx, dword [dword_511FD4]
	mov ecx, dword [dword_512010]
	test ebx, ebx
	jz loc_47B7F3
	mov eax, dword [dword_512014]
	add eax, eax
	add ecx, eax

loc_47B7F3:
	xor eax, eax
	mov esi, esp
	call sub_459100
	mov eax, 1
	call sub_477640
	cmp dword [dword_55E440], 0
	jnz loc_47B849
	cmp dword [dword_540D94], 2
	jl loc_47B849
	mov ebp, 1
	lea esi, [esp+8]
	mov dword [dword_55E440], ebp
	call sub_479800
	mov eax, [esp+0Ch]
	push eax
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	mov edi, [esp+0Ch]
	push edi
	lea esi, [esp+10h]
	call sub_46FDA0

loc_47B849:
	cmp dword [dword_512054], 0
	jz loc_47B883
	xor eax, eax
	call sub_44B6E0
	test eax, eax
	jz loc_47B883
	lea esi, [esp+8]
	call sub_47BB90
	mov eax, [esp+0Ch]
	push eax
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	mov edi, [esp+0Ch]
	push edi
	lea esi, [esp+10h]
	call sub_46FDA0

loc_47B883:
	test ecx, ecx
	jz loc_47B90F
	cmp dword [dword_511FD4], 0
	jz loc_47B91D
	lea esi, [esp+8]
	call sub_47C090

loc_47B8A1:
	mov eax, [esp+0Ch]
	push eax
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	mov edi, [esp+0Ch]
	push edi
	lea esi, [esp+10h]
	call sub_46FDA0
	lea esi, [esp+8]
	call sub_458BC0
	mov ebp, [esp+0Ch]
	push ebp
	mov eax, [esp+0Ch]
	push eax
	mov ebx, [esp+0Ch]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	lea esi, [esp+10h]
	lea edi, [esp+20h]
	call sub_46FDA0
	mov esi, esp
	mov eax, dword [dword_511FEC]
	mov dword [dword_55E42C], ecx
	mov dword [dword_55E444], eax

loc_47B8FA:
	movsd
	movsd
	lea esi, [esp+10h]
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 18h
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47B90F:
	lea edi, [esp+10h]
	mov esi, esp
	mov dword [dword_55E42C], ecx
	jmp loc_47B8FA

loc_47B91D:
	lea esi, [esp+8]
	call sub_47A3A0
	jmp loc_47B8A1
;sub_47B7D0 endp

sub_47B930: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, dword [dword_540F48]
	cmp edx, 220h
	jge loc_47B9AD
	cmp edx, 120h
	jle loc_47B9AD
	mov edx, 3
	movzx esi, byte [byte_4D5A0C]
	sub edx, esi
	mov esi, edx
	test edx, edx
	jl loc_47B9AD
	cmp dword [dword_512208], 1
	jnz loc_47B9B2
	test eax, eax
	jz loc_47B9B2
	mov ecx, 20h
	mov eax, 0FAh
	mov ebx, edx
	mov edx, 168h
	call sub_47BA00
	mov ecx, 20h
	mov edx, 168h
	mov eax, 140h
	mov ebx, esi
	call sub_47BA00
	mov ecx, 20h
	mov edx, 168h
	mov eax, 186h
	mov ebx, esi
	call sub_47BA00

loc_47B9AD:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47B9B2:
	mov ecx, 20h
	mov eax, 0FAh
	mov ebx, edx
	mov edx, 78h
	call sub_47BA00
	mov ecx, 20h
	mov edx, 78h
	mov eax, 140h
	mov ebx, esi
	call sub_47BA00
	mov ecx, 20h
	mov edx, 78h
	mov eax, 186h
	mov ebx, esi
	call sub_47BA00
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47B930 endp

sub_47BA00: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0DCh
	mov ebp, eax
	mov [esp+0D8h], edx
	lea edi, [esp+0B0h]
	mov esi, dword_479450
	mov edx, dword_5588C8
	movsd
	movsd
	movsd
	movsd
	mov [esp+80h], ecx
	lea edi, [esp+0C0h]
	mov esi, dword_479460
	mov [esp+88h], ecx
	mov [esp+90h], ecx
	movsd
	movsd
	movsd
	movsd
	mov [esp+94h], ecx
	lea edi, [esp+0A0h]
	mov esi, dword_479470
	mov [esp+9Ch], ecx
	mov [esp+0D4h], edx
	movsd
	movsd
	movsd
	movsd
	mov ebx, [esp+ebx*4+0B0h]
	mov esi, ecx
	xor edx, edx
	neg esi
	xor ecx, ecx
	mov [esp+80h], esi
	mov eax, esi
	mov [esp+84h], esi
	mov [esp+8Ch], esi
	mov [esp+98h], esi
	xor eax, esi

loc_47BAA0:
	fild dword [esp+ecx+80h]
	fild dword [esp+ecx+84h]
	fld dword [esp+edx+0C0h]
	fld dword [esp+edx+0A0h]
	mov esi, [esp+0D8h]
	mov [esp+0D0h], ebp
	add eax, 20h
	add edx, 4
	add ecx, 8
	mov [esp+eax-10h], ebx
	xor edi, edi
	fxch st1
	fstp dword [esp+eax-8]
	fstp dword [esp+eax-4]
	fild dword [esp+0D0h]
	mov [esp+eax-18h], edi
	mov [esp+0D0h], esi
	mov [esp+eax-0Ch], edi
	mov esi, 3F7FFF00h
	fstp dword [esp+eax-20h]
	mov [esp+eax-14h], esi
	fild dword [esp+0D0h]
	fstp dword [esp+eax-1Ch]
	fxch st1
	fadd dword [esp+eax-20h]
	fxch st1
	fadd dword [esp+eax-1Ch]
	fxch st1
	fstp dword [esp+eax-20h]
	fstp dword [esp+eax-1Ch]
	cmp edx, 10h
	jnz loc_47BAA0
	mov eax, [esp+0D4h]
	mov ebp, dword [dword_4D4EB0]
	cmp ebp, [eax+14h]
	jnz loc_47BB66

loc_47BB42:
	lea eax, [esp+60h]
	push eax
	lea eax, [esp+44h]
	push eax
	lea eax, [esp+28h]
	push eax
	lea eax, [esp+0Ch]
	push eax
	call sub_497B24
	add esp, 0DCh
	pop ebp
	pop edi
	pop esi
	ret

loc_47BB66:
	mov eax, [esp+0D4h]
	mov eax, [eax+14h]
	mov dword [dword_4D4EB0], eax
	mov eax, [esp+0D4h]
	mov edx, [eax+14h]
	push edx
	push 1
	call sub_497738
	jmp loc_47BB42
;sub_47BA00 endp

sub_47BB90: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 8
	mov ebp, esi
	mov esi, esp
	call sub_46FE50
	push 10h
	mov edx, dword [dword_4D9938]
	push 10h
	lea eax, 0[edx*4]
	push 10h
	mov ecx, 24h
	sub eax, edx
	push 0FFh
	shl eax, 2
	push 28h
	sub eax, edx
	mov edx, dword_55AA98
	push 1E6h
	shl eax, 2
	push 28h
	mov ebx, 280h
	add edx, eax
	push 27Ch
	mov eax, 1E2h
	mov [esp+20h], edx
	mov edx, ecx
	call sub_47D1A0
	push 10h
	push 10h
	push 10h
	push 0FFh
	push 6Eh
	push 27Ch
	push 72h
	mov ecx, 24h
	mov ebx, 280h
	push 280h
	mov edx, 28h
	mov eax, 27Ch
	call sub_47D1A0
	push 10h
	push 10h
	push 10h
	push 0FFh
	push 72h
	push 1E2h
	push 72h
	mov ecx, 6Eh
	mov ebx, 27Ch
	push 280h
	mov eax, 1E6h
	mov edx, ecx
	call sub_47D1A0
	push 10h
	push 10h
	push 10h
	push 0FFh
	push 72h
	push 1E2h
	push 6Eh
	mov ecx, 28h
	mov ebx, 1E6h
	push 1E6h
	mov edx, 24h
	mov eax, 1E2h
	call sub_47D1A0
	push 2Fh
	push 2Fh
	push 2Fh
	push 0FFh
	push 28h
	push 1E6h
	push 28h
	mov ecx, 25h
	mov ebx, 27Fh
	push 27Ch
	mov eax, 1E3h
	mov edx, ecx
	call sub_47D1A0
	push 2Fh
	push 2Fh
	push 2Fh
	push 0FFh
	push 6Eh
	push 27Ch
	push 71h
	mov ecx, 25h
	mov ebx, 27Fh
	push 27Fh
	mov edx, 28h
	mov eax, 27Ch
	call sub_47D1A0
	push 70h
	push 70h
	push 70h
	push 0FFh
	push 71h
	push 1E3h
	push 71h
	mov ecx, 6Eh
	mov ebx, 27Ch
	push 27Fh
	mov eax, 1E6h
	mov edx, ecx
	call sub_47D1A0
	push 70h
	push 70h
	push 70h
	push 0FFh
	push 71h
	push 1E3h
	push 6Eh
	mov ecx, 28h
	mov ebx, 1E6h
	push 1E6h
	mov edx, 25h
	mov eax, 1E3h
	call sub_47D1A0
	mov edx, dword [dword_4D9938]
	test edx, edx
	jle loc_47BDA3
	dec edx

loc_47BD52:
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	sub eax, edx
	xor ecx, ecx
	mov ebx, dword [dword_4D9938]
	mov dword dword_55AA98[eax*4], ecx
	test ebx, ebx
	jle loc_47BDAA
	lea edx, [ebx-1]

loc_47BD76:
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword_55AA98
	shl eax, 2
	mov esi, esp
	add edx, eax
	mov edi, ebp
	mov [esp+4], edx
	movsd
	movsd
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47BDA3:
	mov edx, 77h
	jmp loc_47BD52

loc_47BDAA:
	mov edx, 77h
	jmp loc_47BD76
;sub_47BB90 endp

sub_47BDC0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov [esp+8], edx
	mov [esp], ebx
	mov ah, [eax]
	mov ecx, edx
	test ah, ah
	jz loc_47BE65
	xor ebp, ebp

loc_47BDDE:
	mov al, [edi]
	mov ah, al
	xor edx, edx
	cmp al, 7Bh
	jnb loc_47BE6D
	cmp al, 3Dh
	jnb loc_47BF4B
	cmp al, 2Ch
	jnb loc_47BFA2
	cmp al, 0Ah
	jnb loc_47BFD1

loc_47BE04:
	and eax, 0FFh
	call toupper_
	mov esi, dword dword_558880[eax*4]
	test esi, esi
	jz loc_47BFFD
	mov eax, [esi]
	mov eax, [eax+2]
	mov ebx, dword [dword_55E438]
	sar eax, 10h
	sub ebx, eax
	mov eax, ebx
	sar eax, 1
	add ecx, eax
	add edx, [esp]
	mov [esp+4], ebx
	lea ebx, [edx+ebp]
	mov eax, esi
	mov edx, ecx
	call sub_47C020
	mov eax, [esi]
	mov eax, [eax+2]
	sar eax, 10h
	add ecx, eax
	mov eax, [esp+4]
	inc eax
	sar eax, 1
	add ecx, eax
	mov dl, [edi+1]
	inc edi
	test dl, dl
	jnz loc_47BDDE

loc_47BE65:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_47BE6D:
	ja loc_47BE73

loc_47BE6F:
	mov al, 28h
	jmp loc_47BE04

loc_47BE73:
	cmp al, 0E7h
	jnb loc_47BE93
	cmp al, 0BFh
	jnb loc_47BEFF
	cmp al, 7Dh
	jnb loc_47BF33
	mov edx, 1
	mov al, 49h
	jmp loc_47BE04

loc_47BE93:
	ja loc_47BE9C
	mov al, 0C7h
	jmp loc_47BE04

loc_47BE9C:
	cmp al, 0F3h
	jnb loc_47BEB3
	cmp al, 0EDh
	jnb loc_47BEE7
	cmp al, 0E9h
	jnz loc_47BE04
	mov al, 0C9h
	jmp loc_47BE04

loc_47BEB3:
	ja loc_47BEBC
	mov al, 0D3h
	jmp loc_47BE04

loc_47BEBC:
	cmp al, 0FAh
	jnb loc_47BECF
	cmp al, 0F6h
	jnz loc_47BE04
	mov al, 0D6h
	jmp loc_47BE04

loc_47BECF:
	ja loc_47BED8
	mov al, 0DAh
	jmp loc_47BE04

loc_47BED8:
	cmp al, 0FCh
	jnz loc_47BE04
	mov al, 0DCh
	jmp loc_47BE04

loc_47BEE7:
	ja loc_47BEF0
	mov al, 0CDh
	jmp loc_47BE04

loc_47BEF0:
	cmp al, 0F1h
	jnz loc_47BE04
	mov al, 0D1h
	jmp loc_47BE04

loc_47BEFF:
	ja loc_47BF08
	mov al, 0A8h
	jmp loc_47BE04

loc_47BF08:
	cmp al, 0E4h
	jnb loc_47BF1B
	cmp al, 0E1h
	jnz loc_47BE04
	mov al, 0C1h
	jmp loc_47BE04

loc_47BF1B:
	ja loc_47BF24
	mov al, 0C4h
	jmp loc_47BE04

loc_47BF24:
	cmp al, 0E5h
	jnz loc_47BE04
	mov al, 0C5h
	jmp loc_47BE04

loc_47BF33:
	ja loc_47BF3C

loc_47BF35:
	mov al, 29h
	jmp loc_47BE04

loc_47BF3C:
	cmp al, 0A1h
	jnz loc_47BE04
	mov al, 0ADh
	jmp loc_47BE04

loc_47BF4B:
	ja loc_47BF57
	mov edx, 3
	jmp loc_47BE04

loc_47BF57:
	cmp al, 5Eh
	jnb loc_47BF71
	cmp al, 5Bh
	jnb loc_47BF93
	cmp al, 49h
	jnz loc_47BE04

loc_47BF67:
	mov edx, 1
	jmp loc_47BE04

loc_47BF71:
	ja loc_47BF7A

loc_47BF73:
	mov al, 91h
	jmp loc_47BE04

loc_47BF7A:
	cmp al, 60h
	jnb loc_47BF88
	mov edx, 6
	jmp loc_47BE04

loc_47BF88:
	jbe loc_47BF73
	cmp al, 69h
	jz loc_47BF67
	jmp loc_47BE04

loc_47BF93:
	jbe loc_47BE6F
	cmp al, 5Dh
	jz loc_47BF35
	jmp loc_47BE04

loc_47BFA2:
	ja loc_47BFAE
	mov edx, 1
	jmp loc_47BE04

loc_47BFAE:
	cmp al, 2Eh
	jnb loc_47BFBC
	mov edx, 2
	jmp loc_47BE04

loc_47BFBC:
	ja loc_47BFC8
	mov edx, 1
	jmp loc_47BE04

loc_47BFC8:
	cmp al, 31h
	jz loc_47BF67
	jmp loc_47BE04

loc_47BFD1:
	ja loc_47BFE9
	mov ecx, [esp+8]
	mov al, 20h
	mov ebx, dword [dword_55E438]
	add ebp, 0Fh
	sub ecx, ebx
	jmp loc_47BE04

loc_47BFE9:
	cmp al, 27h
	jnz loc_47BE04
	mov edx, 0FFFFFFFCh
	mov al, 2Ch
	jmp loc_47BE04

loc_47BFFD:
	add ecx, dword [dword_55E438]
	mov dl, [edi+1]
	inc edi
	test dl, dl
	jnz loc_47BDDE
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_47BDC0 endp

sub_47C020: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 28h
	mov ecx, eax
	mov edi, 15h
	mov [esp+20h], eax
	xor esi, esi
	mov [esp+8], edx
	mov [esp], esi
	mov [esp+4], edi
	mov eax, [eax]
	mov eax, [eax+0Ch]
	shl eax, 4
	sar eax, 14h
	add ebx, eax
	mov [esp+0Ch], ebx
	mov eax, [ecx]
	mov eax, [eax+2]
	sar eax, 10h
	mov [esp+10h], eax
	mov eax, [ecx]
	mov eax, [eax+4]
	mov edx, 0FFFFF7F7h
	sar eax, 10h
	mov [esp+18h], esi
	mov [esp+1Ch], esi
	mov [esp+14h], eax
	mov eax, esp
	mov [esp+24h], edx
	call sub_42ABF0
	add esp, 28h
	pop edi
	pop esi
	pop ecx
	ret
;sub_47C020 endp

sub_47C090: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	sub esp, 8
	mov edx, esi
	cmp dword [dword_512010], 0
	jz loc_47C0FD
	mov esi, dword [dword_51201C]
	cmp esi, 1
	jnb loc_47C0E4
	test esi, esi
	jnz loc_47C0BB
	mov edi, esp
	mov esi, dword_558C90

loc_47C0B9:
	movsd
	movsd

loc_47C0BB:
	cmp dword [dword_512014], 0
	jz loc_47C0D3
	mov esi, dword [dword_512020]
	cmp esi, 1
	jnb loc_47C106
	test esi, esi
	jz loc_47C130

loc_47C0D3:
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47C0E4:
	ja loc_47C0EF
	mov edi, esp
	mov esi, dword_55BF48
	jmp loc_47C0B9

loc_47C0EF:
	cmp esi, 2
	jnz loc_47C0BB
	mov edi, esp
	mov esi, dword_55BF40
	jmp loc_47C0B9

loc_47C0FD:
	mov esi, esp
	call sub_46FE50
	jmp loc_47C0BB

loc_47C106:
	jbe loc_47C161
	cmp esi, 2
	jnz loc_47C0D3
	mov esi, dword [dword_557D2C]
	push esi
	mov edi, dword [dword_557D28]
	push edi
	mov ebp, [esp+0Ch]
	push ebp
	mov eax, [esp+0Ch]
	push eax
	lea esi, [esp+10h]
	call sub_46FDA0
	jmp loc_47C0D3

loc_47C130:
	mov ebp, dword [dword_557CFC]
	push ebp
	mov eax, dword [dword_557CF8]
	push eax
	mov ecx, [esp+0Ch]
	push ecx
	mov ebx, [esp+0Ch]
	push ebx
	lea esi, [esp+10h]
	call sub_46FDA0
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47C161:
	mov ecx, dword [dword_558C84]
	push ecx
	mov ebx, dword [dword_558C80]
	push ebx
	mov esi, [esp+0Ch]
	push esi
	mov edi, [esp+0Ch]
	push edi
	lea esi, [esp+10h]
	call sub_46FDA0
	mov esi, esp
	mov edi, edx
	movsd
	movsd
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47C090 endp

sub_47C1A0: ;SUBROUTINE
	push esi
	mov esi, edx
	mov edx, [esp+8]
	cmp al, 20h
	jnz loc_47C1E3
	mov al, 2Dh

loc_47C1AD:
	sub al, 2Dh
	cmp al, 0Eh
	ja loc_47C1F3
	cmp esi, 4
	jnz loc_47C205
	and eax, 0FFh
	mov eax, dword dword_4D9CC1[eax]
	sar eax, 18h
	add eax, 21h

loc_47C1C9:
	mov [ecx], eax
	mov dword [edx], 1Dh
	cmp dword [ecx], 0
	jl loc_47C2A3
	mov eax, 1
	pop esi
	ret 4

loc_47C1E3:
	cmp al, 2Ch
	jnz loc_47C1EB
	mov al, 2Eh
	jmp loc_47C1AD

loc_47C1EB:
	cmp al, 27h
	jnz loc_47C1AD
	mov al, 3Bh
	jmp loc_47C1AD

loc_47C1F3:
	mov dword [ecx], 0FFFFFF81h
	xor eax, eax
	mov dword [edx], 0
	pop esi
	ret 4

loc_47C205:
	cmp esi, 3
	jnz loc_47C214
	and eax, 0FFh
	add eax, 29h
	jmp loc_47C1C9

loc_47C214:
	cmp dword dword_51201C[ebx*4], 0
	jz loc_47C24A
	and eax, 0FFh
	mov ebx, dword dword_4D9CC1[eax]
	sar ebx, 18h
	add ebx, 16h
	mov [ecx], ebx
	mov eax, dword dword_4D9CD0[eax]
	sar eax, 18h
	mov [edx], eax
	cmp dword [ecx], 0
	jl loc_47C2A3
	mov eax, 1
	pop esi
	ret 4

loc_47C24A:
	test esi, esi
	jnz loc_47C27A
	and eax, 0FFh
	mov ebx, dword dword_4D9CC1[eax]
	sar ebx, 18h
	add ebx, 0Bh
	mov [ecx], ebx
	mov eax, dword dword_4D9CD0[eax]
	sar eax, 18h
	mov [edx], eax
	cmp dword [ecx], 0
	jl loc_47C2A3
	mov eax, 1
	pop esi
	ret 4

loc_47C27A:
	and eax, 0FFh
	mov ebx, dword dword_4D9CC1[eax]
	sar ebx, 18h
	mov [ecx], ebx
	mov eax, dword dword_4D9CD0[eax]
	sar eax, 18h
	mov [edx], eax
	cmp dword [ecx], 0
	jl loc_47C2A3
	mov eax, 1
	pop esi
	ret 4

loc_47C2A3:
	xor eax, eax
	pop esi
	ret 4
;sub_47C1A0 endp

sub_47C2B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov eax, dword [dword_55E3C0]
	call sub_4848FC
	mov edx, dword [dword_55E3C4]
	test edx, edx
	jnz loc_47C3BC

loc_47C2CE:
	mov ecx, dword [dword_560DD0]
	test ecx, ecx
	jz loc_47C2E7
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword [dword_560DD0], ebx

loc_47C2E7:
	mov esi, dword [dword_560C60]
	test esi, esi
	jz loc_47C300
	mov eax, esi
	xor edi, edi
	call sub_4848FC
	mov dword [dword_560C60], edi

loc_47C300:
	mov ebp, dword [dword_560C68]
	test ebp, ebp
	jz loc_47C318
	mov eax, ebp
	call sub_4848FC
	xor eax, eax
	mov dword [dword_560C68], eax

loc_47C318:
	mov edx, dword [dword_560DDC]
	test edx, edx
	jz loc_47C331
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_560DDC], ecx

loc_47C331:
	mov ebx, dword [dword_55E448]
	test ebx, ebx
	jz loc_47C34A
	mov eax, ebx
	xor esi, esi
	call sub_4848FC
	mov dword [dword_55E448], esi

loc_47C34A:
	mov edi, dword [dword_560DD8]
	test edi, edi
	jz loc_47C363
	mov eax, edi
	xor ebp, ebp
	call sub_4848FC
	mov dword [dword_560DD8], ebp

loc_47C363:
	mov eax, dword [dword_560DD4]
	test eax, eax
	jz loc_47C379
	xor edx, edx
	call sub_4848FC
	mov dword [dword_560DD4], edx

loc_47C379:
	mov ecx, dword [dword_560C64]
	test ecx, ecx
	jz loc_47C392
	mov eax, ecx
	xor ebx, ebx
	call sub_4848FC
	mov dword [dword_560C64], ebx

loc_47C392:
	mov esi, dword [dword_55E304]
	test esi, esi
	jz loc_47C3AB
	mov eax, esi
	xor edi, edi
	call sub_4848FC
	mov dword [dword_55E304], edi

loc_47C3AB:
	mov ebp, dword [dword_55E43C]
	test ebp, ebp
	jnz loc_47C3C8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47C3BC:
	mov eax, edx
	call sub_4848FC
	jmp loc_47C2CE

loc_47C3C8:
	mov eax, ebp
	call sub_4848FC
	xor eax, eax
	mov dword [dword_55E43C], eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47C2B0 endp

sub_47C3E0: ;SUBROUTINE
	mov dword [dword_4EC648], 1
	ret
;sub_47C3E0 endp

sub_47C3F0: ;SUBROUTINE
	push edx
	push esi
	push edi
	push ebp
	sub esp, 128h
	mov esi, eax
	push ecx
	push ebx
	call sub_47CD30
	cmp dword [dword_511FD4], 0
	jz loc_47C69D
	cmp dword [dword_512214], 2
	jl loc_47C618
	mov eax, aR_2 ; "r"

loc_47C422:
	push eax
	push aSplitS_msk ; "split%s.msk"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	mov eax, dword [dword_4D9940]
	add esp, 0Ch
	test eax, eax
	jnz loc_47C622

loc_47C442:
	xor ecx, ecx
	xor esi, esi

loc_47C446:
	mov eax, dword [dword_55E3C0]
	mov edx, esi
	add ecx, 4
	call sub_49D76C
	inc esi
	mov dword dword_55E304[ecx], eax
	cmp esi, 2Dh
	jl loc_47C446
	xor edi, edi
	mov dword [dword_55E3C4], edi

loc_47C46C:
	mov esi, 5
	xor ebp, ebp

loc_47C473:
	push esi
	imul ecx, esi, 1Ch
	imul edi, esi, 1Ch
	mov eax, 40h
	push aHdDa ; "hd%da"
	mov dword [dword_4D9944], eax
	lea eax, [esp+10Ch]
	push eax
	lea edx, [esp+110h]
	mov ebx, ebp
	call sprintf_
	add esp, 0Ch
	mov eax, dword [dword_55E430]
	add ecx, dword_558820
	call sub_4352C0
	mov dword [dword_4D9944], ebp
	add edi, dword_558820

loc_47C4BE:
	inc esi
	add edi, 1Ch
	cmp esi, 8
	jl loc_47C985
	mov ebp, 0B4h
	xor edi, edi
	xor esi, esi

loc_47C4D4:
	lea eax, [esp+12Ch]
	lea ecx, [esp+124h]
	lea ebx, [esp+128h]
	push eax
	lea edx, [esp+124h]
	mov eax, esi
	call sub_458670
	cmp ebp, [esp+124h]
	jge loc_47C508
	mov [esp+124h], ebp

loc_47C508:
	lea eax, [esp+11Ch]
	lea ecx, [esp+114h]
	push eax
	lea eax, [esp+11Ch]
	mov ebx, [esp+128h]
	push eax
	mov edx, [esp+130h]
	mov eax, [esp+128h]
	call sub_457FA8
	mov eax, [esp+114h]
	mov edx, [esp+118h]
	shl eax, 10h
	shl edx, 8
	or eax, 0FF000000h
	or eax, edx
	mov edx, [esp+11Ch]
	add edi, 4
	or eax, edx
	inc esi
	mov dword dword_560C68[edi], eax
	cmp esi, 59h
	jl loc_47C4D4
	mov esi, dword_558900
	mov edi, 20h
	xor ecx, ecx
	xor ebp, ebp
	mov dword [dword_55E438], ecx

loc_47C584:
	push edi
	push aF03d ; "f%03d"
	lea eax, [esp+10Ch]
	push eax
	call sprintf_
	add esp, 0Ch
	lea edx, [esp+104h]
	mov eax, dword [dword_51206C]
	call sub_482EA8
	test eax, eax
	jz loc_47CA1B
	mov eax, dword_557D30
	lea edx, [esp+104h]
	add eax, ebp
	xor ebx, ebx
	mov ecx, eax
	mov [esi], eax
	mov eax, dword [dword_51206C]
	call sub_4352C0
	mov eax, dword dword_557D30[ebp]
	mov eax, [eax+2]
	mov ebx, dword [dword_55E438]
	sar eax, 10h
	cmp eax, ebx
	jle loc_47C5EC
	mov dword [dword_55E438], eax

loc_47C5EC:
	add ebp, 1Ch

loc_47C5EF:
	inc edi
	add esi, 4
	cmp edi, 0FFh
	jle loc_47CA0A

loc_47C5FF:
	pop ebx
	pop ecx

loc_47C601:
	cmp edi, 0FFh
	jg loc_47CA22
	mov dword [esi], 0
	add esi, 4
	jmp loc_47C601

loc_47C618:
	mov eax, dword_4CE924
	jmp loc_47C422

loc_47C622:
	push 0
	lea eax, [esp+114h]
	lea ecx, [esp+110h]
	lea edx, [esp+0Ch]
	push eax
	xor ebx, ebx
	mov eax, dword [dword_4D9940]
	call sub_49D3CC
	test eax, eax
	jz loc_47C442
	mov edx, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	mov ecx, 2EAh
	mov eax, aHuddata1 ; "huddata1"
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, [esp+110h]
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	mov ebx, [esp+10Ch]
	mov ecx, dword [dword_4D9940]
	mov dword [dword_55E3C0], eax
	mov edx, eax
	add ecx, ebx
	mov ebx, [esp+110h]
	mov eax, ecx
	call sub_48A980
	jmp loc_47C442

loc_47C69D:
	cmp esi, 0FFFFFFFFh
	jle loc_47C8B3
	cmp dword [dword_512214], 2
	jl loc_47C739
	mov eax, aR_2 ; "r"

loc_47C6B8:
	push eax
	push aHudS_msk ; "hud%s.msk"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	mov edx, dword [dword_4D9940]
	add esp, 0Ch
	test edx, edx
	jnz loc_47C743

loc_47C6D5:
	xor ebx, ebx
	xor ecx, ecx

loc_47C6D9:
	mov eax, dword [dword_55E3C0]
	mov edx, ecx
	add ebx, 4
	call sub_49D76C
	inc ecx
	mov dword dword_55E304[ebx], eax
	cmp ecx, 1Eh
	jl loc_47C6D9
	push esi
	push aDsh02d_msk ; "dsh%02d.msk"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	mov edi, dword [dword_4D9940]
	add esp, 0Ch
	test edi, edi
	jnz loc_47C7BB

loc_47C715:
	xor ecx, ecx
	xor esi, esi

loc_47C719:
	mov eax, dword [dword_55E3C4]
	mov edx, esi
	add ecx, 4
	call sub_49D76C
	inc esi
	mov dword dword_55E3C4[ecx], eax
	cmp esi, 19h
	jl loc_47C719
	jmp loc_47C46C

loc_47C739:
	mov eax, dword_4CE924
	jmp loc_47C6B8

loc_47C743:
	push 0
	lea eax, [esp+114h]
	lea ecx, [esp+110h]
	xor ebx, ebx
	push eax
	mov eax, edx
	lea edx, [esp+10h]
	call sub_49D3CC
	test eax, eax
	jz loc_47C6D5
	mov ecx, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	mov ebx, 30Dh
	mov edx, [esp+110h]
	mov eax, aHuddata2 ; "huddata2"
	mov dword [dword_4DB1DC], ebx
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov edi, [esp+10Ch]
	mov ebx, [esp+110h]
	mov ecx, dword [dword_4D9940]
	mov dword [dword_55E3C0], eax
	add ecx, edi
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_47C6D5

loc_47C7BB:
	push 0
	lea eax, [esp+114h]
	lea ecx, [esp+110h]
	lea edx, [esp+0Ch]
	push eax
	xor ebx, ebx
	mov eax, edi
	call sub_49D3CC
	test eax, eax
	jz loc_47C82F
	mov ecx, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	mov ebx, 328h
	mov edx, [esp+110h]
	mov eax, aHuddash ; "huddash"
	mov dword [dword_4DB1DC], ebx
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov esi, [esp+10Ch]
	mov ebx, [esp+110h]
	mov ecx, dword [dword_4D9940]
	mov dword [dword_55E3C4], eax
	add ecx, esi
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_47C715

loc_47C82F:
	push aDsh00_msk ; "dsh00.msk"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 8
	lea ecx, [esp+10Ch]
	lea edx, [esp+8]
	push 0
	lea eax, [esp+114h]
	xor ebx, ebx
	push eax
	mov eax, dword [dword_4D9940]
	mov ebp, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	call sub_49D3CC
	mov eax, 32Fh
	mov edx, [esp+110h]
	xor ebx, ebx
	mov dword [dword_4DB1DC], eax
	mov eax, aHuddash ; "huddash"
	mov dword [dword_4DB1D8], ebp
	call sub_484498
	mov edx, [esp+10Ch]
	mov ebx, [esp+110h]
	mov ecx, dword [dword_4D9940]
	mov dword [dword_55E3C4], eax
	add ecx, edx
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_47C715

loc_47C8B3:
	cmp dword [dword_512214], 2
	jl loc_47C90A
	mov eax, aR_2 ; "r"

loc_47C8C1:
	push eax
	push aHudS_msk ; "hud%s.msk"
	lea eax, [esp+10h]
	push eax
	call sprintf_
	mov ebx, dword [dword_4D9940]
	add esp, 0Ch
	test ebx, ebx
	jnz loc_47C911

loc_47C8DE:
	xor ebx, ebx
	xor ecx, ecx

loc_47C8E2:
	mov eax, dword [dword_55E3C0]
	mov edx, ecx
	add ebx, 4
	call sub_49D76C
	inc ecx
	mov dword dword_55E304[ebx], eax
	cmp ecx, 1Eh
	jl loc_47C8E2
	xor esi, esi
	mov dword [dword_55E3C4], esi
	jmp loc_47C46C

loc_47C90A:
	mov eax, dword_4CE924
	jmp loc_47C8C1

loc_47C911:
	push 0
	lea eax, [esp+114h]
	lea ecx, [esp+110h]
	lea edx, [esp+0Ch]
	push eax
	mov eax, ebx
	xor ebx, ebx
	call sub_49D3CC
	test eax, eax
	jz loc_47C8DE
	mov esi, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	mov edi, 35Ah
	mov edx, [esp+110h]
	mov eax, aHuddata3 ; "huddata3"
	xor ebx, ebx
	mov dword [dword_4DB1D8], esi
	mov dword [dword_4DB1DC], edi
	call sub_484498
	mov ebp, [esp+10Ch]
	mov ebx, [esp+110h]
	mov ecx, dword [dword_4D9940]
	mov dword [dword_55E3C0], eax
	add ecx, ebp
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_47C8DE

loc_47C985:
	cmp esi, 5
	jz loc_47C473
	cmp esi, 6
	jnz loc_47C9DA
	mov ecx, dword [dword_512234]
	push ecx
	mov edx, 100h
	push aTpgD ; "tpg%d"
	lea eax, [esp+10Ch]
	mov ebx, ebp
	push eax
	mov dword [dword_4D9944], edx
	lea edx, [esp+110h]
	call sprintf_
	add esp, 0Ch
	mov ecx, edi
	mov eax, dword [dword_55E430]
	call sub_4352C0
	mov dword [dword_4D9944], ebp
	jmp loc_47C4BE

loc_47C9DA:
	push esi
	push aHudD ; "hud%d"
	lea eax, [esp+10Ch]
	push eax
	lea edx, [esp+110h]
	mov ecx, edi
	call sprintf_
	add esp, 0Ch
	mov ebx, ebp
	mov eax, dword [dword_55E430]
	call sub_4352C0
	jmp loc_47C4BE

loc_47CA0A:
	cmp ebp, 0AF0h
	jl loc_47C584
	jmp loc_47C5FF

loc_47CA1B:
	mov [esi], eax
	jmp loc_47C5EF

loc_47CA22:
	push aBack0_rlf ; "back0.rlf"
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_55BF58
	mov eax, esp
	call sub_47CBF0
	push aBack1_rlf ; "back1.rlf"
	mov dword [dword_560DD0], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_55BF38
	mov eax, esp
	call sub_47CBF0
	push aBack2_rlf ; "back2.rlf"
	mov dword [dword_560C60], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_558C88
	mov eax, esp
	call sub_47CBF0
	push aMapbkg_rlf ; "mapbkg.rlf"
	mov dword [dword_560C68], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_55BF50
	mov eax, esp
	call sub_47CBF0
	push aTop0_rlf ; "top0.rlf"
	mov dword [dword_560DDC], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_558C90
	mov eax, esp
	call sub_47CBF0
	mov dword [dword_55E448], eax
	push aTop1_rlf ; "top1.rlf"
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_55BF48
	mov eax, esp
	call sub_47CBF0
	push aTop2_rlf ; "top2.rlf"
	mov dword [dword_560DD4], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_55BF40
	mov eax, esp
	call sub_47CBF0
	push aBottom0_rlf ; "bottom0.rlf"
	mov dword [dword_560DD8], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_557CF8
	mov eax, esp
	call sub_47CBF0
	push aBottom1_rlf ; "bottom1.rlf"
	mov dword [dword_560C64], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_558C80
	mov eax, esp
	call sub_47CBF0
	push aBottom2_rlf ; "bottom2.rlf"
	mov dword [dword_55E304], eax
	lea eax, [esp+4]
	push eax
	call sprintf_
	add esp, 8
	mov edx, dword_557D28
	mov eax, esp
	call sub_47CBF0
	mov dword [dword_55E43C], eax
	add esp, 128h
	pop ebp
	pop edi
	pop esi
	pop edx
	ret
;sub_47C3F0 endp

sub_47CB90: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4D9940]
	test edx, edx
	jnz loc_47CB9D
	pop edx
	ret

loc_47CB9D:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D9940], ecx
	pop ecx
	pop edx
	ret
;sub_47CB90 endp

sub_47CBB0: ;SUBROUTINE
	push edx
	sub esp, 0FCh
	mov edx, dword [dword_51349C]
	push edx
	push aShuddata_viv ; "%shuddata.viv"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	xor edx, edx
	mov eax, esp
	call sub_486F50
	mov dword [dword_4D9940], eax
	add esp, 0FCh
	pop edx
	ret
;sub_47CBB0 endp

sub_47CBF0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, edx
	cmp dword [dword_4D9940], 0
	jnz loc_47CC2E

loc_47CC03:
	mov eax, esi

loc_47CC05:
	mov edx, [esp+4]
	add edx, esi
	cmp eax, edx
	jnb loc_47CD0A
	mov edx, [eax+4]
	cmp edx, 1Dh
	jnb loc_47CC99
	cmp edx, 12h
	jnb loc_47CCD3

loc_47CC28:
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CC2E:
	push 0
	lea edx, [esp+8]
	lea ecx, [esp+4]
	push edx
	mov edx, dword [dword_4D9940]
	xor ebx, ebx
	mov [esp+10h], edx
	mov edx, eax
	mov eax, [esp+10h]
	call sub_49D3CC
	test eax, eax
	jz loc_47CC03
	mov ecx, aCNfs2seGamePcH ; "c:\\nfs2se\\game\\pc\\hud.c"
	mov ebx, 272h
	mov edx, [esp+4]
	mov eax, aFacetlst ; "facetlst"
	mov dword [dword_4DB1DC], ebx
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov edx, [esp]
	mov ebx, [esp+4]
	mov ecx, dword [dword_4D9940]
	mov esi, eax
	add ecx, edx
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	jmp loc_47CC03

loc_47CC99:
	ja loc_47CCA9
	lea edx, [eax+2Ch]
	mov [eax], edx
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CCA9:
	cmp edx, 1Eh
	ja loc_47CCBC
	lea edx, [eax+28h]
	mov [eax], edx
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CCBC:
	cmp edx, 21h
	jnz loc_47CC28
	lea edx, [eax+40h]
	mov [eax], edx
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CCD3:
	ja loc_47CCE3
	lea edx, [eax+14h]
	mov [eax], edx
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CCE3:
	cmp edx, 14h
	jnz loc_47CC28
	lea edx, [eax+24h]
	mov ebx, [eax+20h]
	mov [eax], edx
	imul edx, ebx, 1Ch
	mov edi, dword_558820
	add edi, edx
	mov [eax+20h], edi
	mov edi, eax
	mov eax, [eax]
	jmp loc_47CC05

loc_47CD0A:
	mov dword [edi], 0
	mov [ebp+0], esi
	mov eax, esi
	mov [ebp+4], edi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47CBF0 endp

sub_47CD30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, 10h
	xor edx, edx
	xor ecx, ecx
	mov dword [dword_55E440], edx
	mov dword [dword_55E444], edx
	mov dword [dword_55E42C], edx
	xor bl, bl

loc_47CD51:
	mov eax, ecx
	mov edx, esi
	shl eax, 5

loc_47CD58:
	inc eax
	mov byte byte_5579F7[eax], bl
	mov byte (dword_5579E4+3)[eax], bl
	cmp eax, edx
	jnz loc_47CD58
	inc ecx
	add esi, 20h
	cmp ecx, 0Eh
	jl loc_47CD51
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47CD30 endp

sub_47CD80: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov eax, dword_557BA8
	mov ecx, 13Eh
	xor edx, edx
	mov esi, 45h
	call sub_47CF20
	mov eax, dword_557C18
	xor edx, edx
	mov ebp, 135h
	call sub_47CF20
	mov edx, 0F1h
	mov eax, dword_557C88
	xor ebx, ebx
	call sub_47CF20
	mov edx, 214h
	mov eax, dword [dword_51206C]
	mov dword [dword_557BD4], ecx
	mov dword [dword_557C40], ebx
	mov dword [dword_557C44], esi
	mov dword [dword_557CB0], ebx
	mov dword [dword_557BD0], edx
	mov edx, aHud2 ; "hud2"
	mov dword [dword_557CB4], ebp
	call sub_482EB4
	mov edx, eax
	call sub_49E584
	mov ecx, [edx+0Ch]
	mov ebx, [eax]
	shl ecx, 14h
	mov edx, [edx+0Ch]
	sar ecx, 14h
	shl edx, 4
	add ebx, ecx
	sar edx, 14h
	mov dword [dword_557C08], ebx
	mov ebx, [eax+4]
	add ebx, edx
	mov dword [dword_557C0C], ebx
	mov ebx, [eax+8]
	mov eax, [eax+0Ch]
	add eax, edx
	mov dword [dword_557C04], eax
	mov eax, dword [dword_557C08]
	add ecx, ebx
	mov dword [dword_557C78], eax
	mov eax, dword [dword_557C0C]
	mov dword [dword_557C00], ecx
	lea edx, [eax-0F0h]
	mov dword [dword_557C70], ecx
	mov dword [dword_557C7C], edx
	mov dword [dword_557CEC], eax
	mov edx, dword [dword_557C04]
	mov eax, dword [dword_557C70]
	lea ecx, [edx-0F0h]
	mov dword [dword_557CE0], eax
	mov eax, dword [dword_51206C]
	mov dword [dword_557C74], ecx
	mov dword [dword_557CE4], edx
	mov ecx, dword [dword_557C78]
	mov edx, aHud3 ; "hud3"
	mov dword [dword_557CE8], ecx
	call sub_482EB4
	mov edx, eax
	call sub_49E584
	mov ebx, [edx+0Ch]
	mov ecx, [eax]
	shl ebx, 14h
	mov edx, [edx+0Ch]
	mov eax, [eax+4]
	shl edx, 4
	sar ebx, 14h
	sar edx, 14h
	add ecx, ebx
	mov ebx, 1D4h
	mov dword [dword_557BF0], ecx
	add eax, edx
	mov ecx, 140h
	mov dword [dword_557BF4], eax
	mov dword [dword_557C14], ebx
	mov dword [dword_557C84], ebx
	xor edx, edx
	mov eax, 0FFFFFFFFh
	mov dword [dword_557C10], ecx
	mov dword [dword_557C80], ecx
	mov dword [dword_557CF0], ecx
	mov dword [dword_55E42C], edx
	mov dword [dword_557C60], eax
	mov dword [dword_557CD0], eax
	mov eax, 24Ch
	mov dword [dword_55E440], edx
	mov dword [dword_557CF4], eax
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47CD80 endp

sub_47CF20: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebx, edx
	mov edx, aHud0 ; "hud0"
	mov eax, dword [dword_51206C]
	call sub_482EB4
	mov edx, eax
	call sub_49E584
	mov edi, [edx+0Ch]
	shl edi, 14h
	mov esi, [eax]
	sar edi, 14h
	add esi, edi
	mov [ecx+18h], esi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov edi, [eax+4]
	sar esi, 14h
	add esi, edi
	add esi, ebx
	mov [ecx+1Ch], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+8]
	sar esi, 14h
	add edi, esi
	mov [ecx+20h], edi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov ebp, [eax+0Ch]
	sar esi, 14h
	add esi, ebp
	add esi, ebx
	mov [ecx+24h], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+10h]
	sar esi, 14h
	add edi, esi
	mov [ecx], edi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov edi, [eax+14h]
	sar esi, 14h
	add esi, edi
	add esi, ebx
	mov [ecx+4], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+18h]
	sar esi, 14h
	add edi, esi
	mov [ecx+40h], edi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov ebp, [eax+1Ch]
	sar esi, 14h
	add esi, ebp
	add esi, ebx
	mov [ecx+44h], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+20h]
	sar esi, 14h
	add edi, esi
	mov [ecx+10h], edi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov edi, [eax+24h]
	sar esi, 14h
	add esi, edi
	add esi, ebx
	mov [ecx+14h], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+28h]
	sar esi, 14h
	add edi, esi
	mov [ecx+38h], edi
	mov esi, [edx+0Ch]
	shl esi, 4
	mov ebp, [eax+2Ch]
	sar esi, 14h
	add esi, ebp
	add esi, ebx
	mov [ecx+3Ch], esi
	mov esi, [edx+0Ch]
	shl esi, 14h
	mov edi, [eax+30h]
	sar esi, 14h
	add edi, esi
	mov [ecx+8], edi
	mov edx, [edx+0Ch]
	shl edx, 4
	mov esi, [eax+34h]
	sar edx, 14h
	add edx, esi
	add edx, ebx
	mov [ecx+0Ch], edx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47CF20 endp

sub_47D040: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, dword [dword_4D993C]
	mov edi, eax
	cmp esi, 77h
	jl loc_47D17C
	xor eax, eax

loc_47D056:
	mov ebp, dword_558C98
	shl eax, 6
	add ebp, eax
	mov eax, esi
	shl eax, 6
	mov dword dword_558C98[eax], ebp
	mov dword dword_558CA0[eax], edi
	mov dword dword_558CA4[eax], edx
	mov byte byte_558CC0[eax], bl
	mov byte byte_558CC1[eax], cl
	mov ebp, 21h
	mov edx, [esp+18h]
	mov dword dword_558C9C[eax], ebp
	mov ecx, 3F800000h
	mov dword dword_558CA8[eax], edx
	mov dword dword_558CD4[eax], ecx
	mov edx, [esp+1Ch]
	mov dword dword_558CAC[eax], edx
	mov edx, [esp+30h]
	mov dword dword_558CB0[eax], edx
	mov edx, [esp+34h]
	mov dword dword_558CB4[eax], edx
	mov edx, [esp+48h]
	mov dword dword_558CB8[eax], edx
	mov edx, [esp+4Ch]
	mov dword dword_558CBC[eax], edx
	mov dl, [esp+10h]
	mov byte byte_558CC2[eax], dl
	mov dl, [esp+14h]
	mov byte byte_558CC3[eax], dl
	mov dl, [esp+20h]
	mov byte byte_558CC4[eax], dl
	mov dl, [esp+24h]
	mov byte byte_558CC5[eax], dl
	mov dl, [esp+28h]
	mov byte byte_558CC6[eax], dl
	mov dl, [esp+2Ch]
	mov byte byte_558CC7[eax], dl
	mov dl, [esp+38h]
	mov byte byte_558CC8[eax], dl
	mov dl, [esp+3Ch]
	mov byte byte_558CC9[eax], dl
	mov dl, [esp+40h]
	mov byte byte_558CCA[eax], dl
	mov dl, [esp+44h]
	mov byte byte_558CCB[eax], dl
	mov dl, [esp+50h]
	mov byte byte_558CCC[eax], dl
	mov dl, [esp+54h]
	mov byte byte_558CCD[eax], dl
	mov dl, [esp+58h]
	mov byte byte_558CCE[eax], dl
	mov dl, [esp+5Ch]
	mov byte byte_558CCF[eax], dl
	xor edx, edx
	mov dword dword_558CD0[eax], edx
	cmp esi, 77h
	jl loc_47D184
	xor esi, esi
	mov dword [dword_4D993C], esi
	pop ebp
	pop edi
	pop esi
	ret 50h

loc_47D17C:
	lea eax, [esi+1]
	jmp loc_47D056

loc_47D184:
	inc esi
	mov dword [dword_4D993C], esi
	pop ebp
	pop edi
	pop esi
	ret 50h
;sub_47D040 endp

sub_47D1A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, dword [dword_4D9938]
	mov edi, eax
	mov ebp, edx
	cmp esi, 77h
	jl loc_47D277
	xor edx, edx

loc_47D1B8:
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	sub eax, edx
	mov edx, dword_55AA98
	shl eax, 2
	add edx, eax
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 2
	sub eax, esi
	mov dword dword_55AA98[eax*4], edx
	mov dword dword_55AAA0[eax*4], edi
	mov dword dword_55AAA4[eax*4], ebp
	mov dword dword_55AAA8[eax*4], ebx
	mov dword dword_55AAAC[eax*4], ecx
	mov dword dword_55AA9C[eax*4], 1Dh
	mov edx, [esp+10h]
	mov dword dword_55AAB0[eax*4], edx
	mov edx, [esp+14h]
	mov dword dword_55AAB4[eax*4], edx
	mov edx, [esp+18h]
	mov dword dword_55AAB8[eax*4], edx
	mov edx, [esp+1Ch]
	mov dword dword_55AABC[eax*4], edx
	mov dl, [esp+20h]
	mov byte byte_55AAC0[eax*4], dl
	mov dl, [esp+24h]
	mov byte byte_55AAC1[eax*4], dl
	mov dl, [esp+28h]
	mov byte byte_55AAC2[eax*4], dl
	mov dl, [esp+2Ch]
	mov byte byte_55AAC3[eax*4], dl
	cmp esi, 77h
	jl loc_47D27F
	xor esi, esi
	mov dword [dword_4D9938], esi
	pop ebp
	pop edi
	pop esi
	ret 20h

loc_47D277:
	lea edx, [esi+1]
	jmp loc_47D1B8

loc_47D27F:
	inc esi
	mov dword [dword_4D9938], esi
	pop ebp
	pop edi
	pop esi
	ret 20h
;sub_47D1A0 endp

sub_47D290: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, dword [dword_4D9934]
	mov edi, edx
	cmp esi, 77h
	jl loc_47D329
	xor edx, edx

loc_47D2A6:
	lea eax, 0[edx*8]
	add eax, edx
	mov ebp, dword_55D220
	shl eax, 2
	add ebp, eax
	lea eax, 0[esi*8]
	add eax, esi
	mov edx, 14h
	mov dword dword_55D220[eax*4], ebp
	mov dword dword_55D224[eax*4], edx
	mov dword dword_55D240[eax*4], edi
	mov dword dword_55D228[eax*4], ebx
	mov dword dword_55D22C[eax*4], ecx
	mov edx, [esp+18h]
	mov dword dword_55D230[eax*4], edx
	mov edx, [esp+1Ch]
	mov dword dword_55D234[eax*4], edx
	mov edx, [esp+10h]
	mov dword dword_55D238[eax*4], edx
	mov edx, [esp+14h]
	mov dword dword_55D23C[eax*4], edx
	cmp esi, 77h
	jl loc_47D331
	xor esi, esi
	mov dword [dword_4D9934], esi
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_47D329:
	lea edx, [esi+1]
	jmp loc_47D2A6

loc_47D331:
	inc esi
	mov dword [dword_4D9934], esi
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_47D290 endp

off_47D350: dd aEng1
	dd aGer1 ; "ger1"
	dd aFre1_0 ; "fre1"
	dd aSpa1 ; "spa1"
	dd aIta1 ; "ita1"
	dd aSwe1 ; "swe1"
	dd aEng2 ; "eng2"
	dd aGer2 ; "ger2"
	dd aFre2_0 ; "fre2"
	dd aSpa2 ; "spa2"
	dd aIta2 ; "ita2"
	dd aSwe2 ; "swe2"
off_47D380: dd aPio
	dd dword_4CEAE8
	dd aOut_0 ; "out"
	dd aPac_1 ; "pac"
	dd aLas ; "las"
	dd aNor_0 ; "nor"
	dd aMed_1 ; "med"
	dd aMys ; "mys"
	dd aMon_0 ; "mon"
off_47D3A4: dd aMac_0
	dd aFer ; "fer"
	dd a355f ; "355f"
	dd aFrd ; "frd"
	dd aInd_0 ; "ind"
	dd aMus_2 ; "mus"
	dd aJag_2 ; "jag"
	dd aGt1_1 ; "gt1"
	dd aV8 ; "v8"
	dd aNaz ; "naz"
	dd aIta ; "ita"
	dd aIsd_0 ; "isd"
	dd aBra ; "bra"
	dd aBlk ; "blk"
	dd aFzr_0 ; "fzr"
off_47D3E0: dd aEngl_3
	dd aGerm_2 ; "germ"
	dd aFren_2 ; "fren"
	dd aSpan_2 ; "span"
	dd aItly_2 ; "itly"
	dd aSwed_2 ; "swed"

sub_47D400: ;SUBROUTINE
	call sub_484B3C
	mov dword [dword_4DA1B4], eax
	ret
;sub_47D400 endp

sub_47D410: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 118h
	mov ecx, 6
	lea edi, [esp+100h]
	mov esi, off_47D3E0
	mov edx, dword [dword_51221C]
	rep movsd
	push edx
	mov ecx, dword [dword_513498]
	push ecx
	push aSload_qfs ; "%sLoad.qfs"
	lea eax, [esp+0Ch]
	push eax
	mov ebx, dword [dword_512234]
	call sprintf_
	add esp, 10h
	xor edx, edx
	mov eax, esp
	call sub_488058
	mov ecx, eax
	call sub_4289F0
	call sub_4287C0
	mov eax, ecx
	mov edx, [esp+ebx*4+100h]
	call sub_482EA8
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_483460
	call sub_428770
	call sub_428770
	test ecx, ecx
	jnz loc_47D4A8
	add esp, 118h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47D4A8:
	mov eax, ecx
	call sub_4848FC
	add esp, 118h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47D410 endp

sub_47D4C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 4
	mov ebx, eax
	push 0
	call sub_4976C8
	push 2
	call sub_497680
	mov edx, ebx
	mov esi, 42380000h
	lea eax, 0[edx*4]
	push 0
	add eax, edx
	mov edx, 1B4h
	shl eax, 3
	mov dword [dword_4DA164], esi
	sub edx, eax
	mov dword [dword_4DA184], esi
	mov [esp+4], edx
	lea edx, [ebx-1]
	push 1
	lea eax, 0[edx*4]
	fild dword [esp+8]
	add eax, edx
	mov edx, 1B4h
	shl eax, 3
	fstp dword [flt_4DA128]
	sub edx, eax
	fld dword [flt_4DA128]
	mov [esp+8], edx
	fstp dword [flt_4DA188]
	fild dword [esp+8]
	mov edx, 42000000h
	fst dword [flt_4DA148]
	fstp dword [flt_4DA168]
	mov dword [dword_4DA124], edx
	mov dword [dword_4DA144], edx
	call sub_497738
	push dword_4DA1A4
	push dword_4DA124
	push 1
	call sub_497D6C
	call sub_4976B8
	push 0
	call sub_4976C8
	push dword_4DA1A4
	push dword_4DA124
	push 1
	call sub_497D6C
	call sub_4976B8
	call sub_4824BC
	test ebx, ebx
	jle loc_47D5B0
	cmp ebx, 0Bh
	jl loc_47D5B8

loc_47D5B0:
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47D5B8:
	mov al, bl
	add al, 4
	movsx edx, al
	mov eax, 1400h
	call sub_463930
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47D4C0 endp

sub_47D5E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 1B8h
	mov [esp+1B4h], eax
	mov ecx, 6
	lea edi, [esp+194h]
	mov esi, off_47D350
	rep movsd
	mov ecx, 9
	lea edi, [esp+170h]
	mov esi, off_47D380
	mov edx, [esp+1B4h]
	mov eax, dword [dword_512234]
	rep movsd
	xor ebx, ebx
	mov ecx, 0Fh
	lea edi, [esp+100h]
	mov esi, off_47D3A4
	xor ebp, ebp
	mov [esp+1B0h], eax
	rep movsd
	mov eax, dword [dword_51221C]
	mov edi, 8
	xor esi, esi
	test dx, dx
	jz loc_47D675

loc_47D654:
	cmp dword [dword_512214], 0
	jz loc_47D67F
	cmp word [esp+1B4h], 0
	jle loc_47D67F

loc_47D668:
	add esp, 1B8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47D675:
	xor edx, edx
	mov dword [dword_4DA11C], edx
	jmp loc_47D654

loc_47D67F:
	cmp word [esp+1B4h], 2
	jge loc_47D6AD
	cmp dword [dword_512208], 4
	jnz loc_47D6AD
	mov edx, dword [dword_51220C]
	cmp word (dword_512F98+2)[edx*2], 24h
	jnz loc_47D6AD
	cmp dword [dword_512214], 0
	jz loc_47D668

loc_47D6AD:
	cmp dword [dword_512208], 1
	jnz loc_47D6DE
	cmp word [esp+1B4h], 2
	jge loc_47D6DE
	xor edx, edx
	mov dl, byte [byte_512DBD]
	mov ecx, dword [dword_512270]
	add edx, 0Ch
	cmp edx, ecx
	jle loc_47D668
	cmp edx, dword [dword_5122B0]
	jle loc_47D668

loc_47D6DE:
	cmp dword [dword_512208], 1
	jge loc_47D70B
	cmp word [esp+1B4h], 2
	jge loc_47D70B
	xor edx, edx
	mov dl, byte [byte_512DBD]
	mov ecx, dword [dword_512270]
	add edx, 0Ch
	cmp edx, ecx
	jle loc_47D668

loc_47D70B:
	cmp word [esp+1B4h], 2
	jge loc_47D723
	cmp byte [byte_512ECC], 0
	jnz loc_47D668

loc_47D723:
	test eax, eax
	jl loc_47D8A3
	cmp eax, 8
	jg loc_47D8A3

loc_47D734:
	shl eax, 2
	mov [esp+1ACh], eax

loc_47D73E:
	test ebp, ebp
	jnz loc_47D8AA

loc_47D746:
	mov ebp, dword [dword_512208]
	inc ebx
	cmp ebp, 1
	jnz loc_47D97F
	mov eax, dword [dword_5121F8]
	cmp eax, 2
	jnz loc_47D97F
	cmp eax, dword [dword_512264]
	jle loc_47D97F
	xor eax, eax
	call sub_4072D0
	test ax, ax
	jz loc_47D972

loc_47D780:
	movzx si, byte [byte_512DBF]

loc_47D788:
	cmp si, 3
	jnz loc_47DA25

loc_47D792:
	mov edi, 7

loc_47D797:
	cmp si, 0Ch
	jge loc_47DA34
	mov cl, byte [byte_50B480]
	xor edx, edx
	mov dl, cl
	mov dl, byte byte_4D5A49[edx]
	and edx, 0FFh
	movsx ebp, di
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	inc cl
	mov byte [byte_50B480], cl
	inc edx

loc_47D7CA:
	cmp si, 3
	jnz loc_47DA3E

loc_47D7D4:
	cmp dx, 7
	jle loc_47DA48
	movsx eax, dx
	push eax
	movsx eax, si
	push eax
	mov ecx, aCNfs2seGamePcL ; "c:\\nfs2se\\game\\pc\\loading.c"
	mov ebp, 99h
	push aBadSlidePickCa ; "bad slide pick: car = %d, # = %d"
	mov dword [dword_4DB1D8], ecx
	mov dword [dword_4DB1DC], ebp

loc_47D801:
	call sub_4840F0
	add esp, 0Ch

loc_47D809:
	cmp word [esp+1B4h], 2
	jz loc_47DAA1
	movzx ebp, byte [byte_512DBD]
	movsx eax, si
	add ebp, 0Ch
	cmp eax, ebp
	jge loc_47DAA1
	cmp dword [dword_512214], 0
	jnz loc_47DAA1
	shl eax, 2
	cmp dx, 1
	jz loc_47DA7F
	movsx edx, dx
	push edx
	mov ecx, [esp+eax+104h]
	push ecx
	push aSD_3 ; "%s%d"
	lea eax, [esp+148h]
	push eax
	call sprintf_
	add esp, 10h

loc_47D868:
	lea eax, [esp+13Ch]
	push eax
	mov ebp, dword [dword_5134D0]
	push ebp
	push aSsldS_qfs ; "%ssld%s.qfs"

loc_47D87C:
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	mov eax, esp
	xor edx, edx
	call sub_488058
	mov ebp, eax
	cmp bx, 14h
	jg loc_47D668
	jmp loc_47D73E

loc_47D8A3:
	xor eax, eax
	jmp loc_47D734

loc_47D8AA:
	jz loc_47D746
	call sub_4287C0
	xor eax, eax
	call sub_482740
	call sub_428770
	push 0
	call sub_4976C8
	call sub_4287C0
	mov edx, aBack_3 ; "back"
	mov eax, ebp
	xor ebx, ebx
	call sub_482EA8
	xor edx, edx
	call sub_483460
	cmp word [esp+1B4h], 2
	jnz loc_47DAC0

loc_47D8F2:
	mov edx, [esp+1B0h]
	mov eax, ebp
	mov edx, [esp+edx*4+194h]
	call sub_482EA8
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_483460

loc_47D91E:
	call sub_428770
	call sub_428770
	test ebp, ebp
	jz loc_47D933
	mov eax, ebp
	call sub_4848FC

loc_47D933:
	mov ecx, [esp+1B4h]
	test cx, cx
	jnz loc_47DAE7

loc_47D943:
	cmp byte [byte_512ECC], 0
	jnz loc_47D668
	mov eax, dword [dword_51221C]
	mov edi, 1
	call sub_476A00
	mov dword [dword_4DA11C], edi
	add esp, 1B8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47D972:
	movzx si, byte [byte_512DDA]
	jmp loc_47D788

loc_47D97F:
	cmp dword [dword_512208], 1
	jnz loc_47D9CE
	cmp word [esp+1B4h], 1
	jnz loc_47D9CE
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512DBD]
	mov dl, byte [byte_512DDA]
	add eax, 0Ch
	movzx si, byte [byte_512DDA]
	cmp edx, eax
	jl loc_47D788
	xor edx, edx
	mov dl, byte [byte_512DBF]
	cmp edx, eax
	jge loc_47D788
	movzx si, dl
	jmp loc_47D788

loc_47D9CE:
	cmp dword [dword_512208], 1
	jnz loc_47D780
	cmp word [esp+1B4h], 0
	jnz loc_47D780
	xor eax, eax
	xor edx, edx
	mov al, byte [byte_512DBD]
	mov dl, byte [byte_512DBF]
	add eax, 0Ch
	movzx si, byte [byte_512DBF]
	cmp edx, eax
	jl loc_47D788
	xor edx, edx
	mov dl, byte [byte_512DDA]
	cmp edx, eax
	jge loc_47D788
	movzx si, dl
	jmp loc_47D788

loc_47DA25:
	cmp si, 5
	jz loc_47D792
	jmp loc_47D797

loc_47DA34:
	mov edx, 1
	jmp loc_47D7CA

loc_47DA3E:
	cmp si, 5
	jz loc_47D7D4

loc_47DA48:
	cmp dx, 1
	jl loc_47DA58
	cmp dx, 8
	jle loc_47D809

loc_47DA58:
	mov dword [dword_4DB1DC], 9Dh
	movsx eax, dx
	push eax
	movsx eax, si
	push eax
	mov ebp, aCNfs2seGamePcL ; "c:\\nfs2se\\game\\pc\\loading.c"
	push aBadSlidePickCa ; "bad slide pick: car = %d, # = %d"
	mov dword [dword_4DB1D8], ebp
	jmp loc_47D801

loc_47DA7F:
	mov edx, [esp+eax+100h]
	push edx
	push aS_2 ; "%s"
	lea eax, [esp+144h]
	push eax
	call sprintf_
	add esp, 0Ch
	jmp loc_47D868

loc_47DAA1:
	mov eax, [esp+1ACh]
	mov ebp, [esp+eax+170h]
	push ebp
	mov eax, dword [dword_513498]
	push eax
	push aSSload_qfs ; "%s%sload.qfs"
	jmp loc_47D87C

loc_47DAC0:
	xor eax, eax
	mov al, byte [byte_512DBD]
	movsx edx, si
	add eax, 0Ch
	cmp edx, eax
	jge loc_47D8F2
	cmp dword [dword_512214], 0
	jnz loc_47D8F2
	jmp loc_47D91E

loc_47DAE7:
	cmp dword [dword_4DA11C], 0
	jnz loc_47DAFA
	cmp cx, 2
	jz loc_47D943

loc_47DAFA:
	cmp dword [dword_512214], 0
	jnz loc_47D943
	cmp word [esp+1B4h], 2
	jnz loc_47DB2F
	cmp dword [dword_512208], 4
	jnz loc_47DB2F
	mov eax, dword [dword_51220C]
	cmp word (dword_512F98+2)[eax*2], 24h
	jz loc_47D943

loc_47DB2F:
	cmp word [esp+1B4h], 2
	jnz loc_47DB67
	cmp dword [dword_512208], 1
	jnz loc_47DB67
	xor eax, eax
	mov al, byte [byte_512DBD]
	mov edx, dword [dword_512270]
	add eax, 0Ch
	cmp eax, edx
	jle loc_47D943
	cmp eax, dword [dword_5122B0]
	jle loc_47D943

loc_47DB67:
	cmp word [esp+1B4h], 2
	jnz loc_47D668
	cmp dword [dword_512208], 1
	jge loc_47D668
	xor eax, eax
	mov al, byte [byte_512DBD]
	mov esi, dword [dword_512270]
	add eax, 0Ch
	cmp eax, esi
	jle loc_47D943
	add esp, 1B8h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47D5E0 endp

dword_47DBB0: times 2 dd 0
	times 2 db 0
byte_47DBBA: db 0
byte_47DBBB: db 0
byte_47DBBC: db 0
byte_47DBBD: times 3 db 0
	dd 0
	times 3 db 0
byte_47DBC7: db 0
	times 0Ah dd 0

sub_47DBF0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov edi, eax
	mov edx, dword [dword_56297C]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	mov esi, dword_562988
	add eax, edx
	mov ecx, 1Dh
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edx, dword [dword_56297C]
	inc edx
	mov esi, 6
	mov dword [dword_56297C], edx
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	dec dword [dword_562984]
	mov dword [dword_56297C], edx
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_47DBF0 endp

sub_47DC50: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov ebx, edx
	mov edx, dword [dword_562980]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	mov edi, dword_562988
	add eax, edx
	add edi, eax
	push edi

loc_47DC74:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47DC8C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47DC74

loc_47DC8C:
	pop edi
	mov edx, dword [dword_562980]
	lea eax, 0[edx*8]
	sub eax, edx
	shl eax, 2
	mov edi, dword_562988
	add eax, edx
	mov ecx, 14h
	add edi, eax
	mov esi, ebx
	add edi, 9
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edx, dword [dword_562980]
	inc edx
	mov ebx, 6
	mov dword [dword_562980], edx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	inc dword [dword_562984]
	mov dword [dword_562980], edx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47DC50 endp

sub_47DCF0: ;SUBROUTINE
	cmp dword [dword_562984], 0
	jz loc_47DCFC
	xor eax, eax
	ret

loc_47DCFC:
	mov eax, 1
	ret
;sub_47DCF0 endp

sub_47DD10: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_56297C], edx
	mov dword [dword_562980], edx
	mov dword [dword_562984], edx
	mov dword [dword_562A70], edx
	pop edx
	ret
;sub_47DD10 endp

sub_47DD30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	xor ecx, ecx
	xor edi, edi

loc_47DD3B:
	mov edx, dword dword_5627F4[ecx]
	cmp edi, edx
	jnz loc_47DDA4

loc_47DD45:
	add ecx, 4
	cmp ecx, 1Ch
	jl loc_47DD3B
	mov ebx, dword [dword_5627F4]
	xor ecx, ecx
	xor eax, eax
	test ebx, ebx
	jz loc_47DD6D

loc_47DD5B:
	add ecx, 4
	inc eax
	cmp ecx, 1Ch
	jge loc_47DDB6
	cmp dword dword_5627F4[ecx], 0
	jnz loc_47DD5B

loc_47DD6D:
	mov ebx, eax
	shl eax, 2
	add eax, ebx
	shl eax, 2
	add eax, dword_562810
	mov edi, eax
	mov dword dword_5627F4[ecx], eax
	mov ecx, 14h
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, 1
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47DDA4:
	mov eax, dword_56289C
	mov ebx, edx
	mov edx, esi
	call sub_48B2F0
	test eax, eax
	jz loc_47DD45

loc_47DDB6:
	xor eax, eax
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47DD30 endp

sub_47DDC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	mov ecx, dword [dword_4DA1C0]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, dword [dword_4DA1C8]
	cmp byte [ecx+eax*4+0Fh], 0
	jnz loc_47DDF6
	xor ecx, ecx

loc_47DDE4:
	mov edx, dword dword_5627F4[ecx]
	test edx, edx
	jnz loc_47DDFB

loc_47DDEE:
	add ecx, 4
	cmp ecx, 1Ch
	jnz loc_47DDE4

loc_47DDF6:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47DDFB:
	mov eax, dword_56289C
	mov ebx, edx
	mov edx, esi
	call sub_48B2F0
	test eax, eax
	jz loc_47DDEE
	xor ebx, ebx
	mov dword dword_5627F4[ecx], ebx
	add ecx, 4
	cmp ecx, 1Ch
	jnz loc_47DDE4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47DDC0 endp

sub_47DE30: ;SUBROUTINE
	push edx
	xor eax, eax

loc_47DE33:
	add eax, 4
	xor edx, edx
	mov dword dword_5627F0[eax], edx
	cmp eax, 1Ch
	jnz loc_47DE33
	pop edx
	ret
;sub_47DE30 endp

sub_47DE50: ;SUBROUTINE
	sub esp, 0Ch
	cmp dword [dword_4DA1B8], 0
	jnz loc_47DE65
	cmp dword [dword_562A70], 7
	jl loc_47DE6B

loc_47DE65:
	xor eax, eax
	add esp, 0Ch
	ret

loc_47DE6B:
	mov eax, edx
	call sub_47DD30
	test eax, eax
	jnz loc_47DE7F
	mov eax, 1
	add esp, 0Ch
	ret

loc_47DE7F:
	push esi
	mov esi, dword [dword_562A70]
	inc esi
	push esi
	push aPD ; "P %d"
	lea eax, [esp+0Ch]
	push eax
	mov dword [dword_562A70], esi
	call sprintf_
	add esp, 0Ch
	lea eax, [esp+4]
	call sub_47DC50
	mov eax, 1
	pop esi
	add esp, 0Ch
	ret
;sub_47DE50 endp

sub_47DEC0: ;SUBROUTINE
	cmp dword [dword_4DA1B8], 0
	jnz loc_47DED4
	mov ebx, dword [dword_562A70]
	cmp ebx, 7
	jl loc_47DED7

loc_47DED4:
	xor eax, eax
	ret

loc_47DED7:
	push esi
	lea esi, [ebx+1]
	lea eax, [edx+48h]
	mov dword [dword_562A70], esi
	call sub_47DC50
	mov eax, 1
	pop esi
	ret
;sub_47DEC0 endp

sub_47DEF0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp+4], eax
	mov [esp], edx
	mov ebp, ecx
	cmp word [word_4DA1D0], 14h
	jge loc_47DFD6
	xor edi, edi
	xor esi, esi

loc_47DF11:
	mov eax, dword [dword_4DA1CC+2]
	sar eax, 10h
	cmp esi, eax
	jl loc_47DFA7
	mov edi, dword [dword_4DA1D4]
	shl eax, 6
	mov esi, [esp]
	add edi, eax
	mov edx, [esp]
	push edi

loc_47DF33:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47DF4B
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47DF33

loc_47DF4B:
	pop edi
	xor eax, eax

loc_47DF4E:
	mov edi, dword [dword_4DA1CC+2]
	sar edi, 10h
	mov ebx, dword [dword_4DA1D4]
	shl edi, 6
	inc eax
	add ebx, edi
	mov edi, [edx+20h]
	add edx, 4
	mov [ebx+eax*4+18h], edi
	cmp eax, 4
	jl loc_47DF4E
	mov ecx, 14h
	lea edi, [ebx+2Ch]
	mov esi, ebp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov bx, word [word_4DA1D0]
	inc ebx
	mov eax, 1
	mov word [word_4DA1D0], bx
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_47DFA7:
	mov ebx, dword [dword_4DA1D4]
	mov eax, [esp+4]
	add ebx, edi
	mov edx, ebp
	add ebx, 2Ch
	call sub_48B2F0
	test eax, eax
	jnz loc_47DFCA
	inc esi
	add edi, 40h
	jmp loc_47DF11

loc_47DFCA:
	mov eax, 1
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_47DFD6:
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_47DEF0 endp

sub_47DFE0: ;SUBROUTINE
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	xor eax, eax
	call sub_483EB0
	cmp dword [dword_4DA1C8], 0
	jz loc_47DFFF
	cmp dword [dword_4DA1C0], 0Ah
	jl loc_47E004

loc_47DFFF:
	xor eax, eax
	pop edi
	pop esi
	ret

loc_47E004:
	mov edx, aDirectplay ; "DirectPlay"
	mov eax, esi
	call strstr_
	test eax, eax
	jz loc_47E0F8
	mov edx, aUdp ; "UDP"
	mov eax, esi
	call strstr_
	test eax, eax
	jz loc_47E0BF
	mov esi, dword [dword_4DA1C0]
	lea eax, 0[esi*8]
	add eax, esi
	mov edx, dword [dword_4DA1C8]
	shl eax, 2
	mov ebx, 0Fh
	add eax, edx
	mov edx, aDirectplayIpx ; "DirectPlay IPX"

loc_47E050:
	call strncpy_

loc_47E055:
	mov eax, dword [dword_4DA1C0]
	lea esi, 0[eax*8]
	add esi, eax
	mov eax, dword [dword_4DA1C8]
	shl esi, 2
	add eax, esi
	mov ecx, 10h
	add eax, 10h
	mov esi, edi
	mov edi, eax
	mov byte [eax-2], 0
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	mov ebx, dword [dword_4DA1C0]
	mov byte [edx+eax+0Fh], 1
	mov eax, 1
	add ebx, eax
	mov dword [dword_4DA1C0], ebx
	pop edi
	pop esi
	ret

loc_47E0BF:
	mov edx, aTcp ; "TCP"
	mov eax, esi
	call strstr_
	test eax, eax
	jz loc_47E055
	mov esi, dword [dword_4DA1C0]
	lea eax, 0[esi*8]
	add eax, esi
	mov edx, dword [dword_4DA1C8]
	shl eax, 2
	mov ebx, 0Fh
	add eax, edx
	mov edx, aDirectplayTcp ; "DirectPlay TCP"
	jmp loc_47E050

loc_47E0F8:
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	mov ebx, 0Fh
	add eax, edx
	mov edx, esi
	jmp loc_47E050
;sub_47DFE0 endp

sub_47E120: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov ecx, ebx
	mov edx, aCNfs2seGamePcN ; "c:\\nfs2se\\game\\pc\\net.c"
	xor eax, eax
	mov ebx, 431h
	call sub_483EB0
	mov eax, aServicelist ; "ServiceList"
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ebx
	mov ebx, 20h
	mov edx, 168h
	xor ebp, ebp
	call sub_484498
	mov dword [dword_4DA1C8], eax
	mov dword [dword_562A74], ebp
	mov ebx, esi
	mov edx, edi
	mov eax, sub_47DFE0
	mov dword [dword_4DA1C0], ebp
	call sub_48B02C
	test eax, eax
	jz loc_47E1AE
	cmp dword [dword_4DA1CC], 0
	jnz loc_47E1B3

loc_47E189:
	mov eax, dword [dword_4DA1C0]
	mov dword [dword_562A74], eax
	test eax, eax
	jnz loc_47E1A9
	mov eax, dword [dword_4DA1C8]
	xor esi, esi
	call sub_4848FC
	mov dword [dword_4DA1C8], esi

loc_47E1A9:
	mov eax, dword [dword_4DA1C8]

loc_47E1AE:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_47E1B3:
	mov ecx, dword [dword_4DA1C0]
	lea eax, 0[ecx*8]
	mov ebx, 0Fh
	add ecx, eax
	mov eax, dword [dword_4DA1C8]
	shl ecx, 2
	mov edx, aTcp ; "TCP"
	add eax, ecx
	call strncpy_
	mov ecx, dword [dword_4DA1C0]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov edi, dword [dword_4DA1C8]
	shl eax, 2
	add edi, eax
	add edi, 10h
	mov esi, dword_4DA1F0
	mov ecx, 10h
	mov byte [edi-2], 0
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, dword [dword_4DA1C0]
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, dword [dword_4DA1C8]
	mov byte [ecx+eax*4+0Fh], 0
	inc dword [dword_4DA1C0]
	jmp loc_47E189
;sub_47E120 endp

sub_47E240: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	movsx edx, dx
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 2
	add eax, edx
	mov ebx, dword_5130A0
	shl eax, 3
	mov edx, dword [dword_4DABCC]
	add ebx, eax
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov ecx, 3E8h
	mov [ebx+24h], eax
	mov dword [dword_4DBABC], ecx
	mov [ebx+28h], eax
	mov ecx, 14h
	mov [ebx+2Ch], eax
	mov eax, ebx
	lea edi, [ebx+30h]
	call sub_464010
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47E240 endp

sub_47E2B0: ;SUBROUTINE
	cmp byte [byte_51345E], 3
	jnz locret_47E351
	push esi
	push edx
	cmp word [word_513458], 0
	jz loc_47E31F
	xor edx, edx

loc_47E2CB:
	cmp dword dword_5130B0[edx], 0
	jz loc_47E2E0
	mov eax, dword_5130A0
	add eax, edx
	call sub_47E530

loc_47E2E0:
	add edx, 68h
	cmp edx, 2D8h
	jnz loc_47E2CB
	cmp dword [dword_4DA1D8], 0
	jz loc_47E31F
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_4DA1C8]
	cmp byte [edx+eax*4+0Fh], 0
	jz loc_47E31F
	mov edx, 1
	mov eax, dword_56289C
	call sub_48B274

loc_47E31F:
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	cmp byte [edx+eax+0Fh], 0
	jz loc_47E347
	mov eax, dword_56289C
	call sub_48B28C

loc_47E347:
	xor esi, esi
	mov dword [dword_4DA1D8], esi
	pop edx
	pop esi

locret_47E351:
	ret
;sub_47E2B0 endp

sub_47E360: ;SUBROUTINE
	push edx
	cmp word [word_513458], 0
	jz loc_47E3AD
	cmp word [word_51345A], 0
	jnz loc_47E3AD
	cmp dword [dword_4DA1D8], 0
	jz loc_47E3AD
	cmp byte [byte_51345E], 3
	jnz loc_47E3AD
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_4DA1C8]
	cmp byte [edx+eax*4+0Fh], 0
	jnz loc_47E3AF
	push ecx
	xor ecx, ecx
	mov dword [dword_4DA1D8], ecx
	pop ecx

loc_47E3AD:
	pop edx
	ret

loc_47E3AF:
	mov eax, dword_56289C
	xor edx, edx
	call sub_48B274
	push ecx
	xor ecx, ecx
	mov dword [dword_4DA1D8], ecx
	pop ecx
	pop edx
	ret
;sub_47E360 endp

sub_47E3D0: ;SUBROUTINE
	cmp word [word_513458], 0
	jz locret_47E41E
	cmp word [word_51345A], 0
	jnz locret_47E41E
	cmp dword [dword_4DA1D8], 0
	jnz locret_47E41E
	cmp byte [byte_51345E], 3
	jnz locret_47E41E
	push edx
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_4DA1C8]
	cmp byte [edx+eax*4+0Fh], 0
	jnz loc_47E41F
	mov dword [dword_4DA1D8], 1
	pop edx

locret_47E41E:
	ret

loc_47E41F:
	mov eax, dword_56289C
	call sub_48B280
	mov dword [dword_4DA1D8], 1
	pop edx
	ret
;sub_47E3D0 endp

sub_47E440: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 10h
	mov edi, word_513448
	lea esi, [edx+2]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	pop edi
	pop esi
	pop ecx
	ret
;sub_47E440 endp

sub_47E470: ;SUBROUTINE
	push edx
	push edi
	sub esp, 14h
	mov edx, eax
	cmp dword [dword_4DA1D8], 0
	jnz loc_47E489
	cmp eax, 7
	jg loc_47E489
	test eax, eax
	jge loc_47E48F

loc_47E489:
	add esp, 14h
	pop edi
	pop edx
	ret

loc_47E48F:
	mov eax, dword [dword_4DA1DC]
	lea edi, [edx+edx]
	call sub_489F48
	cmp word word_513448[edi], 0
	jnz loc_47E517
	push esi
	push ecx
	push ebx
	mov ecx, 2
	mov esi, word_513448
	mov eax, dword dword_513080[edx*4]
	mov ebx, 12h
	add eax, 30h
	lea edx, [esp+0Ch]
	call sub_47DDC0
	mov eax, dword [dword_4DA1DC]
	mov word word_513448[edi], cx
	call sub_489F60
	mov ah, 9
	mov ecx, 10h
	lea edi, [esp+0Eh]
	mov [esp+0Ch], ah
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov esi, 1
	xor eax, eax
	mov word [word_513424], si
	call sub_464070
	pop ebx
	pop ecx
	pop esi
	add esp, 14h
	pop edi
	pop edx
	ret

loc_47E517:
	mov eax, dword [dword_4DA1DC]
	call sub_489F60
	add esp, 14h
	pop edi
	pop edx
	ret
;sub_47E470 endp

sub_47E530: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp dword [eax+10h], 0
	jnz loc_47E53B
	pop edx
	ret

loc_47E53B:
	push ebx
	call sub_48A308
	mov eax, dword_56289C
	add edx, 30h
	call sub_48B2C0
	mov ebx, dword [dword_562A70]
	mov edx, 1
	dec ebx
	mov word [word_513424], dx
	mov dword [dword_562A70], ebx
	pop ebx
	pop edx
	ret
;sub_47E530 endp

sub_47E570: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov ebx, 1
	cmp ebx, dword [dword_512264]
	jge loc_47E5FA
	mov ecx, 4
	mov ebp, aCNfs2seGamePcN ; "c:\\nfs2se\\game\\pc\\net.c"
	mov edx, 2

loc_47E595:
	cmp word word_513448[edx], 2
	jnz loc_47E5E9
	cmp dword [dword_51220C], 0
	jz loc_47E600

loc_47E5A8:
	mov dword [dword_4DB1DC], 2E6h
	mov eax, dword [word_513456]
	sar eax, 10h
	push eax
	mov esi, dword [dword_51220C]
	push esi
	push aBugDropdeadpla ; "BUG: DropDeadPlayers LC=%d IsHost=%d\n"
	mov dword [dword_4DB1D8], ebp
	call sub_4840F0
	add esp, 0Ch

loc_47E5D5:
	mov eax, dword dword_513080[ecx]
	call sub_47E530
	mov word word_513448[edx], 1

loc_47E5E9:
	mov esi, dword [dword_512264]
	add edx, 2
	inc ebx
	add ecx, 4
	cmp ebx, esi
	jl loc_47E595

loc_47E5FA:
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47E600:
	cmp word [word_513458], 0
	jz loc_47E5A8
	jmp loc_47E5D5
;sub_47E570 endp

sub_47E610: ;SUBROUTINE
	push edx
	push ebp
	sub esp, 24h
	xor edx, edx
	mov ah, byte [byte_51345E]
	mov [esp+20h], dx
	cmp ah, 3
	jnz loc_47E712
	cmp word [word_513458], 0
	jz loc_47E71A
	push edi
	push esi
	push ecx
	push ebx
	xor ecx, ecx

loc_47E63F:
	movsx eax, dx
	imul eax, 68h
	mov ebx, dword dword_5130A4[eax]
	cmp ecx, ebx
	jnz loc_47E66B
	cmp ebx, dword dword_5130B0[eax]
	jz loc_47E66B
	add eax, dword_5130A0
	mov esi, 1
	call sub_47E530
	mov [esp+30h], si

loc_47E66B:
	inc edx
	cmp dx, 7
	jl loc_47E63F
	mov ebp, aCNfs2seGamePcN ; "c:\\nfs2se\\game\\pc\\net.c"

loc_47E677:
	call sub_47DCF0
	test eax, eax
	jnz loc_47E77D
	lea eax, [esp+10h]
	call sub_47DBF0
	xor edx, edx

loc_47E68F:
	movsx eax, dx
	imul ecx, eax, 68h
	cmp dword dword_5130A4[ecx], 0
	jnz loc_47E721
	mov edi, dword_513378
	lea eax, [eax+eax*8]
	lea esi, [esp+10h]
	add edi, eax
	push edi

loc_47E6B1:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47E6C9
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47E6B1

loc_47E6C9:
	pop edi

loc_47E6CA:
	mov eax, dword [dword_5637F4]
	mov ecx, dword_56289C
	add eax, 280h
	movsx edx, dx
	mov dword [dword_4DA1BC], eax
	lea eax, [esp+19h]
	mov ebx, 7
	call sub_47E240
	mov edx, 64h
	call sub_48B2CC
	test eax, eax
	jnz loc_47E754
	dec dword [dword_562A70]
	mov dword [dword_4DA1BC], 0FFFFFFFh
	jmp loc_47E677

loc_47E712:
	xor eax, eax

loc_47E714:
	add esp, 24h
	pop ebp
	pop edx
	ret

loc_47E71A:
	call sub_463B80
	jmp loc_47E714

loc_47E721:
	cmp dx, 7
	jnz loc_47E744
	mov eax, 2BBh
	push aBugAddnewplaye ; "BUG: AddNewPlayers() - Player Overflow "...
	mov dword [dword_4DB1D8], ebp
	mov dword [dword_4DB1DC], eax
	call sub_4840F0
	add esp, 4

loc_47E744:
	inc edx
	cmp dx, 8
	jl loc_47E68F
	jmp loc_47E6CA

loc_47E754:
	mov edx, 1
	mov bx, word [dword_513408+2]
	add ebx, edx
	mov [esp+30h], dx
	mov word [dword_513408+2], bx
	mov dword [dword_4DA1BC], 0FFFFFFFh
	jmp loc_47E677

loc_47E77D:
	mov edi, [esp+30h]
	mov ax, word [word_513424]
	or di, ax
	mov [esp+30h], di
	jz loc_47E796
	call sub_463C50

loc_47E796:
	mov eax, [esp+2Eh]
	sar eax, 10h
	pop ebx
	pop ecx
	pop esi
	pop edi
	add esp, 24h
	pop ebp
	pop edx
	ret
;sub_47E610 endp

sub_47E7B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov ebp, eax
	lea edi, [esp+28h]
	mov esi, byte_47DBBD
	movsd
	movsd
	movsw
	mov ecx, 0Ah
	mov edi, esp
	mov esi, byte_47DBC7
	rep movsd
	mov ecx, dword [dword_4DA1C4]
	test ecx, ecx
	jz loc_47E823

loc_47E7DF:
	mov ecx, 1
	mov ebx, 27h
	mov edx, 30Fh
	mov eax, esp
	call sub_402460
	test eax, eax
	jz loc_47E876
	mov ecx, dword_5628B8
	mov ebx, 406h
	mov edx, esp
	mov eax, dword_56289C
	call sub_48B2FC
	test eax, eax
	jnz loc_47E87F
	mov eax, 303h
	call sub_402CD0
	jmp loc_47E7DF

loc_47E823:
	push edx
	lea eax, [esp+2Ch]
	mov edx, dword [dword_4DA1C0]
	push eax
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	mov ebx, dword_4DA1E0
	add eax, edx
	push ecx
	lea ecx, [eax+10h]
	xor edx, edx
	mov eax, dword_56289C
	call sub_48B0B4
	test eax, eax
	jz loc_47E86A
	mov dword [dword_4DA1C4], 1
	jmp loc_47E7DF

loc_47E86A:
	mov eax, 303h
	call sub_402CD0
	xor eax, eax

loc_47E876:
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_47E87F:
	mov ecx, 14h
	mov esi, dword_5628B8
	mov edi, ebp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, 1
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47E7B0 endp

sub_47E8B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 4
	mov edi, eax
	mov al, byte [byte_47DBBC]
	mov edx, 0FFFFFFFEh
	mov [esp], al
	mov eax, 1
	xor ebx, ebx
	call sub_464030
	mov word [dword_51340C], dx
	xor ah, ah
	mov dl, 3
	mov byte [byte_5133C0], ah
	mov eax, 304h
	mov byte [byte_51345E], dl
	mov edx, 307h
	mov word [word_513458], bx
	call sub_4023D0
	mov ebx, dword [dword_4DA1C0]
	mov ecx, eax
	mov esi, eax
	lea eax, 0[ebx*8]
	add eax, ebx
	mov ebx, dword [dword_4DA1C8]
	cmp byte [ebx+eax*4+0Fh], 0
	jz loc_47E944
	mov ebx, esp
	mov eax, dword_56289C
	mov edx, edi
	call sub_48B244
	test eax, eax
	jle loc_47E9B2
	xor ecx, ecx

loc_47E938:
	cmp ecx, dword [dword_562940]
	jz loc_47E9E2

loc_47E944:
	call sub_463EA0
	mov eax, dword_5628B8
	mov ecx, dword_56289C
	xor edx, edx
	mov ebx, 7
	call sub_47E240
	mov edx, 64h
	call sub_48B2CC
	test eax, eax
	jnz loc_47EA4D
	mov edx, 303h
	mov eax, esi
	mov ecx, 1
	call sub_402340
	mov word [word_51345A], cx
	call sub_47E2B0
	xor esi, esi
	call sub_48A2B4
	mov word [word_51345A], si

loc_47E99C:
	call sub_405910
	test eax, eax
	jz loc_47EA24
	xor eax, eax
	call sub_483EB0
	jmp loc_47E99C

loc_47E9B2:
	mov edx, 303h
	mov eax, ecx
	call sub_402340

loc_47E9BE:
	call sub_483401
	test eax, eax
	jnz loc_47E9D0
	call sub_405910
	test eax, eax
	jz loc_47E9BE

loc_47E9D0:
	xor eax, eax
	call sub_464030

loc_47E9D7:
	xor eax, eax
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47E9E2:
	call sub_463E70
	test eax, eax
	jz loc_47E938
	mov edx, 303h
	mov eax, esi
	call sub_402340
	call sub_47E2B0

loc_47EA00:
	call sub_483401
	test eax, eax
	jnz loc_47E9D0
	call sub_405910
	test eax, eax
	jz loc_47EA00
	xor eax, eax
	call sub_464030
	xor eax, eax
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47EA24:
	call sub_483401
	test eax, eax
	jnz loc_47EA36
	call sub_405910
	test eax, eax
	jz loc_47EA24

loc_47EA36:
	call sub_40EA70
	xor eax, eax
	call sub_464030
	xor eax, eax
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47EA4D:
	xor ecx, ecx

loc_47EA4F:
	cmp cx, word [word_513424]
	jnz loc_47EAAC
	call sub_463E70
	test eax, eax
	jz loc_47EA4F
	mov edx, 303h
	mov eax, esi
	call sub_402340
	mov eax, 1
	xor edx, edx
	mov word [word_51345A], ax
	call sub_48A2B4
	mov word [word_51345A], dx
	call sub_463E40

loc_47EA8B:
	call sub_483401
	test eax, eax
	jnz loc_47E9D7
	call sub_405910
	test eax, eax
	jz loc_47EA8B
	xor eax, eax
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47EAAC:
	mov al, byte [byte_51341E]
	xor edx, edx
	mov byte [byte_51345F], al
	call sub_421430
	mov eax, esi
	call sub_402340
	mov eax, 1
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47E8B0 endp

sub_47EAE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov ebx, 1
	mov edi, byte_5133C1
	mov al, byte [byte_47DBBB]
	xor dl, dl
	mov [esp+0Ch], al
	call sub_47DE30
	mov eax, 1
	xor esi, esi
	call sub_464030
	mov ah, 3
	mov byte [byte_5133C0], dl
	mov word [dword_513408+2], bx
	mov word [dword_51340C+2], si
	mov byte [byte_51345E], ah
	xor dh, dh
	mov esi, ecx
	mov word [dword_51340C], dx
	push edi

loc_47EB39:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47EB51
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47EB39

loc_47EB51:
	pop edi
	mov edi, 0FFFFFFFFh
	mov eax, ebx

loc_47EB59:
	movsx edx, ax
	inc eax
	mov word (dword_51340C+2)[edx*2], di
	cmp ax, 8
	jl loc_47EB59
	mov edi, dword_562948
	mov esi, ecx
	call sub_47DD10
	push edi

loc_47EB78:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47EB90
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47EB78

loc_47EB90:
	pop edi
	cmp byte [byte_51345F], 0
	jz loc_47EC49
	mov dword [dword_562978], 8

loc_47EBA8:
	cmp dword [dword_4DA1C4], 0
	jnz loc_47EC71
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add eax, edx
	mov edx, dword [dword_4DA1C8]
	cmp byte [edx+eax*4+0Fh], 0
	jz loc_47EC58
	xor eax, eax
	xor edx, edx

loc_47EBD9:
	push ecx
	lea ecx, [esp+4]
	push ecx
	mov ecx, dword [dword_4DA1C0]
	push eax
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ecx, dword [dword_4DA1C8]
	shl eax, 2
	mov ebx, dword_4DA1E0
	add ecx, eax
	mov eax, dword_56289C
	add ecx, 10h
	call sub_48B0B4
	test eax, eax
	jnz loc_47EC67
	mov eax, 303h
	call sub_402CD0
	mov eax, 100h
	call sub_4833E7

loc_47EC24:
	call sub_483401
	test eax, eax
	jnz loc_47EC36
	call sub_405910
	test eax, eax
	jz loc_47EC24

loc_47EC36:
	xor eax, eax
	call sub_464030
	xor eax, eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47EC49:
	mov dword [dword_562978], 2
	jmp loc_47EBA8

loc_47EC58:
	mov eax, 406h
	mov edx, sub_47DE50
	jmp loc_47EBD9

loc_47EC67:
	mov dword [dword_4DA1C4], 1

loc_47EC71:
	call sub_463EA0
	call sub_421430
	mov edx, dword [dword_4DA1C0]
	lea eax, 0[edx*8]
	add edx, eax
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	cmp byte [edx+eax+0Fh], 0
	jz loc_47ED18
	mov ebp, 20h
	mov ecx, sub_47DEC0
	lea ebx, [esp+0Ch]
	mov edx, dword_562948
	mov eax, dword_56289C
	mov dword [dword_4DABE8], ebp
	call sub_48B25C
	test eax, eax
	jnz loc_47ED11
	mov dword [dword_4DABE8], eax
	mov eax, 303h
	call sub_402CD0
	mov eax, 100h
	call sub_4833E7
	call sub_48A2B4

loc_47ECE2:
	call sub_483401
	test eax, eax
	jnz loc_47ECF4
	call sub_405910
	test eax, eax
	jz loc_47ECE2

loc_47ECF4:
	call sub_421420
	call sub_40EA70
	xor eax, eax
	call sub_464030
	xor eax, eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47ED11:
	xor eax, eax
	mov dword [dword_4DABE8], eax

loc_47ED18:
	mov edx, 1
	mov eax, edx
	mov dword [dword_4DA1D8], edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47EAE0 endp

sub_47ED30: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 68h
	mov ebp, eax
	lea edi, [esp+40h]
	mov al, byte [byte_47DBBA]
	mov esi, dword_47DBB0
	mov ecx, dword [dword_4DA1C4]
	xor ebx, ebx
	mov [esp+64h], al
	mov word [word_4DA1D0], bx
	movsd
	movsd
	movsw
	test ecx, ecx
	jnz loc_47EDAA
	push edx
	lea eax, [esp+44h]
	mov edx, dword [dword_4DA1C0]
	push eax
	mov ebx, dword_4DA1E0
	lea eax, 0[edx*8]
	push ecx
	add eax, edx
	mov ecx, dword [dword_4DA1C8]
	shl eax, 2
	xor edx, edx
	add ecx, eax
	mov eax, dword_56289C
	add ecx, 10h
	call sub_48B0B4
	test eax, eax
	jz loc_47EF12
	mov dword [dword_4DA1C4], 1

loc_47EDAA:
	mov esi, dword_5622F4
	lea ecx, [esp+64h]
	mov edx, sub_47DEF0
	mov eax, dword_56289C
	mov ebx, ebp
	mov dword [dword_4DA1D4], esi
	call sub_48B238
	test eax, eax
	jz loc_47EF12
	cmp word [word_4DA1D0], 1
	jle loc_47EF12
	mov eax, dword [dword_4DA1CC+2]
	xor edi, edi
	sar eax, 10h
	mov [esp+5Ch], edi
	mov [esp+60h], eax
	test eax, eax
	jle loc_47EF12
	mov [esp+58h], edi

loc_47EDFE:
	mov ebp, [esp+5Ch]
	mov edi, [esp+58h]
	mov esi, dword [dword_4DA1D4]
	mov edx, [esp+60h]
	add esi, edi
	lea edi, [esp+4Ch]
	mov ecx, ebp
	push edi

loc_47EE19:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47EE31
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47EE19

loc_47EE31:
	pop edi
	cmp ebp, edx
	jge loc_47EE84
	mov ebx, ebp
	shl ebx, 6

loc_47EE3B:
	mov edx, dword [dword_4DA1D4]
	lea eax, [esp+4Ch]
	add edx, ebx
	call strcmp_
	test eax, eax
	jle loc_47EE78
	mov esi, dword [dword_4DA1D4]
	lea edi, [esp+4Ch]
	add esi, ebx
	mov ebp, ecx
	push edi

loc_47EE5F:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_47EE77
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_47EE5F

loc_47EE77:
	pop edi

loc_47EE78:
	mov esi, [esp+60h]
	inc ecx
	add ebx, 40h
	cmp ecx, esi
	jl loc_47EE3B

loc_47EE84:
	cmp ebp, [esp+5Ch]
	jz loc_47EEF2
	mov eax, [esp+58h]
	mov ecx, 40h
	mov esi, dword [dword_4DA1D4]
	mov edi, esp
	add esi, eax
	shl ebp, 6
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, dword [dword_4DA1D4]
	mov edi, [esp+58h]
	lea esi, [eax+ebp]
	mov ecx, 40h
	add edi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, 40h
	mov edi, dword [dword_4DA1D4]
	mov esi, esp
	add edi, ebp
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi

loc_47EEF2:
	mov eax, [esp+58h]
	mov edx, [esp+5Ch]
	mov ecx, [esp+60h]
	add eax, 40h
	inc edx
	mov [esp+58h], eax
	mov [esp+5Ch], edx
	cmp edx, ecx
	jl loc_47EDFE

loc_47EF12:
	mov esi, word_4DA1D0
	mov eax, esi
	add esp, 68h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47ED30 endp

sub_47EF30: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov esi, dword [dword_4DA1C0]
	mov ecx, eax
	cmp dword [dword_4DA1DC], 0
	jz loc_47EFFB

loc_47EF49:
	cmp dword [dword_4DA1C4], 0
	jz loc_47EF64
	xor edi, edi
	mov eax, dword_56289C
	mov dword [dword_4DA1C4], edi
	call sub_48B1FC

loc_47EF64:
	cmp dword [dword_4DA1C8], 0
	jnz loc_47EFA3
	push ebx
	mov byte [byte_51345F], 1
	mov eax, aUdp ; "UDP"
	mov ebx, 8
	call sub_41D1E0
	mov eax, aTcpGather ; "TCP gather"
	mov edx, 64h
	call sub_41DD10
	mov dword [dword_4DA1CC], eax
	mov eax, 2580h
	call sub_47E120
	pop ebx

loc_47EFA3:
	mov eax, dword [dword_4DA1C8]
	mov esi, dword [dword_4DA1C0]
	test eax, eax
	jz loc_47EFF0
	mov edx, dword [dword_562A74]
	inc esi
	cmp esi, edx
	jl loc_47EFBF
	xor esi, esi

loc_47EFBF:
	test ecx, ecx
	jz loc_47EFDD
	lea eax, 0[esi*8]
	mov edx, dword [dword_4DA1C8]
	add eax, esi
	mov al, [edx+eax*4+0Fh]
	and eax, 0FFh
	mov [ecx], eax

loc_47EFDD:
	lea edx, 0[esi*8]
	add edx, esi
	mov eax, dword [dword_4DA1C8]
	shl edx, 2
	add eax, edx

loc_47EFF0:
	mov dword [dword_4DA1C0], esi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_47EFFB:
	call sub_489EF8
	mov dword [dword_4DA1DC], eax
	jmp loc_47EF49
;sub_47EF30 endp

sub_47F010: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, sub_47F030
	mov edx, nullsub_46
	mov dword [off_4DB214], ecx
	mov dword [off_4DB210], edx
	pop edx
	pop ecx
	ret
;sub_47F010 endp

sub_47F030: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	test ecx, ecx
	jnz loc_47F03B
	pop ecx
	ret

loc_47F03B:
	call sub_484DA8
	pop ecx
	ret
;sub_47F030 endp

nullsub_46: ;SUBROUTINE
	ret
;nullsub_46 endp

sub_47F060: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, 10h
	mov ecx, aCNfs2seGamePcP ; "c:\\nfs2se\\game\\pc\\palette.c"
	mov ebx, 25Ah
	mov eax, aRemaptable ; "remaptable"
	mov dword [dword_5630E0], edx
	mov dword [dword_4DB1DC], ebx
	mov edx, 2E000h
	xor ebx, ebx
	mov dword [dword_4DB1D8], ecx
	call sub_484498
	mov dword [dword_5630E4], eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47F060 endp

sub_47F0A0: ;SUBROUTINE
	mov eax, dword_562AD8
	ret
;sub_47F0A0 endp

sub_47F0B0: ;SUBROUTINE
	push ecx
	push esi
	mov esi, dword [dword_5630E8]
	mov ecx, eax
	shl eax, 2
	sub eax, ecx
	shl eax, 2
	lea ecx, [edx+esi]
	add eax, dword_562A78
	cmp ecx, 0FFh
	jle loc_47F0D9
	mov edx, 0FFh
	sub edx, esi

loc_47F0D9:
	and ebx, 1
	mov dword [eax+8], 0
	add esi, edx
	mov [eax+4], edx
	mov dword [dword_5630E8], esi
	mov [eax], ebx
	pop esi
	pop ecx
	ret
;sub_47F0B0 endp

sub_47F100: ;SUBROUTINE
	push edx
	xor eax, eax

loc_47F103:
	add eax, 0Ch
	xor edx, edx
	mov dword dword_562A70[eax], edx
	cmp eax, 60h
	jnz loc_47F103
	mov dword [dword_5630E8], edx
	pop edx
	ret
;sub_47F100 endp

sub_47F120: ;SUBROUTINE
	push edx
	mov edx, 300h
	mov eax, dword_562AD8
	call sub_48A01C
	mov edx, 300h
	mov eax, dword_562DD8
	call sub_48A01C
	xor edx, edx
	mov dword [dword_5630D8], edx
	mov dword [dword_5630DC], edx
	pop edx
	ret
;sub_47F120 endp

sub_47F150: ;SUBROUTINE
	mov eax, dword [dword_5630E4]
	jmp sub_4848FC
;sub_47F150 endp

sub_47F160: ;SUBROUTINE
	push ebx
	push edx
	call sub_4586A0
	call sub_47F120
	call sub_47F060
	call sub_47F100
	mov edx, 1Ah
	xor ebx, ebx
	xor eax, eax
	call sub_47F0B0
	mov edx, 78h
	mov eax, 1
	xor ebx, ebx
	call sub_47F0B0
	mov ebx, 1
	mov edx, 6Ch
	mov eax, 2
	call sub_47F0B0
	mov eax, 3
	xor ebx, ebx
	xor edx, edx
	call sub_47F0B0
	pop edx
	pop ebx
	ret
;sub_47F160 endp

sub_47F1C0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov ebp, edx
	call sub_49E4F0
	mov ecx, eax

loc_47F1D0:
	dec ecx
	cmp ecx, 0FFFFFFFFh
	jnz loc_47F1E0
	xor ebx, ebx
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_47F1E0:
	mov edx, ecx
	mov eax, ebx
	call sub_49E4F4
	mov edx, [eax]
	and edx, 0FFh
	mov esi, eax
	cmp edx, 24h
	jnz loc_47F252

loc_47F1F8:
	mov edx, ebp
	lea eax, [esi+10h]
	lea edi, [ebp+300h]

loc_47F203:
	mov ebx, eax
	inc eax
	mov bl, [ebx]
	mov ecx, eax
	mov [edx], bl
	mov bl, [ecx]
	inc eax
	mov [edx+1], bl
	mov ebx, eax
	add edx, 3
	mov bl, [ebx]
	inc eax
	mov [edx-1], bl
	cmp edx, edi
	jnz loc_47F203
	mov eax, [esi]
	and eax, 0FFh
	cmp eax, 22h
	jnz loc_47F244
	mov eax, ebp
	lea edx, [ebp+300h]

loc_47F235:
	mov bl, [eax]
	inc eax
	shl bl, 2
	mov [eax-1], bl
	cmp eax, edx
	jnz loc_47F235

loc_47F244:
	mov ebx, [esi+6]
	sar ebx, 10h
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_47F252:
	cmp edx, 22h
	jz loc_47F1F8
	cmp edx, 2Ah
	jnz loc_47F1D0
	mov edx, ebp
	add eax, 10h
	lea edi, [ebp+300h]

loc_47F26B:
	mov ecx, eax
	mov bl, [ecx]
	inc eax
	mov [edx+2], bl
	mov ebx, eax
	mov bl, [ebx]
	inc eax
	mov [edx+1], bl
	mov ebx, eax
	add edx, 3
	mov bl, [ebx]
	add eax, 2
	mov [edx-3], bl
	cmp edx, edi
	jnz loc_47F26B
	mov ebx, [esi+6]
	sar ebx, 10h
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_47F1C0 endp

sub_47F2A0: ;SUBROUTINE
	mov eax, dword [dword_5630FC]
	jmp sub_4848FC
;sub_47F2A0 endp

sub_47F2B0: ;SUBROUTINE
	mov eax, dword [dword_5630FC]
	call sub_4848FC
	jmp sub_47F2C0
;sub_47F2B0 endp

sub_47F2C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, aCNfs2seGamePcS ; "c:\\nfs2se\\game\\pc\\skidmark.c"
	mov ecx, 11Bh
	mov eax, aSkidmark ; "SkidMark"
	xor ebx, ebx
	mov dword [dword_4DB1D8], edx
	mov edx, 6800h
	mov dword [dword_4DB1DC], ecx
	call sub_484498
	xor ebx, ebx
	mov dword [dword_5630FC], eax
	mov dword [dword_563100], ebx
	mov dword [dword_5630F8], ebx
	mov [eax+0Ch], ebx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47F2C0 endp

sub_47F310: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov ebp, eax
	mov eax, dword [dword_563100]
	xor edx, edx
	mov [esp+30h], eax
	mov [esp+34h], edx
	mov [esp+38h], edx
	mov eax, ebp
	mov edx, [esp+30h]
	add eax, 44h
	lea edi, 0[edx*4]
	mov [esp+2Ch], eax
	sub edi, edx
	mov eax, ebp
	shl edi, 2
	add eax, 8
	add edi, edx
	mov [esp+28h], eax
	shl edi, 5

loc_47F355:
	mov ebx, [esp+30h]
	dec ebx
	sub edi, 1A0h
	mov [esp+30h], ebx
	cmp edi, 0FFFFFE60h
	jnz loc_47F3A6
	mov eax, [esp+34h]
	mov [esp+18h], eax
	mov eax, [esp+38h]
	mov [esp+1Ch], eax
	test eax, eax
	jz loc_47F386
	mov dword [eax], 0

loc_47F386:
	push 1
	push 60000h
	mov edx, [esp+24h]
	push edx
	mov ecx, [esp+24h]
	push ecx
	call sub_471280
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47F3A6:
	mov esi, dword [dword_5630FC]
	mov ebx, 320000h
	add esi, edi
	mov edx, [esp+28h]
	mov eax, esi
	call sub_470E70
	test eax, eax
	jz loc_47F355
	mov eax, [esi+0Ch]
	shl eax, 2
	mov edx, [ebp+8]
	mov [esp+3Ch], eax
	mov eax, [esi]
	sub eax, edx
	mov [esp], eax
	mov eax, [esi+4]
	mov ecx, [ebp+0Ch]
	sub eax, ecx
	mov [esp+4], eax
	mov eax, [esi+8]
	mov ebx, [ebp+10h]
	mov edx, [esp+2Ch]
	sub eax, ebx
	lea ebx, [esp+0Ch]
	mov [esp+8], eax
	mov eax, esp
	call sub_480720
	imul edx, [esp+3Ch], 30h
	lea eax, [esp+20h]
	call sub_46FEA0
	test eax, eax
	jz loc_47F355
	mov edx, [esp+20h]
	mov ebx, [esp+3Ch]
	mov eax, [esp+2Ch]
	push edx
	lea ecx, [esi+10h]
	lea edx, [esp+10h]
	call sub_47F520
	mov ecx, [esi+0Ch]
	mov edx, 5
	mov eax, ecx
	add esi, 190h

loc_47F441:
	dec ecx
	cmp ecx, 0FFFFFFFFh
	jz loc_47F355
	mov edx, 24h
	lea eax, [esp+24h]
	call sub_46FEA0
	test eax, eax
	jnz loc_47F46D
	mov eax, [esp+20h]
	add eax, 0C0h
	inc esi
	mov [esp+20h], eax
	jmp loc_47F441

loc_47F46D:
	cmp dword [esp+34h], 0
	jnz loc_47F50B
	mov eax, [esp+24h]
	mov [esp+34h], eax

loc_47F480:
	mov eax, [esp+24h]
	mov [esp+38h], eax
	mov dword [eax+4], 0Ah
	xor eax, eax
	mov al, [esi]
	mov edx, dword dword_500D10[eax*4]
	mov eax, [esp+24h]
	mov [eax+1Ch], edx
	mov eax, [esp+24h]
	mov dword [eax+20h], 8FFFFFFFh
	mov eax, [esp+24h]
	mov word [eax+0Ah], 1
	mov eax, [esp+24h]
	mov word [eax+8], 3
	mov edx, [esp+20h]
	mov eax, [esp+24h]
	add edx, 30h
	mov [eax+0Ch], edx
	mov edx, [esp+24h]
	mov eax, [esp+20h]
	mov [edx+10h], eax
	mov edx, [esp+20h]
	mov eax, [esp+24h]
	add edx, 90h
	mov [eax+14h], edx
	mov edx, [esp+20h]
	mov eax, [esp+24h]
	add edx, 60h
	mov [eax+18h], edx
	mov eax, [esp+20h]
	add eax, 0C0h
	inc esi
	mov [esp+20h], eax
	jmp loc_47F441

loc_47F50B:
	mov edx, [esp+38h]
	mov eax, [esp+24h]
	mov [edx], eax
	jmp loc_47F480
;sub_47F310 endp

sub_47F520: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov ebp, [esp+48h]
	mov [esp+28h], eax
	mov [esp+18h], edx
	mov [esp+1Ch], ebx
	lea eax, [ebp+10h]
	mov [esp+30h], ecx
	mov [esp+2Ch], eax

loc_47F541:
	mov edx, [esp+1Ch]
	dec edx
	mov [esp+1Ch], edx
	cmp edx, 0FFFFFFFFh
	jnz loc_47F558
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_47F558:
	mov eax, [esp+30h]
	movsx eax, word [eax]
	shl eax, 8
	mov [esp+0Ch], eax
	mov eax, [esp+30h]
	mov eax, [eax]
	sar eax, 10h
	shl eax, 8
	add eax, 1800h
	mov [esp+10h], eax
	mov eax, [esp+30h]
	mov eax, [eax+2]
	sar eax, 10h
	mov ebx, esp
	shl eax, 8
	mov edx, [esp+28h]
	mov [esp+14h], eax
	lea eax, [esp+0Ch]
	call sub_49EAC8
	mov eax, [esp+18h]
	mov ebx, [esp]
	add ebx, [eax]
	mov eax, [esp+18h]
	mov [esp], ebx
	mov esi, [esp+4]
	add esi, [eax+4]
	mov eax, [esp+18h]
	mov [esp+4], esi
	mov edi, [esp+8]
	mov eax, [eax+8]
	add edi, eax
	mov [esp+8], edi
	mov [ebp+0], ebx
	mov eax, [esp+4]
	mov [ebp+4], eax
	mov eax, [esp+8]
	mov word [ebp+0Ch], 0
	mov [ebp+8], eax
	mov eax, [esp+8]
	mov esi, [esp+2Ch]
	test eax, eax
	jnz loc_47F5F2
	mov dword [esp+8], 1

loc_47F5F2:
	mov eax, [esp+8]
	mov [esp+34h], eax
	lea edx, [esp+24h]
	fild dword [esp+34h]
	lea eax, [esp+20h]
	fstp dword [esp+20h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+24h]
	mov eax, esp
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_47F6FC
	cmp eax, ecx
	jge loc_47F6FC
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_47F6D0
	cmp eax, ecx
	jl loc_47F6D0
	cmp eax, edx
	jle loc_47F6D4
	or ebx, 4
	jmp loc_47F6D4

loc_47F6D0:
	or ebx, 8
	nop

loc_47F6D4:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_47F6F7
	cmp eax, ecx
	jl loc_47F6F7
	cmp eax, edx
	jle loc_47F701
	or ebx, 2
	jmp loc_47F701

loc_47F6F7:
	or ebx, 1
	jmp loc_47F701

loc_47F6FC:
	mov ebx, 10h

loc_47F701:
	mov [edi], bl
	cmp dword [esp+8], 0
	jl loc_47F72E
	xor eax, eax

loc_47F70C:
	add ebp, 30h
	mov ebx, [esp+2Ch]
	mov esi, [esp+30h]
	mov [ebp-22h], ax
	add ebx, 30h
	add esi, 6
	mov [esp+2Ch], ebx
	mov [esp+30h], esi
	jmp loc_47F541

loc_47F72E:
	mov eax, 1
	jmp loc_47F70C
;sub_47F520 endp

sub_47F740: ;SUBROUTINE
	push ebp
	cmp dword [esp+8], 0
	jz loc_47F803
	push edi
	push esi
	mov eax, dword [dword_5630F8]
	lea ebp, 0[eax*4]
	sub ebp, eax
	shl ebp, 2
	add ebp, eax
	mov eax, dword [dword_5630FC]
	shl ebp, 5
	add ebp, eax
	mov esi, [ebp+0Ch]
	xor edx, edx
	cmp esi, 10h
	jnz loc_47F807

loc_47F779:
	mov edx, dword [dword_563100]
	cmp edx, 40h
	jge loc_47F88F
	mov dword [dword_5630F8], edx
	lea eax, [edx+1]
	mov dword [dword_563100], eax

loc_47F796:
	mov eax, dword [dword_5630F8]
	lea ebp, 0[eax*4]
	sub ebp, eax
	shl ebp, 2
	add ebp, eax
	mov eax, dword [dword_5630FC]
	shl ebp, 5
	add ebp, eax
	mov dword [ebp+0Ch], 0

loc_47F7BA:
	mov edi, ebp
	mov esi, ecx
	movsd
	movsd
	movsd

loc_47F7C1:
	mov edx, [ebp+0Ch]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	lea edx, [ebp+10h]
	add eax, edx
	mov edx, ebp
	call sub_47F8D0
	cmp dword [esp+10h], 2
	jnz loc_47F8B5
	call sub_488074
	mov dl, al
	and dl, 1
	mov eax, [ebp+0Ch]
	add dl, 2
	mov [eax+ebp+190h], dl
	inc dword [ebp+0Ch]
	pop esi
	pop edi

loc_47F803:
	pop ebp
	ret 4

loc_47F807:
	mov edi, [ecx]
	mov eax, [ebp+0]
	sub eax, edi
	test eax, eax
	jle loc_47F81E
	cmp eax, 400000h
	jl loc_47F82C
	jmp loc_47F779

loc_47F81E:
	neg eax
	cmp eax, 400000h
	jl loc_47F82C
	jmp loc_47F779

loc_47F82C:
	mov esi, [ecx+4]
	mov eax, [ebp+4]
	sub eax, esi
	test eax, eax
	jle loc_47F844
	cmp eax, 400000h
	jl loc_47F852
	jmp loc_47F779

loc_47F844:
	neg eax
	cmp eax, 400000h
	jl loc_47F852
	jmp loc_47F779

loc_47F852:
	mov edi, [ecx+8]
	mov eax, [ebp+8]
	sub eax, edi
	test eax, eax
	jle loc_47F86A
	cmp eax, 400000h
	jl loc_47F878
	jmp loc_47F779

loc_47F86A:
	neg eax
	cmp eax, 400000h
	jl loc_47F878
	jmp loc_47F779

loc_47F878:
	test edx, edx
	jnz loc_47F779
	cmp dword [ebp+0Ch], 0
	jz loc_47F7BA
	jmp loc_47F7C1

loc_47F88F:
	mov esi, dword [dword_5630F8]
	cmp esi, 3Fh
	jge loc_47F8A8
	lea ebp, [esi+1]
	mov dword [dword_5630F8], ebp
	jmp loc_47F796

loc_47F8A8:
	xor edi, edi
	mov dword [dword_5630F8], edi
	jmp loc_47F796

loc_47F8B5:
	call sub_488074
	mov edx, [ebp+0Ch]
	and al, 1
	mov [edx+ebp+190h], al
	inc dword [ebp+0Ch]
	pop esi
	pop edi
	pop ebp
	ret 4
;sub_47F740 endp

sub_47F8D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov edi, edx
	mov ebp, ecx
	mov ecx, [ecx]
	mov edx, [ebx]
	mov eax, [ebp+8]
	sub ecx, edx
	mov edx, [ebx+8]
	sub eax, edx
	mov edx, eax
	mov eax, ecx
	call sub_49D7E0
	mov [esp+4], eax
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, eax
	mov eax, 4CCCh
	neg edx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	sar eax, 1
	mov [esp], eax
	mov eax, [esp+4]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, eax
	mov eax, 4CCCh
	mov ecx, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ebx]
	add edx, ecx
	sub edx, [edi]
	sar edx, 8
	mov [esi], dx
	mov edx, [ebx+4]
	sub edx, [edi+4]
	sar edx, 8
	mov [esi+2], dx
	sar eax, 1
	mov edx, [ebx+8]
	mov ecx, [edi+8]
	add edx, eax
	sub edx, ecx
	sar edx, 8
	mov [esi+4], dx
	mov ecx, [esp]
	mov edx, [ebx]
	sub edx, ecx
	sub edx, [edi]
	sar edx, 8
	mov [esi+6], dx
	mov edx, [ebx+4]
	sub edx, [edi+4]
	sar edx, 8
	mov [esi+8], dx
	mov edx, [ebx+8]
	mov ebx, [edi+8]
	sub edx, eax
	sub edx, ebx
	sar edx, 8
	mov [esi+0Ah], dx
	mov ecx, [esp]
	mov edx, [ebp+0]
	mov ebx, [edi]
	sub edx, ecx
	sub edx, ebx
	sar edx, 8
	mov [esi+0Ch], dx
	mov edx, [ebp+4]
	sub edx, [edi+4]
	sar edx, 8
	mov [esi+0Eh], dx
	mov edx, [ebp+8]
	mov ebx, [edi+8]
	sub edx, eax
	sub edx, ebx
	sar edx, 8
	mov [esi+10h], dx
	mov ecx, [esp]
	mov edx, [ebp+0]
	mov ebx, [edi]
	add edx, ecx
	sub edx, ebx
	sar edx, 8
	mov [esi+12h], dx
	mov edx, [ebp+4]
	sub edx, [edi+4]
	sar edx, 8
	mov [esi+14h], dx
	mov ebx, [ebp+8]
	mov ebp, [edi+8]
	add eax, ebx
	sub eax, ebp
	sar eax, 8
	mov [esi+16h], ax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_47F8D0 endp

sub_47FA30: ;SUBROUTINE
	mov eax, dword [dword_4D9684]
	shl edx, 2
	add eax, edx
	mov edx, dword [dword_563108]
	mov eax, [eax]
	add eax, edx
	ret
;sub_47FA30 endp

sub_47FA50: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push ebp
	cmp eax, dword [dword_5451E0]
	jz loc_47FA72

loc_47FA72:
	mov eax, dword [dword_5451E0]
	call sub_459B80
	xor ecx, ecx
	mov esi, dword [dword_4D9684]
	mov dword [dword_4DAB04], ecx
	mov dword [dword_5451E0], ecx
	test esi, esi
	jz loc_47FAA1
	mov eax, esi
	call sub_4848FC
	mov dword [dword_4D9684], ecx

loc_47FAA1:
	mov ebp, dword [dword_4D9688]
	test ebp, ebp
	jz loc_47FAB9
	mov eax, ebp
	call sub_4848FC
	xor eax, eax
	mov dword [dword_4D9688], eax

loc_47FAB9:
	mov edx, dword [dword_4D968C]
	test edx, edx
	jnz loc_47FAC8
	pop ebp
	pop esi
	pop edx
	pop ecx
	ret

loc_47FAC8:
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4D968C], ecx
	pop ebp
	pop esi
	pop edx
	pop ecx
	ret
;sub_47FA50 endp

sub_47FAE0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov ecx, dword_5451E0
	mov ebx, 800h
	mov edx, 801h
	call sub_45A560
	test eax, eax
	jnz loc_47FB20
	mov edx, aCNfs2seGameP_0 ; "c:\\nfs2se\\game\\pc\\stmrdpc.c"
	mov ecx, 71h
	push aErrorCouldNotA ; "ERROR - Could not allocate track memory"...
	mov dword [dword_4DB1D8], edx
	mov dword [dword_4DB1DC], ecx
	call sub_4840F0
	add esp, 4

loc_47FB20:
	mov eax, dword [dword_5451E0]
	mov edx, dword_5451C0
	call sub_459AC0
	xor ebx, ebx
	mov dword [dword_563108], eax
	mov dword [dword_563104], ebx
	mov ebx, 20h
	mov eax, dword [dword_5451E0]
	call sub_47FCA0
	test eax, eax
	jz loc_47FC79
	mov ebx, 4
	mov edx, aTrac ; "TRAC"
	mov eax, dword_5451C0
	call strncmp_
	test eax, eax
	jnz loc_47FC79
	cmp dword [dword_5451C4], 16h
	jnz loc_47FC79
	mov edi, aCNfs2seGameP_0 ; "c:\\nfs2se\\game\\pc\\stmrdpc.c"
	mov ebp, 82h
	mov eax, aStmchunkf ; "StmChunkF"
	mov edx, dword [dword_5451D8]
	xor ebx, ebx
	mov dword [dword_4DB1D8], edi
	shl edx, 2
	mov dword [dword_4DB1DC], ebp
	call sub_484498
	mov ebx, dword [dword_5451D8]
	mov ecx, dword [dword_5451E0]
	mov dword [dword_4D9684], eax
	mov edx, eax
	shl ebx, 2
	mov eax, ecx
	call sub_47FCA0
	test eax, eax
	jz loc_47FC79
	mov dword [dword_4DB1DC], 87h
	mov edx, dword [dword_5451DC]
	lea eax, 0[edx*4]
	sub eax, edx
	lea edx, 0[eax*4]
	xor ebx, ebx
	mov eax, aStmcenter ; "StmCenter"
	mov dword [dword_4DB1D8], edi
	call sub_484498
	mov ebx, dword [dword_5451DC]
	mov edx, eax
	mov dword [dword_4D9688], eax
	lea eax, 0[ebx*4]
	sub eax, ebx
	lea ebx, 0[eax*4]
	mov eax, dword [dword_5451E0]
	call sub_47FCA0
	test eax, eax
	jz loc_47FC79
	mov ebx, 8Ch
	mov eax, aStmmetai ; "StmMetaI"
	mov edx, dword [dword_5451DC]
	mov dword [dword_4DB1DC], ebx
	add edx, edx
	xor ebx, ebx
	mov dword [dword_4DB1D8], edi
	call sub_484498
	mov ebx, dword [dword_5451DC]
	mov ecx, dword [dword_5451E0]
	mov dword [dword_4D968C], eax
	mov edx, eax
	mov eax, ecx
	add ebx, ebx
	call sub_47FCA0
	test eax, eax
	jz loc_47FC79
	mov eax, dword [dword_5451E0]
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_47FC79:
	push esi
	mov eax, dword [dword_5451E0]
	xor esi, esi
	call sub_459B80
	mov dword [dword_5451E0], esi
	xor eax, eax
	pop esi
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_47FAE0 endp

sub_47FCA0: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, ebx
	mov eax, dword [dword_563108]
	add eax, dword [dword_563104]
	mov ebx, ecx
	call sub_48A980
	mov esi, dword [dword_563104]
	add esi, ecx
	mov eax, ecx
	mov dword [dword_563104], esi
	pop esi
	pop ecx
	ret
;sub_47FCA0 endp

sub_47FCD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov [esp+18h], eax
	mov ebp, edx
	mov esi, ebx
	mov edi, ecx
	cmp dword [dword_4D9538], 0
	jz loc_47FF1B
	cmp byte [eax+20h], 0
	jz loc_47FF1B
	cmp dword [eax+1Ch], 0
	jz loc_47FF1B
	mov ecx, 1

loc_47FD06:
	mov edx, [esp+18h]
	mov edx, [edx]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	lea eax, [esp+8]
	shl edx, 4
	mov [esp+10h], ecx
	call sub_46FEA0
	test eax, eax
	jz loc_48008D
	test ecx, ecx
	jz loc_47FD62
	mov eax, [esp+18h]
	cmp byte [eax+20h], 2
	jnz loc_47FF22
	mov eax, 1

loc_47FD46:
	push eax
	mov ebx, [esp+0Ch]
	mov eax, [esp+1Ch]
	push ebx
	mov edx, [eax+14h]
	mov ecx, [eax+1Ch]
	mov ebx, [eax]
	push edx
	mov eax, esi
	mov edx, edi
	call sub_4800B0

loc_47FD62:
	mov ecx, [esp+8]
	mov ebx, [esp+18h]
	mov edx, [esp+34h]
	push ecx
	mov ecx, [esp+1Ch]
	mov eax, ebp
	mov ebx, [ebx]
	mov ecx, [ecx+14h]
	call sub_480330
	mov edx, [esp+18h]
	mov edx, [edx+4]
	lea eax, 0[edx*8]
	add edx, eax
	lea eax, [esp+0Ch]
	shl edx, 2
	call sub_46FEA0
	test eax, eax
	jz loc_48008D
	mov eax, [esp+18h]
	xor edx, edx
	mov eax, [eax+4]
	mov eax, [esp+18h]
	xor ebx, ebx
	mov esi, [eax+4]
	mov [esp+20h], ebx
	test esi, esi
	jle loc_47FEDC
	mov esi, 24h
	mov [esp+1Ch], ebx
	xor edi, edi

loc_47FDD1:
	mov ebx, [esp+18h]
	mov eax, [esp+0Ch]
	mov ebp, [esp+1Ch]
	mov ebx, [ebx+18h]
	add eax, ebp
	mov ebp, [esp+0Ch]
	add ebx, edi
	xor ecx, ecx
	add ebp, esi
	mov cl, [ebx]
	mov [eax], ebp
	movzx ebp, word [ebx+2]
	lea edx, [ebx+4]
	add ebp, [esp+3Ch]
	mov bl, [ebx+1]
	and ebx, 0FFh
	add ebp, ebx
	mov ebx, [esp+10h]
	mov [esp+14h], ebp
	test ebx, ebx
	jz loc_47FFE3
	mov dword [eax+20h], 0
	test cl, 1
	jz loc_47FF63
	mov dword [eax+4], 1Fh
	test cl, 4
	jz loc_47FF29
	xor ebx, ebx

loc_47FE38:
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+1]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx]

loc_47FE6A:
	and edx, 0FFh
	imul edx, 30h
	mov ebx, [esp+8]
	add ebx, edx
	mov [eax+18h], ebx
	test cl, 10h
	jz loc_480078
	mov edx, 2

loc_47FE8A:
	imul ecx, [esp+14h], 1Ch
	mov [eax+0Ah], dx
	mov edx, dword [dword_4D97AC]
	add edx, ecx
	cmp dword [edx], 0
	jz loc_480082

loc_47FEA4:
	mov [eax+1Ch], edx
	mov edx, dword [dword_56312A]
	sar edx, 10h
	mov [eax+20h], edx
	mov ebp, [esp+1Ch]
	mov eax, [esp+20h]
	mov edx, [esp+18h]
	add esi, 24h
	add edi, 0Ch
	add ebp, 24h
	inc eax
	mov ecx, [edx+4]
	mov [esp+1Ch], ebp
	mov [esp+20h], eax
	cmp eax, ecx
	jl loc_47FDD1

loc_47FEDC:
	mov edx, [esp+38h]
	mov eax, [esp+0Ch]
	mov ecx, [esp+18h]
	mov dword dword_54522C[edx*8], eax
	mov ecx, [ecx+4]
	dec ecx
	lea eax, 0[ecx*8]
	add eax, ecx
	mov ebx, [esp+0Ch]
	shl eax, 2
	add eax, ebx
	mov dword dword_545230[edx*8], eax
	mov dword [eax], 0
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_47FF1B:
	xor ecx, ecx
	jmp loc_47FD06

loc_47FF22:
	xor eax, eax
	jmp loc_47FD46

loc_47FF29:
	xor ebx, ebx
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+1]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx+2]
	jmp loc_47FE6A

loc_47FF63:
	mov dword [eax+4], 20h
	test cl, 4
	jz loc_47FFA9
	xor ebx, ebx
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+3]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx+1]
	jmp loc_47FE6A

loc_47FFA9:
	xor ebx, ebx

loc_47FFAB:
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+1]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx+3]
	jmp loc_47FE6A

loc_47FFE3:
	test cl, 1
	jz loc_480030
	mov dword [eax+4], 0Ch
	test cl, 4
	jnz loc_47FE38
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+1]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx+2]
	jmp loc_47FE6A

loc_480030:
	mov dword [eax+4], 8
	test cl, 4
	jz loc_47FFAB
	mov bl, [edx]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+0Ch], ebp
	mov bl, [edx+3]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	xor ebx, ebx
	mov [eax+10h], ebp
	mov bl, [edx+2]
	imul ebx, 30h
	mov ebp, [esp+8]
	add ebp, ebx
	mov [eax+14h], ebp
	mov dl, [edx+1]
	jmp loc_47FE6A

loc_480078:
	mov edx, 3
	jmp loc_47FE8A

loc_480082:
	mov edx, dword [dword_500F40]
	jmp loc_47FEA4

loc_48008D:
	mov esi, esp
	call sub_46FE50
	mov esi, [esp+38h]
	lea edi, dword dword_54522C[esi*8]
	mov esi, esp
	movsd
	movsd
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_47FCD0 endp

sub_4800B0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov edi, [esp+40h]
	mov [esp+18h], eax
	mov ebp, edx
	mov [esp+1Ch], ebx
	mov esi, ecx
	mov ecx, [esp+44h]
	mov eax, dword [dword_4D953C]
	sar eax, 18h
	mov ebx, dword [dword_56310C]
	and eax, 0FFh
	add ebx, eax
	sar ebx, 1
	and ebx, 0FFh
	cmp eax, ebx
	jge loc_48016A

loc_4800EF:
	shl eax, 18h
	mov [esp+20h], eax
	test esi, esi
	jz loc_480161
	xor edx, edx
	mov ebx, [esp+1Ch]
	mov [esp+24h], edx
	test ebx, ebx
	jle loc_480161

loc_480108:
	mov ebx, [esi+4]
	mov eax, [esi]
	mov edx, [esi+8]
	or eax, ebx
	or eax, edx
	jnz loc_48016E
	mov ebx, dword [dword_56310C]
	mov eax, [esp+20h]
	shl ebx, 10h
	or ebx, eax
	mov eax, dword [dword_56310C]
	shl eax, 8
	mov dword [ecx+28h], 0
	or ebx, eax
	mov eax, dword [dword_56310C]
	mov dword [ecx+2Ch], 0

loc_480142:
	or ebx, eax
	mov [ecx+20h], ebx
	mov eax, [esp+24h]
	mov edx, [esp+1Ch]
	add esi, 0Ch
	add edi, 6
	inc eax
	add ecx, 30h
	mov [esp+24h], eax
	cmp eax, edx
	jl loc_480108

loc_480161:
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_48016A:
	mov eax, ebx
	jmp loc_4800EF

loc_48016E:
	movsx eax, word [edi]
	mov ebx, [ebp+0]
	shl eax, 8
	add ebx, eax
	mov [esp+0Ch], ebx
	mov eax, [edi]
	sar eax, 10h
	mov ebx, [ebp+4]
	shl eax, 8
	add ebx, eax
	mov [esp+10h], ebx
	mov eax, [edi+2]
	sar eax, 10h
	mov ebx, [ebp+8]
	shl eax, 8
	add ebx, eax
	mov edx, [esp+18h]
	mov [esp+14h], ebx
	mov eax, esi
	mov ebx, esp
	call sub_49EAC8
	mov edx, [esp+0Ch]
	test edx, edx
	jnz loc_480274
	cmp dword [esp+10h], 0
	jnz loc_480274
	cmp dword [esp+14h], 0
	jnz loc_480274
	mov ebx, 10000h
	mov [esp+14h], edx
	mov [esp+10h], ebx

loc_4801DC:
	mov eax, [esp+0Ch]
	call sub_4A0580
	mov ebx, eax
	mov eax, [esp]
	neg eax
	call sub_4A0580
	add ebx, eax
	mov edx, [esp+48h]
	shl ebx, 9
	test edx, edx
	jnz loc_480294
	mov edx, [esp+4]
	cmp edx, 8000h
	jg loc_48028B

loc_480212:
	xor eax, eax

loc_480214:
	mov [esp+2Ch], eax
	mov [esp+28h], ebx
	fld dword [flt_4CF458]
	fild dword [esp+2Ch]
	fmul st0, st1
	fild dword [esp+28h]
	fmulp st2, st0
	fstp dword [ecx+2Ch]
	fstp dword [ecx+28h]
	mov eax, [esp+4]
	add eax, 10000h
	mov ebx, dword [dword_56310C]
	sar eax, 1
	imul eax, ebx
	sar eax, 10h
	cmp eax, 0FFh
	jge loc_480256
	test eax, eax
	jl loc_4802A5

loc_480256:
	cmp eax, 0FFh
	jge loc_4802A9

loc_48025D:
	mov ebx, eax
	mov edx, [esp+20h]
	shl ebx, 10h
	or edx, ebx
	mov ebx, eax
	shl ebx, 8
	or ebx, edx
	jmp loc_480142

loc_480274:
	lea eax, [esp+0Ch]
	call sub_45E810
	lea eax, [esp+0Ch]
	call sub_45E990
	jmp loc_4801DC

loc_48028B:
	lea eax, [edx+edx-10000h]
	jmp loc_480214

loc_480294:
	mov eax, [esp+4]
	test eax, eax
	jg loc_480214
	jmp loc_480212

loc_4802A5:
	xor eax, eax
	jmp loc_48025D

loc_4802A9:
	mov eax, 0FFh
	jmp loc_48025D
;sub_4800B0 endp

sub_4802B0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	xor ch, ah
	sar ax, 4
	mov edx, eax
	xor dh, ah
	sar ax, 3
	mov ebx, eax
	xor bh, ah
	and dl, 7
	and bl, 7
	sar ax, 3
	add edx, ebx
	mov ebx, eax
	xor bh, ah
	sar ax, 3
	and bl, 7
	xor ah, ah
	add edx, ebx
	and al, 7
	add edx, eax
	shr dx, 2
	mov eax, edx
	mov ebx, edx
	shl eax, 4
	shl ebx, 7
	or ebx, eax
	mov eax, edx
	shl eax, 0Ah
	or ebx, eax
	mov eax, edx
	shl eax, 0Dh
	and cl, 0Fh
	or eax, ebx
	or ecx, eax
	xor eax, eax
	mov ax, dx
	mov edx, eax
	shl edx, 4
	shl eax, 3
	add eax, edx
	add eax, 32h
	mov word [dword_56312A+2], cx
	mov dword [dword_56310C], eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4802B0 endp

sub_480330: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 38h
	mov ebp, [esp+48h]
	mov [esp+24h], eax
	mov [esp+18h], edx
	mov [esp+28h], ebx
	lea eax, [ebp+10h]
	mov [esp+30h], ecx
	mov [esp+2Ch], eax

loc_480351:
	mov edx, [esp+28h]
	dec edx
	mov [esp+28h], edx
	cmp edx, 0FFFFFFFFh
	jnz loc_480368
	add esp, 38h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_480368:
	mov eax, [esp+30h]
	movsx eax, word [eax]
	shl eax, 8
	mov [esp], eax
	mov eax, [esp+30h]
	mov eax, [eax]
	sar eax, 10h
	shl eax, 8
	mov [esp+4], eax
	mov eax, [esp+30h]
	mov eax, [eax+2]
	sar eax, 10h
	lea ebx, [esp+0Ch]
	shl eax, 8
	mov edx, [esp+24h]
	mov [esp+8], eax
	mov eax, esp
	call sub_49EAC8
	mov eax, [esp+18h]
	mov ebx, [esp+0Ch]
	add ebx, [eax]
	mov eax, [esp+18h]
	mov [esp+0Ch], ebx
	mov esi, [esp+10h]
	add esi, [eax+4]
	mov eax, [esp+18h]
	mov [esp+10h], esi
	mov edi, [esp+14h]
	mov eax, [eax+8]
	add edi, eax
	mov [esp+14h], edi
	mov [ebp+0], ebx
	mov eax, [esp+10h]
	mov [ebp+4], eax
	mov eax, [esp+14h]
	mov word [ebp+0Ch], 0
	mov [ebp+8], eax
	mov eax, [esp+14h]
	mov esi, [esp+2Ch]
	test eax, eax
	jnz loc_4803FE
	mov dword [esp+14h], 1

loc_4803FE:
	mov eax, [esp+14h]
	lea edx, [esp+20h]
	mov [esp+34h], eax
	add ebp, 30h
	fild dword [esp+34h]
	lea eax, [esp+1Ch]
	fstp dword [esp+1Ch]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+20h]
	lea eax, [esp+0Ch]
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_48050D
	cmp eax, ecx
	jge loc_48050D
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4804E1
	cmp eax, ecx
	jl loc_4804E1
	cmp eax, edx
	jle loc_4804E5
	or ebx, 4
	jmp loc_4804E5

loc_4804E1:
	or ebx, 8
	nop

loc_4804E5:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_480508
	cmp eax, ecx
	jl loc_480508
	cmp eax, edx
	jle loc_480512
	or ebx, 2
	jmp loc_480512

loc_480508:
	or ebx, 1
	jmp loc_480512

loc_48050D:
	mov ebx, 10h

loc_480512:
	mov [edi], bl
	mov ecx, [esp+2Ch]
	mov ebx, [esp+30h]
	mov ax, [ebp-0Ch]
	add ecx, 30h
	xor ah, ah
	add ebx, 6
	and al, 10h
	mov [esp+2Ch], ecx
	mov [esp+30h], ebx
	mov [ebp-22h], ax
	jmp loc_480351
;sub_480330 endp

sub_480540: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ebp, [esp+3Ch]
	mov [esp+0Ch], eax
	mov [esp+24h], edx
	mov [esp+10h], ebx
	lea eax, [ebp+10h]
	mov [esp+1Ch], ecx
	mov [esp+20h], eax

loc_480561:
	mov edx, [esp+10h]
	dec edx
	mov [esp+10h], edx
	cmp edx, 0FFFFFFFFh
	jnz loc_480578
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_480578:
	mov ebx, esp
	mov edx, [esp+0Ch]
	mov eax, [esp+1Ch]
	call sub_49EAC8
	mov eax, [esp+24h]
	mov ebx, [esp]
	add ebx, [eax]
	mov eax, [esp+24h]
	mov [esp], ebx
	mov esi, [esp+4]
	add esi, [eax+4]
	mov eax, [esp+24h]
	mov [esp+4], esi
	mov edi, [esp+8]
	mov eax, [eax+8]
	add edi, eax
	mov [esp+8], edi
	mov [ebp+0], ebx
	mov eax, [esp+4]
	mov [ebp+4], eax
	mov eax, [esp+8]
	mov word [ebp+0Ch], 0
	mov [ebp+8], eax
	mov eax, [esp+8]
	mov esi, [esp+20h]
	test eax, eax
	jnz loc_4805DE
	mov dword [esp+8], 1

loc_4805DE:
	mov eax, [esp+8]
	lea edx, [esp+18h]
	mov [esp+28h], eax
	add ebp, 30h
	fild dword [esp+28h]
	lea eax, [esp+14h]
	fstp dword [esp+14h]
	mov ebx, [eax]
	mov ecx, ebx
	shr ebx, 0Fh
	and ecx, 0FF800000h
	and ebx, 0FFh
	fld dword [eax]
	mov ebx, dword dword_4F19E4[ebx*4]
	sub ebx, ecx
	mov dword [dword_4F1E14], ebx
	fmul dword [dword_4F1E14]
	fsubr dword [flt_4D52AC]
	fmul dword [dword_4F1E14]
	fld st0
	fmul dword [eax]
	fsubr dword [flt_4D52AC]
	fmulp st1, st0
	fstp dword [edx]
	lea ecx, [esp+18h]
	mov eax, esp
	mov ebx, esi
	lea edi, [esi+14h]
	fld dword [dword_4D5294]
	fmul dword [ecx]
	fld dword [flt_4D5298]
	fmul dword [ecx]
	fld dword [flt_4D52B0]
	fmul dword [ecx]
	fild dword [eax+4]
	fild dword [eax]
	fxch st1
	fmulp st3, st0
	fmulp st3, st0
	fld dword [flt_4D52A0]
	faddp st2, st0
	fld dword [flt_4D529C]
	faddp st3, st0
	fstp dword [ebx+0Ch]
	fstp dword [ebx+4]
	fstp dword [ebx]
	mov eax, [esi+0Ch]
	mov ecx, dword [dword_4F1E04]
	test eax, 80000000h
	jnz loc_4806EB
	cmp eax, ecx
	jge loc_4806EB
	mov eax, [esi+4]
	mov ebx, 0
	mov ecx, dword [dword_4F1E10]
	mov edx, dword [dword_4F1E0C]
	test eax, 80000000h
	jnz loc_4806BF
	cmp eax, ecx
	jl loc_4806BF
	cmp eax, edx
	jle loc_4806C3
	or ebx, 4
	jmp loc_4806C3

loc_4806BF:
	or ebx, 8
	nop

loc_4806C3:
	mov eax, [esi]
	nop
	mov ecx, dword [dword_4F1E08]
	mov edx, dword [dword_4F1E18]
	test eax, 80000000h
	jnz loc_4806E6
	cmp eax, ecx
	jl loc_4806E6
	cmp eax, edx
	jle loc_4806F0
	or ebx, 2
	jmp loc_4806F0

loc_4806E6:
	or ebx, 1
	jmp loc_4806F0

loc_4806EB:
	mov ebx, 10h

loc_4806F0:
	mov [edi], bl
	mov ecx, [esp+20h]
	mov ebx, [esp+1Ch]
	mov ax, [ebp-0Ch]
	add ecx, 30h
	xor ah, ah
	add ebx, 0Ch
	and al, 10h
	mov [esp+20h], ecx
	mov [esp+1Ch], ebx
	mov [ebp-22h], ax
	jmp loc_480561
;sub_480540 endp

;	Attributes: thunk

sub_480720: ;SUBROUTINE
	jmp sub_49EAC8
;sub_480720 endp

sub_480730: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	sub esp, 20h
	mov esi, eax
	mov edx, [eax]
	cmp edx, 1
	jz loc_480760
	cmp dword [dword_512208], 1
	jz loc_480784
	mov eax, [eax+4]
	call sub_44B660
	cmp eax, 5
	jnz loc_4807CC

loc_480757:
	add esp, 20h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_480760:
	push edx
	mov edx, [eax+6Ch]
	add edx, 28h
	mov eax, [eax+68h]
	push edx
	add eax, 1E6h
	push eax
	push 5Ah
	mov ecx, 46h
	mov ebx, 96h
	call sub_4808D0
	jmp loc_480757

loc_480784:
	lea eax, [esp+0Ch]
	lea ecx, [esp+8]
	lea ebx, [esp+4]
	push eax
	lea edx, [esp+4]
	mov eax, [esi+4]
	call sub_42A270
	push 0
	mov ebp, [esp+8]
	mov eax, [esp+4]
	mov ecx, [esp+10h]
	mov edx, [esp+10h]
	mov ebx, [esp+0Ch]
	push ebp
	sar edx, 1
	push eax
	mov eax, ebp
	add ecx, ecx
	sub eax, edx
	push 5Ah
	mov edx, eax
	mov eax, [esp+10h]
	call sub_4808D0
	jmp loc_480757

loc_4807CC:
	lea eax, [esp+1Ch]
	lea ecx, [esp+18h]
	lea ebx, [esp+14h]
	push eax
	lea edx, [esp+14h]
	xor eax, eax
	call sub_42A270
	mov eax, [esi+4]
	call sub_44B660
	test eax, eax
	jnz loc_480804
	mov eax, [esp+1Ch]
	mov edx, eax
	mov ecx, 0Ch
	sar edx, 1Fh
	idiv ecx
	sub [esp+14h], eax

loc_480804:
	push edi
	push 0
	mov esi, [esp+1Ch]
	push esi
	mov edi, [esp+1Ch]
	push edi
	mov ecx, [esp+2Ch]
	mov ebx, [esp+28h]
	push 5Ah
	mov edx, esi
	mov eax, edi
	call sub_4808D0
	pop edi
	add esp, 20h
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_480730 endp

sub_480830: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 20h
	cmp dword [dword_512208], 1
	jnz loc_48088E
	push edi
	push esi
	lea edx, [esp+14h]
	lea ecx, [esp+10h]
	lea ebx, [esp+0Ch]
	push edx
	mov eax, [eax+4]
	lea edx, [esp+0Ch]
	call sub_42A270
	push 0
	mov esi, [esp+10h]
	mov edi, [esp+0Ch]
	mov ecx, [esp+18h]
	mov edx, [esp+18h]
	mov ebx, [esp+14h]
	push esi
	sar edx, 1
	mov eax, esi
	push edi
	add ecx, ecx
	sub eax, edx
	push 78h
	mov edx, eax
	mov eax, edi
	call sub_4808D0
	pop esi
	pop edi
	add esp, 20h
	pop edx
	pop ecx
	pop ebx
	ret

loc_48088E:
	lea eax, [esp+1Ch]
	lea ecx, [esp+18h]
	lea ebx, [esp+14h]
	push eax
	lea edx, [esp+14h]
	xor eax, eax
	call sub_42A270
	push 0
	mov ecx, [esp+18h]
	push ecx
	mov ebx, [esp+18h]
	push ebx
	mov edx, [esp+20h]
	mov eax, [esp+1Ch]
	push 78h
	mov ecx, [esp+2Ch]
	mov ebx, [esp+28h]
	call sub_4808D0
	add esp, 20h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_480830 endp

sub_4808D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov esi, [esp+2Ch]
	mov [esp+10h], eax
	mov ebp, edx
	mov [esp+14h], ebx
	mov edi, ecx
	call sub_4A05A0
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	shl eax, 2
	sub eax, esi
	shl eax, 2
	lea edx, [esi+eax]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov [esp], eax
	mov edx, eax
	mov eax, esi
	mov [esp+18h], edi
	call sub_4A0704
	push 3B0355ADh
	fild dword [esp+1Ch]
	push 3F800000h
	mov eax, [esp+3Ch]
	fstp dword [esp+0Ch]
	mov [esp+20h], eax
	fld dword [esp+0Ch]
	fild dword [esp+20h]
	fstp dword [esp+10h]
	fadd dword [esp+10h]
	sub esp, 4
	mov eax, [esp+20h]
	mov [esp+24h], eax
	fstp dword [esp]
	fild dword [esp+24h]
	mov eax, [esp+3Ch]
	fstp dword [esp+18h]
	mov [esp+24h], eax
	fld dword [esp+18h]
	fild dword [esp+24h]
	fstp dword [esp+24h]
	fadd dword [esp+24h]
	sub esp, 4
	fstp dword [esp]
	push dword [esp+18h]
	push dword [esp+2Ch]
	mov edx, [esp+50h]
	call sub_433A40
	push edx
	mov eax, [esp+4]
	push dword [esp+8]
	mov [esp+20h], eax
	push dword [esp+14h]
	fild dword [esp+24h]
	sub esp, 4
	mov [esp+28h], esi
	fstp dword [esp]
	fild dword [esp+28h]
	sub esp, 4
	mov [esp+2Ch], ebp
	fstp dword [esp]
	fild dword [esp+2Ch]
	sub esp, 4
	mov eax, [esp+28h]
	mov [esp+30h], eax
	fstp dword [esp]
	fild dword [esp+30h]
	sub esp, 4
	fstp dword [esp]
	call sub_433910
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_4808D0 endp

sub_4809F0: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_4DAB08], edx
	pop edx
	ret
;sub_4809F0 endp

sub_480A00: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_4DAB08], edx
	pop edx
	ret
;sub_480A00 endp

sub_480BA0: ;SUBROUTINE
	push ecx
	push edx
	push esi
	cmp dword [dword_563D54], 0
	jnz loc_480BF4
	pop esi
	pop edx
	pop ecx
	ret

loc_480BF4:
	push ebx
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	mov eax, 466h
	call sub_4821E0
	cmp dword [dword_563D54], 0
	jz loc_480C3C
	xor edx, edx

loc_480C24:
	mov eax, edx
	call sub_489B9C
	mov eax, edx
	call sub_483EB0
	cmp edx, dword [dword_563D54]
	jnz loc_480C24

loc_480C3C:
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret
;sub_480BA0 endp

sub_480C60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov ebp, eax
	mov [esp+3Ch], edx
	cmp dword [dword_4DAB38], 0
	jnz loc_480C80
	call sub_489EF8
	mov dword [dword_4DAB38], eax

loc_480C80:
	mov ah, byte [byte_5635E0]
	test ah, ah
	jnz loc_480F6B
	call sub_489EF8
	mov ecx, 20h
	mov dl, 1
	mov dword [dword_5635C8], eax
	xor esi, esi
	mov dword [dword_5635D0], ecx
	mov dword [dword_5635C4], esi
	mov dword [dword_5635CC], esi
	mov byte [byte_5635E0], dl

	push sub_481CC0
	push 7
	call sub_482270
	push sub_481C60
	push 8
	call sub_482270

	push sub_481BB0
	push 2
	call sub_482270

	push sub_4818B0
	push 100h
	call sub_482270
	push sub_481860
	push 101h
	call sub_482270
	push sub_4819D0
	push 102h
	call sub_482270

	push sub_481BE0
	push 466h
	call sub_482270

loc_480EDC:
	mov eax, 1
	mov byte [byte_563D5D], bl
	mov dword [dword_563D74], eax
%ifdef SWAP_WINDOW_AND_GL_THREAD
	mov byte [canRunWindowThread], al
%else
	mov ecx, 0FFFFFFFFh
	xor edx, edx
	lea eax, [esp+28h]
	mov ebx, 1
	push eax
	mov eax, sub_481080
	call sub_489AE0
	test eax, eax
	jz loc_480F63
%endif
	xor edx, edx

loc_480F1C:
	mov ebx, dword [dword_4DAB14]
	cmp edx, ebx
	jnz loc_480F97
	mov eax, ebx
	call sub_483EB0
	mov eax, ebx
	call sub_489B9C
	jmp loc_480F1C

loc_480F63:
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_480F6B:
	cmp dword [dword_563D54], 0
	jz loc_480EDC
	xor eax, eax
	mov al, byte [byte_563D5D]
	cmp ebx, eax
	jz loc_480EDC
	mov eax, 1
	jmp loc_480F63

loc_480F97:
	push 1
	push 2
	push 1
	call sub_497318 ;This initializes glide

	cmp dword [dword_563D54], 0
	jz loc_480FA5
	call sub_480BA0

loc_480FA5:
	lea eax, [esp+28h]
	mov edx, dword [dword_4DAB14]
	call sub_489E20
	cmp dword [dword_4DAB14], 0
	jz loc_480FD8
	xor edx, edx

loc_480FBF:
	mov eax, edx
	call sub_489B9C
	mov eax, edx
	call sub_483EB0
	cmp edx, dword [dword_4DAB14]
	jnz loc_480FBF

loc_480FD8:
	mov eax, dword [dword_563D54]
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_480C60 endp

sub_481080: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 2Ch
	mov eax, dword_563900
	call sub_481290
	mov ebx, eax
	mov esi, eax
	call sub_489E0C
	mov dword [dword_4DAB14], eax
	call sub_489E5C
	mov eax, dword [dword_4DAB14]
	xor edx, edx
	call CloseHandleCaller
	mov dword [dword_563D54], ebx
	mov dword [dword_4DAB18], edx
	mov dword [dword_4DAB14], edx
	cmp esi, dword [dword_563D54]
	jnz loc_48120E

loc_48110F:
	push 0 ; wMsgFilterMax
	push 0 ; wMsgFilterMin
	push 0 ; hWnd
	lea eax, [esp+0Ch]
	push eax ; lpMsg
	call GetMessageA_wrap
	test eax, eax
	jz loc_48125C
	mov eax, dword [dword_4DAB38]
	call sub_489F48
	mov eax, esp
	push eax ; lpMsg
	call DispatchMessageA_wrap
	mov eax, dword [dword_4DAB38]
	call sub_489F60

loc_48119F:
	cmp dword [dword_4DAB18], 0
	jz loc_481202
	xor ebx, ebx
	mov edi, dword [dword_563900]
	mov dword [dword_4DAB18], ebx
	test edi, edi
	jz loc_4811E1
	cmp dword [dword_563910], 0
	jz loc_4811E1
	mov eax, dword_563900
	call sub_491964

loc_4811E1:
	mov eax, dword [dword_563D54]
	push eax ; hWnd
	call DestroyWindow_wrap

loc_481202:
	cmp esi, dword [dword_563D54]
	jz loc_48110F

loc_48120E:
	add esp, 2Ch
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48125C:
	mov ebx, 0Ah
	mov edx, 1
	mov eax, sub_4821A0
	call sub_483DD0
	jmp loc_48119F
;sub_481080 endp

sub_481290: ;SUBROUTINE
	push ecx
	push edx
	push esi
	;byte [eax+45Dh] determined whether use "AdjustWindowRect" (if 0) or not
	mov dword [eax+464h], 0 ; Probably originally it was X of the window
	mov dword [eax+468h], 0 ; Probably originally it was Y of the window
	push sub_481590
	call WrapperCreateWindow
	mov esi, eax
	call sub_497244
;	push 1
;	push 2
;	push 1
;	call sub_497318 ;This cannot be called in this thread
	mov eax, esi
	pop esi
	pop edx
	pop ecx
	ret
;sub_481290 endp

sub_481590: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 10h
	mov esi, [ebp+18h]
	mov ecx, dword_563900
	push sub_4823D0
	mov edx, dword_5631B0
	lea eax, [ebp-10h]
	mov ebx, dword [dword_4DAB10]
	mov [ebp-10h], esi
	xor edi, edi
	mov [ebp-4], ecx
	mov ecx, 8
	mov [ebp-8], edi
	call sub_4A0796
	mov ebx, eax
	test ebx, ebx
	jz loc_48163B
	lea eax, [ebp-8]
	push eax
	mov edi, [ebp+20h]
	push edi
	mov eax, [ebp+1Ch]
	push eax
	push esi
	mov edx, [ebp+14h]
	push edx
	mov ecx, [ebp-4]
	push ecx
	call dword [ebx+4]
	mov edi, eax

loc_48163B:
	test edi, edi
	jz loc_481675
	mov eax, [ebp-8]
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret 10h

loc_481675:
	mov ebx, [ebp+20h]
	push ebx ; lParam
	mov edi, [ebp+1Ch]
	push edi ; wParam
	push esi ; Msg
	mov eax, [ebp+14h]
	push eax ; hWnd
	call DefWindowProcA_wrap
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret 10h
;sub_481590 endp

sub_481860: ;SUBROUTINE
	cmp dword [esp+4], 0
	jz loc_4818A1
	mov eax, [esp+14h]
	shr eax, 10h
	mov ecx, dword [dword_4DAB40]
	and eax, 7Fh
	test ecx, ecx
	jz loc_481885
	mov edx, ecx
	mov al, [edx+eax]
	and eax, 0FFh

loc_481885:
	xor dl, dl
	mov byte byte_4DB2F4[eax], dl

loc_4818A1:
	xor eax, eax
	ret 18h
;sub_481860 endp

sub_4818B0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edi, [esp+20h]
	cmp dword [esp+10h], 0
	jz loc_481973
	mov esi, edi
	mov ecx, dword [dword_5635D0]
	and esi, 0FFFFh
	cmp esi, ecx
	jle loc_4818D6
	mov esi, ecx

loc_4818D6:
	mov eax, edi
	shr eax, 10h
	and eax, 7Fh
	mov ebx, dword [dword_4DAB40]
	mov dword [dword_5635DC], eax
	test ebx, ebx
	jz loc_4818FB
	add eax, ebx
	mov al, [eax]
	and eax, 0FFh
	mov dword [dword_5635DC], eax

loc_4818FB:
	mov eax, dword [dword_5635DC]
	mov byte byte_4DB2F4[eax], 1
	shr edi, 18h
	mov ebx, dword [dword_5635D8]
	and edi, 1
	test ebx, ebx
	jz loc_48197E
	mov ecx, edi
	xor edi, edi

loc_481948:
	dec esi
	cmp esi, 0FFFFFFFFh
	jz loc_481973
	mov edx, dword [dword_5635DC]
	mov ebx, ecx
	mov eax, edi
	call sub_4820E0
	jmp loc_481948

loc_481973:
	mov eax, 1
	pop edi
	pop esi
	pop ebx
	ret 18h

loc_48197E:
	mov edx, [esp+1Ch]
	mov eax, [esp+18h]
	call sub_481D80
	mov ecx, eax
	test eax, eax
	jz loc_4819A8

loc_481991:
	dec esi
	cmp esi, 0FFFFFFFFh
	jz loc_481973
	mov edx, dword [dword_5635DC]
	mov ebx, edi
	mov eax, ecx
	call sub_4820E0
	jmp loc_481991

loc_4819A8:
	xor eax, eax
	pop edi
	pop esi
	pop ebx
	ret 18h
;sub_4818B0 endp

sub_4819D0: ;SUBROUTINE
	push edi
	push ebp
	mov ebp, [esp+18h]
	mov edi, [esp+1Ch]
	cmp dword [esp+0Ch], 0
	jz loc_481A30
	push esi
	push ebx
	mov ecx, edi
	mov ebx, dword [dword_5635D0]
	and ecx, 0FFFFh
	cmp ecx, ebx
	jg loc_481A16

loc_4819F5:
	mov esi, edi
	shr esi, 18h
	shr edi, 10h
	and esi, 1
	and edi, 7Fh

loc_481A03:
	dec ecx
	cmp ecx, 0FFFFFFFFh
	jz loc_481A1A
	mov ebx, esi
	mov edx, edi
	mov eax, ebp
	call sub_4820E0
	jmp loc_481A03

loc_481A16:
	mov ecx, ebx
	jmp loc_4819F5

loc_481A1A:
	pop ebx
	pop esi

loc_481A30:
	mov eax, 1
	pop ebp
	pop edi
	ret 18h
;sub_4819D0 endp

sub_481BB0: ;SUBROUTINE
	mov eax, [esp+4]
	test eax, eax
	jnz loc_481BBD
	xor eax, eax
	ret 18h

loc_481BBD:
	mov dword [eax+454h], 0
	xor eax, eax
	ret 18h
;sub_481BB0 endp

sub_481BE0: ;SUBROUTINE
	cmp dword [esp+4], 0
	jnz loc_481BEF
	mov eax, 1
	ret 18h

loc_481BEF:
	mov ecx, 1
	mov dword [dword_4DAB18], ecx
	mov eax, 1
	ret 18h
;sub_481BE0 endp

sub_481C60: ;SUBROUTINE
	mov edx, [esp+8]
	cmp edx, dword [dword_563D54]
	jz loc_481C71
	xor eax, eax
	ret 18h

loc_481C71:
	mov ecx, dword [dword_5635D4]
	test ecx, ecx
	jz loc_481C97
	xor eax, eax
	call dword [dword_5635D4]

loc_481C97:
	mov edx, 80h
	mov eax, byte_4DB2F4
	call sub_48A01C
	xor eax, eax
	ret 18h
;sub_481C60 endp

sub_481CC0: ;SUBROUTINE
	mov edx, [esp+4]
	test edx, edx
	jz loc_481D2D
	mov ecx, [esp+8]
	cmp ecx, dword [dword_563D54]
	jnz loc_481D2D
	cmp dword [dword_5635D4], 0
	jnz loc_481D32

loc_481CDD:
	cmp byte [edx+45Dh], 0
	jz loc_481CEF

loc_481CEF:
	cmp dword [dword_563D74], 0
	jnz loc_481D2D
	push edi
	mov edi, 1
	mov dword [dword_563D74], edi
	pop edi

loc_481D2D:
	xor eax, eax
	ret 18h

loc_481D32:
	mov eax, 1
	call dword [dword_5635D4]
	jmp loc_481CDD
;sub_481CC0 endp

sub_481D80: ;SUBROUTINE
	cmp eax, 104h
	jnz loc_481DB4

loc_481D87:
	cmp edx, 65h
	jnb loc_481DC0
	cmp edx, 28h
	jnb loc_481E5E
	cmp edx, 24h
	jnb loc_481EAF
	cmp edx, 22h
	jnb loc_481EC0
	cmp edx, 21h
	jnz loc_481DBB
	mov edx, 4900h
	mov eax, edx
	ret

loc_481DB4:
	cmp eax, 100h
	jz loc_481D87

loc_481DBB:
	xor edx, edx
	mov eax, edx
	ret

loc_481DC0:
	jbe loc_481F12
	cmp edx, 73h
	jnb loc_481DE7
	cmp edx, 69h
	jnb loc_481E34
	cmp edx, 67h
	jb loc_481F1A
	ja loc_481F22
	mov edx, 51h
	mov eax, edx
	ret

loc_481DE7:
	jbe loc_481F3A
	cmp edx, 77h
	jnb loc_481E09
	cmp edx, 75h
	jb loc_481F42
	ja loc_481F4A
	mov edx, 4000h
	mov eax, edx
	ret

loc_481E09:
	jbe loc_481F52
	cmp edx, 79h
	jb loc_481F5A
	jbe loc_481F62
	cmp edx, 7Ah
	jbe loc_481F6A
	cmp edx, 7Bh
	jnz loc_481DBB
	mov edx, 8800h
	mov eax, edx
	ret

loc_481E34:
	jbe loc_481F2A
	cmp edx, 71h
	jnb loc_481E50
	cmp edx, 70h
	jnz loc_481DBB
	mov edx, 3B00h
	mov eax, edx
	ret

loc_481E50:
	ja loc_481F32
	mov edx, 3C00h
	mov eax, edx
	ret

loc_481E5E:
	jbe loc_481EEA
	cmp edx, 61h
	jnb loc_481E7F
	cmp edx, 2Eh
	jnb loc_481E9C
	cmp edx, 2Dh
	jnz loc_481DBB
	mov edx, 5200h
	mov eax, edx
	ret

loc_481E7F:
	jbe loc_481EFA
	cmp edx, 63h
	jb loc_481F02
	ja loc_481F0A
	mov edx, 47h
	mov eax, edx
	ret

loc_481E9C:
	jbe loc_481EF2
	cmp edx, 60h
	jnz loc_481DBB
	mov edx, 5200h
	mov eax, edx
	ret

loc_481EAF:
	jbe loc_481ED2
	cmp edx, 26h
	jb loc_481EDA
	ja loc_481EE2
	mov edx, 4800h
	mov eax, edx
	ret

loc_481EC0:
	ja loc_481ECA
	mov edx, 5100h
	mov eax, edx
	ret

loc_481ECA:
	mov edx, 4F00h
	mov eax, edx
	ret

loc_481ED2:
	mov edx, 4700h
	mov eax, edx
	ret

loc_481EDA:
	mov edx, 4B00h
	mov eax, edx
	ret

loc_481EE2:
	mov edx, 4D00h
	mov eax, edx
	ret

loc_481EEA:
	mov edx, 5000h
	mov eax, edx
	ret

loc_481EF2:
	mov edx, 5300h
	mov eax, edx
	ret

loc_481EFA:
	mov edx, 5Ah
	mov eax, edx
	ret

loc_481F02:
	mov edx, 58h
	mov eax, edx
	ret

loc_481F0A:
	mov edx, 41h
	mov eax, edx
	ret

loc_481F12:
	mov edx, 4C00h
	mov eax, edx
	ret

loc_481F1A:
	mov edx, 44h
	mov eax, edx
	ret

loc_481F22:
	mov edx, 57h
	mov eax, edx
	ret

loc_481F2A:
	mov edx, 45h
	mov eax, edx
	ret

loc_481F32:
	mov edx, 3D00h
	mov eax, edx
	ret

loc_481F3A:
	mov edx, 3E00h
	mov eax, edx
	ret

loc_481F42:
	mov edx, 3F00h
	mov eax, edx
	ret

loc_481F4A:
	mov edx, 4100h
	mov eax, edx
	ret

loc_481F52:
	mov edx, 4200h
	mov eax, edx
	ret

loc_481F5A:
	mov edx, 4300h
	mov eax, edx
	ret

loc_481F62:
	mov edx, 4400h
	mov eax, edx
	ret

loc_481F6A:
	mov edx, 8700h
	mov eax, edx
	ret
;sub_481D80 endp

sub_482030: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 4
	mov esi, dword [dword_5635C4]
	mov eax, dword [dword_5635C8]
	call sub_489F48
	xor ecx, ecx
	mov esi, dword [dword_5635C4]
	mov edx, dword [dword_5635CC]
	xor ebx, ebx
	cmp esi, edx
	jz loc_4820AF

loc_48205C:
	test ecx, ecx
	jnz loc_4820AF
	mov dword [dword_5635C4], esi
	mov eax, dword dword_563130[esi*4]
	xor ebx, ebx
	mov ecx, eax
	mov [esp], eax
	sar ecx, 10h
	mov bl, [esp+1]
	test ecx, ecx
	jnz loc_48208D
	xor edx, edx
	mov eax, ebx
	mov dl, [esp]
	call sub_486D80
	mov ecx, eax

loc_48208D:
	mov esi, dword [dword_5635C4]
	lea edx, [esi+1]
	mov esi, dword [dword_5635D0]
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov edi, dword [dword_5635CC]
	mov esi, edx
	cmp edx, edi
	jnz loc_48205C

loc_4820AF:
	mov eax, dword [dword_5635C8]
	mov dword [dword_5635C4], esi
	call sub_489F60
	mov eax, ebx
	shl eax, 10h
	mov esi, dword [dword_5635C4]
	or eax, ecx
	add esp, 4
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_482030 endp

sub_4820E0: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov eax, dword [dword_5635C8]
	mov edx, dword [dword_5635CC]
	call sub_489F48
	mov word (dword_563130+2)[edx*4], si
	mov byte (dword_563130+1)[edx*4], cl
	mov byte dword_563130[edx*4], bl
	mov edx, dword [dword_5635CC]
	inc edx
	mov ecx, dword [dword_5635D0]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov eax, dword [dword_5635C4]
	mov dword [dword_5635CC], edx
	cmp eax, edx
	jnz loc_482143
	mov edx, dword [dword_5635C4]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_5635C4], edx

loc_482143:
	mov eax, dword [dword_5635C8]
	call sub_489F60
	pop esi
	pop ecx
	ret
;sub_4820E0 endp

sub_4821A0: ;SUBROUTINE
	call sub_4824BC
	mov eax, sub_4821A0
	call sub_483E64
	jmp ExitProcess0
;sub_4821A0 endp

sub_4821D0: ;SUBROUTINE
	mov dword [dword_5635D4], eax
	ret
;sub_4821D0 endp

sub_4821E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, ebx
	xor ebx, ebx
	mov ebp, dword [dword_563D54]
	test ebp, ebp
	jz loc_482261
	push edx ; lParam
	push edi ; wParam
	push esi ; Msg
	push ebp ; hWnd
	call PostMessageA_wrap
	test eax, eax
	jnz loc_482227
	call GetLastError_wrap
	mov ebx, eax

loc_482227:
	test ebx, ebx
	jz loc_482247
	mov eax, ebx
	and eax, 0FFFFh

loc_482247:
	test ebx, ebx
	jnz loc_482261
	mov eax, 1
	pop ebp
	pop edi
	pop esi
	ret

loc_482261:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	ret
;sub_4821E0 endp

sub_482270: ;SUBROUTINE
	push ebx
	push esi
	push edi
	sub esp, 8
	mov edi, [esp+1Ch]
	mov edx, dword [dword_4DAB38]
	xor esi, esi
	test edx, edx
	jnz loc_482290
	call sub_489EF8
	mov dword [dword_4DAB38], eax

loc_482290:
	mov ecx, 8
	mov eax, dword [dword_4DAB38]
	mov edx, dword_5631B0
	call sub_489F48
	mov eax, [esp+18h]
	push sub_4823D0
	mov ebx, dword [dword_4DAB10]
	mov [esp+4], eax
	lea eax, [esp+4]
	call sub_4A0796
	test eax, eax
	jz loc_48230D
	test edi, edi
	jnz loc_482308
	mov ecx, sub_4823D0
	mov ebx, 8
	mov edx, dword [dword_4DAB10]
	mov dword [eax], 0FFFFFFFFh
	mov eax, dword_5631B0
	call sub_4A087C
	dec dword [dword_4DAB10]

loc_4822EE:
	mov esi, 1

loc_4822F3:
	mov eax, dword [dword_4DAB38]
	call sub_489F60
	mov eax, esi
	add esp, 8
	pop edi
	pop esi
	pop ebx
	ret 8

loc_482308:
	mov [eax+4], edi
	jmp loc_4822EE

loc_48230D:
	test edi, edi
	jz loc_4822F3
	mov ecx, dword [dword_4DAB10]
	cmp ecx, 80h
	jnb loc_4822F3
	mov edx, [esp+18h]
	mov eax, dword_5631B0
	lea ebx, [ecx+1]
	mov dword dword_5631B4[ecx*8], edi
	mov dword [dword_4DAB10], ebx
	mov dword dword_5631B0[ecx*8], edx
	mov ecx, sub_4823D0
	mov edx, ebx
	mov ebx, 8
	mov esi, 1
	call sub_4A087C
	jmp loc_4822F3
;sub_482270 endp

sub_482360: ;SUBROUTINE
	push ebx
	push esi
	sub esp, 8
	mov edx, dword [dword_4DAB38]
	xor esi, esi
	test edx, edx
	jnz loc_48237B
	call sub_489EF8
	mov dword [dword_4DAB38], eax

loc_48237B:
	mov ecx, 8
	mov eax, dword [dword_4DAB38]
	mov edx, dword_5631B0
	call sub_489F48
	mov eax, [esp+14h]
	push sub_4823D0
	mov ebx, dword [dword_4DAB10]
	mov [esp+4], eax
	lea eax, [esp+4]
	call sub_4A0796
	test eax, eax
	jz loc_4823B2
	mov esi, [eax+4]

loc_4823B2:
	mov eax, dword [dword_4DAB38]
	call sub_489F60
	mov eax, esi
	add esp, 8
	pop esi
	pop ebx
	ret 4
;sub_482360 endp

sub_4823D0: ;SUBROUTINE
	push ecx
	mov ecx, [edx]
	mov eax, [eax]
	sub eax, ecx
	pop ecx
	ret
;sub_4823D0 endp

sub_4823E0: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 4
	mov [esp], eax
	mov ebx, edx
	xor ecx, ecx
	xor edx, edx
	test ebx, ebx
	jle loc_4823FE

loc_4823F2:
	mov eax, esp
	call dword [dword_4DD788]
	test eax, eax
	jnz loc_482406

loc_4823FE:
	mov eax, ecx
	add esp, 4
	pop ecx
	pop ebx
	ret

loc_482406:
	call sub_486724
	inc edx
	test eax, eax
	jz loc_482418
	mov eax, [eax+5]
	sar eax, 18h
	add ecx, eax

loc_482418:
	cmp edx, ebx
	jl loc_4823F2
	mov eax, ecx
	add esp, 4
	pop ecx
	pop ebx
	ret
;sub_4823E0 endp

sub_482424: ;SUBROUTINE
	push edx
	mov edx, 100h
	call sub_4823E0
	pop edx
	ret
;sub_482424 endp

sub_482474: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	push 1
	mov ebx, dword [dword_4DAB84]
	call sub_492650
	mov eax, [eax]
	pop ecx
	ret
;sub_482474 endp

;	Watcom v9-*1.5 32bit NT runtime
;	Watcom v9-*1.5 32bit common runtime
;	Attributes: library function

unknown_libname_4: ;SUBROUTINE
	push edx
	mov edx, 1
	mov eax, dword_4DB278
	call sub_4824CC
	pop edx
	ret
;unknown_libname_4 endp

sub_4824BC: ;SUBROUTINE
	push edx
	mov edx, 1
	xor eax, eax
	call sub_4824CC
	pop edx
	ret
;sub_4824BC endp

sub_4824CC: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ebp, 1
	jmp loc_482522

loc_4824F5:
	mov ebp, eax
	test esi, esi
	jz loc_48255C
	test ebp, ebp
	jnz loc_482536
	cmp dword [dword_4DABE4], 0
	jz loc_48253D

loc_482508:
	mov ecx, 0Eh
	mov esi, dword [dword_4DABE4]

loc_482513:
	mov edi, dword_4DB240
	rep movsd
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_482522:
	call sub_49AE1C
	jmp loc_4824F5

loc_482536:
	mov ecx, 0Eh
	jmp loc_482513

loc_48253D:
	mov edx, 8
	mov ecx, dword [dword_4DABE8]
	mov ebx, dword [dword_4DAB84]
	mov eax, edx
	call sub_492820
	mov dword [dword_4DABE4], eax
	jmp loc_482508

loc_48255C:
	mov edx, 38h
	mov eax, dword_4DB240
	call sub_48A01C
	mov al, byte [byte_4DB294]
	mov byte [byte_4DB25C], al
	mov al, byte [byte_4DB295]
	mov byte [byte_4DB25D], al
	mov al, byte [byte_4DB296]
	mov byte [byte_4DB25E], al
	mov eax, dword [dword_4DB2A8]
	mov dword [dword_4DB270], eax
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4824CC endp

sub_48259C: ;SUBROUTINE
	push edx
	xor edx, edx
	call sub_4824CC
	pop edx
	ret
;sub_48259C endp

sub_4825A8: ;SUBROUTINE
	push edx
	mov edx, 1
	call sub_4824CC
	pop edx
	ret
;sub_4825A8 endp

sub_4825D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov eax, edx
	mov ecx, eax
	shr ecx, 10h
	and ecx, 0FFh
	mov edx, dword_570E60
	mov [esp+4], ecx
	mov ecx, eax
	mov ebx, 1869Fh
	shr ecx, 8
	and eax, 0FFh
	and ecx, 0FFh
	mov [esp], eax
	mov [esp+8], ecx
	xor ecx, ecx
	xor eax, eax
	mov [esp+0Ch], ecx

loc_482612:
	add edx, 4
	movzx esi, byte [edx-2]
	movzx edi, byte [edx-3]
	mov cl, byte byte_4DAC64[eax]
	movzx ebp, byte [edx-4]
	test cl, cl
	jz loc_482656
	mov ecx, [esp+8]
	sub ecx, edi
	mov edi, ecx
	imul edi, ecx
	mov ecx, [esp+4]
	sub ecx, esi
	imul ecx, ecx
	lea esi, [edi+ecx]
	mov ecx, [esp]
	sub ecx, ebp
	imul ecx, ecx
	add ecx, esi
	cmp ecx, ebx
	jge loc_482656
	mov ebx, ecx
	mov [esp+0Ch], eax

loc_482656:
	inc eax
	cmp eax, 100h
	jl loc_482612
	mov eax, [esp+0Ch]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4825D0 endp

sub_48266C: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, eax
	mov ah, byte [byte_4DB25C]
	cmp ah, 8
	jbe loc_482697
	cmp ah, 0Fh
	jz loc_4826DE
	cmp ah, 10h
	jz loc_48270C
	cmp ah, 18h
	jb loc_482731
	mov eax, ebx
	pop edx
	pop ebx
	ret

loc_482697:
	push ecx
	mov ecx, dword [dword_4DAC60]
	test ecx, ecx
	jz loc_4826C9
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add eax, ebx
	add eax, edx
	xor ebx, ebx
	mov bl, [ecx+eax]
	jmp loc_4826D8

loc_4826C9:
	mov edx, ebx
	lea eax, dword [dword_570E60]
	call sub_4825D0
	mov ebx, eax

loc_4826D8:
	pop ecx
	mov eax, ebx
	pop edx
	pop ebx
	ret

loc_4826DE:
	or ebx, ebx
	jz loc_482707
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	lea ebx, [ebx+edx+8000h]

loc_482707:
	mov eax, ebx
	pop edx
	pop ebx
	ret

loc_48270C:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov eax, ebx
	pop edx
	pop ebx
	ret

loc_482731:
	xor ebx, ebx
	mov eax, ebx
	pop edx
	pop ebx
	ret
;sub_48266C endp

sub_482740: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, dword [dword_4DB258]
	mov edx, dword [dword_4DB250]
	mov ebx, dword [dword_4DB24C]
	push eax
	mov eax, dword [dword_4DB254]
	mov esi, ebx
	sub eax, ebx
	sub ecx, edx
	mov ebx, eax
	mov eax, esi
	call sub_488620
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_482740 endp

sub_482770: ;SUBROUTINE
	push esi
	mov esi, eax
	cmp eax, dword [dword_5636E8]
	jz loc_4827A3
	push edx
	push ecx
	push ebx
	mov ebx, esi
	xor eax, eax
	imul edx, esi, 0

loc_482785:
	mov ecx, edx
	inc eax
	sar ecx, 8
	add edx, ebx
	mov byte byte_5635E3[eax], cl
	cmp eax, 100h
	jl loc_482785
	mov dword [dword_5636E8], esi
	pop ebx
	pop ecx
	pop edx

loc_4827A3:
	pop esi
	ret
;sub_482770 endp

sub_4827A8: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	mov bl, [eax]
	mov bl, byte byte_5635E4[ebx]
	mov [edx], bl
	xor ebx, ebx
	mov bl, [eax+1]
	mov bl, byte byte_5635E4[ebx]
	mov [edx+1], bl
	xor ebx, ebx
	mov bl, [eax+2]
	mov bl, byte byte_5635E4[ebx]
	mov [edx+2], bl
	mov al, [eax+3]
	and eax, 0FFh
	mov al, byte byte_5635E4[eax]
	mov [edx+3], al
	pop ebx
	ret
;sub_4827A8 endp

sub_4827E4: ;SUBROUTINE
	push ecx
	sub esp, 4
	xor ecx, ecx
	mov cl, [eax]
	imul ecx, ebx
	sar ecx, 8
	mov [esp], ecx
	mov cl, [esp]
	mov [edx], cl
	xor ecx, ecx
	mov cl, [eax+1]
	imul ecx, ebx
	sar ecx, 8
	mov [esp], ecx
	mov cl, [esp]
	mov [edx+1], cl
	xor ecx, ecx
	mov cl, [eax+2]
	imul ecx, ebx
	sar ecx, 8
	mov [esp], ecx
	mov cl, [esp]
	mov [edx+2], cl
	mov al, [eax+3]
	and eax, 0FFh
	imul eax, ebx
	sar eax, 8
	mov [edx+3], al
	add esp, 4
	pop ecx
	ret
;sub_4827E4 endp

sub_48283C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	mov esi, edx
	mov edi, ebx

loc_482849:
	mov edx, esp
	mov eax, ecx
	call sub_4827A8
	mov al, 0FFh
	mov dh, [esp+2]
	mov ah, [esp+3]
	mov bl, [esp]
	sub al, ah
	mov dl, [esp+1]
	mov [esp+0Ch], al
	mov al, [esi]
	and eax, 0FFh
	call sub_49B2E0
	mov ebp, eax
	shr ebp, 10h
	and ebp, 0FFh
	mov [esp+4], eax
	mov [esp+8], ebp
	mov ebp, [esp+4]
	shr ebp, 8
	and ebp, 0FFh
	mov ah, [esp+8]
	mov [esp+8], ebp
	mov [esp+10h], al
	mov bh, [esp+8]
	mov al, ah
	and eax, 0FFh
	mov [esp+8], eax
	xor eax, eax
	mov ebp, [esp+8]
	mov al, [esp+0Ch]
	imul ebp, eax
	sar ebp, 8
	mov [esp+4], ebp
	movzx ebp, dh
	add ebp, [esp+4]
	mov [esp+8], ebp
	movzx ebp, bh
	imul ebp, eax
	sar ebp, 8
	mov dh, [esp+8]
	mov [esp+4], ebp
	movzx ebp, dl
	add ebp, [esp+4]
	mov [esp+8], ebp
	movzx ebp, byte [esp+10h]
	imul eax, ebp
	mov dl, [esp+8]
	sar eax, 8
	and ebx, 0FFh
	add ebx, eax
	xor eax, eax
	mov al, dh
	shl eax, 10h
	and edx, 0FFh
	shl edx, 8
	or edx, eax
	xor eax, eax
	mov al, bl
	inc esi
	or eax, edx
	add ecx, 4
	call sub_48266C
	mov [esi-1], al
	dec edi
	jnz loc_482849
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48283C endp

sub_482938: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov ebp, ebx

loc_482945:
	mov edx, esp
	mov eax, edi
	call sub_4827A8
	mov ebx, [esp]
	cmp ebx, 10000000h
	jb loc_4829CC
	cmp ebx, 0FC000000h
	jnb loc_4829A9
	mov ax, [esi]
	mov ecx, eax
	and eax, 7C00h
	shl eax, 11h
	mov edx, ecx
	and edx, 3E0h
	shl edx, 9
	add eax, edx
	and ecx, 1Fh
	add eax, ecx
	mov ecx, ebx
	shr ecx, 18h
	xor ecx, 0FFh
	mul ecx
	shl edx, 10h
	add ebx, edx
	mov edx, eax
	shr edx, 5
	and edx, 0FFh
	add ebx, edx
	shr eax, 0Bh
	and eax, 0FF00h
	add ebx, eax

loc_4829A9:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4829CC:
	lea esi, [esi+2]
	add edi, 4
	dec ebp
	jnz loc_482945
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_482938 endp

sub_4829E4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov ebp, ebx

loc_4829F1:
	mov edx, esp
	mov eax, edi
	call sub_4827A8
	mov ebx, [esp]
	cmp ebx, 10000000h
	jb loc_482A70
	cmp ebx, 0FC000000h
	jnb loc_482A4D
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_482A4D:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_482A70:
	lea esi, [esi+2]
	add edi, 4
	dec ebp
	jnz loc_4829F1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4829E4 endp

sub_482A88: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 18h
	mov esi, eax
	mov ecx, edx

loc_482A92:
	mov edx, esp
	mov eax, esi
	call sub_4827A8
	mov al, 0FFh
	mov dl, [ecx+1]
	mov ah, [esp+3]
	mov [esp+10h], dl
	mov dl, [ecx]
	sub al, ah
	mov [esp+14h], dl
	mov ah, [ecx+2]
	xor edx, edx
	mov dl, ah
	and eax, 0FFh
	imul edx, eax
	movzx edi, byte [esp+2]
	sar edx, 8
	add edi, edx
	mov [esp+4], edi
	mov dl, [esp+4]
	mov [esp+8], dl
	xor edx, edx
	mov dl, [esp+10h]
	imul edx, eax
	movzx edi, byte [esp+1]
	sar edx, 8
	add edi, edx
	mov [esp+4], edi
	mov dl, [esp+4]
	mov [esp+0Ch], dl
	xor edx, edx
	mov dl, [esp+14h]
	imul eax, edx
	xor edx, edx
	sar eax, 8
	mov dl, [esp]
	add eax, edx
	add ecx, 3
	mov ah, [esp+8]
	mov [ecx-1], ah
	mov ah, [esp+0Ch]
	mov [ecx-2], ah
	add esi, 4
	mov [ecx-3], al
	dec ebx
	jnz loc_482A92
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	ret
;sub_482A88 endp

sub_482B2C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 18h
	mov esi, eax
	mov ecx, edx

loc_482B36:
	mov edx, esp
	mov eax, esi
	call sub_4827A8
	mov ah, 0FFh
	sub ah, [esp+3]
	mov dl, [ecx+1]
	mov [esp+10h], dl
	mov dl, [ecx]
	mov al, [ecx+2]
	mov [esp+14h], dl
	xor edx, edx
	mov dl, al
	mov al, ah
	and eax, 0FFh
	imul edx, eax
	movzx edi, byte [esp+2]
	sar edx, 8
	add edi, edx
	mov [esp+4], edi
	mov dl, [esp+4]
	mov [esp+8], dl
	xor edx, edx
	mov dl, [esp+10h]
	imul edx, eax
	movzx edi, byte [esp+1]
	sar edx, 8
	add edi, edx
	mov [esp+4], edi
	mov dl, [esp+4]
	mov [esp+0Ch], dl
	xor edx, edx
	mov dl, [esp+14h]
	imul eax, edx
	xor edx, edx
	sar eax, 8
	mov dl, [esp]
	add ecx, 4
	add eax, edx
	mov byte [ecx-1], 0FFh
	mov ah, [esp+8]
	mov [ecx-2], ah
	mov ah, [esp+0Ch]
	mov [ecx-3], ah
	add esi, 4
	mov [ecx-4], al
	dec ebx
	jnz loc_482B36
	add esp, 18h
	pop edi
	pop esi
	pop ecx
	ret
;sub_482B2C endp

sub_482BD4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov esi, edx
	mov edi, ebx

loc_482BDE:
	xor ebx, ebx
	mov bl, [ebp+0]
	lea eax, 0[ebx*4]
	mov ebx, dword [dword_5636E4]
	mov ebx, [ebx+eax]
	inc ebp
	cmp ebx, 10000000h
	jb loc_482C67
	cmp ebx, 0FC000000h
	jnb loc_482C44
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_482C44:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_482C67:
	lea esi, [esi+2]
	dec edi
	jnz loc_482BDE
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_482BD4 endp

sub_482C78: ;SUBROUTINE
	push edi
	push ebp
	sub esp, 408h
	mov ebp, eax
	mov [esp+400h], edx
	mov [esp+404h], ebx
	mov edi, ecx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	xor edx, edx
	mov ecx, 7Dh
	mov dword [dword_4DAD7C], edx
	mov dword [dword_4DAD84], ecx
	cmp eax, 8
	jnz loc_482D4C
	cmp byte [byte_4DB25C], 10h
	jnz loc_482D4C
	push esi
	lea edx, [esp+4]
	mov eax, ebp
	call sub_499CF8
	mov dword [dword_5636E4], eax
	cmp edi, 0FFh
	jge loc_482D12
	lea esi, [esp+4]
	xor ecx, ecx

loc_482CE5:
	mov edx, dword [dword_5636E4]
	lea eax, 0[ecx*4]
	mov ebx, edi
	add eax, edx
	mov edx, esi
	inc ecx
	call sub_4827E4
	add esi, 4
	cmp ecx, 100h
	jl loc_482CE5
	lea eax, [esp+4]
	mov dword [dword_5636E4], eax

loc_482D12:
	mov ebx, sub_482BD4
	mov esi, 7Bh
	mov dword [dword_4DAD7C], ebx
	mov dword [dword_4DAD84], esi
	pop esi

loc_482D29:
	mov ecx, off_4DAD64
	mov ebx, [esp+404h]
	mov edx, [esp+400h]
	mov eax, ebp
	call sub_4A10BC
	add esp, 408h
	pop ebp
	pop edi
	ret

loc_482D4C:
	mov eax, edi
	call sub_482770
	jmp loc_482D29
;sub_482C78 endp

sub_482D58: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, edx
	mov esi, [eax+0Ch]
	mov ebx, [eax+0Ch]
	shl esi, 14h
	shl ebx, 4
	sar esi, 14h
	sar ebx, 14h
	mov edx, esi
	call sub_482C78
	pop esi
	pop ecx
	pop ebx
	ret
;sub_482D58 endp

sub_482D7C: ;SUBROUTINE
	push esi
	mov esi, [eax+8]
	sar esi, 10h
	sub ebx, esi
	mov esi, [eax+6]
	sar esi, 10h
	sub edx, esi
	call sub_482C78
	pop esi
	ret
;sub_482D7C endp

sub_482DA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ecx, eax
	mov edx, [eax+34h]
	test edx, edx
	jnz loc_482DD4

loc_482DAD:
	mov ebx, [ecx+2Ch]
	test ebx, ebx
	jz loc_482DBB
	mov eax, ebx
	call sub_49B24C

loc_482DBB:
	mov esi, [ecx+30h]
	test esi, esi
	jnz loc_482DE0
	mov eax, ecx
	mov dword [ecx], 57494E6Bh
	call sub_4848FC
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_482DD4:
	mov eax, dword_563900
	call sub_4920F8
	jmp loc_482DAD

loc_482DE0:
	mov eax, esi
	call sub_49B24C
	mov eax, ecx
	mov dword [ecx], 57494E6Bh
	call sub_4848FC
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_482DA0 endp

sub_482E00: ;SUBROUTINE
	push esi
	test eax, eax
	jl loc_482E4E

loc_482E05:
	test ebx, ebx
	jl loc_482E52

loc_482E09:
	mov esi, dword [dword_4DB244]
	cmp eax, esi
	jle loc_482E15
	mov eax, esi

loc_482E15:
	cmp ebx, esi
	jle loc_482E1B
	mov ebx, esi

loc_482E1B:
	test edx, edx
	jl loc_482E56

loc_482E1F:
	test ecx, ecx
	jl loc_482E5A

loc_482E23:
	mov esi, dword [dword_4DB248]
	cmp edx, esi
	jle loc_482E2F
	mov edx, esi

loc_482E2F:
	cmp ecx, esi
	jle loc_482E35
	mov ecx, esi

loc_482E35:
	mov dword [dword_4DB24C], eax
	mov dword [dword_4DB254], ebx
	mov dword [dword_4DB250], edx
	mov dword [dword_4DB258], ecx
	pop esi
	ret

loc_482E4E:
	xor eax, eax
	jmp loc_482E05

loc_482E52:
	xor ebx, ebx
	jmp loc_482E09

loc_482E56:
	xor edx, edx
	jmp loc_482E1F

loc_482E5A:
	xor ecx, ecx
	jmp loc_482E23
;sub_482E00 endp

sub_482E60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, ebx
	mov ebx, [edx]
	mov edi, [eax+8]
	xor edx, edx
	test edi, edi
	jle loc_482E83

loc_482E73:
	cmp ebx, [eax+10h]
	jz loc_482E8E
	inc edx
	mov ebp, [ecx+8]
	add eax, 8
	cmp edx, ebp
	jl loc_482E73

loc_482E83:
	test esi, esi
	jnz loc_482E98
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_482E8E:
	mov eax, [eax+14h]
	add eax, ecx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_482E98:
	mov eax, ecx
	call sub_484EA0
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_482E60 endp

sub_482EA8: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_482E60
	pop ebx
	ret
;sub_482EA8 endp

sub_482EB4: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_482E60
	pop ebx
	ret
;sub_482EB4 endp

nullsub_63: ;SUBROUTINE
	ret
;nullsub_63 endp

sub_482ED4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ecx, eax
	mov esi, edx
	mov edi, ebx

loc_482EE1:
	cmp byte [ecx+3], 0
	jnz loc_482EF6
	add ecx, 4
	inc esi
	dec edi
	jnz loc_482EE1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_482EF6:
	mov al, [esi]
	and eax, 0FFh
	call sub_49B2E0
	mov edx, eax
	test eax, 0FF000000h
	jz loc_482FB7
	mov dh, 0FFh
	mov ebp, eax
	mov bl, [ecx+3]
	shr ebp, 10h
	shr eax, 8
	sub dh, bl
	and eax, 0FFh
	mov bl, [ecx+2]
	and ebp, 0FFh
	mov [esp], eax
	mov bh, [ecx]
	mov al, [esp]
	mov [esp], ebp
	mov [esp+0Ch], bh
	mov bh, [esp]
	mov [esp+10h], al
	xor eax, eax
	mov al, bh
	mov [esp+4], dh
	mov [esp], eax
	xor eax, eax
	mov ebp, [esp]
	mov al, [esp+4]
	imul ebp, eax
	mov dh, [ecx+1]
	sar ebp, 8
	mov [esp+8], dl
	and ebx, 0FFh
	add ebx, ebp
	movzx ebp, byte [esp+10h]
	imul ebp, eax
	sar ebp, 8
	mov dl, dh
	and edx, 0FFh
	add edx, ebp
	movzx ebp, byte [esp+8]
	imul eax, ebp
	sar eax, 8
	mov [esp], eax
	xor eax, eax
	mov ebp, [esp]
	mov al, [esp+0Ch]
	add eax, ebp
	mov [esp+0Ch], al
	xor eax, eax
	mov al, bl
	mov ebx, eax
	xor eax, eax
	shl ebx, 10h
	mov al, dl
	xor edx, edx
	shl eax, 8
	mov dl, [esp+0Ch]
	or eax, ebx
	or edx, eax

loc_482FB7:
	mov eax, edx
	call sub_48266C
	mov [esi], al
	add ecx, 4
	inc esi
	dec edi
	jnz loc_482EE1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_482ED4 endp

sub_482FD4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov ebp, ebx

loc_482FDE:
	mov ebx, [edi]
	cmp ebx, 10000000h
	jb loc_48305B
	cmp ebx, 0FC000000h
	jnb loc_483038
	mov ax, [esi]
	mov ecx, eax
	and eax, 7C00h
	shl eax, 11h
	mov edx, ecx
	and edx, 3E0h
	shl edx, 9
	add eax, edx
	and ecx, 1Fh
	add eax, ecx
	mov ecx, ebx
	shr ecx, 18h
	xor ecx, 0FFh
	mul ecx
	shl edx, 10h
	add ebx, edx
	mov edx, eax
	shr edx, 5
	and edx, 0FFh
	add ebx, edx
	shr eax, 0Bh
	and eax, 0FF00h
	add ebx, eax

loc_483038:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_48305B:
	lea esi, [esi+2]
	add edi, 4
	dec ebp
	jnz loc_482FDE
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_482FD4 endp

sub_483070: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov ebp, ebx

loc_48307A:
	mov ebx, [edi]
	cmp ebx, 10000000h
	jb loc_4830EF
	cmp ebx, 0FC000000h
	jnb loc_4830CC
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_4830CC:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4830EF:
	lea esi, [esi+2]
	add edi, 4
	dec ebp
	jnz loc_48307A
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_483070 endp

sub_483100: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov edi, ebx

loc_483109:
	cmp byte [eax+3], 0
	jnz loc_483120

loc_48310F:
	add eax, 4
	add edx, 3
	dec edi
	jnz loc_483109
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_483120:
	mov cl, [eax+1]
	mov bl, 0FFh
	mov ch, [edx+2]
	mov bh, [eax+3]
	mov [esp+10h], ch
	sub bl, bh
	movzx esi, byte [esp+10h]
	mov [esp+0Ch], bl
	mov [esp], esi
	movzx esi, byte [esp+0Ch]
	mov ebp, [esp]
	imul ebp, esi
	mov bl, [eax+2]
	sar ebp, 8
	mov bh, [eax]
	mov [esp], ebp
	movzx ebp, bl
	mov ch, [edx+1]
	add ebp, [esp]
	mov [esp+8], ch
	mov [esp], ebp
	movzx ebp, byte [esp+8]
	imul ebp, esi
	mov ch, [edx]
	mov [esp+4], ch
	sar ebp, 8
	mov bl, [esp]
	and ecx, 0FFh
	add ecx, ebp
	movzx ebp, byte [esp+4]
	imul esi, ebp
	sar esi, 8
	mov [esp], esi
	mov ebp, [esp]
	movzx esi, bh
	add ebp, esi
	mov [esp], ebp
	mov [edx+1], cl
	mov bh, [esp]
	mov [edx+2], bl
	mov [edx], bh
	jmp loc_48310F
;sub_483100 endp

sub_4831A8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov esi, ebx

loc_4831B1:
	cmp byte [eax+3], 0
	jnz loc_4831C8

loc_4831B7:
	add eax, 4
	add edx, 4
	dec esi
	jnz loc_4831B1
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4831C8:
	mov bl, [eax+2]
	mov bh, [eax+1]
	mov [esp+14h], bh
	mov bh, [eax]
	mov [esp+10h], bh
	cmp byte [edx+3], 0
	jz loc_483283
	mov bh, 0FFh
	sub bh, [eax+3]
	mov cl, [edx+2]
	mov ch, [edx]
	mov [esp+8], bh
	mov [esp+0Ch], ch
	movzx edi, cl
	xor ecx, ecx
	mov cl, [esp+8]
	imul edi, ecx
	mov bh, [edx+1]
	movzx ebp, bl
	sar edi, 8
	add ebp, edi
	mov [esp+4], ebp
	mov bl, [esp+4]
	movzx edi, bh
	imul edi, ecx
	movzx ebp, byte [esp+14h]
	sar edi, 8
	add ebp, edi
	movzx edi, byte [esp+0Ch]
	imul edi, ecx
	sar edi, 8
	mov [esp+4], ebp
	mov [esp], edi
	movzx edi, byte [esp+10h]
	mov ebp, [esp]
	add ebp, edi
	mov [esp], ebp
	movzx edi, byte [edx+3]
	mov ebp, 0FFh
	sub ebp, edi
	imul ecx, ebp
	mov bh, [esp+4]
	mov edi, 0FFh
	sar ecx, 8
	mov [esp+14h], bh
	sub edi, ecx
	mov bh, [esp]
	mov ecx, edi
	mov [esp+10h], bh

loc_48326B:
	mov [edx+3], cl
	mov [edx+2], bl
	mov bl, [esp+14h]
	mov [edx+1], bl
	mov bl, [esp+10h]
	mov [edx], bl
	jmp loc_4831B7

loc_483283:
	mov cl, [eax+3]
	jmp loc_48326B
;sub_4831A8 endp

sub_483288: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov esi, edx
	mov edi, ebx

loc_483292:
	xor ebx, ebx
	mov bl, [ebp+0]
	lea eax, 0[ebx*4]
	mov ebx, dword [dword_5636EC]
	mov ebx, [ebx+eax]
	inc ebp
	cmp ebx, 10000000h
	jb loc_483300
	cmp ebx, 0FC000000h
	jnb loc_4832FD
	xor eax, eax
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 8
	mov ecx, eax
	shr eax, 10h
	and edx, 0F800h
	shr ecx, 8
	and eax, 7E0h
	add ebx, edx
	and ecx, 1Fh
	add ebx, eax
	add ebx, ecx

loc_4832FD:
	mov [esi], bx

loc_483300:
	lea esi, [esi+2]
	dec edi
	jnz loc_483292
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_483288 endp

sub_48330C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 400h
	mov esi, eax
	mov edi, edx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	xor edx, edx
	mov ecx, 7Dh
	mov dword [dword_4DADA0], edx
	mov dword [dword_4DADA8], ecx
	cmp eax, 8
	jnz loc_483369
	cmp byte [byte_4DB25C], 10h
	jnz loc_483369
	mov edx, esp
	mov eax, esi
	mov ebp, sub_483288
	call sub_499EC0
	mov dword [dword_5636EC], eax
	mov eax, 7Bh
	mov dword [dword_4DADA0], ebp
	mov dword [dword_4DADA8], eax

loc_483369:
	mov ecx, off_4DAD88
	mov edx, edi
	mov eax, esi
	call sub_4A10BC
	add esp, 400h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48330C endp

sub_483384: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_48330C
	pop edx
	pop ebx
	ret
;sub_483384 endp

sub_4833A0: ;SUBROUTINE
	push ecx
	mov ecx, [eax+8]
	sar ecx, 10h
	sub ebx, ecx
	mov ecx, [eax+6]
	sar ecx, 10h
	sub edx, ecx
	call sub_48330C
	pop ecx
	ret
;sub_4833A0 endp

sub_4833C7: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DADB0]
	mov eax, dword [dword_5637F4]
	mov dword [dword_4DADB0], eax
	sub eax, edx
	pop edx
	ret
;sub_4833C7 endp

sub_4833E7: ;SUBROUTINE
	add eax, dword [dword_5637F4]
	mov dword [dword_4DADAC], eax
	ret
;sub_4833E7 endp

sub_4833F3: ;SUBROUTINE
	mov eax, dword [dword_5637F4]
	sub eax, dword [dword_4DADAC]
	js sub_4833F3
	ret
;sub_4833F3 endp

sub_483401: ;SUBROUTINE
	mov eax, dword [dword_5637F4]
	sub eax, dword [dword_4DADAC]
	sbb eax, eax
	inc eax
	ret
;sub_483401 endp

sub_483410: ;SUBROUTINE
	add eax, dword [dword_5637F4]
	push eax

loc_483417:
	xor eax, eax
	call sub_483EB0
	mov eax, dword [dword_5637F4]
	sub eax, [esp]
	js loc_483417
	add esp, 4
	ret
;sub_483410 endp

sub_483430: ;SUBROUTINE
	sar ebx, 1
	jmp sub_4A14D4
;sub_483430 endp

sub_483438: ;SUBROUTINE
	add ebx, ebx
	jmp sub_4A14D4
;sub_483438 endp

sub_483440: ;SUBROUTINE
	push ecx
	mov ecx, eax
	lea eax, 0[ebx*4]
	sub eax, ebx
	mov ebx, eax
	mov eax, ecx
	call sub_4A14D4
	pop ecx
	ret
;sub_483440 endp

sub_483458: ;SUBROUTINE
	shl ebx, 2
	jmp sub_4A14D4
;sub_483458 endp

sub_483460: ;SUBROUTINE
	push ecx
	mov ecx, off_4DADB4
	call sub_4A10BC
	pop ecx
	ret
;sub_483460 endp

sub_483470: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, off_4DADB4
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_4A10BC
	pop edx
	pop ecx
	pop ebx
	ret
;sub_483470 endp

sub_483494: ;SUBROUTINE
	push ecx
	mov ecx, [eax+8]
	sar ecx, 10h
	sub ebx, ecx
	mov ecx, [eax+6]
	sar ecx, 10h
	sub edx, ecx
	mov ecx, off_4DADB4
	call sub_4A10BC
	pop ecx
	ret
;sub_483494 endp

sub_4834C4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, off_4DADB4
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_4A10BC
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4834C4 endp

;	Attributes: library function

strcmp_: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	cmp eax, edx
	jz loc_483794

loc_483728:
	mov eax, [ebx]
	mov ecx, [edx]
	cmp ecx, eax
	jnz loc_483799
	not ecx
	add eax, 0FEFEFEFFh
	and eax, ecx
	and eax, 80808080h
	jnz loc_483794
	mov eax, [ebx+4]
	mov ecx, [edx+4]
	cmp ecx, eax
	jnz loc_483799
	not ecx
	add eax, 0FEFEFEFFh
	and eax, ecx
	and eax, 80808080h
	jnz loc_483794
	mov eax, [ebx+8]
	mov ecx, [edx+8]
	cmp ecx, eax
	jnz loc_483799
	not ecx
	add eax, 0FEFEFEFFh
	and eax, ecx
	and eax, 80808080h
	jnz loc_483794
	mov eax, [ebx+0Ch]
	mov ecx, [edx+0Ch]
	cmp ecx, eax
	jnz loc_483799
	add ebx, 10h
	add edx, 10h
	not ecx
	add eax, 0FEFEFEFFh
	and eax, ecx
	and eax, 80808080h
	jz loc_483728

loc_483794:
	sub eax, eax
	pop ecx
	pop ebx
	ret

loc_483799:
	cmp al, cl
	jnz loc_4837BA
	cmp al, 0
	jz loc_483794
	cmp ah, ch
	jnz loc_4837BA
	cmp ah, 0
	jz loc_483794
	shr eax, 10h
	shr ecx, 10h
	cmp al, cl
	jnz loc_4837BA
	cmp al, 0
	jz loc_483794
	cmp ah, ch

loc_4837BA:
	sbb eax, eax
	or al, 1
	pop ecx
	pop ebx
	ret
;strcmp_ endp

sub_4837D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	call SDL_GetTicks_wrap
	mov esi, eax
	call sub_489E0C
	xor ebx, ebx
	mov dword [dword_5637D8], eax
	xor edi, edi

loc_4837ED:
	mov eax, dword [dword_5637D8]
	call sub_489E5C ;WaitForMultipleObjects(eax)
	cmp edi, dword [dword_5637D0]
	jz loc_483862
	inc dword [dword_5637F4]
	inc dword [dword_5637F0]
	call SDL_GetTicks_wrap
	mov edx, eax
	sub edx, esi
	imul edx, 4A9h
	add ebx, edx
	mov esi, eax
	cmp ebx, 0FFFFh
	jle loc_483839
	mov eax, ebx
	sar eax, 10h
	add dword [dword_5637D4], eax
	and ebx, 0FFFFh

loc_483839:
	mov ebp, dword [dword_563780]
	mov ecx, edi
	mov edx, edi
	cmp edi, ebp
	jz loc_4837ED

loc_483847:
	mov eax, edx
	inc ecx
	call dword dword_563780[eax] ;Game function
	add edx, 4
	cmp ecx, 8
	jnb loc_4837ED
	cmp edi, dword dword_563780[edx]
	jnz loc_483847
	jmp loc_4837ED

loc_483862:
	mov eax, dword [dword_5637D8]
	xor edx, edx
	call CloseHandleCaller
	mov dword [dword_5637D8], edx
	mov dword [dword_4DABCC], edx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4837D0 endp

sub_483884: ;SUBROUTINE
	push ebx
	push edx
	call sub_489E0C
	mov edx, dword [dword_5637AC]
	mov dword [dword_5637CC], eax
	test edx, edx
	jz loc_4838B4

loc_48389A:
	call dword [dword_5637AC]
	mov eax, dword [dword_5637CC]
	call sub_489E5C
	cmp dword [dword_5637AC], 0
	jnz loc_48389A
	nop

loc_4838B4:
	mov eax, dword [dword_5637CC]
	xor ebx, ebx
	call CloseHandleCaller
	mov dword [dword_5637CC], ebx
	pop edx
	pop ebx
	ret
;sub_483884 endp

sub_4838CC: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov dword [dword_5637AC], eax
	test eax, eax
	jz loc_4838E2
	mov edx, dword [dword_5637CC]
	test edx, edx
	jz loc_4838FC

loc_4838E2:
	cmp dword [dword_5637AC], 0
	jnz loc_4838F8
	mov ebx, dword [dword_5637CC]
	test ebx, ebx
	jnz loc_483933

loc_4838F8:
	pop edx
	pop ecx
	pop ebx
	ret

loc_4838FC:
	push dword_5637B0
	mov ecx, 0FFFFFFFFh
	mov ebx, 2
	mov eax, sub_483884
	call sub_489AE0
	cmp dword [dword_5637CC], 0
	jnz loc_4838F8
	xor edx, edx

loc_483920:
	mov eax, edx
	call sub_489B9C
	cmp edx, dword [dword_5637CC]
	jz loc_483920
	pop edx
	pop ecx
	pop ebx
	ret

loc_483933:
	mov eax, dword_5637B0
	mov edx, ebx
	call sub_489E20
	cmp dword [dword_5637CC], 0
	jz loc_4838F8
	xor edx, edx

loc_48394A:
	mov eax, edx
	call sub_489B9C
	cmp edx, dword [dword_5637CC]
	jnz loc_48394A
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4838CC endp

sub_483960: ;SUBROUTINE
	push edx
	xor eax, eax

loc_483963:
	add eax, 4
	xor edx, edx
	mov dword dword_56377C[eax], edx
	cmp eax, 20h
	jnz loc_483963
	pop edx
	ret
;sub_483960 endp

sub_483A70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, dword [dword_4DB1B0]
	mov ebx, eax
	mov ecx, 0FFFFFFFFh
	inc esi
	xor edx, edx
	xor eax, eax

loc_483A86:
	cmp dword dword_563780[eax], 0
	jnz loc_483A93
	test ecx, ecx
	jl loc_483ABC

loc_483A93:
	cmp ebx, dword dword_563780[eax]
	jz loc_483AB0

loc_483A9B:
	inc edx
	add eax, 4
	cmp edx, 8
	jl loc_483A86
	cmp ecx, 0FFFFFFFFh
	jz loc_483AB0
	mov dword dword_563780[ecx*4], ebx

loc_483AB0:
	dec esi
	mov dword [dword_4DB1B0], esi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_483ABC:
	mov ecx, edx
	jmp loc_483A9B
;sub_483A70 endp

sub_483AC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ebx, dword [dword_4DB1B0]
	mov ecx, eax
	mov esi, dword [dword_563780]
	inc ebx
	xor edx, edx
	xor eax, eax
	cmp ecx, esi
	jz loc_483AEC

loc_483ADB:
	add eax, 4
	inc edx
	cmp eax, 20h
	jge loc_483AEC
	cmp ecx, dword dword_563780[eax]
	jnz loc_483ADB

loc_483AEC:
	cmp edx, 8
	jge loc_483B23
	lea eax, 0[edx*4]
	cmp ecx, dword dword_563780[eax]
	jnz loc_483B23
	cmp edx, 7
	jge loc_483B1C

loc_483B05:
	add eax, 4
	mov edx, dword dword_563780[eax]
	mov dword dword_56377C[eax], edx
	cmp eax, 1Ch
	jl loc_483B05

loc_483B1C:
	xor eax, eax
	mov dword [dword_56379C], eax

loc_483B23:
	dec ebx
	mov dword [dword_4DB1B0], ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_483AC0 endp

sub_483B7C: ;SUBROUTINE
	push edx
	push esi
	push ebp
	cmp dword [dword_5637D0], 0
	jz loc_483BD0
	push ecx
	xor ecx, ecx
	mov dword [dword_4DABCC], ecx
	mov dword [dword_5637D0], ecx
	mov dword [timerIsRunning], ecx
	call stopTimer
	mov ebp, dword [uResolution]
	push ebp ; uPeriod
	call timeEndPeriod_wrap
	mov eax, dword [dword_5637D8]
	test eax, eax
	jnz loc_483BFE

loc_483BB8:
	mov edx, 1
	pop ecx

loc_483BBE:
	cmp dword [dword_5637D8], 0
	jnz loc_483C0C

loc_483BD0:
	xor esi, esi
	mov dword [dword_4DB1B0], esi
	mov dword [uResolution], esi
	mov dword [dword_4DAC08], esi
	pop ebp
	pop esi
	pop edx
	ret

loc_483BFE:
	mov edx, eax
	mov eax, dword_5637DC
	call sub_489E20
	jmp loc_483BB8

loc_483C0C:
	mov eax, edx
	call sub_489B9C
	jmp loc_483BBE
;sub_483B7C endp

sub_483C18: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	cmp esi, 1
	jge loc_483C9D

loc_483C2D:
	mov esi, 64h

loc_483C32:
	mov eax, 3E80000h
	mov edx, eax
	sar edx, 1Fh
	idiv esi
	xor edx, edx
	mov dword [dword_5637A0], eax
	mov dword [dword_5637F4], edx
	push 8 ; cbtc
	mov dword [dword_5637D4], edx
	lea eax, [esp+4]
	push eax ; ptc
	call timeGetDevCaps_wrap
	test eax, eax
	jnz loc_483CA7
	mov edi, 1
	mov edx, dword [dword_5637A0]
	mov [esp], edi
	mov [esp+4], edi
	mov dword [uResolution], edi
	cmp edx, 10000h
	jnb loc_483CB7

loc_483C89:
	mov dword [dword_4DABCC], eax
	mov dword [dword_5637D0], eax

loc_483C93:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_483C9D:
	cmp esi, 2710h
	jg loc_483C2D
	jmp loc_483C32

loc_483CA7:
	xor edi, edi
	mov dword [dword_4DABCC], edi
	mov dword [dword_5637D0], edi
	jmp loc_483C93

loc_483CB7:
	push dword_5637DC
	mov ecx, 0FFFFFFFFh
	mov ebx, 2
	mov eax, sub_4837D0
	xor edx, edx
	call sub_489AE0
	test eax, eax
	jz loc_483C89
	mov ecx, dword [uResolution]
	push ecx ; uPeriod
	call timeBeginPeriod_wrap
	test eax, eax
	jnz loc_483D46
	mov eax, sub_483B7C
	call atexit_
	mov dword [dword_4DABCC], esi
	mov dword [dword_5637D0], esi
	test esi, esi
	jnz loc_483D6E

loc_483D02:
	mov eax, dword [dword_5637F4]
	mov ebx, eax
	call SDL_GetTicks_wrap
	mov esi, eax
	mov eax, 2710h
	mov edx, eax
	mov edi, dword [dword_4DABCC]
	sar edx, 1Fh
	idiv edi
	add esi, eax

loc_483D26:
	call SDL_GetTicks_wrap
	cmp eax, esi
	jnb loc_483D93
	mov eax, dword [dword_5637F4]
	cmp ebx, eax
	jnz loc_483D93
	mov eax, 1
	call sub_489B9C
	jmp loc_483D26

loc_483D46:
	mov eax, dword_5637DC
	xor ebp, ebp
	mov edx, dword [dword_5637D8]
	mov dword [dword_4DABCC], ebp
	mov dword [dword_5637D0], ebp
	call sub_489E20
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_483D6E:
	mov ebx, dword [timerIsRunning]
	test ebx, ebx
	jnz loc_483D02
	inc ebx
	mov dword [timerIsRunning], ebx
	call startTimer
	jmp loc_483D02

loc_483D93:
	mov eax, dword [dword_5637F4]
	cmp ebx, eax
	jnz loc_483DA1
	call sub_483B7C

loc_483DA1:
	cmp dword [dword_4DABCC], 0
	jz loc_483C93
	mov dword [dword_4DAC08], sub_483960
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_483C18 endp

sub_483DD0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov [esp], edx
	mov edi, ebx
	mov ebx, dword [dword_4DB1C0]
	mov ecx, 0FFFFFFFFh
	lea edx, [ebx+1]
	xor eax, eax
	mov dword [dword_4DB1C0], edx
	xor edx, edx

loc_483DF6:
	mov ebp, dword dword_5637F8[edx]
	cmp esi, ebp
	jnz loc_483E1E

loc_483E00:
	mov ecx, eax

loc_483E02:
	inc eax
	add edx, 10h
	cmp eax, 10h
	jl loc_483DF6
	cmp ecx, 0FFFFFFFFh
	jnz loc_483E2E
	dec dword [dword_4DB1C0]
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_483E1E:
	test ebp, ebp
	jnz loc_483E02
	cmp ecx, 0FFFFFFFFh
	jnz loc_483E02
	test ebx, ebx
	jz loc_483E00
	dec ebx
	jmp loc_483E02

loc_483E2E:
	shl ecx, 4
	mov eax, [esp]
	mov dword dword_5637F8[ecx], esi
	mov dword dword_5637FC[ecx], eax
	add edi, dword [dword_5637F0]
	xor edx, edx
	mov dword dword_563800[ecx], edi
	mov dword dword_563804[ecx], edx
	dec dword [dword_4DB1C0]
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_483DD0 endp

sub_483E64: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov ecx, eax
	mov ebx, dword [dword_5637F8]
	xor edx, edx
	xor eax, eax
	cmp ecx, ebx
	jz loc_483E8B

loc_483E78:
	add eax, 10h
	inc edx
	cmp eax, 100h
	jge loc_483E8B
	cmp ecx, dword dword_5637F8[eax]
	jnz loc_483E78

loc_483E8B:
	cmp edx, 10h
	jge loc_483E9B
	shl edx, 4
	cmp ecx, dword dword_5637F8[edx]
	jz loc_483EA0

loc_483E9B:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_483EA0:
	xor ebp, ebp
	mov dword dword_5637F8[edx], ebp
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_483E64 endp

sub_483EB0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov eax, dword [dword_4DB1C4]
	xor esi, esi
	cmp eax, dword [dword_5637F0]
	jz loc_483F3B
	mov eax, dword [dword_5637F0]
	mov dword [dword_4DB1C4], eax
	xor ecx, ecx

loc_483ED7:
	mov ebx, dword dword_5637F8[ecx]
	test ebx, ebx
	jz loc_483F30
	mov eax, dword [dword_5637F0]
	cmp eax, dword dword_563800[ecx]
	jl loc_483F30
	cmp dword dword_563804[ecx], 0
	jnz loc_483F30
	mov dword dword_563804[ecx], 1
	mov edx, dword [dword_5637F0]
	mov ebp, dword dword_563800[ecx]
	mov eax, edi
	sub edx, ebp
	call ebx
	or esi, eax
	mov eax, dword [dword_5637F0]
	mov edx, dword dword_5637FC[ecx]
	xor ebx, ebx
	add eax, edx
	mov dword dword_563804[ecx], ebx
	mov dword dword_563800[ecx], eax

loc_483F30:
	add ecx, 10h
	cmp ecx, 100h
	jnz loc_483ED7

loc_483F3B:
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_483EB0 endp

sub_483F44: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov eax, dword [dword_5637F4]
	xor edx, edx
	add ecx, eax

loc_483F51:
	mov eax, dword [dword_5637F4]
	cmp eax, ecx
	jge loc_483F5E
	test edx, edx
	jz loc_483F63

loc_483F5E:
	mov eax, edx
	pop edx
	pop ecx
	ret

loc_483F63:
	xor eax, eax
	call sub_483EB0
	mov edx, eax
	jmp loc_483F51
;sub_483F44 endp

sub_484008: ;SUBROUTINE
	cmp dword [dword_563D74], 0
	jz loc_483F90
	cmp dword [dword_563D54], 0
	jz loc_483F90
	mov eax, 1
	ret
loc_483F90:
	xor eax, eax
	ret
;sub_484008 endp

sub_4840F0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 304h
	mov edx, dword [dword_4DB1E8]
	xor ebp, ebp
	test edx, edx
	jnz loc_48428E
	mov ecx, 1
	mov ebx, [esp+320h]
	mov dword [dword_4DB1E8], ecx
	test ebx, ebx
	jnz loc_48429B
	xor ah, ah
	mov [esp], ah

loc_484138:
	cmp dword [dword_4DABFC], 0
	jz loc_484203
	mov edx, dword [dword_4DB1D8]
	test edx, edx
	jz loc_484197
	mov ecx, dword [dword_4DB1DC]
	push ecx
	push edx
	push aFileSLineD ; "FILE %s LINE %d\n"
	lea eax, [esp+20Ch]
	push eax
	call sprintf_
	add esp, 10h
	lea esi, [esp+200h]
	mov edi, esp
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_48417E:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_484196
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_48417E

loc_484196:
	pop edi

loc_484197:
	mov esi, dword [dword_4DB1E0]
	test esi, esi
	jz loc_484203
	mov edi, dword [dword_4DB1E4]
	push edi
	push esi
	push aCalledFromFile ; "CALLED FROM FILE %s LINE %d\n"
	lea eax, [esp+28Ch]
	push eax
	call sprintf_
	add esp, 10h
	mov edi, esp
	lea esi, [esp+280h]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_4841D0:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4841E8
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4841D0

loc_4841E8:
	pop edi

loc_484203:
	cmp dword [dword_4DAC04], 0
	jz loc_484214
	call dword [dword_4DAC04]
	mov ebp, eax

loc_484214:
	cmp dword [dword_4DAC08], 0
	jz loc_484223
	call dword [dword_4DAC08]

loc_484223:
	push 11031h ; uType
	push aAbortMessage ; "Abort message:"
	lea eax, [esp+8]
	push eax ; lpText
	push 0 ; hWnd
	call MessageBoxA_wrap

	test ebp, ebp
	jz loc_48427C
	mov eax, ebp
	call sub_489F60

loc_48427C:
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_4842E1
	jmp ExitProcess0

loc_48428E:
	add esp, 304h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48429B:
	lea eax, [esp+324h]
	lea ebx, [esp+300h]
	mov edx, [esp+320h]
	mov [esp+300h], eax
	mov eax, esp
	call vsprintf_
	mov [esp+300h], ebp
	jmp loc_484138

loc_4842E1:
	push eax ; uExitCode
	call ExitProcess_wrap
;sub_4840F0 endp

sub_48438C: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov ebp, ecx
	mov ecx, edx
	and ecx, 0F00h
	sar ecx, 8
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov ecx, dword_563D80
	shl edx, 3
	mov eax, [esp+10h]
	add ecx, edx
	dec eax
	mov [ecx+8], eax
	mov eax, [esp+14h]
	dec eax
	mov [ecx+0Ch], eax
	mov eax, [esp+18h]
	mov edx, [esp+1Ch]
	mov [ecx+10h], eax
	test edx, edx
	jz loc_4843D7
	mov edx, 4

loc_4843D7:
	mov [ecx+14h], edx
	mov edx, dword [dword_563F04]
	push edi
	mov eax, [edx+20h]
	push aLow8s ; "LOW %-8s"
	mov dword [dword_563F04], eax
	lea eax, [edx+4]
	push eax
	call sprintf_
	mov dword [edx+14h], 0
	mov dword [edx+24h], 0
	mov eax, [edx+14h]
	mov [edx+10h], eax
	mov eax, esi
	mov [edx], ebx
	or ah, 80h
	mov [edx+18h], eax
	add esp, 0Ch
	mov [ecx], edx
	mov edx, dword [dword_563F04]
	push edi
	mov ebx, [edx+20h]
	push aHigh7s ; "HIGH %-7s"
	mov dword [dword_563F04], ebx
	lea ebx, [edx+4]
	push ebx
	call sprintf_
	mov dword [edx+14h], 0
	mov dword [edx+20h], 0
	or si, 8020h
	mov [edx], ebp
	mov [edx+18h], esi
	mov eax, [edx+14h]
	mov [edx+10h], eax
	mov eax, [ecx]
	mov [ecx+4], edx
	mov [eax+20h], edx
	add esp, 0Ch
	mov ebx, [ecx]
	mov eax, ecx
	mov [edx+24h], ebx
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_48438C endp

sub_48447C: ;SUBROUTINE
	push ecx
	mov ecx, 1
	call sub_4844D4
	pop ecx
	ret
;sub_48447C endp

sub_48448C: ;SUBROUTINE
	push ecx
	xor ecx, ecx
	call sub_4844D4
	pop ecx
	ret
;sub_48448C endp

sub_484498: ;SUBROUTINE
	push ecx
	mov ecx, 1
	call sub_4844D4
	test eax, eax
	jnz loc_4844A9
	pop ecx
	ret

loc_4844A9:
	mov eax, [eax]
	pop ecx
	ret
;sub_484498 endp

sub_4844B0: ;SUBROUTINE
	push ecx
	xor ecx, ecx
	call sub_4844D4
	test eax, eax
	jnz loc_4844BE
	pop ecx
	ret

loc_4844BE:
	mov eax, [eax]
	pop ecx
	ret
;sub_4844B0 endp

sub_4844C4: ;SUBROUTINE
	call sub_4844D4
	test eax, eax
	jnz sub_4844D0
	ret
;sub_4844C4 endp

sub_4844D0: ;SUBROUTINE
	mov eax, [eax]
	ret
;sub_4844D0 endp

sub_4844D4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, dword [dword_563F00]
	test edi, edi
	jz loc_4844EA
	mov eax, edi
	call sub_4A40C0

loc_4844EA:
	mov eax, esi
	call sub_484510
	mov ebp, dword [dword_563F00]
	mov edx, eax
	test ebp, ebp
	jnz loc_484503
	mov eax, edx
	pop ebp
	pop edi
	pop esi
	ret

loc_484503:
	mov eax, ebp
	call sub_4A40C8
	mov eax, edx
	pop ebp
	pop edi
	pop esi
	ret
;sub_4844D4 endp

sub_484510: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp+0Ch], eax
	mov [esp+10h], edx
	mov edx, ebx
	and edx, 0F00h
	sar edx, 8
	lea eax, 0[edx*4]
	sub eax, edx
	mov ecx, dword_563D80
	shl eax, 3
	add ecx, eax
	mov eax, [esp+0Ch]
	call sub_4A40D0
	mov [esp+0Ch], eax
	test bl, 40h
	jnz loc_48465C
	mov eax, [esp+10h]
	add eax, [ecx+14h]
	mov edx, [ecx+8]
	add edx, eax
	mov eax, [ecx+8]

loc_484561:
	not eax
	and edx, eax
	mov [esp], edx
	mov edi, [ecx]
	test edi, edi
	jz loc_484728
	mov eax, ebx
	and eax, 0F00h
	cmp eax, 300h
	jz loc_484672
	test bl, 20h
	jnz loc_48475F
	cmp dword [dword_4DB204], 0
	jnz loc_4846DC

loc_48459A:
	mov edi, [ecx]
	mov esi, [edi+20h]
	mov edi, [edi]
	test bl, 40h
	jnz loc_4846F4

loc_4845AA:
	mov eax, [esi]
	xor edx, edx
	cmp edi, eax

loc_4845B0:
	jb loc_484705
	mov edi, [esi]
	add edi, [esi+10h]
	test bl, 40h
	jz loc_4845CC
	mov eax, [ecx+0Ch]
	add eax, edi
	mov edi, [ecx+0Ch]
	not edi
	and edi, eax

loc_4845CC:
	cmp esi, [ecx+4]
	jnz loc_48470E

loc_4845D5:
	cmp edx, [esp]
	jl loc_484718
	mov ebp, dword [dword_563F04]
	mov edx, dword [dword_4DB200]
	mov [ebp+18h], ebx
	mov [esp+8], ebp
	mov eax, [ebp+20h]
	mov [ebp+1Ch], edx
	mov ebx, 0Ch
	mov dword [dword_563F04], eax
	mov eax, [esp+10h]
	inc edx
	mov [ebp+14h], eax
	mov dword [dword_4DB200], edx
	mov eax, [esp]
	mov edx, [esp+0Ch]
	mov [ebp+10h], eax
	lea eax, [ebp+4]
	call strncpy_
	mov [ebp+0], edi
	mov eax, [esi+24h]
	mov [ebp+24h], eax
	mov [ebp+20h], esi
	mov eax, [esi+24h]
	mov [eax+20h], ebp
	mov [esi+24h], ebp
	cmp dword [ecx+14h], 0
	jz loc_484643
	mov eax, ebp
	call sub_4A4110

loc_484643:
	cmp dword [dword_4DB204], 0
	jz loc_484651
	call sub_484B14

loc_484651:
	mov eax, [esp+8]

loc_484655:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_48465C:
	mov eax, [esp+10h]
	mov esi, [ecx+14h]
	mov edx, [ecx+0Ch]
	add eax, esi
	add edx, eax
	mov eax, [ecx+0Ch]
	jmp loc_484561

loc_484672:
	mov ecx, dword [dword_563F04]
	mov eax, [ecx+20h]
	mov dword [dword_563F04], eax
	mov eax, esp
	mov esi, [edi+20h]
	call sub_49CAD4
	mov [ecx], eax
	test eax, eax
	jz loc_484655
	mov edx, dword [dword_4DB200]
	mov [ecx+18h], ebx
	mov eax, [esp+10h]
	mov [ecx+1Ch], edx
	mov ebx, 0Ch
	mov [ecx+14h], eax
	inc edx
	mov eax, [esp]
	mov dword [dword_4DB200], edx
	mov [ecx+10h], eax
	mov edx, [esp+0Ch]
	lea eax, [ecx+4]
	call strncpy_
	mov eax, [esi+24h]
	mov [ecx+24h], eax
	mov [ecx+20h], esi
	mov eax, [esi+24h]
	mov [eax+20h], ecx
	mov eax, ecx
	mov [esi+24h], ecx
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_4846DC:
	test bl, 10h
	jnz loc_48459A
	mov edx, edi
	mov eax, [ecx+4]
	call sub_4A4248
	jmp loc_48459A

loc_4846F4:
	mov eax, [ecx+0Ch]
	add eax, edi
	mov edi, [ecx+0Ch]
	not edi
	and edi, eax
	jmp loc_4845AA

loc_484705:
	mov edx, [esi]
	sub edx, edi
	jmp loc_4845D5

loc_48470E:
	mov esi, [esi+20h]
	cmp edi, [esi]
	jmp loc_4845B0

loc_484718:
	cmp esi, [ecx+4]
	jnz loc_484731
	mov eax, ebx
	call sub_4A4508
	test eax, eax
	jnz loc_484750

loc_484728:
	xor eax, eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_484731:
	mov edi, [esi]
	add edi, [esi+10h]
	test bl, 40h
	jnz loc_484743

loc_48473B:
	mov esi, [esi+20h]
	jmp loc_4845AA

loc_484743:
	mov edx, [ecx+0Ch]
	mov eax, edx
	add edi, edx
	not eax
	and edi, eax
	jmp loc_48473B

loc_484750:
	mov edx, [ecx]
	mov eax, [ecx+4]
	call sub_4A4248
	jmp loc_48459A

loc_48475F:
	cmp dword [dword_4DB204], 0
	jnz loc_484834

loc_48476C:
	mov edi, [ecx+4]
	mov esi, [edi+24h]
	mov edi, [edi]
	test bl, 40h
	jnz loc_48484C

loc_48477D:
	xor eax, eax
	mov [esp+14h], eax

loc_484783:
	mov eax, [esi]
	add eax, [esi+10h]
	test bl, 40h
	jz loc_484799
	mov edx, [ecx+0Ch]
	add edx, eax
	mov eax, [ecx+0Ch]
	not eax
	and eax, edx

loc_484799:
	cmp eax, edi
	jnb loc_484858
	mov edx, edi
	sub edx, eax
	mov [esp+14h], edx

loc_4847A9:
	mov eax, [esp+14h]
	cmp eax, [esp]
	jl loc_484876
	mov ebp, dword [dword_563F04]
	mov edx, dword [dword_4DB200]
	mov [ebp+18h], ebx
	mov [esp+4], ebp
	mov eax, [ebp+20h]
	mov [ebp+1Ch], edx
	mov ebx, 0Ch
	mov dword [dword_563F04], eax
	mov eax, [esp+10h]
	inc edx
	mov [ebp+14h], eax
	mov dword [dword_4DB200], edx
	mov eax, [esp]
	mov edx, [esp+0Ch]
	mov [ebp+10h], eax
	lea eax, [ebp+4]
	call strncpy_
	sub edi, [esp]
	mov [ebp+24h], esi
	mov [ebp+0], edi
	mov eax, [esi+20h]
	mov [ebp+20h], eax
	mov [eax+24h], ebp
	mov [esi+20h], ebp
	cmp dword [ecx+14h], 0
	jz loc_48481B
	mov eax, ebp
	call sub_4A4110

loc_48481B:
	cmp dword [dword_4DB204], 0
	jz loc_484829
	call sub_484B14

loc_484829:
	mov eax, [esp+4]
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	ret

loc_484834:
	test bl, 10h
	jnz loc_48476C
	mov eax, edi
	mov edx, [ecx+4]
	call sub_4A4358
	jmp loc_48476C

loc_48484C:
	mov eax, [ecx+0Ch]
	not eax
	and edi, eax
	jmp loc_48477D

loc_484858:
	mov edi, [esi]
	test bl, 40h
	jz loc_484866
	mov eax, [ecx+0Ch]
	not eax
	and edi, eax

loc_484866:
	cmp esi, [ecx]
	jz loc_4847A9
	mov esi, [esi+24h]
	jmp loc_484783

loc_484876:
	cmp esi, [ecx]
	jz loc_484892
	mov edi, [esi]
	test bl, 40h
	jnz loc_484889

loc_484881:
	mov esi, [esi+24h]
	jmp loc_48477D

loc_484889:
	mov eax, [ecx+0Ch]
	not eax
	and edi, eax
	jmp loc_484881

loc_484892:
	mov eax, ebx
	call sub_4A4508
	test eax, eax
	jz loc_484728
	mov edx, [ecx+4]
	mov eax, [ecx]
	call sub_4A4358
	jmp loc_48476C
;sub_484510 endp

sub_4848B0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	test eax, eax
	jz loc_4848E6
	xor ebx, ebx

loc_4848BA:
	mov edx, dword dword_563D84[ebx]
	test edx, edx
	jz loc_4848DB
	mov eax, dword dword_563D80[ebx]

loc_4848CA:
	mov eax, [eax+20h]
	cmp ecx, [eax]
	jz loc_4848D5
	cmp eax, edx
	jnz loc_4848CA

loc_4848D5:
	test byte [eax+19h], 80h
	jz loc_4848E8

loc_4848DB:
	add ebx, 18h
	cmp ebx, 180h
	jl loc_4848BA

loc_4848E6:
	xor eax, eax

loc_4848E8:
	pop ecx
	pop ebx
	ret
;sub_4848B0 endp

sub_4848EC: ;SUBROUTINE
	push edx
	mov edx, 1
	call sub_4848B0
	pop edx
	ret
;sub_4848EC endp

sub_4848FC: ;SUBROUTINE
	push edx
	mov edx, 1
	call sub_4848B0
	mov edx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C0
	mov eax, edx
	call sub_484948
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	pop edx
	ret
;sub_4848FC endp

sub_484928: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C0
	mov eax, edx
	call sub_484948
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	pop edx
	ret
;sub_484928 endp

sub_484948: ;SUBROUTINE
	push edx
	mov edx, eax
	test eax, eax
	jz loc_484989
	push ecx
	push ebx
	mov ebx, [eax+24h]
	mov ecx, [eax+20h]
	mov [ebx+20h], ecx
	mov ebx, ecx
	mov ecx, [eax+24h]
	mov [ebx+24h], ecx
	mov ecx, [eax+18h]
	and ecx, 0F00h
	cmp ecx, 300h
	jz loc_48498B

loc_484973:
	mov eax, dword [dword_563F04]
	mov dword [edx], 0
	mov dword [dword_563F04], edx
	mov [edx+20h], eax
	pop ebx
	pop ecx

loc_484989:
	pop edx
	ret

loc_48498B:
	mov eax, [eax]
	call free_
	jmp loc_484973
;sub_484948 endp

sub_484A00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, dword [dword_4DB200]
	mov ecx, eax
	mov edx, eax
	and edx, 0F00h
	sar edx, 8
	lea eax, 0[edx*4]
	sub eax, edx
	mov ebp, dword_563D80
	shl eax, 3
	add ebp, eax
	and ecx, 7
	mov eax, [ebp+0]
	xor edi, edi
	mov edx, [ebp+4]
	mov eax, [eax+20h]
	xor ebx, ebx
	cmp eax, edx
	jz loc_484A69

loc_484A40:
	test byte [eax+18h], 8
	jz loc_484A61
	mov edx, [eax+18h]
	and edx, 7
	cmp edx, ecx
	jbe loc_484A82

loc_484A50:
	mov edi, eax
	mov edx, esi
	mov ebx, [eax+1Ch]
	mov ecx, [eax+18h]
	sub edx, ebx
	and ecx, 7
	mov ebx, edx

loc_484A61:
	mov eax, [eax+20h]
	cmp eax, [ebp+4]
	jnz loc_484A40

loc_484A69:
	mov dword [dword_4DB200], esi
	test edi, edi
	jnz loc_484A8F
	xor eax, eax
	mov esi, dword [dword_4DB200]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_484A82:
	jnz loc_484A61
	mov edx, esi
	sub edx, [eax+1Ch]
	cmp edx, ebx
	jnb loc_484A50
	jmp loc_484A61

loc_484A8F:
	mov eax, edi
	call sub_484948
	mov eax, 1
	mov esi, dword [dword_4DB200]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_484A00 endp

sub_484B14: ;SUBROUTINE
	cmp dword [dword_4DB208], 0
	jnz loc_484B20
	xor eax, eax
	ret

loc_484B20:
	xor eax, eax
	call sub_484B64
	cmp eax, dword [dword_563F0C]
	jge loc_484B34
	mov dword [dword_563F0C], eax

loc_484B34:
	mov eax, dword [dword_563F0C]
	ret
;sub_484B14 endp

sub_484B3C: ;SUBROUTINE
	xor eax, eax
	push edx
	mov edx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C0
	mov eax, edx
	call sub_484B64
	mov edx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	mov eax, edx
	pop edx
	ret
;sub_484B3C endp

sub_484B64: ;SUBROUTINE
	push edx
	push esi
	push ebp
	and eax, 0F00h
	cmp eax, 300h
	jz loc_484BC9
	sar eax, 8
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov esi, dword_563D80
	shl eax, 3
	mov edx, dword [dword_4DB204]
	add esi, eax
	test edx, edx
	jnz loc_484BD2

loc_484B91:
	push edi
	push ecx
	push ebx
	mov ecx, [esi]
	mov edi, [esi+4]
	xor ebx, ebx
	mov eax, [ecx+20h]
	mov edi, [edi+20h]

loc_484BA1:
	mov edx, [eax]
	sub edx, [ecx]
	mov ebp, [ecx+10h]
	mov ecx, [esi+14h]
	sub edx, ebp
	sub edx, ecx
	cmp edx, ebx
	jle loc_484BB5
	mov ebx, edx

loc_484BB5:
	mov ecx, eax
	mov eax, [eax+20h]
	cmp eax, edi
	jnz loc_484BA1
	mov edx, ebx
	pop ebx
	pop ecx
	pop edi

loc_484BC3:
	mov eax, edx
	pop ebp
	pop esi
	pop edx
	ret

loc_484BC9:
	call sub_4A47B0
	mov edx, eax
	jmp loc_484BC3

loc_484BD2:
	mov edx, [esi]
	mov eax, [esi+4]
	call sub_4A4248
	jmp loc_484B91
;sub_484B64 endp

sub_484D40: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, edx
	mov dword [dword_563F04], eax
	dec ecx
	xor edx, edx
	test ecx, ecx
	jle loc_484D60

loc_484D50:
	lea ebx, [eax+28h]
	inc edx
	mov [eax+20h], ebx
	mov eax, ebx
	cmp edx, ecx
	jl loc_484D50

loc_484D60:
	mov dword [eax+20h], 0
	pop ecx
	pop ebx
	ret
;sub_484D40 endp

sub_484D6C: ;SUBROUTINE
	push edx
	mov edx, dword [dword_563F04]
	mov dword [dword_563F04], eax
	mov [eax+20h], edx
	pop edx
	ret
;sub_484D6C endp

sub_484D94: ;SUBROUTINE
	push edx
	mov edx, 1
	call sub_4848B0
	mov eax, [eax+14h]
	pop edx
	ret
;sub_484D94 endp

sub_484DA4: ;SUBROUTINE
	mov eax, [eax+14h]
	ret
;sub_484DA4 endp

sub_484DA8: ;SUBROUTINE
	add eax, 4
	ret
;sub_484DA8 endp

sub_484E40: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	xor esi, esi

loc_484E49:
	mov edx, dword dword_563D84[esi]
	test edx, edx
	jz loc_484E74
	mov ebx, edx
	mov eax, dword dword_563D80[esi]

loc_484E5B:
	mov eax, [eax+20h]
	mov edi, [eax]
	cmp ecx, edi
	jb loc_484E87
	mov ebp, [eax+14h]
	lea edx, [edi+ebp]
	cmp ecx, edx
	jnb loc_484E87

loc_484E6E:
	test byte [eax+19h], 80h
	jz loc_484E81

loc_484E74:
	add esi, 18h
	cmp esi, 180h
	jl loc_484E49
	xor eax, eax

loc_484E81:
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_484E87:
	cmp eax, ebx
	jnz loc_484E5B
	jmp loc_484E6E
;sub_484E40 endp

sub_484EA0: ;SUBROUTINE
	push edx
	xor edx, edx
	call sub_484E40
	pop edx
	ret
;sub_484EA0 endp

off_484EB0: dd loc_484F34
	dd loc_484FE3 ; jump table for switch statement
	dd loc_484FD8
	dd loc_484FCD
	dd loc_484FC2
	dd loc_484FB7
	dd loc_484FAC
	dd loc_484FA1
	dd loc_484F96
	dd loc_484F8B
	dd loc_484F80
	dd loc_484F75
	dd loc_484F6A
	dd loc_484F5F
	dd loc_484F54
	dd loc_484F49

sub_484EF0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov eax, ecx
	test ecx, ecx
	jz loc_484F0E
	sub ebx, ecx

loc_484EFF:
	dec eax
	cmp eax, 0FFFFFFFFh
	jz loc_484F0E
	inc edi
	mov dl, [esi]
	inc esi
	mov [edi-1], dl
	jmp loc_484EFF

loc_484F0E:
	mov ebp, ebx
	mov ecx, ebx
	mov edx, esi
	sar ecx, 2
	mov eax, edi
	mov esi, ecx
	sar ebp, 6
	and esi, 0Fh
	and ebx, 3
	cmp esi, 0Fh ; switch 16 cases
	ja loc_484FF3 ; jumptable 00484F2D default case
	jmp off_484EB0[esi*4] ; switch jump

loc_484F34:
	dec ebp ; jumptable 00484F2D case 0
	cmp ebp, 0FFFFFFFFh
	jz loc_484FF3 ; jumptable 00484F2D default case
	add eax, 4
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484F49:
	add eax, 4 ; jumptable 00484F2D case 15
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F54:
	add eax, 4 ; jumptable 00484F2D case 14
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F5F:
	add eax, 4 ; jumptable 00484F2D case 13
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F6A:
	add eax, 4 ; jumptable 00484F2D case 12
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F75:
	add eax, 4 ; jumptable 00484F2D case 11
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484F80:
	add eax, 4 ; jumptable 00484F2D case 10
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F8B:
	add eax, 4 ; jumptable 00484F2D case 9
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484F96:
	add eax, 4 ; jumptable 00484F2D case 8
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484FA1:
	add eax, 4 ; jumptable 00484F2D case 7
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484FAC:
	add eax, 4 ; jumptable 00484F2D case 6
	mov ecx, [edx]
	add edx, 4
	mov [eax-4], ecx

loc_484FB7:
	add eax, 4 ; jumptable 00484F2D case 5
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484FC2:
	add eax, 4 ; jumptable 00484F2D case 4
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484FCD:
	add eax, 4 ; jumptable 00484F2D case 3
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484FD8:
	add eax, 4 ; jumptable 00484F2D case 2
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi

loc_484FE3:
	add eax, 4 ; jumptable 00484F2D case 1
	mov esi, [edx]
	add edx, 4
	mov [eax-4], esi
	jmp loc_484F34 ; jumptable 00484F2D case 0

loc_484FF3:
	xor esi, esi ; jumptable 00484F2D default case

loc_484FF5:
	dec ebx
	cmp ebx, 0FFFFFFFFh
	jz loc_485008
	lea ecx, [edx+esi]
	lea edi, [eax+esi]
	mov cl, [ecx]
	inc esi
	mov [edi], cl
	jmp loc_484FF5

loc_485008:
	pop ebp
	pop edi
	pop esi
	ret
;sub_484EF0 endp

sub_48500C: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	cmp ebx, 4
	jge loc_48502A

loc_485017:
	add eax, ebx
	add edx, ebx

loc_48501B:
	dec ebx
	cmp ebx, 0FFFFFFFFh
	jz loc_48504B
	dec edx
	mov cl, [eax-1]
	dec eax
	mov [edx], cl
	jmp loc_48501B

loc_48502A:
	cmp edx, eax
	jbe loc_485035
	lea ecx, [eax+ebx]
	cmp edx, ecx
	jb loc_485017

loc_485035:
	mov ecx, eax
	mov esi, 4
	and ecx, 3
	sub esi, ecx
	mov ecx, esi
	and ecx, 3
	call sub_484EF0

loc_48504B:
	pop esi
	pop ecx
	ret
;sub_48500C endp

sub_485050: ;SUBROUTINE
	push ecx
	mov ecx, edx
	sar ebx, 1
	mov edx, eax
	mov eax, ecx
	call sub_48500C
	pop ecx
	ret
;sub_485050 endp

;	Attributes: library function

bcopy_: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov edx, eax
	mov eax, ecx
	call sub_48500C
	pop ecx
	ret
;bcopy_ endp

sub_485070: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov edx, eax
	add ebx, ebx
	mov eax, ecx
	call sub_48500C
	pop ecx
	ret
;sub_485070 endp

sub_485080: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	mov esi, edx
	mov edx, ebx
	shl ebx, 2
	sub ebx, edx
	mov edx, eax
	mov eax, esi
	call sub_48500C
	pop esi
	pop ecx
	ret
;sub_485080 endp

sub_48509C: ;SUBROUTINE
	push ecx
	mov ecx, edx
	shl ebx, 2
	mov edx, eax
	mov eax, ecx
	call sub_48500C
	pop ecx
	ret
;sub_48509C endp

sub_4850B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	mov ecx, off_4DB21C
	call sub_4A10BC
	and word [esi+0Ch], 0F000h
	and edi, 0FFFh
	or [esi+0Ch], edi
	mov bx, [esi+0Eh]
	and ebx, 0FFFFF000h
	and ebp, 0FFFh
	mov [esi+0Eh], bx
	shl ebp, 10h
	or [esi+0Ch], ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4850B0 endp

sub_485160: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp byte [byte_4DDA74], 0
	jnz loc_485173
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_485173:
	mov eax, edx
	call sub_486314
	test eax, eax
	jnz loc_48519A
	mov eax, dword dword_59C5B0[edx*8]
	cmp dword [eax], 6C4B4E42h
	jnz loc_4851A6
	cmp byte [eax+4], 1
	ja loc_4851A1
	mov eax, 0FFFFFFF5h
	pop edx
	ret

loc_48519A:
	mov eax, 0FFFFFFF8h
	pop edx
	ret

loc_4851A1:
	mov eax, [eax+8]
	pop edx
	ret

loc_4851A6:
	mov eax, 0FFFFFFF9h
	pop edx
	ret
;sub_485160 endp

sub_485218: ;SUBROUTINE
	push esi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov [esp+4], edx
	mov ah, byte [byte_4DDA74]
	mov ebp, 80h
	test ah, ah
	jz loc_485241
	test esi, esi
	jnz loc_485248
	mov eax, 0FFFFFFF8h

loc_48523B:
	add esp, 10h
	pop ebp
	pop esi
	ret

loc_485241:
	mov eax, 0FFFFFFF6h
	jmp loc_48523B

loc_485248:
	mov eax, edx
	call sub_485160
	test eax, eax
	jl loc_48523B
	push edi
	push ecx
	push ebx
	mov ecx, edx
	mov edx, dword dword_59C5B0[edx*8]
	mov [esp+0Ch], edx
	mov ebx, eax
	mov eax, [esp+0Ch]
	mov edx, esi
	call sub_48A980
	mov edx, dword dword_59C5B0[ecx*8]
	cmp byte [edx+4], 1
	jb loc_485281
	movzx ebp, word [edx+6]

loc_485281:
	cmp byte [edx+4], 2
	jb loc_4852CF
	mov edi, edx
	mov [esp+14h], esi

loc_48528D:
	test ebp, ebp
	jle loc_4852B9
	shl ebp, 2
	xor eax, eax

loc_485296:
	cmp byte [edx+4], 2
	jb loc_4852D5
	lea ecx, [edi+eax]
	mov ecx, [ecx+0Ch]
	test ecx, ecx
	jz loc_4852B2
	sub ecx, edi
	mov ebx, [esp+14h]
	add ecx, esi
	mov [ebx+eax+0Ch], ecx

loc_4852B2:
	add eax, 4
	cmp eax, ebp
	jl loc_485296

loc_4852B9:
	mov eax, [esp+10h]
	mov dword dword_59C5B0[eax*8], esi
	xor eax, eax
	pop ebx
	pop ecx
	pop edi
	add esp, 10h
	pop ebp
	pop esi
	ret

loc_4852CF:
	mov [esp+18h], esi
	jmp loc_48528D

loc_4852D5:
	lea ecx, [edx+eax]
	mov ecx, [ecx+8]
	test ecx, ecx
	jz loc_4852B2
	sub ecx, edx
	lea ebx, [esi+ecx]
	mov ecx, [esp+18h]
	mov [ecx+eax+8], ebx
	jmp loc_4852B2
;sub_485218 endp

sub_485364: ;SUBROUTINE
	push ebx
	mov ebx, edx
	call sub_48637C
	pop ebx
	ret
;sub_485364 endp

sub_485380: ;SUBROUTINE
	test eax, eax
	jnz loc_48538A
	mov eax, 0FFFFFFF8h
	ret

loc_48538A:
	mov dword [eax], 0FFFFFFFFh
	mov byte [eax+4], 0FFh
	mov byte [eax+5], 3Ch
	mov byte [eax+6], 7Fh
	mov byte [eax+7], 40h
	mov byte [eax+8], 7Fh
	mov byte [eax+9], 40h
	mov byte [eax+0Ah], 7Fh
	mov byte [eax+0Bh], 0
	mov word [eax+0Ch], 0
	mov word [eax+0Eh], 0
	xor eax, eax
	ret
;sub_485380 endp

sub_4853C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov ah, byte [byte_4DDA74]
	mov ecx, 80h
	test ah, ah
	jz loc_4853E1
	test edx, edx
	jnz loc_4853EA

loc_4853D8:
	mov eax, 0FFFFFFF8h
	pop edx
	pop ecx
	pop ebx
	ret

loc_4853E1:
	mov eax, 0FFFFFFF6h
	pop edx
	pop ecx
	pop ebx
	ret

loc_4853EA:
	mov eax, [edx+1]
	sar eax, 18h
	call sub_486314
	test eax, eax
	jl loc_4853D8
	mov eax, [edx+1]
	sar eax, 18h
	mov eax, dword dword_59C5B0[eax*8]
	cmp byte [eax+4], 1
	jb loc_485412
	xor ecx, ecx
	mov cx, [eax+6]

loc_485412:
	mov ebx, [edx]
	test ebx, ebx
	jl loc_4853D8
	cmp ecx, ebx
	jle loc_4853D8
	cmp byte [eax+4], 2
	jb loc_485431
	mov ecx, [edx]
	mov eax, [eax+ecx*4+0Ch]
	call sub_4A5000
	pop edx
	pop ecx
	pop ebx
	ret

loc_485431:
	mov ecx, [edx]
	mov eax, [eax+ecx*4+8]
	call sub_4A5000
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4853C0 endp

sub_485440: ;SUBROUTINE
	cmp edx, [eax+4]
	jnz loc_48544C
	mov eax, 1
	ret

loc_48544C:
	xor eax, eax
	ret
;sub_485440 endp

sub_485450: ;SUBROUTINE
	push ecx
	push edx
	mov edx, dword [dword_563F10]
	test edx, edx
	jz loc_485490
	mov ecx, [edx+18h]
	test ecx, ecx
	jz loc_48546A
	mov dword [ecx+20h], 0

loc_48546A:
	mov edx, dword [dword_563F10]
	mov edx, [edx]
	mov eax, dword_563F14
	call sub_489E20
	xor edx, edx

loc_48547E:
	mov eax, dword [dword_563F10]
	cmp edx, [eax]
	jz loc_485490
	test ecx, ecx
	jz loc_485490
	cmp ecx, [eax+18h]
	jz loc_485493

loc_485490:
	pop edx
	pop ecx
	ret

loc_485493:
	mov eax, edx
	call sub_489B9C
	jmp loc_48547E
;sub_485450 endp

sub_48549C: ;SUBROUTINE
	push ecx
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BC4C
	test eax, eax
	ja loc_4854B5

loc_4854AE:
	xor eax, eax
	pop ecx
	ret

loc_4854B5:
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BB40
	mov ecx, eax
	test eax, eax
	jz loc_4854AE

loc_4854C8:
	mov edx, [ecx+18h]
	test edx, edx
	jz loc_4854D9
	mov eax, dword [dword_563F10]
	cmp edx, [eax+14h]
	jnz loc_485505

loc_4854D9:
	mov eax, dword [dword_563F10]
	mov edx, ecx
	add eax, 1Ch

loc_4854E3:
	call sub_48BA80
	mov eax, [ecx+4]
	call dword [ecx+24h]
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BB40
	mov ecx, eax
	test eax, eax
	jnz loc_4854C8
	xor eax, eax
	pop ecx
	ret

loc_485505:
	add eax, 38h
	mov edx, ecx
	jmp loc_4854E3
;sub_48549C endp

sub_48550C: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	mov edx, dword [dword_563F10]
	lea esi, [eax+eax]
	test edx, edx
	jnz loc_4855FD

loc_485521:
	lea eax, 0[esi*4]
	add eax, esi
	shl eax, 3
	lea ecx, [eax+8Ch]
	mov eax, aAsyncreader ; "asyncreader"
	mov edx, ecx
	call sub_484498
	mov edx, ecx
	mov dword [dword_563F10], eax
	call sub_48A01C
	mov eax, dword [dword_563F10]
	call sub_4848EC
	mov ecx, dword [dword_563F10]
	xor ebx, ebx
	xor edx, edx
	mov [ecx+14h], eax
	lea eax, [ecx+1Ch]
	call sub_48BA2C
	mov eax, dword [dword_563F10]
	xor ebx, ebx
	xor edx, edx
	add eax, 38h
	call sub_48BA2C
	mov eax, dword [dword_563F10]
	xor ebx, ebx
	xor edx, edx
	add eax, 54h
	call sub_48BA2C
	mov eax, dword [dword_563F10]
	xor ebx, ebx
	xor edx, edx
	add eax, 70h
	call sub_48BA2C
	mov ecx, dword [dword_563F10]
	add ecx, 8Ch

loc_4855A9:
	mov eax, dword [dword_563F10]
	mov edx, ecx
	add eax, 1Ch
	call sub_48BA80
	add ecx, 28h
	dec esi
	jnz loc_4855A9
	mov ebx, 3
	mov edx, 4
	mov eax, sub_48549C
	mov ecx, 0FFFFFFFFh
	call sub_483DD0
	push dword_563F14
	mov ebx, 2
	mov eax, sub_485C38
	xor edx, edx
	call sub_489AE0
	xor ecx, ecx
	mov eax, dword [dword_563F10]
	mov ebx, [eax]
	cmp ecx, ebx
	jz loc_485607
	pop esi
	pop ecx
	ret

loc_4855FD:
	call sub_48561C
	jmp loc_485521

loc_485607:
	mov eax, ebx
	call sub_489B9C
	mov eax, dword [dword_563F10]
	mov ebx, [eax]
	cmp ecx, ebx
	jz loc_485607
	pop esi
	pop ecx
	ret
;sub_48550C endp

sub_48561C: ;SUBROUTINE
	push edx
	push ebp
	mov edx, dword [dword_563F10]
	test edx, edx
	jnz loc_48562B
	pop ebp
	pop edx
	ret

loc_48562B:
	mov dword [edx+4], 1
	call sub_485450
	xor edx, edx

loc_485639:
	mov eax, dword [dword_563F10]
	cmp edx, [eax]
	jz loc_48564B
	mov eax, edx
	call sub_489B9C
	jmp loc_485639

loc_48564B:
	push edi
	push esi
	push ecx
	push ebx
	add eax, 70h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jz loc_485699

loc_48565D:
	mov ebx, [edx+1Ch]
	test ebx, ebx
	jz loc_48566B
	mov eax, ebx
	call sub_4848FC

loc_48566B:
	mov esi, [edx+18h]
	test esi, esi
	jz loc_485679
	mov eax, esi
	call sub_484928

loc_485679:
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BA80
	mov eax, dword [dword_563F10]
	add eax, 70h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jnz loc_48565D

loc_485699:
	mov eax, dword [dword_563F10]
	add eax, 38h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jz loc_4856E8

loc_4856AC:
	mov edi, [edx+1Ch]
	test edi, edi
	jz loc_4856BA
	mov eax, edi
	call sub_4848FC

loc_4856BA:
	mov ebp, [edx+18h]
	test ebp, ebp
	jz loc_4856C8
	mov eax, ebp
	call sub_484928

loc_4856C8:
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BA80
	mov eax, dword [dword_563F10]
	add eax, 38h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jnz loc_4856AC

loc_4856E8:
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jz loc_485737

loc_4856FB:
	mov ebx, [edx+1Ch]
	test ebx, ebx
	jz loc_485709
	mov eax, ebx
	call sub_4848FC

loc_485709:
	mov esi, [edx+18h]
	test esi, esi
	jz loc_485717
	mov eax, esi
	call sub_484928

loc_485717:
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BA80
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BAFC
	mov edx, eax
	test eax, eax
	jnz loc_4856FB

loc_485737:
	mov eax, sub_48549C
	call sub_483E64
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BA6C
	mov eax, dword [dword_563F10]
	add eax, 38h
	call sub_48BA6C
	mov eax, dword [dword_563F10]
	add eax, 70h
	call sub_48BA6C
	mov eax, dword [dword_563F10]
	add eax, 54h
	call sub_48BA6C
	mov eax, dword [dword_563F10]
	mov edx, [eax+8]
	test edx, edx
	jz loc_485788
	mov eax, edx
	call sub_487950

loc_485788:
	mov eax, dword [dword_563F10]
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_563F10], ecx
	pop ebx
	pop ecx
	pop esi
	pop edi
	pop ebp
	pop edx
	ret
;sub_48561C endp

sub_485930: ;SUBROUTINE
	push esi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BAFC
	mov esi, eax
	mov [esp], eax
	test eax, eax
	jz loc_4859BA
	push edx
	mov dword [esi+8], 0
	mov dword [esi+0Ch], 0
	mov dword [esi+10h], 0
	mov dword [esi+20h], 2
	mov dword [esi+24h], 0
	mov eax, dword [dword_4DB2E8]
	mov dword [esi+18h], 0
	mov edx, dword [dword_4DABE8]
	mov [esi+4], eax
	inc eax
	mov [esi+14h], edx
	mov dword [dword_4DB2E8], eax
	test ebp, ebp
	jnz loc_4859C0
	mov [esi+1Ch], ebp

loc_485996:
	mov eax, dword [dword_563F10]
	mov edx, [esp+4]
	add eax, 70h
	call sub_48BA80
	mov edx, dword [dword_563F10]
	mov edx, [edx]
	mov eax, dword_563F14
	call sub_489E20
	pop edx

loc_4859BA:
	add esp, 4
	pop ebp
	pop esi
	ret

loc_4859C0:
	push edi
	push ecx
	push ebx
	mov edi, ebp
	mov ebx, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov eax, aAsyncfile ; "asyncfile"
	lea edx, [ecx+1]
	call sub_484498
	mov edi, eax
	mov [esi+1Ch], eax
	mov esi, ebp
	push edi

loc_4859E6:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_4859FE
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_4859E6

loc_4859FE:
	pop edi
	pop ebx
	pop ecx
	pop edi
	jmp loc_485996
;sub_485930 endp

sub_485A10: ;SUBROUTINE
	push esi
	push edi
	sub esp, 4
	mov esi, eax
	mov [esp], edx
	mov edi, ebx
	mov edx, ecx
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	call sub_48BAFC
	mov ecx, eax
	test eax, eax
	jnz loc_485A37
	add esp, 4
	pop edi
	pop esi
	ret

loc_485A37:
	mov eax, dword [dword_4DB2E8]
	mov [ecx+4], eax
	inc eax
	mov ebx, dword [dword_563F10]
	mov dword [dword_4DB2E8], eax
	mov eax, [ebx+0Ch]
	mov dword [ecx+20h], 3
	mov dword [ecx+18h], 0
	mov dword [ecx+1Ch], 0
	add eax, esi
	mov [ecx+24h], edx
	mov [ecx+0Ch], eax
	mov eax, [esp]
	mov [ecx+8], eax
	mov eax, dword [dword_4DABE8]
	mov edx, ecx
	mov [ecx+14h], eax
	lea eax, [ebx+70h]
	mov [ecx+10h], edi
	call sub_48BA80
	mov edx, dword [dword_563F10]
	mov edx, [edx]
	mov eax, dword_563F14
	call sub_489E20
	mov eax, [ecx+4]
	add esp, 4
	pop edi
	pop esi
	ret
;sub_485A10 endp

sub_485AA4: ;SUBROUTINE
	push ecx
	xor ecx, ecx
	call sub_485A10
	pop ecx
	ret
;sub_485AA4 endp

sub_485BDC: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, dword [dword_563F10]
	mov edx, sub_485440
	add ecx, 38h
	mov ebx, eax
	mov eax, ecx
	call sub_48BE10
	mov ecx, eax
	test eax, eax
	jnz loc_485C00
	pop edx
	pop ecx
	pop ebx
	ret

loc_485C00:
	mov eax, dword [dword_563F10]
	mov edx, ecx
	add eax, 1Ch
	call sub_48BA80
	cmp dword [ecx+20h], 0
	jz loc_485C1E
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_485C1E:
	mov eax, 0FFFFFFFFh
	pop edx
	pop ecx
	pop ebx
	ret
;sub_485BDC endp

off_485C28: dd loc_485CE7
	dd loc_485E9E ; jump table for switch statement
	dd loc_485F33
	dd loc_485FDB

sub_485C38: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 108h
	call sub_489E0C
	mov edx, eax
	mov eax, dword [dword_563F10]
	mov [eax], edx
	mov dword [eax+18h], 0
	mov dword [eax+4], 0

loc_485C60:
	mov eax, dword [dword_563F10]
	cmp dword [eax+4], 0
	jz loc_485CA8
	mov ecx, [eax+8]
	test ecx, ecx
	jnz loc_486026

loc_485C76:
	mov eax, dword [dword_563F10]
	mov dword [eax+8], 0
	mov dword [eax+18h], 0
	mov eax, [eax]
	call CloseHandleCaller
	mov eax, dword [dword_563F10]
	mov dword [eax], 0
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_485CA8:
	add eax, 70h
	call sub_48BB40
	mov ebp, eax
	mov [esp+104h], eax
	test eax, eax
	jz loc_486015
	mov eax, dword [dword_563F10]
	mov [eax+18h], ebp
	mov edx, [ebp+20h]
	dec edx
	cmp edx, 3 ; switch 4 cases
	jbe loc_485CE0
	mov eax, dword [dword_563F10] ; jumptable 00485CE0 default case
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_485CE0:
	jmp off_485C28[edx*4] ; switch jump

loc_485CE7:
	mov edi, esp ; jumptable 00485CE0 case 0
	mov esi, [ebp+1Ch]
	lea edx, [esp+100h]
	push edi

loc_485CF4:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_485D0C
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_485CF4

loc_485D0C:
	pop edi
	mov eax, [ebp+1Ch]
	lea ecx, [ebp+10h]
	call sub_4848FC
	lea ebx, [ebp+0Ch]
	mov eax, esp
	mov dword [ebp+1Ch], 0
	call sub_4877B4
	mov dword [ebp+18h], 0
	mov ecx, [esp+100h]
	test ecx, ecx
	jz loc_485E74
	mov eax, [ebp+10h]
	mov edx, eax
	mov ecx, 1C2h
	sar edx, 1Fh
	idiv ecx
	mov ebx, [ebp+8]
	lea ecx, [eax+190h]
	test ebx, ebx
	jnz loc_485E64
	mov eax, esp
	mov ebx, [ebp+14h]
	mov edx, [ebp+10h]
	call sub_48447C
	mov [ebp+18h], eax
	mov eax, [eax]
	mov [ebp+8], eax

loc_485D74:
	mov eax, ecx
	call sub_4A5068
	call sub_4A513C
	mov eax, [esp+100h]
	mov edx, [esp+104h]
	call sub_459B40
	mov eax, [esp+100h]
	mov edx, [edx+0Ch]
	mov ebx, [esp+104h]
	call sub_487968
	mov edx, [esp+104h]
	mov eax, [esp+100h]
	mov ebx, [ebx+10h]
	mov edx, [edx+8]
	call sub_487958
	test eax, eax
	jnz loc_485DD4
	mov eax, [esp+104h]
	mov dword [eax+20h], 0

loc_485DD4:
	mov eax, [esp+100h]
	call sub_459B00
	mov eax, [esp+100h]
	xor esi, esi
	call sub_487950
	mov eax, [esp+104h]
	mov [esp+100h], esi
	cmp dword [eax+20h], 0
	jnz loc_485E32
	mov edx, [esp+104h]
	mov eax, dword [dword_563F10]
	mov edx, [edx+18h]
	cmp edx, [eax+14h]
	jz loc_485E32
	mov eax, [esp+104h]
	mov eax, [eax+18h]
	call sub_484928
	mov eax, [esp+104h]
	mov [eax+18h], esi
	mov [eax+8], esi

loc_485E32:
	mov eax, [esp+104h]
	cmp dword [eax+24h], 0
	jz loc_485E79
	mov eax, dword [dword_563F10]
	mov edx, [esp+104h]
	add eax, 54h
	call sub_48BA80
	mov eax, dword [dword_563F10]
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_485E64:
	mov eax, dword [dword_563F10]
	mov eax, [eax+14h]
	mov [ebp+18h], eax
	jmp loc_485D74

loc_485E74:
	mov [ebp+8], ecx
	jmp loc_485E32

loc_485E79:
	mov eax, dword [dword_563F10]
	mov edx, [esp+104h]
	add eax, 38h
	call sub_48BA80
	mov eax, dword [dword_563F10]
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_485E9E:
	mov ebp, [eax+8] ; jumptable 00485CE0 case 1
	test ebp, ebp
	jz loc_485EAC
	mov eax, ebp
	call sub_487950

loc_485EAC:
	mov eax, dword [dword_563F10]
	mov dword [eax+8], 0
	mov eax, [esp+104h]
	cmp dword [eax+1Ch], 0
	jz loc_485F0E
	mov eax, 190h
	call sub_4A5068
	call sub_4A513C
	mov eax, dword [dword_563F10]
	lea ecx, [eax+10h]
	lea ebx, [eax+0Ch]
	lea edx, [eax+8]
	mov eax, [esp+104h]
	mov eax, [eax+1Ch]
	call sub_4877BC
	mov eax, [esp+104h]
	mov eax, [eax+1Ch]
	call sub_4848FC
	mov eax, [esp+104h]
	mov dword [eax+1Ch], 0

loc_485F0E:
	mov eax, dword [dword_563F10]
	mov edx, [esp+104h]
	add eax, 1Ch
	call sub_48BA80
	mov eax, dword [dword_563F10]
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_485F33:
	mov esi, [eax+8] ; jumptable 00485CE0 case 2
	test esi, esi
	jz loc_485FD6
	mov eax, [ebp+10h]
	mov edx, eax
	mov ecx, 1C2h
	sar edx, 1Fh
	idiv ecx
	add eax, 190h
	call sub_4A5068
	call sub_4A513C
	mov eax, dword [dword_563F10]
	mov eax, [eax+8]
	call sub_459B40
	mov eax, dword [dword_563F10]
	mov edx, [ebp+0Ch]
	mov eax, [eax+8]
	call sub_487968
	mov eax, dword [dword_563F10]
	mov ebx, [ebp+10h]
	mov edx, [ebp+8]
	mov eax, [eax+8]
	call sub_487958
	test eax, eax
	jnz loc_485F93
	mov [ebp+20h], eax

loc_485F93:
	mov eax, dword [dword_563F10]
	mov eax, [eax+8]
	call sub_459B00

loc_485FA0:
	mov eax, [esp+104h]
	cmp dword [eax+24h], 0
	jz loc_485E79
	mov eax, dword [dword_563F10]
	mov edx, [esp+104h]
	add eax, 54h
	call sub_48BA80
	mov eax, dword [dword_563F10]
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_485FD6:
	mov [ebp+20h], esi
	jmp loc_485FA0

loc_485FDB:
	mov ebx, [eax+8] ; jumptable 00485CE0 case 3
	test ebx, ebx
	jz loc_485FE9
	mov eax, ebx
	call sub_487950

loc_485FE9:
	mov eax, dword [dword_563F10]
	add eax, 1Ch
	mov edx, [esp+104h]
	mov dword [eax-14h], 0
	call sub_48BA80
	mov eax, dword [dword_563F10]
	mov dword [eax+18h], 0
	jmp loc_485C60

loc_486015:
	mov eax, dword [dword_563F10]
	mov eax, [eax]
	call sub_489E5C
	jmp loc_485C60

loc_486026:
	mov eax, ecx
	call sub_487950
	jmp loc_485C76
;sub_485C38 endp

sub_486040: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp byte [byte_4DDA74], 0
	jnz loc_486053
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_486053:
	call sub_4A5360
	mov eax, edx
	call sub_4A576C
	test eax, eax
	jl loc_48606E
	xor edx, edx
	call sub_4A5374
	mov eax, edx
	pop edx
	ret

loc_48606E:
	mov edx, 1
	call sub_4A5374
	mov eax, edx
	pop edx
	ret
;sub_486040 endp

sub_486080: ;SUBROUTINE
	push ecx
	push esi
	push ebp
	mov ecx, eax
	mov esi, edx
	cmp byte [byte_4DDA74], 0
	jz loc_4860A5
	cmp ebx, 7Fh
	jg loc_48609A
	cmp ebx, 0FFFFFFFFh
	jge loc_4860AC

loc_48609A:
	mov edx, 0FFFFFFF8h

loc_48609F:
	mov eax, edx
	pop ebp
	pop esi
	pop ecx
	ret

loc_4860A5:
	mov edx, 0FFFFFFF6h
	jmp loc_48609F

loc_4860AC:
	call sub_4A5360
	mov eax, ecx
	call sub_4A576C
	test eax, eax
	jl loc_48612D
	lea edx, 0[eax*4]
	sub edx, eax
	mov ecx, dword_59BFB0
	shl edx, 5
	add ecx, edx
	test esi, esi
	jle loc_48613D

loc_4860D7:
	push edi
	movzx edi, byte [ecx+3Bh]
	test edi, edi
	jz loc_486144
	mov ecx, dword_59BFB0
	lea ebp, [ecx+600h]

loc_4860EB:
	xor edx, edx
	mov dl, [ecx+3Bh]
	cmp edx, edi
	jnz loc_486118
	cmp byte [ecx+0Ch], 1
	jnz loc_486118
	cmp dword [ecx], 0
	jl loc_486118
	mov eax, ebx
	shl eax, 10h
	mov [ecx+1Ch], eax
	mov edx, eax
	mov eax, [ecx+20h]
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov [ecx+18h], eax

loc_486118:
	add ecx, 60h
	cmp ecx, ebp
	jnz loc_4860EB
	call sub_4A5374
	xor edx, edx
	pop edi
	mov eax, edx
	pop ebp
	pop esi
	pop ecx
	ret

loc_48612D:
	call sub_4A5374
	mov edx, 0FFFFFFF8h
	mov eax, edx
	pop ebp
	pop esi
	pop ecx
	ret

loc_48613D:
	mov esi, 1
	jmp loc_4860D7

loc_486144:
	shl ebx, 10h
	mov [ecx+1Ch], ebx
	mov edx, ebx
	mov ebx, [ecx+20h]
	sub edx, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov [ecx+18h], eax
	call sub_4A5374
	xor edx, edx
	pop edi
	mov eax, edx
	pop ebp
	pop esi
	pop ecx
	ret
;sub_486080 endp

sub_486170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0C1Ch
	mov [esp+0C10h], eax
	mov edx, 0FFFFFFFFh
	mov ecx, 7
	mov eax, 80h
	mov esi, 0FFFFFFFFh
	mov [esp+0C14h], edx
	mov ebx, edx
	mov [esp+0C08h], ecx
	xor ecx, ecx

loc_4861A9:
	add ecx, 0Ch
	mov [esp+ecx-0Ch], esi
	cmp ecx, 0C00h
	jnz loc_4861A9
	mov esi, [esp+0C10h]
	mov esi, dword dword_59C5B0[esi*8]
	cmp byte [esi+4], 1
	jb loc_4861D2
	xor eax, eax
	mov ax, [esi+6]

loc_4861D2:
	xor edi, edi
	mov ebp, esi
	mov [esp+0C18h], edi
	test eax, eax
	jle loc_48628B
	mov edx, [esp+0C10h]
	shl eax, 2
	shl edx, 3
	xor ecx, ecx
	mov [esp+0C00h], edx
	lea edx, [esi+8]
	mov [esp+0C0Ch], eax
	mov [esp+0C04h], edx
	mov edi, esi

loc_48620E:
	cmp byte [esi+4], 2
	jb loc_4862D0
	mov ebp, esi
	mov eax, [edi+0Ch]

loc_48621D:
	test eax, eax
	jz loc_48626B
	cmp byte [esi+4], 2
	jb loc_4862D8
	lea eax, [ecx+ebp]
	lea edx, [ebp+0Ch]
	mov ebx, [eax+0Ch]
	add edx, ecx
	add edx, ebx
	mov [eax+0Ch], edx

loc_48623B:
	mov eax, edx
	mov edx, [esp+0C00h]
	mov ebx, esp
	mov edx, dword dword_59C5B4[edx]
	call sub_4A4C20
	mov ebx, eax
	cmp eax, 7
	jz loc_486263
	mov dword [esp+0C08h], 8

loc_486263:
	test ebx, ebx
	jl loc_4862F1

loc_48626B:
	mov eax, [esp+0C18h]
	mov edx, [esp+0C0Ch]
	add edi, 4
	inc eax
	add ecx, 4
	mov [esp+0C18h], eax
	cmp ecx, edx
	jl loc_48620E

loc_48628B:
	mov edx, [esp+0C14h]
	cmp edx, 0FFFFFFFFh
	jle loc_4862B8
	xor ecx, ecx
	test edx, edx
	jl loc_4862B8
	mov edi, [esp+0C14h]

loc_4862A4:
	mov eax, [esp+0C10h]
	mov edx, ecx
	inc ecx
	call sub_4A4AD0
	cmp ecx, edi
	jle loc_4862A4
	nop

loc_4862B8:
	test ebx, ebx
	jl loc_486302
	mov eax, [esp+0C08h]
	add esp, 0C1Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4862D0:
	mov eax, [edi+8]
	jmp loc_48621D

loc_4862D8:
	lea eax, [esi+ecx]
	mov edx, [esp+0C04h]
	mov ebx, [eax+8]
	add edx, ecx
	add edx, ebx
	mov [eax+8], edx
	jmp loc_48623B

loc_4862F1:
	mov eax, [esp+0C18h]
	dec eax
	mov [esp+0C14h], eax
	jmp loc_48628B

loc_486302:
	mov eax, ebx
	add esp, 0C1Ch
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_486170 endp

sub_486314: ;SUBROUTINE
	test eax, eax
	jl loc_486327
	cmp eax, 0Ah
	jge loc_486327
	cmp dword dword_59C5B0[eax*8], 0
	jnz loc_48632D

loc_486327:
	mov eax, 0FFFFFFF8h
	ret

loc_48632D:
	xor eax, eax
	ret
;sub_486314 endp

sub_486330: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 0C00h
	mov esi, eax
	mov edi, edx
	mov edx, 0FFFFFFFFh
	xor ecx, ecx

loc_486345:
	add ecx, 0Ch
	mov [esp+ecx-0Ch], edx
	cmp ecx, 0C00h
	jnz loc_486345
	xor ecx, ecx
	test edi, edi
	jle loc_48636C

loc_48635A:
	mov ebx, esp
	mov edx, ecx
	mov eax, esi
	inc ecx
	call sub_4A48C0
	cmp ecx, edi
	jl loc_48635A

loc_48636C:
	xor eax, eax
	add esp, 0C00h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_486330 endp

sub_48637C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov eax, edx
	mov dl, byte [byte_4DDA74]
	mov edi, 0FFFFFFF7h
	test dl, dl
	jz loc_4863DC
	cmp dword [eax], 6C4B4E42h
	jnz loc_4863E6
	mov edx, dword_59C5B0
	mov ebp, dword [dword_59C5B0]
	xor ecx, ecx
	test ebp, ebp
	jz loc_4863BA

loc_4863AC:
	inc ecx
	add edx, 8
	cmp ecx, 0Ah
	jge loc_4863FB
	cmp dword [edx], 0
	jnz loc_4863AC

loc_4863BA:
	mov [edx], eax
	mov eax, ecx
	mov [edx+4], ebx
	call sub_486170
	test eax, eax
	jl loc_4863F0
	mov edx, sub_486404
	mov [esi], ecx
	mov dword [dword_4DDA8C], edx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4863DC:
	mov eax, 0FFFFFFF6h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4863E6:
	mov eax, 0FFFFFFF9h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4863F0:
	mov dword [edx], 0
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4863FB:
	mov eax, edi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48637C endp

sub_486404: ;SUBROUTINE
	push ecx
	push edx
	push esi
	mov ecx, eax
	mov ah, byte [byte_4DDA74]
	mov esi, 80h
	test ah, ah
	jz loc_486432
	cmp ecx, 0FFFFFFFFh
	jnz loc_48643B
	xor edx, edx

loc_48641F:
	mov eax, edx
	inc edx
	call sub_486404
	cmp edx, 0Ah
	jl loc_48641F
	xor eax, eax
	pop esi
	pop edx
	pop ecx
	ret

loc_486432:
	mov eax, 0FFFFFFF6h
	pop esi
	pop edx
	pop ecx
	ret

loc_48643B:
	mov eax, ecx
	call sub_486314
	test eax, eax
	jnz loc_486496
	push ebx
	mov edx, dword_59BFB0
	lea ebx, [edx+600h]

loc_486452:
	mov eax, [edx+7]
	sar eax, 18h
	cmp eax, ecx
	jnz loc_486463
	mov eax, [edx]
	call sub_489840

loc_486463:
	add edx, 60h
	cmp edx, ebx
	jnz loc_486452
	mov eax, dword dword_59C5B0[ecx*8]
	cmp byte [eax+4], 1
	jb loc_48647D
	xor esi, esi
	mov si, [eax+6]

loc_48647D:
	mov edx, esi
	mov eax, ecx
	call sub_486330
	xor edx, edx
	xor eax, eax
	mov dword dword_59C5B0[ecx*8], edx
	pop ebx
	pop esi
	pop edx
	pop ecx
	ret

loc_486496:
	mov eax, 0FFFFFFF8h
	pop esi
	pop edx
	pop ecx
	ret
;sub_486404 endp

sub_4864A0: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jz loc_4864B8
	cmp edx, 7Fh
	jg loc_4864B2
	test edx, edx
	jge loc_4864BE

loc_4864B2:
	mov eax, 0FFFFFFF8h
	ret

loc_4864B8:
	mov eax, 0FFFFFFF6h
	ret

loc_4864BE:
	push ecx
	push ebx
	mov byte [byte_4DCEDE], dl
	mov ecx, dword [dword_4DCE6C]
	mov ebx, edx
	mov edx, eax
	mov eax, ecx
	call sub_486080
	xor eax, eax
	pop ebx
	pop ecx
	ret
;sub_4864A0 endp

;	Attributes: library function

strncpy_: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	jmp loc_4864ED

loc_4864E2:
	mov cl, [edx]
	test cl, cl
	jz loc_4864F1
	inc edx
	dec ebx
	mov [eax], cl
	inc eax

loc_4864ED:
	test ebx, ebx
	jnz loc_4864E2

loc_4864F1:
	test ebx, ebx
	jz loc_4864FC
	dec ebx
	mov byte [eax], 0
	inc eax
	jmp loc_4864F1

loc_4864FC:
	mov eax, esi
	pop esi
	pop ecx
	ret
;strncpy_ endp

;	Attributes: library function

sprintf_: ;SUBROUTINE
	push ecx
	push edx

	lea eax, [esp+14h]
	push eax
	push dword [esp+14h]
	push dword [esp+14h]
	call vsprintf_wrap
	add esp, 0Ch

	pop edx
	pop ecx
	ret
;sprintf_ endp

;	Attributes: library function

toupper_: ;SUBROUTINE
	cmp eax, 61h
	jl locret_48652F
	cmp eax, 7Ah
	jg locret_48652F
	sub eax, 20h

locret_48652F:
	ret
;toupper_ endp

;	Attributes: library function

__CHP: ;SUBROUTINE
	push eax
	fstcw word [esp]
	wait
	push dword [esp]
	mov byte [esp+1], 1Fh
	fldcw word [esp]
	frndint
	fldcw word [esp+4]
	wait
	lea esp, [esp+8]
	ret
;__CHP endp

sub_486550: ;SUBROUTINE
	movzx eax, byte byte_4DB2F4[eax]
	ret
;sub_486550 endp

sub_486560: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	sub esp, 34h
	xor ecx, ecx
	mov ebx, dword [dword_4DD714]
	mov dword [dword_4DD798], ecx
	cmp eax, ebx
	jnz loc_486584
	cmp edx, dword [dword_4DD718]
	jz loc_4866BD

loc_486584:
	push edi
	push esi
	mov dword [dword_4DD714], eax
	mov dword [dword_4DD718], edx
	call sub_49B2E0
	mov ecx, eax
	shr ecx, 10h
	and ecx, 0FFh
	mov [esp+24h], ecx
	mov ecx, eax
	and eax, 0FFh
	mov [esp+1Ch], eax
	mov eax, edx
	call sub_49B2E0
	mov edx, eax
	xor edi, edi
	shr edx, 10h
	mov [esp+38h], edi
	and edx, 0FFh
	mov [esp+34h], edi
	mov [esp+2Ch], edx
	mov edx, eax
	and eax, 0FFh
	shr edx, 8
	mov [esp+30h], eax
	mov eax, [esp+2Ch]
	and edx, 0FFh
	lea esi, 0[eax*4]
	mov [esp+28h], edx
	add esi, eax
	lea ebp, 0[edx*4]
	mov eax, esi
	shl esi, 2
	add ebp, edx
	sub esi, eax
	mov eax, ebp
	shl ebp, 2
	shr ecx, 8
	sub ebp, eax
	mov eax, [esp+30h]
	and ecx, 0FFh
	lea ebx, 0[eax*4]
	mov [esp+20h], ecx
	add ebx, eax
	xor ecx, ecx
	mov eax, ebx
	shl ebx, 2
	xor edx, edx
	sub ebx, eax

loc_486631:
	lea eax, [esi+edi]
	shr eax, 4
	mov [esp+8], eax
	mov eax, [esp+38h]
	add eax, ebp
	shr eax, 4
	mov [esp+0Ch], eax
	mov eax, [esp+34h]
	add eax, ebx
	shr eax, 4
	mov [esp+10h], eax
	add edi, [esp+24h]
	mov eax, [esp+20h]
	add [esp+38h], eax
	mov eax, [esp+1Ch]
	add [esp+34h], eax
	sub esi, [esp+2Ch]
	sub ebp, [esp+28h]
	sub ebx, [esp+30h]
	mov eax, [esp+8]
	shl eax, 10h
	or eax, ecx
	mov [esp+14h], eax
	mov eax, [esp+0Ch]
	shl eax, 8
	mov [esp+18h], eax
	mov eax, [esp+14h]
	or eax, [esp+18h]
	add edx, 4
	or eax, [esp+10h]
	add ecx, 10000000h
	call sub_48266C
	mov dword dword_4DD718[edx], eax
	cmp edx, 40h
	jnz loc_486631
	call sub_4A6354
	pop esi
	pop edi

loc_4866BD:
	add esp, 34h
	pop ebp
	pop ecx
	pop ebx
	ret
;sub_486560 endp

sub_4866D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov edi, edx
	mov esi, ecx
	mov edx, ebx
	test ebx, ebx
	jz loc_486715

loc_4866DF:
	mov eax, edx
	sar eax, 1
	imul eax, esi
	lea ebx, [edi+eax]
	mov ecx, 2
	mov eax, ebx
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, ebp
	sub ecx, eax
	mov eax, ecx
	jz loc_48671B
	test ecx, ecx
	jle loc_48670F
	dec edx
	lea edi, [ebx+esi]

loc_48670F:
	sar edx, 1
	test edx, edx
	jnz loc_4866DF

loc_486715:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	ret

loc_48671B:
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	ret
;sub_4866D0 endp

sub_486724: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	lea ecx, [eax-20h]
	lea eax, 0[ecx*4]
	sub eax, ecx
	shl eax, 2
	mov edx, dword [dword_4DD76C]
	sub eax, ecx
	lea ebx, [edx+eax]
	mov ecx, 2
	mov eax, ebx
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, esi
	jnz loc_486765
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_486765:
	mov ecx, 0Bh
	mov ebx, dword [dword_4DD75C]
	mov eax, esi
	call sub_4866D0
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_486724 endp

sub_48677C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 4
	mov esi, dword [dword_4DD790]
	mov edi, eax
	mov [esp], edx
	mov eax, dword [dword_4DD794]
	xor edx, edx
	test esi, esi
	jle loc_4867BF

loc_486799:
	xor ebx, ebx
	xor ecx, ecx
	mov bx, di
	mov cx, [eax+2]
	cmp ecx, ebx
	jnz loc_4867B7
	xor ecx, ecx
	xor ebx, ebx
	mov cx, [esp]
	mov bx, [eax]
	cmp ebx, ecx
	jz loc_4867C9

loc_4867B7:
	inc edx
	add eax, 8
	cmp edx, esi
	jl loc_486799

loc_4867BF:
	xor eax, eax
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4867C9:
	mov eax, [eax+1]
	sar eax, 18h
	add esp, 4
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48677C endp

sub_4867D8: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 44h
	mov [esp+20h], eax
	mov [esp], eax
	mov eax, dword [dword_4DD77C]
	mov ebp, 0FFFFFFFFh
	mov [esp+10h], eax
	mov eax, dword [dword_4DD788]
	mov esi, dword [dword_4DD6EC]
	mov [esp+0Ch], eax
	mov eax, dword [dword_4DD78C]
	mov edx, dword [dword_4DD6F4]
	mov [esp+3Ch], eax
	mov eax, dword [dword_4DD794]
	mov ecx, dword [dword_4DD6F8]
	mov [esp+18h], eax
	mov eax, dword [dword_4DD6F0]
	xor ebx, ebx
	add eax, ecx
	mov [esp+1Ch], ebx
	mov [esp+40h], eax
	mov eax, dword [dword_4DD6EC]
	mov [esp+38h], ebx
	mov [esp+14h], eax
	mov eax, dword [dword_4DD780]
	add esi, edx
	test eax, eax
	jnz loc_48694E

loc_486850:
	mov eax, 20h
	call sub_486724
	test eax, eax
	jnz loc_486959

loc_486862:
	mov eax, [esp+38h]
	mov [esp+34h], eax
	mov eax, esp
	inc ebp
	call dword [esp+0Ch]
	mov ebx, eax
	mov [esp+38h], eax
	cmp eax, 20h
	jle loc_48697C
	call sub_486724
	mov edx, eax
	mov edi, eax
	test eax, eax
	jz loc_486862
	mov ecx, 2
	add eax, 4
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, 2
	mov [esp+28h], eax
	lea eax, [edx+6]
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov edx, [esp+18h]
	xor ecx, ecx
	mov [esp+24h], eax
	mov [esp+4], ecx
	mov [esp+8], ecx
	test edx, edx
	jz loc_4868E2
	mov edx, [esp+34h]
	mov eax, ebx
	call sub_48677C
	add esi, eax

loc_4868E2:
	mov eax, [edi+6]
	sar eax, 18h
	lea edx, [esi+eax]
	mov [esp+30h], edx
	mov eax, [edi+7]
	mov edx, [esp+40h]
	sar eax, 18h
	add edx, eax
	mov ecx, [esp+3Ch]
	mov [esp+2Ch], edx
	test ecx, ecx
	jnz loc_486968

loc_486907:
	mov ebx, dword [dword_4DD760]
	xor eax, eax
	push ebx
	mov al, [edi+3]
	mov edx, [esp+30h]
	push eax
	xor eax, eax
	mov ecx, [esp+10h]
	mov al, [edi+2]
	add edx, ecx
	push eax
	mov eax, [esp+30h]
	mov ecx, [esp+10h]
	push eax
	mov eax, [esp+40h]
	mov ebx, dword [dword_4DD770]
	add eax, ecx
	mov ecx, [esp+38h]
	call dword [esp+20h]
	mov eax, [edi+5]
	sar eax, 18h
	add esi, eax
	jmp loc_486862

loc_48694E:
	call dword [dword_4DD780]
	jmp loc_486850

loc_486959:
	mov eax, [eax+5]
	sar eax, 18h
	mov [esp+1Ch], eax
	jmp loc_486862

loc_486968:
	mov ebx, [esp+20h]
	lea edx, [esp+8]
	lea eax, [esp+4]
	mov ecx, ebp
	call dword [esp+3Ch]
	jmp loc_486907

loc_48697C:
	test eax, eax
	jnz loc_4869B5
	cmp dword [dword_4DD784], 0
	jnz loc_486A25

loc_48698D:
	mov eax, dword [dword_4DD6F4]
	mov edx, [esp+40h]
	sub esi, eax
	mov eax, dword [dword_4DD6F8]
	sub edx, eax
	mov dword [dword_4DD6EC], esi
	mov dword [dword_4DD6F0], edx
	add esp, 44h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4869B5:
	cmp eax, 0Ah
	jnz loc_4869DB
	mov edx, dword [dword_4DD704]
	mov edi, dword [dword_4DD708]
	mov eax, [esp+40h]
	add edx, edi
	add eax, edx
	mov esi, [esp+14h]
	mov [esp+40h], eax
	jmp loc_486862

loc_4869DB:
	cmp dword [dword_4DB544], 0
	jnz loc_4869ED

loc_4869E4:
	add esi, [esp+1Ch]
	jmp loc_486862

loc_4869ED:
	cmp eax, 9
	jnz loc_4869E4
	mov ebx, dword [dword_4DB540]
	test ebx, ebx
	jle loc_486862
	shl ebx, 2
	xor edx, edx

loc_486A05:
	mov eax, dword [dword_4DB544]
	add eax, edx
	mov edi, [eax]
	cmp esi, edi
	jge loc_486A19
	mov esi, edi
	jmp loc_486862

loc_486A19:
	add edx, 4
	cmp edx, ebx
	jl loc_486A05
	jmp loc_486862

loc_486A25:
	call dword [dword_4DD784]
	jmp loc_48698D
;sub_4867D8 endp

sub_486A30: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	mov edx, ebx
	call sub_4871F8
	mov eax, ecx
	call sub_4867D8
	pop ecx
	ret
;sub_486A30 endp

sub_486B40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	xor eax, eax
	test ebx, ebx
	jle loc_486B8E

loc_486B4D:
	mov edx, eax
	sar edx, 1
	add edx, edi
	test al, 1
	jz loc_486B92
	xor ecx, ecx
	mov cl, [edx]
	sar ecx, 4

loc_486B5E:
	mov dl, cl
	test cl, cl
	jz loc_486B89
	mov ecx, eax
	sar ecx, 1
	add ecx, esi
	test al, 1
	jz loc_486B9D
	mov dh, [ecx]
	and dh, 0Fh
	xor ecx, ecx
	mov cl, dh
	and edx, 0FFh
	shl edx, 4

loc_486B80:
	or edx, ecx
	mov ecx, eax
	sar ecx, 1
	mov [ecx+esi], dl

loc_486B89:
	inc eax
	cmp eax, ebx
	jl loc_486B4D

loc_486B8E:
	pop edi
	pop esi
	pop ecx
	ret

loc_486B92:
	mov dl, [edx]
	xor ecx, ecx
	and dl, 0Fh
	mov cl, dl
	jmp loc_486B5E

loc_486B9D:
	mov dh, [ecx]
	and dh, 0F0h
	xor ecx, ecx
	mov cl, dh
	and edx, 0FFh
	jmp loc_486B80
;sub_486B40 endp

sub_486BB0: ;SUBROUTINE
	push ecx

loc_486BB1:
	mov cl, [eax]
	inc eax
	cmp cl, 0FFh
	jnz loc_486BBF
	inc edx
	dec ebx
	jnz loc_486BB1
	pop ecx
	ret

loc_486BBF:
	mov [edx], cl
	inc edx
	dec ebx
	jnz loc_486BB1
	pop ecx
	ret
;sub_486BB0 endp

sub_486BC8: ;SUBROUTINE
	push ecx

loc_486BC9:
	mov cx, [eax]
	test cx, cx
	jnz loc_486BDC
	add eax, 2
	add edx, 2
	dec ebx
	jnz loc_486BC9
	pop ecx
	ret

loc_486BDC:
	mov [edx], cx
	add eax, 2
	add edx, 2
	dec ebx
	jnz loc_486BC9
	pop ecx
	ret
;sub_486BC8 endp

sub_486BEC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, 3
	mov esi, eax

loc_486BF6:
	mov ecx, edi
	mov eax, esi
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	test eax, eax
	jnz loc_486C1A
	add esi, 3
	add edx, 3
	dec ebx
	jnz loc_486BF6
	pop edi
	pop esi
	pop ecx
	ret

loc_486C1A:
	mov al, [esi]
	mov [edx], al
	mov al, [esi+1]
	mov [edx+1], al
	mov al, [esi+2]
	mov [edx+2], al
	add esi, 3
	add edx, 3
	dec ebx
	jnz loc_486BF6
	pop edi
	pop esi
	pop ecx
	ret
;sub_486BEC endp

sub_486C38: ;SUBROUTINE
	push ecx
	push esi

loc_486C3A:
	mov ecx, [eax]
	mov esi, ecx
	shr esi, 18h
	test esi, esi
	jnz loc_486C51
	add eax, 4
	add edx, 4
	dec ebx
	jnz loc_486C3A
	pop esi
	pop ecx
	ret

loc_486C51:
	mov [edx], ecx
	add eax, 4
	add edx, 4
	dec ebx
	jnz loc_486C3A
	pop esi
	pop ecx
	ret
;sub_486C38 endp

sub_486C60: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 404h
	mov esi, eax
	mov edi, edx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov edx, eax
	cmp eax, 4
	jnz loc_486D04
	xor ebp, ebp

loc_486C86:
	mov ecx, dword dword_570E60[ebp*4]
	mov [esp+400h], ecx
	xor ecx, ecx
	mov dword [dword_4DB564], ecx
	mov dword dword_570E60[ebp*4], ecx
	cmp edx, 8
	jnz loc_486CD5
	cmp byte [byte_4DB25C], 10h
	jnz loc_486CD5
	mov edx, esp
	mov eax, esi
	mov ecx, 7Bh
	call sub_499EC0
	mov edx, sub_4A66EC
	mov dword [dword_563F28], eax
	mov dword [dword_4DB56C], ecx
	mov dword [dword_4DB564], edx

loc_486CD5:
	mov ecx, off_4DB54C
	mov edx, edi
	mov eax, esi
	call sub_4A10BC
	xor ebx, ebx
	mov eax, [esp+400h]
	mov dword [dword_4DB56C], ebx
	mov dword dword_570E60[ebp*4], eax
	add esp, 404h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_486D04:
	mov ebp, 0FFh
	jmp loc_486C86
;sub_486C60 endp

sub_486D10: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, [eax+0Ch]
	mov edx, [eax+0Ch]
	shl ebx, 4
	shl edx, 14h
	sar ebx, 14h
	sar edx, 14h
	call sub_486C60
	pop edx
	pop ebx
	ret
;sub_486D10 endp

sub_486D2C: ;SUBROUTINE
	push ecx
	mov ecx, [eax+8]
	sar ecx, 10h
	sub ebx, ecx
	mov ecx, [eax+6]
	sar ecx, 10h
	sub edx, ecx
	call sub_486C60
	pop ecx
	ret
;sub_486D2C endp

sub_486D80: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	xor eax, eax
	cmp ebx, 3Ah
	jz loc_486E15
	jmp loc_486DBE

loc_486D9D:
	lea eax, [ecx+ebx]
	mov al, [eax]
	and eax, 0FFh
	cmp eax, 80h
	jl loc_486DBB
	cmp eax, 90h
	jl loc_486DB8
	and eax, 7Fh

loc_486DB8:
	shl eax, 8

loc_486DBB:
	pop ecx
	pop ebx
	ret

loc_486DBE:
	cmp byte [byte_4DB311], 0
	jz loc_486DE5
	cmp dword [dword_4DB2EC], 0
	jz loc_486DD5
	cmp ebx, 1
	jz loc_486DDC

loc_486DD5:
	mov ecx, byte_4DB485
	jmp loc_486D9D

loc_486DDC:
	jmp ExitProcess0

loc_486DE5:
	cmp byte [byte_4DB31E], 0
	jz loc_486DF5

loc_486DEE:
	mov ecx, byte_4DB3CF
	jmp loc_486D9D

loc_486DF5:
	cmp byte [byte_4DB32A], 0
	jnz loc_486DEE
	cmp dword [dword_4DB2F0], 0
	jz loc_486E0E
	mov ecx, byte_4DB42A
	jmp loc_486D9D

loc_486E0E:
	mov ecx, byte_4DB374
	jmp loc_486D9D

loc_486E15:
	cmp dword [dword_4DB2F0], 0
	jnz loc_486E2C
	mov ecx, 1
	mov dword [dword_4DB2F0], ecx
	pop ecx
	pop ebx
	ret

loc_486E2C:
	xor ecx, ecx
	mov dword [dword_4DB2F0], ecx
	pop ecx
	pop ebx
	ret
;sub_486D80 endp

sub_486E38: ;SUBROUTINE
	call sub_482030
	and eax, 0FFFFh
	ret
;sub_486E38 endp

sub_486E44: ;SUBROUTINE
	call sub_482030
	and eax, 0FFFFh
	jmp loc_4A67A8

loc_4A67A8:
	push edx
	dec dword [dword_4DDC4A]
	jnz loc_4A67F0
	mov edx, eax
	or dl, dl
	jz loc_4A67D8
	and edx, 7Fh
	mov dl, byte byte_4DDB44[edx]

loc_4A67C0:
	dec edx
	jl loc_4A67F0
	push edi
	push esi
	call dword dword_4DDC4E[edx*4]
	pop esi
	pop edi
	xor eax, eax
	inc dword [dword_4DDC4A]
	pop edx
	ret

loc_4A67D8:
	movzx edx, dh
	cmp edx, 84h
	jl loc_4A67E8
	mov edx, 84h

loc_4A67E8:
	mov dl, byte byte_4DDBC4[edx]
	jmp loc_4A67C0

loc_4A67F0:
	inc dword [dword_4DDC4A]
	pop edx
	ret
;sub_486E44 endp

sub_486E54: ;SUBROUTINE
	mov dword [off_4DB570], eax
	ret
;sub_486E54 endp

sub_486E5C: ;SUBROUTINE
	cmp dword [off_4DB570], 0
	jnz loc_486E68
	xor eax, eax
	ret

loc_486E68:
	call dword [off_4DB570]
	ret
;sub_486E5C endp

sub_486EE8: ;SUBROUTINE
	push ecx
	push edx
	cmp dword [dword_4DAB38], 0
	jz loc_486F10

loc_486EF3:
	mov ecx, 1
	mov edx, 80h
	mov eax, byte_4DB2F4
	mov dword [dword_5635D8], ecx
	call sub_48A01C
	pop edx
	pop ecx
	ret

loc_486F10:
	call sub_489EF8
	mov dword [dword_4DAB38], eax
	jmp loc_486EF3
;sub_486EE8 endp

sub_486F1C: ;SUBROUTINE
	push edx
	xor edx, edx
	mov dword [dword_5635D8], edx
	pop edx
	ret
;sub_486F1C endp

sub_486F28: ;SUBROUTINE
	call sub_482030
	test eax, eax
	jnz sub_486F28
	ret
;sub_486F28 endp

sub_486F40: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_486F5C
	pop ebx
	ret
;sub_486F40 endp

sub_486F50: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_486F5C
	pop ebx
	ret
;sub_486F50 endp

sub_486F5C: ;SUBROUTINE
	call sub_486F84
	test eax, eax
	jz locret_486F67
	mov eax, [eax]

locret_486F67:
	ret
;sub_486F5C endp

sub_486F84: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov [esp+0Ch], edx
	mov ebp, ebx
	call sub_4A4624
	mov edi, eax
	test eax, eax
	jz loc_486FB5

loc_486F9E:
	cmp dword [dword_4DDD50], 0
	jnz loc_48703B
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_486FB5:
	mov eax, 0C8h
	mov ecx, esp
	lea edx, [esp+8]
	call sub_4A5124
	push ebx
	mov eax, esi
	lea ebx, [esp+8]
	call sub_487668
	mov edx, [esp]
	test edx, edx
	jnz loc_486FE9
	mov ecx, [esp+8]
	test ecx, ecx
	jz loc_486F9E
	mov eax, ecx
	call sub_487950
	jmp loc_486F9E

loc_486FE9:
	mov ebx, [esp+0Ch]
	mov ecx, ebp
	mov eax, esi
	call sub_4844D4
	mov ecx, eax
	mov edi, eax
	test eax, eax
	jz loc_48702D
	mov eax, [esp]
	mov edx, eax
	mov ebx, 1C2h
	sar edx, 1Fh
	idiv ebx
	add eax, 0C8h
	call sub_4A5124
	mov ebx, [esp]
	mov eax, [esp+8]
	mov edx, [ecx]
	call sub_487958
	mov eax, [esp]
	mov dword [dword_4DABEC], eax

loc_48702D:
	mov eax, [esp+8]
	call sub_487950
	jmp loc_486F9E

loc_48703B:
	mov ebx, [esp+0Ch]
	mov ecx, ebp
	mov edx, esi
	mov eax, edi
	call dword [dword_4DDD50]
	mov edi, eax
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_486F84 endp

sub_487060: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, eax
	mov ecx, [eax+1Ch]
	add ecx, eax
	mov eax, [eax+0Dh]
	sar eax, 18h
	mov dword [dword_4DD6F4], eax
	mov eax, [edx+0Eh]
	mov ebx, 64h
	sar eax, 18h
	mov esi, 1
	mov dword [dword_4DD6F8], eax
	mov eax, [edx+0Fh]
	mov dword [dword_4DD768], edx
	sar eax, 18h
	xor edi, edi
	mov dword [dword_4DD704], eax
	mov eax, [edx+10h]
	mov dword [dword_4DD764], ebx
	sar eax, 18h
	mov dword [dword_4DD700], esi
	mov dword [dword_4DD708], eax
	mov ebx, eax
	mov eax, dword [dword_4DD704]
	mov dword [dword_4DD798], edi
	add ebx, eax
	mov dword [dword_4DD794], edi
	mov eax, ebx
	mov dword [dword_4DD70C], ebx
	xor eax, ebx
	mov dword [dword_4DD710], ebx
	mov ax, [edx+0Ah]
	mov ebx, edx
	mov dword [dword_4DD75C], eax
	mov eax, [edx+14h]
	mov dword [dword_4DD770], ecx
	add ebx, eax
	mov eax, ecx
	mov dword [dword_4DD76C], ebx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov dword [dword_4DD6FC], eax
	mov ebx, [ecx+2]
	mov eax, ecx
	sar ebx, 10h
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	imul eax, ebx
	add eax, 7
	and al, 0F8h
	sar eax, 3
	mov dword [dword_4DD760], eax
	mov eax, [edx+0Ch]
	sar eax, 10h
	and eax, 3
	cmp eax, 2
	jz loc_487146
	cmp dword [dword_4DD75C], 0FFh
	jle loc_48717E

loc_487146:
	mov dword [dword_4DD788], sub_4A688C

loc_487150:
	mov edx, 10h
	xor edi, edi
	mov eax, dword_4DD71C
	mov dword [dword_4DD714], edi
	mov dword [dword_4DD718], edi
	call sub_48A01C
	call sub_4A62F8
	mov dword [dword_4DD78C], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48717E:
	mov ecx, 2
	lea eax, [edx+20h]
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 0FFh
	ja loc_487146
	mov dword [dword_4DD788], sub_4A6860
	jmp loc_487150
;sub_487060 endp

sub_4871B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 2Dh
	mov esi, dword_4DD6E8
	mov edi, eax
	rep movsd
	pop edi
	pop esi
	pop ecx
	ret
;sub_4871B0 endp

sub_4871C8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 2Dh
	mov edi, dword_4DD6E8
	mov esi, eax
	rep movsd
	call sub_4A6354
	pop edi
	pop esi
	pop ecx
	ret
;sub_4871C8 endp

sub_4871F0: ;SUBROUTINE
	mov eax, dword [dword_4DD70C]
	ret
;sub_4871F0 endp

sub_4871F8: ;SUBROUTINE
	mov dword [dword_4DD6EC], eax
	mov dword [dword_4DD6F0], edx
	ret
;sub_4871F8 endp

sub_487220: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, edx
	mov [esp+4], ecx
	mov ecx, [esp+1Ch]
	movzx esi, byte [byte_4DB25C]
	mov [esp], eax
	add esi, 7
	add eax, ebx
	and si, 0FFF8h
	mov [esp+8], eax

loc_487247:
	mov edx, [esp+4]
	dec edx
	mov [esp+4], edx
	cmp edx, 0FFFFFFFFh
	jz loc_4872D8
	mov edi, [esp]
	cmp edi, [esp+8]
	jge loc_487284

loc_487262:
	mov edx, ebp
	mov eax, edi
	call sub_4A68D0
	mov edx, eax
	cmp esi, 10h
	jnb loc_487287
	cmp esi, 8
	jnz loc_48727B
	inc ecx
	mov [ecx-1], dl

loc_48727B:
	mov ebx, [esp+8]
	inc edi
	cmp edi, ebx
	jl loc_487262

loc_487284:
	inc ebp
	jmp loc_487247

loc_487287:
	ja loc_48729C
	add ecx, 2
	mov [ecx-2], ax
	mov ebx, [esp+8]
	inc edi
	cmp edi, ebx
	jl loc_487262
	inc ebp
	jmp loc_487247

loc_48729C:
	cmp esi, 18h
	jb loc_48727B
	jbe loc_4872BA
	cmp esi, 20h
	jnz loc_48727B
	add ecx, 4
	mov [ecx-4], eax
	mov ebx, [esp+8]
	inc edi
	cmp edi, ebx
	jl loc_487262
	inc ebp
	jmp loc_487247

loc_4872BA:
	mov ebx, 3
	mov eax, ecx
	call sub_48C06F
	add ecx, 3
	mov ebx, [esp+8]
	inc edi
	cmp edi, ebx
	jl loc_487262
	inc ebp
	jmp loc_487247

loc_4872D8:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_487220 endp

sub_4872E4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor eax, eax
	mov al, byte [byte_4DB25C]
	add eax, 7
	and al, 0F8h
	mov edx, dword [dword_4DB24C]
	mov ecx, eax
	mov eax, dword [dword_4DB254]
	sub eax, edx
	mov ebx, dword [dword_4DB250]
	mov edx, eax
	mov eax, dword [dword_4DB258]
	sub eax, ebx
	imul edx, eax
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	shl edx, 3
	sbb eax, edx
	sar eax, 3
	add eax, 12h
	cmp ecx, 8
	jnz loc_487331
	add eax, 300h

loc_487331:
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4872E4 endp

sub_487338: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 308h
	mov esi, eax
	mov ecx, eax
	xor eax, eax
	mov al, byte [byte_4DB25C]
	mov edx, dword [dword_4DB24C]
	add eax, 7
	mov ebp, dword [dword_4DB258]
	and al, 0F8h
	mov ebx, dword [dword_4DB250]
	mov edi, eax
	mov eax, dword [dword_4DB254]
	sub ebp, ebx
	sub eax, edx
	mov ebx, 1
	mov [esp+304h], eax
	xor edx, edx
	mov eax, esi
	call sub_48C06F
	mov ebx, 1
	cmp edi, 8
	jnz loc_4874F8
	mov edx, ebx

loc_487396:
	lea eax, [ecx+1]
	call sub_48C06F
	mov ebx, 1
	cmp edi, 8
	jnz loc_4874FF
	mov edx, ebx

loc_4873AE:
	lea eax, [ecx+2]
	call sub_48C06F
	mov ebx, 2
	lea eax, [ecx+3]
	xor edx, edx
	call sub_48C06F
	mov ebx, 2
	cmp edi, 8
	jnz loc_487509
	mov edx, 100h

loc_4873D8:
	lea eax, [ecx+5]
	call sub_48C06F
	mov ebx, 1
	cmp edi, 8
	jnz loc_487510
	mov edx, 18h

loc_4873F3:
	lea eax, [ecx+7]
	call sub_48C06F
	mov ebx, 2
	mov edx, dword [dword_4DB24C]
	lea eax, [ecx+8]
	call sub_48C06F
	mov eax, dword [dword_4DB248]
	sub eax, dword [dword_4DB258]
	lea edx, [ecx+0Ah]
	mov ebx, 2
	mov [esp+300h], edx
	mov edx, eax
	mov eax, [esp+300h]
	call sub_48C06F
	mov ebx, 2
	mov edx, [esp+304h]
	lea eax, [ecx+0Ch]
	call sub_48C06F
	mov ebx, 2
	lea eax, [ecx+0Eh]
	mov edx, ebp
	call sub_48C06F
	mov ebx, 1
	lea eax, [ecx+10h]
	mov edx, edi
	call sub_48C06F
	mov ebx, 1
	mov edx, 20h
	lea eax, [ecx+11h]
	add esi, 12h
	call sub_48C06F
	cmp edi, 8
	jnz loc_4874B4
	mov ebx, esp
	mov edx, 100h
	xor eax, eax
	call sub_4A03E0
	xor eax, eax

loc_487492:
	inc esi
	inc esi
	mov dl, [esp+eax]
	inc esi
	mov bl, [esp+eax+2]
	mov cl, [esp+eax+1]
	mov [esi-3], bl
	mov [esi-2], cl
	add eax, 3
	mov [esi-1], dl
	cmp eax, 300h
	jnz loc_487492
	nop

loc_4874B4:
	mov eax, dword [dword_4DB258]
	mov ecx, dword [dword_4DB250]
	mov ebx, dword [dword_4DB24C]
	sub eax, ecx
	mov edx, dword [dword_4DB250]
	mov ecx, eax
	mov eax, dword [dword_4DB254]
	push esi
	sub eax, ebx
	mov edi, ebx
	mov ebx, eax
	mov eax, edi
	call sub_487220
	cmp byte [byte_4DB25C], 10h
	jz loc_487517
	add esp, 308h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4874F8:
	xor edx, edx
	jmp loc_487396

loc_4874FF:
	mov edx, 2
	jmp loc_4873AE

loc_487509:
	xor edx, edx
	jmp loc_4873D8

loc_487510:
	xor edx, edx
	jmp loc_4873F3

loc_487517:
	mov ebx, [esp+304h]
	imul ebx, ebp
	mov edx, esi
	mov eax, esi
	call sub_4A6988
	add esp, 308h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_487338 endp

sub_487538: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 70h
	mov esi, eax
	call sub_4872E4
	mov ebx, eax
	call sub_49E3E0
	xor edx, edx
	mov ecx, eax
	test eax, eax
	jnz loc_48755F
	mov eax, edx
	add esp, 70h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48755F:
	call sub_487338
	mov eax, esp
	call sub_4A4030
	call sub_4824BC
	mov edx, ecx
	mov eax, esi
	call sub_4875B0
	mov edx, eax
	mov eax, esp
	call sub_4A4054
	mov eax, ecx
	call sub_49E448
	mov eax, edx
	add esp, 70h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_487538 endp

sub_4875B0: ;SUBROUTINE
	push ecx
	xor ecx, ecx
	call sub_4875BC
	pop ecx
	ret
;sub_4875B0 endp

sub_4875BC: ;SUBROUTINE
	sub esp, 28h
	mov [esp], edx
	mov [esp+14h], ebx
	mov edx, dword [dword_4DABE8]
	mov ebx, ecx
	mov [esp+18h], edx
	mov edx, esp
	call sub_4875FC
	add esp, 28h
	ret
;sub_4875BC endp

sub_4875FC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, eax
	mov eax, edx
	lea ecx, [esp+8]
	call sub_484DA4
	mov ebp, eax
	mov eax, edx
	lea ebx, [esp+4]
	call sub_4844D0
	mov edx, esp
	mov esi, eax
	mov eax, edi
	call sub_4877C4
	test eax, eax
	jnz loc_487634
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_487634:
	mov eax, [esp]
	mov ebx, ebp
	mov edx, esi
	call sub_487960
	mov edx, eax
	mov eax, [esp]
	call sub_487950
	mov eax, edx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4875FC endp

sub_487668: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov [esp+8], eax
	mov esi, edx
	mov ebp, ebx
	mov edi, ecx
	mov edx, 305h
	xor ecx, ecx
	mov [esp+0Ch], edx
	mov [esp+10h], ecx
	test ebx, ebx
	jnz loc_48768F
	lea ebp, [esp+4]

loc_48768F:
	test edi, edi
	jnz loc_487695
	mov edi, esp

loc_487695:
	mov edx, [esp+0Ch]
	mov eax, [esp+8]
	mov ecx, esi
	mov dword [edi], 0
	xor ebx, ebx
	mov dword [ebp+0], 0
	call sub_45A560
	test eax, eax
	jnz loc_48776C
	cmp dword [dword_4DB5F8], 0
	jz loc_4876CD
	cmp byte [byte_4DB574], 0
	jnz loc_4876DA

loc_4876CD:
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4876DA:
	mov edx, [esp+0Ch]
	mov eax, byte_4DB574
	mov ecx, esi
	xor ebx, ebx
	call sub_45A560
	test eax, eax
	jz loc_4876CD
	mov ebx, dword [dword_4DB600]
	mov edx, dword [dword_4DB5F4]
	mov eax, [esi]
	call sub_45A070
	mov dword [dword_4DB600], eax
	test eax, eax
	jnz loc_48772A

loc_48770C:
	mov ecx, [esp+10h]
	test ecx, ecx
	jnz loc_4876CD
	mov eax, [esi]
	call sub_459B80
	mov [esi], ecx
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48772A:
	mov edx, [esp+8]
	mov eax, dword [dword_4DB5F4]
	call dword [dword_4DB5F8]
	mov [ebp+0], eax
	test eax, eax
	jz loc_48770C
	mov edx, eax
	mov eax, [esi]
	call sub_459D60
	test eax, eax
	jz loc_48770C
	mov eax, dword [dword_4DB5FC]
	mov ebx, 1
	mov eax, [eax]
	mov [esp+10h], ebx
	mov [edi], eax
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48776C:
	mov ebx, 1
	push 0
	mov ecx, edi
	mov eax, [esi]
	xor edx, edx
	mov [esp+14h], ebx
	xor ebx, ebx
	call sub_45A420
	test eax, eax
	jnz loc_4876CD
	mov eax, [esi]
	call sub_459B80
	mov dword [esi], 0
	xor esi, esi
	mov dword [edi], 0
	mov [esp+10h], esi
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_487668 endp

sub_4877B4: ;SUBROUTINE
	push 1
	call sub_487668
	ret
;sub_4877B4 endp

sub_4877BC: ;SUBROUTINE
	push 0
	call sub_487668
	ret
;sub_4877BC endp

sub_4877C4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, edx
	mov ebp, ebx
	mov esi, ecx
	test ebx, ebx
	jnz loc_4877D8
	lea ebp, [esp+4]

loc_4877D8:
	test esi, esi
	jnz loc_4877DE
	mov esi, esp

loc_4877DE:
	mov edx, 332h
	mov ecx, edi
	xor ebx, ebx
	call sub_45A560
	test eax, eax
	jnz loc_48780A
	mov [edi], eax
	mov [esp+8], eax
	mov [esi], eax

loc_4877F8:
	mov eax, [esp+8]
	mov dword [ebp+0], 0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_48780A:
	mov edx, 1
	push 0
	mov ecx, esi
	mov eax, [edi]
	xor ebx, ebx
	mov [esp+0Ch], edx
	xor edx, edx
	call sub_45A420
	test eax, eax
	jnz loc_4877F8
	mov eax, [edi]
	call sub_459B80
	xor ecx, ecx
	mov dword [edi], 0
	mov [esp+8], ecx
	mov dword [esi], 0
	mov eax, [esp+8]
	mov dword [ebp+0], 0
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4877C4 endp

sub_487854: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov [esp+0Ch], eax
	mov esi, edx
	mov ebp, ebx
	mov edi, ecx
	mov edx, 805h
	xor ecx, ecx
	mov [esp+8], edx
	mov [esp+10h], ecx
	test ebx, ebx
	jnz loc_48787B
	lea ebp, [esp+4]

loc_48787B:
	test edi, edi
	jnz loc_487881
	mov edi, esp

loc_487881:
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ecx, esi
	mov dword [edi], 0
	xor ebx, ebx
	mov dword [ebp+0], 0
	call sub_45A560
	test eax, eax
	jnz loc_4878C2
	cmp dword [dword_4DB5F8], 0
	jz loc_4878B5
	cmp byte [byte_4DB574], 0
	jnz loc_4878F7

loc_4878B5:
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4878C2:
	push 0
	mov ecx, edi
	mov eax, [esi]
	xor ebx, ebx
	xor edx, edx
	call sub_45A420
	test eax, eax
	jz loc_4878E2
	mov eax, [esi]
	call sub_459AC0
	mov [esp+10h], eax
	jmp loc_4878B5

loc_4878E2:
	mov eax, [esi]
	call sub_459B80
	mov dword [esi], 0
	mov dword [edi], 0
	jmp loc_4878B5

loc_4878F7:
	mov edx, [esp+8]
	mov eax, byte_4DB574
	mov ecx, esi
	xor ebx, ebx
	call sub_45A560
	test eax, eax
	jz loc_4878B5
	mov eax, [esi]
	mov edx, [esp+0Ch]
	call sub_459AC0
	mov esi, eax
	call dword [dword_4DB5F8]
	mov [ebp+0], eax
	add eax, esi
	mov [esp+10h], eax
	mov eax, dword [dword_4DB5FC]
	mov eax, [eax]
	mov [edi], eax
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_487854 endp

;	Attributes: thunk

sub_487950: ;SUBROUTINE
	jmp sub_459B80
;sub_487950 endp

;	Attributes: thunk

sub_487958: ;SUBROUTINE
	jmp sub_45A070
;sub_487958 endp

;	Attributes: thunk

sub_487960: ;SUBROUTINE
	jmp sub_459E40
;sub_487960 endp

sub_487968: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_459D60
	test eax, eax
	jnz loc_487976
	pop ecx
	ret

loc_487976:
	mov eax, ecx
	call sub_459CB0
	pop ecx
	ret
;sub_487968 endp

sub_4879AE: ;SUBROUTINE
	push ecx
	push edx
	push eax ; lpFileName
	call DeleteFileA_wrap
	test eax, eax
	jnz loc_4879C4
	mov eax, 0FFFFFFFFh
	pop edx
	pop ecx
	ret

loc_4879C4:
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_4879AE endp

sub_4879D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 14h
	xor edx, edx
	xor ah, ah
	mov dword [dword_4DB61C], edx
	mov dword [dword_4DB618], edx
	mov dword [dword_4DB614], edx
	mov dword [dword_4DABC0], edx
	mov dword [dword_4DABBC], edx
	mov dword [dword_4DABB8], edx
	mov dword [dword_4DABB4], edx
	mov dword [dword_4DABB0], edx
	mov dword [dword_4DABAC], edx
	mov dword [dword_4DABA8], edx
	mov dword [dword_4DABA4], edx
	mov byte [byte_4DB604], ah
	call sub_4A6EA8
	test eax, eax
	jz loc_487B93
	mov eax, esp
	mov ecx, 0Ch
	lea esi, [esp+4]
	mov edi, byte_4DB604
	mov [esp+10h], edx
	call sub_4A6EC5
	xor bl, bl
	mov edx, [esp]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov byte [byte_4DB610], bl
	test edx, edx
	jg loc_487A74
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_487A74:
	mov edx, 1
	mov eax, esp
	call sub_4A6EC5
	mov eax, [esp]
	and eax, 0F00h
	sar eax, 8
	mov dword [dword_4DB614], eax
	mov eax, [esp]
	and eax, 0F0h
	sar eax, 4
	mov dword [dword_4DB618], eax
	mov eax, [esp]
	and eax, 0Fh
	mov ebp, dword [dword_4DB614]
	mov dword [dword_4DB61C], eax
	cmp ebp, 5
	jl loc_487AC0
	mov dword [dword_4DABA4], 1

loc_487AC0:
	cmp dword [dword_4DB614], 6
	jl loc_487AD3
	mov dword [dword_4DABA8], 1

loc_487AD3:
	mov edx, aGenuineintel ; "GenuineIntel"
	mov eax, byte_4DB604
	call strcmp_
	test eax, eax
	jnz loc_487B39
	mov dword [dword_4DABB8], 1

loc_487AF0:
	test byte [esp+0Ah], 80h
	jz loc_487B7A
	mov eax, 1

loc_487B00:
	mov cl, [esp+8]
	mov dword [dword_4DABAC], eax
	test cl, 10h
	jz loc_487B7E
	mov eax, 1

loc_487B17:
	mov ch, [esp+9]
	mov dword [dword_4DABB0], eax
	test ch, 80h
	jz loc_487B82
	mov eax, 1
	mov dword [dword_4DABB4], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_487B39:
	mov edx, aAuthenticamd ; "AuthenticAMD"
	mov eax, byte_4DB604
	call strcmp_
	test eax, eax
	jnz loc_487B58
	mov dword [dword_4DABC0], 1
	jmp loc_487AF0

loc_487B58:
	mov edx, aCyrixinstead ; "CyrixInstead"
	mov eax, byte_4DB604
	call strcmp_
	test eax, eax
	jnz loc_487AF0
	mov dword [dword_4DABBC], 1
	jmp loc_487AF0

loc_487B7A:
	xor eax, eax
	jmp loc_487B00

loc_487B7E:
	xor eax, eax
	jmp loc_487B17

loc_487B82:
	xor eax, eax
	mov dword [dword_4DABB4], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_487B93:
	call sub_4A6EE1
	mov dword [dword_4DABBC], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4879D0 endp

sub_487F70: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 80h
	mov ebp, edx
	mov edi, esp
	mov esi, eax
	push edi

loc_487F81:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_487F99
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_487F81

loc_487F99:
	pop edi
	mov edi, esp
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov eax, esp
	add eax, ecx
	mov edx, esp
	dec eax
	cmp eax, edx
	jbe loc_487FB8

loc_487FB1:
	mov dl, [eax]
	cmp dl, 2Eh
	jnz loc_487FFD

loc_487FB8:
	cmp byte [eax], 2Eh
	jz loc_487FE7
	mov edi, esp
	mov esi, dword [off_4DB628]
	push edi
	sub ecx, ecx
	dec ecx
	mov al, 0
	repne scasb
	dec edi

loc_487FCE:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_487FE6
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_487FCE

loc_487FE6:
	pop edi

loc_487FE7:
	mov eax, esp
	call sub_4A4624
	test eax, eax
	jz loc_488015
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_487FFD:
	cmp dl, 3Ah
	jz loc_487FB8
	cmp dl, 2Fh
	jz loc_487FB8
	cmp dl, 5Ch
	jz loc_487FB8
	mov edx, esp
	dec eax
	cmp eax, edx
	ja loc_487FB1
	jmp loc_487FB8

loc_488015:
	mov eax, esp
	mov edx, ebp
	call sub_49D9B8
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_487F70 endp

sub_488048: ;SUBROUTINE
	call sub_487F70
	mov edx, eax
	xor eax, eax
	test edx, edx
	jz locret_488057
	mov eax, [edx]

locret_488057:
	ret
;sub_488048 endp

sub_488058: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_488048
	pop ebx
	ret
;sub_488058 endp

sub_488064: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_488048
	pop ebx
	ret
;sub_488064 endp

sub_488074: ;SUBROUTINE
	mov eax, dword [dword_4DB640]
	add eax, dword [dword_4DB63C]
	mov dword [dword_4DB63C], eax
	adc eax, dword [dword_4DB638]
	mov dword [dword_4DB638], eax
	adc eax, dword [dword_4DB634]
	mov dword [dword_4DB634], eax
	adc eax, dword [dword_4DB630]
	mov dword [dword_4DB630], eax
	adc eax, dword [dword_4DB62C]
	inc dword [dword_4DB640]
	jnz loc_4880D4
	inc dword [dword_4DB63C]
	jnz loc_4880D4
	inc dword [dword_4DB638]
	jnz loc_4880D4
	inc dword [dword_4DB634]
	jnz loc_4880D4
	inc dword [dword_4DB630]
	jnz loc_4880D4
	inc eax

loc_4880D4:
	mov dword [dword_4DB62C], eax
	ret
;sub_488074 endp

sub_4880DA: ;SUBROUTINE
	add eax, 0F22D0E56h
	mov dword [dword_4DB62C], eax
	add eax, 96041893h
	mov dword [dword_4DB630], eax
	add eax, 3DF3B646h
	mov dword [dword_4DB634], eax
	add eax, 40DDE76Dh
	mov dword [dword_4DB638], eax
	add eax, 97327AE1h
	mov dword [dword_4DB63C], eax
	add eax, 0D1A9FBE7h
	mov dword [dword_4DB640], eax
	ret
;sub_4880DA endp

sub_488128: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov [esp+8], edx
	mov esi, eax
	mov eax, [eax+18h]
	and eax, 0F00h
	shr eax, 8
	mov [esp+4], eax
	cmp eax, 3
	jnz loc_4881E0
	mov eax, edx
	cmp eax, [ecx+10h]
	jg loc_4881A6
	mov eax, [esp+8]
	mov [esi+14h], eax

loc_48815D:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4881A6:
	mov [esp], eax
	mov eax, esp
	call sub_49CAD4
	mov edi, eax
	test eax, eax
	jz loc_48815D
	mov edx, edi
	mov ebx, [ecx+14h]
	mov eax, [ecx]
	call sub_48A980
	mov eax, [ecx]
	call free_
	mov [ecx], edi
	mov eax, [esp]
	mov [ecx+10h], eax
	mov eax, [esp+8]
	mov [esi+14h], eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4881E0:
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov ebx, dword_563D80
	shl eax, 3
	add ebx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C0
	mov eax, [ecx+20h]
	mov edi, [ecx]
	mov ebp, [ebx+14h]
	mov eax, [eax]
	mov edx, [ebx+8]
	sub eax, edi
	mov ecx, [ebx+8]
	mov edi, eax
	mov eax, [esp+8]
	not ecx
	add eax, ebp
	and edi, ecx
	add eax, edx
	mov ebp, [esp+8]
	and ecx, eax
	test ebp, ebp
	jl loc_48825C

loc_488225:
	xor ebp, ebp

loc_488227:
	cmp ecx, edi
	jg loc_488277
	test ecx, ecx
	jl loc_488277
	mov eax, [esp+8]
	mov [esi+10h], ecx
	mov [esi+14h], eax
	cmp dword [ebx+14h], 0
	jz loc_488246
	mov eax, esi
	call sub_4A4110

loc_488246:
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	mov eax, [esp+8]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48825C:
	mov ecx, ebp
	cmp ebp, 0FFFFFFFFh
	jz loc_488225
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_488277:
	cmp dword [dword_4DB204], 0
	jz loc_48828D
	mov eax, [esi+20h]
	test byte [eax+18h], 18h
	jz loc_48828D
	test ebp, ebp
	jz loc_4882BC

loc_48828D:
	cmp dword [dword_4DB204], 0
	jz loc_48829C
	test byte [esi+18h], 10h
	jnz loc_4882E9

loc_48829C:
	mov eax, dword [dword_563F00]
	mov ecx, [esp+8]
	call sub_4A40C8
	test ecx, ecx
	jl loc_48838C
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4882BC:
	mov edx, esi
	mov eax, [ebx+4]
	call sub_4A4248
	test eax, eax
	jz loc_4882DF
	mov eax, [esi+20h]
	mov edx, [esi]
	mov edi, [ebx+8]
	mov eax, [eax]
	not edi
	sub eax, edx
	and edi, eax
	jmp loc_488227

loc_4882DF:
	mov ebp, 1
	jmp loc_488227

loc_4882E9:
	mov edx, [esi+20h]
	mov eax, [ebx]
	call sub_4A4358
	test eax, eax
	jz loc_48830C
	mov eax, [esi+20h]
	mov edi, [esi]
	mov eax, [eax]
	sub eax, edi
	mov edi, [ebx+8]
	not edi
	and edi, eax
	jmp loc_488227

loc_48830C:
	mov ebx, [esp+4]
	mov edx, [esp+8]
	mov eax, aResize ; "RESIZE"
	xor ecx, ecx
	call sub_484510
	mov ecx, eax
	test eax, eax
	jz loc_48829C
	mov ebx, [esi+14h]
	mov edx, [eax]
	mov eax, [esi]
	call sub_48A980
	mov edx, [esi+24h]
	mov eax, [esi+20h]
	mov [edx+20h], eax
	mov edx, eax
	mov eax, [esi+24h]
	mov [edx+24h], eax
	mov eax, [ecx+24h]
	mov [eax+20h], esi
	mov eax, [ecx+20h]
	mov [eax+24h], esi
	mov eax, [ecx]
	mov [esi], eax
	mov eax, [ecx+20h]
	mov [esi+20h], eax
	mov eax, [ecx+24h]
	mov [esi+24h], eax
	mov eax, [ecx+14h]
	mov [esi+14h], eax
	mov eax, [ecx+10h]
	mov [esi+10h], eax
	mov eax, ecx
	call sub_484D6C
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	mov eax, [esp+8]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48838C:
	mov eax, edi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_488128 endp

sub_488168: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_4848EC
	call sub_488128
	pop ebx
	ret
;sub_488168 endp

sub_488396: ;SUBROUTINE
	push ecx
	push edx
	push eax
	call SetCurrentDirectoryA_wrap
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_488396 endp

sub_4883C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 140h
	mov edx, dword [hFindFile]
	xor esi, esi
	cmp edx, 0FFFFFFFFh
	jz loc_4883E1
	mov edi, FileName

loc_4883DD:
	test esi, esi
	jz loc_4883EF

loc_4883E1:
	mov eax, esi
	add esp, 140h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4883EF:
	mov eax, esp
	push eax ; lpFindFileData
	mov ecx, dword [hFindFile]
	push ecx ; hFindFile
	call FindNextFileA_wrap
	test eax, eax
	jz loc_488443
	mov ebx, dword [dword_563F30]
	xor ah, ah
	mov edx, byte_563F34
	mov byte FileName[ebx], ah
	mov eax, edi
	call strncpy_
	mov ebx, 104h
	lea edx, [esp+2Ch]
	mov eax, edi
	call strncat_
	mov esi, edi
	jmp loc_4883DD

loc_488443:
	mov ebx, dword [hFindFile]
	push ebx ; hFindFile
	mov esi, 0FFFFFFFFh
	call FindClose_wrap
	mov dword [hFindFile], esi
	xor eax, eax
	add esp, 140h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4883C0 endp

sub_48846C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 140h
	mov esi, eax
	mov edx, dword [hFindFile]
	cmp edx, 0FFFFFFFFh
	jnz loc_4884F3

loc_488488:
	mov ebx, 104h
	mov eax, byte_563F34
	mov edx, esi
	mov edi, byte_563F34
	call strncpy_
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov eax, ecx
	test ecx, ecx
	jle loc_4884C3

loc_4884AE:
	mov dl, byte byte_563F34[eax]
	cmp dl, 5Ch
	jz loc_4884C3
	cmp dl, 3Ah
	jz loc_4884C3
	dec eax
	test eax, eax
	jg loc_4884AE

loc_4884C3:
	test eax, eax
	jnz loc_4884FD

loc_4884C7:
	mov dword [dword_563F30], eax
	mov eax, esp
	push eax ; lpFindFileData
	push byte_563F34 ; lpFileName
	call FindFirstFileA_wrap
	mov dword [hFindFile], eax
	cmp eax, 0FFFFFFFFh
	jnz loc_488500
	xor eax, eax
	add esp, 140h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4884F3:
	push edx ; hFindFile
	call FindClose_wrap
	jmp loc_488488

loc_4884FD:
	inc eax
	jmp loc_4884C7

loc_488500:
	mov edx, byte_563F34
	mov ebx, dword [dword_563F30]
	xor cl, cl
	mov eax, FileName
	mov byte FileName[ebx], cl
	call strncpy_
	mov ebx, 104h
	lea edx, [esp+2Ch]
	mov eax, FileName
	call strncat_
	mov eax, FileName
	add esp, 140h
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48846C endp

sub_488570: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 0Ch
	lea ecx, [esp+8]
	lea ebx, [esp+4]
	mov edx, esp
	call sub_4877BC
	mov edx, [esp]
	test edx, edx
	jnz loc_488596
	mov eax, [esp]
	add esp, 0Ch
	pop edx
	pop ecx
	pop ebx
	ret

loc_488596:
	mov eax, edx
	mov ecx, 1
	call sub_487950
	mov [esp], ecx
	mov eax, [esp]
	add esp, 0Ch
	pop edx
	pop ecx
	pop ebx
	ret
;sub_488570 endp

sub_4885B0: ;SUBROUTINE
	mov eax, edx
	mov edx, ebx
	mov ebx, dword [dword_564140]
	sar edx, 1
	jmp sub_48A031
;sub_4885B0 endp

sub_4885C4: ;SUBROUTINE
	mov eax, edx
	mov edx, ebx
	mov ebx, dword [dword_564140]
	jmp sub_48A031
;sub_4885C4 endp

sub_4885D4: ;SUBROUTINE
	mov eax, edx
	mov edx, ebx
	mov ebx, dword [dword_564140]
	add edx, edx
	jmp sub_48A031
;sub_4885D4 endp

sub_4885E8: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, edx
	mov esi, ebx

loc_4885EE:
	mov ebx, 3
	mov edx, dword [dword_564140]
	mov eax, ecx
	call sub_48C06F
	add ecx, 3
	dec esi
	jnz loc_4885EE
	pop esi
	pop ecx
	ret
;sub_4885E8 endp

sub_48860C: ;SUBROUTINE
	mov eax, edx
	mov edx, ebx
	mov ebx, dword [dword_564140]
	shl edx, 2
	jmp sub_48A031
;sub_48860C endp

sub_488620: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov edi, edx
	mov eax, [esp+24h]
	mov dl, byte [byte_4DB25C]
	cmp dl, 8
	jnb loc_488694
	cmp dl, 4
	jnz loc_488648
	and eax, 0Fh
	mov edx, eax
	shl edx, 4

loc_488646:
	or eax, edx

loc_488648:
	mov dword [dword_564140], eax
	mov [esp+4], bx
	mov [esp+6], cx
	xor dl, dl
	mov ecx, off_4DB648
	xor eax, eax
	mov [esp], dl
	mov al, byte [byte_4DB25D]
	mov edx, [esp]
	and eax, 0FFh
	mov ebx, edi
	or edx, eax
	mov eax, esp
	mov ebp, edx
	mov [esp], edx
	and ebp, 0FFh
	mov edx, esi
	mov [esp], ebp
	call sub_4A10BC
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_488694:
	jbe loc_4886AE
	cmp dl, 0Fh
	jb loc_488648
	jbe loc_4886A2
	cmp dl, 10h
	jnz loc_488648

loc_4886A2:
	and eax, 0FFFFh
	mov edx, eax
	shl edx, 10h
	jmp loc_488646

loc_4886AE:
	and eax, 0FFh
	mov edx, eax
	shl edx, 8
	or eax, edx
	mov edx, eax
	shl edx, 10h
	jmp loc_488646
;sub_488620 endp

sub_4886D0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, dword [dword_59C600]
	call sub_489F48
	test ecx, ecx
	jz loc_488704
	push edx
	call getHwnd
	mov ecx, dword [dword_564254]
	mov edx, eax
	mov eax, ecx
	call iSNDdirectstart_
	pop edx
	mov eax, dword [dword_59C600]
	call sub_489F60
	pop ecx
	ret

loc_488704:
	call iSNDdirectstop_
	mov eax, dword [dword_59C600]
	call sub_489F60
	pop ecx
	ret
;sub_4886D0 endp

sub_488718: ;SUBROUTINE
	cmp dword [dword_4DB67C], 0
	jz loc_48872A
	xor eax, eax
	ret

loc_48872A:
	push edx
	push ebx
	push ecx

	mov dword [dword_4DB67C], 1

	call iSNDdllversion_
	cmp eax, 60002h
	jz loc_488718_sndsetfunc
	mov eax, 0FFFFFFF5h
	jmp loc_488718_end

loc_488718_sndsetfunc:
	xor eax, eax
	push eax
	push sub_4A5170
	push eax
	push eax
	push sub_4A7CBC
	call iSNDdirectsetfunctions_wrap
	xor eax, eax

loc_488718_end:
	pop ecx
	pop ebx
	pop edx
	ret
;sub_488718 endp

sub_48883C: ;SUBROUTINE
	push ecx
	push edx
	call sub_488718
	call getHwnd
	call iSNDdirectcaps_
	mov edx, eax
	test eax, eax
	jle loc_48885A
	or edx, 10000h

loc_48885A:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_48883C endp

sub_488898: ;SUBROUTINE
	mov dword [dword_4DB678], eax
	xor eax, eax
	ret
;sub_488898 endp

sub_48890C: ;SUBROUTINE
	mov eax, dword [dword_59C600]
	call sub_489F48
	call iSNDdirectserve_
	mov eax, dword [dword_59C600]
	jmp sub_489F60
;sub_48890C endp

sub_488928: ;SUBROUTINE
	push ebx
	sub esp, 4
	cmp dword [esp+1Ch], 0
	jz loc_488976
	cmp byte [byte_4DB66C], 0
	jnz loc_488AC8

loc_488940:
	cmp byte [byte_4DB66D], 0
	jz loc_488958
	xor eax, eax
	xor bl, bl
	call sub_4821D0
	mov byte [byte_4DB66D], bl

loc_488958:
	xor ecx, ecx
	call iSNDdirectstop_

loc_488960:
	mov dword [dword_4DB670], ecx

loc_488966:
	mov byte [byte_4DB66F], 1
	xor eax, eax
	add esp, 4
	pop ebx
	ret 18h

loc_488976:
	mov eax, dword [dword_564250]
	mov [esp], eax
	call getHwnd
	call iSNDdirectcaps_
	test eax, eax
	jle loc_488A49
	mov bh, [esp+1]
	test bh, 8
	jz loc_488A5E
	mov dword [dword_4DB674], 5622h

loc_4889A8:
	mov eax, [esp]
	mov dl, byte [byte_4DB66E]
	mov dword [dword_564254], eax
	test dl, dl
	jnz loc_4889CC
	mov eax, sub_49FD50
	mov dh, 1
	call atexit_
	mov byte [byte_4DB66E], dh

loc_4889CC:
	mov edx, sub_4A5678
	mov eax, dword [dword_564254]
	mov ecx, 0FFFFFFFFh
	call sub_4A7028
	mov edx, dword [dword_59BFA0]
	mov ebx, ecx
	xor eax, eax
	call sub_488ADC
	call getHwnd
	mov edx, eax
	mov eax, [esp]
	call iSNDdirectstart_
	mov dword [dword_4DB670], eax
	test eax, eax
	jl loc_488966
	cmp byte [byte_4DB66C], 0
	jnz loc_488A27
	mov eax, sub_48890C
	mov bh, 1
	call sub_4838CC
	mov byte [byte_4DB66C], bh

loc_488A27:
	cmp byte [byte_4DB66D], 0
	jnz loc_488A42
	mov eax, sub_4886D0
	mov ch, 1
	call sub_4821D0
	mov byte [byte_4DB66D], ch

loc_488A42:
	xor ecx, ecx
	jmp loc_488960

loc_488A49:
	mov dword [dword_4DB670], eax
	mov byte [byte_4DB66F], 1
	xor eax, eax
	add esp, 4
	pop ebx
	ret 18h

loc_488A5E:
	test bh, 4
	jz loc_488A72
	mov dword [dword_4DB674], 3E80h
	jmp loc_4889A8

loc_488A72:
	test bh, 10h
	jz loc_488A86
	mov dword [dword_4DB674], 7D00h
	jmp loc_4889A8

loc_488A86:
	test bh, 20h
	jz loc_488A9A
	mov dword [dword_4DB674], 0AC44h
	jmp loc_4889A8

loc_488A9A:
	test bh, 2
	jz loc_488AAE
	mov dword [dword_4DB674], 2B11h
	jmp loc_4889A8

loc_488AAE:
	mov dword [dword_4DB670], 0FFFFFFF8h
	mov byte [byte_4DB66F], 1
	xor eax, eax
	add esp, 4
	pop ebx
	ret 18h

loc_488AC8:
	xor dl, dl
	xor eax, eax
	mov byte [byte_4DB66C], dl
	call sub_4838CC
	jmp loc_488940
;sub_488928 endp

sub_488ADC: ;SUBROUTINE
	cmp edx, 28h
	jnb loc_488AF7
	cmp edx, 0Ah
	jb loc_488AF4
	jbe loc_488B03
	cmp edx, 14h
	jb loc_488AF4
	jbe loc_488B03
	cmp edx, 1Eh
	jz loc_488B03

loc_488AF4:
	xor eax, eax
	ret

loc_488AF7:
	jbe loc_488B03
	cmp edx, 64h
	jnb loc_488B10
	cmp edx, 32h
	jnz loc_488AF4

loc_488B03:
	mov eax, dword [dword_4DB674]
	call sub_4A7D5C
	xor eax, eax
	ret

loc_488B10:
	jbe loc_488B03
	cmp edx, 6Eh
	jb loc_488AF4
	jbe loc_488B03
	cmp edx, 78h
	jz loc_488B03
	xor eax, eax
	ret
;sub_488ADC endp

sub_488B24: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jnz sub_488ADC
	jmp sub_488B30
;sub_488B24 endp

sub_488B30: ;SUBROUTINE
	xor eax, eax
	ret
;sub_488B30 endp

sub_488B34: ;SUBROUTINE
	push ecx
	mov dword [dword_564250], eax
	call sub_488718
	cmp dword [dword_4DABCC], 0
	jnz loc_488B4F

loc_488B48:
	mov eax, 0FFFFFFF0h
	pop ecx
	ret

loc_488B4F:
	call getHwnd
	test eax, eax
	jz loc_488B48
	push ebx
	push sub_488928
	push 8200h
	call sub_482270
	xor ah, ah
	mov byte [byte_4DB66F], ah
	mov eax, 8200h
	xor ecx, ecx
	xor ebx, ebx
	xor edx, edx
	call sub_4821E0
	cmp byte [byte_4DB66F], 0
	jnz loc_488B9C
	xor edx, edx

loc_488B8B:
	mov eax, edx
	call sub_489B9C
	cmp dl, byte [byte_4DB66F]
	jz loc_488B8B

loc_488B9C:
	mov eax, dword [dword_4DB670]
	pop ebx
	pop ecx
	ret
;sub_488B34 endp

sub_488BA4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	xor ah, ah
	mov byte [byte_4DB66F], ah
	mov edx, 1
	mov eax, 8200h
	xor ecx, ecx
	xor ebx, ebx
	call sub_4821E0
	test eax, eax
	jz loc_488BE6

loc_488BC6:
	cmp byte [byte_4DB66F], 0
	jz loc_488BDD
	mov eax, dword [dword_4DB670]
	pop edx
	pop ecx
	pop ebx
	ret

loc_488BDD:
	xor eax, eax
	call sub_489B9C
	jmp loc_488BC6

loc_488BE6:
	cmp byte [byte_4DB66C], 0
	jz loc_488BFC
	xor dh, dh
	mov byte [byte_4DB66C], dh
	call sub_4838CC

loc_488BFC:
	cmp byte [byte_4DB66D], 0
	jz loc_488C14
	xor eax, eax
	xor bh, bh
	call sub_4821D0
	mov byte [byte_4DB66D], bh

loc_488C14:
	xor edx, edx
	mov dword [dword_4DB670], edx
	mov eax, dword [dword_4DB670]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_488BA4 endp

sub_488CE0: ;SUBROUTINE
	test edx, edx
	jz loc_488CED
	add [eax+18h], edx
	mov eax, 8
	ret

loc_488CED:
	lea edx, [eax+18h]
	add [eax+18h], edx
	mov eax, 8
	ret
;sub_488CE0 endp

sub_488CFC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 24h
	mov [esp+10h], edx
	mov ebp, ebx
	mov [esp+0Ch], ecx
	mov ebx, [esp+38h]
	mov edx, ebp
	shl edx, 4
	xor cl, cl
	mov byte dword_564155[edx], cl
	mov byte (dword_564155+1)[edx], 1
	xor ch, ch
	mov word word_56415A[edx], cx
	mov esi, eax
	mov edx, [eax]
	xor edi, edi
	cmp edx, 6C704D54h
	jnz loc_488E39
	cmp byte [eax+4], 0
	jnz loc_488E47
	cmp byte [eax+5], 10h
	jnz loc_488E55
	cmp byte [eax+6], 1
	jnz loc_488E55
	mov dword [esp+1Ch], 4

loc_488D65:
	cmp dword [esp+10h], 2
	jnz loc_488EA0
	xor ecx, ecx
	mov eax, 0FFFFFFFFh
	mov [esp+14h], ecx
	mov [esp+18h], eax
	mov [esp+20h], eax

loc_488D83:
	mov eax, ebp
	shl eax, 4
	mov dx, [esi+0Ah]
	mov word word_564150[eax], dx
	mov dl, [esi+5]
	mov byte byte_564152[eax], dl
	mov dl, [esi+6]
	mov byte byte_564153[eax], dl
	mov dl, [esi+7]
	mov byte byte_564154[eax], dl
	mov edx, [esp+14h]
	mov dword dword_56415C[eax], edx
	xor eax, eax
	mov edx, dword [dword_4DB674]
	mov ax, [esi+0Ah]
	lea ecx, [esp+4]
	call sub_4A7E20
	mov ebx, esp
	mov edx, [esp+34h]
	mov [esp+8], eax
	mov eax, [esp+0Ch]
	call sub_4A7E60
	add edi, dword [dword_4DB678]
	cmp edi, 64h
	jle loc_488EDE
	mov edi, 64h

loc_488DF4:
	mov ebx, [esp+3Ch]
	push ebx
	push edi
	mov edi, [esp+10h]
	push edi
	mov eax, [esp+10h]
	push eax
	mov edx, [esp+10h]
	push edx
	mov ecx, [esp+34h]
	push ecx
	mov ebx, [esp+30h]
	mov edi, [esp+2Ch]
	push ebx
	mov eax, [esi+18h]
	mov edx, [esp+38h]
	push edi
	mov ecx, [esp+30h]
	xor ebx, ebx
	push eax
	mov bl, [esi+7]
	mov eax, ebp
	call sub_4A734C
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_488E39:
	mov eax, 0FFFFFFF9h
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_488E47:
	mov eax, 0FFFFFFF5h
	add esp, 24h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_488E55:
	cmp byte [esi+5], 10h
	jnz loc_488E6E
	cmp byte [esi+6], 2
	jnz loc_488E6E
	mov dword [esp+1Ch], 8
	jmp loc_488D65

loc_488E6E:
	cmp byte [esi+5], 8
	jnz loc_488E87
	cmp byte [esi+6], 1
	jnz loc_488E87
	mov dword [esp+1Ch], 1
	jmp loc_488D65

loc_488E87:
	cmp byte [esi+5], 8
	jnz loc_488E39
	cmp byte [esi+6], 2
	jnz loc_488E39
	mov dword [esp+1Ch], 2
	jmp loc_488D65

loc_488EA0:
	mov eax, [esi+0Ch]
	mov [esp+14h], eax
	mov eax, [esi+10h]
	mov [esp+18h], eax
	mov eax, [esi+14h]
	mov edx, [esp+18h]
	mov [esp+20h], eax
	cmp edx, 0FFFFFFFFh
	jge loc_488EC6
	mov dword [esp+18h], 0FFFFFFFFh

loc_488EC6:
	cmp dword [esp+20h], 0FFFFFFFFh
	jge loc_488D83
	mov dword [esp+20h], 0FFFFFFFFh
	jmp loc_488D83

loc_488EDE:
	test edi, edi
	jge loc_488DF4
	xor edi, edi
	jmp loc_488DF4
;sub_488CFC endp

off_488EF0: dd loc_48900A
	dd loc_489037 ; jump table for switch statement
	dd loc_48905F
	dd loc_48904B
	dd loc_489023
	dd loc_489073
	dd loc_489087
	dd loc_488FF1
	dd loc_488FF1
	dd loc_48901B
	dd loc_488FF1
	dd loc_488FF1
	dd loc_488FF1
	dd loc_488FF1
	dd loc_488FF1
	dd loc_488FF1
	dd loc_48909B
	dd loc_4890AD

sub_488F38: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 30h
	mov esi, edx
	mov [esp+14h], ebx
	mov [esp+10h], ecx
	mov ebx, 0FFFFFFFFh
	mov ebp, 5622h
	mov ecx, 10h
	xor edx, edx
	mov edi, [esp+10h]
	mov [esp+1Ch], edx
	mov [esp+18h], edx
	mov [esp+24h], ebx
	mov [esp+28h], ebx
	mov [esp+4], ebp
	mov [esp+2Ch], ecx
	shl edi, 4
	mov edx, 1
	add edi, word_564150
	xor ebx, ebx
	mov [esp+0Ch], edx
	mov byte [edi+5], 0
	mov dl, [esp+58h]
	xor ebp, ebp
	mov [edi+6], dl
	mov edx, [esp+50h]
	mov [esp+20h], ebx
	mov [edi+0Ah], dx
	test eax, eax
	jnz loc_488FF5

loc_488FA6:
	mov ah, [esi]
	cmp ah, 0FFh
	jz loc_4890C0
	cmp ah, 0FEh
	jz loc_4890C0
	xor ebx, ebx
	mov bl, ah
	inc esi
	cmp ebx, 0FCh
	jz loc_488FA6
	xor ecx, ecx
	mov cl, [esi]
	cmp ecx, 0FFh
	jnz loc_488FE5
	inc esi
	mov edx, 4
	mov eax, esi
	call sub_4A7E90
	mov ecx, eax
	add esi, 3

loc_488FE5:
	lea eax, [ebx-81h]
	inc esi
	cmp eax, 11h ; switch 18 cases
	jbe loc_489003

loc_488FF1:
	add esi, ecx ; jumptable 00489003 default case
	jmp loc_488FA6

loc_488FF5:
	mov eax, 0FFFFFFF9h
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	ret 1Ch

loc_489003:
	jmp off_488EF0[eax*4] ; switch jump

loc_48900A:
	mov edx, ecx ; jumptable 00489003 case 0
	mov eax, esi
	call sub_4A7E90
	mov [esp+2Ch], eax
	add esi, ecx
	jmp loc_488FA6

loc_48901B:
	mov [esp+1Ch], esi ; jumptable 00489003 case 9
	add esi, ecx
	jmp loc_488FA6

loc_489023:
	mov edx, ecx ; jumptable 00489003 case 4
	mov eax, esi
	call sub_4A7E90
	mov [esp+18h], eax
	add esi, ecx
	jmp loc_488FA6

loc_489037:
	mov edx, ecx ; jumptable 00489003 case 1
	mov eax, esi
	call sub_4A7E90
	mov [esp+0Ch], eax
	add esi, ecx
	jmp loc_488FA6

loc_48904B:
	mov edx, ecx ; jumptable 00489003 case 3
	mov eax, esi
	call sub_4A7E90
	mov [esp+4], eax
	add esi, ecx
	jmp loc_488FA6

loc_48905F:
	mov edx, ecx ; jumptable 00489003 case 2
	mov eax, esi
	call sub_4A7E90
	mov [esp+20h], eax
	add esi, ecx
	jmp loc_488FA6

loc_489073:
	mov edx, ecx ; jumptable 00489003 case 5
	mov eax, esi
	call sub_4A7E90
	mov [esp+24h], eax
	add esi, ecx
	jmp loc_488FA6

loc_489087:
	mov edx, ecx ; jumptable 00489003 case 6
	mov eax, esi
	call sub_4A7E90
	mov [esp+28h], eax
	add esi, ecx
	jmp loc_488FA6

loc_48909B:
	mov edx, ecx ; jumptable 00489003 case 16
	mov eax, esi
	call sub_4A7E90
	mov ebp, eax
	add esi, ecx
	jmp loc_488FA6

loc_4890AD:
	mov edx, ecx ; jumptable 00489003 case 17
	mov eax, esi
	call sub_4A7E90
	mov [edi+5], al
	add esi, ecx
	jmp loc_488FA6

loc_4890C0:
	cmp dword [esp+14h], 2
	jnz loc_4891AF
	xor esi, esi
	mov eax, 0FFFFFFFFh
	mov [esp+18h], esi
	mov [esp+24h], eax
	mov [esp+28h], eax

loc_4890DE:
	mov eax, [esp+4]
	mov [edi], ax
	mov al, [esp+2Ch]
	mov [edi+2], al
	mov al, [esp+0Ch]
	mov [edi+3], al
	mov al, [esp+20h]
	mov [edi+4], al
	mov eax, [esp+18h]
	mov dh, [edi+5]
	mov [edi+0Ch], eax
	test dh, dh
	jnz loc_4891EE
	cmp dword [esp+58h], 0
	jz loc_4891D6
	lea ecx, [esp+8]
	mov ebx, esp
	mov edx, [esp+44h]
	mov eax, [esp+40h]
	call sub_4A7E60

loc_48912A:
	cmp dword [esp+2Ch], 10h
	jnz loc_489252
	cmp dword [esp+0Ch], 1
	jnz loc_489252
	mov esi, 4

loc_489145:
	mov ebx, [esp+48h]
	mov eax, [esp+4]
	mov edx, dword [dword_4DB674]
	call sub_4A7E20
	add ebp, dword [dword_4DB678]
	cmp ebp, 64h
	jle loc_4892A0
	mov ebp, 64h

loc_48916C:
	mov ebx, [esp+4Ch]
	push ebx
	push ebp
	push eax
	mov edi, [esp+14h]
	push edi
	mov ebp, [esp+10h]
	push ebp
	mov eax, [esp+3Ch]
	push eax
	mov edx, [esp+3Ch]
	push edx
	mov ecx, [esp+34h]
	mov eax, [esp+38h]
	push ecx
	mov edx, esi
	mov ebx, [eax]
	mov ecx, [esp+34h]
	push ebx
	mov eax, [esp+34h]
	mov ebx, [esp+44h]
	call sub_4A734C
	add esp, 30h
	pop ebp
	pop edi
	pop esi
	ret 1Ch

loc_4891AF:
	cmp dword [esp+24h], 0FFFFFFFFh
	jge loc_4891BE
	mov dword [esp+24h], 0FFFFFFFFh

loc_4891BE:
	cmp dword [esp+28h], 0FFFFFFFFh
	jge loc_4890DE
	mov dword [esp+28h], 0FFFFFFFFh
	jmp loc_4890DE

loc_4891D6:
	lea ecx, [esp+8]
	mov ebx, esp
	mov edx, [esp+44h]
	mov eax, [esp+50h]
	call sub_4A8A30
	jmp loc_48912A

loc_4891EE:
	cmp dh, 1
	jnz loc_488FF5
	cmp dword [esp+0Ch], 1
	jnz loc_488FF5
	cmp dword [esp+58h], 0
	jz loc_48921D
	mov eax, [esp+40h]
	sub eax, 40h
	mov esi, eax
	mov [esp+50h], eax
	shl esi, 8
	mov [esp+50h], esi

loc_48921D:
	mov eax, [edi+6]
	sar eax, 18h
	push eax
	mov eax, [edi+5]
	lea ecx, [esp+0Ch]
	sar eax, 18h
	lea ebx, [esp+4]
	push eax
	mov edx, [esp+4Ch]
	mov eax, [esp+58h]
	call sub_4A8A60
	mov al, [esp]
	mov [edi+8], al
	mov al, [esp+8]
	mov [edi+9], al
	jmp loc_48912A

loc_489252:
	cmp dword [esp+2Ch], 10h
	jnz loc_48926A
	cmp dword [esp+0Ch], 2
	jnz loc_48926A
	mov esi, 8
	jmp loc_489145

loc_48926A:
	cmp dword [esp+2Ch], 8
	jnz loc_489281
	mov edi, [esp+0Ch]
	cmp edi, 1
	jnz loc_489281
	mov esi, edi
	jmp loc_489145

loc_489281:
	cmp dword [esp+2Ch], 8
	jnz loc_488FF5
	mov edx, [esp+0Ch]
	cmp edx, 2
	jnz loc_488FF5
	mov esi, edx
	jmp loc_489145

loc_4892A0:
	test ebp, ebp
	jge loc_48916C
	xor ebp, ebp
	jmp loc_48916C
;sub_488F38 endp

sub_4892B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ecx, eax
	mov [esp+4], edx
	mov edx, 8
	mov ah, [eax]
	xor edi, edi
	xor ebp, ebp
	mov [esp], edx
	cmp ah, 0FFh
	jz loc_4892E8

loc_4892D0:
	mov dh, [ecx]
	cmp dh, 0FEh
	jz loc_4892E8
	movzx esi, dh
	inc ecx
	cmp esi, 0FCh
	jnz loc_4892FD

loc_4892E3:
	cmp byte [ecx], 0FFh
	jnz loc_4892D0

loc_4892E8:
	mov eax, [esp+4]
	add eax, edi
	mov [ebp+0], eax
	mov eax, [esp]
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4892FD:
	xor ebx, ebx
	mov bl, [ecx]
	cmp ebx, 0FFh
	jnz loc_48931B
	inc ecx
	mov edx, 4
	mov eax, ecx
	call sub_4A7E90
	mov ebx, eax
	add ecx, 3

loc_48931B:
	inc ecx
	cmp esi, 80h
	jl loc_489337
	cmp esi, 88h
	jnz loc_48933B
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov edi, eax

loc_489337:
	add ecx, ebx
	jmp loc_4892E3

loc_48933B:
	cmp esi, 8Ah
	jnz loc_489337
	mov ebp, ecx
	add ecx, ebx
	jmp loc_4892E3
;sub_4892B0 endp

;	Attributes: thunk

sub_48934C: ;SUBROUTINE
	jmp sub_4A78B0
;sub_48934C endp

sub_489354: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 8
	mov edi, eax
	mov eax, edx
	mov esi, edi
	mov dl, 1
	shl esi, 4
	mov ecx, edi
	mov byte (dword_564155+1)[esi], dl
	lea edx, 0[ecx*4]
	sub edx, ecx
	mov bl, byte dword_564155[esi]
	shl edx, 5
	test bl, bl
	jz loc_4893E0
	cmp bl, 1
	jnz loc_4893F6
	mov ecx, dword (dword_564155+1)[esi]
	mov ebx, esp
	sar ecx, 18h
	sub eax, 40h
	push ecx
	mov ecx, dword dword_564155[esi]
	mov edx, dword dword_59BFDE[edx]
	sar ecx, 18h
	shl eax, 8
	push ecx
	sar edx, 18h
	lea ecx, [esp+0Ch]
	call sub_4A8A60
	mov al, [esp]
	mov byte (dword_564155+3)[esi], al
	mov al, [esp+4]
	mov byte byte_564159[esi], al

loc_4893CA:
	mov ebx, [esp+4]
	mov edx, [esp]
	mov eax, edi
	call sub_4A7850
	add esp, 8
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4893E0:
	lea ecx, [esp+4]
	mov edx, dword dword_59BFDE[edx]
	mov ebx, esp
	sar edx, 18h
	call sub_4A7E60
	jmp loc_4893CA

loc_4893F6:
	mov eax, 0FFFFFFF9h
	add esp, 8
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_489354 endp

sub_489404: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov edi, edx
	mov esi, eax
	shl esi, 4
	shl eax, 2
	add esi, word_564150
	sub eax, ebp
	mov [esi+0Ah], dx
	shl eax, 5
	mov dl, [esi+5]
	mov byte [esi+6], 0
	cmp dl, 1
	jz loc_489462
	test dl, dl
	jnz loc_489497
	lea ecx, [esp+4]
	mov edx, dword dword_59BFDE[eax]
	mov ebx, esp
	sar edx, 18h
	mov eax, edi
	call sub_4A8A30

loc_48944C:
	mov ebx, [esp+4]
	mov edx, [esp]
	mov eax, ebp
	call sub_4A7850
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_489462:
	mov edx, [esi+6]
	sar edx, 18h
	push edx
	mov edx, [esi+5]
	sar edx, 18h
	lea ecx, [esp+8]
	push edx
	mov edx, dword dword_59BFDE[eax]
	lea ebx, [esp+8]
	sar edx, 18h
	mov eax, edi
	call sub_4A8A60
	mov al, [esp]
	mov [esi+8], al
	mov al, [esp+4]
	mov [esi+9], al
	jmp loc_48944C

loc_489497:
	mov eax, 0FFFFFFF9h
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_489404 endp

sub_4894A4: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 8
	mov esi, eax
	mov ecx, eax
	shl eax, 2
	shl ecx, 4
	sub eax, esi
	mov bl, byte dword_564155[ecx]
	shl eax, 5
	test bl, bl
	jnz loc_48950D
	cmp byte (dword_564155+1)[ecx], 0
	jz loc_4894F7
	lea ecx, [esp+4]
	mov eax, dword dword_59BFBC[eax]
	mov ebx, esp
	sar eax, 18h
	call sub_4A7E60

loc_4894E1:
	mov ebx, [esp+4]
	mov edx, [esp]
	mov eax, esi
	call sub_4A7850
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_4894F7:
	xor eax, eax
	mov ebx, esp
	mov ax, word word_56415A[ecx]
	lea ecx, [esp+4]
	call sub_4A8A30
	jmp loc_4894E1

loc_48950D:
	cmp bl, 1
	jnz loc_48956D
	push edi
	cmp byte (dword_564155+1)[ecx], 0
	jz loc_48952B
	mov edi, dword dword_59BFBC[eax]
	sar edi, 18h
	sub edi, 40h
	shl edi, 8

loc_48952B:
	mov ebp, esi
	shl ebp, 4
	mov eax, dword (dword_564155+1)[ebp]
	sar eax, 18h
	push eax
	mov eax, dword dword_564155[ebp]
	sar eax, 18h
	lea ecx, [esp+0Ch]
	push eax
	lea ebx, [esp+0Ch]
	mov eax, edi
	call sub_4A8A60
	mov al, [esp+4]
	mov byte (dword_564155+3)[ebp], al
	mov al, [esp+8]
	mov byte byte_564159[ebp], al
	pop edi
	jmp loc_4894E1

loc_48956D:
	mov eax, 0FFFFFFF9h
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4894A4 endp

sub_48957C: ;SUBROUTINE
	push ebx
	push edx
	mov edx, eax
	shl edx, 4
	mov bl, byte dword_564155[edx]
	test bl, bl
	jz loc_48959A
	cmp bl, 1
	jz loc_48959A
	mov eax, 0FFFFFFF9h
	pop edx
	pop ebx
	ret

loc_48959A:
	call sub_4A7758
	pop edx
	pop ebx
	ret
;sub_48957C endp

sub_489690: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	shl eax, 4
	mov bl, byte dword_564155[eax]
	test bl, bl
	jz loc_4896AE
	cmp bl, 1
	jz loc_4896AE
	mov eax, 0FFFFFFF9h
	pop ecx
	pop ebx
	ret

loc_4896AE:
	push esi
	mov esi, ecx
	shl esi, 4
	mov eax, dword [dword_4DB674]
	mov si, word word_564150[esi]
	and esi, 0FFFFh
	mov ebx, edx
	mov edx, eax
	mov eax, esi
	call sub_4A7E20
	mov edx, eax
	mov eax, ecx
	call sub_4A77B8
	pop esi
	pop ecx
	pop ebx
	ret
;sub_489690 endp

sub_4896E0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, edx
	shl ebx, 4
	add ebx, word_564150
	lea edx, [eax+8]
	cmp byte [ebx+4], 7
	jz loc_489758
	cmp byte [ebx+4], 9
	jz loc_489754
	cmp byte [ebx+4], 8
	jz loc_489754
	cmp byte [ebx+4], 2
	jnz loc_4897AF
	mov word [eax], 0
	mov word [eax+2], 0
	mov word [eax+4], 0
	mov word [eax+6], 0
	mov al, [ebx+3]
	mov esi, edx
	cmp al, 1
	jnz loc_489742
	mov ebx, 2
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv ebx
	test edx, edx
	jz loc_489740
	inc ecx

loc_489740:
	sar ecx, 1

loc_489742:
	xor eax, eax
	test ecx, ecx
	jle loc_489754
	mov edx, esi

loc_48974A:
	inc eax
	mov byte [edx], 0
	inc edx
	cmp eax, ecx
	jl loc_48974A
	nop

loc_489754:
	pop edi
	pop esi
	pop ecx
	ret

loc_489758:
	mov word [eax], 0
	mov esi, 1Ch
	mov word [eax+2], 0
	mov edi, edx
	mov word [eax+4], 0
	add ecx, 1Bh
	mov word [eax+6], 0
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	idiv esi
	lea ecx, 0[eax*4]
	add ecx, eax
	mov eax, ecx
	shl ecx, 2
	sub ecx, eax
	cmp byte [ebx+3], 2
	jnz loc_48979A
	add ecx, ecx

loc_48979A:
	xor eax, eax
	test ecx, ecx
	jle loc_489754
	mov edx, edi

loc_4897A2:
	inc eax
	mov byte [edx], 0
	inc edx
	cmp eax, ecx
	jl loc_4897A2
	pop edi
	pop esi
	pop ecx
	ret

loc_4897AF:
	cmp byte [ebx+4], 0
	jnz loc_489754
	cmp byte [ebx+3], 2
	jnz loc_4897BD
	add ecx, ecx

loc_4897BD:
	mov dl, [ebx+2]
	cmp dl, 10h
	jnz loc_4897DC
	xor edx, edx
	test ecx, ecx
	jle loc_489754

loc_4897CB:
	inc edx
	mov word [eax], 0
	add eax, 2
	cmp edx, ecx
	jl loc_4897CB
	pop edi
	pop esi
	pop ecx
	ret

loc_4897DC:
	cmp dl, 8
	jnz loc_489754
	xor edx, edx
	test ecx, ecx
	jle loc_489754

loc_4897EF:
	inc edx
	mov byte [eax], 0
	inc eax
	cmp edx, ecx
	jl loc_4897EF
	pop edi
	pop esi
	pop ecx
	ret
;sub_4896E0 endp

sub_489800: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jz loc_489818
	cmp eax, 7Fh
	jg loc_489812
	test eax, eax
	jge loc_48981E

loc_489812:
	mov eax, 0FFFFFFF8h
	ret

loc_489818:
	mov eax, 0FFFFFFF6h
	ret

loc_48981E:
	push edx
	push ecx
	mov byte [byte_4DCEDE], al
	mov ecx, dword [dword_4DCE6C]
	mov edx, eax
	mov eax, ecx
	call sub_48999C
	xor eax, eax
	pop ecx
	pop edx
	ret
;sub_489800 endp

sub_489840: ;SUBROUTINE
	push edx
	push esi
	mov edx, eax
	mov ah, byte [byte_4DDA74]
	xor esi, esi
	test ah, ah
	jnz loc_48985A
	mov edx, 0FFFFFFF6h
	mov eax, edx
	pop esi
	pop edx
	ret

loc_48985A:
	push ecx
	push ebx
	call sub_4A5360
	mov eax, edx
	call sub_4A576C
	mov edx, eax
	test eax, eax
	jl loc_4898C4
	shl eax, 2
	sub eax, edx
	shl eax, 5
	xor ebx, ebx
	mov bl, byte byte_59BFEB[eax]
	test ebx, ebx
	jz loc_4898BB
	mov ecx, dword_59BFB0
	xor edx, edx

loc_489889:
	xor eax, eax
	mov al, [ecx+3Bh]
	cmp eax, ebx
	jnz loc_4898A4
	cmp byte [ecx+0Ch], 1
	jnz loc_4898A4
	cmp dword [ecx], 0
	jl loc_4898A4
	mov eax, edx
	call sub_48957C

loc_4898A4:
	inc edx
	add ecx, 60h
	cmp edx, 10h
	jl loc_489889

loc_4898AD:
	call sub_4A5374
	mov edx, esi
	pop ebx
	pop ecx
	mov eax, edx
	pop esi
	pop edx
	ret

loc_4898BB:
	mov eax, edx
	call sub_48957C
	jmp loc_4898AD

loc_4898C4:
	mov esi, 0FFFFFFF8h
	call sub_4A5374
	mov edx, esi
	pop ebx
	pop ecx
	mov eax, edx
	pop esi
	pop edx
	ret
;sub_489840 endp

sub_4898E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, edx
	call sub_4A576C
	mov ecx, eax
	test eax, eax
	jl loc_489969
	lea edx, 0[eax*4]
	sub edx, eax
	shl edx, 5
	mov eax, esi
	add edx, dword_59BFB0
	shl eax, 10h
	mov ebx, [edx+20h]
	cmp eax, ebx
	jz loc_489972
	push edi
	movzx edi, byte [edx+3Bh]
	test edi, edi
	jz loc_489978
	mov ecx, dword_59BFB0
	xor ebx, ebx

loc_489922:
	xor edx, edx
	mov dl, [ecx+3Bh]
	cmp edx, edi
	jnz loc_489959
	cmp byte [ecx+0Ch], 1
	jnz loc_489959
	cmp dword [ecx], 0
	jl loc_489959
	mov eax, esi
	shl eax, 10h
	mov [ecx+20h], eax
	mov eax, ebx
	mov dword [ecx+18h], 0
	call sub_4A8BF0
	mov edx, [ecx+2Eh]
	mov eax, ebx
	sar edx, 18h
	call sub_4894A4

loc_489959:
	inc ebx
	add ecx, 60h
	cmp ebx, 10h
	jl loc_489922
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_489969:
	mov eax, 0FFFFFFF8h
	pop esi
	pop ecx
	pop ebx
	ret

loc_489972:
	xor eax, ebx
	pop esi
	pop ecx
	pop ebx
	ret

loc_489978:
	mov [edx+20h], eax
	mov eax, ecx
	mov [edx+18h], edi
	call sub_4A8BF0
	mov edx, [edx+2Eh]
	mov eax, ecx
	sar edx, 18h
	call sub_4894A4
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4898E0 endp

sub_48999C: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp byte [byte_4DDA74], 0
	jz loc_4899B8
	cmp edx, 7Fh
	jg loc_4899B1
	test edx, edx
	jge loc_4899BF

loc_4899B1:
	mov eax, 0FFFFFFF8h
	pop ecx
	ret

loc_4899B8:
	mov eax, 0FFFFFFF6h
	pop ecx
	ret

loc_4899BF:
	call sub_4A5360
	mov eax, ecx
	call sub_4898E0
	mov edx, eax
	call sub_4A5374
	mov eax, edx
	pop ecx
	ret
;sub_48999C endp

sub_4899E0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	sub esp, 4
	mov ebx, dword [dword_4DB6A8]
	mov esi, dword [dword_4DB6A4]
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 3
	mov [esp], eax
	mov eax, esp
	mov ecx, ebx
	call sub_49CAD4
	mov esi, dword [dword_4DB6A4]
	mov ebx, eax
	test eax, eax
	jz loc_489A33
	push edx
	xor edx, edx
	test esi, esi
	jle loc_489A30

loc_489A1D:
	mov dword [ebx+4], 46524545h
	inc edx
	mov [ebx], ecx
	mov ecx, ebx
	add ebx, 18h
	cmp edx, esi
	jl loc_489A1D

loc_489A30:
	mov ebx, ecx
	pop edx

loc_489A33:
	mov dword [dword_4DB6A4], esi
	mov dword [dword_4DB6A8], ebx
	add esp, 4
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4899E0 endp

sub_489A48: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	push ebx ; dwMilliseconds
	push 0 ; bWaitAll
	push edx ; lpHandles
	push eax ; nCount
	call WaitForMultipleObjects_wrap
	mov ebx, eax
	test eax, eax
	jl loc_489A67
	cmp eax, edi
	jl loc_489A73

loc_489A67:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	ret

loc_489A73:
	mov eax, [esi+eax*4]
	pop edi
	pop esi
	pop ecx
	ret
;sub_489A48 endp

;	DWORD __stdcall StartAddress(LPVOID)
StartAddress: ;SUBROUTINE
	mov eax, [esp+4]
	call eax
	xor eax, eax
	ret 4
;StartAddress endp

sub_489A88: ;SUBROUTINE
	cmp dword [dword_564268], 0
	jz loc_489A92
	ret

loc_489A92:
	push edx
	push ecx
	call GetCurrentThreadId_wrap
	push 2 ; dwOptions
	push 0 ; bInheritHandle
	push 0 ; dwDesiredAccess
	push TargetHandle ; lpTargetHandle
	mov dword [dword_564264], eax
	call GetCurrentProcess_wrap
	push eax ; hTargetProcessHandle
	call GetCurrentThread_wrap
	push eax ; hSourceHandle
	call GetCurrentProcess_wrap
	push eax ; hSourceProcessHandle
	call DuplicateHandle_wrap
	mov ecx, 1
	call sub_4899E0
	mov dword [dword_564268], ecx
	pop ecx
	pop edx
	ret
;sub_489A88 endp

sub_489AE0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov esi, ebx
	mov ebx, [esp+14h]
	mov edi, esp
	push edi ; lpThreadId
	push 4 ; dwCreationFlags
	push eax ; lpParameter
	push StartAddress ; lpStartAddress
	push edx ; dwStackSize
	push 0 ; lpThreadAttributes
	call CreateThread_wrap
	mov edi, eax
	test eax, eax
	jz loc_489B4A
	cmp dword [dword_564268], 0
	jnz loc_489B19
	xor eax, eax
	call sub_489A88

loc_489B19:
	mov dword [ebx+0Ch], 0
	mov [ebx], edi
	mov [ebx+4], ebp
	mov [ebx+8], esi
	mov eax, [esp]
	mov edx, esi
	mov [ebx+10h], eax
	mov eax, ebx
	call sub_489CE0
	push edi ; hThread
	call ResumeThread_wrap
	push 0 ; ms
	call SDL_Delay_wrap
	add esp, 4

loc_489B4A:
	test edi, edi
	jz loc_489B5C
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_489B5C:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_489AE0 endp

sub_489B70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp eax, 0FFFFFFFFh
	jz loc_489B90
	mov ebx, [eax]

loc_489B7A:
	push 0 ; dwExitCode
	push ebx ; hThread
	call TerminateThread_wrap
	push ebx ; hObject
	call CloseHandle_wrap
	pop edx
	pop ecx
	pop ebx
	ret

loc_489B90:
	call GetCurrentThread_wrap
	mov ebx, eax
	jmp loc_489B7A
;sub_489B70 endp

sub_489B9C: ;SUBROUTINE
	push ecx
	push edx
	push eax ; ms
	call SDL_Delay_wrap
	add esp, 4
	pop edx
	pop ecx
	ret
;sub_489B9C endp

sub_489BE8: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	call GetCurrentThreadId_wrap
	mov ecx, dword [dword_564268]
	mov edx, eax
	test ecx, ecx
	jz loc_489C15

loc_489C00:
	test ebx, ebx
	jnz loc_489C24
	cmp edx, dword [dword_564264]
	jnz loc_489C1E

loc_489C0C:
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_489C15:
	xor eax, eax
	call sub_489A88
	jmp loc_489C00

loc_489C1E:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_489C24:
	cmp ebx, 0FFFFFFFFh
	jz loc_489C0C
	cmp edx, [ebx+10h]
	jz loc_489C0C
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_489BE8 endp

off_489CC4: dd loc_489D08
	dd loc_489D84 ; jump table for switch statement
	dd loc_489D73
	dd loc_489D65
	dd loc_489D5E
	dd loc_489D57
	dd loc_489D50

sub_489CE0: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov ebx, edx
	cmp dword [dword_564268], 0
	jz loc_489D19

loc_489CEF:
	test ecx, ecx
	jnz loc_489D22
	mov ecx, dword [TargetHandle]
	lea eax, [ebx+3] ; switch 7 cases
	cmp eax, 6
	ja loc_489D65 ; jumptable 00489D01 default case
	jmp off_489CC4[eax*4] ; switch jump

loc_489D08:
	mov eax, 0FFFFFFF1h ; jumptable 00489D01 case -3

loc_489D0D:
	push eax ; nPriority
	push ecx ; hThread
	call SetThreadPriority_wrap
	pop ecx
	pop ebx
	ret

loc_489D19:
	xor eax, eax
	call sub_489A88
	jmp loc_489CEF

loc_489D22:
	cmp ecx, 0FFFFFFFFh
	jz loc_489D38
	mov ecx, [ecx]
	lea eax, [ebx+3] ; switch 7 cases
	cmp eax, 6
	ja loc_489D65 ; jumptable 00489D01 default case
	jmp off_489CC4[eax*4] ; switch jump

loc_489D38:
	call GetCurrentThread_wrap
	mov ecx, eax
	lea eax, [ebx+3] ; switch 7 cases
	cmp eax, 6
	ja loc_489D65 ; jumptable 00489D01 default case
	jmp off_489CC4[eax*4] ; switch jump

loc_489D50:
	mov eax, 0Fh ; jumptable 00489D01 case 3
	jmp loc_489D0D

loc_489D57:
	mov eax, 2 ; jumptable 00489D01 case 2
	jmp loc_489D0D

loc_489D5E:
	mov eax, 1 ; jumptable 00489D01 case 1
	jmp loc_489D0D

loc_489D65:
	xor eax, eax ; jumptable 00489D01 default case
	push eax ; nPriority
	push ecx ; hThread
	call SetThreadPriority_wrap
	pop ecx
	pop ebx
	ret

loc_489D73:
	mov eax, 0FFFFFFFFh ; jumptable 00489D01 case -1
	push eax ; nPriority
	push ecx ; hThread
	call SetThreadPriority_wrap
	pop ecx
	pop ebx
	ret

loc_489D84:
	mov eax, 0FFFFFFFEh ; jumptable 00489D01 case -2
	push eax ; nPriority
	push ecx ; hThread
	call SetThreadPriority_wrap
	pop ecx
	pop ebx
	ret
;sub_489CE0 endp

sub_489E0C: ;SUBROUTINE
	push ecx
	push edx
	push 0 ; lpName
	push 0 ; bInitialState
	push 0 ; bManualReset
	push 0 ; lpEventAttributes
	call CreateEventA_wrap
	pop edx
	pop ecx
	ret
;sub_489E0C endp

sub_489E20: ;SUBROUTINE
	push ecx
	push edx ; hEvent
	call SetEvent_wrap
	pop ecx
	ret
;sub_489E20 endp

sub_489E2C: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 4
	mov [esp], eax
	mov edx, esp
	mov eax, 1
	xor ebx, ebx
	call sub_489A48
	cmp eax, [esp]
	jnz loc_489E52
	mov eax, 1
	add esp, 4
	pop edx
	pop ebx
	ret

loc_489E52:
	xor eax, eax
	add esp, 4
	pop edx
	pop ebx
	ret
;sub_489E2C endp

sub_489E5C: ;SUBROUTINE
	push ebx
	push edx
	sub esp, 4
	mov [esp], eax
	mov ebx, 0FFFFFFFFh
	mov edx, esp
	mov eax, 1
	call sub_489A48
	add esp, 4
	pop edx
	pop ebx
	ret
;sub_489E5C endp

sub_489ED8: ;SUBROUTINE
	push ebx
	mov ebx, 0FFFFFFFFh
	call sub_489A48
	pop ebx
	ret
;sub_489ED8 endp

;	Attributes: library function

CloseHandleCaller: ;SUBROUTINE
	push ecx
	push edx
	push eax ; hObject
	call CloseHandle_wrap
	pop edx
	pop ecx
	ret
;CloseHandleCaller endp

sub_489EF8: ;SUBROUTINE
	push ecx
	cmp dword [dword_4DB6A8], 0
	jz loc_489F10
	mov ecx, dword [dword_4DB6A8]
	test ecx, ecx
	jnz loc_489F23
	xor eax, eax
	pop ecx
	ret

loc_489F10:
	call sub_4899E0
	mov ecx, dword [dword_4DB6A8]
	test ecx, ecx
	jnz loc_489F23
	xor eax, eax
	pop ecx
	ret

loc_489F23:
	push edx
	push ebx
	mov eax, [ecx]
	mov edx, 18h
	mov dword [dword_4DB6A8], eax
	mov eax, ecx
	call sub_48A01C
	push ecx ; lpCriticalSection
	mov ebx, ecx
	call InitializeCriticalSection_wrap
	mov eax, ebx
	pop ebx
	pop edx
	pop ecx
	ret
;sub_489EF8 endp

sub_489F48: ;SUBROUTINE
	test eax, eax
	jnz loc_489F4D
	ret

loc_489F4D:
	push edx
	push ecx
	push eax ; lpCriticalSection
	call EnterCriticalSection_wrap
	mov eax, 1
	pop ecx
	pop edx
	ret
;sub_489F48 endp

sub_489F60: ;SUBROUTINE
	test eax, eax
	jnz loc_489F65
	ret

loc_489F65:
	push edx
	push ecx
	push eax ; lpCriticalSection
	call LeaveCriticalSection_wrap
	pop ecx
	pop edx
	ret
;sub_489F60 endp

sub_489F74: ;SUBROUTINE
	push ebx
	mov ebx, eax
	test eax, eax
	jnz loc_489F7D
	pop ebx
	ret

loc_489F7D:
	push edx
	push ecx
	push eax ; lpCriticalSection
	call DeleteCriticalSection_wrap
	mov eax, dword [dword_4DB6A8]
	mov dword [ebx+4], 46524545h
	mov dword [dword_4DB6A8], ebx
	mov [ebx], eax
	pop ecx
	pop edx
	pop ebx
	ret
;sub_489F74 endp

sub_489FD8: ;SUBROUTINE
	push ecx
	push edx
	call GetLastError_wrap
	mov edx, eax
	test eax, eax
	jnz loc_489FEA

loc_489FE7:
	pop edx
	pop ecx
	ret

loc_489FEA:
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_489FE7
	mov dword [dword_56426C], edx
	pop edx
	pop ecx
	ret
;sub_489FD8 endp

sub_48A01C: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_48A031
	pop ebx
	ret
;sub_48A01C endp

sub_48A026: ;SUBROUTINE
	mov bh, bl
	push eax
	mov eax, ebx
	shl eax, 10h
	or ebx, eax
	pop eax
	jmp sub_48A031
;sub_48A026 endp

sub_48A031: ;SUBROUTINE
	test eax, 7
	jnz loc_48A0E3

loc_48A03C:
	cmp edx, 0
	jl locret_48A080
	cmp bl, 0FFh
	jz loc_48A081
	cmp bl, bh
	jnz loc_48A081
	push ebx
	push ebx
	fld qword [esp]
	sub edx, 20h
	js loc_48A067

loc_48A054:
	fst qword [eax]
	fst qword [eax+8]
	fst qword [eax+10h]
	fst qword [eax+18h]
	lea eax, [eax+20h]
	sub edx, 20h
	jns loc_48A054

loc_48A067:
	add edx, 18h
	js loc_48A076

loc_48A06C:
	fst qword [eax]
	lea eax, [eax+8]
	sub edx, 8
	jns loc_48A06C

loc_48A076:
	fstp st0
	add esp, 8
	add edx, 8
	jnz loc_48A0BD

locret_48A080:
	ret

loc_48A081:
	sub edx, 20h
	js loc_48A0A5

loc_48A086:
	mov [eax], ebx
	mov [eax+4], ebx
	mov [eax+8], ebx
	mov [eax+0Ch], ebx
	mov [eax+10h], ebx
	mov [eax+14h], ebx
	mov [eax+18h], ebx
	mov [eax+1Ch], ebx
	lea eax, [eax+20h]
	sub edx, 20h
	jns loc_48A086

loc_48A0A5:
	add edx, 18h
	js loc_48A0B7

loc_48A0AA:
	mov [eax], ebx
	mov [eax+4], ebx
	lea eax, [eax+8]
	sub edx, 8
	jns loc_48A0AA

loc_48A0B7:
	add edx, 8
	jnz loc_48A0BD
	ret

loc_48A0BD:
	test edx, 4
	jz loc_48A0CA
	mov [eax], ebx
	lea eax, [eax+4]

loc_48A0CA:
	test edx, 2
	jz loc_48A0D8
	mov [eax], bx
	lea eax, [eax+2]

loc_48A0D8:
	test edx, 1
	jz locret_48A0E2
	mov [eax], bl

locret_48A0E2:
	ret

loc_48A0E3:
	test eax, 1
	jz loc_48A0F7
	cmp edx, 1
	jl loc_48A0F7
	mov [eax], bl
	lea eax, [eax+1]
	sub edx, 1

loc_48A0F7:
	test eax, 2
	jz loc_48A10C
	cmp edx, 2
	jl loc_48A10C
	mov [eax], bx
	lea eax, [eax+2]
	sub edx, 2

loc_48A10C:
	test eax, 4
	jz loc_48A120
	cmp edx, 4
	jl loc_48A120
	mov [eax], ebx
	lea eax, [eax+4]
	sub edx, 4

loc_48A120:
	jmp loc_48A03C
;sub_48A031 endp

sub_48A130: ;SUBROUTINE
	xor eax, eax
	ret
;sub_48A130 endp

sub_48A134: ;SUBROUTINE
	cmp dword [dword_4DBAC0], 0
	jnz loc_48A13E
	ret

loc_48A13E:
	call sub_48A2B4
	mov eax, dword_56428C
	call sub_48BA6C
	mov eax, dword_564270
	jmp sub_48BA6C
;sub_48A134 endp

sub_48A158: ;SUBROUTINE
	mov edx, [eax+0Ch]
	cmp dword [edx+0Ch], 0
	jnz loc_48A167
	mov eax, 1
	ret

loc_48A167:
	call dword [edx+0Ch]
	mov eax, 1
	ret
;sub_48A158 endp

sub_48A170: ;SUBROUTINE
	push ebx
	push edx
	mov edx, sub_48A158
	mov eax, dword_56428C
	xor ebx, ebx
	call sub_48BF74
	pop edx
	pop ebx
	ret
;sub_48A170 endp

sub_48A188: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov edx, ebx
	mov ebx, ecx
	mov ecx, [esp+0Ch]
	cmp dword [dword_4DBAC0], 0
	jz loc_48A253

loc_48A1A3:
	test esi, esi
	jz loc_48A205
	cmp dword [esi+24h], 0
	jnz loc_48A1B4
	mov dword [esi+24h], 2

loc_48A1B4:
	cmp dword [esi+28h], 0
	jnz loc_48A1C1
	mov dword [esi+28h], 4

loc_48A1C1:
	cmp dword [esi+2Ch], 0
	jnz loc_48A1CE
	mov dword [esi+2Ch], 6

loc_48A1CE:
	cmp dword [esi+14h], 0
	jnz loc_48A1DB
	mov dword [esi+14h], sub_48A130

loc_48A1DB:
	cmp dword [esi+1Ch], 0
	jnz loc_48A1E8
	mov dword [esi+1Ch], sub_48A130

loc_48A1E8:
	cmp dword [esi+18h], 0
	jnz loc_48A1F5
	mov dword [esi+18h], sub_48A130

loc_48A1F5:
	cmp dword [esi+20h], 0
	jnz loc_48A202
	mov dword [esi+20h], sub_48A130

loc_48A202:
	mov [esi+0Ch], edi

loc_48A205:
	test esi, esi
	jz loc_48A228
	cmp dword [edi+0Ch], 0
	jz loc_48A228
	cmp dword [dword_4DBAC4], 0
	jnz loc_48A222
	mov eax, sub_48A170
	call sub_4A3F04

loc_48A222:
	inc dword [dword_4DBAC4]

loc_48A228:
	mov eax, esi
	call dword [edi+4]
	mov edx, eax
	test esi, esi
	jz loc_48A24C
	cmp dword [edi+0Ch], 0
	jz loc_48A24C
	test eax, eax
	jnz loc_48A24C
	mov ebx, dword [dword_4DBAC4]
	dec ebx
	mov dword [dword_4DBAC4], ebx
	jz loc_48A25D

loc_48A24C:
	mov eax, edx
	pop edi
	pop esi
	ret 4

loc_48A253:
	call sub_48A270
	jmp loc_48A1A3

loc_48A25D:
	mov eax, sub_48A170
	call sub_4A3F6C
	mov eax, edx
	pop edi
	pop esi
	ret 4
;sub_48A188 endp

sub_48A270: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DBAC0]
	test edx, edx
	jz loc_48A27D
	pop edx
	ret

loc_48A27D:
	push ecx
	push ebx
	mov eax, dword_56428C
	xor ebx, ebx
	call sub_48BA2C
	mov eax, dword_564270
	xor ebx, ebx
	xor edx, edx
	call sub_48BA2C
	mov eax, sub_48A134
	mov ecx, 1
	call atexit_
	mov dword [dword_4DBAC0], ecx
	pop ebx
	pop ecx
	pop edx
	ret
;sub_48A270 endp

sub_48A2B4: ;SUBROUTINE
	push edx
	cmp dword [dword_4DBAC0], 0
	jz loc_48A2DE

loc_48A2BE:
	mov eax, dword_56428C
	xor edx, edx
	call sub_48BD74
	test eax, eax
	jnz loc_48A2E0

loc_48A2CE:
	mov eax, dword_564270
	xor edx, edx
	call sub_48BD74
	test eax, eax
	jnz loc_48A2E7

loc_48A2DE:
	pop edx
	ret

loc_48A2E0:
	call sub_48A308
	jmp loc_48A2BE

loc_48A2E7:
	call sub_48A308
	jmp loc_48A2CE
;sub_48A2B4 endp

sub_48A2F0: ;SUBROUTINE
	test eax, eax
	jz loc_48A2FA
	cmp dword [eax+4], 0
	jnz loc_48A2FD

loc_48A2FA:
	xor eax, eax
	ret

loc_48A2FD:
	push ecx
	mov ecx, [eax+0Ch]
	call dword [ecx+8]
	pop ecx
	ret
;sub_48A2F0 endp

sub_48A308: ;SUBROUTINE
	push edx
	mov edx, eax
	test eax, eax
	jz loc_48A315
	cmp dword [eax+10h], 0
	jnz loc_48A319

loc_48A315:
	xor eax, eax
	pop edx
	ret

loc_48A319:
	push edi
	push esi
	push ecx
	mov ecx, [eax+0Ch]
	call dword [ecx+10h]
	mov ecx, eax
	test eax, eax
	jz loc_48A352
	mov eax, [edx+0Ch]
	cmp dword [eax+0Ch], 0
	jz loc_48A352
	mov esi, dword [dword_4DBAC4]
	test esi, esi
	jz loc_48A352
	lea edi, [esi-1]
	mov dword [dword_4DBAC4], edi
	test edi, edi
	jnz loc_48A352
	mov eax, sub_48A170
	call sub_4A3F6C

loc_48A352:
	mov eax, ecx
	pop ecx
	pop esi
	pop edi
	pop edx
	ret
;sub_48A308 endp

sub_48A980: ;SUBROUTINE
	push ecx
	mov ecx, edx
	cmp edx, eax
	ja loc_48A9A4

loc_48A987:
	cmp dword [dword_4DABAC], 0
	jnz loc_48A9BF
	cmp dword [dword_4DABA4], 0
	jz loc_48A9CC
	mov edx, eax
	mov eax, ecx
	call sub_4AB61D

loc_48A9A2:
	pop ecx
	ret

loc_48A9A4:
	lea edx, [eax+ebx]
	cmp ecx, edx
	jnb loc_48A987
	mov eax, edx
	lea edx, [ecx+ebx]

loc_48A9B0:
	dec ebx
	cmp ebx, 0FFFFFFFFh
	jz loc_48A9A2
	dec edx
	mov cl, [eax-1]
	dec eax
	mov [edx], cl
	jmp loc_48A9B0

loc_48A9BF:
	mov edx, eax
	mov eax, ecx
	call sub_4AB6F9
	emms
	pop ecx
	ret

loc_48A9CC:
	mov edx, eax
	mov eax, ecx
	call sub_4A14D5
	pop ecx
	ret
;sub_48A980 endp

sub_48A9E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 14h
	mov esi, eax
	mov edx, 6
	push 452h ; hostshort
	mov ebx, 0FFh
	mov [esp+4], dx
	call htons_wrap
	mov edx, 4
	mov [esp+0Ch], ax
	lea eax, [esp+2]
	call sub_48A026
	mov ebx, 0FFh
	mov edx, 6
	lea eax, [esp+6]
	call sub_48A026
	mov ebx, 2
	mov edx, 1
	lea eax, [esp+10h]
	call sub_48C054
	mov ebx, 2
	mov edx, 8BEh
	lea eax, [esp+12h]
	call sub_48C054
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	push 0Eh ; tolen
	lea eax, [esp+4]
	push eax ; to
	push 0 ; flags
	push 4 ; len
	lea eax, [esp+20h]
	push eax ; buf
	push esi ; s
	call sendto_wrap
	mov esi, eax
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	cmp esi, 0FFFFFFFFh
	jz loc_48AA8C
	mov eax, 1
	add esp, 14h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48AA8C:
	xor eax, eax
	add esp, 14h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48A9E0 endp

sub_48AA98: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp], eax
	mov edi, ecx
	xor esi, esi
	push 452h ; hostshort
	mov si, [edx+0Ch]
	call htons_wrap
	and eax, 0FFFFh
	cmp esi, eax
	jz loc_48AAC5

loc_48AABC:
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_48AAC5:
	mov ecx, 2
	mov eax, ebx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 2
	jnz loc_48AABC
	sub edi, eax
	shr edi, 6
	lea esi, [ebx+eax]
	mov [esp+4], edi
	lea edi, [esi+32h]
	lea ebp, [esi+eax]

loc_48AAF2:
	mov edx, [esp+4]
	dec edx
	mov [esp+4], edx
	cmp edx, 0FFFFFFFFh
	jnz loc_48AB0C
	mov eax, 1
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_48AB0C:
	mov ecx, 2
	mov eax, esi
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 8BEh
	jz loc_48AB34
	add edi, 40h
	add ebp, 40h
	add esi, 40h
	jmp loc_48AAF2

loc_48AB34:
	mov eax, [esp]
	mov ebx, ebp
	mov edx, edi
	call sub_41DB00
	add edi, 40h
	add ebp, 40h
	add esi, 40h
	jmp loc_48AAF2
;sub_48AA98 endp

sub_48AB4C: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	push 0Eh ; tolen
	push edx ; to
	push 0 ; flags
	push 42h ; len
	push buf ; buf
	mov edx, dword [dword_5642CC]
	push edx ; dword_5642CC
	call sendto_wrap
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	pop edx
	pop ecx
	ret
;sub_48AB4C endp

sub_48AB80: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	mov ecx, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, 2
	mov edx, eax
	lea eax, [ebx+2]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp edx, 1
	jnz loc_48ABCC
	cmp eax, 8BEh
	jz loc_48ABC4
	cmp eax, 0FFFFh
	jnz loc_48ABCC

loc_48ABC4:
	mov eax, 1
	pop ecx
	pop ebx
	ret

loc_48ABCC:
	xor eax, eax
	pop ecx
	pop ebx
	ret
;sub_48AB80 endp

sub_48ABD4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	sub esp, 8
	mov esi, eax
	push 3E8h ; protocol
	push 2 ; type
	push 6 ; af
	call socket_wrap
	mov ebx, eax
	mov edi, eax
	cmp eax, 0FFFFFFFFh
	jnz loc_48AC05
	mov ebx, 0FFFFFFFFh

loc_48ABFA:
	mov eax, ebx
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48AC05:
	push 4 ; optlen
	lea eax, [esp+4]
	push eax ; optval
	push 20h ; optname
	push 0FFFFh ; level
	mov edx, 1
	push ebx ; s
	mov [esp+14h], edx
	call setsockopt_wrap
	push 4 ; optlen
	lea eax, [esp+4]
	push eax ; optval
	push 400Fh ; optname
	push 0FFFFh ; level
	push ebx ; s
	call setsockopt_wrap
	mov edx, 0Eh
	mov eax, esi
	call sub_48A01C
	push 452h ; hostshort
	mov word [esi], 6
	call htons_wrap
	push 0Eh ; namelen
	push esi ; name
	push ebx ; s
	mov [esi+0Ch], ax
	call bind_wrap
	test eax, eax
	jnz loc_48AC89
	lea eax, [esp+4]
	push eax ; namelen
	push esi ; name
	mov ecx, 0Eh
	push ebx ; s
	mov [esp+10h], ecx
	call getsockname_wrap
	test eax, eax
	jnz loc_48AC89
	cmp dword [esp+4], 0Eh
	jz loc_48ABFA

loc_48AC89:
	push edi ; s
	call closesocket_wrap
	mov ebx, 0FFFFFFFFh
	mov eax, ebx
	add esp, 8
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48ABD4 endp

sub_48ACA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 330h
	call sub_4A3DB0
	mov edx, 6
	push 452h ; hostshort
	lea ebx, [eax+4]
	mov [esp+318h], dx
	call htons_wrap
	lea edx, [esp+314h]
	cwde
	call sub_41DC40
	mov edx, 1
	xor esi, esi
	mov dword [dword_5642C8], edx
	mov ebp, 10h
	xor edi, edi

loc_48ACEC:
	mov ecx, 1
	mov eax, dword [dword_5642CC]
	mov edx, ebx
	mov [esp+200h], ecx
	mov [esp+204h], eax
	sar edx, 1Fh
	mov ecx, 3E8h
	mov eax, ebx
	idiv ecx
	mov [esp+324h], eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ecx
	imul eax, edx, 3E8h
	mov [esp+328h], eax
	lea eax, [esp+324h]
	push eax ; timeout
	push edi ; exceptfds
	push edi ; writefds
	lea eax, [esp+20Ch]
	push eax ; readfds
	push edi ; nfds
	call select_wrap
	mov edx, eax
	test eax, eax
	jz loc_48AE0D
	cmp eax, 0FFFFFFFFh
	jz loc_48AE0D
	mov eax, dword [dword_4DB6A0]
	mov [esp+32Ch], ebp
	call sub_489F48
	lea eax, [esp+32Ch]
	push eax ; fromlen
	lea eax, [esp+308h]
	push eax ; from
	push edi ; flags
	push 200h ; len
	lea eax, [esp+10h]
	push eax ; buf
	mov eax, dword [dword_5642CC]
	push eax ; dword_5642CC
	call recvfrom_wrap
	mov edx, eax
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	cmp edx, 4
	jnz loc_48ADB9
	mov eax, esp
	call sub_48AB80
	test eax, eax
	jz loc_48ADB9
	lea eax, [esp+304h]
	call sub_48AB4C

loc_48ADB9:
	cmp edi, dword [dword_5642C8]
	jz loc_48ADE6
	call sub_4A3DB0
	cmp ebx, eax
	jnb loc_48ADE6
	lea eax, [esp+314h]
	mov esi, 1
	call sub_48AB4C
	call sub_4A3DB0
	lea ebx, [eax+0EA60h]

loc_48ADE6:
	cmp edi, dword [dword_5642C8]
	jnz loc_48ACEC

loc_48ADF2:
	test esi, esi
	jnz loc_48AE1C

loc_48ADF6:
	mov dword [dword_5642C4], 1
	add esp, 330h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48AE0D:
	cmp edx, 0FFFFFFFFh
	jnz loc_48ADB9
	xor ebx, ebx
	mov dword [dword_5642C8], ebx
	jmp loc_48ADF2

loc_48AE1C:
	mov ebx, 2
	mov edx, 10h
	mov eax, word_564322
	call sub_48C054
	lea eax, [esp+314h]
	call sub_48AB4C
	jmp loc_48ADF6
;sub_48ACA0 endp

sub_48AE40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	mov ecx, ebx
	cmp dword [dword_5642C8], 0
	jz loc_48AE5B

loc_48AE52:
	mov eax, dword [dword_5642C8]
	pop edi
	pop esi
	pop ecx
	ret

loc_48AE5B:
	mov eax, dword_5642D4
	call sub_48ABD4
	mov dword [dword_5642CC], eax
	cmp eax, 0FFFFFFFFh
	jz loc_48AE52
	mov ebx, 2
	mov eax, buf
	mov edx, ebx
	mov dword [dword_5642D0], edi
	call sub_48C054
	mov ebx, 2
	mov edx, 8BEh
	mov eax, byte_5642E4
	call sub_48C054
	mov ebx, 2
	mov edx, 1
	mov eax, word_564322
	call sub_48C054
	mov ebx, 30h
	mov eax, word_5642E6
	mov edx, ecx
	mov edi, word_564316
	call strncpy_
	push dword_5642B0
	mov ebx, 1
	mov eax, sub_48ACA0
	xor ecx, ecx
	movsd
	movsd
	movsd
	xor edx, edx
	mov dword [dword_5642C4], ecx
	mov ecx, 0FFFFFFFFh
	call sub_489AE0
	test eax, eax
	jz loc_48AF10
	mov esi, 1
	xor ecx, ecx

loc_48AEF5:
	mov ebx, dword [dword_5642C8]
	cmp ecx, ebx
	jnz loc_48AF10
	cmp ebx, dword [dword_5642C4]
	jnz loc_48AF10
	mov eax, esi
	call sub_489B9C
	jmp loc_48AEF5

loc_48AF10:
	cmp dword [dword_5642C4], 0
	jz loc_48AE52
	mov eax, dword [dword_5642CC]
	push eax ; dword_5642CC
	call closesocket_wrap
	mov eax, dword [dword_5642C8]
	pop edi
	pop esi
	pop ecx
	ret
;sub_48AE40 endp

sub_48AF34: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp dword [dword_5642C8], 0
	jnz loc_48AF49

loc_48AF40:
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_48AF49:
	mov ebx, dword [dword_5642CC]
	xor ecx, ecx
	push ebx ; dword_5642CC
	mov dword [dword_5642C8], ecx
	call closesocket_wrap
	cmp dword [dword_5642C4], 0
	jnz loc_48AF40

loc_48AF66:
	mov eax, 1
	call sub_489B9C
	cmp dword [dword_5642C4], 0
	jz loc_48AF66
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48AF34 endp

sub_48AF90: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov eax, [eax]
	mov edx, [edx]
	cmp eax, edx
	jnz loc_48AFE0
	xor eax, edx
	xor edx, edx
	mov ax, [esi+4]
	mov dx, [edi+4]
	cmp eax, edx
	jnz loc_48AFE0
	xor eax, edx
	xor edx, edx
	mov ax, [esi+6]
	mov dx, [edi+6]
	cmp eax, edx
	jnz loc_48AFE0
	mov ecx, esi
	mov bl, [esi+8]
	xor eax, edx
	mov bh, [edi+8]
	mov edx, edi
	cmp bl, bh
	jnz loc_48AFE0

loc_48AFD0:
	inc edx
	inc eax
	inc ecx
	cmp eax, 8
	jge loc_48AFE7
	mov bl, [ecx+8]
	cmp bl, [edx+8]
	jz loc_48AFD0

loc_48AFE0:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48AFE7:
	mov eax, 1
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48AF90 endp

sub_48AFF4: ;SUBROUTINE
	push edx
	cmp dword [dword_4DBAE0], 0
	jz loc_48B029

loc_48AFFE:
	mov eax, dword_564364
	xor edx, edx
	call sub_48BD74
	test eax, eax
	jz loc_48B015
	call sub_48B1FC
	jmp loc_48AFFE

loc_48B015:
	push ecx
	mov eax, dword_564364
	xor ecx, ecx
	call sub_48BA6C
	mov dword [dword_4DBAE0], ecx
	pop ecx

loc_48B029:
	pop edx
	ret
;sub_48AFF4 endp

sub_48B02C: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+8], eax
	mov [esp], edx
	mov [esp+4], ebx
	mov edi, ecx
	mov eax, 1
	xor edx, edx
	mov ecx, dword [dword_4DBADC]
	mov [esp+0Ch], edx
	test ecx, ecx
	jle loc_48B097
	xor esi, esi

loc_48B056:
	test eax, eax
	jz loc_48B097
	mov edx, dword dword_564324[esi]
	mov ecx, [edx+4]
	test ecx, ecx
	jnz loc_48B09E
	cmp edi, 20h
	ja loc_48B081
	mov eax, dword dword_564344[esi]
	add eax, 4
	mov ebx, 0FAh
	mov edx, [eax-4]
	call dword [esp+8]

loc_48B081:
	mov ebx, [esp+0Ch]
	mov ebp, dword [dword_4DBADC]
	inc ebx
	add esi, 4
	mov [esp+0Ch], ebx
	cmp ebx, ebp
	jl loc_48B056

loc_48B097:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_48B09E:
	mov ebx, [esp+4]
	mov eax, [esp+8]
	mov ebp, edx
	mov ecx, edi
	mov edx, [esp]
	call dword [ebp+4]
	jmp loc_48B081
;sub_48B02C endp

sub_48B0B4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov [esp+4], edx
	mov [esp], ebx
	mov [esp+8], ecx
	mov edx, dword [dword_4DBAE0]
	xor ecx, ecx
	test edx, edx
	jz loc_48B17B

loc_48B0D7:
	mov eax, dword_564364
	mov edx, esi
	call sub_48BC50
	cmp eax, 0FFFFFFFFh
	jz loc_48B0EF
	mov eax, esi
	call sub_48B1FC

loc_48B0EF:
	mov edx, 0ACh
	mov eax, esi
	call sub_48A01C
	xor ebp, ebp
	mov eax, dword [dword_4DBADC]
	mov [esp+0Ch], ebp
	test eax, eax
	jle loc_48B16C
	xor edi, edi

loc_48B10C:
	test ecx, ecx
	jnz loc_48B16C
	mov eax, dword dword_564344[edi]
	mov [esi+8], eax
	mov eax, dword dword_564324[edi]
	mov [esi+4], eax
	mov eax, [esp+4]
	mov [esi+10h], eax
	mov eax, [esi+4]
	cmp dword [eax+4], 0
	jz loc_48B1C3

loc_48B136:
	mov eax, [esp+28h]
	mov edx, [esp+24h]
	mov ecx, [esp+20h]
	push eax
	mov ebx, [esp+0Ch]
	mov ebp, [esi+4]
	push edx
	mov eax, esi
	mov edx, [esp+8]
	call dword [ebp+8]
	mov ecx, eax

loc_48B156:
	mov edx, [esp+0Ch]
	mov ebx, dword [dword_4DBADC]
	inc edx
	add edi, 4
	mov [esp+0Ch], edx
	cmp edx, ebx
	jl loc_48B10C

loc_48B16C:
	test ecx, ecx
	jnz loc_48B1E2
	mov eax, ecx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_48B17B:
	mov eax, dword_564364
	xor ebx, ebx
	call sub_48BA2C
	mov eax, sub_48AFF4
	call atexit_
	cmp dword [dword_4DBAD4], 0
	jnz loc_48B1B4
	mov edx, dword [dword_4DABCC]
	add edx, 9
	mov edi, 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov dword [dword_4DBAD4], eax

loc_48B1B4:
	mov dword [dword_4DBAE0], 1
	jmp loc_48B0D7

loc_48B1C3:
	mov eax, dword dword_564344[edi]
	mov edx, [esp+8]
	add eax, 4
	call sub_48AF90
	test eax, eax
	jnz loc_48B136
	jmp loc_48B156

loc_48B1E2:
	mov eax, dword_564364
	mov edx, esi
	call sub_48BA80
	mov eax, ecx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_48B0B4 endp

sub_48B1FC: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov edx, eax
	mov eax, dword_564364
	xor ebx, ebx
	call sub_48BC50
	cmp eax, 0FFFFFFFFh
	jnz loc_48B21A
	mov eax, ebx
	pop edx
	pop ecx
	pop ebx
	ret

loc_48B21A:
	mov ebx, [ecx+4]
	mov eax, ecx
	mov edx, ecx
	call dword [ebx+0Ch]
	mov ebx, eax
	mov eax, dword_564364
	call sub_48BC18
	mov eax, ebx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48B1FC endp

sub_48B238: ;SUBROUTINE
	push esi
	mov esi, [eax+4]
	call dword [esi+10h]
	pop esi
	ret
;sub_48B238 endp

sub_48B244: ;SUBROUTINE
	push ecx
	mov ecx, [eax+4]
	call dword [ecx+14h]
	pop ecx
	ret
;sub_48B244 endp

sub_48B25C: ;SUBROUTINE
	push esi
	mov esi, [eax+4]
	call dword [esi+1Ch]
	pop esi
	ret
;sub_48B25C endp

sub_48B274: ;SUBROUTINE
	push ecx
	mov ecx, [eax+4]
	call dword [ecx+24h]
	pop ecx
	ret
;sub_48B274 endp

sub_48B280: ;SUBROUTINE
	push edx
	mov edx, [eax+4]
	call dword [edx+28h]
	pop edx
	ret
;sub_48B280 endp

sub_48B28C: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, eax
	mov eax, dword_564364
	call sub_48BC50
	cmp eax, 0FFFFFFFFh
	jnz loc_48B2A9
	mov eax, 1
	pop edx
	pop ecx
	ret

loc_48B2A9:
	mov edx, [ecx+4]
	mov eax, ecx
	call dword [edx+2Ch]
	pop edx
	pop ecx
	ret
;sub_48B28C endp

sub_48B2C0: ;SUBROUTINE
	push ecx
	mov ecx, [eax+4]
	call dword [ecx+34h]
	pop ecx
	ret
;sub_48B2C0 endp

sub_48B2CC: ;SUBROUTINE
	push esi
	push edi
	mov esi, ecx
	test eax, eax
	jz loc_48B2DE
	mov dword [eax+44h], 0
	mov [eax+48h], ecx

loc_48B2DE:
	mov ecx, ebx
	mov edi, [esi+4]
	mov ebx, edx
	mov edx, eax
	mov eax, esi
	call dword [edi+38h]
	pop edi
	pop esi
	ret
;sub_48B2CC endp

sub_48B2F0: ;SUBROUTINE
	push ecx
	mov ecx, [eax+8]
	mov eax, [eax+0Ch]
	call dword [ecx+3Ch]
	pop ecx
	ret
;sub_48B2F0 endp

sub_48B2FC: ;SUBROUTINE
	push esi
	mov esi, [eax+8]
	cmp dword [esi+38h], 0
	jnz loc_48B30A
	xor eax, eax
	pop esi
	ret

loc_48B30A:
	mov eax, [eax+0Ch]
	call dword [esi+38h]
	pop esi
	ret
;sub_48B2FC endp

sub_48B724: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov ebp, esp
	sub esp, 10h
	mov [ebp-4], eax
	mov [ebp-8], edx
	mov [ebp-10h], ebx
	mov [ebp-0Ch], ecx
	mov eax, dword [dword_4DBAE4]
	call sub_489F48
	cmp dword [dword_4DBAE8], 0
	jz loc_48B8CC
	mov edx, dword [dword_564384]
	mov ecx, dword [dword_564388]
	add edx, ecx
	mov ebx, dword [dword_564380]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov esi, dword [dword_4DBAE8]
	shl edx, 6
	add esi, edx
	cmp ecx, ebx
	jnz loc_48B8EC
	mov edx, dword [dword_564384]
	inc edx
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov dword [dword_564384], edx

loc_48B791:
	mov edx, [ebp-4]
	test edx, edx
	jz loc_48B903
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	cmp ecx, 35h
	jnb loc_48B8F9
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx

loc_48B7BD:
	cmp dword [ebp-10h], 0
	jz loc_48B90A
	xor eax, eax
	mov edx, 35h
	mov al, cl
	sub edx, eax
	mov edi, [ebp-0Ch]
	mov eax, edx
	cmp edx, edi
	jle loc_48B7DD
	mov eax, edi

loc_48B7DD:
	mov [esi+8], al

loc_48B7E0:
	mov eax, [ebp+10h]
	test eax, eax
	jz loc_48B7EC
	mov eax, 8

loc_48B7EC:
	mov [esi+0Ah], al
	mov eax, dword [dword_5637F4]
	mov [esi], eax
	mov al, [ebp+14h]
	mov edx, [ebp-10h]
	mov [esi+9], al
	lea eax, [esi+0Bh]
	test edx, edx
	jz loc_48B830
	cmp byte [esi+8], 0
	jz loc_48B830
	mov dh, [esi+0Ah]
	xor bl, bl
	or dh, 4
	mov bh, [esi+8]
	mov [esi+0Ah], dh
	mov edx, [ebp-10h]
	test bh, bh
	jbe loc_48B830

loc_48B821:
	mov bh, [edx]
	inc edx
	mov [eax], bh
	inc bl
	mov ch, [esi+8]
	inc eax
	cmp bl, ch
	jb loc_48B821

loc_48B830:
	cmp dword [ebp-4], 0
	jz loc_48B85B
	test cl, cl
	jz loc_48B85B
	mov dl, [esi+0Ah]
	or dl, 1
	xor bl, bl
	mov [esi+0Ah], dl
	mov edx, [ebp-4]
	test cl, cl
	jbe loc_48B858

loc_48B84C:
	mov bh, [edx]
	inc edx
	mov [eax], bh
	inc bl
	inc eax
	cmp bl, cl
	jb loc_48B84C

loc_48B858:
	mov byte [eax], 0

loc_48B85B:
	mov edi, [ebp-8]
	test edi, edi
	jz loc_48B913
	mov dh, [esi+0Ah]
	mov eax, [edi]
	or dh, 2
	mov [esi+4], eax
	mov [esi+0Ah], dh

loc_48B874:
	cmp dword [dword_4DBAEC], 0
	jz loc_48B8CC
	mov edx, [ebp-0Ch]
	mov ecx, [ebp-4]
	push edx
	test ecx, ecx
	jz loc_48B91B
	mov eax, ecx

loc_48B88E:
	mov ebx, [ebp-8]
	push eax
	test ebx, ebx
	jz loc_48B925
	mov eax, [ebx]

loc_48B89C:
	mov edi, [ebp+10h]
	push eax
	test edi, edi
	jz loc_48B92C
	mov eax, aAttn ; "ATTN"

loc_48B8AD:
	push eax
	xor eax, eax
	mov al, [ebp+14h]
	push eax
	xor eax, eax
	mov al, byte [byte_4DBAF0]
	push eax
	mov eax, [esi]
	push eax
	push a08xC02x4_4s08x ; "%08x%c[%02x] %4.4s %08x %20s %4d bytes\n"...
	call sub_48EC20
	add esp, 20h

loc_48B8CC:
	mov eax, dword [dword_4DBAE4]
	call sub_489F60
	cmp dword [dword_4DBAE8], 0
	jz loc_48B936
	mov eax, 1
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8

loc_48B8EC:
	lea eax, [ecx+1]
	mov dword [dword_564388], eax
	jmp loc_48B791

loc_48B8F9:
	mov ecx, 35h
	jmp loc_48B7BD

loc_48B903:
	xor cl, cl
	jmp loc_48B7BD

loc_48B90A:
	mov byte [esi+8], 0
	jmp loc_48B7E0

loc_48B913:
	mov [esi+4], edi
	jmp loc_48B874

loc_48B91B:
	mov eax, dword_4CFEB8
	jmp loc_48B88E

loc_48B925:
	xor eax, eax
	jmp loc_48B89C

loc_48B92C:
	mov eax, asc_4CFE60 ; " "
	jmp loc_48B8AD

loc_48B936:
	xor eax, eax
	mov esp, ebp
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_48B724 endp

;	Attributes: library function

strncmp_: ;SUBROUTINE
	push ecx

loc_48B941:
	test ebx, ebx
	jnz loc_48B949

loc_48B945:
	xor eax, eax
	pop ecx
	ret

loc_48B949:
	mov cl, [eax]
	mov ch, [edx]
	cmp cl, ch
	jz loc_48B95F
	xor ebx, ebx
	xor eax, eax
	mov bl, cl
	mov al, ch
	sub ebx, eax
	mov eax, ebx
	pop ecx
	ret

loc_48B95F:
	cmp byte [eax], 0
	jz loc_48B945
	inc eax
	inc edx
	dec ebx
	jmp loc_48B941
;strncmp_ endp

nullsub_47: ;SUBROUTINE
	ret
;nullsub_47 endp

sub_48B974: ;SUBROUTINE
	mov eax, [eax]
	test eax, eax
	jz locret_48B986

loc_48B97A:
	dec edx
	cmp edx, 0FFFFFFFFh
	jz locret_48B986
	mov eax, [eax]
	test eax, eax
	jnz loc_48B97A

locret_48B986:
	ret
;sub_48B974 endp

sub_48B988: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	xor ebx, ebx
	test edx, edx
	jz loc_48B9D6
	mov esi, [eax]
	test esi, esi
	jbe loc_48B9D6
	mov edi, [eax+8]
	cmp edx, edi
	jz loc_48B9DE
	mov ebp, [edi]
	mov eax, edi
	test ebp, ebp
	jz loc_48B9B5

loc_48B9AA:
	cmp edx, [eax]
	jz loc_48B9B5
	mov eax, [eax]
	cmp dword [eax], 0
	jnz loc_48B9AA

loc_48B9B5:
	mov esi, [eax]
	test esi, esi
	jz loc_48B9D2
	cmp edx, esi
	jnz loc_48B9D2
	mov ebx, 1
	sub [ecx], ebx
	mov esi, [esi]
	mov [eax], esi
	cmp edx, [ecx+0Ch]
	jnz loc_48B9D2
	mov [ecx+0Ch], eax

loc_48B9D2:
	test ebx, ebx
	jnz loc_48BA1A

loc_48B9D6:
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48B9DE:
	mov ebx, 1
	mov eax, esi
	sub eax, ebx
	mov esi, [ecx+0Ch]
	mov [ecx], eax
	cmp edi, esi
	jnz loc_48BA09
	mov dword [ecx+8], 0
	mov eax, [ecx+8]
	mov [ecx+0Ch], eax
	test ebx, ebx
	jnz loc_48BA1A
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48BA09:
	mov eax, [edi]
	mov [ecx+8], eax
	test ebx, ebx
	jnz loc_48BA1A
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48BA1A:
	mov dword [edx], 0
	or byte [ecx+4], 1
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48B988 endp

sub_48BA2C: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_489EF8
	mov dword [ecx], 0
	mov dword [ecx+4], 0
	mov dword [ecx+8], 0
	mov dword [ecx+0Ch], 0
	mov [ecx+18h], eax
	test edx, edx
	jz loc_48BA5E
	mov [ecx+10h], edx
	mov [ecx+14h], ebx
	pop ecx
	ret

loc_48BA5E:
	mov edx, nullsub_47
	mov [ecx+10h], edx
	mov [ecx+14h], ebx
	pop ecx
	ret
;sub_48BA2C endp

sub_48BA6C: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, [eax+18h]
	call sub_489F74
	mov dword [edx+18h], 0
	pop edx
	ret
;sub_48BA6C endp

sub_48BA80: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	test edx, edx
	jz loc_48BAAA
	push ebx
	mov eax, [ecx+8]
	mov [edx], eax
	mov ebx, [ecx]
	mov [ecx+8], edx
	inc ebx
	mov [ecx], ebx
	cmp dword [edx], 0
	jnz loc_48BAA5
	mov [ecx+0Ch], edx

loc_48BAA5:
	or byte [ecx+4], 1
	pop ebx

loc_48BAAA:
	mov eax, [ecx+18h]
	call sub_489F60
	pop ecx
	ret
;sub_48BA80 endp

sub_48BAB4: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	test edx, edx
	jz loc_48BAE1
	push ebx
	mov eax, [ecx+0Ch]
	mov dword [edx], 0
	mov ebx, [ecx]
	mov [ecx+0Ch], edx
	inc ebx
	mov [ecx], ebx
	test eax, eax
	jnz loc_48BAEB
	mov [ecx+8], edx
	or byte [ecx+4], 1
	pop ebx

loc_48BAE1:
	mov eax, [ecx+18h]
	call sub_489F60
	pop ecx
	ret

loc_48BAEB:
	mov [eax], edx
	or byte [ecx+4], 1
	pop ebx
	mov eax, [ecx+18h]
	call sub_489F60
	pop ecx
	ret
;sub_48BAB4 endp

sub_48BAFC: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov eax, [eax+18h]
	call sub_489F48
	mov ecx, [edx+8]
	test ecx, ecx
	jz loc_48BB29
	cmp ecx, [edx+0Ch]
	jnz loc_48BB3A
	mov dword [edx+0Ch], 0
	mov eax, [edx+0Ch]

loc_48BB1E:
	mov [edx+8], eax
	dec dword [edx]
	mov dword [ecx], 0

loc_48BB29:
	or byte [edx+4], 1
	mov eax, [edx+18h]
	call sub_489F60
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_48BB3A:
	mov eax, [ecx]
	jmp loc_48BB1E
;sub_48BAFC endp

sub_48BB40: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov eax, [eax+18h]
	call sub_489F48
	mov ecx, [edx+0Ch]
	test ecx, ecx
	jz loc_48BB82
	push esi
	push ebx
	mov ebx, [edx]
	dec ebx
	mov esi, [edx+8]
	mov [edx], ebx
	cmp ecx, esi
	jz loc_48BB93
	push edi
	mov [edx+0Ch], esi

loc_48BB65:
	mov eax, [edx+0Ch]
	mov edi, [eax]
	cmp ecx, edi
	jz loc_48BB73
	mov [edx+0Ch], edi
	jmp loc_48BB65

loc_48BB73:
	mov dword [eax], 0
	pop edi

loc_48BB7A:
	mov dword [ecx], 0
	pop ebx
	pop esi

loc_48BB82:
	or byte [edx+4], 1
	mov eax, [edx+18h]
	call sub_489F60
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_48BB93:
	mov dword [edx+8], 0
	mov eax, [edx+8]
	mov [edx+0Ch], eax
	jmp loc_48BB7A
;sub_48BB40 endp

sub_48BBA4: ;SUBROUTINE
	push ebx
	push ebp
	mov ebx, eax
	mov ebp, edx
	mov eax, [eax+18h]
	call sub_489F48
	test edx, edx
	jnz loc_48BBC1
	mov eax, [ebx+18h]
	call sub_489F60
	pop ebp
	pop ebx
	ret

loc_48BBC1:
	push edi
	push esi
	push ecx
	mov eax, ebp
	mov edx, [ebx+14h]
	xor esi, esi
	call dword [ebx+10h]
	mov edx, [ebx]
	mov edi, eax
	inc edx
	mov ecx, [ebx+8]
	mov [ebx], edx
	test ecx, ecx
	jz loc_48BBF0

loc_48BBDC:
	mov eax, ecx
	mov edx, [ebx+14h]
	call dword [ebx+10h]
	cmp eax, edi
	jnb loc_48BBF0
	mov esi, ecx
	mov ecx, [ecx]
	test ecx, ecx
	jnz loc_48BBDC

loc_48BBF0:
	mov [ebp+0], ecx
	test esi, esi
	jnz loc_48BC13
	mov [ebx+8], ebp

loc_48BBFA:
	test ecx, ecx
	jnz loc_48BC01
	mov [ebx+0Ch], ebp

loc_48BC01:
	or byte [ebx+4], 1
	pop ecx
	pop esi
	pop edi
	mov eax, [ebx+18h]
	call sub_489F60
	pop ebp
	pop ebx
	ret

loc_48BC13:
	mov [esi], ebp
	jmp loc_48BBFA
;sub_48BBA4 endp

sub_48BC18: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	test edx, edx
	jnz loc_48BC35
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, ebx
	pop ecx
	pop ebx
	ret

loc_48BC35:
	mov eax, ecx
	call sub_48B988
	mov ebx, eax
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, ebx
	pop ecx
	pop ebx
	ret
;sub_48BC18 endp

sub_48BC4C: ;SUBROUTINE
	mov eax, [eax]
	ret
;sub_48BC4C endp

sub_48BC50: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov ebp, edx
	mov eax, [eax+18h]
	call sub_489F48
	xor ebx, ebx
	test edx, edx
	jz loc_48BC95
	mov esi, [edi+10h]
	mov ecx, [edi+8]
	test esi, esi
	jnz loc_48BCAD
	xor eax, eax

loc_48BC76:
	mov [esp], eax
	test ecx, ecx
	jz loc_48BC91

loc_48BC7D:
	cmp ecx, ebp
	jz loc_48BC91
	test esi, esi
	jz loc_48BCB6
	mov eax, ecx
	mov edx, [edi+14h]
	call esi
	cmp eax, [esp]
	jbe loc_48BCB6

loc_48BC91:
	cmp ecx, ebp
	jz loc_48BC9A

loc_48BC95:
	mov ebx, 0FFFFFFFFh

loc_48BC9A:
	mov eax, [edi+18h]
	call sub_489F60
	mov eax, ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48BCAD:
	mov eax, ebp
	mov edx, [edi+14h]
	call esi
	jmp loc_48BC76

loc_48BCB6:
	mov ecx, [ecx]
	inc ebx
	test ecx, ecx
	jnz loc_48BC7D
	jmp loc_48BC91
;sub_48BC50 endp

sub_48BCC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	mov ebx, [ecx+8]
	mov edx, 0FFFFFFFFh
	test ebx, ebx
	jnz loc_48BCE7
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_48BCE7:
	mov eax, ebx
	mov edx, [ecx+14h]
	call dword [ecx+10h]
	mov edx, eax
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48BCC0 endp

sub_48BD74: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	mov ebx, [ecx+8]
	test ebx, ebx
	jz loc_48BDA6
	test edx, edx
	ja loc_48BD9A
	mov edx, ebx

loc_48BD8D:
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, edx
	pop ecx
	pop ebx
	ret

loc_48BD9A:
	dec edx
	mov eax, ebx
	call sub_48B974
	mov edx, eax
	jmp loc_48BD8D

loc_48BDA6:
	xor edx, edx
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, edx
	pop ecx
	pop ebx
	ret
;sub_48BD74 endp

sub_48BDB8: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov esi, edx
	mov eax, [eax+18h]
	call sub_489F48
	mov ecx, [ebx+8]
	test ecx, ecx
	jz loc_48BDE0

loc_48BDCE:
	mov eax, ecx
	mov edx, [ebx+14h]
	call dword [ebx+10h]
	cmp eax, esi
	jnb loc_48BDE0
	mov ecx, [ecx]
	test ecx, ecx
	jnz loc_48BDCE

loc_48BDE0:
	test ecx, ecx
	jnz loc_48BDF2

loc_48BDE4:
	mov eax, [ebx+18h]
	call sub_489F60
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret

loc_48BDF2:
	mov eax, ecx
	mov edx, [ebx+14h]
	call dword [ebx+10h]
	cmp eax, esi
	jz loc_48BDE4
	xor ecx, ecx
	mov eax, [ebx+18h]
	call sub_489F60
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48BDB8 endp

sub_48BE10: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	mov eax, [eax+18h]
	call sub_489F48
	mov ecx, [edi+8]
	test ecx, ecx
	jz loc_48BE3A

loc_48BE26:
	test esi, esi
	jz loc_48BE3A
	mov edx, ebx
	mov eax, ecx
	call esi
	test eax, eax
	jnz loc_48BE3A
	mov ecx, [ecx]
	test ecx, ecx
	jnz loc_48BE26

loc_48BE3A:
	test ecx, ecx
	jnz loc_48BE4C

loc_48BE3E:
	mov eax, [edi+18h]
	call sub_489F60
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	ret

loc_48BE4C:
	mov edx, ecx
	mov eax, edi
	call sub_48B988
	test eax, eax
	jnz loc_48BE3E
	xor ecx, ecx
	mov eax, [edi+18h]
	call sub_489F60
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	ret
;sub_48BE10 endp

sub_48BF0C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov esi, edx
	mov eax, [eax+18h]
	call sub_489F48
	mov ecx, [ebx+8]
	test ecx, ecx
	jz loc_48BF34

loc_48BF22:
	mov eax, ecx
	mov edx, [ebx+14h]
	call dword [ebx+10h]
	cmp eax, esi
	jnb loc_48BF34
	mov ecx, [ecx]
	test ecx, ecx
	jnz loc_48BF22

loc_48BF34:
	test ecx, ecx
	jnz loc_48BF48

loc_48BF38:
	xor ecx, ecx

loc_48BF3A:
	mov eax, [ebx+18h]
	call sub_489F60
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret

loc_48BF48:
	mov eax, ecx
	mov edx, [ebx+14h]
	call dword [ebx+10h]
	cmp eax, esi
	jnz loc_48BF38
	mov edx, ecx
	mov eax, ebx
	call sub_48B988
	test eax, eax
	jnz loc_48BF3A
	xor ecx, ecx
	mov eax, [ebx+18h]
	call sub_489F60
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48BF0C endp

sub_48BF74: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ebp, edx
	mov edi, ebx
	mov eax, [eax+18h]
	call sub_489F48
	mov eax, [esi+4]
	and eax, 1
	mov [esp], eax
	and byte [esi+4], 0FEh
	mov eax, [esi+18h]
	call sub_489F60
	mov ecx, [esi+8]
	xor ebx, ebx
	test ecx, ecx
	jz loc_48BFC9

loc_48BFA7:
	mov dl, [esi+4]
	test dl, 1
	jnz loc_48BFC9
	test dl, 1
	jnz loc_48BFC3
	mov edx, edi
	mov eax, ecx
	call ebp
	test eax, eax
	jnz loc_48BFC2
	or byte [esi+4], 1

loc_48BFC2:
	inc ebx

loc_48BFC3:
	mov ecx, [ecx]
	test ecx, ecx
	jnz loc_48BFA7

loc_48BFC9:
	mov eax, [esi+18h]
	call sub_489F48
	test byte [esi+4], 1
	jz loc_48BFF4

loc_48BFD7:
	mov eax, [esp]
	mov edx, [esi+4]
	or edx, eax
	mov eax, [esi+18h]
	mov [esi+4], edx
	call sub_489F60
	mov eax, ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48BFF4:
	mov ebx, 0FFFFFFFFh
	jmp loc_48BFD7
;sub_48BF74 endp

sub_48BFFC: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, [eax+18h]
	call sub_489F48
	mov eax, ecx
	call sub_48BF74
	mov edx, eax
	mov eax, [ecx+18h]
	call sub_489F60
	mov eax, edx
	pop ecx
	ret
;sub_48BFFC endp

sub_48C054: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	lea eax, [eax+ecx-1]
	sub ecx, 1
	jl loc_48C06D

loc_48C060:
	mov [eax], dl
	shr edx, 8
	sub ecx, 1
	lea eax, [eax-1]
	jge loc_48C060

loc_48C06D:
	pop ecx
	ret
;sub_48C054 endp

sub_48C06F: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	sub ecx, 1
	jl loc_48C084

loc_48C077:
	mov [eax], dl
	shr edx, 8
	sub ecx, 1
	lea eax, [eax+1]
	jge loc_48C077

loc_48C084:
	pop ecx
	ret
;sub_48C06F endp

dword_48C088: times 7Ah dd 0

sub_48C270: ;SUBROUTINE
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Fh]
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Eh]
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Dh]
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Ch]
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Bh]
	push ecx
	xor ecx, ecx
	mov cl, [eax+0Ah]
	push ecx
	xor ecx, ecx
	mov cl, [eax+9]
	push ecx
	xor ecx, ecx
	mov cl, [eax+8]
	push ecx
	xor ecx, ecx
	mov cx, [eax+6]
	push ecx
	xor ecx, ecx
	mov cx, [eax+4]
	push ecx
	mov ecx, [eax]
	push ecx
	push aEagame_08x_04x ; "EAGAME.%08x.%04x%04x.%02x%02x%02x%02x.%"...
	push edx
	call sprintf_
	add esp, 34h
	pop ecx
	ret
;sub_48C270 endp

sub_48C2D4: ;SUBROUTINE
	mov eax, dword [dword_5637F0]
	sub eax, dword [dword_4DBAF8]
	test eax, eax
	jl loc_48C2E9
	mov eax, 1
	ret

loc_48C2E9:
	xor eax, eax
	ret
;sub_48C2D4 endp

sub_48C2EC: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	xor edx, edx
	test eax, eax
	jz loc_48C304

loc_48C2F6:
	mov ecx, eax
	neg ecx
	not ecx
	and eax, ecx
	inc edx
	test eax, eax
	jnz loc_48C2F6
	nop

loc_48C304:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_48C2EC endp

sub_48C30C: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 0B4h
	mov ecx, eax
	mov [esp+0ACh], edx
	mov edx, ebx
	mov ebp, [eax+4]
	test ebx, ebx
	jnz loc_48C330
	cmp dword [eax+8], 0
	jnz loc_48C44E

loc_48C330:
	push edi
	push esi
	mov ebx, 4
	lea eax, [esp+8]
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+50h]
	mov edx, [ecx+74h]
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+54h]
	mov edx, [ecx+78h]
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+58h]
	mov edx, [ecx+7Ch]
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+5Ch]
	mov edx, [ecx+80h]
	mov esi, 0EA646563h
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+60h]
	mov edx, [ecx+84h]
	lea edi, [esp+0Ch]
	call sub_48C054
	mov ebx, 4
	lea eax, [esp+74h]
	mov edx, [ecx+50h]
	mov [esp+0B8h], esi
	call sub_48C054
	mov ebx, 20h
	lea esi, [ebp+1Ch]
	lea eax, [esp+30h]
	lea edx, [ecx+54h]
	movsd
	movsd
	movsd
	movsd
	movsd
	call strncpy_
	mov edx, ebp
	xor eax, eax

loc_48C3D9:
	inc eax
	mov bl, [edx+94h]
	inc edx
	mov [esp+eax+27h], bl
	cmp eax, 8
	jl loc_48C3D9
	mov ebx, 4
	lea eax, [esp+20h]
	mov edx, [ebp+8Ch]
	call sub_48C054
	mov ebx, 2
	xor edx, edx
	lea eax, [esp+24h]
	mov dx, [ebp+90h]
	call sub_48C054
	mov ebx, 2
	xor edx, edx
	lea eax, [esp+26h]
	mov dx, [ebp+92h]
	lea ecx, [esp+8]
	call sub_48C054
	push 0ACh
	mov ebx, [esp+0BCh]
	mov esi, [ebp+8]
	mov edx, [esp+0B8h]
	mov eax, [ebp+0Ch]
	call dword [esi+50h]
	pop esi
	pop edi

loc_48C44E:
	add esp, 0B4h
	pop ebp
	pop ecx
	ret
;sub_48C30C endp

sub_48C458: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov [esp+0Ch], edx
	mov [esp+4], ebx
	mov [esp+8], ecx
	mov dword [edx+4], 0
	mov [edx+10h], eax
	mov eax, dword [dword_4DBAF4]
	mov esi, 1
	mov [edx], eax
	mov edx, eax
	add eax, esi
	mov ebx, 4
	mov dword [dword_4DBAF4], eax
	mov eax, ecx
	call sub_48C054
	mov eax, [edi+8]
	cmp dword [eax+44h], 0
	jnz loc_48C4E0

loc_48C4A0:
	mov eax, [esp+0Ch]
	mov [edi+18h], eax
	mov eax, dword [dword_5637F0]
	mov ecx, [esp+24h]
	add eax, ecx
	mov dword [dword_4DBAF8], eax
	mov eax, [esp+0Ch]
	cmp dword [eax+4], 0
	jnz loc_48C4D0
	lea eax, [edi+1Ch]
	mov [esp], eax

loc_48C4C7:
	call sub_48C2D4
	test eax, eax
	jz loc_48C4ED

loc_48C4D0:
	mov dword [edi+18h], 0
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_48C4E0:
	mov ebp, eax
	lea edx, [edi+1Ch]
	mov eax, [edi+0Ch]
	call dword [ebp+44h]
	jmp loc_48C4A0

loc_48C4ED:
	mov eax, [esp+20h]
	mov ecx, [esp+8]
	mov ebx, [esp+4]
	mov ebp, [edi+8]
	push eax
	mov edx, [esp+4]
	mov eax, [edi+0Ch]
	call dword [ebp+50h]
	test eax, eax
	jz loc_48C511
	mov esi, dword [dword_4DBAD4]

loc_48C511:
	mov eax, esi
	call sub_483F44
	test eax, eax
	jl loc_48C4D0
	mov eax, [esp+0Ch]
	cmp dword [eax+4], 0
	jz loc_48C4C7
	mov dword [edi+18h], 0
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_48C458 endp

sub_48C538: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov ebp, edx
	xor edx, edx
	lea esi, [eax+88h]

loc_48C54C:
	mov [esp], edx
	mov eax, [edi+84h]
	mov ecx, [esp]
	dec eax
	cmp eax, ecx
	jbe loc_48C5A2
	mov cl, [esp]
	mov eax, 1
	mov ebx, [edi+50h]
	shl eax, cl
	test eax, ebx
	jnz loc_48C577

loc_48C56E:
	mov edx, [esp]
	inc edx
	add esi, 64h
	jmp loc_48C54C

loc_48C577:
	imul ecx, [esp], 64h
	mov ebx, esi
	mov edx, ebp
	mov eax, [edi+4]
	call sub_48B2F0
	test eax, eax
	jz loc_48C56E
	mov eax, dword [dword_4DBACC]
	mov [ecx+edi+0E4h], eax
	mov eax, esi
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48C5A2:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48C538 endp

sub_48C5B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov esi, edx
	xor eax, eax

loc_48C5B9:
	mov edx, [ebx+84h]
	dec edx
	cmp eax, edx
	jnb loc_48C61A
	mov edx, 1
	mov cl, al
	shl edx, cl
	mov ecx, [ebx+50h]
	test edx, ecx
	jz loc_48C5D7
	inc eax
	jmp loc_48C5B9

loc_48C5D7:
	push edi
	mov edi, ecx
	or edi, edx
	lea edx, 0[eax*4]
	sub edx, eax
	shl edx, 3
	add edx, eax
	shl edx, 2
	mov [ebx+50h], edi
	add ebx, edx
	mov ecx, 17h
	lea edi, [ebx+88h]
	mov edx, dword [dword_4DBACC]
	rep movsd
	mov [ebx+0E4h], edx
	mov [ebx+0E8h], eax
	mov edx, eax
	pop edi
	mov eax, edx
	pop esi
	pop ecx
	pop ebx
	ret

loc_48C61A:
	xor edx, edx
	mov eax, edx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48C5B0 endp

sub_48C624: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0C8h
	mov esi, eax
	add eax, 30h
	mov edi, edx
	mov [esp+0C4h], eax

loc_48C63D:
	mov edx, 0EA646174h
	mov ebx, 14h
	mov eax, [esp+0C4h]
	mov [esp+0C0h], edx
	lea edx, [esp+0ACh]
	mov ecx, esp
	call sub_48A980
	push 0ACh
	lea ebx, [esp+0C4h]
	mov ebp, [esi+8]
	lea edx, [esp+0B0h]
	mov eax, [esi+0Ch]
	call dword [ebp+54h]
	cmp dword [esp+0C0h], 0
	jnz loc_48C69F

loc_48C689:
	cmp dword [esp+0C0h], 0
	jnz loc_48C63D
	add esp, 0C8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48C69F:
	mov ecx, esp
	mov ebx, [esp+0C0h]
	push eax
	lea edx, [esp+0B0h]
	mov eax, edi
	call sub_48C6BC
	jmp loc_48C689
;sub_48C624 endp

sub_48C6BC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0CCh
	mov esi, eax
	mov [esp+0C4h], edx
	mov edi, ebx
	mov [esp+0C8h], ecx
	mov ebp, [eax+10h]
	cmp ebx, 0EA6E6F21h
	jnb loc_48C719
	cmp ebx, 0EA627965h
	jnb loc_48C8CC
	cmp ebx, 0EA616464h
	jb loc_48C70D
	ja loc_48C9E4
	mov eax, [ebp+14h]
	test eax, eax
	jz loc_48C70D
	cmp dword [eax+8], 0
	jz loc_48CCD7

loc_48C70D:
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C719:
	jbe loc_48C70D
	lea eax, [ebp+1Ch]
	mov [esp+0BCh], eax
	cmp ebx, 0EA706C79h
	jnb loc_48C7A8
	cmp ebx, 0EA6F706Eh
	jnb loc_48C860
	cmp ebx, 0EA6F6C61h
	jnz loc_48C70D
	mov eax, [ebp+14h]
	test eax, eax
	jnz loc_48CF72
	cmp dword [ebp+0A4h], 0
	jz loc_48C70D
	cmp dword [ebp+0A0h], 0
	jz loc_48C70D
	mov ebx, [esp+0BCh]
	mov edx, [esp+0C4h]
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48C70D
	push 0
	mov edx, [esp+0C0h]
	mov eax, dword [dword_4DBACC]
	mov ebx, edi
	mov esi, [ebp+8]
	mov [ebp+0A4h], eax
	xor ecx, ecx
	mov eax, [ebp+0Ch]
	call dword [esi+50h]
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C7A8:
	jbe loc_48C9F0
	cmp ebx, 0EA727370h
	jnb loc_48C807
	cmp ebx, 0EA726571h
	jnz loc_48C70D
	test ebp, ebp
	jz loc_48C70D
	cmp dword [ebp+14h], 0
	jz loc_48C70D
	mov ecx, 4
	mov eax, [esp+0C8h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, [ebp+14h]
	mov ebx, eax
	mov eax, ecx
	call sub_48C30C
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C807:
	jbe loc_48CED7
	cmp ebx, 0EA737276h
	jnz loc_48C70D
	test ebp, ebp
	jz loc_48C70D
	mov edx, [ebp+14h]
	test edx, edx
	jz loc_48C70D
	lea eax, [edx+0Ch]
	mov ebx, 20h
	mov edx, ecx
	call strncmp_
	test eax, eax
	jnz loc_48C70D
	mov edx, [esp+0C4h]
	mov eax, [ebp+14h]
	xor ebx, ebx
	call sub_48C30C
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C860:
	ja loc_48C89D
	cmp dword [ebp+10h], 0
	jz loc_48C70D
	mov eax, ebp
	call dword [ebp+10h]
	test eax, eax
	jnz loc_48C70D
	mov ebx, 0EA6E6F21h
	mov edx, [esp+0C4h]
	push eax
	mov esi, [ebp+8]
	xor ecx, ecx
	mov eax, [ebp+0Ch]
	call dword [esi+50h]
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C89D:
	cmp ebx, 0EA6F7574h
	jnz loc_48C70D

loc_48C8A9:
	mov eax, [ebp+14h]
	test eax, eax
	jnz loc_48CF96
	mov [ebp+0A0h], eax
	mov [ebp+0A4h], eax
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C8CC:
	jbe loc_48C8A9
	cmp ebx, 0EA646563h
	jnb loc_48C923
	cmp ebx, 0EA646174h
	jnz loc_48C70D
	mov esi, [ebp+14h]
	test esi, esi
	jnz loc_48CF83
	lea ebx, [ebp+1Ch]
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48C70D
	cmp dword [ebp+0A0h], 0
	jz loc_48C70D
	mov eax, dword [dword_4DBAD0]
	mov [ebp+0A0h], eax
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C923:
	jbe loc_48CA6F
	cmp ebx, 0EA676574h
	jnz loc_48C70D
	cmp dword [ebp+14h], 0
	jz loc_48C70D
	mov esi, ecx
	lea edi, [esp+4]
	lea esi, [esi+4]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov eax, [ecx]
	mov [esp], eax
	mov eax, [ecx+18h]
	mov ebx, 0EA706C79h
	mov [esp+18h], eax
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 18h
	mov edx, 78h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 0FFFFFFFFh
	jz loc_48CC46
	mov edi, 1
	mov cl, al
	shl edi, cl
	mov esi, [ebp+14h]
	mov ecx, edi
	test [esi+50h], ecx
	jz loc_48CC57
	mov ecx, esi
	mov esi, eax
	shl eax, 2
	sub eax, esi
	shl eax, 3
	add eax, esi
	shl eax, 2
	add eax, ecx
	lea edi, [esp+1Ch]
	mov ecx, 17h
	lea esi, [eax+88h]

loc_48C9C3:
	rep movsd

loc_48C9C5:
	mov ecx, esp
	push edx
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov edx, [esp+0C8h]
	call dword [esi+50h]
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48C9E4:
	cmp ebx, 0EA626164h
	jnz loc_48C70D

loc_48C9F0:
	lea ebx, [ebp+1Ch]
	mov edx, [esp+0C4h]
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48C70D
	cmp dword [ebp+0A0h], 0
	jz loc_48CA1D
	mov eax, dword [dword_4DBAD0]
	mov [ebp+0A0h], eax

loc_48CA1D:
	mov ecx, 4
	mov eax, [esp+0C8h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp dword [esi+18h], 0
	jz loc_48C70D
	cmp eax, [esi]
	jnz loc_48C70D
	cmp edi, 0EA706C79h
	jz loc_48CC64

loc_48CA56:
	mov dword [esi+4], 1
	mov dword [esi], 0
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CA6F:
	mov ecx, 4
	mov eax, [esp+0C8h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov edx, eax
	test eax, eax
	jnz loc_48CC38
	cmp dword [esi], 0
	jnz loc_48CC38
	cmp dword [esi+14h], 0
	jz loc_48CC38
	mov eax, 1

loc_48CAAC:
	mov ebx, eax
	test eax, eax
	jnz loc_48CAEE
	cmp dword [esi+14h], 0
	jnz loc_48CC3F
	mov edi, [esi]
	test edi, edi
	jz loc_48CC3F
	cmp edx, edi
	jnz loc_48CC3F
	lea ebx, [ebp+1Ch]
	mov edx, [esp+0C4h]
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48CC3F
	mov eax, 1

loc_48CAEC:
	mov ebx, eax

loc_48CAEE:
	test ebx, ebx
	jz loc_48C70D
	cmp dword [ebp+0A0h], 0
	jz loc_48CB10
	cmp dword [esi+14h], 0
	jnz loc_48CB10
	mov eax, dword [dword_4DBAD0]
	mov [ebp+0A0h], eax

loc_48CB10:
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 48h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+3Ch], eax
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 4Ch
	mov edx, [esp+0C8h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+40h], eax
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 50h
	mov ebx, 20h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+44h], eax
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 54h
	lea edi, [esi+1Ch]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+48h], eax
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 58h
	add edx, 28h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+4Ch], eax
	mov eax, edi
	call strncpy_
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 6Ch
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov dword [esi+4], 1
	mov ebx, [esi+14h]
	mov [esi+8], eax
	test ebx, ebx
	jz loc_48C70D
	mov eax, [esp+0C8h]
	mov eax, [eax+6Ch]
	mov ecx, [esp+0C4h]
	call sub_48C2EC
	lea ebx, [eax+1]
	mov edx, edi
	mov eax, ebp
	call dword [esi+14h]
	test eax, eax
	jnz loc_48C70D
	mov [esi+14h], eax
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CC38:
	xor eax, eax
	jmp loc_48CAAC

loc_48CC3F:
	xor eax, eax
	jmp loc_48CAEC

loc_48CC46:
	mov ecx, 17h
	lea edi, [esp+1Ch]
	lea esi, [ebp+30h]
	jmp loc_48C9C3

loc_48CC57:
	mov ebx, 0EA626164h
	sub edx, 5Ch
	jmp loc_48C9C5

loc_48CC64:
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 18h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 0FFFFFFFFh
	jnz loc_48CCD3
	mov edx, 1

loc_48CC8C:
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 18h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	lea ebx, [eax+1]
	mov eax, [esp+0C8h]
	mov ecx, edx
	add eax, 1Ch
	mov edi, [esi+10h]
	mov edx, eax
	mov eax, edi
	call dword [esi+18h]
	test eax, eax
	jnz loc_48CA56
	mov [esi+18h], eax
	jmp loc_48CA56

loc_48CCD3:
	xor edx, edx
	jmp loc_48CC8C

loc_48CCD7:
	mov edx, [esp+0C4h]
	mov ebx, 0EA727370h
	call sub_48C538
	mov ecx, eax
	mov eax, [esp+0C8h]
	mov esi, 20h
	mov [esp+0B4h], ebx
	mov eax, [eax]
	mov [esp+0B0h], esi
	mov [esp], eax
	test ecx, ecx
	jnz loc_48CE95
	mov eax, [ebp+14h]
	mov edx, [eax+84h]
	mov eax, [eax+50h]
	dec edx
	call sub_48C2EC
	cmp eax, edx
	jnb loc_48CE7D
	mov eax, [ebp+14h]
	cmp byte [eax+3Ch], 0
	jnz loc_48CDF6

loc_48CD38:
	mov eax, [esp+0C8h]
	add eax, 28h
	mov [esp+0B8h], eax
	mov edi, [esp+0C8h]
	mov edx, [esp+0B8h]
	mov eax, [ebp+14h]
	mov esi, [esp+0C4h]
	call sub_48C5B0
	lea edi, [edi+28h]
	mov [esp+0C0h], eax
	movsd
	movsd
	movsd
	movsd
	movsd
	mov [esp+0ACh], eax
	mov eax, [ebp+14h]
	cmp dword [eax+4Ch], 0
	jnz loc_48CE2A

loc_48CD89:
	mov ebx, 4
	mov edx, 1
	lea eax, [esp+18h]
	call sub_48C054
	mov ebx, 4
	mov edx, [esp+0ACh]
	lea eax, [esp+1Ch]
	call sub_48C054
	mov eax, [esp+0C8h]
	mov ebx, 14h
	lea edx, [esp+4]
	add eax, 4
	call sub_48A980

loc_48CDC9:
	mov ebx, [esp+0B0h]
	mov ecx, esp
	mov edx, [esp+0C4h]
	mov esi, [ebp+8]
	push ebx
	mov eax, [ebp+0Ch]
	mov ebx, [esp+0B8h]
	call dword [esi+50h]
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CDF6:
	mov ebx, 10h
	mov edx, [esp+0C8h]
	add eax, 3Ch
	add edx, 18h
	call strncmp_
	test eax, eax
	jz loc_48CD38
	mov ebx, 4
	mov edx, 0FFFFFFFFh
	lea eax, [esp+18h]
	call sub_48C054
	jmp loc_48CDC9

loc_48CE2A:
	mov ebx, [esp+0C0h]
	mov edx, [esp+0B8h]
	mov esi, eax
	xor ecx, ecx
	inc ebx
	mov eax, ebp
	call dword [esi+4Ch]
	test eax, eax
	jnz loc_48CD89
	mov cl, [esp+0C0h]
	mov edx, 1
	shl edx, cl
	mov eax, [ebp+14h]
	not edx
	mov ecx, [eax+50h]
	mov ebx, 4
	and ecx, edx
	mov edx, 0FFFFFFFDh
	mov [eax+50h], ecx
	lea eax, [esp+18h]
	call sub_48C054
	jmp loc_48CDC9

loc_48CE7D:
	mov ebx, 4
	mov edx, 0FFFFFFFEh
	lea eax, [esp+18h]
	call sub_48C054
	jmp loc_48CDC9

loc_48CE95:
	mov ebx, 4
	mov edx, 1
	lea eax, [esp+18h]
	call sub_48C054
	mov eax, [ebp+14h]
	mov edx, ecx
	add eax, 88h
	sub edx, eax
	mov ecx, 64h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ebx, 4
	lea ecx, [esp+1Ch]
	mov edx, eax
	mov eax, ecx
	call sub_48C054
	jmp loc_48CDC9

loc_48CED7:
	mov ebx, eax
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48C70D
	mov ecx, 4
	mov eax, [esp+0C8h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, [esi]
	jnz loc_48C70D
	mov eax, [esp+0C8h]
	mov ecx, 4
	add eax, 18h
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi+4], eax
	mov ebx, [esi+4]
	mov dword [esi], 0
	cmp ebx, 1
	jnz loc_48C70D
	mov esi, [esp+0C8h]
	lea edi, [ebp+1Ch]
	lea esi, [esi+4]
	mov eax, dword [dword_4DBACC]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov [ebp+0A4h], eax
	mov eax, dword [dword_4DBAD0]
	mov [ebp+0A0h], eax
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CF72:
	call sub_48C538
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CF83:
	mov eax, esi
	call sub_48C538
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4

loc_48CF96:
	mov edx, [esp+0C4h]
	call sub_48C538
	mov esi, eax
	test eax, eax
	jz loc_48C70D
	mov edi, [ebp+14h]
	lea edx, [edi+88h]
	sub eax, edx
	mov edx, eax
	mov ecx, 64h
	sar edx, 1Fh
	idiv ecx
	mov cl, al
	mov eax, 1
	shl eax, cl
	mov edx, [edi+50h]
	not eax
	and edx, eax
	mov [edi+50h], edx
	mov dword [esi+5Ch], 0
	add esp, 0CCh
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_48C6BC endp

sub_48CFEC: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 64h
	mov edx, [eax+4]
	mov ecx, [edx]
	mov [esp+5Ch], eax
	test ecx, ecx
	jnz loc_48D15E
	cmp dword [eax+0A8h], 0
	jnz loc_48D055
	cmp dword [eax+0Ch], 0
	jz loc_48D055
	mov ecx, 14h
	mov edi, esp
	mov esi, (dword_48C088+8)
	mov edx, [eax+18h]
	rep movsd
	mov [esp+10h], eax
	test edx, edx
	jnz loc_48D02F
	mov edx, esp

loc_48D02F:
	mov eax, [esp+5Ch]
	call sub_48C624
	mov eax, [esp+5Ch]
	mov edi, [eax+0A4h]
	test edi, edi
	jz loc_48D055
	cmp dword [eax+14h], 0
	jnz loc_48D055
	lea edx, [edi-1]
	mov [eax+0A4h], edx

loc_48D055:
	mov eax, [esp+5Ch]
	mov ecx, [eax+14h]
	test ecx, ecx
	jz loc_48D15E
	mov ebx, [ecx+8]
	mov esi, ecx
	test ebx, ebx
	jnz loc_48D15E
	cmp dword [ecx+50h], 0
	jz loc_48D15E
	mov dword [esp+50h], 0EA6F6C61h
	mov eax, [esp+5Ch]
	mov edx, [eax+0A0h]
	mov [esp+58h], ebx
	cmp edx, 2
	jl loc_48D0E4
	lea ecx, [edx-1]
	mov [eax+0A0h], ecx

loc_48D09F:
	xor edi, edi
	lea eax, [esi+88h]
	mov [esp+60h], edi
	mov [esp+54h], eax
	mov edi, esi

loc_48D0B1:
	mov eax, [esi+84h]
	mov ebp, [esp+60h]
	dec eax
	cmp eax, ebp
	jbe loc_48D15E
	mov cl, [esp+60h]
	mov eax, 1
	mov edx, [esi+50h]
	shl eax, cl
	test eax, edx
	jnz loc_48D0FE

loc_48D0D6:
	mov ecx, [esp+60h]
	inc ecx
	add edi, 64h
	mov [esp+60h], ecx
	jmp loc_48D0B1

loc_48D0E4:
	mov edx, [esp+5Ch]
	mov ebx, 1
	mov eax, dword [dword_4DBAD0]
	mov [esp+58h], ebx
	mov [edx+0A0h], eax
	jmp loc_48D09F

loc_48D0FE:
	imul ecx, ebp, 64h
	mov edx, [edi+0E4h]
	lea ebp, [edx-1]
	mov [edi+0E4h], ebp
	test edx, edx
	jnz loc_48D127
	not eax
	and [esi+50h], eax
	mov ecx, [esp+60h]
	inc ecx
	add edi, 64h
	mov [esp+60h], ecx
	jmp loc_48D0B1

loc_48D127:
	cmp dword [esp+58h], 0
	jz loc_48D0D6
	mov ebp, [esp+5Ch]
	push 0
	mov edx, [esp+58h]
	mov eax, [esp+60h]
	mov ebx, [esp+54h]
	mov ebp, [ebp+8]
	mov eax, [eax+0Ch]
	add edx, ecx
	xor ecx, ecx
	call dword [ebp+50h]
	mov ecx, [esp+60h]
	inc ecx
	add edi, 64h
	mov [esp+60h], ecx
	jmp loc_48D0B1

loc_48D15E:
	mov eax, 1
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48CFEC endp

sub_48D16C: ;SUBROUTINE
	push ebx
	push edx
	mov ebx, 1
	mov edx, sub_48CFEC
	mov eax, dword_564364
	call sub_48BF74
	pop edx
	pop ebx
	ret
;sub_48D16C endp

sub_48D188: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov edx, dword [dword_4DBAFC]
	inc edx
	mov dword [dword_4DBAFC], edx
	cmp edx, 1
	jnz loc_48D1B4
	mov eax, [eax+8]
	call dword [eax+14h]
	test eax, eax
	jz loc_48D1C5
	mov eax, sub_48D16C
	call sub_4A3F04

loc_48D1B4:
	mov ebx, [esi+8]
	mov eax, ecx
	xor edx, edx
	call dword [ebx+1Ch]
	mov [esi+0Ch], eax
	test eax, eax
	jnz loc_48D1CA

loc_48D1C5:
	pop edi
	pop esi
	ret 8

loc_48D1CA:
	mov ecx, [esi+8]
	lea edx, [esi+30h]
	mov ebx, 10h
	call dword [ecx+40h]
	lea edx, [esi+8Ch]
	mov eax, edi
	mov dword [esi+9Ch], 1
	call sub_48A980
	mov ebx, 33h
	mov edx, [esp+0Ch]
	lea eax, [esi+44h]
	call strncpy_
	mov ebx, 13h
	mov edx, [esp+10h]
	lea eax, [esi+78h]
	call strncpy_
	mov eax, 0FAh
	pop edi
	pop esi
	ret 8
;sub_48D188 endp

sub_48D21C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov edx, eax
	mov ebx, [eax+0Ch]
	mov ecx, 1
	test ebx, ebx
	jz loc_48D28A
	cmp dword [eax+14h], 0
	jnz loc_48D23E
	cmp dword [eax+0A0h], 0
	jz loc_48D247

loc_48D23E:
	mov eax, edx
	call sub_48B28C
	mov ecx, eax

loc_48D247:
	mov ebp, [edx+0A8h]
	mov dword [edx+9Ch], 0
	test ebp, ebp
	jz loc_48D26C
	xor esi, esi

loc_48D25D:
	mov eax, esi
	call sub_483EB0
	cmp esi, [edx+0A8h]
	jnz loc_48D25D

loc_48D26C:
	mov esi, [edx+8]
	mov eax, ebx
	mov dword [edx+0Ch], 0
	call dword [esi+20h]
	mov ebx, dword [dword_4DBAFC]
	dec ebx
	mov dword [dword_4DBAFC], ebx
	jz loc_48D292

loc_48D28A:
	mov eax, ecx
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48D292:
	mov eax, sub_48D16C
	call sub_4A3F6C
	mov eax, [edx+8]
	call dword [eax+18h]
	mov ecx, eax
	mov eax, ecx
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48D21C endp

sub_48D2AC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 88h
	mov ebp, eax
	mov [esp+80h], edx
	mov [esp+84h], ebx
	mov ebx, ecx
	mov ecx, 14h
	mov edi, esp
	mov esi, (dword_48C088+58h)
	lea edx, [esp+50h]
	add eax, 8Ch
	rep movsd
	call sub_48C270
	mov eax, [esp+80h]
	mov [esp+10h], ebp
	mov [esp+0Ch], ebx
	xor edx, edx
	mov [esp+14h], eax
	mov [esp], edx
	mov eax, esp
	mov [ebp+18h], eax
	mov eax, dword [dword_5637F0]
	mov ecx, [esp+84h]
	mov esi, 1
	add eax, ecx
	xor ebx, ebx
	mov dword [dword_4DBAF8], eax

loc_48D31A:
	mov ecx, [ebp+8]
	lea edx, [esp+50h]
	mov eax, [ebp+0Ch]
	call dword [ecx+30h]
	mov edx, eax

loc_48D329:
	mov eax, esi
	call sub_483F44
	test eax, eax
	jge loc_48D351

loc_48D334:
	test edx, edx
	jnz loc_48D362
	mov eax, edx
	mov dword [ebp+18h], 0
	add esp, 88h
	pop ebp
	pop edi
	pop esi
	ret

loc_48D34B:
	test edx, edx
	jz loc_48D31A
	jmp loc_48D329

loc_48D351:
	call sub_48C2D4
	test eax, eax
	jnz loc_48D334
	cmp ebx, [esp+14h]
	jnz loc_48D34B
	jmp loc_48D334

loc_48D362:
	mov ecx, [ebp+8]
	mov eax, [ebp+0Ch]
	call dword [ecx+34h]
	mov eax, edx
	mov dword [ebp+18h], 0
	add esp, 88h
	pop ebp
	pop edi
	pop esi
	ret
;sub_48D2AC endp

sub_48D380: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 104h
	mov ebp, eax
	mov [esp+100h], edx
	mov [esp+0FCh], ebx
	mov ecx, 14h
	lea edi, [esp+0ACh]
	mov esi, (dword_48C088+0A8h)
	rep movsd
	cmp dword [eax+0A4h], 0
	jnz loc_48D438

loc_48D3BA:
	mov ecx, 17h
	lea edi, [esp+28h]
	lea esi, [ebp+30h]
	rep movsd
	lea edi, [esp+4]
	mov esi, [esp+100h]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov esi, [esp+100h]
	lea edi, [ebp+1Ch]
	mov ecx, [esp+0FCh]
	movsd
	movsd
	movsd
	movsd
	movsd
	test ecx, ecx
	jz loc_48D468
	mov ebx, 10h
	lea eax, [esp+18h]
	mov edx, ecx
	call strncpy_

loc_48D402:
	mov eax, dword [dword_4DABCC]
	add eax, eax
	push eax
	lea ecx, [esp+4]
	mov ebx, 0EA616464h
	push 88h
	lea edx, [esp+0B4h]
	mov eax, ebp
	call sub_48C458
	mov eax, [esp+0B0h]

loc_48D42D:
	add esp, 104h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48D438:
	mov ebx, [esp+100h]
	lea edx, [eax+1Ch]
	call sub_48B2F0
	test eax, eax
	jz loc_48D452
	mov eax, 1
	jmp loc_48D42D

loc_48D452:
	mov eax, ebp
	call sub_48B28C
	mov dword [ebp+0A4h], 0
	jmp loc_48D3BA

loc_48D468:
	mov eax, [ebp+14h]
	mov byte [eax+3Ch], 0
	jmp loc_48D402
;sub_48D380 endp

sub_48D474: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0FCh
	mov ebp, ebx
	mov ecx, 14h
	lea edi, [esp+0ACh]
	mov esi, (dword_48C088+0F8h)
	rep movsd
	test edx, edx
	jnz loc_48D4EB
	cmp dword [eax+0A4h], 0
	jz loc_48D4EB

loc_48D4A0:
	mov edx, dword [dword_4DABCC]
	add edx, edx
	mov ecx, esp
	push edx
	mov ebx, 0EA726571h
	lea esi, [esp+0CCh]
	push 0ACh
	lea edx, [esp+0B4h]
	mov edi, ebp
	call sub_48C458
	mov ecx, 0Dh
	rep movsd
	cmp dword [esp+0B0h], 0
	jz loc_48D504
	mov eax, 1
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48D4EB:
	test edx, edx
	jz loc_48D504
	cmp dword [eax+0A4h], 0
	jnz loc_48D504
	mov esi, edx
	lea edi, [eax+1Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	jmp loc_48D4A0

loc_48D504:
	xor eax, eax
	add esp, 0FCh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48D474 endp

sub_48D514: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, eax
	mov esi, edx
	mov [esp+4], ebx
	mov [esp], ecx
	xor edx, edx
	mov ecx, [esi+30h]
	mov [esp+8], edx
	test ecx, ecx
	jz loc_48D61C

loc_48D536:
	cmp dword [ebp+0A4h], 0
	jz loc_48D550
	mov eax, ebp
	call sub_48B28C
	mov dword [ebp+0A4h], 0

loc_48D550:
	mov edx, [esi+30h]
	sub edx, 2
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add eax, edx
	shl eax, 2
	lea edx, [eax+0ECh]
	mov ebx, dword [dword_4DABE8]
	mov eax, aNetsrvr ; "NETSRVR"
	call sub_484498
	mov [ebp+14h], eax
	test eax, eax
	jz loc_48D611
	mov [eax+4], ebp
	mov edi, [ebp+14h]
	mov ecx, 0Dh
	lea edi, [edi+54h]
	rep movsd
	mov eax, [ebp+14h]
	mov dword [eax+8], 0
	mov eax, [ebp+14h]
	mov dword [eax+50h], 0
	mov eax, [ebp+14h]
	mov edx, [esp]
	mov [eax+4Ch], edx
	mov eax, dword [dword_4DBACC]
	lea edi, [ebp+1Ch]
	mov [ebp+0A4h], eax
	mov eax, dword [dword_4DBAD0]
	lea esi, [ebp+30h]
	mov [ebp+0A0h], eax
	mov eax, [esp+4]
	movsd
	movsd
	movsd
	movsd
	movsd
	test eax, eax
	jnz loc_48D628
	mov eax, [ebp+14h]
	mov byte [eax+3Ch], 0

loc_48D5E5:
	mov edx, [ebp+14h]
	lea eax, [ebp+8Ch]
	add edx, 0Ch
	call sub_48C270
	mov ebx, [ebp+8]
	mov edx, [ebp+14h]
	mov eax, [ebp+0Ch]
	add edx, 0Ch
	call dword [ebx+28h]
	test eax, eax
	jz loc_48D63E
	mov dword [esp+8], 1

loc_48D611:
	mov eax, [esp+8]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_48D61C:
	mov dword [esi+30h], 20h
	jmp loc_48D536

loc_48D628:
	mov ebx, 10h
	mov eax, [ebp+14h]
	mov edx, [esp+4]
	add eax, 3Ch
	call strncpy_
	jmp loc_48D5E5

loc_48D63E:
	mov eax, [ebp+14h]
	call sub_4848FC
	mov dword [ebp+14h], 0
	mov eax, [esp+8]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_48D514 endp

sub_48D658: ;SUBROUTINE
	push ecx
	mov ecx, [eax+14h]
	test ecx, ecx
	jnz loc_48D664
	xor eax, eax
	pop ecx
	ret

loc_48D664:
	push edi
	push esi
	mov esi, ecx
	mov ecx, 0Dh
	lea edi, [esi+54h]
	mov esi, edx
	mov eax, 1
	rep movsd
	pop esi
	pop edi
	pop ecx
	ret
;sub_48D658 endp

sub_48D680: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, eax
	mov ebx, edx
	mov edx, [eax+14h]
	test edx, edx
	jz loc_48D6CF
	cmp dword [edx+8], 0
	jz loc_48D6AE

loc_48D693:
	test ebx, ebx
	jz loc_48D6A6
	mov eax, [ecx+14h]
	call sub_4848FC
	mov dword [ecx+14h], 0

loc_48D6A6:
	mov eax, 1
	pop ecx
	pop ebx
	ret

loc_48D6AE:
	push esi
	mov esi, [eax+8]
	add edx, 0Ch
	mov eax, [eax+0Ch]
	call dword [esi+2Ch]
	mov eax, [ecx+14h]
	mov byte [eax+0Ch], 0
	mov eax, [ecx+14h]
	mov dword [eax+8], 1
	pop esi
	jmp loc_48D693

loc_48D6CF:
	xor eax, eax
	pop ecx
	pop ebx
	ret
;sub_48D680 endp

sub_48D6D4: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	mov edi, dword [dword_4DBACC]
	mov esi, eax
	mov edx, [eax+14h]
	test edx, edx
	jz loc_48D6F0
	mov ecx, [edx+8]
	mov eax, edx
	test ecx, ecx
	jnz loc_48D703

loc_48D6F0:
	mov edi, dword [dword_4DBACC]
	xor eax, eax
	mov dword [dword_4DBACC], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_48D703:
	mov dword [edx+8], 0
	mov edx, [esi+14h]
	lea eax, [esi+8Ch]
	add edx, 0Ch
	call sub_48C270
	mov ecx, [esi+8]
	mov edx, [esi+14h]
	mov eax, [esi+0Ch]
	add edx, 0Ch
	call dword [ecx+28h]
	test eax, eax
	jz loc_48D76F
	push ebx
	mov edi, dword [dword_4DBACC]
	mov dword [esi+0A0h], 1
	xor edx, edx
	xor eax, eax

loc_48D743:
	mov ecx, [esi+14h]
	mov ebx, [ecx+84h]
	dec ebx
	cmp edx, ebx
	jnb loc_48D75E
	add eax, 64h
	inc edx
	mov [ecx+eax+80h], edi
	jmp loc_48D743

loc_48D75E:
	mov eax, 1
	pop ebx
	mov dword [dword_4DBACC], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret

loc_48D76F:
	mov eax, [esi+14h]
	mov dword [eax+8], 0
	mov edi, dword [dword_4DBACC]
	xor eax, eax
	mov dword [dword_4DBACC], edi
	pop edi
	pop esi
	pop edx
	pop ecx
	ret
;sub_48D6D4 endp

sub_48D78C: ;SUBROUTINE
	push ebp
	sub esp, 0B0h
	mov ebp, eax
	cmp dword [eax+0A4h], 0
	jz loc_48D88A
	push edi
	push esi
	push edx
	push ecx
	push ebx
	mov eax, dword [dword_4DBAF4]
	mov [esp+14h], eax
	lea edi, [esp+18h]
	lea esi, [ebp+1Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	inc eax
	mov ecx, [ebp+14h]
	mov dword [dword_4DBAF4], eax
	test ecx, ecx
	jz loc_48D897
	mov ebx, [ecx+8]
	mov edx, ecx
	test ebx, ebx
	jnz loc_48D862
	mov ecx, [ebp+8]
	add edx, 0Ch
	mov eax, [ebp+0Ch]
	call dword [ecx+2Ch]
	mov eax, [ebp+14h]
	mov [esp+0C0h], ebx
	xor esi, esi
	mov byte [eax+0Ch], 0

loc_48D7F6:
	mov eax, [ebp+14h]
	mov edi, [eax+50h]
	test edi, edi
	jz loc_48D862
	mov edx, [eax+84h]
	mov ecx, [esp+0C0h]
	dec edx
	cmp edx, ecx
	jbe loc_48D862
	mov cl, [esp+0C0h]
	mov edx, 1
	shl edx, cl
	mov ecx, edx
	test edx, edi
	jnz loc_48D83A

loc_48D826:
	mov eax, [esp+0C0h]
	inc eax
	add esi, 64h
	mov [esp+0C0h], eax
	jmp loc_48D7F6

loc_48D83A:
	not ecx
	push 18h
	and edi, ecx
	mov ebx, 0EA627965h
	mov [eax+50h], edi
	lea ecx, [esp+18h]
	mov edx, [ebp+14h]
	mov edi, [ebp+8]
	add edx, 88h
	mov eax, [ebp+0Ch]
	add edx, esi
	call dword [edi+50h]
	jmp loc_48D826

loc_48D862:
	mov eax, [ebp+14h]
	call sub_4848FC
	mov dword [ebp+14h], 0

loc_48D871:
	mov dword [ebp+0A0h], 0
	mov dword [ebp+0A4h], 0
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi

loc_48D88A:
	mov eax, 1
	add esp, 0B0h
	pop ebp
	ret

loc_48D897:
	push 18h
	lea ecx, [esp+18h]
	mov ebx, 0EA627965h
	mov esi, [ebp+8]
	lea edx, [ebp+1Ch]
	mov eax, [ebp+0Ch]
	call dword [esi+50h]
	jmp loc_48D871
;sub_48D78C endp

sub_48D8B0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 110h
	mov ebp, eax
	mov [esp+0FCh], ebx
	xor ecx, ecx
	mov [esp+104h], ecx
	test edx, edx
	jnz loc_48D976
	cmp dword [eax+0A4h], 0
	jz loc_48D976
	lea edx, [eax+1Ch]

loc_48D8E4:
	cmp dword [ebp+14h], 0
	jz loc_48D9C6
	lea eax, [ebp+1Ch]
	mov ebx, edx
	mov edx, eax
	mov eax, ebp
	call sub_48B2F0
	test eax, eax
	jz loc_48D9C6
	mov ecx, 1
	lea edx, [ebp+30h]
	xor ebx, ebx
	mov eax, ebp
	call dword [esp+0FCh]
	test eax, eax
	jz loc_48DB70
	mov edi, 1
	xor eax, eax
	xor esi, esi
	mov [esp+104h], edi
	mov [esp+108h], eax

loc_48D936:
	mov eax, [ebp+14h]
	mov edx, [eax+84h]
	mov edi, [esp+108h]
	dec edx
	cmp edx, edi
	jbe loc_48DB70
	mov cl, [esp+108h]
	mov edx, 1
	shl edx, cl
	test [eax+50h], edx
	jnz loc_48D99F

loc_48D962:
	mov edi, [esp+108h]
	inc edi
	add esi, 64h
	mov [esp+108h], edi
	jmp loc_48D936

loc_48D976:
	test edx, edx
	jz loc_48D992
	cmp dword [ebp+0A4h], 0
	jnz loc_48D992
	mov esi, edx
	lea edi, [ebp+1Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	jmp loc_48D8E4

loc_48D992:
	xor eax, eax
	add esp, 110h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48D99F:
	add eax, 88h
	lea ebx, [edi+1]
	lea edx, [eax+esi]
	xor ecx, ecx
	mov eax, ebp
	call dword [esp+0FCh]
	test eax, eax
	jz loc_48DB70
	inc dword [esp+104h]
	jmp loc_48D962

loc_48D9C6:
	mov ecx, 14h
	lea edi, [esp+0ACh]
	mov ebx, 0EA726571h
	mov eax, dword [dword_4DABCC]
	mov esi, (dword_48C088+148h)
	add eax, eax
	lea edx, [esp+0ACh]
	push eax
	rep movsd
	push 0ACh
	lea ecx, [esp+8]
	mov eax, ebp
	call sub_48C458
	cmp dword [esp+0B0h], 0
	jz loc_48DB70
	mov eax, [esp+0B4h]
	mov edx, 1
	mov ebx, 4
	mov [esp+100h], eax
	mov [esp+0B0h], edx
	mov eax, [esp+0FCh]
	mov edx, 0FFFFFFFFh
	mov [esp+0C4h], eax
	lea eax, [esp+18h]
	lea edi, [esp+4]
	call sub_48C054
	mov eax, dword [dword_4DABCC]
	mov ecx, esp
	add eax, eax
	mov ebx, 0EA676574h
	push eax
	lea edx, [esp+0B0h]
	lea esi, [ebp+1Ch]
	push 1Ch
	mov eax, ebp
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48C458
	cmp dword [esp+0B0h], 0
	jz loc_48DB82
	mov eax, 1

loc_48DA84:
	mov esi, [esp+100h]
	xor ebx, ebx
	mov [esp+104h], eax
	mov [esp+10Ch], ebx
	test esi, esi
	jz loc_48DB70

loc_48DAA3:
	cmp dword [esp+10Ch], 1Fh
	jge loc_48DB70
	cmp dword [esp+0C4h], 0
	jz loc_48DB70
	cmp dword [esp+104h], 0
	jz loc_48DB70
	mov cl, [esp+10Ch]
	mov eax, 1
	mov edx, [esp+100h]
	shl eax, cl
	test eax, edx
	jz loc_48DB52
	mov ebx, 4
	mov edx, [esp+10Ch]
	lea eax, [esp+18h]
	call sub_48C054
	mov eax, dword [dword_4DABCC]
	add eax, eax
	push eax
	lea ecx, [esp+4]
	mov ebx, 0EA676574h
	push 1Ch
	lea edx, [esp+0B4h]
	mov eax, ebp
	call sub_48C458
	cmp dword [esp+0B0h], 0
	jz loc_48DB89
	mov eax, 1

loc_48DB2B:
	mov cl, [esp+10Ch]
	mov [esp+104h], eax
	mov eax, 1
	shl eax, cl
	mov ebx, [esp+10Ch]
	not eax
	and ebx, eax
	mov [esp+10Ch], ebx

loc_48DB52:
	mov edx, [esp+10Ch]
	inc edx
	mov ecx, [esp+100h]
	mov [esp+10Ch], edx
	test ecx, ecx
	jnz loc_48DAA3

loc_48DB70:
	mov eax, [esp+104h]
	add esp, 110h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48DB82:
	xor eax, eax
	jmp loc_48DA84

loc_48DB89:
	xor eax, eax
	jmp loc_48DB2B
;sub_48D8B0 endp

sub_48DB90: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ecx, [eax+14h]
	test ecx, ecx
	jnz loc_48DBAA

loc_48DBA0:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48DBAA:
	mov eax, ecx
	call sub_48C538
	mov edi, eax
	test eax, eax
	jz loc_48DBA0
	push ebx
	mov eax, [esi+14h]
	mov edx, edi
	add eax, 88h
	sub edx, eax
	mov ecx, 64h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	push 0
	mov ebx, 0EA6F7574h
	mov ebp, [esi+8]
	mov [esp+8], eax
	mov edx, edi
	xor ecx, ecx
	mov eax, [esi+0Ch]
	call dword [ebp+50h]
	mov cl, [esp+4]
	mov eax, 1
	mov edx, [esi+14h]
	shl eax, cl
	mov ebx, [edx+50h]
	not eax
	and ebx, eax
	mov [edx+50h], ebx
	pop ebx
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48DB90 endp

sub_48DC0C: ;SUBROUTINE
	push esi
	mov esi, edx
	test edx, edx
	jz loc_48DC6D
	push edi
	cmp dword [edx+24h], 0
	jnz loc_48DC2F
	mov edx, dword [dword_4DABCC]
	mov edi, 1Eh
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esi+24h], eax

loc_48DC2F:
	cmp dword [esi+28h], 0
	jnz loc_48DC4A
	mov edx, dword [dword_4DABCC]
	mov edi, 0Fh
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esi+28h], eax

loc_48DC4A:
	cmp dword [esi+2Ch], 0
	jnz loc_48DC65
	mov edx, dword [dword_4DABCC]
	mov edi, 0Fh
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esi+2Ch], eax

loc_48DC65:
	mov dword [esi+8], 0
	pop edi

loc_48DC6D:
	mov edx, dword_4D4BC8
	push ecx
	mov eax, esi
	mov ecx, ebx
	mov ebx, off_4DBB3C
	call sub_48A188
	pop esi
	ret
;sub_48DC0C endp

sub_48DC84: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, [eax+48h]
	mov dword [dword_56438C], edx
	mov edx, [esi+0Ch]
	mov edi, eax
	test edx, edx
	jz loc_48DCF3
	mov edx, [esi+8]
	cmp dword [edx+44h], 0
	jz loc_48DCAE
	mov ecx, edx
	lea edx, [eax+30h]
	mov eax, [esi+0Ch]
	call dword [ecx+44h]

loc_48DCAE:
	push ebx
	mov ebx, 0EA646174h
	lea edx, [edi+30h]
	mov ebp, [esi+8]
	mov eax, [esi+0Ch]
	xor ecx, ecx
	call dword [ebp+58h]
	mov eax, dword [dword_56437C]
	call sub_489F48
	mov ebx, [esi+0A8h]
	inc ebx
	mov eax, dword [dword_56437C]
	mov [esi+0A8h], ebx
	call sub_489F60
	mov dword [edi+44h], 0FFFFFFFFh
	pop ebx
	mov eax, [edi+44h]
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48DCF3:
	mov [eax+44h], edx
	mov eax, [edi+44h]
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48DC84 endp

sub_48DD00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	mov ecx, eax
	mov edx, [eax+48h]
	mov ebx, [edx+0Ch]
	mov edi, eax
	test ebx, ebx
	jz loc_48DD1C
	cmp dword [edx+0A8h], 0
	jnz loc_48DD2E

loc_48DD1C:
	mov dword [edi+44h], 0
	mov eax, 1
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48DD2E:
	push esi
	mov eax, dword [dword_56437C]
	mov ebx, 0EA646174h
	call sub_489F48
	lea esi, [ecx+30h]
	mov ebp, [edx+0A8h]
	mov ecx, 1
	dec ebp
	mov eax, dword [dword_56437C]
	mov [edx+0A8h], ebp
	call sub_489F60
	mov ebp, [edx+8]
	mov eax, [edx+0Ch]
	mov edx, esi
	call dword [ebp+58h]
	pop esi
	mov dword [edi+44h], 0
	mov eax, 1
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48DD00 endp

sub_48DD7C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov ebx, dword [dword_56438C]
	mov ecx, eax
	test ebx, ebx
	jnz loc_48DDA8

loc_48DD8D:
	cmp dword [ecx+44h], 0
	jz loc_48DDBB
	mov eax, [ecx+48h]
	cmp dword [eax+9Ch], 0
	jz loc_48DDBB
	mov eax, 1
	pop edx
	pop ecx
	pop ebx
	ret

loc_48DDA8:
	call sub_48DDE0
	test eax, eax
	jz loc_48DD8D
	mov eax, edx
	call dword [dword_56438C]
	jmp loc_48DD8D

loc_48DDBB:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48DD7C endp

sub_48DDC4: ;SUBROUTINE
	push edx
	mov eax, [eax+48h]
	mov edx, [eax+8]
	mov eax, [eax+0Ch]
	call dword [edx+48h]
	test eax, eax
	jz loc_48DDDD
	xor eax, eax
	mov ax, word [word_4DBB58]

loc_48DDDD:
	pop edx
	ret
;sub_48DDC4 endp

sub_48DDE0: ;SUBROUTINE
	push edx
	mov eax, [eax+48h]
	mov edx, [eax+8]
	mov eax, [eax+0Ch]
	call dword [edx+4Ch]
	pop edx
	ret
;sub_48DDE0 endp

sub_48DDF0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 70h
	mov [esp+6Ch], edx
	mov [esp+68h], ebx
	mov ecx, 14h
	mov edi, esp
	mov esi, (dword_48C088+198h)
	rep movsd
	mov ebp, eax
	mov eax, [eax+48h]
	mov edi, ebp
	mov [esp+10h], eax
	add edi, 30h

loc_48DE1B:
	mov edx, 0EA646174h
	mov ebx, 14h
	mov eax, edi
	mov [esp+64h], edx
	lea edx, [esp+50h]
	mov ecx, [esp+68h]
	call sub_48A980
	lea ebx, [esp+64h]
	mov eax, [ebp+48h]
	lea edx, [esp+50h]
	push ecx
	mov esi, [eax+8]
	mov ecx, [esp+70h]
	mov eax, [eax+0Ch]
	call dword [esi+54h]
	mov ebx, [esp+64h]
	mov esi, eax
	test ebx, ebx
	jz loc_48DEC7
	mov eax, [ebp+48h]
	cmp dword [eax+18h], 0
	jnz loc_48DE69
	mov edx, esp
	mov [eax+18h], edx

loc_48DE69:
	mov ecx, [esp+6Ch]
	mov ebx, [esp+64h]
	mov eax, [ebp+48h]
	push esi
	lea edx, [esp+54h]
	mov eax, [eax+18h]
	call sub_48C6BC
	mov eax, [ebp+48h]
	mov edx, esp
	cmp edx, [eax+18h]
	jnz loc_48DE92
	mov dword [eax+18h], 0

loc_48DE92:
	mov ebx, [esp+64h]
	cmp ebx, 0EA646174h
	jz loc_48DEB6
	cmp ebx, 0EA6E6F21h
	jnz loc_48DE1B
	mov dword [ebp+4], 0
	jmp loc_48DE1B

loc_48DEB6:
	mov dword [ebp+44h], 1
	mov eax, esi
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48DEC7:
	mov eax, [ebp+48h]
	cmp dword [eax+0A8h], 0
	jnz loc_48DEE5
	mov ebx, 0EA646174h
	mov esi, [eax+8]
	xor ecx, ecx
	xor edx, edx
	mov eax, [eax+0Ch]
	call dword [esi+58h]

loc_48DEE5:
	xor esi, esi
	mov eax, esi
	add esp, 70h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48DDF0 endp

sub_48DEF4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov [esp], edx
	mov edi, ebx
	mov edx, 0EA646174h
	mov [esp+8], eax
	mov [esp+4], edx
	cmp dword [eax+44h], 0
	jge loc_48DF4A
	dec dword [eax+44h]
	cmp dword [eax+44h], 0FFFFFFFCh
	jge loc_48DF4A
	mov eax, 0EA6F706Eh
	push 0
	mov [esp+8], eax
	mov eax, [esi+48h]
	mov ebx, 0EA6F706Eh
	lea edx, [esi+30h]
	mov ebp, [eax+8]
	xor ecx, ecx
	mov eax, [eax+0Ch]
	call dword [ebp+50h]
	test eax, eax
	jz loc_48DF4A
	mov dword [esi+44h], 0FFFFFFFFh

loc_48DF4A:
	mov eax, [esp+8]
	mov edx, [esp+8]
	mov ecx, [esp]
	mov eax, [eax+48h]
	mov ebx, [esp+4]
	push edi
	mov esi, [eax+8]
	add edx, 30h
	mov eax, [eax+0Ch]
	call dword [esi+50h]
	test eax, eax
	jz loc_48DF6F
	mov eax, edi

loc_48DF6F:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48DEF4 endp

dword_48DF80: dd 0EA67616Dh, 0FFFFFFFFh, 0FF2E5251h

sub_48DFA8: ;SUBROUTINE
	push ecx
	mov eax, edx
	mov ecx, ebx
	cmp dword [dword_5643F0], 0
	jz loc_48DFBA
	xor eax, eax
	pop ecx
	ret

loc_48DFBA:
	mov edx, dword_5643F4
	call sub_48A980
	mov eax, 1
	mov dword [dword_5643F0], ecx
	pop ecx
	ret
;sub_48DFA8 endp

sub_48DFD4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2004h
	mov ebp, eax
	mov [esp+2000h], edx
	mov esi, ebx
	mov edi, ecx
	mov ebx, 10h
	mov edx, esp
	add eax, 8Ch
	call sub_48A980
	lea edx, [esp+10h]
	mov eax, [esp+2000h]
	mov ebx, esi
	call sub_48A980
	add esi, 10h
	call SDL_GetTicks_wrap
	mov dword [dword_5643E8], eax
	xor ecx, ecx

loc_48E01E:
	mov edx, esp
	mov eax, dword_564390
	mov ebx, esi
	call sub_48A2F0
	test eax, eax
	jnz loc_48E04A
	cmp ecx, dword [dword_564394]
	jz loc_48E04A
	test edi, edi
	jz loc_48E01E
	mov eax, 1
	call sub_483F44
	test eax, eax
	jl loc_48E01E

loc_48E04A:
	test edi, edi
	jz loc_48E0CE
	mov ecx, 1
	xor edx, edx

loc_48E059:
	mov ebx, dword [dword_5643F0]
	cmp edx, ebx
	jnz loc_48E076
	cmp ebx, dword [dword_564394]
	jz loc_48E076
	mov eax, ecx
	call sub_483F44
	test eax, eax
	jge loc_48E059

loc_48E076:
	cmp dword [dword_5643F0], 0
	jz loc_48E09F
	cmp dword [dword_5643F4], 0EA687568h
	jnz loc_48E0AB
	mov dword [ebp+0A0h], 0
	mov dword [ebp+0A4h], 0

loc_48E09F:
	xor eax, eax
	add esp, 2004h
	pop ebp
	pop edi
	pop esi
	ret

loc_48E0AB:
	xor edx, edx
	mov dword [dword_5643F0], edx
	call SDL_GetTicks_wrap
	mov dword [dword_5643E8], eax
	mov eax, dword [dword_5643F4]
	add esp, 2004h
	pop ebp
	pop edi
	pop esi
	ret

loc_48E0CE:
	mov eax, 1
	add esp, 2004h
	pop ebp
	pop edi
	pop esi
	ret
;sub_48DFD4 endp

sub_48E0E0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	xor edx, edx
	test eax, eax
	jz loc_48E0F8

loc_48E0EA:
	mov ecx, eax
	neg ecx
	not ecx
	and eax, ecx
	inc edx
	test eax, eax
	jnz loc_48E0EA
	nop

loc_48E0F8:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_48E0E0 endp

sub_48E100: ;SUBROUTINE
	push ebx
	push ecx
	push ebp
	sub esp, 20h
	cmp dword [dword_5643F0], 0
	jz loc_48E191
	cmp dword [dword_564394], 0
	jz loc_48E191
	cmp dword [dword_5643F4], 0EA616E70h
	jnz loc_48E191
	push edi
	mov ebp, dword [dword_5643D8]
	mov ebp, [ebp+14h]
	test ebp, ebp
	jz loc_48E188
	push esi
	mov esi, 0EA726573h
	lea edi, [esp+0Ch]
	mov [esp+8], esi
	mov esi, dword_5643F8
	movsd
	movsd
	movsd
	movsd
	movsd
	mov ebx, dword [dword_564478]
	mov edx, dword_5643F4
	add edx, 28h
	mov eax, dword [dword_5643D8]
	xor ecx, ecx
	call ebp
	mov [esp+20h], eax
	mov eax, dword [dword_564478]
	mov [esp+24h], eax
	mov eax, dword [dword_5643D8]
	mov ebx, 20h
	lea edx, [esp+8]
	xor ecx, ecx
	call sub_48DFD4
	pop esi

loc_48E188:
	xor edi, edi
	mov dword [dword_5643F0], edi
	pop edi

loc_48E191:
	mov eax, dword [dword_5643D8]
	cmp dword [eax+14h], 0
	jnz loc_48E1BC
	cmp dword [dword_564394], 0
	jz loc_48E1C5
	mov ebx, dword [dword_5643E8]
	add ebx, 2710h
	call SDL_GetTicks_wrap
	cmp eax, ebx
	ja loc_48E1C5

loc_48E1BC:
	xor eax, eax
	add esp, 20h
	pop ebp
	pop ecx
	pop ebx
	ret

loc_48E1C5:
	mov eax, dword_564390
	call sub_48A308
	mov eax, sub_48E100
	xor edx, edx
	call sub_483E64
	mov dword [dword_5643E0], edx
	xor eax, eax
	add esp, 20h
	pop ebp
	pop ecx
	pop ebx
	ret
;sub_48E100 endp

sub_48E1EC: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	mov esi, eax
	mov ebx, edx
	cmp dword [dword_564394], 0
	jz loc_48E223
	cmp eax, dword [dword_5643D8]
	jz loc_48E278
	push edi
	mov eax, dword_564390
	call sub_48A308
	mov eax, sub_48E100
	xor edi, edi
	call sub_483E64
	mov dword [dword_5643E0], edi
	pop edi

loc_48E223:
	mov edx, 50h
	mov eax, dword_564390
	mov ebp, (dword_48DF80+8)
	call sub_48A01C
	mov dword [dword_5643A4], ebp
	mov dword [dword_5643B0], sub_48DFA8
	call SDL_GetTicks_wrap
	add eax, ebx
	mov dword [dword_5643E4], eax
	mov ecx, dword_5643C0
	mov ebx, dword [dword_4DBB60]
	mov edx, dword [off_4DBB5C]
	mov eax, esi
	call sub_48B2FC
	test eax, eax
	jnz loc_48E282

loc_48E271:
	xor eax, eax
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_48E278:
	mov eax, 1
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_48E282:
	mov ebx, 2
	mov edx, 0FAh
	mov eax, dword_564390
	mov ecx, esi
	call sub_48B2CC
	test eax, eax
	jz loc_48E271
	mov ebx, 1
	mov eax, sub_48E100
	mov edx, ebx
	call sub_483DD0
	mov edx, 1
	mov dword [dword_5643E0], edx
	mov eax, edx
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48E1EC endp

sub_48E2C0: ;SUBROUTINE
	mov eax, 1
	ret
;sub_48E2C0 endp

sub_48E2C8: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	call sub_48A270
	mov eax, [esi+8]
	call dword [eax+14h]
	mov dword [dword_4DBBA8], eax
	test eax, eax
	jnz loc_48E2E7

loc_48E2E2:
	pop edi
	pop esi
	ret 8

loc_48E2E7:
	mov ebx, [esi+8]
	mov edx, esi
	mov eax, ecx
	call dword [ebx+1Ch]
	mov [esi+0Ch], eax
	test eax, eax
	jz loc_48E2E2
	mov ecx, [esi+8]
	lea edx, [esi+30h]
	mov ebx, 10h
	call dword [ecx+40h]
	lea edx, [esi+8Ch]
	mov dword [esi+9Ch], 1
	mov eax, edi
	mov dword [esi+14h], 0
	call sub_48A980
	mov ebx, 33h
	mov edx, [esp+0Ch]
	lea eax, [esi+44h]
	call strncpy_
	mov ebx, 13h
	mov edx, [esp+10h]
	lea eax, [esi+78h]
	call strncpy_
	mov eax, dword [dword_4DBBA8]
	pop edi
	pop esi
	ret 8
;sub_48E2C8 endp

sub_48E350: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, [edx+0Ch]
	mov eax, 1
	test ecx, ecx
	jz loc_48E391
	cmp dword [edx+0A0h], 0
	jz loc_48E370
	mov eax, edx
	call sub_48B28C

loc_48E370:
	push ebx
	mov ebx, [edx+8]
	mov eax, ecx
	call dword [ebx+20h]
	mov dword [edx+9Ch], 0
	mov eax, [edx+8]
	mov dword [edx+0Ch], 0
	call dword [eax+18h]
	pop ebx

loc_48E391:
	pop edx
	pop ecx
	ret
;sub_48E350 endp

sub_48E394: ;SUBROUTINE
	push esi
	push ebp
	sub esp, 0Ch
	mov ebp, eax
	mov [esp+8], edx
	mov edx, ebx
	lea eax, 0[ebx*4]
	sub eax, ebx
	shl eax, 3
	add eax, ebx
	shl eax, 3
	mov edx, eax
	shl eax, 2
	mov ecx, dword [dword_4DABCC]
	add eax, edx
	xor edx, edx
	div ecx
	mov edx, eax
	mov eax, ebp
	call sub_48E1EC
	test eax, eax
	jz loc_48E42F
	push edi
	lea edi, [esp+4]
	mov esi, dword_48DF80
	movsd
	movsd
	pop edi

loc_48E3DD:
	mov ecx, 1
	mov ebx, 8
	mov edx, esp
	mov eax, ebp
	call sub_48DFD4
	xor esi, esi
	test eax, eax
	jz loc_48E42B
	cmp dword [dword_5643F4], 0EA646563h
	jnz loc_48E42B
	xor edx, edx

loc_48E404:
	mov eax, dword dword_564460[edx]
	add edx, 4
	call sub_48E0E0
	cmp edx, 40h
	jnz loc_48E404
	mov ecx, dword_5643F8
	mov edx, dword_56441C
	mov ebx, eax
	mov eax, ebp
	call dword [esp+8]
	mov esi, eax

loc_48E42B:
	test esi, esi
	jnz loc_48E3DD

loc_48E42F:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop esi
	ret
;sub_48E394 endp

sub_48E438: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 88h
	mov ebp, eax
	mov ecx, ebx
	cmp dword [eax+0A0h], 0
	jz loc_48E454
	call sub_48E844

loc_48E454:
	mov edx, 9C4h
	mov eax, ebp
	call sub_48E1EC
	test eax, eax
	jz loc_48E4FF
	mov ebx, 0Fh
	lea eax, [esp+18h]
	lea edi, [esp+28h]
	mov edx, ecx
	mov ecx, 0EA616464h
	call strncpy_
	mov [esp], ecx
	mov ecx, 17h
	lea esi, [ebp+30h]
	mov ebx, 88h
	mov edx, esp
	rep movsd
	mov eax, ebp
	mov ecx, 1
	call sub_48DFD4
	test eax, eax
	jz loc_48E4FF
	mov ecx, 4
	mov eax, dword_56440C
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	test eax, eax
	jle loc_48E4FF
	mov esi, dword_5643F8
	lea edi, [ebp+1Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	test eax, eax
	jle loc_48E4FB
	mov eax, 1

loc_48E4D8:
	mov dword [ebp+14h], 0
	mov [ebp+0A0h], eax
	mov [ebp+0A4h], eax
	mov eax, 1
	add esp, 88h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48E4FB:
	xor eax, eax
	jmp loc_48E4D8

loc_48E4FF:
	xor eax, eax
	add esp, 88h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48E438 endp

sub_48E50C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0B0h
	mov ebp, eax
	mov esi, edx
	mov [esp+0ACh], ebx
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jz loc_48E590
	mov dword [esp], 0EA726571h
	test esi, esi
	jz loc_48E58B

loc_48E53A:
	lea edi, [esp+4]
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	movsd
	mov ebx, 0ACh
	lea edi, [esp+18h]
	lea esi, [ebp+8Ch]
	mov edx, esp
	mov eax, ebp
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	test eax, eax
	jz loc_48E590
	mov ecx, 0Dh
	mov edi, [esp+0ACh]
	mov esi, dword_56441C
	mov eax, 1
	rep movsd
	add esp, 0B0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48E58B:
	lea esi, [ebp+1Ch]
	jmp loc_48E53A

loc_48E590:
	xor eax, eax
	add esp, 0B0h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48E50C endp

sub_48E5A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0B4h
	mov ebp, eax
	mov [esp+0ACh], edx
	mov esi, ebx
	mov [esp+0B0h], ecx
	cmp dword [eax+0A0h], 0
	jz loc_48E5C9
	call sub_48E844

loc_48E5C9:
	mov edx, 9C4h
	mov eax, ebp
	call sub_48E1EC
	test eax, eax
	jz loc_48E6C3
	mov edx, 40h
	lea eax, [esp+6Ch]
	mov ebx, 10h
	call sub_48A01C
	lea eax, [esp+5Ch]
	mov edx, esi
	call strncpy_
	cmp dword [dword_4DBB68], 0
	jz loc_48E6A6
	cmp dword [dword_4DBB64], 0
	jz loc_48E69C
	mov eax, 0EA727461h

loc_48E61A:
	mov [esp], eax
	mov ecx, 0Dh
	lea edi, [esp+28h]
	mov esi, [esp+0ACh]
	mov ebx, 0ACh
	rep movsd
	mov edx, esp
	lea edi, [esp+18h]
	lea esi, [ebp+8Ch]
	mov eax, ebp
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	test eax, eax
	jz loc_48E6C3
	cmp dword [dword_5643F4], 0EA646563h
	jnz loc_48E6C3
	mov esi, dword_5643F8
	lea edi, [ebp+1Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov dword [ebp+0A0h], 1
	mov eax, [ebp+0A0h]
	mov [ebp+0A4h], eax
	mov eax, [esp+0B0h]
	mov [ebp+14h], eax
	mov eax, 1
	add esp, 0B4h
	pop ebp
	pop edi
	pop esi
	ret

loc_48E69C:
	mov eax, 0EA6E7761h
	jmp loc_48E61A

loc_48E6A6:
	cmp dword [dword_4DBB64], 0
	jz loc_48E6B9
	mov eax, 0EA727464h
	jmp loc_48E61A

loc_48E6B9:
	mov eax, 0EA6E6577h
	jmp loc_48E61A

loc_48E6C3:
	xor eax, eax
	add esp, 0B4h
	pop ebp
	pop edi
	pop esi
	ret
;sub_48E5A0 endp

sub_48E6D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0ACh
	mov ebp, eax
	mov esi, edx
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jnz loc_48E6FB

loc_48E6ED:
	xor eax, eax
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48E6FB:
	mov edx, 0ACh
	mov eax, esp
	mov ecx, 0Dh
	call sub_48A01C
	mov edx, 0EA757064h
	lea edi, [esp+28h]
	mov [esp], edx
	mov ebx, 0ACh
	rep movsd
	mov eax, ebp
	lea edi, [esp+18h]
	lea esi, [ebp+8Ch]
	mov edx, esp
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	test eax, eax
	jz loc_48E6ED
	cmp dword [dword_5643F4], 0EA646563h
	jnz loc_48E6ED
	mov eax, 1
	add esp, 0ACh
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48E6D0 endp

sub_48E75C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov ebp, eax
	mov [esp+18h], edx
	cmp dword [eax+14h], 0
	jnz loc_48E77B

loc_48E770:
	xor eax, eax
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48E77B:
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jz loc_48E770
	lea edi, [esp+4]
	lea esi, [ebp+1Ch]
	mov ecx, [esp+18h]
	movsd
	movsd
	movsd
	movsd
	movsd
	test ecx, ecx
	jnz loc_48E7E6
	mov dword [esp], 0EA736874h

loc_48E7A4:
	mov ecx, 1
	mov ebx, 18h
	mov edx, esp
	mov eax, ebp
	call sub_48DFD4
	test eax, eax
	jz loc_48E770
	cmp dword [esp+18h], 0
	jz loc_48E7D8
	mov dword [ebp+0A0h], 0
	mov eax, [ebp+0A0h]
	mov [ebp+0A4h], eax

loc_48E7D8:
	mov eax, 1
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48E7E6:
	mov dword [esp], 0EA646965h
	jmp loc_48E7A4
;sub_48E75C endp

sub_48E7F0: ;SUBROUTINE
	push edx
	push ebp
	sub esp, 18h
	mov ebp, eax
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jnz loc_48E80B
	add esp, 18h
	pop ebp
	pop edx
	ret

loc_48E80B:
	push edi
	push esi
	push ecx
	push ebx
	mov edx, 0EA616C77h
	lea edi, [esp+14h]
	mov ecx, 1
	mov [esp+10h], edx
	mov ebx, 18h
	lea esi, [ebp+1Ch]
	mov eax, ebp
	lea edx, [esp+10h]
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	pop ebx
	pop ecx
	pop esi
	pop edi
	add esp, 18h
	pop ebp
	pop edx
	ret
;sub_48E7F0 endp

sub_48E844: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov ebp, eax
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jnz loc_48E869

loc_48E85D:
	xor eax, eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48E869:
	mov edx, 0EA627965h
	lea edi, [esp+4]
	mov ebx, 18h
	mov [esp], edx
	mov eax, ebp
	lea esi, [ebp+1Ch]
	xor ecx, ecx
	mov edx, esp
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	test eax, eax
	jz loc_48E85D
	mov dword [ebp+0A0h], 0
	mov eax, 1
	mov dword [ebp+0A4h], 0
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48E844 endp

sub_48E8B4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 108h
	mov [esp+104h], eax
	mov [esp+100h], edx
	mov [esp+0F8h], ebx
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jz loc_48E930
	mov edx, 0EA726571h
	mov ecx, [esp+100h]
	mov [esp], edx
	test ecx, ecx
	jz loc_48E93D
	mov esi, ecx

loc_48E8F6:
	lea edi, [esp+4]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov ecx, 1
	mov esi, [esp+104h]
	mov ebx, 0ACh
	lea edi, [esp+18h]
	lea esi, [esi+8Ch]
	mov edx, esp
	mov eax, [esp+104h]
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	test eax, eax
	jnz loc_48E949

loc_48E930:
	xor eax, eax

loc_48E932:
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48E93D:
	mov esi, [esp+104h]
	add esi, 1Ch
	jmp loc_48E8F6

loc_48E949:
	lea edx, [esp+0ACh]
	mov eax, dword_564460
	xor ebx, ebx
	mov esi, 0EA676574h
	mov [esp+0ECh], ebx
	mov ebx, 40h
	mov edi, [esp+100h]
	call sub_48A980
	mov [esp], esi
	test edi, edi
	jz loc_48EAE3
	mov esi, edi

loc_48E981:
	lea edi, [esp+4]
	mov ebx, 4
	mov edx, 0FFFFFFFFh
	lea eax, [esp+18h]
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48C054
	mov ebx, 78h
	mov edx, esp
	mov eax, [esp+104h]
	call sub_48DFD4
	test eax, eax
	jz loc_48E9C9
	cmp dword [dword_5643F4], 0EA706C79h
	jz loc_48EAF2

loc_48E9C9:
	mov eax, [esp+104h]
	add eax, 1Ch
	mov [esp+0F4h], eax
	xor eax, eax
	mov [esp+0F0h], eax

loc_48E9E3:
	mov eax, [esp+0F0h]
	mov ebp, 1
	mov [esp+0FCh], eax

loc_48E9F6:
	mov eax, [esp+0FCh]
	test [esp+eax+0ACh], ebp
	jz loc_48EAA3
	mov ecx, 0EA676574h
	mov ebx, [esp+100h]
	mov [esp], ecx
	test ebx, ebx
	jz loc_48EB37
	mov esi, ebx

loc_48EA23:
	lea edi, [esp+4]
	mov ebx, 4
	mov edx, [esp+0ECh]
	lea eax, [esp+18h]
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48C054
	mov ebx, 78h
	mov edx, esp
	mov eax, [esp+104h]
	call sub_48DFD4
	test eax, eax
	jz loc_48EAA3
	cmp dword [dword_5643F4], 0EA706C79h
	jnz loc_48EAA3
	mov ecx, 4
	lea eax, [esp+0ECh]
	mov edx, dword_564410
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ebx, eax
	xor ecx, ecx
	mov eax, [esp+104h]
	call dword [esp+0F8h]
	test eax, eax
	jz loc_48E932

loc_48EAA3:
	mov edi, [esp+0ECh]
	inc edi
	add ebp, ebp
	mov [esp+0ECh], edi
	test ebp, ebp
	jnz loc_48E9F6
	mov ebp, [esp+0F0h]
	add ebp, 4
	mov [esp+0F0h], ebp
	cmp ebp, 40h
	jl loc_48E9E3
	xor eax, eax
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48EAE3:
	mov esi, [esp+104h]
	add esi, 1Ch
	jmp loc_48E981

loc_48EAF2:
	mov ecx, 4
	lea eax, [esp+0ECh]
	mov edx, dword_564410
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ebx, eax
	xor ecx, ecx
	mov eax, [esp+104h]
	call dword [esp+0F8h]
	test eax, eax
	jnz loc_48E9C9
	add esp, 108h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48EB37:
	mov esi, [esp+0F4h]
	jmp loc_48EA23
;sub_48E8B4 endp

sub_48EB44: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 2Ch
	mov ebp, eax
	mov ecx, edx
	mov edx, 9C4h
	call sub_48E1EC
	test eax, eax
	jnz loc_48EB61
	add esp, 2Ch
	pop ebp
	pop ecx
	ret

loc_48EB61:
	push edi
	push esi
	push ebx
	mov dword [esp+0Ch], 0EA726D76h
	lea edi, [esp+10h]
	lea esi, [ebp+1Ch]
	mov ebx, 2Ch
	movsd
	movsd
	movsd
	movsd
	movsd
	mov eax, ebp
	lea edi, [esp+24h]
	mov esi, ecx
	lea edx, [esp+0Ch]
	mov ecx, 1
	movsd
	movsd
	movsd
	movsd
	movsd
	call sub_48DFD4
	cmp eax, 0EA61636Bh
	jnz loc_48EBAD
	mov eax, 1
	pop ebx
	pop esi
	pop edi
	add esp, 2Ch
	pop ebp
	pop ecx
	ret

loc_48EBAD:
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	add esp, 2Ch
	pop ebp
	pop ecx
	ret
;sub_48EB44 endp

sub_48EBB8: ;SUBROUTINE
	mov eax, edx
	test edx, edx
	jz loc_48EBC5
	mov dword [edx+8], 1

loc_48EBC5:
	mov edx, dword_4D4B50
	push ecx
	mov ecx, ebx
	xor ebx, ebx
	call sub_48A188
	ret
;sub_48EBB8 endp

sub_48EBE0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ecx, eax
	lea esi, [eax+edx]
	mov edx, 0FBEAh
	cmp eax, esi
	jnb loc_48EC14

loc_48EBF1:
	xor ecx, ecx
	xor ebx, ebx
	mov cl, dl
	mov bl, [eax]
	xor ecx, ebx
	mov cx, word word_4DBBAC[ecx*2]
	and ecx, 0FFFFh
	shr edx, 8
	inc eax
	xor edx, ecx
	cmp eax, esi
	jb loc_48EBF1
	nop

loc_48EC14:
	mov eax, edx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48EBE0 endp

sub_48EC20: ;SUBROUTINE
	sub esp, 104h
	cmp dword [dword_4DBDB0], 2
	jl loc_48EC50
	cmp dword [dword_4DBDAC], 0
	jnz loc_48EC42
	call sub_489EF8
	mov dword [dword_4DBDAC], eax

loc_48EC42:
	mov eax, dword [dword_4DBDAC]
	call sub_489F48
	test eax, eax
	jnz loc_48EC57

loc_48EC50:
	add esp, 104h
	ret

loc_48EC57:
	push edx
	push ebx
	lea eax, [esp+114h]
	lea ebx, [esp+108h]
	mov edx, [esp+110h]
	mov [esp+108h], eax
	lea eax, [esp+8]
	call vsprintf_
	xor ebx, ebx
	lea eax, [esp+8]
	mov [esp+108h], ebx
	call sub_48ED70
	mov eax, dword [dword_4DBDAC]
	call sub_489F60
	pop ebx
	pop edx
	add esp, 104h
	ret
;sub_48EC20 endp

off_48ED5C: dd loc_48EE1F
	dd loc_48EE29
	dd loc_48EE6A
	dd loc_48EE97
	dd loc_48EEAA

sub_48ED70: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebx, dword [dword_4DBDBC]
	mov esi, eax
	cmp dword [dword_4DBDB0], 2
	jge loc_48ED9A

loc_48ED8A:
	mov ebx, dword [dword_4DBDBC]
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48ED9A:
	mov edi, eax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov eax, ecx
	mov [esp], ecx
	xor edi, edi
	xor cl, cl
	test eax, eax
	jle loc_48ED8A

loc_48EDB3:
	mov ebx, dword [dword_4DBDBC]
	cmp cl, 0Eh
	jz loc_48EDFF
	mov cl, [esi]
	cmp cl, 20h
	jb loc_48EE0A
	call sub_48EEC4
	mov ebx, dword [dword_4DBDBC]
	xor ah, ah
	xor dh, dh
	mov al, byte [byte_4DBDC1]
	mov dl, cl
	add ebx, 2
	shl eax, 8
	add eax, edx
	mov edx, dword [dword_4DBDB8]
	mov [edx+ebx-2], ax

loc_48EDEE:
	mov ebp, [esp]
	inc esi
	inc edi
	mov dword [dword_4DBDBC], ebx
	cmp edi, ebp
	jge loc_48ED8A
	jmp loc_48EDB3

loc_48EDFF:
	mov al, [esi]
	xor cl, cl
	mov byte [byte_4DBDC1], al
	jmp loc_48EDEE

loc_48EE0A:
	mov dl, cl
	sub dl, 8
	cmp dl, 4
	ja loc_48EDEE
	xor eax, eax
	mov al, dl
	jmp off_48ED5C[eax*4]

loc_48EE1F:
	cmp ebx, 2
	jl loc_48EDEE
	sub ebx, 2
	jmp loc_48EDEE

loc_48EE29:
	cmp byte [byte_4DBDC2], 1
	jbe loc_48EDEE
	mov ebp, 0A0h
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ebp
	imul ebp, eax
	mov edx, ebx
	sub edx, ebp
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	xor ebx, ebx
	mov edx, eax
	mov bl, byte [byte_4DBDC2]
	sar edx, 1Fh
	idiv ebx
	inc eax
	imul eax, ebx
	add eax, eax
	lea ebx, [eax+ebp]
	jmp loc_48EDEE

loc_48EE6A:
	mov eax, ebx
	mov edx, ebx
	mov ebx, 0A0h
	sar edx, 1Fh
	idiv ebx
	lea ebx, [eax+1]
	imul ebx, 0A0h
	mov dword [dword_4DBDBC], ebx
	call sub_48EEC4
	mov ebx, dword [dword_4DBDBC]
	jmp loc_48EDEE

loc_48EE97:
	xor ebx, ebx
	mov bl, byte [byte_4DBDC0]
	imul ebx, 0A0h
	jmp loc_48EDEE

loc_48EEAA:
	xor ebx, ebx
	call sub_48EF48
	mov bl, byte [byte_4DBDC0]
	imul ebx, 0A0h
	jmp loc_48EDEE
;sub_48ED70 endp

sub_48EEC4: ;SUBROUTINE
	cmp dword [dword_4DBDBC], 0FA0h
	jge loc_48EED1
	ret

loc_48EED1:
	push edi
	push esi
	push edx
	push ecx
	push ebx
	xor edx, edx
	mov ecx, 19h
	mov dl, byte [byte_4DBDC0]
	sub ecx, edx
	lea eax, 0[edx*4]
	dec ecx
	add eax, edx
	lea ebx, 0[ecx*4]
	shl eax, 5
	add ebx, ecx
	mov ecx, dword [dword_4DBDB8]
	inc edx
	add ecx, eax
	lea eax, 0[edx*4]
	mov esi, dword [dword_4DBDB8]
	add eax, edx
	shl ebx, 5
	shl eax, 5
	mov edx, ecx
	add eax, esi
	call sub_48A980
	mov eax, dword [dword_4DBDB8]
	mov edx, 0A0h
	add eax, 0F00h
	mov edi, 0F00h
	call sub_48A01C
	mov dword [dword_4DBDBC], edi
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	ret
;sub_48EEC4 endp

sub_48EF48: ;SUBROUTINE
	cmp dword [dword_4DBDB0], 2
	jl locret_48EF97
	cmp dword [dword_4DBDAC], 0
	jnz loc_48EF64
	call sub_489EF8
	mov dword [dword_4DBDAC], eax

loc_48EF64:
	mov eax, dword [dword_4DBDAC]
	call sub_489F48
	test eax, eax
	jz locret_48EF97
	push edx
	xor eax, eax

loc_48EF75:
	mov edx, dword [dword_4DBDB8]
	mov dword [edx+eax], 0
	add eax, 4
	cmp eax, 0FA0h
	jl loc_48EF75
	mov eax, dword [dword_4DBDAC]
	call sub_489F60
	pop edx

locret_48EF97:
	ret
;sub_48EF48 endp

sub_48F26C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov [esp+38h], eax
	mov ecx, edx
	xor edx, edx
	mov ebx, dword [dword_4DBDC8]
	mov [esp+3Ch], edx
	test ebx, ebx
	jnz loc_48F2A2
	mov edx, dword [dword_4DABCC]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov dword [dword_4DBDC8], eax

loc_48F2A2:
	xor esi, esi
	mov dword [dword_4DBEC4], esi
	mov eax, dword [dword_5637F4]
	add eax, ecx
	mov [esp+2Ch], eax
	mov eax, esp
	dec eax
	xor ebp, ebp
	mov [esp+34h], eax

loc_48F2BE:
	mov edi, [esp+2Ch]
	mov eax, dword [dword_5637F4]
	cmp eax, edi
	jl loc_48F2D9
	mov eax, 0FFFFFFFFh
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48F2D9:
	mov ebx, esp
	xor eax, eax
	mov ecx, 1
	call sub_483EB0
	mov eax, [esp+38h]
	mov edx, ecx
	add ebx, ebp
	call sub_4905C0
	test eax, eax
	jz loc_48F467
	inc dword [esp+34h]
	mov ah, [esp+ebp]
	inc ebp
	cmp ah, 20h
	jnb loc_48F391
	mov byte [esp+ebp-1], 5Fh

loc_48F312:
	xor eax, eax

loc_48F314:
	mov edx, [esp+3Ch]
	mov [esp+30h], eax
	test edx, edx
	jz loc_48F3AD

loc_48F324:
	xor bh, bh
	xor edi, edi
	xor esi, esi
	mov [esp+ebp], bh

loc_48F32D:
	mov ecx, dword [dword_4DBEC8]
	dec ecx
	test ecx, ecx
	jl loc_48F3FD
	imul ebx, ecx, 0Ch
	add ebx, esi

loc_48F341:
	mov eax, esp
	mov edx, dword off_4DBDD0[ebx]
	call strstr_
	test eax, eax
	jz loc_48F3F1
	test edi, edi
	jle loc_48F3C2
	mov eax, 1

loc_48F363:
	mov ebx, dword [dword_4DBECC]
	or ebx, eax
	mov eax, dword [dword_4DBDC8]
	mov dword [dword_4DBECC], ebx
	call sub_483F44
	test eax, eax
	jge loc_48F3C6

loc_48F383:
	mov eax, 4
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48F391:
	cmp ah, 30h
	jb loc_48F312
	cmp ah, 39h
	ja loc_48F312
	mov eax, 1
	jmp loc_48F314

loc_48F3AD:
	test eax, eax
	jz loc_48F324
	mov eax, [esp+34h]
	mov [esp+3Ch], eax
	jmp loc_48F324

loc_48F3C2:
	xor eax, eax
	jmp loc_48F363

loc_48F3C6:
	lea eax, 0[ecx*4]
	sub eax, ecx
	mov edx, dword off_4DBDD0[eax*4]
	mov eax, dword off_4DBDD8[eax*4]
	mov dword [dword_4DBEC4], edx
	call unknown_libname_3 ; Watcom v9-*1.5 32bit NT runtime
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48F3F1:
	dec ecx
	sub ebx, 0Ch
	test ecx, ecx
	jge loc_48F341

loc_48F3FD:
	add esi, 4
	inc edi
	cmp esi, 8
	jl loc_48F32D
	mov esi, [esp+3Ch]
	test esi, esi
	jz loc_48F467
	cmp dword [esp+30h], 0
	jnz loc_48F467
	cmp dword [dword_4DBECC], 0
	jz loc_48F467
	mov eax, esi
	call unknown_libname_3 ; Watcom v9-*1.5 32bit NT runtime
	mov edx, eax
	cmp eax, 0Ah
	jl loc_48F47E
	mov edx, 1

loc_48F435:
	lea eax, 0[ecx*4]
	sub eax, ecx
	mov eax, dword off_4DBDD0[eax*4]
	mov dword [dword_4DBEC4], eax

loc_48F44A:
	mov eax, dword [dword_4DBDC8]
	call sub_483F44
	test eax, eax
	jl loc_48F383
	mov eax, edx
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48F467:
	cmp ebp, 29h
	jl loc_48F2BE
	mov eax, 0FFFFFFFFh
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48F47E:
	test eax, eax
	jl loc_48F486
	jge loc_48F435
	jmp loc_48F44A

loc_48F486:
	mov edx, 0FFFFFFFFh
	jmp loc_48F44A
;sub_48F26C endp

sub_48F490: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov [esp], edx
	mov edi, edx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	xor edx, edx
	mov esi, ecx
	mov dword [dword_4DBEC0], edx
	cmp ecx, 31h
	jg loc_48F570
	test ebx, ebx
	jz loc_48F4C6
	mov eax, ebp
	call sub_48FD20

loc_48F4C6:
	mov eax, dword [dword_4DABCC]
	mov edx, eax
	mov ecx, 0Ah
	sar edx, 1Fh
	idiv ecx
	call sub_483F44
	test eax, eax
	jl loc_48F570
	mov eax, ebp
	mov ebx, [esp]
	call sub_48FD00
	mov edx, esi
	mov eax, ebp
	call sub_4900C0
	mov ebx, asc_4D01A0 ; "\r"
	mov edx, 1
	mov eax, ebp
	call sub_4900C0
	mov eax, dword [dword_5637F4]
	mov edi, eax
	mov eax, dword [dword_4DABCC]
	mov edx, eax
	mov ecx, 5
	sar edx, 1Fh
	idiv ecx
	xor esi, esi
	add edi, eax

loc_48F524:
	mov eax, dword [dword_5637F4]
	cmp eax, edi
	jge loc_48F57A
	cmp dword [dword_4DBEC0], 0
	jnz loc_48F57A
	mov ebx, byte_5644A0
	xor eax, eax
	mov ecx, 1
	call sub_483EB0
	mov edx, ecx
	mov eax, ebp
	add ebx, esi
	call sub_4905C0
	add esi, eax
	xor ah, ah
	mov edx, [esp]
	mov byte byte_5644A0[esi], ah
	mov eax, byte_5644A0
	call strstr_
	mov dword [dword_4DBEC0], eax
	jmp loc_48F524

loc_48F570:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_48F57A:
	cmp dword [dword_4DBEC0], 0
	jz loc_48F570
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_48F490 endp

sub_48F590: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	cmp dword [dword_4DBDC8], 0
	jnz loc_48F5B8
	mov edx, dword [dword_4DABCC]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 2
	sbb eax, edx
	sar eax, 2
	mov dword [dword_4DBDC8], eax

loc_48F5B8:
	mov edx, dword [dword_4DABCC]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	call sub_483F44
	test eax, eax
	jge loc_48F5E1

loc_48F5D9:
	xor eax, eax
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48F5E1:
	mov ebx, asc_4D01A4 ; "+++"
	mov edx, 3
	mov eax, esi
	call sub_4900C0
	mov edx, dword [dword_4DABCC]
	lea eax, 0[edx*4]
	sub eax, edx
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	call sub_483F44
	test eax, eax
	jl loc_48F5D9
	mov ebx, dword [off_4DBDCC]
	mov edi, ebx
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edx, ecx
	mov eax, esi
	call sub_4900C0
	mov eax, dword [dword_4DBDC8]
	call sub_483F44
	test eax, eax
	jl loc_48F5D9
	mov eax, esi
	mov edx, aAt ; "AT"
	call sub_48FD00
	xor ebx, ebx
	mov eax, esi
	call sub_48F490
	test eax, eax
	jz loc_48F5D9
	mov edx, dword [dword_4DABCC]
	mov eax, esi
	add edx, edx
	call sub_48F26C
	test eax, eax
	jnz loc_48F5D9
	mov eax, 1
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48F590 endp

sub_48F6A0: ;SUBROUTINE
	push edx
	xor edx, edx
	cmp dword [dword_4DBED0], 0
	jz loc_48F6C2

loc_48F6AC:
	mov eax, edx
	inc edx
	call sub_48FD40
	cmp edx, 10h
	jge loc_48F6C2
	cmp dword [dword_4DBED0], 0
	jnz loc_48F6AC

loc_48F6C2:
	pop edx
	ret
;sub_48F6A0 endp

sub_48F6C4: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	lea eax, 0[ecx*4]
	mov ecx, dword dword_5644E0[eax]
	test ecx, ecx
	jnz loc_48F6EE
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	pop ecx
	ret

loc_48F6EE:
	mov [ecx], edx
	mov edx, dword [dword_4DBED4]
	mov eax, dword_564520
	call sub_489E20
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	pop ecx
	ret
;sub_48F6C4 endp

sub_48F70C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	cmp dword [ebx+8], 0
	jnz loc_48F73C
	lea esi, [ebx+18h]
	lea ebp, [ebx+14h]
	lea edi, [ebx+2Ch]

loc_48F72D:
	mov edx, [ebx+10h]
	cmp edx, 200h
	jl loc_48F7F7

loc_48F73C:
	lea edi, [ebx+23Ch]
	lea ebp, [ebx+238h]
	lea esi, [ebx+250h]

loc_48F74E:
	cmp dword [ebx+22Ch], 0
	jnz loc_48F8A7
	mov edx, [ebx+234h]
	test edx, edx
	jle loc_48F8A7
	mov eax, [ebx+230h]
	add edx, eax
	cmp edx, 200h
	jle loc_48F880
	mov edx, 200h
	sub edx, eax

loc_48F784:
	push edi ; lpOverlapped
	push ebp ; lpNumberOfBytesWritten
	mov dword [ebx+23Ch], 0
	push edx ; nNumberOfBytesToWrite
	add eax, esi
	mov dword [ebx+240h], 0
	push eax ; lpBuffer
	mov ecx, [ebx+4]
	mov dword [ebx+244h], 0
	push ecx ; hFile
	mov dword [ebx+248h], 0
	call WriteFile_wrap
	test eax, eax
	jz loc_48F88B
	mov eax, [ebx+238h]
	mov edx, [ebx+234h]
	mov ecx, [ebx+238h]
	sub edx, eax
	mov eax, [ebx+230h]
	add eax, ecx
	mov [ebx+234h], edx
	and eax, 1FFh
	mov [ebx+230h], eax
	jmp loc_48F74E

loc_48F7F7:
	mov eax, [ebx+0Ch]
	add eax, edx
	and eax, 1FFh
	mov edx, [ebx+0Ch]
	cmp eax, edx
	jge loc_48F856

loc_48F808:
	sub edx, eax
	push esi ; lpOverlapped
	push ebp ; lpNumberOfBytesRead
	mov dword [ebx+18h], 0
	push edx ; nNumberOfBytesToRead
	add eax, edi
	mov dword [ebx+1Ch], 0
	push eax ; lpBuffer
	mov ecx, [ebx+4]
	mov dword [ebx+20h], 0
	push ecx ; hFile
	mov dword [ebx+24h], 0
	call ReadFile_wrap
	test eax, eax
	jz loc_48F85D
	mov eax, [ebx+14h]
	mov ecx, [ebx+10h]
	add ecx, eax
	mov eax, [ebx+8]
	mov [ebx+10h], ecx
	test eax, eax
	jz loc_48F72D
	jmp loc_48F73C

loc_48F856:
	mov edx, 200h
	jmp loc_48F808

loc_48F85D:
	call GetLastError_wrap
	test eax, eax
	jnz loc_48F874

loc_48F868:
	mov dword [ebx+8], 1
	jmp loc_48F73C

loc_48F874:
	cmp eax, 3E5h
	jz loc_48F868
	jmp loc_48F73C

loc_48F880:
	mov edx, [ebx+234h]
	jmp loc_48F784

loc_48F88B:
	call GetLastError_wrap
	test eax, eax
	jz loc_48F89D
	cmp eax, 3E5h
	jnz loc_48F8A7

loc_48F89D:
	mov dword [ebx+22Ch], 1

loc_48F8A7:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48F70C endp

sub_48F8B8: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 4
	mov ebx, eax
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	cmp dword [ebx+8], 0
	jnz loc_48F8EE

loc_48F8D0:
	cmp dword [ebx+22Ch], 0
	jnz loc_48F94B

loc_48F8DD:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret

loc_48F8EE:
	mov eax, [ebx+28h]
	call sub_489E2C
	test eax, eax
	jz loc_48F8D0
	push 0 ; bWait
	lea eax, [esp+4]
	push eax ; lpNumberOfBytesTransferred
	lea eax, [ebx+18h]
	push eax ; lpOverlapped
	mov ecx, [ebx+4]
	push ecx ; hFile
	call GetOverlappedResult_wrap
	test eax, eax
	jz loc_48F92C
	push esi
	mov esi, [esp+4]
	test esi, esi
	jnz loc_48F927

loc_48F91D:
	mov dword [ebx+8], 0
	pop esi
	jmp loc_48F8D0

loc_48F927:
	add [ebx+10h], esi
	jmp loc_48F91D

loc_48F92C:
	call GetLastError_wrap
	cmp eax, 3E5h
	jnz loc_48F944
	mov eax, 1
	mov [ebx+8], eax
	jmp loc_48F8D0

loc_48F944:
	xor eax, eax
	mov [ebx+8], eax
	jmp loc_48F8D0

loc_48F94B:
	mov eax, [ebx+24Ch]
	call sub_489E2C
	test eax, eax
	jz loc_48F8DD
	push 0 ; bWait
	lea eax, [esp+4]
	push eax ; lpNumberOfBytesTransferred
	lea eax, [ebx+23Ch]
	push eax ; lpOverlapped
	mov eax, [ebx+4]
	push eax ; hFile
	call GetOverlappedResult_wrap
	test eax, eax
	jz loc_48F9B3
	mov edx, [esp]
	test edx, edx
	jz loc_48F998
	sub [ebx+234h], edx
	mov eax, [ebx+230h]
	add eax, [esp]
	and eax, 1FFh
	mov [ebx+230h], eax

loc_48F998:
	mov dword [ebx+22Ch], 0
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret

loc_48F9B3:
	call GetLastError_wrap
	cmp eax, 3E5h
	jnz loc_48F9DD
	mov eax, 1

loc_48F9C6:
	mov [ebx+22Ch], eax
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	add esp, 4
	pop edx
	pop ecx
	pop ebx
	ret

loc_48F9DD:
	xor eax, eax
	jmp loc_48F9C6
;sub_48F8B8 endp

sub_48F9E4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 84h
	mov ecx, 1
	mov eax, dword [dword_4DBED4]
	mov [esp], eax
	xor eax, eax

loc_48F9FC:
	mov edx, dword dword_5644E0[eax]
	test edx, edx
	jz loc_48FA28
	cmp dword [edx+8], 0
	jz loc_48FA14
	inc ecx
	mov ebx, [edx+28h]
	mov [esp+ecx*4-4], ebx

loc_48FA14:
	cmp dword [edx+22Ch], 0
	jz loc_48FA28
	inc ecx
	mov edx, [edx+24Ch]
	mov [esp+ecx*4-4], edx

loc_48FA28:
	add eax, 4
	cmp eax, 40h
	jnz loc_48F9FC
	mov edx, esp
	mov eax, ecx
	call sub_489ED8
	add esp, 84h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48F9E4 endp

sub_48FA44: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	call sub_489E0C
	mov dword [dword_4DBED4], eax
	cmp dword [dword_4DBED0], 0
	jz loc_48FAD9
	xor edi, edi

loc_48FA62:
	call sub_48F9E4
	mov esi, edi

loc_48FA69:
	mov ebx, dword dword_5644E0[esi]
	test ebx, ebx
	jz loc_48FAC9
	mov eax, ebx
	call sub_48F8B8
	cmp edi, [ebx]
	jz loc_48FABA
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, [ebx]
	cmp eax, 3
	jnb loc_48FAF1
	cmp eax, 2
	jnz loc_48FAAE
	push 0Ah ; dwFlags
	mov edx, [ebx+4]
	push edx ; hFile
	call PurgeComm_wrap
	mov eax, ebx
	call sub_48F8B8
	mov [ebx+0Ch], edi
	mov [ebx+10h], edi

loc_48FAAE:
	mov [ebx], edi
	mov eax, dword [dword_4DBED8]
	call sub_489F60

loc_48FABA:
	cmp edi, dword dword_5644E0[esi]
	jz loc_48FAC9
	mov eax, ebx
	call sub_48F70C

loc_48FAC9:
	add esi, 4
	cmp esi, 40h
	jnz loc_48FA69
	cmp edi, dword [dword_4DBED0]
	jnz loc_48FA62

loc_48FAD9:
	mov eax, dword [dword_4DBED4]
	xor ebx, ebx
	call CloseHandleCaller
	mov dword [dword_4DBED4], ebx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_48FAF1:
	jbe loc_48FB35
	cmp eax, 4
	jnz loc_48FAAE
	push 0Fh ; dwFlags
	mov edx, [ebx+4]
	push edx ; hFile
	call PurgeComm_wrap
	mov eax, ebx
	call sub_48F8B8
	mov ecx, [ebx+4]
	push ecx ; hObject
	call CloseHandle_wrap
	mov eax, [ebx+28h]
	call CloseHandleCaller
	mov eax, [ebx+24Ch]
	call CloseHandleCaller
	mov dword dword_5644E0[esi], edi
	jmp loc_48FAAE

loc_48FB35:
	push 5 ; dwFlags
	mov eax, [ebx+4]
	push eax ; hFile
	call PurgeComm_wrap
	mov eax, ebx
	call sub_48F8B8
	mov [ebx+230h], edi
	mov [ebx+234h], edi
	jmp loc_48FAAE
;sub_48FA44 endp

sub_48FB5C: ;SUBROUTINE
	test eax, eax
	jl loc_48FB70
	cmp eax, 10h
	jge loc_48FB70
	cmp dword dword_5644E0[eax*4], 0
	jnz loc_48FB73
	nop

loc_48FB70:
	xor eax, eax
	ret

loc_48FB73:
	mov eax, 1
	ret
;sub_48FB5C endp

sub_48FD00: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_48FB5C
	test eax, eax
	jnz loc_48FD0E
	pop ecx
	ret

loc_48FD0E:
	push edx
	mov edx, 2
	mov eax, ecx
	call sub_48F6C4
	pop edx
	pop ecx
	ret
;sub_48FD00 endp

sub_48FD20: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_48FB5C
	test eax, eax
	jnz loc_48FD2E
	pop ecx
	ret

loc_48FD2E:
	push edx
	mov edx, 3
	mov eax, ecx
	call sub_48F6C4
	pop edx
	pop ecx
	ret
;sub_48FD20 endp

sub_48FD40: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	cmp dword [dword_4DBED8], 0
	jz loc_48FDD1

loc_48FD51:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, ecx
	call sub_48FB5C
	test eax, eax
	jz loc_48FDE0
	push edi
	push esi
	push ebx
	lea ebx, 0[ecx*4]
	mov edx, 4
	mov eax, ecx
	mov esi, dword dword_5644E0[ebx]
	call sub_48F6C4
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov edi, dword dword_5644E0[ebx]
	mov edx, ebx
	test edi, edi
	jz loc_48FDB4
	mov ebx, 1

loc_48FDA1:
	mov eax, ebx
	call sub_489B9C
	cmp dword dword_5644E0[edx], 0
	jnz loc_48FDA1

loc_48FDB4:
	mov eax, esi
	call sub_4848FC
	dec dword [dword_4DBED0]
	pop ebx
	pop esi
	pop edi
	mov edx, dword [dword_4DBED0]
	test edx, edx
	jz loc_48FDF7
	pop edx
	pop ecx
	ret

loc_48FDD1:
	call sub_489EF8
	mov dword [dword_4DBED8], eax
	jmp loc_48FD51

loc_48FDE0:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov edx, dword [dword_4DBED0]
	test edx, edx
	jz loc_48FDF7
	pop edx
	pop ecx
	ret

loc_48FDF7:
	mov eax, ecx
	call sub_48F6C4
	mov eax, dword [dword_4DBED8]
	xor ecx, ecx
	call sub_489F74
	mov dword [dword_4DBED8], ecx
	pop edx
	pop ecx
	ret
;sub_48FD40 endp

sub_48FE14: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov edi, edx
	cmp eax, 0FFFFFFFFh
	jnz loc_48FE53
	mov esi, 0Fh
	mov edx, dword [dword_56451C]
	mov eax, 3Ch
	test edx, edx
	jz loc_48FE4B

loc_48FE39:
	test eax, eax
	jl loc_48FE4B
	mov ecx, dword dword_5644DC[eax]
	sub eax, 4
	dec esi
	test ecx, ecx
	jnz loc_48FE39

loc_48FE4B:
	test esi, esi
	jl loc_48FF22

loc_48FE53:
	inc dword [dword_4DBED0]
	cmp dword [dword_4DBED0], 1
	jz loc_48FF30

loc_48FE66:
	mov ebx, 300h
	mov edx, 450h
	mov eax, aSerialbuf ; "serialbuf"
	call sub_484498
	push 0 ; lpName
	push 0 ; bInitialState
	push 1 ; bManualReset
	mov ebx, eax
	mov dword [eax+8], 0
	push 0 ; lpEventAttributes
	mov ebp, eax
	mov [eax+4], edi
	call CreateEventA_wrap
	push 0 ; lpName
	mov dword [ebx+0Ch], 0
	push 0 ; bInitialState
	mov dword [ebx+10h], 0
	push 1 ; bManualReset
	mov dword [ebx+22Ch], 0
	push 0 ; lpEventAttributes
	mov [ebx+28h], eax
	call CreateEventA_wrap
	mov dword [ebx+230h], 0
	mov edx, 14h
	mov [ebx+24Ch], eax
	mov eax, esp
	mov dword [ebx+234h], 0
	call sub_48A01C
	mov eax, esp
	push eax ; lpCommTimeouts
	mov edx, 19h
	push edi ; hFile
	mov [esp+10h], edx
	call SetCommTimeouts_wrap
	test eax, eax
	jnz loc_48FF04
	call sub_489FD8

loc_48FF04:
	mov edx, 1
	mov eax, esi
	mov dword dword_5644E0[esi*4], ebp
	call sub_48F6C4
	mov eax, esi
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48FF22:
	mov eax, 0FFFFFFFFh
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_48FF30:
	mov eax, sub_48F6A0
	call atexit_
	cmp dword [dword_4DBED8], 0
	jnz loc_48FF4D
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_48FF4D:
	push dword_564520
	mov ecx, 0FFFFFFFFh
	mov ebx, 2
	mov eax, sub_48FA44
	xor edx, edx
	call sub_489AE0
	test eax, eax
	jnz loc_48FE66
	mov eax, dword [dword_4DBED8]
	xor ecx, ecx
	call sub_489F74
	mov dword [dword_4DBED8], ecx
	mov eax, dword [dword_4DBED0]
	dec dword [dword_4DBED0]
	mov eax, 0FFFFFFFFh
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_48FE14 endp

sub_48FF9C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	sub esp, 10h
	mov ebx, eax
	mov edx, dword dword_5644E0[eax*4]
	test edx, edx
	jz loc_48FFB6
	add esp, 10h
	pop edx
	pop ecx
	pop ebx
	ret

loc_48FFB6:
	inc eax
	push eax
	push a_ComD ; "\\\\.\\COM%d"
	lea eax, [esp+8]
	push eax
	call sprintf_
	add esp, 0Ch
	push edx ; hTemplateFile
	push 40000080h ; dwFlagsAndAttributes
	push 3 ; dwCreationDisposition
	push edx ; lpSecurityAttributes
	push edx ; dwShareMode
	push 0C0000000h ; dwDesiredAccess
	lea eax, [esp+18h]
	push eax ; lpFileName
	call CreateFileA_wrap
	cmp eax, 0FFFFFFFFh
	jz loc_48FFFA
	mov edx, eax
	mov eax, ebx
	call sub_48FE14
	add esp, 10h
	pop edx
	pop ecx
	pop ebx
	ret

loc_48FFFA:
	call sub_489FD8
	add esp, 10h
	pop edx
	pop ecx
	pop ebx
	ret
;sub_48FF9C endp

sub_490008: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp dword [dword_4DBED8], 0
	jnz loc_49001E
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_49001E:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, ecx
	call sub_48FB5C
	test eax, eax
	jz loc_49003E
	mov eax, ecx
	call sub_49035C
	cmp eax, edx
	jge loc_49004E

loc_49003E:
	xor edx, edx
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop ecx
	ret

loc_49004E:
	mov eax, ecx
	call sub_4900C0
	mov edx, eax
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop ecx
	ret
;sub_490008 endp

sub_4900C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebp, ebx
	xor esi, esi
	xor edi, edi
	cmp dword [dword_4DBED8], 0
	jnz loc_4900DF
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_4900DF:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, ecx
	call sub_48FB5C
	test eax, eax
	jz loc_4901A9
	mov eax, dword dword_5644E0[ecx*4]
	mov esi, [eax+234h]
	add esi, edx
	cmp esi, 200h
	jle loc_49011A
	mov edx, 200h
	sub edx, [eax+234h]

loc_49011A:
	mov eax, dword dword_5644E0[ecx*4]
	mov ebx, [eax+230h]
	mov eax, [eax+234h]
	add ebx, eax
	mov eax, ebx
	and eax, 1FFh
	lea ebx, [eax+edx]
	mov esi, edx
	cmp ebx, 200h
	jle loc_49014E
	mov esi, 200h
	mov edi, edx
	sub esi, eax
	sub edi, esi

loc_49014E:
	test esi, esi
	jz loc_49016A
	mov edx, dword dword_5644E0[ecx*4]
	add edx, 250h
	mov ebx, esi
	add edx, eax
	mov eax, ebp
	call sub_48A980

loc_49016A:
	test edi, edi
	jz loc_490185
	mov ebx, edi
	mov edx, dword dword_5644E0[ecx*4]
	lea eax, [esi+ebp]
	add edx, 250h
	call sub_48A980

loc_490185:
	mov eax, dword dword_5644E0[ecx*4]
	lea edx, [esi+edi]
	mov ebp, [eax+234h]
	add ebp, edx
	mov edx, 1
	mov [eax+234h], ebp
	mov eax, ecx
	call sub_48F6C4

loc_4901A9:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	lea eax, [esi+edi]
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4900C0 endp

sub_4901BC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	mov ebx, ecx
	cmp dword [dword_4DBED8], 0
	jnz loc_4901DD
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_4901DD:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, esi
	call sub_48FB5C
	test eax, eax
	jnz loc_490205

loc_4901F2:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_490205:
	mov eax, esp
	push eax ; lpDCB
	mov eax, dword dword_5644E0[esi*4]
	mov ecx, [eax+4]
	push ecx ; hFile
	call GetCommState_wrap
	test eax, eax
	jz loc_49027A
	or byte [esp+8], 1
	and word [esp+8], 0B0FDh
	cmp edi, 10h
	jg loc_490236
	mov edi, dword dword_4DBEDC[edi*4]

loc_490236:
	mov al, [esp+2Ch]
	add al, 5
	mov [esp+4], edi
	mov [esp+12h], al
	test ebx, ebx
	jbe loc_490292
	cmp ebx, 1
	jnz loc_490292
	mov byte [esp+14h], 2

loc_490252:
	cmp ebp, 1
	jnb loc_49029A

loc_490257:
	xor cl, cl
	mov [esp+13h], cl

loc_49025D:
	mov eax, esp
	push eax ; lpDCB
	mov eax, dword dword_5644E0[esi*4]
	mov ebx, [eax+4]
	push ebx ; hFile
	call SetCommState_wrap
	test eax, eax
	jnz loc_4901F2

loc_49027A:
	call sub_489FD8
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_490292:
	xor dh, dh
	mov [esp+14h], dh
	jmp loc_490252

loc_49029A:
	ja loc_4902A3
	mov byte [esp+13h], 1
	jmp loc_49025D

loc_4902A3:
	cmp ebp, 3
	jnz loc_490257
	mov byte [esp+13h], 2
	jmp loc_49025D
;sub_4901BC endp

sub_490308: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp dword [dword_4DBED8], 0
	jnz loc_49031E
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_49031E:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, edx
	call sub_48FB5C
	test eax, eax
	jz loc_49034B
	mov edx, dword dword_5644E0[edx*4]
	mov edx, [edx+10h]
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop edx
	ret

loc_49034B:
	xor edx, edx
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop edx
	ret
;sub_490308 endp

sub_49035C: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp dword [dword_4DBED8], 0
	jnz loc_490372
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_490372:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, edx
	call sub_48FB5C
	test eax, eax
	jz loc_4903AD
	push ebx
	mov edx, dword dword_5644E0[edx*4]
	mov eax, 200h
	mov ebx, [edx+234h]
	mov edx, eax
	sub edx, ebx
	pop ebx
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop edx
	ret

loc_4903AD:
	xor edx, edx
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, edx
	pop edx
	ret
;sub_49035C endp

sub_4903C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov ebp, ebx
	xor esi, esi
	xor edi, edi
	cmp dword [dword_4DBED8], 0
	jnz loc_4903DF
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_4903DF:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, ecx
	call sub_48FB5C
	test eax, eax
	jz loc_490466
	mov eax, dword dword_5644E0[ecx*4]
	mov esi, [eax+10h]
	cmp edx, esi
	jle loc_490408
	mov edx, esi

loc_490408:
	mov eax, dword dword_5644E0[ecx*4]
	mov ebx, [eax+0Ch]
	add ebx, edx
	mov esi, edx
	cmp ebx, 200h
	jle loc_490432
	mov edi, 200h
	mov esi, [eax+0Ch]
	mov eax, edx
	sub edi, esi
	sub eax, edi
	mov esi, edx
	mov edi, eax
	sub esi, eax

loc_490432:
	test esi, esi
	jz loc_49044E
	mov eax, dword dword_5644E0[ecx*4]
	lea edx, [eax+2Ch]
	mov eax, [eax+0Ch]
	mov ebx, esi
	add eax, edx
	mov edx, ebp
	call sub_48A980

loc_49044E:
	test edi, edi
	jz loc_490466
	mov ebx, edi
	mov eax, dword dword_5644E0[ecx*4]
	lea edx, [esi+ebp]
	add eax, 2Ch
	call sub_48A980

loc_490466:
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	lea eax, [esi+edi]
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4903C0 endp

sub_490478: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp dword [dword_4DBED8], 0
	jnz loc_49048E
	call sub_489EF8
	mov dword [dword_4DBED8], eax

loc_49048E:
	mov eax, dword [dword_4DBED8]
	call sub_489F48
	mov eax, ecx
	call sub_4903C0
	mov ebx, eax
	test eax, eax
	jnz loc_4904B3
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, ebx
	pop ecx
	ret

loc_4904B3:
	mov edx, dword dword_5644E0[ecx*4]
	sub [edx+10h], eax
	mov edx, dword dword_5644E0[ecx*4]
	add eax, [edx+0Ch]
	and eax, 1FFh
	mov [edx+0Ch], eax
	mov edx, 1
	mov eax, ecx
	call sub_48F6C4
	mov eax, dword [dword_4DBED8]
	call sub_489F60
	mov eax, ebx
	pop ecx
	ret
;sub_490478 endp

sub_4905C0: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, ebx
	call sub_48FB5C
	test eax, eax
	jz loc_490603
	mov ebx, dword [dword_5637F0]
	add ebx, ecx
	lea ecx, 0[esi*4]

loc_4905DE:
	mov eax, dword dword_5644E0[ecx]
	cmp edx, [eax+10h]
	jle loc_4905FA
	cmp ebx, dword [dword_5637F0]
	jle loc_4905FA
	xor eax, eax
	call sub_483EB0
	jmp loc_4905DE

loc_4905FA:
	mov ebx, edi
	mov eax, esi
	call sub_490478

loc_490603:
	pop edi
	pop esi
	ret
;sub_4905C0 endp

sub_4908E4: ;SUBROUTINE
	push ecx
	push edx
	xor edx, edx
	test eax, eax
	jz loc_4908FC

loc_4908EC:
	mov ecx, eax
	neg ecx
	not ecx
	and eax, ecx
	inc edx
	test eax, eax
	jnz loc_4908EC

loc_4908FC:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_4908E4 endp

getHwnd: ;SUBROUTINE
	mov eax, dword [dword_563D54]
	ret
;getHwnd endp

sub_491018: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebx, eax
	cmp dword [eax+444h], 0
	jz loc_491035
	mov ecx, [eax]
	test ecx, ecx
	jz loc_491035
	push ecx
	mov edx, [ecx]
	call dword [edx+28h]

loc_491035:
	mov esi, [ebx+450h]
	test esi, esi
	jz loc_491046
	mov eax, esi
	call sub_4AC9C8

loc_491046:
	mov edi, [ebx+44Ch]
	test edi, edi
	jz loc_491057
	mov eax, edi
	call sub_4AC9C8

loc_491057:
	mov dword [ebx+450h], 0
	mov ebp, [ebx+448h]
	mov dword [ebx+44Ch], 0
	test ebp, ebp
	jz loc_49107E
	mov edx, ebp
	mov eax, ebx
	call sub_4920F8

loc_49107E:
	mov eax, [ebx+444h]
	test eax, eax
	jnz loc_4910A8

loc_491088:
	mov dword [ebx+448h], 0
	mov eax, 1
	mov dword [ebx+444h], 0
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4910A8:
	mov edx, eax
	mov eax, ebx
	call sub_4920F8
	jmp loc_491088
;sub_491018 endp

sub_491964: ;SUBROUTINE
	push ebx
	mov ebx, eax
	test eax, eax
	jnz loc_491970
	mov ebx, dword_563900

loc_491970:
	cmp dword [ebx], 0
	jz loc_4919C5
	push edx
	push ecx
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	mov eax, ebx
	call sub_491018
	mov eax, [ebx]
	push eax
	mov edx, [eax]
	call dword [edx+8]
	mov ecx, [ebx+10h]
	test ecx, ecx
	jz loc_49199E
	mov eax, ecx
	call sub_4848FC

loc_49199E:
	mov dword [ebx+10h], 0
	mov dword [ebx+4], 0
	mov dword [ebx+24h], 0
	mov eax, dword [dword_4DB6A0]
	mov dword [ebx], 0
	call sub_489F60
	pop ecx
	pop edx

loc_4919C5:
	pop ebx
	ret
;sub_491964 endp

sub_491AF0: ;SUBROUTINE
	push ebx
	mov ebx, eax
	test eax, eax
	jnz loc_491AFC
	mov ebx, dword_563900

loc_491AFC:
	cmp dword [ebx+24h], 0
	jz loc_491B7C
	cmp dword [ebx+1Ch], 8
	jg loc_491B7C
	push edi
	push esi
	push edx
	push ecx
	mov eax, [ebx+42Eh]
	mov edx, [ebx+430h]
	sar eax, 10h
	sar edx, 10h
	sub edx, eax
	inc edx
	cmp eax, 100h
	jge loc_491B66
	test edx, edx
	jle loc_491B66
	lea esi, 0[eax*4]
	lea ecx, [ebx+30h]
	add esi, ecx
	push esi
	push edx
	push eax
	mov ecx, [ebx+24h]
	push 0
	mov edi, [ecx]
	push ecx
	call dword [edi+18h]
	cmp byte [ebx+45Dh], 0
	jnz loc_491B66
	push esi
	push 100h
	push 0
	mov eax, [ebx+24h]
	push 0
	mov edx, [eax]
	push eax
	call dword [edx+10h]

loc_491B66:
	mov word [ebx+430h], 100h
	mov word [ebx+432h], 0FFFFh
	pop ecx
	pop edx
	pop esi
	pop edi

loc_491B7C:
	pop ebx
	ret
;sub_491AF0 endp

sub_491C08: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	test eax, eax
	jnz loc_491C1E
	mov esi, dword_563900

loc_491C1E:
	test edi, edi
	jz loc_491C2A
	cmp edi, [esi+43Ch]
	jz loc_491C53

loc_491C2A:
	cmp dword [esi+43Ch], 0
	jz loc_491C3A
	mov eax, esi
	call sub_491D5C

loc_491C3A:
	test edi, edi
	jnz loc_491C5A

loc_491C3E:
	xor ebp, ebp
	mov eax, 1
	mov dword [dword_4DABDC], ebp

loc_491C4B:
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_491C53:
	mov eax, 1
	jmp loc_491C4B

loc_491C5A:
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	cmp byte [esi+45Dh], 0
	jnz loc_491CD9

loc_491C6D:
	mov ebx, esp
	mov edx, edi
	mov eax, esi
;	call sub_490738
	mov ebx, eax

loc_491C7A:
	call SDL_GetTicks_wrap
	mov dword [dword_4DBF34], eax
	test ebx, ebx
	jz loc_491CE9
	mov eax, 0FFFFFFFFh
	mov edx, dword [dword_4DBF30]
	mov dword [dword_4DBF28], eax
	test edx, edx
	jz loc_491CA6
	xor ecx, ecx
	mov dword [dword_4DBF30], ecx

loc_491CA6:
	mov ebx, 1
	mov dword [esi+440h], 0
	mov eax, dword [dword_4DB6A0]
	mov dword [esi+43Ch], 0
	call sub_489F60
	mov dword [dword_4DABDC], ebx
	xor eax, eax
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_491CD9:
	call sub_484008
	test eax, eax
	jnz loc_491C6D
	mov ebx, 0EACBADh
	jmp loc_491C7A

loc_491CE9:
	cmp dword [dword_4DBF30], 0
	jnz loc_491CFC
	mov dword [dword_4DBF30], 1

loc_491CFC:
	mov eax, [esp+24h]
	mov [esi+440h], eax
	mov [esi+43Ch], edi
	test ebp, ebp
	jz loc_491C3E
	mov ebx, [esp+24h]
	mov cl, [esi+45Dh]
	mov edx, [esp+10h]
	test cl, cl
	jnz loc_491D4F
	cmp edi, [esi+444h]
	jnz loc_491D4F
	mov eax, [esp+54h]
	mov ebx, [esi+464h]
	shr eax, 3
	imul ebx, eax
	mov eax, [esi+468h]
	imul eax, edx
	mov edi, [esp+24h]
	add ebx, eax
	add ebx, edi

loc_491D4F:
	mov eax, ebp
	call sub_4AC934
	jmp loc_491C3E
;sub_491C08 endp

sub_491D5C: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov ebx, eax
	test eax, eax
	jnz loc_491D6A
	mov ebx, dword_563900

loc_491D6A:
	mov edx, [ebx+43Ch]
	test edx, edx
	jnz loc_491D80
	xor esi, esi
	mov dword [dword_4DABDC], esi
	pop esi
	pop edx
	pop ebx
	ret

loc_491D80:
	push ecx
	mov ecx, [ebx+440h]
	push ecx
	mov eax, edx
	mov edx, [edx]
	push eax
	call dword [edx+80h]
	mov dword [ebx+43Ch], 0
	mov dword [ebx+440h], 0
	call SDL_GetTicks_wrap
	mov ebx, dword [dword_4DBF34]
	sub eax, ebx
	mov ebx, dword [dword_4DBF2C]
	mov dword [dword_4DBF28], eax
	cmp eax, ebx
	jle loc_491DCA
	mov dword [dword_4DBF2C], eax

loc_491DCA:
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	pop ecx
	xor esi, esi
	mov dword [dword_4DABDC], esi
	pop esi
	pop edx
	pop ebx
	ret
;sub_491D5C endp

sub_4920F8: ;SUBROUTINE
	push ecx
	test eax, eax
	jnz loc_492102
	mov eax, dword_563900

loc_492102:
	cmp edx, [eax+43Ch]
	jz loc_492112
	push edx
	mov eax, [edx]
	call dword [eax+8]
	pop ecx
	ret

loc_492112:
	call sub_491D5C
	push edx
	mov eax, [edx]
	call dword [eax+8]
	pop ecx
	ret
;sub_4920F8 endp

sub_4921D0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov ebp, [esp+80h]
	mov esi, edx
	mov edi, ebx
	mov ebx, ecx
	mov ecx, esp
	mov edx, 6Ch
	push ecx
	mov [esp+4], edx
	push eax
	mov edx, [eax]
	call dword [edx+58h]
	test ax, 0FFFFh
	jnz loc_492274
	test esi, esi
	jz loc_492209
	mov eax, [esp+0Ch]
	mov [esi], eax

loc_492209:
	test edi, edi
	jz loc_492213
	mov eax, [esp+8]
	mov [edi], eax

loc_492213:
	mov esi, [esp+7Ch]
	test esi, esi
	jz loc_492221
	mov eax, [esp+10h]
	mov [esi], eax

loc_492221:
	test ebp, ebp
	jz loc_49222C
	mov eax, [esp+24h]
	mov [ebp+0], eax

loc_49222C:
	test ebx, ebx
	jz loc_49223F
	cmp dword [esp+54h], 10h
	jz loc_492248
	xor eax, eax
	mov al, [esp+54h]
	mov [ebx], eax

loc_49223F:
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret 8

loc_492248:
	mov eax, [esp+58h]
	call sub_4908E4
	mov esi, eax
	mov eax, [esp+5Ch]
	call sub_4908E4
	add esi, eax
	mov eax, [esp+60h]
	call sub_4908E4
	add esi, eax
	mov [ebx], esi
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret 8

loc_492274:
	test esi, esi
	jz loc_49227E
	mov dword [esi], 0

loc_49227E:
	test edi, edi
	jz loc_492288
	mov dword [edi], 0

loc_492288:
	test ebx, ebx
	jz loc_492292
	mov dword [ebx], 0

loc_492292:
	mov ecx, [esp+7Ch]
	test ecx, ecx
	jz loc_4922A0
	mov dword [ecx], 0

loc_4922A0:
	test ebp, ebp
	jz loc_49223F
	mov dword [ebp+0], 0
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_4921D0 endp

;	Attributes: library function

memset_: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	push eax
	mov dh, dl
	shl edx, 8
	mov dl, dh
	shl edx, 8
	mov dl, dh
	call __STOSB
	pop eax
	pop ecx
	ret
;memset_ endp

sub_492650: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov [esp+18h], eax
	mov edi, edx
	mov [esp+1Ch], ebx
	test ebx, ebx
	jz loc_4926A8

loc_492664:
	mov ebx, [esp+1Ch]
	test ebx, ebx
	jnz loc_4926B3
	mov dword [esp+1Ch], 8

loc_492674:
	mov ebp, [esp+1Ch]

loc_492678:
	mov eax, dword [dword_4DD314]
	test eax, eax
	jz loc_49269F
	mov edx, [esp+18h]
	test edx, edx
	jl loc_49269D
	cmp edx, 4000h
	jg loc_49269D
	test edi, edi
	jl loc_49269D
	cmp edi, 2000h
	jle loc_4926BF

loc_49269D:
	xor eax, eax

loc_49269F:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4926A8:
	mov eax, dword [dword_4DAB84]
	mov [esp+1Ch], eax
	jmp loc_492664

loc_4926B3:
	cmp ebx, 0Fh
	jnz loc_492674
	mov ebp, 10h
	jmp loc_492678

loc_4926BF:
	mov eax, [esp+1Ch]
	call sub_4ACB80
	test eax, eax
	jz loc_49269F
	mov eax, edx
	imul eax, ebp
	add eax, 7
	and al, 0F8h
	mov edx, eax
	sar edx, 1Fh
	idiv ebp
	imul eax, ebp
	sar eax, 3
	mov edx, eax
	imul edx, edi
	mov esi, [esp+1Ch]
	push esi
	push edi
	mov [esp+18h], eax
	mov eax, [esp+20h]
	push eax
	push aDxDxD ; "%dx%dx%d"
	lea eax, [esp+10h]
	push eax
	mov ebx, ecx
	call sprintf_
	add esp, 14h
	mov eax, esp
	add edx, 48h
	call sub_48448C
	mov [esp+14h], eax
	test eax, eax
	jnz loc_49273E
	cmp dword [esp+30h], 0
	jz loc_49269D
	call sub_484B3C
	xor eax, eax
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_49273E:
	mov esi, [eax]
	test esi, esi
	jz loc_49269D
	mov edx, 48h
	mov eax, esi
	call sub_48A01C
	mov eax, [esp+1Ch]
	lea edx, [esi+38h]
	call sub_4ACB80
	mov byte [edx], 0
	and eax, 0FFh
	mov ecx, [edx]
	mov [edx+6], di
	or ecx, eax
	mov eax, [esp+18h]
	mov [edx], ecx
	mov [edx+4], ax
	mov dword [esi], 57494E44h
	mov [esi+8], edi
	mov eax, [esp+10h]
	mov [esi+18h], edi
	mov [esi+28h], eax
	mov eax, [esp+18h]
	mov [esi+4], eax
	mov [esi+14h], eax
	mov al, [esp+1Ch]
	mov [esi+1Ch], al
	xor ebx, ebx
	mov eax, [edx]
	mov ecx, edi
	and eax, 0FFh
	mov [esi+20h], edx
	mov edx, [esp+10h]
	mov [esi+1Dh], al
	mov eax, 10h
	call sub_49B174
	mov ecx, [esp+18h]
	mov ebx, 3
	mov edx, ebp
	mov [esi+2Ch], eax
	xor eax, eax
	call sub_49B174
	mov ebx, [esi+2Ch]
	mov [esi+30h], eax
	test ebx, ebx
	jz loc_49269D
	test eax, eax
	jz loc_49269D
	mov eax, [esp+14h]
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_492650 endp

sub_492820: ;SUBROUTINE
	push 1
	call sub_492650
	mov eax, [eax]
	ret
;sub_492820 endp

sub_492840: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ebx, eax
	lea edi, 0[edx*4]
	xor esi, esi

loc_49284F:
	mov eax, ebx
	lea ecx, [ebx+20h]

loc_492854:
	add eax, 4
	mov edx, dword [dword_4E29EC]
	mov [eax-4], edx
	cmp eax, ecx
	jnz loc_492854
	inc esi
	add ebx, edi
	cmp esi, 8
	jl loc_49284F
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_492840 endp

sub_492874: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 4
	mov eax, 0FFFFFF80h
	mov ecx, 0FFFFFFC0h
	mov esi, 3Fh

loc_49288A:
	mov edx, eax
	cmp eax, 0FFFFFFC0h
	jge loc_4929C3
	mov edx, ecx

loc_492897:
	mov bl, dl
	mov edx, eax
	and edx, 0FFh
	add bl, 40h
	inc eax
	mov byte byte_56D05C[edx], bl
	cmp eax, 7Fh
	jl loc_49288A
	xor esi, esi
	xor ebx, ebx

loc_4928B4:
	mov ax, word word_4DBF38[ebx]
	xor ecx, ecx
	mov [esp+2], ax
	mov edx, 0Dh
	mov cx, [esp+2]
	mov ax, word word_4DBF3C[ebx]
	sub edx, ecx
	mov [esp], ax
	mov ecx, edx
	mov eax, dword dword_4DBF44[ebx]
	mov edx, 1
	shr eax, 3
	shl edx, cl
	cmp esi, 17h
	jnz loc_4928F7
	mov word [esp+2], 21h

loc_4928F7:
	test edx, edx
	jle loc_492919
	lea ecx, 0[eax*4]
	shl edx, 2
	mov eax, ecx
	add edx, ecx
	mov ecx, [esp]

loc_49290C:
	add eax, 4
	mov dword dword_564758[eax], ecx
	cmp eax, edx
	jl loc_49290C

loc_492919:
	inc esi
	add ebx, 10h
	cmp esi, 60h
	jl loc_4928B4
	push edi
	mov esi, 20h
	xor edi, edi
	mov [esp+6], si
	mov [esp+4], di
	xor eax, eax
	mov edx, [esp+4]
	pop edi

loc_49293B:
	add eax, 4
	mov dword dword_564758[eax], edx
	cmp eax, 80h
	jnz loc_49293B
	xor ebx, ebx

loc_49294D:
	mov ax, word word_4DC538[ebx]
	xor ecx, ecx
	mov [esp+2], ax
	mov edx, 9
	mov cx, [esp+2]
	mov ax, word word_4DC53C[ebx]
	sub edx, ecx
	mov [esp], ax
	mov ecx, edx
	mov edx, 1
	mov eax, dword dword_4DC544[ebx]
	shl edx, cl
	shr eax, 7
	test edx, edx
	jle loc_4929A6
	mov ecx, [esp]
	lea esi, 0[eax*4]
	shl edx, 2
	mov eax, esi
	add edx, esi

loc_492999:
	add eax, 4
	mov dword dword_56C758[eax], ecx
	cmp eax, edx
	jl loc_492999

loc_4929A6:
	add ebx, 10h
	cmp ebx, 800h
	jnz loc_49294D
	mov dword [dword_56D55C], 1
	add esp, 4
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4929C3:
	cmp eax, 3Fh
	jle loc_492897
	mov edx, esi
	jmp loc_492897
;sub_492874 endp

sub_4929D4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	mov eax, dword [dword_4E2AEC]
	mov ecx, 4
	mov dword [dword_56CF5C], eax

loc_4929E8:
	mov eax, dword dword_4DCD38[ecx]
	imul eax, ebx
	mov edx, dword dword_4E2AEC[ecx]
	shl eax, 0Ch
	add ecx, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov dword dword_56CF58[ecx], eax
	cmp ecx, 100h
	jnz loc_4929E8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4929D4 endp

sub_492A1C: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp dword [dword_56D55C], 0
	jz loc_492A31
	mov eax, ecx
	call sub_4ACFE4
	pop ecx
	ret

loc_492A31:
	call sub_492874
	mov eax, ecx
	call sub_4ACFE4
	pop ecx
	ret
;sub_492A1C endp

sub_492A40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, eax
	mov ecx, edx
	mov [esp], ebx
	cmp dword [dword_56D55C], 0
	jz loc_492C88

loc_492A5B:
	mov eax, ebp
	call sub_4AD0F4
	xor esi, esi
	mov edi, eax
	cmp eax, 2
	jnz loc_492C92
	mov edx, 8
	mov eax, dword_56455C
	call sub_492840

loc_492A7E:
	add esi, edi
	lea eax, [esi+esi]
	add eax, ebp
	call sub_4AD0F4
	mov edi, eax
	cmp eax, 2
	jnz loc_492CA6
	mov edx, 8
	mov eax, dword_56465C
	call sub_492840

loc_492AA4:
	add esi, edi
	lea eax, [esi+esi]
	add eax, ebp
	call sub_4AD0F4
	mov edi, eax
	cmp eax, 2
	jnz loc_492CBA
	mov edx, 10h
	mov eax, dword_56D15C
	call sub_492840

loc_492ACA:
	add esi, edi
	lea eax, [esi+esi]
	add eax, ebp
	call sub_4AD0F4
	mov edi, eax
	cmp eax, 2
	jnz loc_492CCE
	mov edx, 10h
	mov eax, dword_56D17C
	call sub_492840

loc_492AF0:
	add esi, edi
	lea eax, [esi+esi]
	add eax, ebp
	call sub_4AD0F4
	mov edi, eax
	cmp eax, 2
	jnz loc_492CE2
	mov edx, 10h
	mov eax, dword_56D35C
	call sub_492840

loc_492B16:
	add esi, edi
	lea eax, [esi+esi]
	add eax, ebp
	call sub_4AD0F4
	mov edi, eax
	cmp eax, 2
	jnz loc_492CF6
	mov edx, 10h
	mov eax, dword_56D37C
	call sub_492840

loc_492B3C:
	mov edx, dword_56455C
	mov eax, dword_56D15C
	mov ebx, ecx
	call sub_4AD186
	mov eax, [esp]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	add esi, edi
	lea edi, 0[eax*4]
	mov edx, dword_56455C
	add ecx, edi
	mov eax, dword_56D19C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56457C
	add ecx, edi
	mov eax, dword_56D1DC
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56457C
	add ecx, edi
	mov eax, dword_56D21C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56459C
	add ecx, edi
	mov eax, dword_56D25C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56459C
	add ecx, edi
	mov eax, dword_56D29C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645BC
	add ecx, edi
	mov eax, dword_56D2DC
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645BC
	add ecx, edi
	mov eax, dword_56D31C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645DC
	add ecx, edi
	mov eax, dword_56D35C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645DC
	add ecx, edi
	mov eax, dword_56D39C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645FC
	add ecx, edi
	mov eax, dword_56D3DC
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_5645FC
	add ecx, edi
	mov eax, dword_56D41C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56461C
	add ecx, edi
	mov eax, dword_56D45C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56461C
	add ecx, edi
	mov eax, dword_56D49C
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56463C
	add ecx, edi
	mov eax, dword_56D4DC
	mov ebx, ecx
	call sub_4AD186
	mov edx, dword_56463C
	mov eax, dword_56D51C
	lea ebx, [ecx+edi]
	call sub_4AD186
	mov eax, esi
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_492C88:
	call sub_492874
	jmp loc_492A5B

loc_492C92:
	mov edx, 8
	mov eax, dword_56455C
	call sub_4ACE59
	jmp loc_492A7E

loc_492CA6:
	mov edx, 8
	mov eax, dword_56465C
	call sub_4ACE59
	jmp loc_492AA4

loc_492CBA:
	mov edx, 10h
	mov eax, dword_56D15C
	call sub_4ACE59
	jmp loc_492ACA

loc_492CCE:
	mov edx, 10h
	mov eax, dword_56D17C
	call sub_4ACE59
	jmp loc_492AF0

loc_492CE2:
	mov edx, 10h
	mov eax, dword_56D35C
	call sub_4ACE59
	jmp loc_492B16

loc_492CF6:
	mov edx, 10h
	mov eax, dword_56D37C
	call sub_4ACE59
	jmp loc_492B3C
;sub_492A40 endp

sub_492D10: ;SUBROUTINE
	sub esp, 4
	fldz
	fcomp dword [esp+8]
	fnstsw ax
	sahf
	ja loc_492D39
	fld dword [esp+8]
	fadd qword [dbl_4D05A8]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	add esp, 4
	ret 4

loc_492D39:
	fld dword [esp+8]
	fadd qword [dbl_4D05A0]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	add esp, 4
	ret 4
;sub_492D10 endp

sub_492D54: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov [esp+8], eax
	mov ecx, 0FFFFFFC0h
	mov ebx, 71h
	mov edi, 21800h
	mov esi, 2C800000h
	xor edx, edx

loc_492D77:
	mov [esp+0Ch], ecx
	lea eax, [esi+edi]
	fild dword [esp+0Ch]
	fadd qword [dbl_4D05D0]
	add eax, ebx
	fst qword [esp]
	fmul qword [dbl_4D05B0]
	mov dword dword_56E3C8[edx], eax
	sub esp, 4
	fstp dword [esp]
	call sub_492D10
	fld qword [esp]
	fmul qword [dbl_4D05B8]
	sub esp, 4
	mov ebp, eax
	fstp dword [esp]
	and ebp, 1FFh
	call sub_492D10
	fld qword [esp]
	shl ebp, 0Bh
	and eax, 1FFh
	fmul qword [dbl_4D05C0]
	add eax, ebp
	mov dword dword_56E5C8[edx], eax
	sub esp, 4
	fstp dword [esp]
	call sub_492D10
	fld qword [esp]
	fmul qword [dbl_4D05C8]
	add edx, 4
	add edi, 800h
	add esi, 800000h
	mov [esp+0Ch], eax
	sub esp, 4
	inc ecx
	fstp dword [esp]
	mov ebp, [esp+10h]
	call sub_492D10
	and ebp, 1FFh
	and eax, 1FFh
	shl eax, 0Bh
	shl ebp, 17h
	inc ebx
	add eax, ebp
	mov dword dword_56E7C4[edx], eax
	cmp ecx, 40h
	jl loc_492D77
	mov edx, 0FFFFFF67h
	mov ecx, 0FFFFFD9Ch
	mov esi, 1Fh
	mov ebp, [esp+8]
	xor edi, edi

loc_492E48:
	lea eax, [edx+edx]
	add eax, 81h
	test eax, eax
	jl loc_492F60
	cmp eax, 0FFh
	jle loc_492E64
	mov eax, 0FFh

loc_492E64:
	mov ebx, eax
	add eax, 4
	sar eax, 3
	sar ebx, 3
	cmp eax, 1Fh
	jle loc_492E76
	mov eax, esi

loc_492E76:
	cmp ebp, 0Fh
	jnz loc_492F67
	shl ebx, 1Ah
	shl eax, 0Ah

loc_492E85:
	add eax, ebx
	mov dword dword_56E164[ecx], eax
	inc edx
	add ecx, 4
	cmp edx, 99h
	jl loc_492E48
	mov edx, 0FFFFFF7Dh
	mov ecx, 0FFFFFDF4h
	mov ebp, 0FFh
	mov edi, 3Fh
	xor esi, esi

loc_492EAF:
	lea eax, [edx+edx]
	add eax, 81h
	test eax, eax
	jl loc_492F72
	cmp eax, 0FFh
	jle loc_492EC8
	mov eax, ebp

loc_492EC8:
	cmp dword [esp+8], 0Fh
	jnz loc_492F79
	mov ebx, eax
	add eax, 4
	sar eax, 3
	sar ebx, 3
	cmp eax, 1Fh
	jle loc_492EE8
	mov eax, 1Fh

loc_492EE8:
	shl ebx, 15h
	shl eax, 5
	add ecx, 4
	add eax, ebx
	inc edx
	mov dword dword_56DCF0[ecx], eax
	cmp edx, 83h
	jl loc_492EAF
	mov edx, 0FFFFFF4Fh
	mov ecx, 0FFFFFD3Ch
	mov ebp, 1Fh
	mov esi, 0FFh
	xor edi, edi

loc_492F18:
	lea eax, [edx+edx]
	add eax, 81h
	test eax, eax
	jl loc_492F94
	cmp eax, 0FFh
	jle loc_492F2D
	mov eax, esi

loc_492F2D:
	mov ebx, eax
	add eax, 4
	sar eax, 3
	sar ebx, 3
	cmp eax, 1Fh
	jle loc_492F3F
	mov eax, ebp

loc_492F3F:
	shl ebx, 10h
	add ecx, 4
	add eax, ebx
	inc edx
	mov dword dword_56D820[ecx], eax
	cmp edx, 0B1h
	jl loc_492F18
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_492F60:
	mov eax, edi
	jmp loc_492E64

loc_492F67:
	shl ebx, 1Bh
	shl eax, 0Bh
	jmp loc_492E85

loc_492F72:
	mov eax, esi
	jmp loc_492EC8

loc_492F79:
	mov ebx, eax
	add eax, 2
	sar eax, 2
	sar ebx, 2
	cmp eax, 3Fh
	jle loc_492EE8
	mov eax, edi
	jmp loc_492EE8

loc_492F94:
	mov eax, edi
	jmp loc_492F2D
;sub_492D54 endp

sub_492F98: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0A48h
	mov esi, eax
	mov [esp+0A10h], edx
	mov [esp+0A0Ch], ebx
	mov edi, ecx
	mov edx, [esp+0A5Ch]
	test edx, edx
	jnz loc_4931AA
	mov ecx, 1

loc_492FC7:
	xor edx, edx
	mov dl, byte [byte_4DB25C]
	cmp edx, 0Fh
	jz loc_492FDD
	cmp edx, 10h
	jnz loc_4931D4

loc_492FDD:
	cmp edx, dword [dword_56E9C8]
	jz loc_492FF2
	mov eax, edx
	call sub_492D54
	mov dword [dword_56E9C8], edx

loc_492FF2:
	xor ebx, ebx
	xor eax, eax
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	and eax, 3
	and si, 0FFFEh
	sar eax, 1
	or esi, eax
	mov eax, ecx
	imul eax, edi
	lea edx, [esi+eax]
	mov eax, [esp+0A58h]
	imul eax, ecx
	mov [esp+0A08h], edx
	mov edx, [esp+0A10h]
	add edx, eax
	mov [esp+0A44h], edx
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edx, dword [dword_4DB24C]
	mov [esp+0A04h], eax
	cmp esi, edx
	jge loc_493080
	lea ebx, [ecx+ecx]
	mov eax, edx
	lea edx, [ebx-1]
	sub eax, esi
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	imul ebx, eax
	shl eax, 2
	add esi, ebx
	add [esp+0A0Ch], eax

loc_493080:
	mov eax, [esp+0A08h]
	mov edi, dword [dword_4DB254]
	cmp eax, edi
	jle loc_493098
	mov [esp+0A08h], edi

loc_493098:
	mov eax, [esp+0A10h]
	mov ebp, dword [dword_4DB250]
	cmp eax, ebp
	jge loc_4930F0
	mov edx, [esp+0A10h]
	mov eax, ebp
	sub eax, edx
	lea edx, [ecx-1]
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, ecx
	imul edx, eax
	imul eax, [esp+0A04h]
	mov ebx, [esp+0A10h]
	mov ebp, [esp+0A0Ch]
	shl eax, 2
	add ebx, edx
	add ebp, eax
	mov [esp+0A10h], ebx
	mov [esp+0A0Ch], ebp

loc_4930F0:
	mov eax, [esp+0A44h]
	mov edx, dword [dword_4DB258]
	cmp eax, edx
	jle loc_493108
	mov [esp+0A44h], edx

loc_493108:
	mov edx, [esp+0A08h]
	sub edx, esi
	add ecx, ecx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edi, eax
	cmp eax, 2
	jl loc_49319C
	mov eax, [esp+0A04h]
	mov ecx, [esp+0A5Ch]
	shl eax, 2
	test ecx, ecx
	jnz loc_4931E5
	mov ebp, [esp+0A10h]
	mov ebx, [esp+0A44h]
	mov ecx, [esp+0A0Ch]
	cmp ebp, ebx
	jge loc_49319C
	mov [esp+0A20h], eax

loc_49315E:
	mov ebx, ebp
	mov eax, esi
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov ebx, edi
	mov edx, eax
	mov eax, ecx
	inc ebp
	call sub_49A978
	mov eax, [esp+0A20h]
	mov edx, [esp+0A44h]
	add ecx, eax
	cmp ebp, edx
	jl loc_49315E

loc_49319C:
	xor eax, eax
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4931AA:
	cmp edx, 1
	jnz loc_4931B9

loc_4931AF:
	mov ecx, 2
	jmp loc_492FC7

loc_4931B9:
	cmp edx, 2
	jz loc_4931AF
	cmp edx, 3
	jz loc_4931AF
	mov eax, 0FFFFFFFFh
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4931D4:
	mov eax, 0FFFFFFFEh
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4931E5:
	cmp ecx, 3
	jnz loc_493366
	mov ebp, [esp+0A10h]
	mov ebx, [esp+0A44h]
	mov ecx, [esp+0A0Ch]
	cmp ebp, ebx
	jge loc_493278
	mov edx, edi
	dec edx
	mov [esp+0A18h], edx
	lea edx, [edi+edi]
	sub edx, 2
	mov [esp+0A14h], eax
	mov [esp+0A28h], edx

loc_493225:
	mov ebx, [esp+0A18h]
	mov edx, esp
	mov eax, ecx
	call sub_49ABEE
	mov ebx, ebp
	mov eax, esi
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov ebx, [esp+0A28h]
	mov edx, eax
	mov eax, esp
	add ebp, 2
	call sub_49A978
	mov eax, [esp+0A14h]
	mov edx, [esp+0A44h]
	add ecx, eax
	cmp ebp, edx
	jl loc_493225

loc_493278:
	mov edx, [esp+0A08h]
	mov eax, [esp+0A44h]
	mov ecx, [esp+0A10h]
	sub edx, esi
	sub eax, ecx
	imul eax, edx
	cmp eax, 25800h
	jg loc_49334D

loc_49329F:
	mov eax, [esp+0A0Ch]
	lea edx, [edi-1]
	mov ebp, [esp+0A10h]
	mov [esp+0A34h], edx
	mov edx, [esp+0A04h]
	inc ebp
	shl edx, 2
	add edi, edi
	mov [esp+0A24h], edx
	mov edx, [esp+0A44h]
	sub edi, 2
	dec edx
	mov [esp+0A30h], edi
	mov [esp+0A38h], edx
	cmp ebp, edx
	jge loc_49319C

loc_4932EC:
	mov edi, [esp+0A24h]
	mov ecx, [esp+0A34h]
	add edi, eax
	mov ebx, esp
	mov edx, edi
	call sub_49AC4A
	mov ebx, ebp
	mov eax, esi
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov ebx, [esp+0A30h]
	mov edx, eax
	mov eax, esp
	add ebp, 2
	call sub_49A978
	mov eax, edi
	cmp ebp, [esp+0A38h]
	jl loc_4932EC
	xor eax, eax
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_49334D:
;	call sub_483FC8
	test eax, eax
	jnz loc_49329F
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_493366:
	mov ebp, [esp+0A10h]
	mov ebx, [esp+0A44h]
	mov ecx, [esp+0A0Ch]
	cmp ebp, ebx
	jge loc_4933C4
	mov [esp+0A1Ch], eax

loc_493386:
	mov ebx, ebp
	mov eax, esi
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov ebx, edi
	mov edx, eax
	mov eax, ecx
	add ebp, 2
	call sub_49AA4B
	mov eax, [esp+0A1Ch]
	mov edx, [esp+0A44h]
	add ecx, eax
	cmp ebp, edx
	jl loc_493386

loc_4933C4:
	cmp dword [esp+0A5Ch], 2
	jnz loc_49319C
	mov eax, [esp+0A08h]
	mov edx, [esp+0A44h]
	mov ebx, [esp+0A10h]
	sub eax, esi
	sub edx, ebx
	imul eax, edx
	cmp eax, 25800h
	jg loc_4934A4

loc_4933F9:
	mov eax, [esp+0A0Ch]
	mov [esp+0A40h], eax
	mov eax, [esp+0A04h]
	shl eax, 2
	mov [esp+0A2Ch], eax
	mov eax, [esp+0A44h]
	mov ebp, [esp+0A10h]
	dec eax
	inc ebp
	mov [esp+0A3Ch], eax
	cmp ebp, eax
	jge loc_49319C

loc_493437:
	mov ebx, ebp
	mov eax, esi
	mov ecx, [esp+0A2Ch]
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov edx, [esp+0A40h]
	mov ebx, eax
	add ebp, 2
	mov eax, [esp+0A40h]
	add edx, ecx
	mov ecx, edi
	mov [esp+0A00h], edx
	call sub_49AB12
	mov eax, [esp+0A00h]
	mov ebx, [esp+0A3Ch]
	mov [esp+0A40h], eax
	cmp ebp, ebx
	jl loc_493437
	xor eax, eax
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4934A4:
;	call sub_483FC8
	test eax, eax
	jnz loc_4933F9
	add esp, 0A48h
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_492F98 endp

sub_4934CC: ;SUBROUTINE
	push esi
	mov esi, eax
	mov edx, dword [dword_4DCE38]
	mov dword [dword_4DCE50], eax
	mov dword [dword_4DCE4C], eax
	add eax, 0C0h
	call sub_4955F8
	mov eax, [esi+84h]
	mov [esi+3Ch], eax
	mov eax, [esi+88h]
	mov [esi+4], eax
	mov edx, [esi+88h]
	mov eax, [esi+84h]
	add edx, eax
	mov [esi+8], edx
	mov [esi+2Ch], ecx
	mov eax, [esi+4]
	mov [esi+18h], eax
	mov eax, [esi+18h]
	mov [esi+14h], eax
	mov eax, [esi+14h]
	mov [esi+0Ch], eax
	mov eax, [esi+0Ch]
	mov [esi+10h], eax
	mov dword [esi+28h], 0
	mov [esi+40h], ebx
	mov dword [esi+1Ch], 0
	mov dword [esi+70h], 0
	mov dword [esi+78h], 0
	mov eax, [esi+78h]
	mov [esi+7Ch], eax
	mov dword [esi+20h], 7
	mov dword [esi+24h], 0
	mov dword [esi+38h], 0
	mov eax, [esi+38h]
	mov [esi+34h], eax
	mov dword [esi+0BCh], 0
	mov eax, [esi+0BCh]
	mov [esi+0B8h], eax
	mov dword [esi+30h], 0
	call sub_489E0C
	mov [esi+0A4h], eax
	call sub_489EF8
	mov [esi+0ACh], eax
	mov ecx, 0FFFFFFFFh
	lea eax, [esi+8Ch]
	mov ebx, 2
	push eax
	xor edx, edx
	mov eax, sub_493F78
	call sub_489AE0
	mov eax, [esi+0A4h]
	call sub_489E5C
	mov eax, esi
	pop esi
	ret
;sub_4934CC endp

sub_4935E4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp+4], edx
	mov esi, ebx
	mov ebp, ecx
	mov edi, eax
	test ax, 0FFFh
	jz loc_493606
	lea edi, [eax+1000h]
	and edi, 7FFFF000h

loc_493606:
	mov ebx, 300h
	mov eax, aCdbuffer ; "CDBUFFER"
	mov edx, edi
	call sub_4844B0
	mov edx, dword [dword_4DCE38]
	mov [esp], eax
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 3
	sub eax, edx
	lea edx, 0[eax*4]
	mov ecx, ebp
	add edx, 0Fh
	mov ebx, esi
	and edx, 0FFF0h
	mov eax, aCdstream ; "CDSTREAM"
	add edx, 0C0h
	call sub_4844C4
	mov edx, dword [dword_4DCE38]
	mov esi, eax
	lea eax, 0[edx*4]
	add eax, edx
	shl eax, 3
	sub eax, edx
	lea edx, 0[eax*4]
	add edx, 0Fh
	and edx, 0FFF0h
	mov eax, esi
	add edx, 0C0h
	call sub_48A01C
	mov eax, [esp]
	mov [esi+88h], eax
	mov [esi+84h], edi
	mov ebx, 1000h
	mov edx, edi
	call sub_49C890
	mov edi, dword [dword_4DCE38]
	lea edx, 0[edi*4]
	add edx, edi
	shl edx, 3
	sub edx, edi
	shl edx, 2
	add edx, 0Fh
	mov ebx, 1000h
	and edx, 0FFF0h
	mov eax, esi
	add edx, 0C0h
	call sub_49C890
	mov edi, dword [dword_4DCE38]
	lea edx, 0[edi*4]
	add edx, edi
	shl edx, 3
	sub edx, edi
	shl edx, 2
	mov ecx, ebp
	add edx, 0Fh
	mov ebx, [esp+4]
	and edx, 0FFF0h
	mov eax, esi
	add edx, 0C0h
	call sub_4934CC
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_4935E4 endp

sub_493718: ;SUBROUTINE
	push ecx
	mov ecx, 1
	call sub_4935E4
	pop ecx
	ret
;sub_493718 endp

sub_493728: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov esi, eax
	mov edi, edx
	call strcmp_
	lea ecx, [esp+8]
	mov ebp, eax
	mov [esp+1Ch], eax
	lea eax, [esp+18h]
	lea ebx, [esp+10h]
	push eax
	lea edx, [esp+4]
	mov eax, esi
	call sub_4AD420
	test ebp, ebp
	jnz loc_4937EF
	mov eax, [esp]
	mov [esp+4], eax
	mov eax, [esp+10h]
	mov [esp+14h], eax
	mov eax, [esp+8]
	mov [esp+0Ch], eax

loc_493776:
	mov eax, [esp+8]
	sub eax, 2000h
	and ax, 0E000h
	mov [esp+8], eax
	cmp eax, 40000h
	jg loc_49380C

loc_493792:
	mov edx, 2000h
	mov eax, aStream ; "STREAM"
	xor ebx, ebx
	call sub_484498
	mov ecx, eax
	mov eax, 2000h
	mov edx, eax
	mov ebx, [esp+18h]
	sar edx, 1Fh
	idiv ebx
	mov esi, eax

loc_4937B7:
	mov eax, [esp]
	mov ebx, esi
	mov edx, ecx
	call sub_4AD4AC
	test eax, eax
	jz loc_4937B7
	call sub_4833C7
	mov edi, [esp+8]
	test edi, edi
	jle loc_493823
	xor ebp, ebp

loc_4937D6:
	mov eax, [esp]
	mov ebx, esi
	mov edx, ecx
	call sub_4AD4AC
	test eax, eax
	jnz loc_493819
	mov eax, ebp
	call sub_483EB0
	jmp loc_4937D6

loc_4937EF:
	lea eax, [esp+18h]
	lea ecx, [esp+0Ch]
	lea ebx, [esp+14h]
	push eax
	lea edx, [esp+8]
	mov eax, edi
	call sub_4AD420
	jmp loc_493776

loc_49380C:
	mov dword [esp+8], 40000h
	jmp loc_493792

loc_493819:
	sub edi, 2000h
	test edi, edi
	jg loc_4937D6

loc_493823:
	call sub_4833C7
	mov edi, eax
	xor ebp, ebp

loc_49382C:
	mov eax, [esp+4]
	mov ebx, esi
	mov edx, ecx
	call sub_4AD4AC
	test eax, eax
	jnz loc_493846
	mov eax, ebp
	call sub_483EB0
	jmp loc_49382C

loc_493846:
	call sub_4833C7
	mov ebx, eax
	mov eax, [esp]
	call sub_4AD44C
	cmp dword [esp+1Ch], 0
	jz loc_493865
	mov eax, [esp+4]
	call sub_4AD44C

loc_493865:
	mov eax, ecx
	call sub_4848FC
	lea eax, 0[edi*4]
	lea edx, [edi+eax]
	add edx, edx
	shl edx, 10h
	mov ecx, [esp+8]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_56E9CC], eax
	cmp eax, 1
	jge loc_49389A
	mov dword [dword_56E9CC], 1

loc_49389A:
	mov eax, 3E80000h
	mov edx, eax
	mov ecx, dword [dword_56E9CC]
	sar edx, 1Fh
	idiv ecx
	mov ecx, [esp+8]
	lea edx, 0[edi*4]
	mov dword [dword_56E9D0], eax
	add edx, edi
	mov eax, [esp+8]
	add edx, edx
	sar eax, 2
	shl edx, 10h
	add ecx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4DCE3C], eax
	cmp eax, 0DAh
	jg loc_493904
	cmp eax, 0A3h
	jl loc_493910

loc_4938E6:
	lea eax, 0[ebx*4]
	add eax, ebx
	add eax, eax
	mov dword [dword_4DCE40], eax
	mov eax, dword [dword_56E9D0]
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_493904:
	mov dword [dword_4DCE3C], 0DAh
	jmp loc_4938E6

loc_493910:
	mov ecx, 1
	mov dword [dword_4DD3B0], ecx
	mov dword [dword_4DCE3C], ecx
	jmp loc_4938E6
;sub_493728 endp

sub_493940: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, dword [dword_4DCE4C]
	cmp eax, edx
	jz loc_493951
	pop edx
	pop ecx
	ret

loc_493951:
	mov dword [edx+24h], 8
	mov edx, [edx+0A8h]
	add eax, 8Ch
	call sub_489E20
	mov eax, [ecx+0A4h]
	call sub_489E5C
	mov eax, [ecx+0A4h]
	call CloseHandleCaller
	mov eax, [ecx+0ACh]
	call sub_489F74
	mov dword [ecx+0ACh], 0
	lea eax, [ecx+8Ch]
	xor ecx, ecx
	call sub_489B70
	mov dword [dword_4DCE4C], ecx
	pop edx
	pop ecx
	ret
;sub_493940 endp

sub_4939AC: ;SUBROUTINE
	push ecx
	push edx
	push ebp
	mov edx, eax
	mov ecx, dword [dword_4DCE4C]
	cmp eax, ecx
	jz loc_4939FB
	mov eax, ecx
	cmp dword [ecx+70h], 0
	jz loc_4939D1

loc_4939C3:
	cmp edx, [eax+70h]
	jz loc_4939D1
	mov eax, [eax+70h]
	cmp dword [eax+70h], 0
	jnz loc_4939C3

loc_4939D1:
	mov ecx, [edx+70h]
	mov [eax+70h], ecx
	mov eax, [edx+88h]
	call sub_4848FC
	mov eax, edx
	call sub_4848FC
	xor ebp, ebp
	mov dword [dword_4DCE50], ebp
	mov dword [dword_4DCE4C], ebp
	pop ebp
	pop edx
	pop ecx
	ret

loc_4939FB:
	call sub_493940

loc_493A00:
	mov ecx, [ecx+70h]
	mov eax, [edx+88h]
	call sub_4848FC
	mov eax, edx
	call sub_4848FC
	mov edx, ecx
	test ecx, ecx
	jnz loc_493A00
	xor ebp, ebp
	mov dword [dword_4DCE50], ebp
	mov dword [dword_4DCE4C], ebp
	pop ebp
	pop edx
	pop ecx
	ret
;sub_4939AC endp

sub_493A30: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, ebx
	mov ebp, ecx
	mov ecx, [esp+14h]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, ecx
	call sub_495714
	mov ecx, eax
	test eax, eax
	jz loc_493ABF
	mov ebx, 8Fh
	call strncpy_
	mov byte [ecx+8Eh], 0
	mov [ecx+94h], edi
	mov [ecx+90h], ebp
	cmp dword [esi+7Ch], 0
	jz loc_493ACE
	mov eax, [esi+7Ch]
	mov [eax+98h], ecx
	mov [esi+7Ch], ecx

loc_493A84:
	cmp dword [esp+10h], 0
	jz loc_493A98
	cmp dword [esi+24h], 0
	jnz loc_493A98
	mov dword [esi+24h], 0Fh

loc_493A98:
	mov eax, [esi+0ACh]
	call sub_489F60
	mov edx, [esi+0A8h]
	lea eax, [esi+8Ch]
	call sub_489E20
	mov eax, 1

loc_493AB9:
	pop ebp
	pop edi
	pop esi
	ret 8

loc_493ABF:
	mov eax, [esi+0ACh]
	call sub_489F60
	xor eax, eax
	jmp loc_493AB9

loc_493ACE:
	mov [esi+7Ch], ecx
	mov eax, [esi+7Ch]
	mov [esi+78h], eax
	jmp loc_493A84
;sub_493A30 endp

sub_493ADC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ebp, edx
	mov edi, ebx
	mov [esp], ecx
	mov ecx, [esp+14h]
	mov eax, [eax+0ACh]
	call sub_489F48
	cmp dword [esi+78h], 0
	jz loc_493B18

loc_493B00:
	mov eax, [esi+78h]
	mov edx, [eax+98h]
	mov [esi+78h], edx
	call sub_495634
	cmp dword [esi+78h], 0
	jnz loc_493B00
	nop

loc_493B18:
	mov eax, ecx
	mov ebx, 8Fh
	call sub_495714
	mov edx, ebp
	mov ecx, eax
	call strncpy_
	mov byte [ecx+8Eh], 0
	mov eax, [esp]
	mov [ecx+94h], edi
	mov [ecx+90h], eax
	mov [esi+7Ch], ecx
	mov eax, [esi+7Ch]
	mov [esi+78h], eax
	cmp dword [esi+1Ch], 0
	jz loc_493B5F
	cmp dword [esi+24h], 0
	jnz loc_493B5F
	mov dword [esi+24h], 0Fh

loc_493B5F:
	mov eax, [esi+0ACh]
	call sub_489F60
	mov edx, [esi+0A8h]
	lea eax, [esi+8Ch]
	call sub_489E20
	cmp edi, 0Bh
	jz loc_493B98
	cmp edi, 0Dh
	jz loc_493B98
	cmp edi, 14h
	jz loc_493B98
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4

loc_493B98:
	mov eax, [esi+0A4h]
	call sub_489E5C
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_493ADC endp

sub_493BB4: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	mov ebx, 1
	xor ecx, ecx
	call sub_493ADC
	pop ecx
	pop ebx
	ret
;sub_493BB4 endp

sub_493BDC: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	push 0
	mov ebx, 11h
	xor ecx, ecx
	call sub_493A30
	pop ecx
	pop ebx
	ret
;sub_493BDC endp

sub_493C0C: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	mov ebx, 0Dh
	xor ecx, ecx
	call sub_493ADC
	pop ecx
	pop ebx
	ret
;sub_493C0C endp

sub_493C5C: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	push 0
	mov ebx, 13h
	xor ecx, ecx
	call sub_493A30
	pop ecx
	pop ebx
	ret
;sub_493C5C endp

sub_493C8C: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	mov ebx, 14h
	xor ecx, ecx
	call sub_493ADC
	pop ecx
	pop ebx
	ret
;sub_493C8C endp

sub_493CB4: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	mov ebx, 2
	push 1
	mov ecx, edx
	mov edx, dword_4D070C
	call sub_493A30
	pop ecx
	pop ebx
	ret
;sub_493CB4 endp

sub_493CEC: ;SUBROUTINE
	push ebx
	push ecx
	push 1
	mov ebx, 10h
	push 0
	mov ecx, edx
	mov edx, dword_4D070C
	call sub_493A30
	pop ecx
	pop ebx
	ret
;sub_493CEC endp

sub_493D9C: ;SUBROUTINE
	push esi
	push edi
	mov ecx, eax
	mov esi, [eax+84h]
	mov [eax+3Ch], esi
	mov esi, [eax+88h]
	mov [eax+4], esi
	mov esi, [eax+88h]
	mov edi, [eax+84h]
	add esi, edi
	mov [eax+8], esi
	mov esi, [eax+4]
	mov [eax+18h], esi
	mov esi, [eax+18h]
	mov [eax+14h], esi
	mov esi, [eax+14h]
	mov [eax+0Ch], esi
	mov esi, [eax+0Ch]
	mov [eax+10h], esi
	mov dword [eax+0BCh], 0
	mov esi, [eax+0BCh]
	mov [eax+0B8h], esi
	mov dword [eax+28h], 0
	mov dword [eax+40h], 0
	mov dword [eax+5Ch], 0
	mov dword [eax+54h], 1
	mov [eax+6Ch], ebx
	mov [eax+68h], edx
	mov edx, dword [dword_4DCE4C]
	mov ebx, [edx+0ACh]
	mov [eax+0ACh], ebx
	mov ebx, [edx+0A8h]
	mov [eax+0A8h], ebx
	lea edi, [eax+8Ch]
	lea esi, [edx+8Ch]
	movsd
	movsd
	movsd
	movsd
	movsd
	mov ebx, [edx+0A4h]
	mov [eax+0A4h], ebx
	mov eax, [edx+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	cmp dword [eax+70h], 0
	jz loc_493E70

loc_493E64:
	mov eax, [eax+70h]
	cmp dword [eax+70h], 0
	jnz loc_493E64

loc_493E70:
	mov [eax+70h], ecx
	mov dword [ecx+70h], 0
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, ecx
	pop edi
	pop esi
	ret
;sub_493D9C endp

sub_493E90: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov [esp], eax
	mov ebp, edx
	mov esi, ecx
	mov ecx, ebx
	test bx, 0FFFh
	jz loc_493EB2
	lea ecx, [ebx+1000h]
	and ecx, 7FFFF000h

loc_493EB2:
	mov ebx, 300h
	mov eax, aCdbuffer ; "CDBUFFER"
	mov edx, ecx
	call sub_4844B0
	mov edx, 0C0h
	mov edi, eax
	mov ebx, esi
	mov eax, aSeccdstream ; "SECCDSTREAM"
	call sub_484498
	mov edx, 0C0h
	mov esi, eax
	call sub_48A01C
	mov [esi+88h], edi
	mov [esi+84h], ecx
	mov ebx, 1000h
	mov edx, ecx
	mov eax, edi
	call sub_49C890
	mov ebx, 1000h
	mov edx, 0C0h
	mov eax, esi
	mov ecx, 0C0h
	call sub_49C890
	mov edx, [esp]
	mov ebx, ebp
	mov eax, esi
	call sub_493D9C
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret
;sub_493E90 endp

off_493F28: dd loc_493FFC
	dd loc_494358 ; jump table for switch statement
	dd loc_49462E
	dd loc_493FA6
	dd loc_493FA6
	dd loc_493FA6
	dd loc_49405E
	dd loc_494127
	dd loc_493FA6
	dd loc_493FA6
	dd loc_4942CD
	dd loc_493FA6
	dd loc_49423B
	dd loc_493FA6
	dd loc_493FA6
	dd loc_494358
	dd loc_493FFC
	dd loc_493FFC
	dd loc_493FFC
	dd loc_49423B

sub_493F78: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 4
	call sub_489E0C
	mov edx, dword [dword_4DCE4C]
	mov [edx+0A8h], eax
	mov edx, [edx+0A4h]
	xor eax, eax
	call sub_489E20
	mov edi, 1
	xor ebp, ebp

loc_493FA6:
	mov eax, dword [dword_4DCE4C] ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+24h]
	cmp edx, 8
	jz loc_494056
	cmp dword [eax+24h], 0Fh
	jnz loc_493FD4
	mov dword [eax+20h], 7

loc_493FD4:
	mov eax, dword [dword_4DCE4C]
	mov [eax+24h], ebp
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+20h]
	dec edx
	cmp edx, 13h ; switch 20 cases
	ja loc_493FA6 ; jumptable 00493FF5 default case
	jmp off_493F28[edx*4] ; switch jump

loc_493FFC:
	mov eax, dword [dword_4DCE4C] ; jumptable 00493FF5 cases 0,16-18
	cmp ebp, [eax+1Ch]
	jz loc_49400E
	mov eax, [eax+1Ch]
	call sub_4AD44C

loc_49400E:
	mov eax, esp
	push eax
	mov eax, dword [dword_4DCE4C]
	lea ecx, [eax+58h]
	lea ebx, [eax+50h]
	lea edx, [eax+1Ch]
	mov eax, [eax+80h]
	call sub_4AD420
	test eax, eax
	jnz loc_49416B

loc_494032:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+80h]
	call sub_495634
	mov eax, dword [dword_4DCE4C]
	mov [eax+1Ch], ebp
	mov dword [eax+20h], 7
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_494056:
	mov [eax+20h], edx
	jmp loc_493FD4

loc_49405E:
	call sub_49530C ; jumptable 00493FF5 case 6
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+78h]
	jnz loc_49409B
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_49409B:
	mov eax, [eax+0ACh]
	call sub_489F48
	mov ecx, dword [dword_4DCE4C]
	mov eax, [ecx+78h]
	mov edx, [ecx+78h]
	mov edx, [edx+98h]
	mov [ecx+78h], edx
	mov [ecx+80h], eax
	mov ebx, [ecx+78h]
	cmp ebp, ebx
	jnz loc_4940CB
	mov [ecx+7Ch], ebx

loc_4940CB:
	mov edx, dword [dword_4DCE4C]
	mov ecx, [eax+94h]
	mov [edx+20h], ecx
	mov ecx, [edx+50h]
	mov esi, [eax+90h]
	add ecx, esi
	mov [edx+60h], ecx
	mov edx, [eax+94h]
	cmp edx, 0Dh
	jnz loc_494108

loc_4940F3:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_494108:
	cmp edx, 14h
	jz loc_4940F3
	cmp edi, edx
	jz loc_4940F3
	cmp edx, 11h
	jz loc_4940F3
	cmp edx, 12h
	jz loc_4940F3
	cmp edx, 13h
	jz loc_4940F3
	call sub_495634
	jmp loc_4940F3

loc_494127:
	cmp dword [eax+1Ch], 0 ; jumptable 00493FF5 case 7
	jnz loc_494161

loc_49412D:
	mov eax, dword [dword_4DCE4C]
	mov dword [eax+1Ch], 0
	mov eax, [eax+0A8h]
	call CloseHandleCaller
	mov edx, dword [dword_4DCE4C]
	mov edx, [edx+0A4h]
	xor eax, eax
	call sub_489E20
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_494161:
	mov eax, [eax+1Ch]
	call sub_4AD44C
	jmp loc_49412D

loc_49416B:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+80h]
	call sub_495634
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov ecx, dword [dword_4DCE4C]
	mov eax, [esp]
	cmp eax, [ecx+40h]
	jle loc_494200
	mov [ecx+0A0h], edi

loc_49419F:
	mov [ecx+40h], eax
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+50h]
	mov [eax+60h], edx
	mov edx, [eax+50h]
	mov ecx, [eax+58h]
	add edx, ecx
	mov [eax+54h], edx
	cmp edi, [eax+20h]
	jnz loc_494224

loc_4941BD:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+14h]
	mov [eax+10h], edx
	mov [eax+0B8h], ebp

loc_4941CE:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	cmp dword [eax+20h], 13h
	jnz loc_49422C

loc_4941DF:
	mov eax, dword [dword_4DCE4C]
	mov dword [eax+20h], 7

loc_4941EB:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_494200:
	mov eax, [ecx+40h]
	mov edx, [ecx+40h]
	mov ebx, [esp]
	sar edx, 1Fh
	idiv ebx
	mov [ecx+0A0h], eax
	mov eax, ebx
	mov esi, [ecx+0A0h]
	imul eax, esi
	jmp loc_49419F

loc_494224:
	cmp dword [eax+20h], 12h
	jz loc_4941BD
	jmp loc_4941CE

loc_49422C:
	cmp dword [eax+20h], 12h
	jz loc_4941DF
	mov dword [eax+20h], 10h
	jmp loc_4941EB

loc_49423B:
	mov eax, dword [dword_4DCE4C] ; jumptable 00493FF5 cases 12,19
	cmp ebp, [eax+1Ch]
	jz loc_49424D
	mov eax, [eax+1Ch]
	call sub_4AD44C

loc_49424D:
	mov eax, esp
	push eax
	mov eax, dword [dword_4DCE4C]
	lea ecx, [eax+58h]
	lea ebx, [eax+50h]
	lea edx, [eax+1Ch]
	mov eax, [eax+80h]
	call sub_4AD420
	test eax, eax
	jz loc_494032
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+80h]
	call sub_495634
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov ecx, dword [dword_4DCE4C]
	mov eax, [esp]
	cmp eax, [ecx+40h]
	jle loc_49445B
	mov [ecx+0A0h], edi

loc_4942A9:
	mov [ecx+40h], eax
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+50h]
	mov [eax+60h], edx
	mov edx, [eax+50h]
	mov ecx, [eax+58h]
	add edx, ecx
	mov [eax+54h], edx
	mov eax, [eax+0ACh]
	call sub_489F60

loc_4942CD:
	mov eax, dword [dword_4DCE4C] ; jumptable 00493FF5 case 10
	mov dword [dword_4DCE50], eax
	mov eax, [eax+0ACh]
	call sub_489F48
	cmp ebp, dword [dword_4DCE50]
	jz loc_494325

loc_4942EA:
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+4]
	mov [eax+18h], edx
	mov edx, [eax+18h]
	mov [eax+14h], edx
	mov edx, [eax+14h]
	mov [eax+0Ch], edx
	mov edx, [eax+0Ch]
	mov [eax+10h], edx
	mov [eax+0BCh], ebp
	mov edx, [eax+0BCh]
	mov [eax+0B8h], edx
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebp, eax
	jnz loc_4942EA

loc_494325:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, dword [dword_4DCE4C]
	cmp dword [eax+20h], 14h
	jz loc_49447F
	mov dword [eax+20h], 2
	mov edx, [eax+0A4h]
	mov eax, ebp
	call sub_489E20

loc_494358:
	mov eax, dword [dword_4DCE4C] ; jumptable 00493FF5 cases 1,15
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	cmp dword [eax+20h], 2
	jnz loc_494498
	mov edx, [eax+14h]
	mov [eax+10h], edx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov [eax+0B8h], ebp

loc_494389:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+60h]
	mov [eax+5Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+5Ch]
	mov eax, [eax+1Ch]
	call sub_4AD4DC
	mov edx, eax
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov ecx, [eax+5Ch]
	sub ecx, edx
	mov [eax+0B0h], ecx
	mov edx, [eax+40h]
	mov ecx, [eax+0B0h]
	sub edx, ecx
	mov [eax+4Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60
	mov edx, dword [dword_4DCE4C]
	mov eax, edx
	call sub_49530C
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	cmp eax, [edx+40h]
	jg loc_494554

loc_494406:
	mov ecx, dword [dword_4DCE4C]
	cmp ebp, [ecx+24h]
	jnz loc_4944A3
	mov eax, ecx
	call sub_49530C
	mov eax, [ecx+8]
	mov edx, [ecx+0Ch]
	sub eax, edx
	mov edx, eax
	mov eax, dword [dword_4DCE4C]
	call sub_495380
	cmp edx, eax
	jz loc_4944A3
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494406

loc_49445B:
	mov eax, [ecx+40h]
	mov edx, [ecx+40h]
	mov ebx, [esp]
	sar edx, 1Fh
	idiv ebx
	mov [ecx+0A0h], eax
	mov eax, ebx
	mov esi, [ecx+0A0h]
	imul eax, esi
	jmp loc_4942A9

loc_49447F:
	mov dword [eax+20h], 7
	mov edx, [eax+0A4h]
	mov eax, ebp
	call sub_489E20
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_494498:
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	jmp loc_494389

loc_4944A3:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_4944C6:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494501
	call sub_4953C0
	cmp eax, [esp]
	jg loc_494501
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_4944C6

loc_494501:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFFh
	mov edx, [eax+4]
	mov [eax+10h], edx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60

loc_494554:
	mov ecx, dword [dword_4DCE4C]
	cmp ebp, [ecx+24h]
	jnz loc_494592
	mov eax, ecx
	call sub_495380
	cmp eax, [ecx+40h]
	jg loc_494592
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494554

loc_494592:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_4945B5:
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+0A0h]
	mov edx, [eax+0Ch]
	mov eax, [eax+1Ch]
	call sub_4AD4AC
	test eax, eax
	jnz loc_4945D8
	mov eax, edi
	call sub_489B9C
	jmp loc_4945B5

loc_4945D8:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+4Ch]
	add [eax+5Ch], edx
	cmp ebp, [eax+0B0h]
	jz loc_494611
	mov ebx, [eax+4Ch]
	mov edx, [eax+10h]
	mov ecx, [eax+10h]
	mov eax, [eax+0B0h]
	add eax, ecx
	call sub_48A980

loc_494611:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+4Ch]
	add [eax+0Ch], edx
	mov dword [eax+20h], 3
	mov eax, [eax+0ACh]
	call sub_489F60

loc_49462E:
	mov edx, dword [dword_4DCE4C] ; jumptable 00493FF5 case 2
	cmp dword [edx+4Ch], 8
	jnb loc_49482B
	mov eax, edx
	call sub_49530C
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	cmp eax, [edx+40h]
	jg loc_494775

loc_494654:
	mov ecx, dword [dword_4DCE4C]
	cmp ebp, [ecx+24h]
	jnz loc_4946A5
	mov eax, ecx
	call sub_49530C
	mov eax, [ecx+8]
	mov edx, [ecx+0Ch]
	sub eax, edx
	mov edx, eax
	mov eax, dword [dword_4DCE4C]
	call sub_495380
	cmp edx, eax
	jz loc_4946A5
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494654

loc_4946A5:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_4946C8:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_494709
	mov eax, dword [dword_4DCE50]
	call sub_4953C0
	cmp eax, [edx+4Ch]
	jg loc_494709
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_4946C8

loc_494709:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+4Ch]
	mov edx, [eax+4]
	mov eax, [eax+10h]
	call sub_48A980
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFFh
	mov edx, [eax+4]
	mov [eax+10h], edx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov edx, [eax+4Ch]
	add [eax+0Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60

loc_494775:
	mov ecx, dword [dword_4DCE4C]
	cmp ebp, [ecx+24h]
	jnz loc_4947B3
	mov eax, ecx
	call sub_495380
	cmp eax, [ecx+40h]
	jg loc_4947B3
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494775

loc_4947B3:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_4947D6:
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+0A0h]
	mov edx, [eax+0Ch]
	mov eax, [eax+1Ch]
	call sub_4AD4AC
	test eax, eax
	jnz loc_4947F9
	mov eax, edi
	call sub_489B9C
	jmp loc_4947D6

loc_4947F9:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+40h]
	add [eax+0Ch], edx
	mov edx, [eax+40h]
	add [eax+5Ch], edx
	mov edx, [eax+40h]
	add [eax+4Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60

loc_49482B:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+10h]
	mov ecx, 4
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 5343456Ch
	jnz loc_494864
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+78h]
	jz loc_494864
	mov dword [eax+20h], 7
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_494864:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov edx, [edx+4]
	mov [eax+48h], edx
	mov edx, [eax+48h]
	mov ecx, [eax+4Ch]
	sub edx, ecx
	mov [eax+44h], edx
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebp, eax
	jz loc_4948C8

loc_494899:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+10h]
	mov ecx, 4
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov edx, eax
	mov eax, dword [dword_4DCE50]
	and edx, [eax+6Ch]
	cmp edx, [eax+68h]
	jnz loc_49496B

loc_4948C8:
	cmp ebp, dword [dword_4DCE50]
	jnz loc_4948DA
	mov eax, dword [dword_4DCE4C]
	mov dword [dword_4DCE50], eax

loc_4948DA:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	mov ecx, dword [dword_4DCE4C]
	cmp dword [ecx+48h], 8
	jnb loc_494980

loc_4948FA:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+2Ch]
	jnz loc_49499C
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov dword [dword_4DCE50], eax

loc_49491D:
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+10h]
	mov ecx, [eax+68h]
	mov [edx], ecx
	mov edx, [eax+10h]
	mov dword [edx+4], 8
	add dword [eax+10h], 8
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebp, eax
	jnz loc_49491D
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, dword [dword_4DCE4C]
	mov dword [eax+20h], 7
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_49496B:
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebp, eax
	jnz loc_494899
	jmp loc_4948C8

loc_494980:
	mov edx, dword [dword_4DCE50]
	mov eax, [edx+3Ch]
	mov edx, [edx+3Ch]
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	cmp eax, [ecx+48h]
	jl loc_4948FA

loc_49499C:
	mov eax, dword [dword_4DCE50]
	mov ebx, dword [dword_4DCE4C]
	cmp eax, ebx
	jz loc_494D3D
	mov esi, ebp
	mov eax, [ebx+48h]
	add eax, [ebx+40h]
	mov edx, dword [dword_4DCE50]
	lea ecx, [eax+8]
	mov eax, edx
	call sub_49530C
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	cmp eax, ecx
	ja loc_494B4F

loc_4949D5:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494A29
	mov ecx, dword [dword_4DCE50]
	mov eax, ecx
	call sub_49530C
	mov edx, [ecx+8]
	mov ebx, [ecx+0Ch]
	mov eax, dword [dword_4DCE50]
	sub edx, ebx
	call sub_495380
	cmp edx, eax
	jz loc_494A29
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_4949D5

loc_494A29:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_494A4C:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494A8C
	mov eax, dword [dword_4DCE50]
	call sub_495380
	cmp eax, 8
	ja loc_494A8C
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494A4C

loc_494A8C:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_494AAF:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494AF7
	mov ecx, [eax+48h]
	add ecx, [eax+40h]
	mov eax, dword [dword_4DCE50]
	lea edx, [ecx+8]
	call sub_4953C0
	cmp eax, edx
	ja loc_494AF7
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494AAF

loc_494AF7:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFFh
	mov edx, [eax+4]
	mov [eax+10h], edx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60

loc_494B4F:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+44h]
	jg loc_494C74

loc_494B5D:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_494B9E
	mov eax, dword [dword_4DCE50]
	call sub_495380
	cmp eax, [edx+4Ch]
	jg loc_494B9E
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494B5D

loc_494B9E:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+4Ch]
	mov edx, dword [dword_4DCE50]
	mov edx, [edx+10h]
	mov eax, [eax+10h]
	call sub_48A980
	mov edx, dword [dword_4DCE50]
	mov eax, dword [dword_4DCE4C]
	mov ecx, [edx+10h]
	mov ebx, [eax+4Ch]
	add ecx, ebx
	mov [edx+0Ch], ecx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov [eax+4Ch], ebp

loc_494C04:
	mov eax, [eax+0ACh]
	call sub_489F60

loc_494C0F:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+44h]
	jl loc_494D6D

loc_494C1D:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+44h]
	jge loc_494F4A

loc_494C2B:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_494EC5
	mov eax, dword [dword_4DCE50]
	call sub_495380
	cmp eax, [edx+40h]
	jg loc_494EC5
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494C2B

loc_494C74:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_494CB5
	mov eax, dword [dword_4DCE50]
	call sub_495380
	cmp eax, [edx+48h]
	jg loc_494CB5
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494C74

loc_494CB5:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+48h]
	mov edx, dword [dword_4DCE50]
	mov edx, [edx+10h]
	mov eax, [eax+10h]
	call sub_48A980
	mov edx, dword [dword_4DCE50]
	mov eax, dword [dword_4DCE4C]
	mov ecx, [edx+10h]
	mov ebx, [eax+48h]
	add ecx, ebx
	mov [edx+0Ch], ecx
	mov edx, [eax+44h]
	neg edx
	mov [eax+4Ch], edx
	mov ebx, [eax+4Ch]
	mov edx, [eax+10h]
	mov ecx, [eax+10h]
	mov eax, [eax+48h]
	add eax, ecx
	call sub_48A980
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+48h]
	sub [eax+0Ch], edx
	jmp loc_494C04

loc_494D3D:
	mov eax, [ebx+10h]
	mov ecx, 4
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 5343456Ch
	jnz loc_494D64
	mov eax, edi
	mov esi, eax
	jmp loc_494C0F

loc_494D64:
	mov eax, ebp
	mov esi, eax
	jmp loc_494C0F

loc_494D6D:
	mov edx, [eax+44h]
	add edx, [eax+40h]
	lea ecx, [edx+8]
	mov edx, dword [dword_4DCE50]
	mov eax, edx
	call sub_49530C
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	cmp eax, ecx
	ja loc_494C1D

loc_494D91:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494DE5
	mov ecx, dword [dword_4DCE50]
	mov eax, ecx
	call sub_49530C
	mov edx, [ecx+8]
	mov ebx, [ecx+0Ch]
	mov eax, dword [dword_4DCE50]
	sub edx, ebx
	call sub_495380
	cmp edx, eax
	jz loc_494DE5
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494D91

loc_494DE5:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_494E08:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_494E49
	mov eax, dword [dword_4DCE50]
	call sub_4953C0
	cmp eax, [edx+4Ch]
	jg loc_494E49
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494E08

loc_494E49:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov ebx, dword [dword_4DCE4C]
	mov ebx, [ebx+4Ch]
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+4]
	mov eax, [eax+10h]
	call sub_48A980
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFFh
	mov edx, dword [dword_4DCE4C]
	mov ecx, [eax+4]
	mov ebx, [edx+4Ch]
	add ecx, ebx
	mov [eax+0Ch], ecx
	mov ecx, [eax+4]
	mov [eax+10h], ecx
	mov eax, [edx+0ACh]
	call sub_489F60
	jmp loc_494C1D

loc_494EC5:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_494F4A

loc_494EE4:
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+0A0h]
	mov edx, dword [dword_4DCE50]
	mov edx, [edx+0Ch]
	mov eax, [eax+1Ch]
	call sub_4AD4AC
	test eax, eax
	jnz loc_494F0D
	mov eax, edi
	call sub_489B9C
	jmp loc_494EE4

loc_494F0D:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+40h]
	add [eax+5Ch], edx
	mov edx, dword [dword_4DCE50]
	mov ecx, [eax+40h]
	add [edx+0Ch], ecx
	mov edx, [eax+40h]
	sub [eax+44h], edx
	mov eax, [eax+0ACh]
	call sub_489F60
	jmp loc_494C1D

loc_494F4A:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	test esi, esi
	jnz loc_495027
	mov edx, dword [dword_4DCE4C]
	mov eax, dword [dword_4DCE50]
	mov ecx, [edx+48h]
	add [eax+10h], ecx
	mov ecx, [edx+48h]
	sub ecx, 8
	add [eax+0B8h], ecx
	mov eax, [edx+0ACh]
	call sub_489F60
	mov eax, dword [dword_4DCE50]
	mov esi, dword [dword_4DCE4C]
	cmp eax, esi
	jz loc_495243
	mov edx, esi
	cmp ebp, [esi+4Ch]
	jnz loc_4951DB
	mov ecx, eax
	mov eax, [eax+0Ch]
	mov esi, [ecx+10h]
	mov ecx, eax
	mov eax, edx
	sub ecx, esi
	call sub_49530C
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	cmp eax, ecx
	jg loc_495117

loc_494FD2:
	mov edx, dword [dword_4DCE4C]
	cmp ebp, [edx+24h]
	jnz loc_49505B
	mov eax, edx
	call sub_49530C
	mov eax, [edx+8]
	mov ecx, [edx+0Ch]
	mov edx, eax
	mov eax, dword [dword_4DCE4C]
	sub edx, ecx
	call sub_495380
	cmp edx, eax
	jz loc_49505B
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_494FD2

loc_495027:
	mov edx, dword [dword_4DCE4C]
	mov eax, dword [dword_4DCE50]
	mov ecx, [edx+48h]
	add [eax+10h], ecx
	mov ecx, [edx+48h]
	sub ecx, 8
	add [eax+0B8h], ecx
	mov dword [edx+20h], 7
	mov eax, [edx+0ACh]
	call sub_489F60
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_49505B:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case

loc_49507E:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_4950C4
	mov ecx, dword [dword_4DCE50]
	mov edx, [ecx+0Ch]
	sub edx, [ecx+10h]
	call sub_4953C0
	cmp eax, edx
	jg loc_4950C4
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_49507E

loc_4950C4:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFFh
	mov edx, [eax+4]
	mov [eax+10h], edx
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, [eax+0ACh]
	call sub_489F60

loc_495117:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_49515D
	mov ecx, dword [dword_4DCE50]
	mov edx, [ecx+0Ch]
	sub edx, [ecx+10h]
	call sub_495380
	cmp eax, edx
	jg loc_49515D
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_495117

loc_49515D:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_493FA6 ; jumptable 00493FF5 default case
	mov eax, [eax+0ACh]
	call sub_489F48
	mov edx, dword [dword_4DCE50]
	mov eax, [edx+0Ch]
	mov ecx, [edx+10h]
	sub eax, ecx
	mov ecx, eax
	mov eax, dword [dword_4DCE4C]
	mov [eax+4Ch], ecx
	mov ebx, [eax+4Ch]
	mov eax, [eax+10h]
	mov ecx, [edx+10h]
	mov edx, eax
	mov eax, ecx
	call sub_48A980
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+10h]
	mov ebx, [eax+4Ch]
	add edx, ebx
	mov [eax+0Ch], edx

loc_4951D0:
	mov eax, [eax+0ACh]
	call sub_489F60

loc_4951DB:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+5Ch]
	sub edx, [eax+4Ch]
	cmp edx, [eax+54h]
	jl loc_493FA6 ; jumptable 00493FF5 default case
	cmp ebp, [eax+78h]
	jnz loc_4952E4
	mov dword [dword_4DCE50], eax

loc_4951FD:
	mov eax, dword [dword_4DCE4C]
	cmp ebp, [eax+24h]
	jnz loc_49526B
	mov edx, dword [dword_4DCE50]
	mov eax, edx
	call sub_495380
	add eax, [edx+4Ch]
	cmp eax, 8
	ja loc_49526B
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], edi
	mov eax, [eax+1Ch]
	mov edx, edi
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0A8h]
	call sub_489E5C
	jmp loc_4951FD

loc_495243:
	mov eax, [esi+0ACh]
	call sub_489F48
	mov edx, dword [dword_4DCE50]
	mov eax, [edx+0Ch]
	mov ecx, [edx+10h]
	mov edx, eax
	mov eax, dword [dword_4DCE4C]
	sub edx, ecx
	mov [eax+4Ch], edx
	jmp loc_4951D0

loc_49526B:
	mov eax, dword [dword_4DCE4C]
	mov [eax+0B4h], ebp
	mov eax, [eax+1Ch]
	mov edx, ebp
	call sub_459A80
	mov eax, dword [dword_4DCE4C]
	mov ebx, [eax+24h]
	cmp ebp, ebx
	jz loc_4952F5

loc_49528C:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov dword [dword_4DCE50], eax

loc_4952A6:
	mov eax, dword [dword_4DCE50]
	mov edx, [eax+10h]
	mov dword [edx], 0FFFFFFFDh
	mov edx, [eax+10h]
	mov dword [edx+4], 8
	add dword [eax+10h], 8
	mov edx, [eax+10h]
	mov [eax+0Ch], edx
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebp, eax
	jnz loc_4952A6
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60

loc_4952E4:
	mov eax, dword [dword_4DCE4C]
	mov dword [eax+20h], 7
	jmp loc_493FA6 ; jumptable 00493FF5 default case

loc_4952F5:
	mov eax, dword [dword_4DCE50]
	mov eax, [eax+70h]
	mov dword [dword_4DCE50], eax
	cmp ebx, eax
	jnz loc_4951FD
	jmp loc_49528C
;sub_493F78 endp

sub_49530C: ;SUBROUTINE
	push edx
	mov edx, eax
	mov eax, [eax+0ACh]
	call sub_489F48
	mov eax, [edx+18h]
	cmp eax, [edx+14h]
	jz loc_495352

loc_495322:
	mov eax, [edx+18h]
	cmp eax, [edx+10h]
	jz loc_495352
	mov eax, [edx+18h]
	cmp dword [eax], 0FFFFFFFEh
	jnz loc_49535F
	mov eax, [edx+18h]
	mov eax, [eax+4]
	sub eax, 8
	sub [edx+0BCh], eax
	mov eax, [edx+18h]
	mov eax, [eax+4]
	add [edx+18h], eax

loc_49534A:
	mov eax, [edx+18h]
	cmp eax, [edx+14h]
	jnz loc_495322

loc_495352:
	mov eax, [edx+0ACh]
	call sub_489F60
	pop edx
	ret

loc_49535F:
	mov eax, [edx+18h]
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_495352
	mov eax, [edx+18h]
	cmp eax, [edx+14h]
	jnz loc_495375
	mov eax, [edx+4]
	mov [edx+14h], eax

loc_495375:
	mov eax, [edx+4]
	mov [edx+18h], eax
	jmp loc_49534A
;sub_49530C endp

sub_495380: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_49530C
	mov eax, [edx+18h]
	cmp eax, [edx+0Ch]
	jb loc_4953A0
	mov eax, [edx+18h]
	cmp eax, [edx+0Ch]
	jnz loc_4953A8
	mov eax, [edx+18h]
	cmp eax, [edx+14h]
	jnz loc_4953A8

loc_4953A0:
	mov eax, [edx+8]
	sub eax, [edx+0Ch]
	pop edx
	ret

loc_4953A8:
	mov eax, [edx+18h]
	sub eax, [edx+0Ch]
	pop edx
	ret
;sub_495380 endp

sub_4953C0: ;SUBROUTINE
	push edx
	mov edx, eax
	call sub_49530C
	mov eax, [edx+18h]
	cmp eax, [edx+0Ch]
	ja loc_4953D8
	mov eax, [edx+18h]
	sub eax, [edx+4]
	pop edx
	ret

loc_4953D8:
	xor eax, eax
	pop edx
	ret
;sub_4953C0 endp

sub_4953DC: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov ecx, eax
	test eax, eax
	jz loc_49541D
	mov eax, [eax+78h] ;Poprawione, tu był crash
	test eax, eax
	jz loc_4953FF
	mov eax, [eax+94h]
	cmp eax, 0Dh
	jnb loc_495422
	cmp eax, 0Bh
	jz loc_495430

loc_4953FF:
	cmp dword [ecx+20h], 2
	jz loc_495430
	cmp dword [ecx+20h], 1
	jz loc_495430
	cmp dword [ecx+20h], 0Eh
	jz loc_495437
	mov eax, [ecx+10h]
	mov ebp, [ecx+14h]
	cmp eax, ebp
	jnz loc_495441
	xor eax, ebp

loc_49541D:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_495422:
	jbe loc_495430
	cmp eax, 14h
	jb loc_4953FF
	jbe loc_495430
	cmp eax, 17h
	jnz loc_4953FF

loc_495430:
	xor eax, eax
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_495437:
	mov eax, 0FFFFFFFEh
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_495441:
	mov eax, [ecx+0ACh]
	call sub_489F48
	mov eax, [ecx+14h]
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_495462
	mov eax, [ecx+4]
	mov [ecx+14h], eax
	mov eax, [ecx+10h]
	cmp eax, [ecx+14h]
	jz loc_4954C8

loc_495462:
	mov eax, [ecx+14h]
	mov eax, [eax+4]
	mov edx, [ecx+10h]
	cmp edx, [ecx+14h]
	jnb loc_4954DA
	mov ebx, [ecx+8]
	sub ebx, [ecx+14h]
	cmp ebx, eax
	jl loc_4954C8

loc_49547A:
	mov ebx, [ecx+14h]
	lea edx, [eax-8]
	sub [ecx+0B8h], edx
	add [ecx+0BCh], edx
	add [ecx+14h], eax
	cmp dword [ebx], 0FFFFFFFDh
	jnz loc_4954B6
	cmp ebx, [ecx+18h]
	jnz loc_4954F6
	mov eax, [ecx+14h]
	mov [ecx+18h], eax

loc_49549F:
	mov eax, dword [dword_4DCE4C]
	add eax, 8Ch
	mov ebx, 0FFFFFFFFh
	mov edx, [eax+1Ch]
	call sub_489E20

loc_4954B6:
	mov eax, [ecx+0ACh]
	call sub_489F60
	mov eax, ebx
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_4954C8:
	mov eax, [ecx+0ACh]
	call sub_489F60
	xor eax, eax
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_4954DA:
	mov ebx, [ecx+10h]
	sub ebx, [ecx+14h]
	cmp ebx, eax
	jge loc_49547A
	mov eax, [ecx+0ACh]
	call sub_489F60
	xor eax, eax
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_4954F6:
	mov dword [ebx], 0FFFFFFFEh
	jmp loc_49549F
;sub_4953DC endp

sub_495500: ;SUBROUTINE
	add eax, 8Ch
	mov dword [edx], 0FFFFFFFEh
	mov edx, [eax+1Ch]
	jmp sub_489E20
;sub_495500 endp

sub_495514: ;SUBROUTINE
	test eax, eax
	jz locret_49551E
	mov eax, [eax+0B8h]

locret_49551E:
	ret
;sub_495514 endp

sub_49552C: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DCE4C]
	test edx, edx
	jz loc_495549
	mov eax, edx
	cmp dword [edx+20h], 7
	jnz loc_495545
	cmp dword [edx+78h], 0
	jz loc_495549

loc_495545:
	xor eax, eax
	pop edx
	ret

loc_495549:
	mov eax, 1
	pop edx
	ret
;sub_49552C endp

sub_495584: ;SUBROUTINE
	mov eax, [eax+0B4h]
	ret
;sub_495584 endp

sub_49558C: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	xor edx, edx
	cmp eax, 0FFFFFFFFh
	jz loc_4955A0
	test eax, eax
	jz loc_4955A9

loc_49559C:
	mov eax, edx
	pop ecx
	ret

loc_4955A0:
	mov edx, 1
	mov eax, edx
	pop ecx
	ret

loc_4955A9:
	call sub_49552C
	test eax, eax
	jz loc_49559C
	mov eax, ecx
	call sub_495514
	test eax, eax
	jnz loc_49559C
;	mov edx, 1 ;NO DCT CHUNKS FOUND
	mov eax, edx
	pop ecx
	ret
;sub_49558C endp

sub_4955F8: ;SUBROUTINE
	push ecx
	mov ecx, edx
	mov edx, dword [dword_4DCE4C]
	test edx, edx
	jz loc_49562F
	push ebx
	mov [edx+74h], eax
	dec ecx
	xor edx, edx
	test ecx, ecx
	jle loc_495624

loc_495610:
	lea ebx, [eax+9Ch]
	inc edx
	mov [eax+98h], ebx
	mov eax, ebx
	cmp edx, ecx
	jl loc_495610
	nop

loc_495624:
	mov dword [eax+98h], 0
	pop ebx

loc_49562F:
	pop ecx
	ret
;sub_4955F8 endp

sub_495634: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, dword [dword_4DCE4C]
	test ecx, ecx
	jnz loc_495645
	pop edx
	pop ecx
	ret

loc_495645:
	mov eax, [ecx+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov ecx, [eax+74h]
	mov [edx+98h], ecx
	mov [eax+74h], edx
	mov eax, [eax+0ACh]
	call sub_489F60
	pop edx
	pop ecx
	ret
;sub_495634 endp

sub_495670: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, dword [dword_4DCE4C]
	test ecx, ecx
	jnz loc_495683

loc_49567E:
	xor eax, eax
	pop edx
	pop ecx
	ret

loc_495683:
	mov eax, [ecx+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+74h]
	test edx, edx
	jz loc_4956A7

loc_49569A:
	test eax, eax
	jz loc_4956A7
	mov eax, [eax+98h]
	dec edx
	jnz loc_49569A

loc_4956A7:
	mov eax, dword [dword_4DCE4C]
	mov eax, [eax+0ACh]
	call sub_489F60
	test edx, edx
	jnz loc_49567E
	mov eax, 1
	pop edx
	pop ecx
	ret
;sub_495670 endp

sub_495714: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ecx, dword [dword_4DCE4C]
	test ecx, ecx
	jnz loc_495727
	xor eax, eax
	pop edx
	pop ecx
	ret

loc_495727:
	mov eax, [ecx+0ACh]
	call sub_489F48
	mov eax, dword [dword_4DCE4C]
	cmp dword [eax+74h], 0
	jnz loc_495741
	test edx, edx
	jz loc_49576F

loc_495741:
	mov eax, dword [dword_4DCE4C]
	mov edx, [eax+74h]
	mov ecx, [eax+74h]
	mov ecx, [ecx+98h]
	mov [eax+74h], ecx
	mov dword [edx+98h], 0
	mov eax, [eax+0ACh]
	call sub_489F60
	mov eax, edx
	pop edx
	pop ecx
	ret

loc_49576F:
	mov eax, [eax+0ACh]
	call sub_489F60
	xor eax, eax
	pop edx
	pop ecx
	ret
;sub_495714 endp

sub_495780: ;SUBROUTINE
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	cmp byte [byte_4DDA74], 0
	jz loc_4957B0
	cmp dword [dword_4DDA90], 0
	jnz loc_4957BA
	test esi, esi
	jle loc_4957C4
	mov dl, byte [byte_4DCED9]
	test dl, dl
	jz loc_4957CE
	mov eax, 0FFFFFFFFh

loc_4957AB:
	pop edi
	pop esi
	ret 4

loc_4957B0:
	mov eax, 0FFFFFFF6h
	pop edi
	pop esi
	ret 4

loc_4957BA:
	mov eax, 0FFFFFFF0h
	pop edi
	pop esi
	ret 4

loc_4957C4:
	mov eax, 0FFFFFFF8h
	pop edi
	pop esi
	ret 4

loc_4957CE:
	call sub_488B30
	test eax, eax
	jl loc_4957AB
	call sub_49664C
	mov byte [byte_4DCEDC], dl
	mov al, [esp+0Ch]
	mov byte [byte_4DCEDA], al
	mov dword [dword_4DCE58], edi
	mov byte [byte_4DCED8], dl
	mov byte [byte_4DCEE5], dl
	mov byte [byte_4DCEE6], dl
	mov dword [dword_4DCEF0], esi
	mov dword [dword_4DCE68], ecx
	mov byte [byte_4DCED9], 1
	mov byte [byte_4DCEE7], 0FFh
	mov ecx, dword [dword_59C608]
	add ecx, ebx
	xor ebx, ebx

loc_495827:
	mov eax, ebx
	call sub_483EB0
	mov edx, ebx
	mov eax, ebx
	call sub_496314
	cmp esi, dword [dword_4DCEEC]
	jle loc_495847
	cmp ecx, dword [dword_59C608]
	ja loc_495827

loc_495847:
	mov eax, dword [dword_4DCEEC]
	pop edi
	pop esi
	ret 4
;sub_495780 endp

sub_495854: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jz loc_49586C
	cmp byte [byte_4DCED9], 2
	jnz loc_495872
	mov eax, 0FFFFFFFFh
	ret

loc_49586C:
	mov eax, 0FFFFFFF6h
	ret

loc_495872:
	push ecx
	mov byte [byte_4DCEDB], al
	mov byte [byte_4DCEDE], dl
	mov cl, 0FFh
	mov byte [byte_4DCEDF], cl
	mov byte [byte_4DCEE0], cl
	mov byte [byte_4DCEE1], cl
	call sub_496700
	pop ecx
	ret
;sub_495854 endp

sub_4958A0: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jz loc_4958B8
	cmp byte [byte_4DCED9], 0
	jnz loc_4958BE
	mov eax, 0FFFFFFF2h
	ret

loc_4958B8:
	mov eax, 0FFFFFFF6h
	ret

loc_4958BE:
	mov eax, dword [dword_4DCE70]
	ret
;sub_4958A0 endp

sub_4958D0: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	cmp byte [byte_4DDA74], 0
	jz loc_4958EE
	cmp dword [dword_4DDA90], 0
	jz loc_4958F6
	mov eax, 0FFFFFFF0h
	pop ecx
	pop ebx
	ret

loc_4958EE:
	mov eax, 0FFFFFFF6h
	pop ecx
	pop ebx
	ret

loc_4958F6:
	call sub_4A5360
	call sub_488B30
	mov ecx, eax
	test eax, eax
	jl loc_495983
	push esi
	xor al, al
	mov byte [byte_4DCF5C], al
	mov byte [byte_4DCEDC], 1
	xor esi, esi
	mov dword [dword_4DCE68], esi
	mov al, [edx+8]
	mov byte [byte_4DCEDE], al
	mov al, [edx+7]
	mov byte [byte_4DCEDF], al
	mov al, [edx+9]
	mov byte [byte_4DCEE0], al
	mov al, [edx+0Ah]
	mov byte [byte_4DCEE1], al
	mov dword [dword_4DCE58], ebx
	xor dl, dl
	mov byte [byte_4DCED8], dl
	xor dh, dh
	mov byte [byte_4DCEE5], dh
	xor bl, bl
	mov byte [byte_4DCEE6], bl
	mov dword [dword_4DCEF0], 0Fh
	mov byte [byte_4DCEE7], 0FFh
	xor al, al
	mov byte [byte_4DCEE8], al
	call sub_49664C
	call sub_4A5374
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret

loc_495983:
	call sub_4A5374
	mov eax, ecx
	pop ecx
	pop ebx
	ret
;sub_4958D0 endp

sub_495990: ;SUBROUTINE
	push edx
	xor eax, eax
	call sub_4A5060
	cmp byte [byte_4DDA74], 0
	jz loc_4959B1
	cmp dword [dword_4DDA90], 0
	jnz loc_4959B8
	mov eax, 0FFFFFFF2h
	pop edx
	ret

loc_4959B1:
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_4959B8:
	call sub_495B2C
	cmp byte [byte_4DCEE4], 0
	jz loc_4959D8
	mov eax, sub_496314
	xor dh, dh
	call sub_483E64
	mov byte [byte_4DCEE4], dh

loc_4959D8:
	push ecx
	xor ecx, ecx
	mov dword [dword_4DDA90], ecx
	call sub_488B30
	xor eax, eax
	pop ecx
	pop edx
	ret
;sub_495990 endp

sub_4959EC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov esi, edx
	mov ah, byte [byte_4DDA74]
	xor edi, edi
	test ah, ah
	jnz loc_495A0A
	mov edi, 0FFFFFFF6h
	mov eax, edi
	pop edi
	pop esi
	pop ecx
	ret

loc_495A0A:
	push ebx
	call sub_4A5360
	cmp byte [byte_4DCED9], 0
	jnz loc_495A80
	test esi, esi
	jnz loc_495A66
	mov eax, dword [dword_4DCE58]
	mov edx, ecx
	call sub_493C0C

loc_495A29:
	mov dh, 1
	call sub_49664C
	mov byte [byte_4DCED9], dh

loc_495A36:
	mov al, byte [byte_4DCEE5]
	inc byte [byte_4DCEE5]
	mov ebx, 80h
	mov eax, byte_4DCF5C
	mov edx, ecx
	call strncpy_
	xor bh, bh
	mov byte [byte_4DCFDB], bh
	call sub_4A5374
	pop ebx
	mov eax, edi
	pop edi
	pop esi
	pop ecx
	ret

loc_495A66:
	mov eax, dword [dword_4DCE58]
	mov edx, ecx
	call sub_493C8C
	mov eax, dword [dword_4DCE58]
	mov edx, esi
	call sub_493CEC
	jmp loc_495A29

loc_495A80:
	movsx edx, byte [byte_4DCEE5]
	movsx eax, byte [byte_4DCEE6]
	add eax, edx
	cmp eax, 13h
	jl loc_495AA6
	mov edi, 0FFFFFFF3h
	call sub_4A5374
	pop ebx
	mov eax, edi
	pop edi
	pop esi
	pop ecx
	ret

loc_495AA6:
	test esi, esi
	jnz loc_495ADA
	mov eax, 1
	call sub_495670
	test eax, eax
	jnz loc_495AC9
	mov edi, 0FFFFFFF3h
	call sub_4A5374
	pop ebx
	mov eax, edi
	pop edi
	pop esi
	pop ecx
	ret

loc_495AC9:
	mov eax, dword [dword_4DCE58]
	mov edx, ecx
	call sub_493BDC
	jmp loc_495A36

loc_495ADA:
	mov eax, 2
	call sub_495670
	test eax, eax
	jnz loc_495AF9
	mov edi, 0FFFFFFF3h
	call sub_4A5374
	pop ebx
	mov eax, edi
	pop edi
	pop esi
	pop ecx
	ret

loc_495AF9:
	mov ebx, 80h
	mov eax, byte_4DCF5C
	mov edx, ecx
	call strncmp_
	test eax, eax
	jz loc_495B1A
	mov eax, dword [dword_4DCE58]
	mov edx, ecx
	call sub_493C5C

loc_495B1A:
	mov eax, dword [dword_4DCE58]
	mov edx, esi
	call sub_493CEC
	jmp loc_495A36
;sub_4959EC endp

sub_495B2C: ;SUBROUTINE
	push edx
	cmp byte [byte_4DDA74], 0
	jnz loc_495B3D
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_495B3D:
	mov eax, dword [dword_4DCE6C]
	call sub_489840
	mov edx, dword [dword_59C608]
	add edx, 0C8h

loc_495B53:
	mov eax, dword [dword_4DCE6C]
	call sub_486040
	test eax, eax
	jnz loc_495B77
	cmp edx, dword [dword_59C608]
	jb loc_495B70
	call sub_483EB0
	jmp loc_495B53

loc_495B70:
	mov eax, 0FFFFFFEFh
	pop edx
	ret

loc_495B77:
	call sub_4A5360
	mov dl, 0FFh
	call sub_495DEC
	mov byte [byte_4DCEE7], dl
	xor dh, dh
	mov byte [byte_4DCEE8], dh
	mov byte [byte_4DCEE5], dh
	mov byte [byte_4DCEE6], dh
	mov byte [byte_4DCED9], dh
	mov byte [byte_4DCF5C], dh
	mov byte [byte_4DCED8], dh
	xor eax, eax
	call sub_4A5060
	cmp byte [byte_4DCEE4], 0
	jz loc_495BCF
	mov eax, sub_496314
	call sub_483E64
	mov byte [byte_4DCEE4], dh

loc_495BCF:
	call sub_4A5374
	xor eax, eax
	pop edx
	ret
;sub_495B2C endp

sub_495BD8: ;SUBROUTINE
	push edx
	mov ah, byte [byte_4DDA74]
	mov edx, 0FFFFFFF2h
	test ah, ah
	jnz loc_495BF1
	mov edx, 0FFFFFFF6h
	mov eax, edx
	pop edx
	ret

loc_495BF1:
	call sub_4A5360
	cmp byte [byte_4DCED9], 0
	jz loc_495C1D
	xor eax, eax
	mov al, byte [byte_4DCEDB]
	call sub_488B30
	mov edx, dword [dword_4DCE74]
	add edx, eax
	cmp byte [byte_4DCEE9], 2
	jnz loc_495C1D
	dec edx

loc_495C1D:
	call sub_4A5374
	mov eax, edx
	pop edx
	ret
;sub_495BD8 endp

sub_495C28: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jnz loc_495C37
	mov eax, 0FFFFFFF6h
	ret

loc_495C37:
	push edx
	call sub_4A5360
	cmp byte [byte_4DCED9], 0
	jnz loc_495C54

loc_495C46:
	mov edx, 0FFFFFFF2h
	call sub_4A5374
	mov eax, edx
	pop edx
	ret

loc_495C54:
	cmp byte [byte_4DCED9], 1
	jz loc_495C46
	cmp byte [byte_4DCEDB], 0
	jnz loc_495C74
	mov edx, 0FFFFFFF9h
	call sub_4A5374
	mov eax, edx
	pop edx
	ret

loc_495C74:
	push ecx
	call sub_495BD8
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 3
	add eax, edx
	shl eax, 3
	mov edx, eax
	shl eax, 2
	xor ecx, ecx
	add edx, eax
	mov cl, byte [byte_4DCEDB]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, eax
	pop ecx
	call sub_4A5374
	mov eax, edx
	pop edx
	ret
;sub_495C28 endp

sub_495CAC: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp byte [byte_4DDA74], 0
	jz loc_495CBC
	test edx, edx
	jg loc_495CBE

loc_495CBC:
	pop edx
	ret

loc_495CBE:
	call sub_495C28
	cmp eax, edx
	jge loc_495D17
	call sub_49552C
	test eax, eax
	jnz loc_495D17
	mov eax, dword [dword_4DCE58]
	call sub_495584
	test eax, eax
	jz loc_495CFE
	mov eax, dword [dword_4DCE58]
	call sub_495514
	test eax, eax
	jnz loc_495CFE
	jmp loc_495D1C

loc_495CFE:
	mov dword [dword_4DCF48], edx
	cmp dword [dword_4DCFE0], 0
	jz loc_495CBC
	mov eax, edx
	call dword [dword_4DCFE0]
	pop edx
	ret

loc_495D17:
	mov eax, 1

loc_495D1C:
	call sub_4A50F8
	pop edx
	ret
;sub_495CAC endp

sub_495D24: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov ah, byte [byte_4DDA74]
	mov ecx, 0FFFFFFF1h
	test ah, ah
	jnz loc_495D41
	mov ecx, 0FFFFFFF6h
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495D41:
	push ebx
	call sub_4A5360
	mov ebx, [edx]
	cmp ebx, 6C444353h
	jnz loc_495D65
	mov eax, edx
	call sub_495E6C
	mov ecx, eax
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495D65:
	cmp ebx, 6C484353h
	jz loc_495D99
	cmp ebx, 6C434353h
	jz loc_495DAD
	cmp ebx, 6C4C4353h
	jz loc_495DC1
	cmp ebx, 6C454353h
	jnz loc_495DD5
	mov eax, edx
	call sub_49605C
	mov ecx, eax
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495D99:
	mov eax, edx
	call sub_495EC0
	mov ecx, eax
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495DAD:
	mov eax, edx
	call sub_495FC8
	mov ecx, eax
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495DC1:
	mov eax, edx
	call sub_496034
	mov ecx, eax
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret

loc_495DD5:
	mov eax, dword [dword_4DCE58]
	call sub_495500
	call sub_4A5374
	pop ebx
	mov eax, ecx
	pop edx
	pop ecx
	ret
;sub_495D24 endp

sub_495DEC: ;SUBROUTINE
	push edx
	push esi
	call sub_4A5360
	cmp dword [dword_4DCE5C], 0
	jz loc_495E50

loc_495DFC:
	mov eax, dword [dword_4DCE5C]
	cmp eax, dword [dword_4DCE60]
	jz loc_495E27
	mov edx, dword [dword_4DCE5C]
	mov eax, dword [dword_4DCE5C]
	mov eax, [eax]
	mov dword [dword_4DCE5C], eax
	mov eax, dword [dword_4DCE58]
	call sub_495500
	jmp loc_495DFC

loc_495E27:
	mov edx, dword [dword_4DCE5C]
	mov eax, dword [dword_4DCE58]
	call sub_495500
	cmp dword [dword_4DCE64], 0
	jz loc_495E50
	mov edx, dword [dword_4DCE64]
	mov eax, dword [dword_4DCE58]
	call sub_495500

loc_495E50:
	xor esi, esi
	mov dword [dword_4DCE5C], esi
	mov dword [dword_4DCE60], esi
	mov dword [dword_4DCE64], esi
	call sub_4A5374
	pop esi
	pop edx
	ret
;sub_495DEC endp

sub_495E6C: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DCE74]
	inc dword [dword_4DCE74]
	mov edx, [eax+4]
	add dword [dword_4DCE78], edx
	cmp dword [eax], 0FFFFFFFFh
	jnz loc_495EA1

loc_495E87:
	cmp dword [dword_4DCE5C], 0
	jnz loc_495EA9
	mov dword [dword_4DCE5C], eax
	mov dword [dword_4DCE60], eax
	mov eax, 3
	pop edx
	ret

loc_495EA1:
	mov dword [eax], 0
	jmp loc_495E87

loc_495EA9:
	mov edx, dword [dword_4DCE60]
	mov [edx], eax
	mov dword [dword_4DCE60], eax
	mov eax, 3
	pop edx
	ret
;sub_495E6C endp

sub_495EC0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ebp, eax
	mov ebx, 8
	cmp byte [byte_4DCEE7], 0
	jle loc_495EE4
	mov al, byte [byte_4DCEE7]
	dec byte [byte_4DCEE7]

loc_495EE4:
	mov eax, [ebp+4]
	sub eax, ebx
	mov [esp+0Ch], eax
	add ebx, ebp
	cmp byte [byte_4DCEDC], 0
	jnz loc_495F49

loc_495EF8:
	mov ecx, [esp+0Ch]
	mov edi, dword_4DCE7C
	mov esi, ebx
	mov edx, 0FFFFFFFFh
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ebx, esp
	mov [esp], edx
	mov eax, edi
	xor edx, edx
	mov ch, 1
	call sub_4A4C20
	mov byte [byte_4DCED8], ch
	mov eax, dword [dword_4DCE58]
	mov edx, ebp
	call sub_495500
	mov eax, 1
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_495F49:
	mov al, byte [byte_4DCEE6]
	inc byte [byte_4DCEE6]
	mov al, byte [byte_4DCEE5]
	dec byte [byte_4DCEE5]
	mov edi, dword_4DCF4C
	mov esi, dword_4DCF54
	movsd
	movsd
	mov edx, dword_4DCF54
	mov eax, ebx
	call sub_4AD540
	cmp byte [byte_4DCEE8], 0
	jz loc_495FBC
	mov ecx, 8
	mov edi, dword_4DCF4C
	mov esi, dword_4DCF54
	xor eax, eax
	repe cmpsb
	jz loc_495F9A
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_495F9A:
	test eax, eax
	jz loc_495FBC
	cmp byte [byte_4DCED9], 2
	jz loc_495FB5
	cmp byte [byte_4DCED9], 3
	jz loc_495FB5
	call sub_496700

loc_495FB5:
	mov byte [byte_4DCED9], 3

loc_495FBC:
	mov byte [byte_4DCEE8], 1
	jmp loc_495EF8
;sub_495EC0 endp

sub_495FC8: ;SUBROUTINE
	push ecx
	push edx
	lea edx, [eax+8]
	mov cl, byte [byte_4DCEEA]
	cmp cl, byte [byte_4DCEEB]
	jnz loc_495FEC
	movsx ecx, byte [byte_4DCEEA]
	cmp dword dword_4DCEF8[ecx*4], 0
	jle loc_495FF8

loc_495FEC:
	mov cl, byte [byte_4DCEEB]
	inc byte [byte_4DCEEB]

loc_495FF8:
	cmp byte [byte_4DCEEB], 14h
	jl loc_49600B
	push ebx
	xor bl, bl
	mov byte [byte_4DCEEB], bl
	pop ebx

loc_49600B:
	movsx ecx, byte [byte_4DCEEB]
	mov edx, [edx]
	mov dword dword_4DCEF8[ecx*4], edx
	mov ecx, dword [dword_4DCE58]
	mov edx, eax
	mov eax, ecx
	call sub_495500
	mov eax, 2
	pop edx
	pop ecx
	ret
;sub_495FC8 endp

sub_496034: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	lea edx, [eax+8]
	mov edx, [edx]
	mov eax, dword [dword_4DCE58]
	call sub_493CB4
	mov eax, dword [dword_4DCE58]
	mov edx, ecx
	call sub_495500
	mov eax, 4
	pop edx
	pop ecx
	ret
;sub_496034 endp

sub_49605C: ;SUBROUTINE
	push ecx
	push edx
	inc dword [dword_4DCE54]
	cmp byte [byte_4DCEDA], 0
	jnz loc_496079
	mov ecx, dword [dword_4DCE60]
	mov dword [ecx], 0FFFFFFFFh

loc_496079:
	mov ecx, dword [dword_4DCE58]
	mov edx, eax
	mov eax, ecx
	call sub_495500
	mov eax, 5
	pop edx
	pop ecx
	ret
;sub_49605C endp

sub_496090: ;SUBROUTINE
	mov eax, dword [dword_4DCE54]
	ret
;sub_496090 endp

sub_496098: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov ebx, eax
	mov ecx, edx
	xor esi, esi
	cmp byte [byte_4DCEE9], 2
	jnz loc_4961BE

loc_4960B0:
	mov eax, dword [dword_4DCE5C]
	cmp eax, dword [dword_4DCE60]
	jz loc_496143
	mov edi, dword [dword_4DCE5C]
	mov eax, dword [dword_4DCE5C]
	mov eax, [eax]
	mov dword [dword_4DCE5C], eax
	mov ebp, [edi+4]
	cmp dword [dword_4DCE64], 0
	jz loc_4960EF
	mov edx, dword [dword_4DCE64]
	mov eax, dword [dword_4DCE58]
	call sub_495500

loc_4960EF:
	mov dword [dword_4DCE64], edi
	mov eax, dword [dword_4DCE74]
	dec dword [dword_4DCE74]
	sub dword [dword_4DCE78], ebp
	mov eax, dword [dword_4DCE70]
	inc dword [dword_4DCE70]
	movsx eax, byte [byte_4DCEEA]
	mov edx, dword dword_4DCEF8[eax*4]
	dec dword dword_4DCEF8[eax*4]
	movsx eax, byte [byte_4DCEEA]
	cmp dword dword_4DCEF8[eax*4], 0
	jle loc_4961D0

loc_49613B:
	xor ah, ah
	mov byte [byte_4DCEE9], ah

loc_496143:
	mov eax, dword [dword_4DCE5C]
	cmp eax, dword [dword_4DCE60]
	jnz loc_496234
	mov eax, dword [dword_4DCE5C]
	cmp dword [eax], 0FFFFFFFFh
	jz loc_496210
	mov eax, dword [dword_4DCE5C]
	add eax, 0Ch
	mov [ebx], eax
	mov eax, dword [dword_4DCE5C]
	mov eax, [eax+8]
	mov [ecx], eax
	cmp byte [byte_4DCEE9], 1
	jnz loc_496198
	movsx edi, byte [byte_4DCEDD]
	mov edx, [ecx]
	mov eax, [ebx]
	mov ebx, edi
	call sub_4896E0
	mov byte [byte_4DCEE9], 2

loc_496198:
	cmp byte [byte_4DCEE9], 0
	jnz loc_4961A8
	mov byte [byte_4DCEE9], 1

loc_4961A8:
	cmp byte [byte_4DCEE9], 2
	jnz loc_4961B6
	mov esi, 1

loc_4961B6:
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4961BE:
	cmp byte [byte_4DCEE9], 1
	jz loc_4960B0
	jmp loc_496143

loc_4961D0:
	mov al, byte [byte_4DCEE6]
	dec byte [byte_4DCEE6]
	mov al, byte [byte_4DCEEA]
	cmp al, byte [byte_4DCEEB]
	jz loc_49613B
	mov al, byte [byte_4DCEEA]
	inc byte [byte_4DCEEA]
	cmp byte [byte_4DCEEA], 14h
	jl loc_49613B
	xor al, al
	mov byte [byte_4DCEEA], al
	jmp loc_49613B

loc_496210:
	mov edx, dword [dword_4DCE5C]
	mov eax, dword [dword_4DCE58]
	call sub_495500
	mov dword [ebx], 0
	mov dword [ecx], 0
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_496234:
	mov eax, dword [dword_4DCE5C]
	add eax, 0Ch
	mov [ebx], eax
	mov ebx, dword [dword_4DCE5C]
	lea eax, [ebx+8]
	mov eax, [eax]
	mov [ecx], eax
	mov eax, dword [dword_4DCE5C]
	mov eax, [eax]
	mov dword [dword_4DCE5C], eax
	mov ecx, [ebx+4]
	cmp dword [dword_4DCE64], 0
	jz loc_496273
	mov edx, dword [dword_4DCE64]
	mov eax, dword [dword_4DCE58]
	call sub_495500

loc_496273:
	mov dword [dword_4DCE64], ebx
	mov eax, dword [dword_4DCE74]
	dec dword [dword_4DCE74]
	sub dword [dword_4DCE78], ecx
	mov eax, dword [dword_4DCE70]
	inc dword [dword_4DCE70]
	movsx eax, byte [byte_4DCEEA]
	mov edx, dword dword_4DCEF8[eax*4]
	dec dword dword_4DCEF8[eax*4]
	movsx eax, byte [byte_4DCEEA]
	cmp dword dword_4DCEF8[eax*4], 0
	jg loc_4961B6
	mov al, byte [byte_4DCEE6]
	dec byte [byte_4DCEE6]
	mov al, byte [byte_4DCEEA]
	cmp al, byte [byte_4DCEEB]
	jz loc_4961B6
	mov al, byte [byte_4DCEEA]
	inc byte [byte_4DCEEA]
	cmp byte [byte_4DCEEA], 14h
	jl loc_4961B6
	xor cl, cl
	mov byte [byte_4DCEEA], cl
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_496098 endp

off_496304: dd loc_49633E
	dd loc_496349 ; jump table for switch statement
	dd loc_4964A0
	dd loc_4965FA

sub_496314: ;SUBROUTINE
	push ebp
	push ecx
	push ebx
	call sub_4A5360
	mov al, byte [byte_4DCED9]
	cmp al, 3
	ja loc_49633E ; jumptable 00496337 case 0
	and eax, 0FFh ; switch 4 cases
	jmp off_496304[eax*4] ; switch jump

loc_49633E:
	call sub_4A5374 ; jumptable 00496337 case 0
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_496349:
	xor ecx, ecx ; jumptable 00496337 case 1

loc_49634B:
	cmp cl, byte [byte_4DCEDC]
	jnz loc_496360
	mov eax, dword [dword_4DCEEC]
	cmp eax, dword [dword_4DCEF0]
	jge loc_49633E ; jumptable 00496337 case 0

loc_496360:
	cmp cl, byte [byte_4DCEE7]
	jnz loc_49638E
	cmp dword [dword_4DCEF4], 0FFFFFFFFh
	jz loc_49633E ; jumptable 00496337 case 0
	mov eax, dword [dword_4DCE58]
	call sub_495514
	cmp eax, dword [dword_4DCEF4]
	jl loc_496416

loc_496387:
	mov byte [byte_4DCEE7], 0FFh

loc_49638E:
	mov eax, dword [dword_4DCE58]
	call sub_4953DC
	mov edx, eax
	test eax, eax
	jle loc_496433

loc_4963A2:
	mov eax, edx
	call sub_495D24
	test eax, eax
	jl loc_4963BC
	cmp eax, 3
	jnz loc_49646E
	inc dword [dword_4DCEEC]

loc_4963BC:
	test edx, edx
	jg loc_49634B
	cmp edx, 0FFFFFFF6h
	jle loc_49634B
	cmp byte [byte_4DCEDC], 0
	jz loc_49633E ; jumptable 00496337 case 0
	mov eax, dword [dword_4DCEEC]
	cmp eax, dword [dword_4DCEF0]
	jge loc_496406
	cmp dword [dword_4DCEEC], 0
	jnz loc_496489

loc_4963EC:
	cmp dword [dword_4DCEEC], 0
	jz loc_49633E ; jumptable 00496337 case 0
	call sub_49552C
	test eax, eax
	jz loc_49633E ; jumptable 00496337 case 0

loc_496406:
	call sub_496700
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_496416:
	mov eax, dword [dword_4DCE58]
	call sub_495584
	test eax, eax
	jnz loc_496387
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_496433:
	cmp eax, 0FFFFFFF6h
	jle loc_4963A2
	test eax, eax
	jz loc_4963BC
	cmp dword [dword_4DCEEC], 0
	jz loc_49633E ; jumptable 00496337 case 0
	cmp byte [byte_4DCEDC], 0
	jz loc_49633E ; jumptable 00496337 case 0
	call sub_496700
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_49646E:
	cmp eax, 1
	jnz loc_4963BC
	cmp byte [byte_4DCED9], 1
	jnz loc_49633E ; jumptable 00496337 case 0
	jmp loc_4963BC

loc_496489:
	mov eax, dword [dword_4DCE58]
	call sub_495584
	test eax, eax
	jnz loc_496406
	jmp loc_4963EC

loc_4964A0:
	xor ecx, ecx ; jumptable 00496337 case 2

loc_4964A2:
	cmp cl, byte [byte_4DCEE7]
	jnz loc_4964D0
	cmp dword [dword_4DCEF4], 0FFFFFFFFh
	jz loc_49633E ; jumptable 00496337 case 0
	mov eax, dword [dword_4DCE58]
	call sub_495514
	cmp eax, dword [dword_4DCEF4]
	jl loc_496538

loc_4964C9:
	mov byte [byte_4DCEE7], 0FFh

loc_4964D0:
	mov eax, dword [dword_4DCE58]
	call sub_4953DC
	mov edx, eax
	test eax, eax
	jle loc_496551

loc_4964E0:
	mov eax, edx
	call sub_495D24
	cmp eax, 1
	jnz loc_496556

loc_4964EC:
	cmp dword [dword_4DCF48], 0
	jz loc_49633E ; jumptable 00496337 case 0
	call sub_495C28
	cmp eax, dword [dword_4DCF48]
	jl loc_496569
	xor ebx, ebx
	mov dword [dword_4DCF48], ebx
	mov eax, 1
	call sub_4A50F8
	cmp dword [dword_4DCFE0], 0
	jz loc_49633E ; jumptable 00496337 case 0
	xor eax, eax
	call dword [dword_4DCFE0]
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_496538:
	mov eax, dword [dword_4DCE58]
	call sub_495584
	test eax, eax
	jnz loc_4964C9
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_496551:
	cmp eax, 0FFFFFFF6h
	jle loc_4964E0

loc_496556:
	test edx, edx
	jg loc_4964A2
	cmp edx, 0FFFFFFF6h
	jle loc_4964A2
	jmp loc_4964EC

loc_496569:
	mov eax, dword [dword_4DCE58]
	call sub_495584
	test eax, eax
	jz loc_4965BB
	xor eax, eax
	mov al, byte [byte_4DCEDB]
	call sub_488B30
	cmp eax, 1
	jg loc_49633E ; jumptable 00496337 case 0
	xor edx, edx
	mov dword [dword_4DCF48], edx
	xor eax, eax
	call sub_4A50F8
	cmp dword [dword_4DCFE0], 0
	jz loc_49633E ; jumptable 00496337 case 0
	xor eax, eax
	call dword [dword_4DCFE0]
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_4965BB:
	call sub_49552C
	test eax, eax
	jz loc_49633E ; jumptable 00496337 case 0
	xor ebp, ebp
	mov dword [dword_4DCF48], ebp
	mov eax, 1
	call sub_4A50F8
	cmp dword [dword_4DCFE0], 0
	jz loc_49633E ; jumptable 00496337 case 0
	xor eax, eax
	call dword [dword_4DCFE0]
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret

loc_4965FA:
	call sub_495BD8 ; jumptable 00496337 case 3
	test eax, eax
	jg loc_49633E ; jumptable 00496337 case 0
	mov eax, dword [dword_4DCE6C]
	call sub_489840
	mov eax, dword [dword_4DCE6C]
	call sub_486040
	test eax, eax
	jz loc_49633E ; jumptable 00496337 case 0
	mov al, byte [byte_4DCEE6]
	dec byte [byte_4DCEE6]
	call sub_495DEC
	mov dl, 1
	call sub_49664C
	mov byte [byte_4DCED9], dl
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop ebp
	ret
;sub_496314 endp

sub_49664C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, sub_496098
	mov ecx, sub_495990
	xor ebx, ebx
	mov dword [dword_4DCFDC], edx
	mov dword [dword_4DDA90], ecx
	mov dword [dword_4DCEEC], ebx
	mov dword [dword_4DCE70], ebx
	mov dword [dword_4DCE74], ebx
	mov dword [dword_4DCE78], ebx
	xor eax, eax
	mov dword [dword_4DCE5C], ebx
	xor edx, edx
	mov dword [dword_4DCE60], ebx
	mov ecx, 0FFFFFFFFh
	mov dword [dword_4DCE6C], ecx
	xor ah, bh
	mov byte [byte_4DCED9], ah
	xor dl, bl
	mov byte [byte_4DCEEA], dl
	xor dh, bh
	mov byte [byte_4DCEEB], dh
	movsx eax, byte [byte_4DCEEB]
	mov ebx, ecx
	mov dword dword_4DCEF8[eax*4], ecx
	mov byte [byte_4DCEDA], 1
	xor bh, ch
	mov byte [byte_4DCEE9], bh
	cmp byte [byte_4DCEE4], 0
	jz loc_4966E0
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4966E0:
	mov ebx, 1
	mov eax, sub_496314
	xor edx, edx
	mov ch, 1
	call sub_483DD0
	mov byte [byte_4DCEE4], ch
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49664C endp

sub_496700: ;SUBROUTINE
	sub esp, 10h
	mov eax, dword [dword_4DCE6C]
	call sub_486040
	test eax, eax
	jnz loc_49671A
	mov eax, 0FFFFFFFFh
	add esp, 10h
	ret

loc_49671A:
	push edx
	lea eax, [esp+4]
	call sub_485380
	mov al, byte [byte_4DCEDE]
	mov [esp+0Ch], al
	mov al, byte [byte_4DCEDF]
	mov [esp+0Bh], al
	mov al, byte [byte_4DCEE0]
	mov [esp+0Dh], al
	mov al, byte [byte_4DCEE1]
	lea edx, [esp+4]
	mov [esp+0Eh], al
	mov eax, dword_4DCE7C
	call sub_4A5000
	mov dword [dword_4DCE6C], eax
	cmp dword [dword_4DCE6C], 0
	jl loc_4967BF
	push ebx
	mov eax, dword [dword_4DCE6C]
	call sub_4A576C
	mov byte [byte_4DCEDD], al
	movsx edx, byte [byte_4DCEDD]
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 5
	mov al, byte byte_59BFBB[eax]
	mov byte [byte_4DCEDB], al
	mov byte [byte_4DCED9], 2
	xor dl, dl
	mov byte [byte_4DCED8], dl
	xor ebx, ebx
	mov word [word_4DCEE2], bx
	mov eax, sub_495CAC
	call sub_4A5060
	pop ebx
	mov eax, dword [dword_4DCE6C]
	pop edx
	add esp, 10h
	ret

loc_4967BF:
	mov ax, word [word_4DCEE2]
	inc word [word_4DCEE2]
	mov eax, dword [dword_4DCE6C]
	pop edx
	add esp, 10h
	ret
;sub_496700 endp

sub_4967E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov edi, [esp+38h]
	mov [esp], eax
	mov [esp+4], edx
	mov [esp+8], ebx
	mov [esp+0Ch], ecx
	lea ecx, [esp+0Ch]
	lea ebx, [esp+8]
	lea edx, [esp+4]
	mov eax, esp
	mov ebp, 7D0h
	call sub_4AD690
	test eax, eax
	jz loc_4968AD
	mov edx, [esp+8]
	sub edx, [esp]
	test edx, edx
	jl loc_4968B6
	mov eax, edx

loc_49682A:
	mov esi, [esp+4]
	mov ebx, eax
	mov eax, [esp+0Ch]
	sub eax, esi
	test eax, eax
	jl loc_4968BF
	mov ecx, eax

loc_496840:
	cmp ebx, ecx
	jle loc_4969E4
	test edx, edx
	jl loc_4968C8

loc_496850:
	mov eax, [esp+8]
	sub eax, [esp]
	test eax, eax
	jl loc_4968EB

loc_49685F:
	mov ecx, [esp+0Ch]
	mov [esp+24h], eax
	sub ecx, [esp+4]
	test ecx, ecx
	jl loc_4968F2
	mov eax, ecx

loc_496875:
	mov [esp+18h], eax
	mov eax, [esp+24h]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	test ecx, ecx
	jl loc_4968FB
	mov eax, 1

loc_496891:
	mov bl, byte [byte_4DB25C]
	mov [esp+14h], eax
	cmp bl, 8
	jnz loc_496947

loc_4968A4:
	mov eax, [esp]
	cmp eax, [esp+8]
	jle loc_496902

loc_4968AD:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4968B6:
	mov eax, edx
	neg eax
	jmp loc_49682A

loc_4968BF:
	mov ecx, eax
	neg ecx
	jmp loc_496840

loc_4968C8:
	mov eax, [esp+8]
	mov edx, [esp]
	mov [esp], eax
	mov [esp+8], edx
	mov eax, [esp+0Ch]
	mov edx, [esp+4]
	mov [esp+4], eax
	mov [esp+0Ch], edx
	jmp loc_496850

loc_4968EB:
	neg eax
	jmp loc_49685F

loc_4968F2:
	mov eax, ecx
	neg eax
	jmp loc_496875

loc_4968FB:
	mov eax, 0FFFFFFFFh
	jmp loc_496891

loc_496902:
	mov edx, [esp+4]
	mov ebx, edi
	mov ecx, dword [dword_4DB26C]
	add eax, [ecx+edx*4]
	add eax, dword [dword_4DB260]
	mov [eax], bl
	mov eax, [esp]
	mov edx, [esp+18h]
	inc eax
	sub esi, edx
	mov [esp], eax
	test esi, esi
	jge loc_4968A4
	mov eax, [esp+14h]
	mov ebx, [esp+4]
	mov ecx, [esp+24h]
	add ebx, eax
	add esi, ecx
	mov [esp+4], ebx
	jmp loc_4968A4

loc_496947:
	cmp bl, 0Fh
	jnz loc_496999

loc_49694C:
	mov eax, [esp]
	cmp eax, [esp+8]
	jg loc_4968AD
	mov edx, [esp+4]
	mov ebx, edi
	mov ecx, dword [dword_4DB26C]
	mov edx, [ecx+edx*4]
	add edx, dword [dword_4DB260]
	mov [edx+eax*2], bx
	mov eax, [esp]
	mov edx, [esp+18h]
	inc eax
	sub esi, edx
	mov [esp], eax
	test esi, esi
	jge loc_49694C
	mov eax, [esp+14h]
	mov ebx, [esp+4]
	mov ecx, [esp+24h]
	add ebx, eax
	add esi, ecx
	mov [esp+4], ebx
	jmp loc_49694C

loc_496999:
	cmp bl, 10h
	jz loc_49694C

loc_49699E:
	mov eax, [esp]
	cmp eax, [esp+8]
	jg loc_4968AD
	dec ebp
	jz loc_4968AD
	mov edx, [esp+4]
	mov ebx, edi
	call sub_4AD870
	mov ebx, [esp]
	mov eax, [esp+18h]
	inc ebx
	sub esi, eax
	mov [esp], ebx
	test esi, esi
	jge loc_49699E
	mov eax, [esp+14h]
	mov ebx, [esp+4]
	mov edx, [esp+24h]
	add ebx, eax
	add esi, edx
	mov [esp+4], ebx
	jmp loc_49699E

loc_4969E4:
	test eax, eax
	jl loc_496A8D

loc_4969EC:
	mov ecx, [esp+8]
	sub ecx, [esp]
	test ecx, ecx
	jl loc_496AB0
	mov eax, ecx

loc_4969FD:
	mov edx, [esp+0Ch]
	sub edx, [esp+4]
	mov [esp+20h], eax
	test edx, edx
	jl loc_496AB9

loc_496A11:
	mov [esp+1Ch], edx
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov esi, eax
	test ecx, ecx
	jl loc_496AC0
	mov eax, 1

loc_496A2D:
	mov [esp+10h], eax
	mov ah, byte [byte_4DB25C]
	cmp ah, 8
	jnz loc_496ACA

loc_496A40:
	mov eax, [esp+4]
	cmp eax, [esp+0Ch]
	jg loc_4968AD
	mov ebx, edi
	mov edx, eax
	mov eax, [esp]
	mov ecx, dword [dword_4DB26C]
	add eax, [ecx+edx*4]
	add eax, dword [dword_4DB260]
	mov [eax], bl
	mov eax, [esp+4]
	mov edx, [esp+20h]
	inc eax
	sub esi, edx
	mov [esp+4], eax
	test esi, esi
	jge loc_496A40
	mov eax, [esp+10h]
	mov ebx, [esp]
	mov ecx, [esp+1Ch]
	add ebx, eax
	add esi, ecx
	mov [esp], ebx
	jmp loc_496A40

loc_496A8D:
	mov eax, [esp+0Ch]
	mov edx, [esp+4]
	mov [esp+4], eax
	mov [esp+0Ch], edx
	mov eax, [esp+8]
	mov edx, [esp]
	mov [esp], eax
	mov [esp+8], edx
	jmp loc_4969EC

loc_496AB0:
	mov eax, ecx
	neg eax
	jmp loc_4969FD

loc_496AB9:
	neg edx
	jmp loc_496A11

loc_496AC0:
	mov eax, 0FFFFFFFFh
	jmp loc_496A2D

loc_496ACA:
	cmp ah, 0Fh
	jnz loc_496B1E

loc_496ACF:
	mov eax, [esp+4]
	cmp eax, [esp+0Ch]
	jg loc_4968AD
	mov ebx, edi
	mov edx, eax
	mov eax, [esp]
	mov ecx, dword [dword_4DB26C]
	mov edx, [ecx+edx*4]
	add edx, dword [dword_4DB260]
	mov [edx+eax*2], bx
	mov eax, [esp+4]
	mov edx, [esp+20h]
	inc eax
	sub esi, edx
	mov [esp+4], eax
	test esi, esi
	jge loc_496ACF
	mov eax, [esp+10h]
	mov ebx, [esp]
	mov ecx, [esp+1Ch]
	add ebx, eax
	add esi, ecx
	mov [esp], ebx
	jmp loc_496ACF

loc_496B1E:
	cmp ah, 10h
	jz loc_496ACF

loc_496B23:
	mov eax, [esp+4]
	cmp eax, [esp+0Ch]
	jg loc_4968AD
	dec ebp
	jz loc_4968AD
	mov ebx, edi
	mov edx, eax
	mov eax, [esp]
	call sub_4AD870
	mov ebx, [esp+4]
	mov eax, [esp+20h]
	inc ebx
	sub esi, eax
	mov [esp+4], ebx
	test esi, esi
	jge loc_496B23
	mov eax, [esp+10h]
	mov ebx, [esp]
	mov edx, [esp+1Ch]
	add ebx, eax
	add esi, edx
	mov [esp], ebx
	jmp loc_496B23
;sub_4967E0 endp

;	Attributes: library function

strtok_: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 20h
	mov ebx, eax
	test eax, eax
	jnz loc_496B8A
	call dword [off_4DED58]
	mov ebx, [eax+10h]
	test ebx, ebx
	jnz loc_496B8A

loc_496B83:
	xor eax, eax
	jmp loc_496C09

loc_496B8A:
	mov eax, esp
	call __setbits_
	jmp loc_496BB2

loc_496B93:
	mov eax, edx
	shr eax, 3
	xor ecx, ecx
	mov cl, [esp+eax]
	mov eax, edx
	and eax, 7
	mov al, byte byte_4D1FA4[eax]
	and eax, 0FFh
	test ecx, eax
	jz loc_496BBA
	inc ebx

loc_496BB2:
	xor edx, edx
	mov dl, [ebx]
	test edx, edx
	jnz loc_496B93

loc_496BBA:
	test edx, edx
	jz loc_496B83
	mov edx, ebx
	jmp loc_496BF2

loc_496BC2:
	mov ecx, eax
	shr ecx, 3
	mov cl, [esp+ecx]
	and eax, 7
	and ecx, 0FFh
	mov al, byte byte_4D1FA4[eax]
	and eax, 0FFh
	test ecx, eax
	jz loc_496BF1
	mov byte [edx], 0
	inc edx
	call dword [off_4DED58]
	mov [eax+10h], edx
	jmp loc_496C07

loc_496BF1:
	inc edx

loc_496BF2:
	xor eax, eax
	mov al, [edx]
	test eax, eax
	jnz loc_496BC2
	call dword [off_4DED58]
	mov dword [eax+10h], 0

loc_496C07:
	mov eax, ebx

loc_496C09:
	add esp, 20h
	pop ecx
	pop ebx
	ret
;strtok_ endp

;	Attributes: library function bp-based frame

floor_: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push edx
	sub esp, 8
	lea eax, [ebp-14h]
	push eax
	mov edx, [ebp+0Ch]
	push edx
	mov ebx, [ebp+8]
	push ebx
	call modf_
	fldz
	fcompp
	fnstsw ax
	sahf
	jbe loc_496C3E
	fld qword [ebp-14h]
	fadd qword [dbl_4D07E8]
	fstp qword [ebp-14h]

loc_496C3E:
	fld qword [ebp-14h]
	lea esp, [ebp-0Ch]
	pop edx
	pop ebx
	pop eax
	pop ebp
	ret 8
;floor_ endp

;	Attributes: library function bp-based frame

ceil_: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	fld qword [ebp+8]
	sub esp, 8
	fchs
	fstp qword [esp]
	call floor_
	fchs
	pop eax
	pop ebp
	ret 8
;ceil_ endp

sub_497220: ;SUBROUTINE
	mov ecx, [esp+4]
	mov edx, dword [dword_56EEA4]
	xor eax, eax
	cmp ecx, edx
	jl loc_497233
	ret 4

loc_497233:
	push ecx
	call grSstSelect
	mov eax, 1
	ret 4
;sub_497220 endp

sub_497244: ;SUBROUTINE
	sub esp, 4
	xor ecx, ecx
	xor eax, eax
	xor edx, edx

loc_49724D:
	mov [esp], eax
	add edx, 4
	fild dword [esp]
	inc eax
	fstp dword flt_56E9DC[edx]
	cmp eax, 100h
	jl loc_49724D
	jmp loc_497273

loc_49726D:
	mov eax, ecx
	add esp, 4
	ret

loc_497273:
	call grGlideInit
	push dword_56EEA4
	call grSstQueryHardware
	mov ecx, eax
	test eax, eax
	jz loc_49726D
	push 0
	call sub_497220
	mov ecx, eax
	test eax, eax
	jz loc_49726D
	mov ecx, dword [dword_56EEA4]
	test ecx, ecx
	jz loc_49726D
	mov edx, 1
	mov eax, sub_4972BC
	mov dword [dword_4DCFE4], edx
	call atexit_
	mov eax, ecx
	add esp, 4
	ret
;sub_497244 endp

sub_4972BC: ;SUBROUTINE
	push ebx
	mov edx, dword [dword_4DCFE4]
	mov ebx, 1
	test edx, edx
	jnz loc_4972D0
	mov eax, ebx
	pop ebx
	ret

loc_4972D0:
	call grGlideShutdown
	mov dword [dword_4DCFE4], 0
	mov eax, ebx
	pop ebx
	ret
;sub_4972BC endp

sub_4972FC: ;SUBROUTINE
	test byte [dword_4DCFE4], 2
	jnz loc_497306
	ret

loc_497306:
	push edx
	push ecx
	call grSstWinClose
	and byte [dword_4DCFE4], 0FDh
	pop ecx
	pop edx
	ret
;sub_4972FC endp

sub_497318: ;SUBROUTINE
	push ebx
	mov edx, [esp+10h]
	call sub_4972FC
	push edx
	mov ecx, [esp+10h]
	push ecx
	push 0
	push 0
	mov edx, [esp+18h]
	xor eax, eax
	push 0
	mov al, byte byte_4DD000[edx]
	push eax
	call getHwnd
	push eax
	call grSstWinOpen
	mov ebx, eax
	test eax, eax
	jnz loc_497353
	mov eax, ebx
	pop ebx
	ret 0Ch

loc_497353:
	push esi
	call sub_4975B0
	push 1
	push 0
	call grTexCombineFunction
	push 0
	call grChromakeyValue
	push 10h
	call grAlphaTestReferenceValue
	push 1
	push 1
	push 0
	call grTexFilterMode
	push 0
	push 0
	push 0
	call grTexMipMapMode
	push 0
	push 0
	push 0
	push 1
	push 0
	push 1
	push 0
	call grTexCombine
	push 0
	push 2
	push 0
	push 0
	push 1
	call grColorCombine
	push 0
	push 2
	push 0
	push 0
	push 1
	call grAlphaCombine
	push 0
	push 0
	push 5
	push 1
	call grAlphaBlendFunction
	push 0
	push 1
	call sub_497738
	push 1
	push 2
	call sub_497738
	push 1
	push 3
	call sub_497738
	push 1
	push 7
	call sub_497738
	push 2
	push 8
	call sub_497738
	push 0
	push 9
	call sub_497738
	push 0
	push 4
	call sub_497738
	push 1
	push 6
	mov esi, [esp+1Ch]
	call sub_497738
	test esi, esi
	jz loc_497460
	mov eax, 2

loc_497422:
	push eax
	push 0Ah
	call sub_497738
	push 0
	push 0Dh
	call sub_497738
	push 0FFFFFFFFh
	push 0Eh
	call sub_497738
	push 0
	push 0Fh
	call sub_497738
	mov edx, 3F800000h
	push edx
	push 65h
	call sub_497738
	or byte [dword_4DCFE4], 2
	pop esi
	mov eax, ebx
	pop ebx
	ret 0Ch

loc_497460:
	xor eax, eax
	jmp loc_497422
;sub_497318 endp

sub_497464: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov edi, [esp+14h]
	mov ebp, [esp+18h]
	xor esi, esi
	cmp edi, ebp
	jle loc_4974D9
	mov eax, edi

loc_497478:
	call sub_4AD9F0
	mov ebx, eax
	mov eax, edi
	call sub_4AD9F0
	mov edi, eax
	mov eax, ebp
	mov edx, [esp+1Ch]
	call sub_4AD9F0
	sub edi, eax
	xor eax, eax
	mov al, byte byte_4DD01D[edx]
	push eax
	movzx ebp, byte byte_4DD019[edi]
	xor eax, eax
	push ebp
	mov al, byte byte_4DD00D[ebx]
	mov edx, [esp+2Ch]
	push eax
	sub eax, edx
	push eax
	call grTexCalcMemRequired
	push 0
	mov edi, eax
	call grTexMaxAddress
	sub eax, dword [dword_56EF38]
	cmp eax, edi
	ja loc_4974DD

loc_4974D0:
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret 14h

loc_4974D9:
	mov eax, ebp
	jmp loc_497478

loc_4974DD:
	mov eax, 20h
	call malloc_
	mov esi, eax
	test eax, eax
	jz loc_4974D0
	xor edx, edx
	mov ecx, [esp+24h]
	mov dl, byte byte_4DD00D[ebx]
	sub edx, ecx
	mov [eax], edx
	mov bl, byte byte_4DD00D[ebx]
	and ebx, 0FFh
	mov [eax+8], ebp
	mov edx, [esp+1Ch]
	mov [eax+4], ebx
	xor ebx, ebx
	mov bl, byte byte_4DD01D[edx]
	mov dword [eax+10h], 0
	mov [eax+0Ch], ebx
	mov ebx, dword [dword_56EF38]
	mov [eax+14h], ebx
	mov ebx, dword [dword_4DCFF8]
	mov [eax+1Ch], ebx
	mov ebx, dword [dword_56EF38]
	mov dword [eax+18h], 3
	add ebx, edi
	mov dword [dword_4DCFF8], eax
	mov dword [dword_56EF38], ebx
	mov eax, esi
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret 14h
;sub_497464 endp

sub_49755C: ;SUBROUTINE
	push ebx
	push esi
	mov ebx, [esp+0Ch]
	mov eax, [esp+10h]
	test eax, eax
	jnz loc_497579
	mov esi, [esp+14h]
	test esi, esi
	jnz loc_49759C
	mov eax, ebx
	pop esi
	pop ebx
	ret 0Ch

loc_497579:
	push ebx
	mov edx, [ebx+18h]
	push edx
	mov ecx, [ebx+14h]
	push ecx
	push 0
	mov [ebx+10h], eax
	call grTexDownloadMipMap
	mov esi, [esp+14h]
	test esi, esi
	jnz loc_49759C
	mov eax, ebx
	pop esi
	pop ebx
	ret 0Ch

loc_49759C:
	push esi
	push 2
	push 0
	call grTexDownloadTable
	mov eax, ebx
	pop esi
	pop ebx
	ret 0Ch
;sub_49755C endp

sub_4975B0: ;SUBROUTINE
	push 0
	call grTexMinAddress
	mov edx, dword [dword_4DCFF8]
	mov dword [dword_56EF38], eax
	test edx, edx
	jz sub_4975E0

loc_4975C7:
	mov eax, dword [dword_4DCFF8]
	mov edx, [eax+1Ch]
	call free_
	mov dword [dword_4DCFF8], edx
	test edx, edx
	jnz loc_4975C7
	jmp sub_4975E0
;sub_4975B0 endp

sub_4975E0: ;SUBROUTINE
	mov eax, 1
	ret
;sub_4975E0 endp

sub_4975E8: ;SUBROUTINE
	push ebx
	push esi
	push ebp
	mov eax, [esp+10h]
	test eax, eax
	jnz loc_497607
	cmp dword [dword_4DD028], 0
	jnz loc_49764E

loc_4975FC:
	mov eax, 1
	pop ebp
	pop esi
	pop ebx
	ret 4

loc_497607:
	push eax
	mov ebx, [eax+18h]
	push ebx
	mov esi, [eax+14h]
	push esi
	push 0
	call grTexSource
	cmp dword [dword_4DD028], 1
	jz loc_4975FC
	push 0
	push 1
	push 0
	push 1
	push 3
	call grColorCombine
	push 0
	push 1
	push 0
	push 1
	push 3
	mov ebp, 1
	call grAlphaCombine
	mov dword [dword_4DD028], ebp
	jmp loc_4975FC

loc_49764E:
	push eax
	push 2
	push eax
	push eax
	push 1
	call grColorCombine
	push 0
	push 2
	push 0
	push 0
	push 1
	call grAlphaCombine
	xor ecx, ecx
	mov dword [dword_4DD028], ecx
	mov eax, 1
	pop ebp
	pop esi
	pop ebx
	ret 4
;sub_4975E8 endp

sub_497680: ;SUBROUTINE
	mov eax, [esp+4]
	dec eax
	push eax
	mov dword [dword_4DCFF0], eax
	call grRenderBuffer
	mov eax, 1
	ret 4
;sub_497680 endp

sub_49769C: ;SUBROUTINE
	xor eax, eax
	mov ax, word [dword_4DCFEC]
	push eax
	push 0
	mov edx, dword [dword_4DCFE8]
	push edx
	call grBufferClear
	ret
;sub_49769C endp

sub_4976B8: ;SUBROUTINE
	mov edx, dword [dword_4DCFF4]
	push edx
	call grBufferSwap
	ret
;sub_4976B8 endp

sub_4976C8: ;SUBROUTINE
	push ebx
	mov eax, [esp+8]
	xor ebx, ebx
	cmp eax, 1
	jb loc_4976FB
	jbe loc_497703
	cmp eax, 2
	jnz loc_4976FB
	call grSstStatus
	mov ebx, eax
	shr ebx, 0Ch
	mov eax, 0FFFFh
	and ebx, 0FFFFh
	sub eax, ebx
	mov ebx, eax

loc_4976F5:
	mov eax, ebx
	pop ebx
	ret 4

loc_4976FB:
	call grSstIdle
	jmp loc_4976F5

loc_497703:
	call grSstIsBusy
	mov ebx, eax
	mov eax, ebx
	pop ebx
	ret 4
;sub_4976C8 endp

sub_497714: ;SUBROUTINE
	push ebx
	push esi
	mov edx, [esp+18h]
	push edx
	mov ecx, [esp+18h]
	push ecx
	mov ebx, [esp+18h]
	push ebx
	mov esi, [esp+18h]
	push esi
	call grClipWindow
	pop esi
	pop ebx
	ret 10h
;sub_497714 endp

sub_497738: ;SUBROUTINE
	push ebx
	push esi
	sub esp, 48h
	mov edx, [esp+54h]
	xor eax, eax
	cmp edx, 9
	jnb loc_49776D
	cmp edx, 4
	jnb loc_497839
	cmp edx, 2
	jnb loc_4978A9
	cmp edx, 1
	jz loc_4978C3

loc_497763:
	xor eax, eax

loc_497765:
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49776D:
	jbe loc_497763
	cmp edx, 0Fh
	jnb loc_4977A1
	cmp edx, 0Dh
	jnb loc_49780D
	cmp edx, 0Ah
	jnz loc_497763
	mov esi, [esp+58h]
	cmp esi, 1
	jnb loc_497925
	test esi, esi
	jz loc_49795E
	xor eax, eax
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4977A1:
	ja loc_4977C7
	cmp dword [esp+58h], 0
	jnz loc_4977AF
	mov eax, 1

loc_4977AF:
	push eax
	push 1
	push 0
	call grTexClampMode
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4977C7:
	cmp edx, 66h
	jnb loc_4977E8
	cmp edx, 65h
	jnz loc_497763
	push dword [esp+58h]
	call grGammaCorrectionValue
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4977E8:
	jbe loc_4979EC
	cmp edx, 67h
	jnz loc_497763
	mov eax, [esp+58h]
	mov dword [dword_4DCFF4], eax
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49780D:
	ja loc_4979C0
	cmp dword [esp+58h], 0
	jz loc_4979D8
	push 2
	call grFogMode
	mov eax, esp
	push eax
	call grFogTable
	xor eax, eax
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_497839:
	jbe loc_4979AA
	cmp edx, 7
	jnb loc_49786D
	cmp edx, 6
	jnz loc_497763
	cmp dword [esp+58h], 0
	jz loc_497859
	mov eax, 2

loc_497859:
	push eax
	call grDitherMode
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49786D:
	jbe loc_497763
	mov ebx, [esp+58h]
	test ebx, ebx
	jz loc_4978F0
	cmp ebx, 1
	jz loc_49790C
	cmp ebx, 2
	jnz loc_497765
	push eax
	call grChromakeyMode
	push 4
	call grAlphaTestFunction
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4978A9:
	ja loc_4978D5
	mov ecx, [esp+58h]
	push ecx
	call grCullMode
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4978C3:
	mov ebx, [esp+58h]
	push ebx
	call sub_4975E8
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4978D5:
	mov eax, [esp+58h]
	push eax
	push eax
	push 0
	call grTexFilterMode
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4978F0:
	push eax
	call grChromakeyMode
	push 7
	call grAlphaTestFunction
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49790C:
	push ebx
	call grChromakeyMode
	push 4
	call grAlphaTestFunction
	mov eax, ebx
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_497925:
	jbe loc_49797A
	cmp esi, 2
	jnz loc_497763
	push esi
	call grDepthBufferMode
	push 3
	call grDepthBufferFunction
	mov eax, 0FFFFh
	push 1
	mov dword [dword_4DCFEC], eax
	call grDepthMask
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49795E:
	push 7
	call grDepthBufferFunction
	push esi
	call grDepthMask
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_49797A:
	push 1
	call grDepthBufferMode
	push 3
	call grDepthBufferFunction
	mov edx, 0FFFFh
	push 1
	mov dword [dword_4DCFEC], edx
	call grDepthMask
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4979AA:
	mov eax, [esp+58h]
	mov dword [dword_4DCFE8], eax
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4979C0:
	mov ecx, [esp+58h]
	push ecx
	call grFogColorValue
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4979D8:
	push eax
	call grFogMode
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8

loc_4979EC:
	fld dword [esp+58h]
	call __CHP
	fistp dword [esp+40h]
	mov eax, [esp+40h]
	mov [esp+44h], ax
	mov eax, [esp+42h]
	sar eax, 10h
	push eax
	call grDepthBiasLevel
	mov eax, 1
	add esp, 48h
	pop esi
	pop ebx
	ret 8
;sub_497738 endp

sub_497A20: ;SUBROUTINE
	push ebx
	sub esp, 14h
	mov eax, esp
	push eax
	xor ebx, ebx
	push ebx
	push ebx
	push ebx
	mov ecx, dword [dword_4DCFF0]
	push ecx
	mov edx, 14h
	push 1
	mov [esp+18h], edx
	call grLfbLock
	test eax, eax
	jnz loc_497A4F

loc_497A48:
	mov eax, ebx
	add esp, 14h
	pop ebx
	ret

loc_497A4F:
	mov eax, 10h
	call malloc_
	mov edx, eax
	mov ebx, eax
	test eax, eax
	jz loc_497A48
	mov eax, [esp+4]
	mov [edx], eax
	mov eax, [esp+8]
	mov dword [edx+8], 0Ah
	mov [edx+4], eax
	mov eax, dword [dword_4DCFF0]
	mov [edx+0Ch], eax
	mov eax, ebx
	add esp, 14h
	pop ebx
	ret
;sub_497A20 endp

sub_497A84: ;SUBROUTINE
	push ebx
	push esi
	mov esi, [esp+0Ch]
	mov ebx, 1
	test esi, esi
	jnz loc_497A9A
	mov eax, ebx
	pop esi
	pop ebx
	ret 4

loc_497A9A:
	mov eax, [esi+0Ch]
	push eax
	push ebx
	call grLfbUnlock
	mov eax, esi
	call free_
	mov eax, ebx
	pop esi
	pop ebx
	ret 4
;sub_497A84 endp

sub_497B24: ;SUBROUTINE
	push ebx
	sub esp, 0F0h
	mov edx, [esp+0F8h]
	lea eax, [esp+0B4h]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+0FCh]
	lea eax, [esp+78h]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+100h]
	mov eax, esp
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+104h]
	lea eax, [esp+3Ch]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov eax, esp
	push eax
	lea eax, [esp+7Ch]
	push eax
	lea eax, [esp+0BCh]
	push eax
	call grDrawTriangle
	lea eax, [esp+3Ch]
	push eax
	lea eax, [esp+4]
	push eax
	lea eax, [esp+0BCh]
	push eax
	call grDrawTriangle
	add esp, 0F0h
	pop ebx
	ret 10h
;sub_497B24 endp

sub_497D6C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 0F0h
	mov ebp, [esp+104h]
	mov edi, [esp+108h]
	mov esi, [esp+10Ch]
	test ebp, ebp
	jle loc_497FD8

loc_497D93:
	mov edx, [esi+4]
	shl edx, 5
	lea eax, [esp+3Ch]
	add edx, edi
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esi+8]
	shl edx, 5
	lea eax, [esp+78h]
	add edx, edi
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esi+0Ch]
	shl edx, 5
	lea eax, [esp+0B4h]
	add edx, edi
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esi]
	shl edx, 5
	mov eax, esp
	add edx, edi
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	lea eax, [esp+78h]
	push eax
	lea eax, [esp+40h]
	push eax
	lea eax, [esp+8]
	push eax
	call grDrawTriangle
	lea eax, [esp+0B4h]
	push eax
	lea eax, [esp+7Ch]
	push eax
	lea eax, [esp+8]
	push eax
	add esi, 10h
	call grDrawTriangle
	dec ebp
	jnz loc_497D93

loc_497FD8:
	add esp, 0F0h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret 0Ch
;sub_497D6C endp

sub_4983B0: ;SUBROUTINE
	push ebx
	sub esp, 0B4h
	mov edx, [esp+0BCh]
	lea eax, [esp+78h]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+0C0h]
	mov eax, esp
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+0C4h]
	lea eax, [esp+3Ch]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	lea eax, [esp+3Ch]
	push eax
	lea eax, [esp+4]
	push eax
	lea eax, [esp+80h]
	push eax
	call grDrawTriangle
	add esp, 0B4h
	pop ebx
	ret 0Ch
;sub_4983B0 endp

sub_498EE0: ;SUBROUTINE
	push ebx
	sub esp, 78h
	mov edx, [esp+84h]
	mov eax, esp
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov edx, [esp+80h]
	lea eax, [esp+3Ch]
	fld dword [edx+8]
	fmul dword [flt_4DD030]
	fld dword [edx+0Ch]
	fmul dword [flt_4DD02C]
	fld dword [edx]
	fadd dword [flt_4DD034]
	fld dword [edx+4]
	fadd dword [flt_4DD034]
	fxch st1
	fstp dword [eax]
	fstp dword [eax+4]
	mov ecx, [edx+0Ch]
	mov [eax+20h], ecx
	fld dword [edx+18h]
	fmul st0, st1
	xor ebx, ebx
	mov bl, [edx+13h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+1Ch], ecx
	mov bl, [edx+12h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+0Ch], ecx
	fstp dword [eax+24h]
	fmul dword [edx+1Ch]
	mov bl, [edx+11h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+10h], ecx
	mov bl, [edx+10h]
	mov ecx, dword dword_56E9E0[ebx*4]
	mov [eax+14h], ecx
	fstp dword [eax+28h]
	fstp dword [eax+18h]
	mov eax, esp
	push eax
	lea eax, [esp+40h]
	push eax
	call grDrawLine
	add esp, 78h
	pop ebx
	ret 8
;sub_498EE0 endp

sub_499540: ;SUBROUTINE
	inc ebx
	sar ebx, 1
	jmp sub_48A980
;sub_499540 endp

sub_49954C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov esi, edx
	mov edi, ebx
	xor eax, eax
	test ebx, ebx
	jle loc_499588
	mov edx, ecx

loc_49955D:
	mov ecx, eax
	sar ecx, 1
	add ecx, esi
	test al, 1
	jz loc_49958C
	mov cl, [ecx]
	xor ebx, ebx
	and cl, 0Fh
	mov bl, cl
	xor ecx, ecx
	mov cl, [edx]
	shl ecx, 4

loc_499577:
	or ecx, ebx
	mov bl, cl
	mov ecx, eax
	inc edx
	sar ecx, 1
	inc eax
	mov [ecx+esi], bl
	cmp eax, edi
	jl loc_49955D

loc_499588:
	pop edi
	pop esi
	pop ecx
	ret

loc_49958C:
	mov bl, [ecx]
	and bl, 0F0h
	mov cl, [edx]
	and ebx, 0FFh
	and cl, 0Fh
	and ecx, 0FFh
	jmp loc_499577
;sub_49954C endp

sub_4995A4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, ebx
	xor eax, eax
	test ebx, ebx
	jle loc_4995CF

loc_4995B1:
	mov ecx, eax
	sar ecx, 1
	add ecx, edi
	test al, 1
	jz loc_4995D3
	mov cl, [ecx]
	and ecx, 0FFh
	sar ecx, 4
	inc edx
	inc eax
	mov [edx-1], cl
	cmp eax, esi
	jl loc_4995B1

loc_4995CF:
	pop edi
	pop esi
	pop ecx
	ret

loc_4995D3:
	mov cl, [ecx]
	and cl, 0Fh
	and ecx, 0FFh
	inc edx
	inc eax
	mov [edx-1], cl
	cmp eax, esi
	jl loc_4995B1
	pop edi
	pop esi
	pop ecx
	ret
;sub_4995A4 endp

sub_4995EC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov ecx, eax
	mov esi, ebx
	mov ebx, dword [dword_4DAC60]
	test ebx, ebx
	jnz loc_499664
	test esi, esi
	jle loc_49965C

loc_499605:
	mov ax, [ecx]
	and eax, 0FFFFh
	mov edi, eax
	sar edi, 0Bh
	and edi, 1Fh
	mov [esp+8], edi
	mov edi, eax
	sar edi, 5
	and edi, 3Fh
	and eax, 1Fh
	mov [esp+0Ch], edi
	mov edi, [esp+8]
	mov ebp, [esp+0Ch]
	shl edi, 13h
	shl ebp, 0Ah
	or edi, 0FF000000h
	shl eax, 3
	or edi, ebp
	inc edx
	or eax, edi
	add ecx, 2
	call sub_48266C
	mov [esp+0Ch], eax
	inc ebx
	mov al, [esp+0Ch]
	mov [edx-1], al
	cmp ebx, esi
	jl loc_499605

loc_49965C:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_499664:
	xor ebx, ebx
	test esi, esi
	jle loc_49965C

loc_49966A:
	mov ax, [ecx]
	and eax, 0FFFFh
	mov edi, eax
	sar edi, 0Bh
	and edi, 1Fh
	mov [esp], edi
	mov edi, eax
	sar edi, 5
	and eax, 1Fh
	and edi, 3Fh
	mov [esp+4], eax
	mov eax, [esp]
	sar edi, 1
	shl eax, 0Ah
	shl edi, 5
	or eax, edi
	or eax, [esp+4]
	mov edi, dword [dword_4DAC60]
	inc edx
	add ecx, 2
	mov al, [edi+eax]
	inc ebx
	mov [edx-1], al
	cmp ebx, esi
	jl loc_49966A
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4995EC endp

sub_4996BC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ecx, edx
	mov ebp, ebx
	xor edi, edi
	test ebx, ebx
	jle loc_4996E7

loc_4996CC:
	mov ebx, [esi]
	xor eax, eax
	cmp ebx, 40000000h
	jnb loc_4996EC

loc_4996D8:
	add ecx, 2
	add esi, 4
	inc edi
	mov [ecx-2], ax
	cmp edi, ebp
	jl loc_4996CC

loc_4996E7:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4996EC:
	or ebx, ebx
	jz loc_499715
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	lea ebx, [ebx+edx+8000h]

loc_499715:
	mov eax, ebx
	jmp loc_4996D8
;sub_4996BC endp

sub_49971C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov ebp, ebx
	xor edi, edi
	test ebx, ebx
	jle loc_499768

loc_49972C:
	mov ebx, [ecx]
	or ebx, ebx
	jz loc_499757
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	lea ebx, [ebx+edx+8000h]

loc_499757:
	add esi, 2
	add ecx, 4
	inc edi
	mov [esi-2], bx
	cmp edi, ebp
	jl loc_49972C

loc_499768:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49971C endp

sub_499770: ;SUBROUTINE
	add ebx, ebx
	jmp sub_48A980
;sub_499770 endp

sub_499778: ;SUBROUTINE
	push ecx
	push esi
	mov esi, ebx
	xor ecx, ecx
	test ebx, ebx
	jle loc_499794

loc_499782:
	add edx, 2
	mov bx, [eax]
	add eax, 4
	inc ecx
	mov [edx-2], bx
	cmp ecx, esi
	jl loc_499782

loc_499794:
	pop esi
	pop ecx
	ret
;sub_499778 endp

sub_499798: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ecx, edx
	mov ebp, ebx
	xor edi, edi
	test ebx, ebx
	jle loc_4997C3

loc_4997A8:
	mov ebx, [esi]
	xor eax, eax
	cmp ebx, 40000000h
	jnb loc_4997C8

loc_4997B4:
	add ecx, 2
	add esi, 4
	inc edi
	mov [ecx-2], ax
	cmp edi, ebp
	jl loc_4997A8

loc_4997C3:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4997C8:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov eax, ebx
	test bx, bx
	jnz loc_4997B4
	mov eax, 1
	jmp loc_4997B4
;sub_499798 endp

sub_4997F8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov ebp, ebx
	xor edi, edi
	test ebx, ebx
	jle loc_49983C

loc_499808:
	mov ebx, [ecx]
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	add esi, 2
	add ecx, 4
	inc edi
	mov [esi-2], bx
	cmp edi, ebp
	jl loc_499808

loc_49983C:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4997F8 endp

sub_499844: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 0Ch
	mov [esp+4], ebx
	xor ecx, ecx
	test ebx, ebx
	jle loc_4998A0

loc_499854:
	movzx esi, byte [eax+3]
	movzx edi, byte [eax+1]
	xor ebx, ebx
	sar esi, 4
	mov bl, [eax+2]
	sar edi, 4
	sar ebx, 4
	mov [esp+8], edi
	shl esi, 0Ch
	shl ebx, 8
	movzx edi, byte [eax]
	or ebx, esi
	mov esi, [esp+8]
	sar edi, 4
	shl esi, 4
	mov [esp], edi
	or ebx, esi
	mov esi, [esp]
	add eax, 4
	or esi, ebx
	inc ecx
	mov [edx], si
	mov esi, [esp+4]
	add edx, 2
	cmp ecx, esi
	jl loc_499854
	nop

loc_4998A0:
	add esp, 0Ch
	pop edi
	pop esi
	pop ecx
	ret
;sub_499844 endp

sub_4998A8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov edi, edx
	mov [esp], ebx
	xor ebp, ebp
	test ebx, ebx
	jle loc_4998F8

loc_4998BC:
	mov ecx, [esi]
	add esi, 4
	mov ebx, ecx
	and ecx, 0FF000000h
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	or ecx, ebx
	inc ebp
	mov [edi], ecx
	mov ecx, [esp]
	add edi, 4
	cmp ebp, ecx
	jl loc_4998BC

loc_4998F8:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4998A8 endp

sub_499900: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, dword [off_4DD044]
	mov ecx, eax
	mov edi, ebx
	xor esi, esi
	test ebx, ebx
	jle loc_49993C

loc_499914:
	xor eax, eax
	mov al, [ecx]
	lea ebx, 0[eax*4]
	lea eax, [ebx+ebp]
	mov bl, [eax+2]
	mov [edx+2], bl
	mov bl, [eax+1]
	inc ecx
	mov [edx+1], bl
	add edx, 3
	mov al, [eax]
	inc esi
	mov [edx-3], al
	cmp esi, edi
	jl loc_499914

loc_49993C:
	mov dword [off_4DD044], ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_499900 endp

sub_499948: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 0Ch
	mov ecx, eax
	mov edi, ebx
	xor ebx, ebx
	test edi, edi
	jle loc_4999A8

loc_499958:
	mov ax, [ecx]
	and eax, 0FFFFh
	mov esi, eax
	sar esi, 0Bh
	and esi, 1Fh
	shl esi, 3
	add edx, 3
	mov [esp], esi
	mov esi, eax
	and eax, 1Fh
	sar esi, 5
	shl eax, 3
	and esi, 3Fh
	mov [esp+8], eax
	shl esi, 2
	mov al, [esp+8]
	mov [esp+4], esi
	mov [edx-3], al
	mov al, [esp+4]
	add ecx, 2
	mov [edx-2], al
	mov al, [esp]
	inc ebx
	mov [edx-1], al
	cmp ebx, edi
	jl loc_499958

loc_4999A8:
	add esp, 0Ch
	pop edi
	pop esi
	pop ecx
	ret
;sub_499948 endp

sub_4999B0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	lea eax, 0[ebx*4]
	sub eax, ebx
	mov ebx, eax
	mov eax, ecx
	call sub_48A980
	pop ecx
	ret
;sub_4999B0 endp

sub_4999C8: ;SUBROUTINE
	push ecx
	push esi
	sub esp, 0Ch
	mov esi, ebx
	xor ecx, ecx
	test ebx, ebx
	jle loc_499A10

loc_4999D5:
	xor ebx, ebx
	mov bl, [eax+2]
	mov [esp], ebx
	xor ebx, ebx
	mov bl, [eax+1]
	mov [esp+4], ebx
	xor ebx, ebx
	mov bl, [eax]
	mov [esp+8], ebx
	add edx, 3
	mov bl, [esp+8]
	mov [edx-3], bl
	mov bl, [esp+4]
	add eax, 4
	mov [edx-2], bl
	mov bl, [esp]
	inc ecx
	mov [edx-1], bl
	cmp ecx, esi
	jl loc_4999D5

loc_499A10:
	add esp, 0Ch
	pop esi
	pop ecx
	ret
;sub_4999C8 endp

sub_499A18: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov [esp], ebx
	mov esi, [esp]
	xor ebx, ebx
	test esi, esi
	jle loc_499A75

loc_499A2D:
	mov ax, [ecx]
	mov ebp, dword [dword_4DD03C]
	and eax, 0FFFFh
	cmp eax, ebp
	jz loc_499A7D
	mov edi, eax
	mov esi, eax
	sar edi, 0Ah
	sar esi, 5
	and eax, 1Fh
	and edi, 1Fh
	and esi, 1Fh
	shl edi, 13h
	shl esi, 0Bh
	or edi, 0FF000000h
	shl eax, 3
	or esi, edi
	or esi, eax
	mov [edx], esi

loc_499A67:
	mov edi, [esp]
	add ecx, 2
	inc ebx
	add edx, 4
	cmp ebx, edi
	jl loc_499A2D

loc_499A75:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_499A7D:
	mov dword [edx], 0
	jmp loc_499A67
;sub_499A18 endp

sub_499A88: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ecx, eax
	mov [esp+4], ebx
	mov esi, [esp+4]
	xor ebx, ebx
	test esi, esi
	jle loc_499AEF

loc_499A9F:
	mov ax, [ecx]
	mov ebp, dword [dword_4DD03C]
	and eax, 0FFFFh
	cmp eax, ebp
	jz loc_499AF7
	mov edi, eax
	mov esi, eax
	sar edi, 0Bh
	and eax, 1Fh
	sar esi, 5
	shl eax, 3
	and edi, 1Fh
	mov [esp], eax
	mov eax, edi
	and esi, 3Fh
	shl eax, 13h
	shl esi, 0Ah
	or eax, 0FF000000h
	or eax, esi
	mov esi, [esp]
	or esi, eax
	mov [edx], esi

loc_499AE0:
	mov edi, [esp+4]
	add ecx, 2
	inc ebx
	add edx, 4
	cmp ebx, edi
	jl loc_499A9F

loc_499AEF:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_499AF7:
	mov dword [edx], 0
	jmp loc_499AE0
;sub_499A88 endp

sub_499B00: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edi, eax
	mov esi, edx
	mov [esp], ebx
	xor edx, edx
	mov [esp+4], edx
	test ebx, ebx
	jle loc_499B80

loc_499B18:
	mov ax, [edi]
	and eax, 0FFFFh
	mov ecx, eax
	sar ecx, 0Ch
	and ecx, 0Fh
	mov ebx, eax
	mov edx, ecx
	sar ebx, 8
	shl edx, 4
	and ebx, 0Fh
	or ecx, edx
	mov edx, ebx
	shl edx, 4
	add edi, 2
	or ebx, edx
	mov edx, eax
	add esi, 4
	sar edx, 4
	shl ecx, 18h
	and edx, 0Fh
	shl ebx, 10h
	mov ebp, edx
	and eax, 0Fh
	shl ebp, 4
	or ecx, ebx
	or edx, ebp
	mov ebp, eax
	shl edx, 8
	shl ebp, 4
	or edx, ecx
	or eax, ebp
	or edx, eax
	mov eax, [esp+4]
	mov [esi-4], edx
	inc eax
	mov edx, [esp]
	mov [esp+4], eax
	cmp eax, edx
	jl loc_499B18
	nop

loc_499B80:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_499B00 endp

sub_499B88: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 0Ch
	mov ecx, edx
	mov [esp+8], ebx
	mov edx, [esp+8]
	xor ebx, ebx
	test edx, edx
	jle loc_499BF4

loc_499B9E:
	mov dx, [eax]
	movzx edi, byte [eax+3]
	and edx, 0FFFFh
	mov esi, edx
	sar esi, 0Bh
	and esi, 1Fh
	mov [esp], esi
	mov esi, edx
	sar esi, 5
	and esi, 3Fh
	and edx, 1Fh
	mov [esp+4], esi
	lea esi, 0[edx*8]
	mov edx, [esp]
	shl edi, 18h
	shl edx, 13h
	or edx, edi
	mov edi, [esp+4]
	add eax, 4
	shl edi, 0Ah
	add ecx, 4
	or edx, edi
	inc ebx
	or edx, esi
	mov esi, [esp+8]
	mov [ecx-4], edx
	cmp ebx, esi
	jl loc_499B9E

loc_499BF4:
	add esp, 0Ch
	pop edi
	pop esi
	pop ecx
	ret
;sub_499B88 endp

sub_499BFC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov [esp], ebx
	xor ecx, ecx
	test ebx, ebx
	jle loc_499C40

loc_499C0C:
	xor ebx, ebx
	add edx, 4
	mov bl, [eax+2]
	movzx esi, byte [eax+1]
	mov edi, ebx
	movzx ebp, byte [eax]
	shl edi, 10h
	mov ebx, esi
	or edi, 0FF000000h
	shl ebx, 8
	add eax, 3
	or ebx, edi
	inc ecx
	or ebx, ebp
	mov esi, [esp]
	mov [edx-4], ebx
	cmp ecx, esi
	jl loc_499C0C

loc_499C40:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_499BFC endp

sub_499C48: ;SUBROUTINE
	shl ebx, 2
	jmp sub_48A980
;sub_499C48 endp

sub_499C98: ;SUBROUTINE
	cmp eax, 78h
	jnb loc_499CAC
	cmp eax, 42h
	jnb loc_499CD7
	cmp eax, 40h
	jb loc_499CEF
	ja loc_499CBF

loc_499CA9:
	xor eax, eax
	ret

loc_499CAC:
	jbe loc_499C73
	cmp eax, 7Dh
	jnb loc_499CC5
	cmp eax, 7Ah
	jb loc_499CEF
	jbe loc_499CA9
	cmp eax, 7Bh
	jnz loc_499CEF

loc_499CBF:
	mov eax, 1
	ret

loc_499CC5:
	jbe loc_499C80
	cmp eax, 7Eh
	jbe loc_499C89
	cmp eax, 7Fh
	jnz loc_499CEF

loc_499CD1:
	mov eax, 4
	ret

loc_499CD7:
	jbe loc_499CE9
	cmp eax, 43h
	jbe loc_499CD1
	cmp eax, 6Dh
	jnz loc_499CEF
	mov eax, 6
	ret

loc_499CE9:
	mov eax, 7
	ret

loc_499CEF:
	mov eax, 0FFFFFFFFh
	ret

loc_499C73:
	mov eax, 3
	ret

loc_499C80:
	mov eax, 5
	ret

loc_499C89:
	mov eax, 2
	ret
;sub_499C98 endp

sub_499CF8: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 200h
	mov ecx, edx
	call sub_49E520
	mov edi, dword_570E60
	mov edx, eax
	test eax, eax
	jz loc_499D5C
	mov esi, [eax]
	and esi, 0FFh
	add eax, 10h
	cmp esi, 2Ah
	jz loc_499D69
	mov esi, [edx+2]
	mov dword [ecx+3FCh], 0
	mov edx, [edx]
	mov edi, ecx
	and edx, 0FFh
	sar esi, 10h
	cmp edx, 24h
	jz loc_499D6D
	cmp edx, 29h
	jz loc_499D7A
	cmp edx, 2Dh
	jz loc_499D85
	cmp edx, 2Ch
	jz loc_499D90
	cmp edx, 22h
	jz loc_499D9B
	cmp edx, 23h
	jz loc_499DA8

loc_499D5C:
	mov eax, edi
	add esp, 200h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_499D69:
	mov edi, eax
	jmp loc_499D5C

loc_499D6D:
	mov ebx, ecx
	mov edx, eax
	mov eax, esi
	call sub_4ADBB4
	jmp loc_499D5C

loc_499D7A:
	mov ebx, esi
	mov edx, ecx
	call sub_499A88
	jmp loc_499D5C

loc_499D85:
	mov ebx, esi
	mov edx, ecx
	call sub_499A18
	jmp loc_499D5C

loc_499D90:
	mov ebx, esi
	mov edx, ecx
	call sub_499B88
	jmp loc_499D5C

loc_499D9B:
	mov ebx, ecx
	mov edx, eax
	mov eax, esi
	call sub_4ADAC0
	jmp loc_499D5C

loc_499DA8:
	mov ebx, 100h
	mov edx, esp
	call sub_4A6B94
	mov ebx, 100h
	mov eax, esp
	mov edx, ecx
	call sub_499A18
	mov eax, edi
	add esp, 200h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_499CF8 endp

sub_499DD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 400h
	mov ecx, edx
	call sub_49E520
	mov edx, eax
	test eax, eax
	jz loc_499E9F
	mov ebx, [eax]
	and ebx, 0FFh
	add eax, 10h
	cmp ebx, 29h
	jz loc_499E3F
	mov esi, [edx+2]
	mov word [ecx+1FEh], 0
	mov edx, [edx]
	mov edi, ecx
	and edx, 0FFh
	sar esi, 10h
	cmp edx, 24h
	jz loc_499E43
	cmp edx, 2Ch
	jz loc_499E5B
	cmp edx, 2Dh
	jz loc_499E66
	cmp edx, 2Ah
	jz loc_499E50
	cmp edx, 22h
	jz loc_499E71
	cmp edx, 23h
	jz loc_499E89

loc_499E32:
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_499E3F:
	mov edi, eax
	jmp loc_499E32

loc_499E43:
	mov ebx, esp
	mov edx, eax
	mov eax, esi
	call sub_4ADBB4
	mov eax, esp

loc_499E50:
	mov ebx, esi
	mov edx, ecx
	call sub_499798
	jmp loc_499E32

loc_499E5B:
	mov ebx, esi
	mov edx, ecx
	call sub_499778
	jmp loc_499E32

loc_499E66:
	mov ebx, esi
	mov edx, ecx
	call sub_499A18
	jmp loc_499E32

loc_499E71:
	mov ebx, esp
	mov edx, eax
	mov eax, esi
	call sub_4ADAC0
	mov eax, esp
	mov ebx, esi
	mov edx, ecx
	call sub_499798
	jmp loc_499E32

loc_499E89:
	mov ebx, esi
	mov edx, ecx
	call sub_4A6B94
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_499E9F:
	mov ebx, 100h
	mov eax, dword_570E60
	mov edx, ecx
	call sub_499798
	mov edi, ecx
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_499DD0 endp

sub_499EC0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	sub esp, 400h
	mov esi, edx
	call sub_49E520
	mov edx, eax
	test eax, eax
	jz loc_499FBC
	mov ecx, [eax]
	and ecx, 0FFh
	add eax, 10h
	cmp ecx, 2Ch
	jz loc_499F30
	mov ecx, [edx+2]
	mov dword [esi+3FCh], 0
	mov edx, [edx]
	mov edi, esi
	and edx, 0FFh
	sar ecx, 10h
	cmp edx, 24h
	jz loc_499F34
	cmp edx, 29h
	jz loc_499F4C
	cmp edx, 2Dh
	jz loc_499F62
	cmp edx, 2Ah
	jz loc_499F6D
	cmp edx, 22h
	jz loc_499F78
	cmp edx, 23h
	jz loc_499F90

loc_499F23:
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_499F30:
	mov edi, eax
	jmp loc_499F23

loc_499F34:
	mov ebx, esp
	mov edx, eax
	mov eax, ecx
	call sub_4ADBB4
	mov eax, esp
	mov ebx, ecx
	mov edx, esi
	call sub_4998A8
	jmp loc_499F23

loc_499F4C:
	mov edx, esp
	mov ebx, ecx
	call sub_499A88
	mov eax, esp
	mov ebx, ecx
	mov edx, esi
	call sub_4998A8
	jmp loc_499F23

loc_499F62:
	mov edx, esp
	mov ebx, ecx
	call sub_499A18
	mov eax, esp

loc_499F6D:
	mov ebx, ecx
	mov edx, esi
	call sub_4998A8
	jmp loc_499F23

loc_499F78:
	mov ebx, esp
	mov edx, eax
	mov eax, ecx
	call sub_4ADAC0
	mov eax, esp
	mov ebx, ecx
	mov edx, esi
	call sub_4998A8
	jmp loc_499F23

loc_499F90:
	mov ebx, ecx
	mov edx, esi
	call sub_4A6B94
	mov edx, esp
	mov ebx, ecx
	mov eax, esi
	call sub_499A88
	mov eax, esp
	mov ebx, ecx
	mov edx, esi
	call sub_4998A8
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_499FBC:
	mov ebx, 100h
	mov eax, dword_570E60
	mov edx, esi
	call sub_4998A8
	mov edi, esi
	mov eax, edi
	add esp, 400h
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_499EC0 endp

sub_499FDC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov edi, eax
	mov [esp+4], ebx
	mov ebx, [eax]
	and ebx, 0FFh
	mov eax, ebx
	call sub_499C98
	lea ecx, 0[eax*8]
	mov eax, edx
	call sub_499C98
	add ecx, eax
	xor eax, eax
	mov al, byte byte_4DD248[ecx]
	xor ebp, ebp
	mov [esp], eax
	cmp edx, eax
	jnz loc_49A066
	cmp dword [esp+4], 0
	jnz loc_49A070
	mov eax, ebx
	call sub_499C98
	lea ecx, 0[eax*8]
	mov eax, edx
	call sub_499C98
	add eax, ecx
	mov ebp, dword off_4DD148[eax*4]

loc_49A03E:
	mov eax, edi
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov ecx, eax
	mov eax, esp
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov esi, eax
	cmp ecx, 8
	jg loc_49A066
	cmp eax, 8
	jg loc_49A090

loc_49A066:
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49A070:
	mov eax, ebx
	call sub_499C98
	lea ecx, 0[eax*8]
	mov eax, edx
	call sub_499C98
	add eax, ecx
	mov ebp, dword off_4DD048[eax*4]
	jmp loc_49A03E

loc_49A090:
	mov edx, word_56EF3C
	mov eax, edi
	mov ebx, 1
	call sub_499CF8
	mov edi, [esp+4]
	mov dword [off_4DD044], eax
	shl ebx, cl
	test edi, edi
	jz loc_49A0E2
	cmp esi, 0Fh
	jz loc_49A0CE
	cmp esi, 10h
	jnz loc_49A066
	mov edx, word_56EF3C
	call sub_499798
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49A0CE:
	mov edx, word_56EF3C
	call sub_4996BC
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49A0E2:
	cmp esi, 0Fh
	jz loc_49A104
	cmp esi, 10h
	jnz loc_49A066
	mov edx, word_56EF3C
	call sub_4997F8
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49A104:
	mov edx, word_56EF3C
	call sub_49971C
	mov eax, ebp
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_499FDC endp

sub_49A118: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 58h
	mov edi, eax
	mov [esp+3Ch], edx
	mov [esp+2Ch], ebx
	mov [esp+30h], ecx
	call sub_49E520
	mov ecx, 0Ah
	xor edx, edx
	mov [esp+24h], eax
	mov [esp+34h], edx
	mov [esp+38h], ecx

loc_49A144:
	cmp dword [esp+30h], 0
	jnz loc_49A3CF
	mov eax, [edi]
	and eax, 0FFh
	call sub_499C98
	lea edx, 0[eax*8]
	mov eax, [esp+3Ch]
	call sub_499C98
	add eax, edx
	mov eax, dword off_4DD148[eax*4]

loc_49A174:
	mov [esp+4Ch], eax
	mov eax, [edi]
	and eax, 0FFh
	call sub_499C98
	lea edx, 0[eax*8]
	mov eax, [esp+3Ch]
	call sub_499C98
	add edx, eax
	xor eax, eax
	mov al, byte byte_4DD248[edx]
	mov [esp+20h], eax
	mov eax, edi
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov ecx, eax
	mov [esp+28h], eax
	lea eax, [esp+20h]
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov ebx, eax
	mov [esp+44h], eax
	inc eax
	and al, 0FEh
	mov edx, eax
	mov eax, [edi+2]
	sar eax, 10h
	mov [esp+50h], eax
	mov eax, [edi+4]
	sar eax, 10h
	mov [esp+54h], eax
	mov eax, edi
	call sub_4A96A0
	mov [esp+48h], eax
	mov eax, [esp+50h]
	imul eax, edx
	add eax, 7
	and al, 0F8h
	mov ebp, eax
	sar ebp, 3
	cmp ecx, 8
	jg loc_49A27B
	cmp ebx, 8
	jle loc_49A27B
	mov ebx, 1
	mov esi, [esp+2Ch]
	shl ebx, cl
	test esi, esi
	jz loc_49A3F9
	xor eax, eax
	test ebx, ebx
	jle loc_49A244
	xor ecx, ecx

loc_49A228:
	movzx esi, byte byte_4DD5E8[eax]
	add ecx, 4
	mov esi, dword dword_570E60[esi*4]
	inc eax
	mov dword dword_56EF38[ecx], esi
	cmp eax, ebx
	jl loc_49A228

loc_49A244:
	mov dword [off_4DD044], word_56EF3C

loc_49A24E:
	cmp dword [esp+30h], 0
	jz loc_49A42E
	mov eax, [esp+44h]
	cmp eax, 0Fh
	jnz loc_49A411
	mov edx, word_56EF3C
	mov eax, dword [off_4DD044]
	call sub_4996BC

loc_49A275:
	xor ecx, ecx
	mov [esp+2Ch], ecx

loc_49A27B:
	mov ebx, [esp+44h]
	push ebx
	mov esi, [esp+2Ch]
	push esi
	push aDtoD ; "%dto%d"
	lea eax, [esp+0Ch]
	push eax
	call sprintf_
	add esp, 10h
	mov esi, [esp+54h]
	imul esi, ebp
	mov eax, esp
	mov ebx, dword [dword_4DABE8]
	lea edx, [esi+14h]
	call sub_484498
	mov ebx, 4
	mov ecx, eax
	mov [esp+40h], eax
	add eax, esi
	mov edx, 43534850h
	add eax, 10h
	call sub_48C054
	mov eax, [esp+20h]
	mov byte [ecx], 0
	and eax, 0FFh
	mov edx, [ecx]
	or edx, eax
	mov eax, [esp+50h]
	mov ebx, edx
	mov [ecx], edx
	and ebx, 0FFh
	mov [ecx+4], ax
	mov eax, [esp+54h]
	mov [ecx], ebx
	mov [ecx+6], ax
	mov ax, [edi+8]
	mov [ecx+8], ax
	mov ax, [edi+0Ah]
	mov dx, [ecx+0Ch]
	mov [ecx+0Ah], ax
	and edx, 0FFFFF000h
	mov eax, [edi+0Ch]
	mov [ecx+0Ch], dx
	and eax, 0FFFh
	mov esi, [ecx+0Ch]
	add ecx, 10h
	or esi, eax
	mov [ecx-4], esi
	mov bx, [ecx-2]
	lea esi, [edi+10h]
	and ebx, 0FFFFF000h
	mov eax, [edi+0Ch]
	mov [ecx-2], bx
	and eax, 0FFF0000h
	mov edx, [ecx-4]
	xor edi, edi
	or edx, eax
	mov ebx, [esp+54h]
	mov [ecx-4], edx
	test ebx, ebx
	jle loc_49A36D

loc_49A350:
	mov ebx, [esp+50h]
	mov edx, ecx
	mov eax, esi
	call dword [esp+4Ch]
	inc edi
	mov eax, [esp+48h]
	mov edx, [esp+54h]
	add ecx, ebp
	add esi, eax
	cmp edi, edx
	jl loc_49A350

loc_49A36D:
	imul ebp, [esp+54h]
	mov eax, [esp+40h]
	add eax, ebp
	mov ecx, 4
	add eax, 10h
	mov ebx, [esp+34h]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	test ebx, ebx
	jz loc_49A39E
	mov eax, ebx
	call sub_4848FC

loc_49A39E:
	mov eax, [esp+40h]
	mov [esp+34h], eax
	mov edi, eax
	mov eax, [eax]
	mov esi, [esp+3Ch]
	and eax, 0FFh
	cmp eax, esi
	jz loc_49A3C6
	mov ebp, [esp+38h]
	dec ebp
	mov [esp+38h], ebp
	jnz loc_49A144

loc_49A3C6:
	mov eax, edi
	add esp, 58h
	pop ebp
	pop edi
	pop esi
	ret

loc_49A3CF:
	mov eax, [edi]
	and eax, 0FFh
	call sub_499C98
	lea edx, 0[eax*8]
	mov eax, [esp+3Ch]
	call sub_499C98
	add eax, edx
	mov eax, dword off_4DD048[eax*4]
	jmp loc_49A174

loc_49A3F9:
	mov edx, word_56EF3C
	mov eax, [esp+24h]
	call sub_499CF8
	mov dword [off_4DD044], eax
	jmp loc_49A24E

loc_49A411:
	cmp eax, 10h
	jnz loc_49A275
	mov edx, word_56EF3C
	mov eax, dword [off_4DD044]
	call sub_499798
	jmp loc_49A275

loc_49A42E:
	mov ecx, [esp+44h]
	cmp ecx, 0Fh
	jz loc_49A454
	cmp ecx, 10h
	jnz loc_49A275
	mov edx, word_56EF3C
	mov eax, dword [off_4DD044]
	call sub_4997F8
	jmp loc_49A275

loc_49A454:
	mov edx, word_56EF3C
	mov eax, dword [off_4DD044]
	call sub_49971C
	jmp loc_49A275
;sub_49A118 endp

sub_49A4A0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 224h
	mov esi, [esp+234h]
	mov [esp+210h], eax
	mov ebp, edx
	mov [esp+20Ch], ebx
	mov [esp+220h], ecx
	mov edi, [esp+210h]
	xor edx, edx
	mov eax, [eax+2]
	mov [esp+21Ch], edx
	sar eax, 10h
	mov edi, [edi+4]
	mov [esp+208h], eax
	sar edi, 10h
	test ecx, ecx
	jz loc_49A5AF
	test esi, esi
	jz loc_49A5AF
	mov eax, dword [dword_4DABA8]
	mov [esp+204h], edx
	test eax, eax
	jz loc_49A522
	cmp dword [dword_4DABAC], 0
	jz loc_49A5BB
	mov dword [esp+21Ch], sub_4A9240

loc_49A522:
	mov edx, [esp+210h]
	xor eax, eax
	mov edx, [edx]
	mov al, byte [byte_4DB25D]
	and edx, 0FFh
	cmp edx, eax
	jz loc_49A588
	mov eax, [esp+210h]
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	cmp eax, 8
	jnz loc_49A5CB
	cmp byte [byte_4DB25C], 10h
	jnz loc_49A5CB
	mov edx, esp
	mov eax, [esp+210h]
	mov ebx, 200h
	call sub_499DD0
	mov edx, word_56EF3C
	call sub_48A980
	mov dword [esp+21Ch], sub_4A90FE

loc_49A588:
	cmp ebp, dword [dword_4DB254]
	jl loc_49A5F3

loc_49A590:
	mov edx, [esp+204h]
	test edx, edx
	jz loc_49A5A2
	mov eax, edx
	call sub_4848FC

loc_49A5A2:
	cmp dword [dword_4DABAC], 0
	jnz loc_49A831

loc_49A5AF:
	add esp, 224h
	pop ebp
	pop edi
	pop esi
	ret 4

loc_49A5BB:
	mov dword [esp+21Ch], sub_4A951A
	jmp loc_49A522

loc_49A5CB:
	mov eax, [esp+210h]
	xor edx, edx
	xor ecx, ecx
	xor ebx, ebx
	mov dl, byte [byte_4DB25D]
	call sub_49A118
	mov [esp+204h], eax
	mov [esp+210h], eax
	jmp loc_49A588

loc_49A5F3:
	mov eax, [esp+20Ch]
	cmp eax, dword [dword_4DB258]
	jge loc_49A590
	mov ebx, [esp+220h]
	test ebx, ebx
	jle loc_49A7FA
	mov eax, ebx

loc_49A613:
	mov edx, dword [dword_4DB24C]
	add eax, ebp
	cmp eax, edx
	jle loc_49A590
	test esi, esi
	jle loc_49A803
	mov eax, esi

loc_49A62D:
	mov ecx, [esp+20Ch]
	mov ebx, dword [dword_4DB250]
	add eax, ecx
	cmp eax, ebx
	jle loc_49A590
	mov eax, [esp+210h]
	mov edx, [esp+208h]
	mov ecx, [esp+220h]
	call sub_4A96A0
	shl edx, 10h
	mov [esp+214h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	shl edi, 10h
	mov ecx, eax
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	idiv esi
	mov edx, eax
	sar edx, 1Fh
	mov [esp+218h], eax
	sub eax, edx
	sar eax, 1
	test esi, esi
	jl loc_49A80C
	mov edi, eax

loc_49A697:
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov ebx, [esp+220h]
	mov edx, eax
	test ebx, ebx
	jl loc_49A815

loc_49A6B3:
	mov eax, [esp+20Ch]
	mov ebx, dword [dword_4DB250]
	cmp eax, ebx
	jge loc_49A6E7
	mov eax, ebx
	sub eax, [esp+20Ch]
	mov ebx, [esp+218h]
	imul ebx, eax
	sub esi, eax
	mov eax, dword [dword_4DB250]
	add edi, ebx
	mov [esp+20Ch], eax

loc_49A6E7:
	mov eax, [esp+20Ch]
	mov ebx, dword [dword_4DB258]
	add eax, esi
	cmp eax, ebx
	jle loc_49A705
	mov eax, [esp+20Ch]
	mov esi, ebx
	sub esi, eax

loc_49A705:
	mov ebx, dword [dword_4DB24C]
	cmp ebp, ebx
	jge loc_49A723
	mov eax, ebx
	sub eax, ebp
	mov ebp, ecx
	imul ebp, eax
	add edx, ebp
	sub [esp+220h], eax
	mov ebp, ebx

loc_49A723:
	mov eax, [esp+220h]
	mov ebx, dword [dword_4DB254]
	add eax, ebp
	cmp eax, ebx
	jle loc_49A741
	mov eax, ebx
	sub eax, ebp
	mov [esp+220h], eax

loc_49A741:
	mov eax, [esp+20Ch]
	shl eax, 2
	mov [esp+200h], eax
	mov ebx, [esp+200h]
	mov eax, dword [dword_4DB26C]
	shl ebp, 2
	add ebx, eax
	mov eax, dword [dword_4DB270]
	add eax, ebp
	mov ebp, [ebx]
	mov ebx, [eax]
	mov eax, [esp+21Ch]
	add ebp, ebx
	test eax, eax
	jnz loc_49A786
	mov dword [esp+21Ch], sub_4A8F65

loc_49A786:
	mov eax, [esp+220h]
	push eax
	mov ebx, [esp+20Ch]
	push ebx
	push 0
	mov eax, dword_5B4F64
	xor ebx, ebx
	call sub_4A9700
	mov eax, [esp+210h]
	mov edx, dword_5B4F64
	add eax, 10h
	call sub_4A8C8C

loc_49A7BA:
	dec esi
	cmp esi, 0FFFFFFFFh
	jz loc_49A590
	mov eax, edi
	mov edx, [esp+214h]
	sar eax, 10h
	imul eax, edx
	mov ecx, [esp+220h]
	push ecx
	push eax
	push ebp
	call dword [esp+228h]
	add esp, 0Ch
	mov ebx, dword [dword_4DB268]
	mov eax, [esp+218h]
	add ebp, ebx
	add edi, eax
	jmp loc_49A7BA

loc_49A7FA:
	mov eax, ebx
	neg eax
	jmp loc_49A613

loc_49A803:
	mov eax, esi
	neg eax
	jmp loc_49A62D

loc_49A80C:
	neg esi
	add edi, eax
	jmp loc_49A697

loc_49A815:
	mov eax, ebx
	neg eax
	mov [esp+220h], eax
	mov eax, [esp+208h]
	shl eax, 10h
	add edx, eax
	jmp loc_49A6B3

loc_49A831:
	emms
	add esp, 224h
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_49A4A0 endp

sub_49A978: ;SUBROUTINE
	push ecx
	push esi
	mov dword [dword_4DD288], ebx
	mov esi, eax
	push edi
	push ebp

loc_49A984:
	mov eax, [esi]
	xor ebx, ebx
	mov bl, al
	mov edi, eax
	shr edi, 18h
	and eax, 0FF00h
	shr eax, 8
	mov ebp, dword dword_56E7C8[ebx*4]
	mov edi, dword dword_56E3C8[edi*4]
	add esi, 4
	mov eax, dword dword_56E5C8[eax*4]
	add edi, ebp
	add ebp, eax
	add eax, edi
	mov ecx, eax
	mov edi, eax
	shr eax, 17h
	and ecx, 0FF800h
	shr ecx, 0Bh
	and edi, 1FFh
	mov eax, dword dword_56DF00[eax*4]
	mov bl, [esi-2]
	mov ecx, dword dword_56DAE8[ecx*4]
	mov edi, dword dword_56D560[edi*4]
	add eax, ecx
	mov ebx, dword dword_56E3C8[ebx*4]
	add eax, edi
	add ebx, ebp
	mov ebp, eax
	mov eax, ebx
	mov edi, ebx
	and ebx, 0FF800h
	shr eax, 17h
	and edi, 1FFh
	shr ebx, 0Bh
	mov ecx, dword [dword_4DD288]
	mov eax, dword dword_56DF00[eax*4]
	mov edi, dword dword_56D560[edi*4]
	mov ebx, dword dword_56DAE8[ebx*4]
	add eax, edi
	add eax, ebx
	and ebp, 0FFFFh
	and eax, 0FFFF0000h
	or eax, ebp
	dec ecx
	mov dword [dword_4DD288], ecx
	mov [edx], eax
	lea edx, [edx+4]
	jnz loc_49A984
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49A978 endp

sub_49AA4B: ;SUBROUTINE
	push ecx
	push esi
	mov dword [dword_4DD288], ebx
	mov esi, eax
	push edi
	push ebp

loc_49AA57:
	mov eax, [esi]
	xor ebx, ebx
	mov bl, al
	mov edi, eax
	shr edi, 18h
	and eax, 0FF00h
	shr eax, 8
	mov ebp, dword dword_56E7C8[ebx*4]
	mov edi, dword dword_56E3C8[edi*4]
	add esi, 4
	mov eax, dword dword_56E5C8[eax*4]
	add edi, ebp
	add ebp, eax
	add eax, edi
	mov ecx, eax
	mov edi, eax
	shr eax, 17h
	and ecx, 0FF800h
	shr ecx, 0Bh
	and edi, 1FFh
	mov eax, dword dword_56DF00[eax*4]
	mov bl, [esi-2]
	mov ecx, dword dword_56DAE8[ecx*4]
	mov edi, dword dword_56D560[edi*4]
	add eax, ecx
	mov ebx, dword dword_56E3C8[ebx*4]
	add eax, edi
	add ebx, ebp
	mov [edx], eax
	mov eax, ebx
	mov edi, ebx
	and ebx, 0FF800h
	shr eax, 17h
	and edi, 1FFh
	shr ebx, 0Bh
	mov ecx, dword [dword_4DD288]
	mov eax, dword dword_56DF00[eax*4]
	mov edi, dword dword_56D560[edi*4]
	mov ebx, dword dword_56DAE8[ebx*4]
	add eax, edi
	add eax, ebx
	dec ecx
	mov dword [dword_4DD288], ecx
	mov [edx+4], eax
	lea edx, [edx+8]
	jnz loc_49AA57
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49AA4B endp

sub_49AB12: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov dword [dword_4DD288], ecx
	push ebp

loc_49AB1F:
	mov eax, [esi]
	mov edx, [edi]
	add eax, edx
	add esi, 4
	shr eax, 1
	add edi, 4
	and eax, 7F7F7F7Fh
	xor edx, edx
	mov ecx, eax
	mov ebp, eax
	shr ecx, 8
	mov dl, al
	shr ebp, 10h
	and ecx, 0FFh
	shr eax, 18h
	mov edx, dword dword_56E7C8[edx*4]
	and ebp, 0FFh
	mov ecx, dword dword_56E5C8[ecx*4]
	add edx, ecx
	mov eax, dword dword_56E3C8[eax*4]
	add eax, edx
	mov ebp, dword dword_56E3C8[ebp*4]
	add ebp, edx
	mov edx, eax
	shr edx, 17h
	mov ecx, eax
	shr ecx, 0Bh
	and eax, 1FFh
	mov edx, dword dword_56DF00[edx*4]
	and ecx, 1FFh
	mov eax, dword dword_56D560[eax*4]
	add ebx, 8
	mov ecx, dword dword_56DAE8[ecx*4]
	add eax, edx
	add eax, ecx
	mov edx, ebp
	shr edx, 17h
	mov [ebx-8], eax
	mov eax, ebp
	and ebp, 1FFh
	shr eax, 0Bh
	mov edx, dword dword_56DF00[edx*4]
	and eax, 1FFh
	mov ebp, dword dword_56D560[ebp*4]
	add edx, ebp
	mov ecx, dword [dword_4DD288]
	mov eax, dword dword_56DAE8[eax*4]
	add eax, edx
	dec ecx
	mov dword [dword_4DD288], ecx
	nop
	mov [ebx-4], eax
	jnz loc_49AB1F
	pop ebp
	pop edi
	pop esi
	ret
;sub_49AB12 endp

sub_49ABEE: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp

loc_49ABF2:
	mov esi, [eax]
	mov edi, [eax+4]
	mov ecx, esi
	mov ebp, edi
	shl ecx, 8
	and edi, 7F7Fh
	shr ebp, 8
	and ecx, 7F000000h
	and ebp, 7F0000h
	or edi, ecx
	or edi, ebp
	add eax, 4
	add edi, esi
	add edx, 8
	shr edi, 1
	and esi, 7F007F7Fh
	mov ebp, edi
	and edi, 7F7F7Fh
	shr ebp, 8
	or edi, ecx
	and ebp, 7F0000h
	mov [edx-4], edi
	or esi, ebp
	dec ebx
	mov [edx-8], esi
	jnz loc_49ABF2
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49ABEE endp

sub_49AC4A: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov dword [dword_4DD288], ecx
	mov esi, [eax]
	mov edi, [edx]
	add edi, esi
	add eax, 4
	shr edi, 1
	add edx, 4
	and edi, 7F7F7F7Fh
	mov dword [dword_4DD28C], edi

loc_49AC6D:
	mov esi, [eax]
	mov edi, [edx]
	add edi, esi
	mov esi, dword [dword_4DD28C]
	shr edi, 1
	add ebx, 8
	and edi, 7F7F7F7Fh
	mov ecx, esi
	mov dword [dword_4DD28C], edi
	mov ebp, edi
	shl ecx, 8
	and edi, 7F7Fh
	shr ebp, 8
	and ecx, 7F000000h
	and ebp, 7F0000h
	or edi, ecx
	or edi, ebp
	add eax, 4
	add edi, esi
	add edx, 4
	shr edi, 1
	and esi, 7F007F7Fh
	mov ebp, edi
	and edi, 7F7F7Fh
	shr ebp, 8
	or edi, ecx
	and ebp, 7F0000h
	mov [ebx-4], edi
	or esi, ebp
	mov ecx, dword [dword_4DD288]
	mov [ebx-8], esi
	dec ecx
	mov dword [dword_4DD288], ecx
	jnz loc_49AC6D
	pop ebp
	pop edi
	pop esi
	ret
;sub_49AC4A endp

;	Attributes: thunk

atexit_: ;SUBROUTINE
	push ecx
	push edx

	push eax
	call WrapperAtExit

	pop edx
	pop ecx

	ret
;atexit_ endp

ExitProcess0: ;SUBROUTINE
	push 0
	call ExitProcess_wrap
;ExitProcess0 endp

ExitProcess1: ;SUBROUTINE
	push 1
	call ExitProcess_wrap
;ExitProcess1 endp

sub_49ADB0: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	push edx
	call sub_497680
	call sub_497A20
	mov dword [dword_56F340], eax
	test eax, eax
	jz loc_49ADE3
	mov edx, [eax]
	mov [ebx+20h], edx
	mov eax, [eax+4]
	mov dword [dword_56F344], ebx
	mov [ebx+28h], eax
	mov eax, 1
	pop ecx
	pop ebx
	ret

loc_49ADE3:
	mov dword [dword_56F344], eax
	pop ecx
	pop ebx
	ret
;sub_49ADB0 endp

sub_49ADEC: ;SUBROUTINE
	cmp dword [dword_56F344], 0
	jz loc_49B0BC
	push edx
	push ecx
	push ebx
	mov ecx, dword [dword_56F340]
	push ecx
	xor ebx, ebx
	call sub_497A84
	mov dword [dword_56F340], ebx
	mov dword [dword_56F344], ebx
	pop ebx
	pop ecx
	pop edx
	ret

loc_49B0BC:
	push ecx
	push edx
	mov edx, dword [dword_56F340]
	push edx
	call sub_497A84
	xor ecx, ecx
	mov eax, dword [dword_4DB26C]
	mov dword [dword_56F340], ecx
	call sub_49B24C
	mov eax, dword [dword_4DB270]
	call sub_49B24C
	pop edx
	pop ecx
	ret
;sub_49ADEC endp

sub_49AE1C: ;SUBROUTINE
	push ebx
	push edx
	push esi
	mov ebx, eax
	cmp dword [dword_56F340], 0
	jnz loc_49AE5D

loc_49AE2A:
	test ebx, ebx
	jz loc_49AE54
	mov ah, [ebx+1Eh]
	test ah, ah
	jz loc_49AE4D
	cmp ah, 0FFh
	jnz loc_49AE64

loc_49AE4D:
	mov esi, [ebx+34h]
	test esi, esi
	jnz loc_49AE73

loc_49AE54:
	mov eax, 1
	pop esi
	pop edx
	pop ebx
	ret

loc_49AE5D:
	call sub_49ADEC
	jmp loc_49AE2A

loc_49AE64:
	xor edx, edx
	mov dl, ah
	mov eax, ebx
	call sub_49ADB0
	pop esi
	pop edx
	pop ebx
	ret

loc_49AE73:
	mov eax, dword_563900
	mov edx, esi
	call sub_491C08
	pop esi
	pop edx
	pop ebx
	ret
;sub_49AE1C endp

sub_49AE90: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov [esp+14h], eax
	mov edi, edx
	mov esi, ebx
	cmp eax, 0FFh
	jz loc_49AEB2
	test eax, eax
	jnz loc_49AEEF

loc_49AEAA:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49AEB2:
	lea eax, [esp+10h]
	lea ecx, [esp+8]
	push eax
	lea eax, [esp+10h]
	lea ebx, [esp+8]
	push eax
	lea edx, [esp+8]
	mov eax, edi
	call sub_4921D0
	push edi
	mov edi, [esp+14h]
	mov ebp, [esp+0Ch]
	push edi
	mov ecx, [esp+14h]
	mov ebx, [esp+0Ch]
	push ebp
	mov edx, [esp+0Ch]
	mov eax, esi
	call sub_4AC810
	jmp loc_49AEAA

loc_49AEEF:
	push eax
	call sub_497680
	call sub_497A20
	mov edx, [eax]
	mov [ebx+20h], edx
	mov edx, [eax+4]
	push eax
	mov [ebx+28h], edx
	call sub_497A84
	mov dword [ebx], 57494E44h
	mov eax, dword [dword_4DAB7C]
	mov dword [ebx+0Ch], 0
	mov [ebx+4], eax
	mov eax, dword [dword_4DAB80]
	mov [ebx+8], eax
	mov eax, dword [dword_4DAB7C]
	mov [ebx+14h], eax
	mov eax, dword [dword_4DAB80]
	mov [ebx+18h], eax
	mov al, byte [dword_4DAB84]
	mov [ebx+1Ch], al
	mov al, [esp+14h]
	mov [ebx+1Eh], al
	mov eax, dword [dword_4DAB84]
	mov dword [ebx+10h], 0
	call sub_4ACB80
	mov [ebx+1Dh], al
	mov ecx, dword [dword_4DAB80]
	mov edx, [ebx+28h]
	mov [ebx+34h], edi
	xor ebx, ebx
	xor eax, eax
	call sub_49B174
	mov ebx, 3
	mov ecx, dword [dword_4DAB7C]
	mov edx, dword [dword_4DAB84]
	mov [esi+2Ch], eax
	xor eax, eax
	call sub_49B174
	mov [esi+30h], eax
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49AE90 endp

sub_49AFA0: ;SUBROUTINE
	test eax, eax
	jnz loc_49AFA9
	mov eax, 280h

loc_49AFA9:
	test edx, edx
	jnz loc_49AFB2
	mov edx, 1E0h

loc_49AFB2:
	test ebx, ebx
	jnz loc_49AFBB
	mov ebx, 10h

loc_49AFBB:
	mov dword [dword_4DAB84], ebx
	mov ebx, dword [dword_4DAB94]
	mov dword [dword_4DAB7C], eax
	sub eax, ebx
	mov dword [dword_4DAB9C], eax
	mov eax, dword [dword_4DAB98]
	mov dword [dword_4DAB80], edx
	sub edx, eax
	mov dword [dword_4DABA0], edx
	cmp dword [dword_4DAB5C], 0
	jz sub_49B0F0
	ret
;sub_49AFA0 endp

sub_49B0F0: ;SUBROUTINE
	push ebx
	push edx
	cmp dword [dword_4DD314], 0
	jz loc_49B127

loc_49B0FB:
	mov edx, dword [dword_4DD310]
	mov eax, dword [dword_4DD314]
	shl edx, 2
	lea ebx, [eax+edx]
	mov edx, dword [dword_4DD310]
	mov dword [eax+4], 0
	sub edx, 2
	mov dword [dword_56F348], ebx
	mov [eax], edx
	pop edx
	pop ebx
	ret

loc_49B127:
	mov eax, aRowtbl ; "rowtbl"
	mov edx, dword [dword_4DD310]
	mov ebx, dword [dword_4DABE8]
	shl edx, 2
	call sub_484498
	mov dword [dword_4DD314], eax
	jmp loc_49B0FB
;sub_49B0F0 endp

sub_49B174: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov esi, eax
	mov [esp], edx
	mov [esp+4], ebx
	mov edi, ecx
	mov eax, dword [dword_4DD314]
	mov edx, dword [dword_56F348]
	xor ebx, ebx
	cmp eax, edx
	jnb loc_49B1CB
	mov cl, [esp+4]
	mov edx, [esp]
	sar edx, cl
	add edx, esi

loc_49B1A1:
	mov ecx, [eax]
	cmp ecx, edi
	jl loc_49B1BB
	cmp dword [eax+4], 0
	jbe loc_49B225
	cmp esi, [eax+8]
	jnz loc_49B1BB
	cmp edx, [eax+0Ch]
	jz loc_49B219

loc_49B1BB:
	shl ecx, 2
	add ecx, 8
	add eax, ecx
	cmp eax, dword [dword_56F348]
	jb loc_49B1A1

loc_49B1CB:
	test ebx, ebx
	jz loc_49B242
	lea edx, [edi+8]
	mov eax, [ebx]
	cmp eax, edx
	jge loc_49B22D
	mov edi, eax

loc_49B1DE:
	add ebx, 4
	mov [ebx-4], edi
	xor eax, eax
	mov dword [ebx], 1
	add ebx, 4
	test edi, edi
	jle loc_49B210
	mov edx, ebx

loc_49B1F5:
	mov cl, [esp+4]
	mov ebp, esi
	add edx, 4
	inc eax
	sar ebp, cl
	mov ecx, [esp]
	mov [edx-4], ebp
	add esi, ecx
	cmp eax, edi
	jl loc_49B1F5

loc_49B210:
	mov eax, ebx

loc_49B212:
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret

loc_49B219:
	mov edx, [eax+4]
	add eax, 8
	inc edx
	mov [eax-4], edx
	jmp loc_49B212

loc_49B225:
	test ebx, ebx
	jnz loc_49B1BB
	mov ebx, eax
	jmp loc_49B1BB

loc_49B22D:
	mov edx, eax
	sub edx, edi
	mov dword [ebx+edi*4+0Ch], 0
	sub edx, 2
	mov [ebx+edi*4+8], edx
	jmp loc_49B1DE

loc_49B242:
	xor eax, eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_49B174 endp

sub_49B24C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push ebp
	mov ecx, eax
	lea ecx, [eax-8]
	mov edx, [ecx+4]
	dec edx
	mov [ecx+4], edx
	test edx, edx
	jbe loc_49B267

loc_49B261:
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49B267:
	mov eax, dword [dword_4DD314]
	xor ebx, ebx
	cmp eax, ecx
	jnb loc_49B284

loc_49B272:
	mov edx, [eax]
	add edx, 2
	shl edx, 2
	mov ebx, eax
	add eax, edx
	cmp eax, ecx
	jb loc_49B272

loc_49B284:
	mov edx, [eax]
	add edx, 2
	shl edx, 2
	mov esi, dword [dword_56F348]
	add edx, eax
	cmp edx, esi
	jnb loc_49B29E
	cmp dword [edx+4], 0
	jbe loc_49B2B9

loc_49B29E:
	test ebx, ebx
	jz loc_49B261
	cmp dword [ebx+4], 0
	ja loc_49B261
	mov eax, [eax]
	mov ecx, [ebx]
	add eax, 2
	add ecx, eax
	mov [ebx], ecx
	pop ebp
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49B2B9:
	mov edx, [edx]
	mov ebp, [eax]
	add edx, 2
	add ebp, edx
	mov [eax], ebp
	jmp loc_49B29E
;sub_49B24C endp

sub_49B2E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov dl, byte [byte_4DB25C]
	cmp dl, 0Fh
	jb loc_49B37A
	ja loc_49B32B
	test ah, 80h
	jz loc_49B372
	mov edx, 0FFh

loc_49B302:
	mov ebx, eax
	mov ecx, eax
	shl edx, 18h
	sar ebx, 0Ah
	sar ecx, 5
	and eax, 1Fh
	and ebx, 1Fh
	and ecx, 1Fh
	shl ebx, 13h
	shl ecx, 0Bh
	or edx, ebx
	shl eax, 3
	or edx, ecx
	or eax, edx

loc_49B327:
	pop edx
	pop ecx
	pop ebx
	ret

loc_49B32B:
	cmp dl, 18h
	jnb loc_49B367
	cmp dl, 10h
	jnz loc_49B37A
	test eax, eax
	jz loc_49B376
	mov edx, 0FFh

loc_49B33E:
	mov ecx, eax
	mov ebx, eax
	shl edx, 18h
	sar ecx, 0Bh
	sar ebx, 5
	and eax, 1Fh
	and ecx, 1Fh
	and ebx, 3Fh
	shl ecx, 13h
	shl ebx, 0Ah
	or edx, ecx
	shl eax, 3
	or edx, ebx
	or eax, edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_49B367:
	jbe loc_49B327
	cmp dl, 20h
	jnz loc_49B37A
	pop edx
	pop ecx
	pop ebx
	ret

loc_49B372:
	xor edx, edx
	jmp loc_49B302

loc_49B376:
	xor edx, edx
	jmp loc_49B33E

loc_49B37A:
	mov eax, dword dword_570E60[eax*4]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49B2E0 endp

sub_49C110: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DD394]
	test edx, edx
	jnz loc_49C14D
	push ecx
	push ebx
	mov ecx, 4
	mov dword [dword_56FD80], edx

loc_49C128:
	mov edx, 1
	mov ebx, ecx
	add ecx, 4
	xor eax, eax
	div ebx
	inc eax
	mov dword dword_56FD7C[ecx], eax
	cmp ecx, 1000h
	jnz loc_49C128
	inc dword [dword_4DD394]
	pop ebx
	pop ecx

loc_49C14D:
	pop edx
	ret
;sub_49C110 endp

sub_49C150: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	and esi, 3Fh
	imul esi, 6487Eh
	sar eax, 6
	mov ebx, eax
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edi, eax
	mov eax, ebx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	sar eax, 2
	sar esi, 9
	imul eax, esi
	sar eax, 15h
	add eax, edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49C150 endp

sub_49C1C0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov esi, eax
	and esi, 3Fh
	imul esi, 6487Eh
	sar eax, 6
	mov ebx, eax
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edi, eax
	mov eax, ebx
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	neg eax
	sar eax, 2
	sar esi, 9
	imul eax, esi
	sar eax, 15h
	add eax, edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49C1C0 endp

sub_49C264: ;SUBROUTINE
	sub esp, 4
	fld dword [eax]
	fmul st0, st0
	fld dword [eax+4]
	fmul st0, st0
	faddp st1, st0
	fld dword [eax+8]
	fmul st0, st0
	faddp st1, st0
	fsqrt
	add esp, 4
	ret
;sub_49C264 endp

sub_49C2C4: ;SUBROUTINE
	push eax
	fld dword [esp+8]
	fmul qword [dbl_4D0D94]
	fcos
	pop eax
	ret 4
;sub_49C2C4 endp

sub_49C46C: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	mov edi, ebx
	mov eax, edx
	test esi, esi
	jle loc_49C4D4

loc_49C478:
	mov ebx, ecx
	mov edx, edi
	fld dword [eax]
	fmul dword [edx]
	fld dword [eax]
	fmul dword [edx+4]
	fld dword [eax]
	fmul dword [edx+8]
	fxch st2
	fld dword [eax+4]
	fmul dword [edx+0Ch]
	fld dword [eax+4]
	fmul dword [edx+10h]
	fld dword [eax+4]
	fmul dword [edx+14h]
	fxch st2
	faddp st3, st0
	faddp st3, st0
	faddp st3, st0
	fld dword [eax+8]
	fmul dword [edx+18h]
	fld dword [eax+8]
	fmul dword [edx+1Ch]
	fld dword [eax+8]
	fmul dword [edx+20h]
	fxch st2
	faddp st3, st0
	faddp st3, st0
	faddp st3, st0
	lea eax, [eax+0Ch]
	fstp dword [ebx]
	fstp dword [ebx+4]
	fstp dword [ebx+8]
	add ecx, 0Ch
	dec esi
	jnz loc_49C478

loc_49C4D4:
	pop edi
	pop esi
	ret
;sub_49C46C endp

sub_49C580: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 0Ch
	mov edi, eax
	mov esi, edx
	call sub_4A4618
	mov ecx, eax
	test eax, eax
	jnz loc_49C5C1
	mov eax, 190h
	mov ecx, esp
	lea edx, [esp+8]
	call sub_4A5124
	push ebx
	mov eax, edi
	lea ebx, [esp+8]
	call sub_487668
	mov edx, [esp]
	test edx, edx
	jnz loc_49C5DA
	xor eax, eax

loc_49C5BA:
	add esp, 0Ch
	pop edi
	pop esi
	pop ecx
	ret

loc_49C5C1:
	call sub_484D94
	mov ebx, eax
	mov eax, ecx
	call sub_48A980
	mov eax, ecx
	call sub_4848FC
	mov eax, ecx
	jmp loc_49C5BA

loc_49C5DA:
	mov ecx, 1C2h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	add eax, 190h
	call sub_4A5124
	mov edx, esi
	mov ebx, [esp]
	mov eax, [esp+8]
	call sub_487958
	mov eax, [esp]
	mov dword [dword_4DABEC], eax
	mov eax, [esp+8]
	call sub_487950
	mov eax, esi
	add esp, 0Ch
	pop edi
	pop esi
	pop ecx
	ret
;sub_49C580 endp

sub_49C618: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_49C580
	pop ebx
	ret
;sub_49C618 endp

sub_49C628: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_49C580
	pop ebx
	ret
;sub_49C628 endp

sub_49C890: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 4
	mov esi, dword [dword_4DD3A8]
	mov ecx, eax
	cmp dword [dword_4DD3AC], 0
	jz loc_49C911

loc_49C8AB:
	mov edi, dword [dword_4DD3AC]
	mov esi, dword [dword_4DD3A8]
	cmp edx, edi
	jle loc_49C8BD
	mov edx, edi

loc_49C8BD:
	cmp edx, esi
	jl loc_49C904
	lea ebx, [ecx+esi]
	lea eax, [esi-1]
	mov edi, eax
	dec ebx
	not edi
	and ebx, edi
	mov edi, ebx
	sub edi, ecx
	sub edx, edi
	add edx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	xor edi, edi
	mov [esp], eax
	test eax, eax
	jle loc_49C904

loc_49C8E6:
	mov edx, ebx
	xor eax, eax
	cmp ebx, ecx
	jb loc_49C8FA

loc_49C8EE:
	inc eax
	sub edx, esi
	cmp eax, 20h
	jge loc_49C8FA
	cmp edx, ecx
	jnb loc_49C8EE

loc_49C8FA:
	mov eax, [esp]
	inc edi
	add ebx, esi
	cmp edi, eax
	jl loc_49C8E6

loc_49C904:
	mov dword [dword_4DD3A8], esi
	add esp, 4
	pop edi
	pop esi
	pop ecx
	ret

loc_49C911:
	call sub_4A47D4
	mov dword [dword_4DD3AC], eax
	jmp loc_49C8AB
;sub_49C890 endp

sub_49C948: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 28h
	mov edi, eax
	mov esi, edx
	call sub_4A40A0
	mov dword [dword_563F00], eax
	call sub_4A40C0
	cmp dword [dword_4DD3A8], 0
	jz loc_49CA4A

loc_49C96F:
	call sub_4A47B0
	sub eax, ebx
	and al, 0F0h
	mov [esp+24h], eax
	test esi, esi
	jnz loc_49CA62

loc_49C984:
	xor ebx, ebx
	mov dword [dword_4DB1F8], ebx
	xor ecx, ecx

loc_49C98E:
	lea eax, [esp+24h]
	call sub_49CAD4
	mov dword [dword_4DB1F8], eax
	test eax, eax
	jnz loc_49C9BA
	mov esi, [esp+24h]
	cmp esi, 80000h
	jl loc_49CA42
	lea ebp, [esi-80000h]
	mov [esp+24h], ebp

loc_49C9BA:
	mov eax, dword [dword_4DB1F8]
	cmp ecx, eax
	jz loc_49C98E
	mov esi, eax
	mov eax, [esp+24h]
	lea ebp, 0[edi*4]
	add eax, esi
	mov edx, edi
	mov dword [dword_4DB1F4], eax
	mov eax, esi
	call sub_484D40
	push 0
	add ebp, edi
	push 0
	shl ebp, 3
	mov eax, aMb_ram ; "MB_RAM"
	push 10h
	mov ecx, dword [dword_4DB1F4]
	mov ebx, dword [dword_4DB1F8]
	push 10h
	xor edx, edx
	add ebx, ebp
	call sub_48438C
	push 0
	push 0
	push 1000h
	mov edx, 300h
	mov eax, aMb_vmm ; "MB_VMM"
	push 1000h
	xor ecx, ecx
	xor ebx, ebx
	call sub_48438C
	mov ecx, dword [dword_4DB1F4]
	mov edx, dword [dword_4DB1F8]
	mov eax, dword [dword_563F00]
	sub ecx, edx
	call sub_4A40C8
	mov eax, ecx

loc_49CA42:
	add esp, 28h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49CA4A:
	mov eax, esp
	push eax ; lpSystemInfo
	call GetSystemInfo_wrap
	mov eax, [esp+4]
	mov dword [dword_4DD3A8], eax
	jmp loc_49C96F

loc_49CA62:
	cmp esi, eax
	jge loc_49C984
	and si, 0FFF0h
	mov [esp+24h], esi
	jmp loc_49C984
;sub_49C948 endp

sub_49CABC: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_49C948
	pop ebx
	ret
;sub_49CABC endp

sub_49CAD4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	sub esp, 24h
	mov ebx, eax
	mov edx, dword [dword_4DD3A8]
	xor esi, esi
	test edx, edx
	jz loc_49CB21

loc_49CAEC:
	mov ecx, dword [dword_4DD3A8]
	mov edx, [ebx]
	add edx, ecx
	dec edx
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	imul eax, ecx
	mov [ebx], eax
	add eax, esi

	push 1
	push eax
	call calloc_wrap
	add esp, 8

	add esp, 24h
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49CB21:
	mov eax, esp
	push eax ; lpSystemInfo
	call GetSystemInfo_wrap
	mov eax, [esp+4]
	mov dword [dword_4DD3A8], eax
	jmp loc_49CAEC
;sub_49CAD4 endp

sub_49D020: ;SUBROUTINE
	push ebx
	push edx
	xor eax, eax
	call sub_489A88
	cmp dword [dword_4DAB5C], 0
	jnz loc_49D051
	mov ebx, dword [dword_4DAB84]
	mov edx, dword [dword_4DAB80]
	mov eax, dword [dword_4DAB7C]
	call sub_428C60

loc_49D051:
	cmp dword [dword_4DAB5C], 0
	jnz loc_49D069
	pop edx
	pop ebx
	ret

loc_49D069:
	mov ebx, dword_4DF07C
	mov edx, 100h
	xor eax, eax
	call sub_4A02E8
	mov eax, dword [dword_4DABCC]
	call sub_483C18
	call sub_4879D0
;	call sub_487BF4
	call sub_4B09C0
	mov eax, dword_4DF380 ; "FNTF"
	call sub_487060
	mov eax, 0FF000000h
	call sub_48266C
	mov edx, eax
	mov eax, 0FFFFFFFFh
	call sub_48266C
	call sub_486560
	cmp dword [dword_4DAB60], 0
	jnz loc_49D0C6
	call sub_423080

loc_49D0C6:
	push ecx
	call sub_486EE8
	call sub_4B0A20
	mov eax, sub_4A1080
	call sub_4A1080
	mov eax, sub_486E44
	mov edx, 14h
	call sub_486E54
	call fn_init ; .fn_init(void)
	call sub_4B0BCC
	mov eax, 1Eh
	mov ecx, dword [dword_4DAB80]
	mov ebx, dword [dword_4DAB7C]
	call sub_4A0704
	xor edx, edx
	xor eax, eax
	call sub_4A05A0
	pop ecx
	pop edx
	pop ebx
	ret
;sub_49D020 endp

sub_49D180: ;SUBROUTINE
	cmp byte [eax+1], 3Ah
	jz loc_49D18C
	mov eax, 0FFFFFFFFh
	ret

loc_49D18C:
	push edx
	mov al, [eax]
	and eax, 0FFh
	lea edx, [eax-61h]
	cmp edx, 1Ah
	sbb edx, edx
	and edx, 20h
	sub eax, edx
	sub eax, 41h
	pop edx
	ret
;sub_49D180 endp

strstr_: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov ebx, edx
	cmp byte [edx], 0
	jnz loc_49D219

loc_49D212:
	mov eax, esi
	jmp loc_49D2B6

loc_49D219:
	cmp byte [edx+1], 0
	jnz loc_49D23B
	mov dl, [ebx]

loc_49D221:
	mov al, [esi]
	cmp al, dl
	jz loc_49D239
	cmp al, 0
	jz loc_49D237
	inc esi
	mov al, [esi]
	cmp al, dl
	jz loc_49D239
	inc esi
	cmp al, 0
	jnz loc_49D221

loc_49D237:
	sub esi, esi

loc_49D239:
	jmp loc_49D212

loc_49D23B:
	mov ecx, 0FFFFFFFFh
	mov edi, esi
	xor al, al
	push es
	jecxz loc_49D250
	mov edx, ds
	mov es, dx
	repne scasb
	jnz loc_49D250
	dec edi
	jmp loc_49D252

loc_49D250:
	mov edi, ecx

loc_49D252:
	pop es
	mov [esp], edi
	mov edi, ebx
	push es
	mov eax, ds
	mov es, ax
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	pop es
	mov ebp, ecx

loc_49D26C:
	mov ecx, [esp]
	sub ecx, esi
	cmp ecx, ebp
	jb loc_49D2B4
	mov edi, esi
	mov al, [ebx]
	push es
	jecxz loc_49D285
	mov edx, ds
	mov es, dx
	repne scasb
	jnz loc_49D285
	dec edi
	jmp loc_49D287

loc_49D285:
	mov edi, ecx

loc_49D287:
	pop es
	mov edx, edi
	test edi, edi
	jz loc_49D2B4
	mov ecx, ebp
	mov edi, ebx
	mov esi, edx
	push es
	mov eax, ds
	mov es, ax
	xor eax, eax
	repe cmpsb
	jz loc_49D2A6
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_49D2A6:
	pop es
	test eax, eax
	jnz loc_49D2AF
	mov eax, edx
	jmp loc_49D2B6

loc_49D2AF:
	lea esi, [edx+1]
	jmp loc_49D26C

loc_49D2B4:
	xor eax, eax

loc_49D2B6:
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;strstr_ endp

sub_49D2C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 8
	mov ecx, eax
	mov edi, edx
	mov esi, ebx
	lea ebx, [esp+4]
	mov edx, esp
	sar eax, 6
	and ecx, 3Fh
	call sub_49EA20
	imul eax, ecx, 6487Eh
	mov ecx, [esp+4]
	sar eax, 9
	sar ecx, 2
	imul ecx, eax
	mov edx, [esp]
	sar ecx, 15h
	add edx, ecx
	mov [edi], edx
	mov edx, [esp]
	mov ecx, eax
	sar edx, 2
	imul ecx, edx
	mov eax, [esp+4]
	sar ecx, 15h
	sub eax, ecx
	mov [esi], eax
	add esp, 8
	pop edi
	pop esi
	pop ecx
	ret
;sub_49D2C0 endp

sub_49D320: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	xor edx, edx
	test eax, eax
	jnz loc_49D32F

loc_49D32A:
	mov eax, edx
	pop ecx
	pop ebx
	ret

loc_49D32F:
	mov ecx, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 0C0FBh
	jnz loc_49D354
	mov edx, 1
	mov eax, edx
	pop ecx
	pop ebx
	ret

loc_49D354:
	mov ecx, 4
	mov eax, ebx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp eax, 42494746h
	jnz loc_49D32A
	mov edx, 2
	mov eax, edx
	pop ecx
	pop ebx
	ret
;sub_49D320 endp

sub_49D37C: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_49D320
	cmp eax, 1
	jb loc_49D390
	jbe loc_49D394
	cmp eax, 2
	jz loc_49D3B0

loc_49D390:
	xor eax, eax
	pop ecx
	ret

loc_49D394:
	lea eax, [ecx+2]
	mov ecx, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	add eax, 4
	pop ecx
	ret

loc_49D3B0:
	lea eax, [ecx+0Ch]
	mov ecx, 4
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	pop ecx
	ret
;sub_49D37C endp

sub_49D3CC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov ebp, edx
	mov [esp+4], ebx
	mov [esp], ecx
	mov ecx, [esp+24h]
	xor edx, edx
	mov [esp+0Ch], edx
	mov edx, ecx
	mov ebx, edi
	call sub_49D37C
	mov edx, ecx
	add ebx, eax
	mov eax, edi
	mov [esp+8], ebx
	call sub_49D320
	cmp eax, 1
	jnb loc_49D42B

loc_49D404:
	mov edi, [esp]
	test edi, edi
	jz loc_49D411
	mov dword [edi], 0

loc_49D411:
	mov ebp, [esp+20h]
	test ebp, ebp
	jz loc_49D420
	mov dword [ebp+0], 0

loc_49D420:
	xor eax, eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_49D42B:
	ja loc_49D4A8
	mov esi, [esp+8]
	lea ebx, [edi+6]
	cmp ebx, esi
	jnb loc_49D404

loc_49D43C:
	test ebp, ebp
	jnz loc_49D524

loc_49D444:
	test ebp, ebp
	jnz loc_49D5A4
	mov eax, [esp+0Ch]
	cmp eax, [esp+4]
	jnz loc_49D5A4

loc_49D45A:
	cmp dword [esp], 0
	jz loc_49D47B
	mov ecx, 3
	mov eax, ebx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, [esp]
	mov [ecx], eax

loc_49D47B:
	mov esi, [esp+20h]
	test esi, esi
	jz loc_49D49C
	mov ecx, 3
	lea eax, [ebx+3]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi], eax

loc_49D49C:
	lea eax, [ebx+6]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_49D4A8:
	cmp eax, 2
	jnz loc_49D404
	mov ecx, [esp+8]
	lea ebx, [edi+10h]
	cmp ebx, ecx
	jnb loc_49D404

loc_49D4C0:
	test ebp, ebp
	jnz loc_49D5E6
	mov eax, [esp+0Ch]
	cmp eax, [esp+4]
	jnz loc_49D5E6

loc_49D4D6:
	cmp dword [esp], 0
	jz loc_49D4F7
	mov ecx, 4
	mov eax, ebx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, [esp]
	mov [ecx], eax

loc_49D4F7:
	mov esi, [esp+20h]
	test esi, esi
	jz loc_49D518
	mov ecx, 4
	lea eax, [ebx+4]
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov [esi], eax

loc_49D518:
	lea eax, [ebx+8]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_49D524:
	mov edx, [esp+8]
	mov esi, ebp
	mov edi, ebx
	mov esi, [esi]
	or esi, 20202020h

loc_49D534:
	cmp edi, edx
	jge loc_49D59D
	mov eax, [edi+6]
	or eax, 20202020h
	cmp eax, esi
	jz loc_49D59D
	mov eax, [edi+0Ah]
	lea edi, [edi+0Eh]
	sub eax, 1010101h
	and eax, 80808080h
	jnz loc_49D578
	mov eax, [edi]
	lea edi, [edi+4]
	sub eax, 1010101h
	and eax, 80808080h
	jnz loc_49D578

loc_49D567:
	mov eax, [edi]
	lea edi, [edi+4]
	sub eax, 1010101h
	and eax, 80808080h
	jz loc_49D567

loc_49D578:
	mov al, [edi-4]
	lea edi, [edi-3]
	cmp al, 0
	jz loc_49D534
	mov al, [edi]
	lea edi, [edi+1]
	cmp al, 0
	jz loc_49D534
	mov al, [edi]
	lea edi, [edi+1]
	cmp al, 0
	jz loc_49D534
	mov al, [edi]
	lea edi, [edi+1]
	cmp al, 0
	jz loc_49D534

loc_49D59D:
	mov ebx, edi
	jmp loc_49D444

loc_49D5A4:
	test ebp, ebp
	jz loc_49D5BA
	lea eax, [ebx+6]
	mov edx, ebp
	call stricmp_
	test eax, eax
	jz loc_49D45A

loc_49D5BA:
	lea edi, [ebx+6]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edi, [esp+0Ch]
	mov eax, [esp+8]
	add ebx, ecx
	inc edi
	add ebx, 7
	mov [esp+0Ch], edi
	cmp ebx, eax
	jb loc_49D43C
	jmp loc_49D404

loc_49D5E6:
	test ebp, ebp
	jz loc_49D5FC
	lea eax, [ebx+8]
	mov edx, ebp
	call stricmp_
	test eax, eax
	jz loc_49D4D6

loc_49D5FC:
	lea edi, [ebx+8]
	sub ecx, ecx
	dec ecx
	xor eax, eax
	repne scasb
	not ecx
	dec ecx
	mov edi, [esp+0Ch]
	mov eax, [esp+8]
	add ebx, ecx
	inc edi
	add ebx, 9
	mov [esp+0Ch], edi
	cmp ebx, eax
	jb loc_49D4C0
	jmp loc_49D404
;sub_49D3CC endp

sub_49D628: ;SUBROUTINE
	push ecx
	sub esp, 4
	push ebx
	push dword_570D88
	lea ecx, [esp+8]
	xor ebx, ebx
	call sub_49D3CC
	mov eax, [esp]
	add esp, 4
	pop ecx
	ret
;sub_49D628 endp

sub_49D664: ;SUBROUTINE
	push ecx
	push esi
	mov ecx, eax
	call sub_49D628
	xor esi, esi
	test eax, eax
	jz loc_49D676
	lea esi, [ecx+eax]

loc_49D676:
	mov eax, esi
	pop esi
	pop ecx
	ret
;sub_49D664 endp

sub_49D67C: ;SUBROUTINE
	push ebx
	mov ebx, 1
	call sub_49D664
	pop ebx
	ret
;sub_49D67C endp

sub_49D76C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	sub esp, 4
	mov esi, eax
	push 0
	lea ecx, [esp+4]
	push dword_570D88
	mov ebx, edx
	xor edx, edx
	call sub_49D3CC
	test eax, eax
	jz loc_49D791
	mov eax, [esp]
	add eax, esi

loc_49D791:
	add esp, 4
	pop esi
	pop ecx
	pop ebx
	ret
;sub_49D76C endp

sub_49D7E0: ;SUBROUTINE
	push ebx
	push ecx
	xor ebx, ebx
	mov ecx, edx
	mov edx, eax
	or ecx, ecx
	jge loc_49D7F1
	or ebx, 8
	neg ecx

loc_49D7F1:
	or edx, edx
	jge loc_49D7FA
	or ebx, 10h
	neg edx

loc_49D7FA:
	cmp edx, ecx
	jl loc_49D805
	jz loc_49D81D
	xchg edx, ecx
	or ebx, 4

loc_49D805:
	xor eax, eax
	div ecx
	shr eax, 18h
	adc eax, 0
	movzx eax, byte byte_4DFC78[eax]
	jmp off_49D829[ebx]

loc_49D81D:
	mov eax, 80h
	jmp off_49D829[ebx]

loc_49D849:
	neg eax
	add eax, 100h

loc_49D850:
	pop ecx
	pop ebx
	ret

loc_49D853:
	neg eax
	add eax, 200h
	pop ecx
	pop ebx
	ret

loc_49D85D:
	add eax, 100h
	pop ecx
	pop ebx
	ret

loc_49D865:
	neg eax
	pop ecx
	pop ebx
	ret

loc_49D86A:
	sub eax, 100h
	pop ecx
	pop ebx
	ret

loc_49D872:
	sub eax, 200h
	pop ecx
	pop ebx
	ret

loc_49D87A:
	neg eax
	sub eax, 100h
	pop ecx
	pop ebx
	ret
;sub_49D7E0 endp

off_49D829: dd loc_49D850
	dd loc_49D849
	dd loc_49D853
	dd loc_49D85D
	dd loc_49D865
	dd loc_49D86A
	dd loc_49D872
	dd loc_49D87A

sub_49D890: ;SUBROUTINE
	push ecx
	cmp eax, edx
	jnz loc_49D8BB
	mov ecx, [eax+4]
	mov edx, [edx+0Ch]
	mov [eax+0Ch], ecx
	mov [eax+4], edx
	mov ecx, [eax+8]
	mov edx, [eax+18h]
	mov [eax+18h], ecx
	mov [eax+8], edx
	mov ecx, [eax+14h]
	mov edx, [eax+1Ch]
	mov [eax+1Ch], ecx
	mov [eax+14h], edx
	pop ecx
	ret

loc_49D8BB:
	mov ecx, [eax]
	mov [edx], ecx
	mov ecx, [eax+0Ch]
	mov [edx+4], ecx
	mov ecx, [eax+18h]
	mov [edx+8], ecx
	mov ecx, [eax+4]
	mov [edx+0Ch], ecx
	mov ecx, [eax+10h]
	mov [edx+10h], ecx
	mov ecx, [eax+1Ch]
	mov [edx+14h], ecx
	mov ecx, [eax+8]
	mov [edx+18h], ecx
	mov ecx, [eax+14h]
	mov [edx+1Ch], ecx
	mov eax, [eax+20h]
	mov [edx+20h], eax
	pop ecx
	ret
;sub_49D890 endp

sub_49D984: ;SUBROUTINE
	push ebx
	xor ebx, ebx
	call sub_49D990
	pop ebx
	ret
;sub_49D984 endp

sub_49D990: ;SUBROUTINE
	call sub_49D9B8
	test eax, eax
	jz locret_49D99B
	mov eax, [eax]

locret_49D99B:
	ret
;sub_49D990 endp

sub_49D9B8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov [esp+0Ch], edx
	mov edi, ebx
	xor edx, edx
	mov [esp+8], edx
	call sub_4A4624
	mov [esp+10h], eax
	test eax, eax
	jz loc_49D9F3

loc_49D9DA:
	cmp dword [dword_4DDD50], 0
	jnz loc_49DA88
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_49D9F3:
	lea ecx, [esp+8]
	mov edx, esp
	push ebx
	mov eax, esi
	lea ebx, [esp+8]
	call sub_487854
	mov ebp, eax
	test eax, eax
	jz loc_49D9DA
	call sub_49E9A4
	test eax, eax
	jnz loc_49DA54
	test ebp, ebp
	jz loc_49DA4A
	cmp dword [esp+8], 0
	jz loc_49DA4A
	mov ebx, [esp+0Ch]
	mov edx, [esp+8]
	mov ecx, edi
	mov eax, esi
	call sub_4844D4
	mov [esp+10h], eax
	test eax, eax
	jz loc_49DA4A
	mov ebx, [esp+8]
	call sub_4844D0
	mov edx, eax
	mov eax, ebp
	call sub_48A980

loc_49DA4A:
	mov eax, [esp]
	call sub_487950
	jmp loc_49D9DA

loc_49DA54:
	mov ebx, [esp+0Ch]
	mov ecx, edi
	mov edx, eax
	mov eax, esi
	call sub_4844D4
	mov [esp+10h], eax
	test eax, eax
	jz loc_49DA4A
	call sub_4844D0
	mov ebx, edi
	mov edx, eax
	mov eax, ebp
	call sub_49E8F0
	mov eax, [esp]
	call sub_487950
	jmp loc_49D9DA

loc_49DA88:
	mov ebx, [esp+0Ch]
	mov eax, [esp+10h]
	mov ecx, edi
	mov edx, esi
	call dword [dword_4DDD50]
	mov [esp+10h], eax
	mov eax, [esp+10h]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49D9B8 endp

sub_49DAB0: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp byte [byte_4DDA74], 0
	jz loc_49DACC
	test edx, edx
	jl loc_49DAC5
	cmp edx, 7Fh
	jle loc_49DAD3

loc_49DAC5:
	mov eax, 0FFFFFFF8h
	pop edx
	ret

loc_49DACC:
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_49DAD3:
	push ecx
	push ebx
	call sub_4A5360
	mov ebx, dword_59BFB0
	mov byte [byte_59C60D], dl
	xor ecx, ecx

loc_49DAE7:
	cmp byte [ebx+0Ch], 1
	jnz loc_49DB06
	cmp dword [ebx], 0
	jl loc_49DB06
	mov eax, ecx
	call sub_4A8BF0
	mov edx, [ebx+2Eh]
	mov eax, ecx
	sar edx, 18h
	call sub_4894A4

loc_49DB06:
	inc ecx
	add ebx, 60h
	cmp ecx, 10h
	jl loc_49DAE7
	call sub_4A5374
	xor eax, eax
	pop ebx
	pop ecx
	pop edx
	ret
;sub_49DAB0 endp

sub_49DB20: ;SUBROUTINE
	push edx
	xor edx, edx

loc_49DB23:
	mov eax, dword dword_59BFB0[edx]
	add edx, 60h
	call sub_489840
	cmp edx, 600h
	jnz loc_49DB23
	pop edx
	ret
;sub_49DB20 endp

sub_49DB40: ;SUBROUTINE
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ebp, edx
	mov edi, ebx
	mov ebx, ecx
	mov ecx, [esp+10h]
	test eax, eax
	jl loc_49DB58
	cmp eax, 1
	jl loc_49DB63

loc_49DB58:
	mov eax, 0FFFFFFF8h

loc_49DB5D:
	pop ebp
	pop edi
	pop esi
	ret 4

loc_49DB63:
	shl eax, 4
	add eax, dword_59BFA0
	mov [eax], edi
	mov [eax+8], ebx
	mov edx, edi
	mov [eax+0Ch], ecx
	mov eax, esi
	call sub_488B24
	cmp byte [byte_4DDA74], 0
	jz loc_49DB9E
	test eax, eax
	jl loc_49DB5D

loc_49DB89:
	test edi, edi
	jnz loc_49DB8F
	xor ebp, ebp

loc_49DB8F:
	mov edx, ebp
	mov eax, esi
	call sub_49DBA8
	pop ebp
	pop edi
	pop esi
	ret 4

loc_49DB9E:
	test eax, eax
	jge loc_49DB89
	pop ebp
	pop edi
	pop esi
	ret 4
;sub_49DB40 endp

sub_49DBA8: ;SUBROUTINE
	push edi
	mov edi, eax
	test eax, eax
	jl loc_49DBBD
	cmp eax, 1
	jge loc_49DBBD
	test edx, edx
	jl loc_49DBBD
	cmp edx, 7Fh
	jle loc_49DBC4

loc_49DBBD:
	mov eax, 0FFFFFFF8h

loc_49DBC2:
	pop edi
	ret

loc_49DBC4:
	shl eax, 4
	mov dword dword_59BFA4[eax], edx
	mov eax, edi
	call sub_488B30
	test eax, eax
	jl loc_49DBC2
	push esi
	push ecx
	push ebx
	mov esi, edi
	xor ecx, ecx

loc_49DBDF:
	imul eax, ecx, 60h
	mov edx, edi
	mov ebx, dword dword_59BFE6[esi]
	add esi, 60h
	sar ebx, 18h
	mov eax, dword dword_59BFB0[eax]
	inc ecx
	call sub_4B0BE0
	cmp ecx, 10h
	jl loc_49DBDF
	xor eax, eax
	pop ebx
	pop ecx
	pop esi
	pop edi
	ret
;sub_49DBA8 endp

sub_49DC10: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp word [dword_4DD448], 0
	jl loc_49DCE4
	movsx eax, word [word_4DD3B8]
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, dword [dword_4DD454]
	add eax, edx
	xor edx, edx
	mov dl, [eax]
	mov eax, dword [dword_4DD450]
	mov al, [eax+7]
	and eax, 0FFh
	imul eax, edx
	movsx edx, word [dword_4DD448]
	add eax, edx
	mov edx, dword [dword_4DD3C0]
	mov al, [edx+eax]
	xor ah, ah
	mov word [word_4DD3B8], ax
	mov eax, dword [dword_4DD44C]
	mov dword [dword_4DD448], eax
	mov word [dword_4DD44C], 0FFFFh
	xor ecx, ecx
	mov word [dword_4DD44C+2], cx

loc_49DC84:
	inc dword [dword_4DD3BC]
	movsx eax, word [word_4DD3B8]
	shl eax, 2
	mov edx, dword [dword_4DD3C4]
	mov ecx, 4
	add eax, edx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov edx, eax
	mov eax, dword_4DD3C8
	call sub_4959EC
	movsx eax, word [word_4DD3B8]
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, dword [dword_4DD454]
	cmp byte [edx+eax+1], 0
	jbe loc_49DD78

loc_49DCDE:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_49DCE4:
	xor edx, edx
	xor eax, eax

loc_49DCE8:
	movsx ecx, word [word_4DD3B8]
	imul ecx, 1Ch
	mov ebx, dword [dword_4DD454]
	mov cl, [ecx+ebx+1]
	and ecx, 0FFh
	cmp edx, ecx
	jge loc_49DC84
	movsx ecx, word [word_4DD3B8]
	imul ecx, 1Ch
	mov ebx, dword [dword_4DD454]
	add ecx, ebx
	mov bl, byte [byte_4DD3BA]
	cmp bl, [ecx+eax+4]
	jge loc_49DD2E

loc_49DD28:
	add eax, 3
	inc edx
	jmp loc_49DCE8

loc_49DD2E:
	movsx ebx, word [word_4DD3B8]
	imul ebx, 1Ch
	mov ecx, dword [dword_4DD454]
	add ecx, ebx
	mov bl, byte [byte_4DD3BA]
	cmp bl, [ecx+eax+5]
	jg loc_49DD28
	movsx edx, word [word_4DD3B8]
	shl edx, 2
	mov ecx, edx
	shl edx, 3
	sub edx, ecx
	mov ecx, edx
	mov edx, dword [dword_4DD454]
	add edx, ecx
	mov al, [edx+eax+6]
	xor ah, ah
	mov word [word_4DD3B8], ax
	jmp loc_49DC84

loc_49DD78:
	cmp word [dword_4DD448], 0
	jge loc_49DCDE
	xor ecx, ecx
	mov dword [dword_4DDA80], ecx
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49DC10 endp

sub_49DD94: ;SUBROUTINE
	push edx
	call sub_496090
	cmp eax, dword [dword_4DD3BC]
	jge loc_49DDA4

loc_49DDA2:
	pop edx
	ret

loc_49DDA4:
	xor edx, edx
	mov dx, word [word_4DD3B6]
	call sub_495C28
	cmp eax, edx
	jge loc_49DDA2
	call sub_49DC10
	pop edx
	ret
;sub_49DD94 endp

sub_49DDC0: ;SUBROUTINE
	test eax, eax
	jnz loc_49DDCA
	mov ax, word [word_4DD3B4]

loc_49DDCA:
	mov word [word_4DD3B6], ax
	ret
;sub_49DDC0 endp

sub_49DDD4: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jz loc_49DDFF
	cmp dword [dword_4DD450], 0
	jnz loc_49DE05
	mov dword [dword_4DD450], eax
	cmp dword [eax], 78444650h
	jnz loc_49DE0B
	cmp byte [eax+4], 0
	jz loc_49DE11
	mov eax, 0FFFFFFF5h
	ret

loc_49DDFF:
	mov eax, 0FFFFFFF6h
	ret

loc_49DE05:
	mov eax, 0FFFFFFFFh
	ret

loc_49DE0B:
	mov eax, 0FFFFFFF9h
	ret

loc_49DE11:
	push edx
	push ecx
	push ebx
	lea edx, [eax+0Ch]
	xor ecx, ecx
	mov dword [dword_4DD454], edx
	mov cl, [eax+6]
	shl ecx, 2
	lea edx, 0[ecx*8]
	sub edx, ecx
	mov ecx, edx
	mov edx, dword [dword_4DD454]
	add edx, ecx
	mov dword [dword_4DD3C0], edx
	xor edx, edx
	mov dl, [eax+0Bh]
	mov al, [eax+7]
	and eax, 0FFh
	imul eax, edx
	mov edx, dword [dword_4DD3C0]
	mov ebx, sub_49DFEC
	add edx, eax
	mov dword [dword_4DDAA0], ebx
	mov dword [dword_4DD3C4], edx
	xor eax, eax
	pop ebx
	pop ecx
	pop edx
	ret
;sub_49DDD4 endp

sub_49DE70: ;SUBROUTINE
	push ecx
	sub esp, 10h
	mov ecx, edx
	cmp byte [byte_4DDA74], 0
	jz loc_49DF3F
	mov dword [dword_4DD458], eax
	mov word [word_4DD3B4], bx
	mov word [word_4DD3B6], bx
	mov edx, 0FFFFFFFFh
	xor eax, eax

loc_49DE9D:
	add eax, 4
	mov word word_4DD444[eax], dx
	xor ebx, ebx
	mov word word_4DD446[eax], bx
	cmp eax, 8
	jnz loc_49DE9D
	push edi
	push esi
	xor dh, dh
	mov byte [byte_4DD3BA], dh
	mov eax, dword [dword_4DD450]
	mov al, [eax+5]
	xor ah, ah
	mov word [word_4DD3B8], ax
	call sub_496090
	mov dword [dword_4DD3BC], eax
	mov edi, dword_4DD3C8
	mov esi, ecx
	push edi

loc_49DEE1:
	mov al, [esi]
	mov [edi], al
	cmp al, 0
	jz loc_49DEF9
	mov al, [esi+1]
	add esi, 2
	mov [edi+1], al
	add edi, 2
	cmp al, 0
	jnz loc_49DEE1

loc_49DEF9:
	pop edi
	inc dword [dword_4DD3BC]
	lea eax, [esp+8]
	call sub_485380
	mov eax, dword [dword_4DD458]
	lea edx, [esp+8]
	call sub_4958D0
	mov eax, ecx
	xor edx, edx
	mov ebx, sub_49DDC0
	call sub_4959EC
	mov ecx, sub_49DD94
	mov dword [dword_4DCFE0], ebx
	xor eax, eax
	mov dword [dword_4DDA80], ecx
	pop esi
	pop edi
	add esp, 10h
	pop ecx
	ret

loc_49DF3F:
	mov eax, 0FFFFFFF6h
	add esp, 10h
	pop ecx
	ret
;sub_49DE70 endp

sub_49DF4C: ;SUBROUTINE
	test eax, eax
	jl loc_49DF55
	cmp eax, 7Fh
	jle loc_49DF5B

loc_49DF55:
	mov eax, 0FFFFFFF8h
	ret

loc_49DF5B:
	mov byte [byte_4DD3BA], al
	xor eax, eax
	ret
;sub_49DF4C endp

sub_49DF64: ;SUBROUTINE
	push ecx
	cmp byte [byte_4DDA74], 0
	jz loc_49DFA5
	test eax, eax
	jl loc_49DFAC
	mov ecx, dword [dword_4DD450]
	mov cl, [ecx+7]
	and ecx, 0FFh
	cmp eax, ecx
	jge loc_49DFAC
	cmp edx, 1
	jz loc_49DFB3
	cmp word [dword_4DD448+2], 1
	jnz loc_49DFD8
	mov word [dword_4DD44C], ax
	mov word [dword_4DD44C+2], dx
	xor eax, eax
	pop ecx
	ret

loc_49DFA5:
	mov eax, 0FFFFFFF6h
	pop ecx
	ret

loc_49DFAC:
	mov eax, 0FFFFFFF8h
	pop ecx
	ret

loc_49DFB3:
	push esi
	mov word [dword_4DD448], ax
	mov word [dword_4DD448+2], dx
	mov word [dword_4DD44C], 0FFFFh
	xor esi, esi
	mov word [dword_4DD44C+2], si
	pop esi
	xor eax, eax
	pop ecx
	ret

loc_49DFD8:
	mov word [dword_4DD448], ax
	mov word [dword_4DD448+2], dx
	xor eax, eax
	pop ecx
	ret
;sub_49DF64 endp

sub_49DFEC: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jnz loc_49DFFB
	mov eax, 0FFFFFFF6h
	ret

loc_49DFFB:
	push edx
	call sub_495990
	xor edx, edx
	xor eax, eax
	mov dword [dword_4DDA80], edx
	mov dword [dword_4DD450], edx
	mov dword [dword_4DCFE0], edx
	mov dword [dword_4DDAA0], edx
	pop edx
	ret
;sub_49DFEC endp

sub_49E020: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	sub esp, 4
	mov [esp], edx
	call sub_4A576C
	mov ecx, eax
	test eax, eax
	jl loc_49E08F
	lea edx, 0[eax*4]
	sub edx, eax
	shl edx, 5
	add edx, dword_59BFB0
	movzx esi, byte [edx+3Bh]
	test esi, esi
	jz loc_49E0B9
	mov ecx, dword_59BFB0
	mov ebp, [esp]
	xor ebx, ebx

loc_49E05D:
	xor edx, edx
	mov dl, [ecx+3Bh]
	cmp edx, esi
	jnz loc_49E07A
	cmp byte [ecx+0Ch], 1
	jnz loc_49E07A
	cmp dword [ecx], 0
	jl loc_49E07A
	xor edx, esi
	mov dl, [ecx+33h]
	cmp edx, ebp
	jnz loc_49E096

loc_49E07A:
	inc ebx
	add ecx, 60h
	cmp ebx, 10h
	jl loc_49E05D

loc_49E083:
	xor edx, edx

loc_49E085:
	mov eax, edx
	add esp, 4
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_49E08F:
	mov edx, 0FFFFFFF8h
	jmp loc_49E085

loc_49E096:
	cmp word [ecx+42h], 0
	jz loc_49E07A
	mov al, [esp]
	mov [ecx+33h], al
	mov eax, ebx
	call sub_4B0D30
	mov edx, [ecx+10h]
	mov eax, ebx
	sar edx, 10h
	call sub_489690
	jmp loc_49E07A

loc_49E0B9:
	xor eax, eax
	mov ebx, [esp]
	mov al, [edx+33h]
	cmp eax, ebx
	jz loc_49E083
	cmp word [edx+42h], 0
	jz loc_49E083
	mov al, [esp]
	mov [edx+33h], al
	mov eax, ecx
	call sub_4B0D30
	mov edx, [edx+10h]
	mov eax, ecx
	sar edx, 10h
	call sub_489690
	xor edx, edx
	mov eax, edx
	add esp, 4
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret
;sub_49E020 endp

sub_49E0F4: ;SUBROUTINE
	push ecx
	mov ecx, eax
	cmp byte [byte_4DDA74], 0
	jz loc_49E110
	test edx, edx
	jl loc_49E109
	cmp edx, 7Fh
	jle loc_49E117

loc_49E109:
	mov eax, 0FFFFFFF8h
	pop ecx
	ret

loc_49E110:
	mov eax, 0FFFFFFF6h
	pop ecx
	ret

loc_49E117:
	call sub_4A5360
	mov eax, ecx
	call sub_49E020
	mov edx, eax
	call sub_4A5374
	mov eax, edx
	pop ecx
	ret
;sub_49E0F4 endp

sub_49E130: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 4
	mov ecx, eax
	mov edi, edx
	mov ebp, ebx
	mov ah, byte [byte_4DDA74]
	xor edx, edx
	test ah, ah
	jnz loc_49E154
	mov eax, 0FFFFFFF6h
	add esp, 4
	pop ebp
	pop edi
	pop ecx
	ret

loc_49E154:
	call sub_4A5360
	and edi, 0FFFFh
	mov eax, ecx
	and ebp, 0FFFFh
	call sub_4A576C
	mov ecx, eax
	test eax, eax
	jl loc_49E1D2
	push esi
	shl eax, 2
	sub eax, ecx
	shl eax, 5
	add eax, dword_59BFB0
	mov al, [eax+3Bh]
	and eax, 0FFh
	mov [esp+4], eax
	jz loc_49E1E3
	mov esi, dword_59BFB0
	xor ecx, ecx

loc_49E195:
	xor eax, eax
	mov ebx, [esp+4]
	mov al, [esi+3Bh]
	cmp eax, ebx
	jnz loc_49E1BA
	cmp byte [esi+0Ch], 1
	jnz loc_49E1BA
	cmp dword [esi], 0
	jl loc_49E1BA
	mov ebx, ebp
	mov edx, edi
	mov eax, ecx
	call sub_489404
	mov edx, eax

loc_49E1BA:
	inc ecx
	add esi, 60h
	cmp ecx, 10h
	jl loc_49E195
	call sub_4A5374
	mov eax, edx
	pop esi
	add esp, 4
	pop ebp
	pop edi
	pop ecx
	ret

loc_49E1D2:
	call sub_4A5374
	mov eax, 0FFFFFFF8h
	add esp, 4
	pop ebp
	pop edi
	pop ecx
	ret

loc_49E1E3:
	mov ebx, ebp
	mov edx, edi
	mov eax, ecx
	call sub_489404
	mov edx, eax
	call sub_4A5374
	mov eax, edx
	pop esi
	add esp, 4
	pop ebp
	pop edi
	pop ecx
	ret
;sub_49E130 endp

sub_49E200: ;SUBROUTINE
	push ecx
	push ebp
	sub esp, 8
	mov ecx, eax
	mov [esp+4], edx
	cmp byte [byte_4DDA74], 0
	jz loc_49E22A
	cmp edx, 7Fh
	jg loc_49E21D
	test edx, edx
	jge loc_49E231

loc_49E21D:
	mov edx, 0FFFFFFF8h

loc_49E222:
	mov eax, edx
	add esp, 8
	pop ebp
	pop ecx
	ret

loc_49E22A:
	mov edx, 0FFFFFFF6h
	jmp loc_49E222

loc_49E231:
	call sub_4A5360
	mov eax, ecx
	call sub_4A576C
	mov ecx, eax
	test eax, eax
	jl loc_49E2E9
	push edi
	push esi
	push ebx
	shl eax, 2
	sub eax, ecx
	shl eax, 5
	add eax, dword_59BFB0
	movzx edi, byte [eax+3Bh]
	sub edx, 40h
	test edi, edi
	jz loc_49E303
	mov ecx, dword_59BFB0
	mov [esp+0Ch], edx
	xor ebx, ebx
	xor ebp, ebp

loc_49E273:
	xor eax, eax
	mov al, [ecx+3Bh]
	mov esi, ecx
	cmp eax, edi
	jnz loc_49E2CE
	cmp byte [ecx+0Ch], 1
	jnz loc_49E2CE
	cmp ebp, [ecx]
	jg loc_49E2CE
	mov ah, [ecx+37h]
	mov edx, [esp+10h]
	cmp ah, 1
	jz loc_49E2A4
	mov edx, [ecx+34h]
	mov eax, [esp+0Ch]
	sar edx, 18h
	imul edx, eax
	add edx, 40h

loc_49E2A4:
	mov eax, [esi+2Fh]
	sar eax, 18h
	add edx, eax
	sub edx, 40h
	cmp edx, 7Fh
	jle loc_49E2FB
	mov edx, 7Fh

loc_49E2B9:
	mov eax, [esi+50h]
	cmp ebp, eax
	jz loc_49E2C4
	movsx edx, byte [edx+eax]

loc_49E2C4:
	mov eax, ebx
	mov [esi+0Fh], dl
	call sub_489354

loc_49E2CE:
	inc ebx
	add ecx, 60h
	cmp ebx, 10h
	jl loc_49E273
	call sub_4A5374
	xor edx, edx
	pop ebx
	pop esi
	pop edi
	mov eax, edx
	add esp, 8
	pop ebp
	pop ecx
	ret

loc_49E2E9:
	call sub_4A5374
	mov edx, 0FFFFFFF8h
	mov eax, edx
	add esp, 8
	pop ebp
	pop ecx
	ret

loc_49E2FB:
	test edx, edx
	jge loc_49E2B9
	mov edx, ebp
	jmp loc_49E2B9

loc_49E303:
	cmp byte [eax+37h], 1
	jz loc_49E319
	mov ebx, [eax+34h]
	sar ebx, 18h
	imul edx, ebx
	add edx, 40h
	mov [esp+10h], edx

loc_49E319:
	mov edx, [eax+2Fh]
	mov esi, [esp+10h]
	sar edx, 18h
	add edx, esi
	sub edx, 40h
	mov [esp+10h], edx
	cmp edx, 7Fh
	jle loc_49E372
	mov dword [esp+10h], 7Fh

loc_49E339:
	mov esi, [eax+50h]
	test esi, esi
	jz loc_49E34E
	mov edi, [esp+10h]
	lea edx, [esi+edi]
	movsx edx, byte [edx]
	mov [esp+10h], edx

loc_49E34E:
	mov dl, [esp+10h]
	mov [eax+0Fh], dl
	mov edx, [esp+10h]
	mov eax, ecx
	call sub_489354
	call sub_4A5374
	xor edx, edx
	pop ebx
	pop esi
	pop edi
	mov eax, edx
	add esp, 8
	pop ebp
	pop ecx
	ret

loc_49E372:
	test edx, edx
	jge loc_49E339
	xor edx, edx
	mov [esp+10h], edx
	jmp loc_49E339
;sub_49E200 endp

sub_49E380: ;SUBROUTINE
	push edx
	mov edx, 1
	call sub_49E39C
	pop edx
	ret
;sub_49E380 endp

sub_49E39C: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 0Ch
	lea ecx, [esp+8]
	push edx
	lea ebx, [esp+8]
	lea edx, [esp+4]
	call sub_487668
	mov edx, [esp]
	test edx, edx
	jnz loc_49E3C4
	mov eax, [esp+8]
	add esp, 0Ch
	pop ecx
	pop ebx
	ret

loc_49E3C4:
	mov eax, edx
	call sub_487950
	mov eax, [esp+8]
	add esp, 0Ch
	pop ecx
	pop ebx
	ret
;sub_49E39C endp

sub_49E3E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov esi, eax
	test eax, eax
	jg loc_49E3F1
	xor eax, eax

loc_49E3EC:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49E3F1:
	lea edx, [eax+0Ch]
	mov ebx, 300h
	mov eax, aGalloc ; "galloc"
	call sub_484498
	mov ecx, eax
	test eax, eax
	jz loc_49E3EC
	mov ebx, 4
	mov edx, eax
	mov eax, aGmem ; "GMEM"
	add ecx, 8
	call sub_48A980
	mov ebx, 4
	mov eax, aGend ; "GEND"
	lea edx, [ecx+esi]
	mov [ecx-4], esi
	call sub_48A980
	mov edx, dword [dword_4DD45C]
	inc edx
	mov eax, ecx
	mov dword [dword_4DD45C], edx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49E3E0 endp

sub_49E448: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov edx, eax
	mov ecx, 4
	mov edi, aGmem ; "GMEM"
	lea esi, [eax-8]
	mov ebx, [eax-4]
	xor eax, eax
	repe cmpsb
	jz loc_49E46B
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_49E46B:
	xor ebp, ebp
	test eax, eax
	jnz loc_49E4C8
	test ebx, ebx
	jle loc_49E4C8
	cmp ebx, 2000000h
	jge loc_49E4C8
	mov ecx, 4
	mov edi, aGend ; "GEND"
	lea esi, [edx+ebx]
	xor eax, eax
	repe cmpsb
	jz loc_49E495
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_49E495:
	test eax, eax
	jnz loc_49E4C8
	mov ebp, 1

loc_49E49E:
	mov ebx, 4
	lea ecx, [edx-8]
	mov eax, aGfre ; "GFRE"
	mov edx, ecx
	call sub_48A980
	mov eax, ecx
	call sub_4848FC
	dec dword [dword_4DD45C]
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49E4C8:
	test ebp, ebp
	jnz loc_49E49E
	mov ecx, 4
	mov edi, aGfre ; "GFRE"
	lea esi, [edx-8]
	xor eax, eax
	repe cmpsb
	jz loc_49E4E4
	sbb eax, eax
	sbb eax, 0FFFFFFFFh

loc_49E4E4:
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49E448 endp

sub_49E4F0: ;SUBROUTINE
	mov eax, [eax+8]
	ret
;sub_49E4F0 endp

sub_49E4F4: ;SUBROUTINE
	cmp edx, [eax+8]
	jnb loc_49E4FE
	add eax, [eax+edx*8+14h]
	ret

loc_49E4FE:
	xor eax, eax
	ret
;sub_49E4F4 endp

sub_49E520: ;SUBROUTINE
	push edx
	mov edx, eax
	test eax, eax
	jnz loc_49E52B

loc_49E527:
	xor eax, eax
	pop edx
	ret

loc_49E52B:
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	test edx, edx
	jz loc_49E527

loc_49E53A:
	mov eax, [edx]
	and eax, 0FFh
	cmp eax, 22h
	jz loc_49E57E
	cmp eax, 24h
	jz loc_49E57E
	cmp eax, 23h
	jz loc_49E57E
	cmp eax, 29h
	jz loc_49E57E
	cmp eax, 2Ah
	jz loc_49E57E
	cmp eax, 2Ch
	jz loc_49E57E
	cmp eax, 2Dh
	jz loc_49E57E
	cmp eax, 2Eh
	jz loc_49E57E
	mov eax, [edx]
	sar eax, 8
	test eax, eax
	jz loc_49E574
	add eax, edx

loc_49E574:
	mov edx, eax
	test eax, eax
	jnz loc_49E53A
	xor eax, eax
	pop edx
	ret

loc_49E57E:
	mov eax, edx
	pop edx
	ret
;sub_49E520 endp

sub_49E584: ;SUBROUTINE
	push edx
	mov edx, eax
	test eax, eax
	jnz loc_49E58F

loc_49E58B:
	xor eax, eax
	pop edx
	ret

loc_49E58F:
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	test edx, edx
	jz loc_49E58B

loc_49E59E:
	mov eax, [edx]
	and eax, 0FFh
	cmp eax, 7Ch
	jz loc_49E5BF
	mov eax, [edx]
	sar eax, 8
	test eax, eax
	jz loc_49E5B5
	add eax, edx

loc_49E5B5:
	mov edx, eax
	test eax, eax
	jnz loc_49E59E
	xor eax, eax
	pop edx
	ret

loc_49E5BF:
	lea eax, [edx+8]
	pop edx
	ret
;sub_49E584 endp

off_49E610: dd loc_49E654
	dd loc_49E6CE ; jump table for switch statement
	dd loc_49E6DB
	dd loc_49E6D0
	dd loc_49E6E8
	dd loc_49E6F0
	dd loc_49E6FB
	dd loc_49E706

sub_49E630: ;SUBROUTINE
	push ecx
	push esi
	sub esp, 8
	xor ecx, ecx
	test edx, edx
	jl loc_49E65A

loc_49E63B:
	test eax, eax
	jl loc_49E663

loc_49E63F:
	cmp eax, edx
	jnz loc_49E66A
	mov eax, 2000h
	cmp ecx, 7 ; switch 8 cases
	ja loc_49E654 ; jumptable 0049E64D default case
	jmp off_49E610[ecx*4] ; switch jump

loc_49E654:
	add esp, 8 ; jumptable 0049E64D default case
	pop esi
	pop ecx
	ret

loc_49E65A:
	mov ecx, 2
	neg edx
	jmp loc_49E63B

loc_49E663:
	or cl, 4
	neg eax
	jmp loc_49E63F

loc_49E66A:
	cmp edx, eax
	jge loc_49E677
	mov esi, eax
	or cl, 1
	mov eax, edx
	mov edx, esi

loc_49E677:
	push ebx
	push edx
	lea esi, [esp+8]
	mov edx, 20h
	call sub_4B1218
	mov edx, [esp+0Ch]
	push edx
	mov ebx, [esp+0Ch]
	push ebx
	call sub_4B0E94
	mov esi, eax
	shr eax, 18h
	lea edx, 0[eax*4]
	shr esi, 8
	mov eax, dword dword_4DFD7C[edx]
	mov edx, dword dword_4DFD80[edx]
	and esi, 0FFFFh
	sub edx, eax
	imul edx, esi
	shr edx, 10h
	add eax, edx
	pop ebx
	cmp ecx, 7 ; switch 8 cases
	ja loc_49E654 ; jumptable 0049E64D default case
	jmp off_49E610[ecx*4] ; switch jump

loc_49E6CE:
	neg eax ; jumptable 0049E64D case 1

loc_49E6D0:
	add eax, 4000h ; jumptable 0049E64D case 3
	add esp, 8
	pop esi
	pop ecx
	ret

loc_49E6DB:
	neg eax ; jumptable 0049E64D case 2
	add eax, 8000h
	add esp, 8
	pop esi
	pop ecx
	ret

loc_49E6E8:
	neg eax ; jumptable 0049E64D case 4
	add esp, 8
	pop esi
	pop ecx
	ret

loc_49E6F0:
	sub eax, 4000h ; jumptable 0049E64D case 5
	add esp, 8
	pop esi
	pop ecx
	ret

loc_49E6FB:
	add eax, 0FFFF8000h ; jumptable 0049E64D case 6
	add esp, 8
	pop esi
	pop ecx
	ret

loc_49E706:
	neg eax ; jumptable 0049E64D case 7
	sub eax, 4000h
	add esp, 8
	pop esi
	pop ecx
	ret
;sub_49E630 endp

sub_49E720: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 8
	mov ecx, eax
	mov eax, edx
	mov ebx, esp
	lea edx, [esp+4]
	call sub_49D2C0
	mov dword [ecx], 10000h
	mov dword [ecx+4], 0
	mov dword [ecx+8], 0
	mov dword [ecx+0Ch], 0
	mov eax, [esp]
	mov [ecx+10h], eax
	mov eax, [esp+4]
	mov dword [ecx+18h], 0
	mov [ecx+14h], eax
	mov eax, [esp+4]
	mov edx, eax
	mov [ecx+1Ch], eax
	neg edx
	mov [ecx+1Ch], edx
	mov eax, [esp]
	mov [ecx+20h], eax
	add esp, 8
	pop ecx
	pop ebx
	ret
;sub_49E720 endp

sub_49E780: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 8
	mov ecx, eax
	mov eax, edx
	mov ebx, esp
	lea edx, [esp+4]
	call sub_49D2C0
	mov eax, [esp]
	mov dword [ecx+4], 0
	mov [ecx], eax
	mov eax, [esp+4]
	mov dword [ecx+0Ch], 0
	mov dword [ecx+10h], 10000h
	mov dword [ecx+14h], 0
	mov edx, eax
	mov [ecx+8], eax
	neg edx
	mov [ecx+8], edx
	mov eax, [esp+4]
	mov dword [ecx+1Ch], 0
	mov [ecx+18h], eax
	mov eax, [esp]
	mov [ecx+20h], eax
	add esp, 8
	pop ecx
	pop ebx
	ret
;sub_49E780 endp

sub_49E7E0: ;SUBROUTINE
	push ebx
	push ecx
	sub esp, 8
	mov ecx, eax
	mov eax, edx
	mov ebx, esp
	lea edx, [esp+4]
	call sub_49D2C0
	mov eax, [esp]
	mov [ecx], eax
	mov eax, [esp+4]
	mov dword [ecx+8], 0
	mov [ecx+4], eax
	mov eax, [esp+4]
	mov edx, eax
	mov [ecx+0Ch], eax
	neg edx
	mov [ecx+0Ch], edx
	mov eax, [esp]
	mov dword [ecx+14h], 0
	mov dword [ecx+18h], 0
	mov dword [ecx+1Ch], 0
	mov dword [ecx+20h], 10000h
	mov [ecx+10h], eax
	add esp, 8
	pop ecx
	pop ebx
	ret
;sub_49E7E0 endp

sub_49E840: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov [esp+28h], edx
	mov [esp+24h], ebx
	mov ebp, [esp+28h]
	xor edx, edx
	mov [esp+2Ch], eax
	mov [esp+30h], edx
	add ebp, 0Ch

loc_49E860:
	mov esi, [esp+2Ch]
	mov edi, [esp+30h]
	mov ecx, [esp+28h]
	shl edi, 2

loc_49E86F:
	mov edx, [ecx]
	mov eax, [esi]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebx, eax
	mov edx, [ecx+0Ch]
	mov eax, [esi+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov edx, [ecx+18h]
	add ebx, eax
	mov eax, [esi+8]
	add edi, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ebx, eax
	add ecx, 4
	mov [esp+edi-4], ebx
	cmp ecx, ebp
	jnz loc_49E86F
	mov ecx, [esp+2Ch]
	mov ebx, [esp+30h]
	add ecx, 0Ch
	add ebx, 3
	mov [esp+2Ch], ecx
	mov [esp+30h], ebx
	cmp ebx, 9
	jl loc_49E860
	mov ebx, 24h
	mov edx, [esp+24h]
	mov eax, esp
	call sub_48A980
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49E840 endp

sub_49E8F0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov ecx, 3
	mov esi, eax
	add eax, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, eax
	mov ah, [edi+1]
	xor ebx, ebx
	cmp ah, 0FBh
	jnz loc_49E932

loc_49E91A:
	mov al, [esi]
	and al, 0FEh
	cmp al, 32h
	jnb loc_49E939
	cmp al, 10h
	jb loc_49E92C
	jbe loc_49E964
	cmp al, 30h
	jz loc_49E943

loc_49E92C:
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	ret

loc_49E932:
	cmp ah, 32h
	jz loc_49E91A
	jmp loc_49E92C

loc_49E939:
	jbe loc_49E943
	cmp al, 46h
	jnb loc_49E953
	cmp al, 34h
	jnz loc_49E92C

loc_49E943:
	mov ebx, 1
	mov eax, esi
	call sub_4B12D0
	mov ebx, eax
	jmp loc_49E92C

loc_49E953:
	jbe loc_49E978
	cmp al, 4Ah
	jnz loc_49E92C
	mov eax, esi
	call sub_4B2690
	mov ebx, ecx
	jmp loc_49E92C

loc_49E964:
	mov ebx, 1
	mov eax, esi
	call sub_4B2824
	mov ebx, eax
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	ret

loc_49E978:
	mov eax, esi
	call sub_4B29D8
	mov ebx, eax
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	ret
;sub_49E8F0 endp

sub_49E9A4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, eax
	mov ecx, 3
	mov esi, eax
	add eax, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, eax
	mov ah, [edx+1]
	xor ebx, ebx
	cmp ah, 0FBh
	jnz loc_49E9E8

loc_49E9CF:
	mov al, [esi]
	and al, 0FEh
	cmp al, 34h
	jnb loc_49E9EF
	cmp al, 30h
	jnb loc_49E9FF
	cmp al, 10h
	jnz loc_49E9E1

loc_49E9DF:
	mov ebx, ecx

loc_49E9E1:
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_49E9E8:
	cmp ah, 32h
	jz loc_49E9CF
	jmp loc_49E9E1

loc_49E9EF:
	jbe loc_49E9DF
	cmp al, 4Ah
	jnb loc_49E9FB
	cmp al, 46h
	jz loc_49E9DF
	jmp loc_49E9E1

loc_49E9FB:
	jbe loc_49E9DF
	jmp loc_49E9E1

loc_49E9FF:
	jbe loc_49E9DF
	cmp al, 32h
	jz loc_49E9DF
	mov eax, ebx
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49E9A4 endp

off_49EA10: dd loc_49EA3B
	dd loc_49EA57 ; jump table for switch statement
	dd loc_49EA79
	dd loc_49EAA5

sub_49EA20: ;SUBROUTINE
	push ecx
	push ebp
	mov ecx, eax
	sar ecx, 8
	and ecx, 3
	and eax, 0FFh
	cmp ecx, 3 ; switch 4 cases
	ja loc_49EA54 ; jumptable 0049EA34 default case
	jmp off_49EA10[ecx*4] ; switch jump

loc_49EA3B:
	mov ecx, dword dword_4DB6B4[eax*4] ; jumptable 0049EA34 case 0
	mov [edx], ecx
	mov edx, 100h
	sub edx, eax
	mov eax, dword dword_4DB6B4[edx*4]
	mov [ebx], eax

loc_49EA54:
	pop ebp ; jumptable 0049EA34 default case
	pop ecx
	ret

loc_49EA57:
	mov ecx, 100h ; jumptable 0049EA34 case 1
	sub ecx, eax
	mov ecx, dword dword_4DB6B4[ecx*4]
	mov [edx], ecx
	mov eax, dword dword_4DB6B4[eax*4]
	mov ebp, eax
	mov [ebx], eax
	neg ebp
	mov [ebx], ebp
	pop ebp
	pop ecx
	ret

loc_49EA79:
	push edi ; jumptable 0049EA34 case 2
	push esi
	mov ecx, dword dword_4DB6B4[eax*4]
	mov esi, ecx
	mov [edx], ecx
	neg esi
	mov [edx], esi
	mov edx, 100h
	sub edx, eax
	mov eax, dword dword_4DB6B4[edx*4]
	mov edi, eax
	mov [ebx], eax
	neg edi
	mov [ebx], edi
	pop esi
	pop edi
	pop ebp
	pop ecx
	ret

loc_49EAA5:
	mov ecx, 100h ; jumptable 0049EA34 case 3
	sub ecx, eax
	mov ecx, dword dword_4DB6B4[ecx*4]
	mov [edx], ecx
	neg ecx
	mov [edx], ecx
	mov eax, dword dword_4DB6B4[eax*4]
	mov [ebx], eax
	pop ebp
	pop ecx
	ret
;sub_49EA20 endp

sub_49EAC8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov eax, [esi]
	imul dword [edi]
	mov ebp, eax
	mov eax, [esi+4]
	mov ecx, edx
	imul dword [edi+0Ch]
	add ebp, eax
	mov eax, [esi+8]
	adc ecx, edx
	imul dword [edi+18h]
	add eax, ebp
	adc edx, ecx
	shrd eax, edx, 10h
	mov [ebx], eax
	mov eax, [esi]
	imul dword [edi+4]
	mov ebp, eax
	mov eax, [esi+4]
	mov ecx, edx
	imul dword [edi+10h]
	add ebp, eax
	mov eax, [esi+8]
	adc ecx, edx
	imul dword [edi+1Ch]
	add eax, ebp
	adc edx, ecx
	shrd eax, edx, 10h
	mov [ebx+4], eax
	mov eax, [esi]
	imul dword [edi+8]
	mov ebp, eax
	mov eax, [esi+4]
	mov ecx, edx
	imul dword [edi+14h]
	add ebp, eax
	mov eax, [esi+8]
	adc ecx, edx
	imul dword [edi+20h]
	add eax, ebp
	adc edx, ecx
	shrd eax, edx, 10h
	mov [ebx+8], eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49EAC8 endp

sub_49EB40: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, ebx
	mov ecx, edx
	lea esi, [eax+24h]

loc_49EB4D:
	add ebx, 4
	mov edx, [eax]
	mov ebp, [ecx]
	add ecx, 4
	add edx, ebp
	add eax, 4
	mov [ebx-4], edx
	cmp eax, esi
	jnz loc_49EB4D
	mov eax, edi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49EB40 endp

sub_49EB6C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, ebx
	mov ecx, edx
	lea esi, [eax+24h]

loc_49EB79:
	add ebx, 4
	mov edx, [eax]
	mov ebp, [ecx]
	add ecx, 4
	sub edx, ebp
	add eax, 4
	mov [ebx-4], edx
	cmp eax, esi
	jnz loc_49EB79
	mov eax, edi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49EB6C endp

sub_49EB98: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, edx
	mov ebp, ebx
	mov ecx, eax
	lea edi, [eax+24h]

loc_49EBA5:
	mov edx, esi
	mov eax, [ecx]
	add ebx, 4
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add ecx, 4
	mov [ebx-4], eax
	cmp ecx, edi
	jnz loc_49EBA5
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_49EB98 endp

sub_49EBC8: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 0BCh
	mov [esp+0B8h], eax
	xor edx, edx
	mov [esp+0B4h], edx

loc_49EBE4:
	lea edx, [esp+48h]
	mov eax, [esp+0B8h]
	lea ebx, [esp+90h]
	mov ecx, 9
	call sub_49D890
	mov edx, [esp+0B8h]
	lea eax, [esp+48h]
	mov edi, esp
	call sub_49E840
	lea ebx, [esp+6Ch]
	mov edx, dword_4DD460
	lea eax, [esp+90h]
	mov esi, dword_4DD460
	call sub_49EB6C
	rep movsd
	mov ecx, 9
	lea edi, [esp+24h]
	mov esi, esp
	mov ebp, 4
	rep movsd

loc_49EC40:
	lea ebx, [esp+48h]
	lea edx, [esp+6Ch]
	mov eax, esp
	mov ecx, 9
	mov edi, esp
	lea esi, [esp+48h]
	call sub_49E840
	lea ebx, [esp+90h]
	mov eax, esp
	mov edx, dword dword_4DD484[ebp]
	rep movsd
	call sub_49EB98
	lea ebx, [esp+24h]
	lea edx, [esp+90h]
	lea eax, [esp+24h]
	add ebp, 4
	call sub_49EB40
	cmp ebp, 10h
	jnz loc_49EC40
	mov ecx, 9
	lea edi, [esp+48h]
	mov esi, [esp+0B8h]
	mov ebx, [esp+0B8h]
	rep movsd
	lea edx, [esp+24h]
	mov ecx, [esp+0B4h]
	lea eax, [esp+48h]
	inc ecx
	call sub_49E840
	mov [esp+0B4h], ecx
	cmp ecx, 4
	jl loc_49EBE4
	add esp, 0BCh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49EBC8 endp

;	Attributes: library function static

initrandnext_: ;SUBROUTINE
	call dword [off_4DED58]
	add eax, 0Ch
	ret
;initrandnext_ endp

;	Attributes: library function

rand_: ;SUBROUTINE
	push edx
	call initrandnext_
	test eax, eax
	jz loc_49EED1
	imul edx, [eax], 41C64E6Dh
	add edx, 3039h
	mov [eax], edx
	mov eax, edx
	shr eax, 10h
	and eax, 7FFFh

loc_49EED1:
	pop edx
	ret
;rand_ endp

;	Attributes: library function

stricmp_: ;SUBROUTINE
	push ebx
	mov ebx, eax

loc_49F136:
	mov al, [ebx]
	mov ah, [edx]
	cmp al, 41h
	jb loc_49F144
	cmp al, 5Ah
	ja loc_49F144
	add al, 20h

loc_49F144:
	cmp ah, 41h
	jb loc_49F151
	cmp ah, 5Ah
	ja loc_49F151
	add ah, 20h

loc_49F151:
	cmp al, ah
	jnz loc_49F15D
	test ah, ah
	jz loc_49F15D
	inc ebx
	inc edx
	jmp loc_49F136

loc_49F15D:
	xor edx, edx
	mov dl, al
	mov al, ah
	and eax, 0FFh
	sub edx, eax
	mov eax, edx
	pop ebx
	ret
;stricmp_ endp

sub_49F978: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DAC60]
	test edx, edx
	jnz loc_49F985
	pop edx
	ret

loc_49F985:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_4848FC
	mov dword [dword_4DAC60], ecx
	pop ecx
	pop edx
	ret
;sub_49F978 endp

;	Watcom v9-*1.5 32bit NT runtime
;	Attributes: library function

unknown_libname_3: ;SUBROUTINE
	push ebx
	push ecx
	push edx

loc_49FB17:
	mov dl, [eax]
	inc dl
	and edx, 0FFh
	test byte _IsTable[edx], 2
	jz loc_49FB2D
	inc eax
	jmp loc_49FB17

loc_49FB2D:
	mov cl, [eax]
	cmp cl, 2Bh
	jz loc_49FB39
	cmp cl, 2Dh
	jnz loc_49FB3A

loc_49FB39:
	inc eax

loc_49FB3A:
	xor ebx, ebx

loc_49FB3C:
	mov dl, [eax]
	inc dl
	and edx, 0FFh
	test byte _IsTable[edx], 20h
	jz loc_49FB5E
	imul ebx, 0Ah
	xor edx, edx
	mov dl, [eax]
	add ebx, edx
	inc eax
	sub ebx, 30h
	jmp loc_49FB3C

loc_49FB5E:
	cmp cl, 2Dh
	jnz loc_49FB65
	neg ebx

loc_49FB65:
	mov eax, ebx
	pop edx
	pop ecx
	pop ebx
	ret
;unknown_libname_3 endp

sub_49FB70: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov esi, eax
	mov edi, eax
	mov dword [dword_570E38], edx
	mov dword [eax+30h], 0
	mov eax, [eax+34h]
	call sub_48FF9C
	mov eax, [esi+34h]
	call sub_48FB5C
	test eax, eax
	jnz loc_49FBA1
	mov eax, [edi+30h]
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_49FBA1:
	mov edx, [esi+48h]
	mov ecx, [esi+44h]
	mov ebx, [esi+40h]
	push edx
	mov eax, [esi+34h]
	mov edx, [esi+3Ch]
	call sub_4901BC
	mov eax, [esi+34h]
	call sub_48FD00
	mov eax, [esi+34h]
	call sub_48FD20
	mov eax, [esi+34h]
	call sub_48F590
	test eax, eax
	jnz loc_49FBE1
	mov dword [esi+30h], 1
	mov eax, [edi+30h]
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_49FBE1:
	mov eax, [esi+34h]
	call sub_48FD40
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_49FB70 endp

sub_49FBF0: ;SUBROUTINE
	mov dword [eax+30h], 0
	mov eax, 1
	ret
;sub_49FBF0 endp

sub_49FC00: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov ebx, dword [dword_570E38]
	mov ecx, eax
	test ebx, ebx
	jnz loc_49FC18

loc_49FC11:
	mov eax, [ecx+30h]
	pop edx
	pop ecx
	pop ebx
	ret

loc_49FC18:
	mov eax, [eax+34h]
	call sub_490308
	test eax, eax
	jz loc_49FC11
	mov eax, edx
	call dword [dword_570E38]
	mov eax, [ecx+30h]
	pop edx
	pop ecx
	pop ebx
	ret
;sub_49FC00 endp

sub_49FC34: ;SUBROUTINE
	mov eax, [eax+34h]
	jmp sub_49035C
;sub_49FC34 endp

sub_49FC3C: ;SUBROUTINE
	mov eax, [eax+34h]
	jmp sub_490308
;sub_49FC3C endp

sub_49FC44: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, ebx
	mov ebx, edx
	mov ecx, [ecx+34h]
	mov edx, eax
	mov eax, ecx
	call sub_490478
	mov edx, eax
	test eax, eax
	jl loc_49FC61
	mov eax, edx
	pop ecx
	ret

loc_49FC61:
	neg edx
	mov eax, edx
	pop ecx
	ret
;sub_49FC44 endp

sub_49FC68: ;SUBROUTINE
	push ecx
	mov ecx, eax
	mov eax, edx
	mov edx, ebx
	mov ecx, [ecx+34h]
	mov ebx, eax
	mov eax, ecx
	call sub_490008
	pop ecx
	ret
;sub_49FC68 endp

sub_49FC80: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	test eax, eax
	jz loc_49FCE5
	cmp dword [eax+24h], 0
	jnz loc_49FCA6
	mov edx, dword [dword_4DABCC]
	mov eax, edx
	sar edx, 1Fh
	shl edx, 4
	sbb eax, edx
	sar eax, 4
	mov [esi+24h], eax

loc_49FCA6:
	push edi
	cmp dword [esi+28h], 0
	jnz loc_49FCC2
	mov edx, dword [dword_4DABCC]
	mov edi, 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esi+28h], eax

loc_49FCC2:
	cmp dword [esi+2Ch], 0
	jnz loc_49FCDD
	mov edx, dword [dword_4DABCC]
	mov edi, 0Ah
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esi+2Ch], eax

loc_49FCDD:
	mov dword [esi+8], 3
	pop edi

loc_49FCE5:
	mov edx, dword_4D4BC8
	push ebx
	mov eax, esi
	mov ebx, off_4DD5B8
	call sub_48A188
	pop esi
	pop ecx
	ret
;sub_49FC80 endp

sub_49FD00: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	mov ecx, edx
	cmp byte [byte_4DDA74], 0
	jz loc_49FD14
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_49FD14:
	call sub_489EF8
	mov dword [dword_59C600], eax
	call sub_49FDE8
	mov eax, ebx
	call sub_49FE2C
	mov edx, ecx
	call sub_488B34
	mov ecx, eax
	test eax, eax
	jl loc_49FD44
	mov dl, 1
	xor eax, eax
	mov byte [byte_4DDA74], dl
	pop ecx
	pop ebx
	ret

loc_49FD44:
	call sub_488BA4
	mov eax, ecx
	pop ecx
	pop ebx
	ret
;sub_49FD00 endp

sub_49FDE8: ;SUBROUTINE
	push edx
	xor eax, eax

loc_49FDEB:
	add eax, 60h
	xor dl, dl
	mov byte dword_59BF5C[eax], dl
	cmp eax, 600h
	jnz loc_49FDEB
	xor eax, eax

loc_49FDFF:
	add eax, 8
	xor edx, edx
	mov dword dword_59C5A8[eax], edx
	mov dword dword_59C5AC[eax], edx
	cmp eax, 50h
	jnz loc_49FDFF
	mov dword [dword_59C608], edx
	mov dword [dword_59C604], edx
	mov byte [byte_59C60D], 7Fh
	pop edx
	ret
;sub_49FDE8 endp

sub_49FE2C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov ebx, eax
	mov eax, edx
	call sub_48883C
	mov edx, eax
	cmp ebx, 0FFFFFFFFh
	jnz loc_49FE8B

loc_49FE3F:
	and eax, edx
	mov ecx, eax
	mov edx, eax
	mov esi, eax
	and ecx, 0FFh
	and edx, 0FF00h
	and esi, 0FF0000h
	cmp ebx, 0FFFFFFFFh
	jnz loc_49FE60
	xor esi, esi

loc_49FE60:
	test ecx, ecx
	jz loc_49FE8F
	test edx, edx
	jz loc_49FE8F
	test cl, 8
	jz loc_49FE95
	mov eax, 8

loc_49FE72:
	test dh, 8
	jz loc_49FEB4
	or ah, 8

loc_49FE7A:
	test esi, 20000h
	jz loc_49FE87
	or eax, 20000h

loc_49FE87:
	pop esi
	pop ecx
	pop ebx
	ret

loc_49FE8B:
	mov eax, ebx
	jmp loc_49FE3F

loc_49FE8F:
	xor eax, eax
	pop esi
	pop ecx
	pop ebx
	ret

loc_49FE95:
	test cl, 2
	jz loc_49FEA1
	mov eax, 2
	jmp loc_49FE72

loc_49FEA1:
	test cl, 4
	jz loc_49FEAD
	mov eax, 4
	jmp loc_49FE72

loc_49FEAD:
	mov eax, 1
	jmp loc_49FE72

loc_49FEB4:
	test dh, 10h
	jz loc_49FEBE
	or ah, 10h
	jmp loc_49FE7A

loc_49FEBE:
	test dh, 4
	jz loc_49FEC8
	or ah, 4
	jmp loc_49FE7A

loc_49FEC8:
	test dh, 20h
	jz loc_49FED2
	or ah, 20h
	jmp loc_49FE7A

loc_49FED2:
	test dh, 2
	jz loc_49FEDC
	or ah, 2
	jmp loc_49FE7A

loc_49FEDC:
	or ah, 1
	jmp loc_49FE7A
;sub_49FE2C endp

sub_49FEF0: ;SUBROUTINE
	cmp byte [byte_4DDA74], 0
	jnz loc_49FEFF
	mov eax, 0FFFFFFF6h
	ret

loc_49FEFF:
	push edx
	mov eax, dword [dword_4DCE6C]
	call sub_4B2FD0
	mov edx, eax
	test eax, eax
	jl loc_49FF14
	mov eax, edx
	pop edx
	ret

loc_49FF14:
	movsx edx, byte [byte_4DCEDE]
	mov eax, edx
	pop edx
	ret
;sub_49FEF0 endp

sub_4A0170: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 80h
	mov ebp, eax
	mov [esp+7Ch], edx
	mov esi, ebx
	inc dword [dword_4DABD8]
	test eax, eax
	jnz loc_4A0191
	mov ebp, dword_563900

loc_4A0191:
	cmp dword [dword_4DAB5C], 7
	jnz loc_4A02C3
	cmp dword [ebp+1Ch], 8
	jg loc_4A02C3
	mov eax, [esp+7Ch]
	add eax, esi
	dec eax
	mov edi, [ebp+43Ch]
	mov [esp+78h], eax
	test edi, edi
	jz loc_4A02CE
	mov eax, 1

loc_4A01C6:
	mov [esp+70h], eax
	mov eax, [esp+7Ch]
	lea edx, [ebp+30h]
	shl eax, 2
	xor ecx, ecx
	lea ebx, [edx+eax]
	add eax, dword_570E60
	test esi, esi
	jle loc_4A020C
	mov edx, ebx

loc_4A01E4:
	xor ebx, ebx
	mov bl, [eax+1]
	movzx edi, byte [eax+2]
	shl ebx, 8
	or edi, ebx
	xor ebx, ebx
	mov bl, [eax]
	add edx, 4
	shl ebx, 10h
	add eax, 4
	or ebx, edi
	inc ecx
	mov [edx-4], ebx
	cmp ecx, esi
	jl loc_4A01E4

loc_4A020C:
	mov eax, [ebp+42Eh]
	mov edx, [esp+7Ch]
	sar eax, 10h
	cmp eax, edx
	jle loc_4A0228
	mov eax, [esp+7Ch]
	mov [ebp+430h], ax

loc_4A0228:
	mov eax, [ebp+430h]
	mov ecx, [esp+78h]
	sar eax, 10h
	cmp eax, ecx
	jge loc_4A0244
	mov eax, [esp+78h]
	mov [ebp+432h], ax

loc_4A0244:
	cmp dword [esp+70h], 0
	jz loc_4A0257
	mov eax, esp
	call sub_4A4030
	call sub_4824BC

loc_4A0257:
	mov eax, ebp
	call sub_491AF0
	cmp byte [ebp+45Dh], 0
	jnz loc_4A02BC
	mov eax, [esp+7Ch]
	lea edx, [ebp+30h]
	shl eax, 2
	xor ecx, ecx
	add edx, eax
	add eax, dword_570E60
	test esi, esi
	jle loc_4A02BC

loc_4A027E:
	mov bl, [edx]
	mov [eax+2], bl
	mov ebx, [edx]
	shr ebx, 8
	and ebx, 0FFh
	mov [esp+74h], ebx
	mov bl, [esp+74h]
	mov [eax+1], bl
	mov ebx, [edx]
	shr ebx, 10h
	and ebx, 0FFh
	add eax, 4
	mov [esp+74h], ebx
	add edx, 4
	mov bl, [esp+74h]
	inc ecx
	mov [eax-4], bl
	cmp ecx, esi
	jl loc_4A027E

loc_4A02BC:
	cmp dword [esp+70h], 0
	jnz loc_4A02D5

loc_4A02C3:
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4A02CE:
	xor eax, eax
	jmp loc_4A01C6

loc_4A02D5:
	mov eax, esp
	call sub_4A4054
	add esp, 80h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A0170 endp

sub_4A02E8: ;SUBROUTINE
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov eax, ebx
	lea edx, 0[esi*4]
	mov ebx, ecx
	add edx, dword_570E60
	call sub_4A6B2D
	mov eax, dword_563900
	mov ebx, ecx
	mov edx, esi
	call sub_4A0170
	pop esi
	pop ecx
	ret
;sub_4A02E8 endp

sub_4A03E0: ;SUBROUTINE
	push ecx
	push esi
	mov esi, edx
	mov ecx, dword_570E60
	shl eax, 2
	xor edx, edx
	add ecx, eax
	test esi, esi
	jle loc_4A0414
	mov eax, ecx

loc_4A03F6:
	inc ebx
	mov cl, [eax+2]
	mov [ebx-1], cl
	inc ebx
	mov cl, [eax+1]
	add eax, 4
	mov [ebx-1], cl
	inc ebx
	mov cl, [eax-4]
	inc edx
	mov [ebx-1], cl
	cmp edx, esi
	jl loc_4A03F6
	nop

loc_4A0414:
	pop esi
	pop ecx
	ret
;sub_4A03E0 endp

sub_4A04E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	test eax, eax
	jl loc_4A050C
	xor ebx, ebx

loc_4A04E9:
	mov edx, eax
	sar edx, 7
	cmp eax, 0FA00h
	jg loc_4A0515
	test al, 40h
	jz loc_4A04FA
	inc edx

loc_4A04FA:
	xor eax, eax
	mov al, byte byte_4E01A4[edx]
	test ebx, ebx
	jz loc_4A0508
	neg eax

loc_4A0508:
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A050C:
	mov ebx, 1
	neg eax
	jmp loc_4A04E9

loc_4A0515:
	cmp eax, 10000h
	jl loc_4A052B
	mov eax, 100h
	test ebx, ebx
	jz loc_4A0508
	neg eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A052B:
	mov ecx, eax
	and ecx, 7Fh
	cmp edx, 1FFh
	jnz loc_4A0558
	xor eax, eax
	mov edx, 100h
	mov al, byte [byte_4E03A3]
	sub edx, eax
	imul edx, ecx
	sar edx, 7
	add eax, edx
	test ebx, ebx
	jz loc_4A0508
	neg eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A0558:
	push esi
	xor eax, eax
	movzx esi, byte byte_4E01A5[edx]
	mov al, byte byte_4E01A4[edx]
	sub esi, eax
	imul ecx, esi
	sar ecx, 7
	add eax, ecx
	pop esi
	test ebx, ebx
	jz loc_4A0508
	neg eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A04E0 endp

sub_4A0580: ;SUBROUTINE
	push edx
	mov edx, 100h
	call sub_4A04E0
	sub edx, eax
	mov eax, edx
	pop edx
	ret
;sub_4A0580 endp

sub_4A05A0: ;SUBROUTINE
	push ecx
	mov ecx, dword [dword_4DAC0C]
	mov dword [dword_4DAC14], eax
	add eax, ecx
	mov dword [dword_4DAC1C], eax
	mov eax, dword [dword_4DAC10]
	mov dword [dword_4DAC18], edx
	add edx, eax
	mov dword [dword_4DAC20], edx
	pop ecx
	ret
;sub_4A05A0 endp

sub_4A05C8: ;SUBROUTINE
	push esi
	push ebp
	mov esi, edx
	mov dword [dword_4DAC34], edx
	sar ebx, 1
	mov edx, dword [dword_4DAC14]
	mov dword [dword_4DAC30], eax
	add edx, ebx
	sar ecx, 1
	mov dword [dword_4DAC1C], edx
	mov edx, dword [dword_4DAC18]
	mov dword [dword_4DAC0C], ebx
	add edx, ecx
	mov dword [dword_4DAC10], ecx
	mov dword [dword_4DAC20], edx
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ebx, dword [dword_4DAC0C]
	imul ebx, eax
	mov eax, dword [dword_4DAC30]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ecx, eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4DAC24], eax
	test esi, esi
	jz loc_4A06CF
	mov eax, dword [dword_4DAC34]
	lea ecx, [eax+100h]
	shl ch, 7
	sbb edx, edx
	add ch, ch
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov edx, dword [dword_4DAC10]
	mov ebx, eax
	imul ebx, edx
	mov eax, dword [dword_4DAC34]
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	neg ebx
	mov ecx, eax
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv ecx
	mov dword [dword_4DAC28], eax
	pop ebp
	pop esi
	ret

loc_4A06CF:
	mov edx, dword [dword_4DAC38]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	mov ebp, eax
	mov edx, dword [dword_4DAC10]
	neg ebp
	mov dword [dword_4DAC28], eax
	mov eax, ebp
	mov dword [dword_4DAC28], ebp
	call sub_49D7E0
	mov dword [dword_4DAC34], eax
	pop ebp
	pop esi
	ret
;sub_4A05C8 endp

sub_4A0704: ;SUBROUTINE
	push esi
	push edi
	mov edi, eax
	shl edx, 0Ah
	mov esi, 168h
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov edx, edi
	mov esi, eax
	shl edx, 0Ah
	mov edi, 168h
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov edx, esi
	call sub_4A05C8
	pop edi
	pop esi
	ret
;sub_4A0704 endp

sub_4A0796: ;SUBROUTINE
	push esi
	push edi
	push es
	push fs
	push gs

;	enter 8, 0
	push ebp
	mov ebp, esp
	sub esp, 8

	mov edi, eax
	mov esi, ecx
	mov eax, ebx
	mov ebx, [ebp+1Ch]
	mov [ebp-8], ebx
	test eax, eax
	jz locret_4A0800
	dec eax
	imul eax, ecx
	mov ebx, edx
	add edx, eax
	mov [ebp-4], edx

loc_4A07BC:
	cmp ebx, [ebp-4]
	jnb loc_4A07ED
	mov eax, [ebp-4]
	xor edx, edx
	sub eax, ebx
	div esi
	shr eax, 1
	imul eax, esi
	lea ecx, [ebx+eax]
	mov edx, ecx
	mov eax, edi
	call dword [ebp-8]
	test eax, eax
	jnz loc_4A07E1
	mov eax, ecx
	jmp locret_4A0800

loc_4A07E1:
	jge loc_4A07E8
	mov [ebp-4], ecx
	jmp loc_4A07BC

loc_4A07E8:
	lea ebx, [ecx+esi]
	jmp loc_4A07BC

loc_4A07ED:
	jnz loc_4A07FE
	mov edx, ebx
	mov eax, edi
	call dword [ebp-8]
	test eax, eax
	jnz loc_4A07FE
	mov eax, ebx
	jmp locret_4A0800

loc_4A07FE:
	xor eax, eax

locret_4A0800:
	leave
	pop gs
	pop fs
	pop es
	pop edi
	pop esi
	ret 4
;sub_4A0796 endp

sub_4A080B: ;SUBROUTINE
	push esi
	push edi
	push es
	push fs
	push gs
	mov edi, eax
	mov esi, edx
	call ecx
	test eax, eax
	jle loc_4A0838
	mov edx, ebx
	mov eax, edi
	call ecx
	test eax, eax
	jle loc_4A0834
	mov edx, ebx
	mov eax, esi
	call ecx
	test eax, eax
	jg loc_4A084C

loc_4A0830:
	mov eax, ebx
	jmp loc_4A084E

loc_4A0834:
	mov eax, edi
	jmp loc_4A084E

loc_4A0838:
	mov edx, ebx
	mov eax, edi
	call ecx
	test eax, eax
	jge loc_4A0834
	mov edx, ebx
	mov eax, esi
	call ecx
	test eax, eax
	jg loc_4A0830

loc_4A084C:
	mov eax, esi

loc_4A084E:
	pop gs
	pop fs
	pop es
	pop edi
	pop esi
	ret
;sub_4A080B endp

sub_4A0856: ;SUBROUTINE
	push es
	push ds
	pop es
	movzx edx, cl
	shr ecx, 2
	jz loc_4A086C

loc_4A0861:
	mov eax, [edi]
	xchg eax, [esi]
	stosd
	add esi, 4
	dec ecx
	jnz loc_4A0861

loc_4A086C:
	and dl, 3
	jz loc_4A087A

loc_4A0871:
	mov al, [edi]
	xchg al, [esi]
	stosb
	inc esi
	dec edx
	jnz loc_4A0871

loc_4A087A:
	pop es
	ret
;sub_4A0856 endp

sub_4A087C: ;SUBROUTINE
	push esi
	push edi
	push es
	push fs
	push gs

;	enter 14Ch, 0

	push ebp
	mov ebp, esp
	sub esp, 14Ch

	push edx
	push ebx
	mov [ebp-4], eax
	or eax, ebx
	mov [ebp-18h], ecx
	test al, 3
	jz loc_4A089C
	mov eax, 2
	jmp loc_4A08A5

loc_4A089C:
	cmp ebx, 4
	setnbe al
	movzx eax, al

loc_4A08A5:
	mov [ebp-24h], eax
	imul eax, [ebp-154h], 3
	mov [ebp-3Ch], eax
	mov eax, [ebp-154h]
	add eax, eax
	mov dword [ebp-1Ch], 0
	mov [ebp-44h], eax

loc_4A08C4:
	cmp dword [ebp-150h], 1
	jbe loc_4A0959
	cmp dword [ebp-150h], 10h
	jnb loc_4A0985
	mov eax, [ebp-3Ch]
	mov [ebp-20h], eax
	mov eax, [ebp-150h]
	imul eax, [ebp-154h]
	mov edx, [ebp-4]
	add edx, eax
	mov [ebp-40h], edx
	jmp loc_4A0953

loc_4A08FB:
	mov eax, [ebp-4]
	add eax, [ebp-20h]
	mov [ebp-2Ch], eax
	jmp loc_4A0945

loc_4A0906:
	mov ebx, eax
	jmp loc_4A092A

loc_4A090A:
	cmp dword [ebp-24h], 0
	jz loc_4A091F
	mov ecx, [ebp-154h]
	mov esi, ebx
	call sub_4A0856
	jmp loc_4A0927

loc_4A091F:
	mov edx, [edi]
	mov eax, [ebx]
	mov [ebx], edx
	mov [edi], eax

loc_4A0927:
	sub ebx, [ebp-20h]

loc_4A092A:
	cmp ebx, [ebp-4]
	jbe loc_4A093F
	mov edi, ebx
	sub edi, [ebp-20h]
	mov edx, ebx
	mov eax, edi
	call dword [ebp-18h]
	test eax, eax
	jg loc_4A090A

loc_4A093F:
	mov eax, [ebp-20h]
	add [ebp-2Ch], eax

loc_4A0945:
	mov eax, [ebp-2Ch]
	cmp eax, [ebp-40h]
	jb loc_4A0906
	mov eax, [ebp-44h]
	sub [ebp-20h], eax

loc_4A0953:
	cmp dword [ebp-20h], 0
	jg loc_4A08FB

loc_4A0959:
	cmp dword [ebp-1Ch], 0
	jz locret_4A0CA1
	dec dword [ebp-1Ch]
	mov eax, [ebp-1Ch]
	mov edx, [ebp+eax*4-14Ch]
	mov eax, [ebp+eax*4-0CCh]
	mov [ebp-4], edx
	mov [ebp-150h], eax
	jmp loc_4A08C4

loc_4A0985:
	mov eax, [ebp-150h]
	shr eax, 1
	imul eax, [ebp-154h]
	mov edi, [ebp-4]
	add edi, eax
	cmp dword [ebp-150h], 1Dh
	jbe loc_4A0A39
	mov eax, [ebp-4]
	mov [ebp-38h], eax
	mov eax, [ebp-150h]
	dec eax
	imul eax, [ebp-154h]
	mov esi, [ebp-4]
	add esi, eax
	cmp dword [ebp-150h], 2Ah
	jbe loc_4A0A28
	mov eax, [ebp-150h]
	mov edx, [ebp-154h]
	shr eax, 3
	imul edx, eax
	mov ebx, [ebp-4]
	mov [ebp-28h], edx
	lea eax, [edx+edx]
	mov ecx, [ebp-18h]
	mov edx, [ebp-4]
	mov [ebp-48h], eax
	add ebx, eax
	mov eax, [ebp-4]
	add edx, [ebp-28h]
	call sub_4A080B
	mov ebx, [ebp-28h]
	mov ecx, [ebp-18h]
	mov [ebp-38h], eax
	mov edx, edi
	mov eax, edi
	add ebx, edi
	sub eax, [ebp-28h]
	call sub_4A080B
	mov ecx, [ebp-18h]
	mov edi, eax
	mov edx, esi
	mov ebx, esi
	mov eax, esi
	sub edx, [ebp-28h]
	sub eax, [ebp-48h]
	call sub_4A080B
	mov esi, eax

loc_4A0A28:
	mov ecx, [ebp-18h]
	mov eax, [ebp-38h]
	mov ebx, esi
	mov edx, edi
	call sub_4A080B
	mov edi, eax

loc_4A0A39:
	cmp dword [ebp-24h], 0
	jz loc_4A0A63
	mov eax, [ebp-4]
	mov [ebp-30h], eax
	jz loc_4A0A56
	mov ecx, [ebp-154h]
	mov esi, eax
	call sub_4A0856
	jmp loc_4A0A6E

loc_4A0A56:
	mov ebx, [ebp-4]
	mov edx, [eax]
	mov eax, [edi]
	mov [ebx], eax
	mov [edi], edx
	jmp loc_4A0A6E

loc_4A0A63:
	lea eax, [ebp-4Ch]
	mov [ebp-30h], eax
	mov eax, [edi]
	mov [ebp-4Ch], eax

loc_4A0A6E:
	mov eax, [ebp-150h]
	dec eax
	imul eax, [ebp-154h]
	mov ebx, [ebp-4]
	mov [ebp-14h], ebx
	lea edx, [ebx+eax]
	mov eax, [ebp-150h]
	mov [ebp-10h], edx
	mov [ebp-8], edx
	mov [ebp-0Ch], eax

loc_4A0A94:
	cmp dword [ebp-0Ch], 0
	jz loc_4A0AE2
	mov edx, [ebp-30h]
	mov eax, ebx
	call dword [ebp-18h]
	test eax, eax
	jg loc_4A0AE2
	jnz loc_4A0AD7
	cmp dword [ebp-24h], 0
	jz loc_4A0AC0
	mov ecx, [ebp-154h]
	mov esi, [ebp-14h]
	mov edi, ebx
	call sub_4A0856
	jmp loc_4A0ACE

loc_4A0AC0:
	mov edx, [ebp-14h]
	mov ecx, [ebp-14h]
	mov eax, [ebx]
	mov edx, [edx]
	mov [ecx], eax
	mov [ebx], edx

loc_4A0ACE:
	mov eax, [ebp-154h]
	add [ebp-14h], eax

loc_4A0AD7:
	dec dword [ebp-0Ch]
	add ebx, [ebp-154h]
	jmp loc_4A0A94

loc_4A0AE2:
	cmp dword [ebp-0Ch], 0
	jz loc_4A0B3B
	mov edx, [ebp-30h]
	mov eax, [ebp-8]
	call dword [ebp-18h]
	test eax, eax
	jl loc_4A0B3B
	jnz loc_4A0B2D
	cmp dword [ebp-24h], 0
	jz loc_4A0B10
	mov ecx, [ebp-154h]
	mov edi, [ebp-10h]
	mov esi, [ebp-8]
	call sub_4A0856
	jmp loc_4A0B24

loc_4A0B10:
	mov eax, [ebp-10h]
	mov edx, [ebp-8]
	mov ecx, [ebp-8]
	mov eax, [eax]
	mov edx, [edx]
	mov [ecx], eax
	mov eax, [ebp-10h]
	mov [eax], edx

loc_4A0B24:
	mov eax, [ebp-154h]
	sub [ebp-10h], eax

loc_4A0B2D:
	mov eax, [ebp-154h]
	dec dword [ebp-0Ch]
	sub [ebp-8], eax
	jmp loc_4A0AE2

loc_4A0B3B:
	cmp dword [ebp-0Ch], 0
	jz loc_4A0B83
	cmp dword [ebp-24h], 0
	jz loc_4A0B59
	mov ecx, [ebp-154h]
	mov edi, [ebp-8]
	mov esi, ebx
	call sub_4A0856
	jmp loc_4A0B67

loc_4A0B59:
	mov eax, [ebp-8]
	mov eax, [eax]
	mov edx, [ebx]
	mov [ebx], eax
	mov eax, [ebp-8]
	mov [eax], edx

loc_4A0B67:
	add ebx, [ebp-154h]
	dec dword [ebp-0Ch]
	jz loc_4A0B83
	mov eax, [ebp-154h]
	dec dword [ebp-0Ch]
	sub [ebp-8], eax
	jmp loc_4A0A94

loc_4A0B83:
	mov eax, [ebp-150h]
	imul eax, [ebp-154h]
	mov edx, [ebp-4]
	mov ecx, ebx
	add edx, eax
	mov eax, [ebp-14h]
	sub ecx, [ebp-14h]
	sub eax, [ebp-4]
	mov [ebp-34h], edx
	cmp eax, ecx
	jge loc_4A0BA9
	mov ecx, eax

loc_4A0BA9:
	test ecx, ecx
	jbe loc_4A0BD9
	mov edi, ebx
	mov esi, [ebp-4]
	sub edi, ecx
	push es
	push ds
	pop es
	movzx edx, cl
	shr ecx, 2
	jz loc_4A0BCA

loc_4A0BBF:
	mov eax, [edi]
	xchg eax, [esi]
	stosd
	add esi, 4
	dec ecx
	jnz loc_4A0BBF

loc_4A0BCA:
	and dl, 3
	jz loc_4A0BD8

loc_4A0BCF:
	mov al, [edi]
	xchg al, [esi]
	stosb
	inc esi
	dec edx
	jnz loc_4A0BCF

loc_4A0BD8:
	pop es

loc_4A0BD9:
	mov eax, [ebp-34h]
	mov ecx, [ebp-10h]
	sub eax, [ebp-10h]
	sub ecx, [ebp-8]
	sub eax, [ebp-154h]
	cmp ecx, eax
	jb loc_4A0BF1
	mov ecx, eax

loc_4A0BF1:
	test ecx, ecx
	jbe loc_4A0C21
	mov edi, [ebp-34h]
	mov esi, ebx
	sub edi, ecx
	push es
	push ds
	pop es
	movzx edx, cl
	shr ecx, 2
	jz loc_4A0C12

loc_4A0C07:
	mov eax, [edi]
	xchg eax, [esi]
	stosd
	add esi, 4
	dec ecx
	jnz loc_4A0C07

loc_4A0C12:
	and dl, 3
	jz loc_4A0C20

loc_4A0C17:
	mov al, [edi]
	xchg al, [esi]
	stosb
	inc esi
	dec edx
	jnz loc_4A0C17

loc_4A0C20:
	pop es

loc_4A0C21:
	mov edi, [ebp-10h]
	mov ecx, [ebp-34h]
	mov esi, ebx
	mov ebx, [ebp-1Ch]
	sub esi, [ebp-14h]
	sub edi, [ebp-8]
	shl ebx, 2
	sub ecx, edi
	cmp edi, esi
	jb loc_4A0C5F
	mov eax, edi
	xor edx, edx
	div dword [ebp-154h]
	xor edx, edx
	mov [ebx+ebp-0CCh], eax
	mov eax, esi
	div dword [ebp-154h]
	mov [ebx+ebp-14Ch], ecx
	jmp loc_4A0C93

loc_4A0C5F:
	cmp esi, [ebp-154h]
	jbe loc_4A0959
	mov eax, [ebp-4]
	xor edx, edx
	mov [ebx+ebp-14Ch], eax
	mov eax, esi
	div dword [ebp-154h]
	xor edx, edx
	mov [ebx+ebp-0CCh], eax
	mov eax, edi
	div dword [ebp-154h]
	mov [ebp-4], ecx

loc_4A0C93:
	mov [ebp-150h], eax
	inc dword [ebp-1Ch]
	jmp loc_4A08C4

locret_4A0CA1:
	leave
	pop gs
	pop fs
	pop es
	pop edi
	pop esi
	ret
;sub_4A087C endp

sub_4A1080: ;SUBROUTINE
	xor eax, eax
	ret
;sub_4A1080 endp

sub_4A1090: ;SUBROUTINE
	push ecx
	push esi
	sub esp, 1400h
	mov esi, edx
	mov ecx, ebx
	mov edx, esp
	call dword [dword_571264]
	mov eax, esp
	mov ebx, ecx
	mov edx, esi
	call dword [dword_571260]
	add esp, 1400h
	pop esi
	pop ecx
	ret
;sub_4A1090 endp

sub_4A10BC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 40h
	mov esi, eax
	mov [esp+0Ch], edx
	mov [esp+24h], ebx
	mov edi, ecx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	movzx ebp, byte [byte_4DB25D]
	mov eax, [ecx+18h]
	xor edx, edx
	mov ebx, [ecx+20h]
	mov [esp+8], edx
	mov [esp+10h], eax
	mov dword [dword_571264], edx
	test ebx, ebx
	jz loc_4A10FC
	mov ebp, ebx

loc_4A10FC:
	cmp dword [esp+10h], 0
	jnz loc_4A1143
	mov eax, [esi]
	and eax, 0FFh
	cmp eax, ebp
	jz loc_4A1143
	cmp dword [edi+1Ch], 2
	jz loc_4A137C
	mov ebx, 1

loc_4A111D:
	mov edx, ebp
	mov eax, esi
	call sub_499FDC
	mov [esp+10h], eax
	test eax, eax
	jz loc_4A1383
	cmp dword [edi+1Ch], 2
	jz loc_4A1143
	mov dword [dword_571264], eax
	xor eax, eax
	mov [esp+10h], eax

loc_4A1143:
	lea ecx, [esi+10h]
	mov ebp, [esi+2]
	mov eax, esi
	mov edx, [esi+4]
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	inc eax
	and al, 0FEh
	sar ebp, 10h
	mov ebx, eax
	mov eax, ebp
	imul eax, ebx
	sar eax, 3
	mov [esp+4], eax
	mov eax, esi
	mov esi, [esp+4]
	call sub_4A96A0
	sub eax, esi
	mov esi, [esp+24h]
	mov [esp+20h], eax
	mov eax, dword [dword_4DB250]
	sub eax, esi
	sar edx, 10h
	test eax, eax
	jle loc_4A11A5
	mov esi, [esp+4]
	imul esi, eax
	add ecx, esi
	mov esi, [esp+24h]
	add esi, eax
	sub edx, eax
	mov [esp+24h], esi

loc_4A11A5:
	mov eax, [esp+24h]
	mov esi, dword [dword_4DB258]
	add eax, edx
	sub eax, esi
	test eax, eax
	jle loc_4A11B9
	sub edx, eax

loc_4A11B9:
	mov esi, [esp+0Ch]
	mov eax, dword [dword_4DB24C]
	sub eax, esi
	test eax, eax
	jle loc_4A11E8
	mov esi, eax
	imul esi, ebx
	sar esi, 3
	mov [esp], esi
	add ecx, esi
	mov esi, [esp+0Ch]
	sub ebp, eax
	add esi, eax
	mov eax, [esp]
	mov [esp+0Ch], esi
	add [esp+20h], eax

loc_4A11E8:
	mov eax, [esp+0Ch]
	mov esi, dword [dword_4DB254]
	add eax, ebp
	sub eax, esi
	test eax, eax
	jle loc_4A1208
	mov esi, eax
	imul esi, ebx
	sar esi, 3
	sub ebp, eax
	add [esp+20h], esi

loc_4A1208:
	test ebp, ebp
	jle loc_4A1369
	test edx, edx
	jle loc_4A1369
	imul ebx, ebp
	mov eax, dword [dword_4DB260]
	mov [esp+34h], eax
	xor eax, eax
	mov al, byte [byte_4DB25C]
	inc eax
	and al, 0FEh
	imul eax, ebp
	sar ebx, 3
	sar eax, 3
	mov [esp+18h], ebx
	mov [esp+1Ch], eax
	mov eax, [esp+24h]
	mov ebx, dword [dword_4DB26C]
	shl eax, 2
	add ebx, eax
	mov eax, [esp+0Ch]
	mov esi, dword [dword_4DB270]
	shl eax, 2
	add eax, esi
	mov esi, [ebx]
	mov ebx, [eax]
	mov eax, dword [dword_4DB268]
	add esi, ebx
	mov ebx, [esp+1Ch]
	sub eax, ebx
	mov [esp+14h], eax
	mov eax, [esp+10h]
	mov [esp+28h], edx
	test eax, eax
	jnz loc_4A13C4
	mov al, byte [byte_4DB25C]
	cmp al, 0Fh
	jnb loc_4A13CD
	cmp al, 4
	jnb loc_4A1415

loc_4A1297:
	cmp dword [dword_571264], 0
	jnz loc_4A1436

loc_4A12A4:
	mov eax, [esp+1Ch]
	add eax, [esp+14h]
	mov edx, [esp+20h]
	mov [esp+30h], eax
	mov eax, [esp+18h]
	add eax, edx
	mov [esp+2Ch], eax

loc_4A12BE:
	mov edi, [esp+28h]
	test edi, edi
	jz loc_4A1320
	mov edx, [esp+24h]
	mov eax, dword [dword_4DB274]
	mov ebx, edi
	add edx, edi
	sub ebx, edi
	mov [esp+24h], edx
	mov [esp+28h], ebx
	test eax, eax
	jz loc_4A1465
	xor ebx, ebx
	mov [esp+3Ch], ebx

loc_4A12EB:
	mov edx, [esp+34h]
	mov ebx, ebp
	mov eax, ecx
	add edx, esi
	call dword [esp+38h]
	mov ebx, [esp+30h]
	mov eax, [esp+2Ch]
	mov edx, [esp+3Ch]
	add esi, ebx
	add ecx, eax
	add edx, ebp
	mov ebx, dword [dword_4DABE0]
	mov [esp+3Ch], edx
	cmp edx, ebx
	jg loc_4A144D

loc_4A131D:
	dec edi
	jnz loc_4A12EB

loc_4A1320:
	mov edx, [esp+28h]
	test edx, edx
	jz loc_4A135E
	lea ebx, [edx-1]
	mov eax, ecx
	mov edx, [esp+34h]
	mov [esp+28h], ebx
	mov ebx, ebp
	add edx, esi
	mov edi, [esp+1Ch]
	call dword [esp+38h]
	mov eax, [esp+18h]
	mov edx, [esp+14h]
	mov ebx, [esp+20h]
	add esi, edi
	mov edi, [esp+24h]
	add ecx, eax
	add esi, edx
	inc edi
	add ecx, ebx
	mov [esp+24h], edi

loc_4A135E:
	cmp dword [esp+28h], 0
	jg loc_4A12BE

loc_4A1369:
	mov edx, [esp+8]
	test edx, edx
	jnz loc_4A14C5

loc_4A1375:
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	ret

loc_4A137C:
	xor ebx, ebx
	jmp loc_4A111D

loc_4A1383:
	cmp dword [edi+1Ch], 2
	jz loc_4A13AA
	mov ecx, 1

loc_4A138E:
	mov ebx, [edi+1Ch]
	cmp ebx, 1
	jnz loc_4A13AE
	mov edx, ebp
	mov eax, esi
	call sub_49A118
	mov [esp+8], eax
	mov esi, eax
	jmp loc_4A1143

loc_4A13AA:
	xor ecx, ecx
	jmp loc_4A138E

loc_4A13AE:
	xor ebx, ebx
	mov edx, ebp
	mov eax, esi
	call sub_49A118
	mov [esp+8], eax
	mov esi, eax
	jmp loc_4A1143

loc_4A13C4:
	mov [esp+38h], eax
	jmp loc_4A12A4

loc_4A13CD:
	ja loc_4A13DB
	mov eax, [edi+8]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A13DB:
	cmp al, 18h
	jnb loc_4A13F3
	cmp al, 10h
	jnz loc_4A1297
	mov eax, [edi+0Ch]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A13F3:
	ja loc_4A1401
	mov eax, [edi+10h]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A1401:
	cmp al, 20h
	jnz loc_4A1297
	mov eax, [edi+14h]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A1415:
	ja loc_4A1422
	mov eax, [edi]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A1422:
	cmp al, 8
	jnz loc_4A1297
	mov eax, [edi+4]
	mov [esp+38h], eax
	jmp loc_4A1297

loc_4A1436:
	mov eax, [esp+38h]
	mov ebx, sub_4A1090
	mov dword [dword_571260], eax
	mov [esp+38h], ebx
	jmp loc_4A12A4

loc_4A144D:
	xor eax, eax
	mov [esp+3Ch], eax
;	call sub_483FC8
	test eax, eax
	jz loc_4A1375
	jmp loc_4A131D

loc_4A1465:
	cmp dword [esp+14h], 0
	jz loc_4A148E

loc_4A146C:
	mov edx, [esp+34h]
	mov ebx, ebp
	mov eax, ecx
	add edx, esi
	call dword [esp+38h]
	mov eax, [esp+30h]
	mov edx, [esp+2Ch]
	add esi, eax
	add ecx, edx
	dec edi
	jnz loc_4A146C
	jmp loc_4A1320

loc_4A148E:
	cmp dword [esp+20h], 0
	jnz loc_4A146C
	cmp dword [esp+38h], sub_4A1090
	jz loc_4A146C
	mov ebx, ebp
	imul ebx, edi
	mov edx, [esp+34h]
	mov eax, ecx
	add edx, esi
	call dword [esp+38h]
	mov eax, [esp+1Ch]
	imul eax, edi
	imul edi, [esp+18h]
	add esi, eax
	add ecx, edi
	jmp loc_4A1320

loc_4A14C5:
	mov eax, edx
	call sub_4848FC
	add esp, 40h
	pop ebp
	pop edi
	pop esi
	ret
;sub_4A10BC endp

sub_4A14D4: ;SUBROUTINE
	xchg eax, edx
	jmp sub_4A14D5
;sub_4A14D4 endp

sub_4A14D5: ;SUBROUTINE
	push ecx
	test eax, 3
	jnz loc_4A157A

loc_4A14E1:
	sub ebx, 20h
	js loc_4A151F

loc_4A14E6:
	mov ecx, [edx]
	mov [eax], ecx
	mov ecx, [edx+4]
	mov [eax+4], ecx
	mov ecx, [edx+8]
	mov [eax+8], ecx
	mov ecx, [edx+0Ch]
	mov [eax+0Ch], ecx
	mov ecx, [edx+10h]
	mov [eax+10h], ecx
	mov ecx, [edx+14h]
	mov [eax+14h], ecx
	mov ecx, [edx+18h]
	mov [eax+18h], ecx
	mov ecx, [edx+1Ch]
	mov [eax+1Ch], ecx
	lea edx, [edx+20h]
	lea eax, [eax+20h]
	sub ebx, 20h
	jns loc_4A14E6

loc_4A151F:
	add ebx, 18h
	js loc_4A1539

loc_4A1524:
	mov ecx, [edx]
	mov [eax], ecx
	mov ecx, [edx+4]
	mov [eax+4], ecx
	lea edx, [edx+8]
	lea eax, [eax+8]
	sub ebx, 8
	jns loc_4A1524

loc_4A1539:
	add ebx, 8
	jnz loc_4A1540
	pop ecx
	ret

loc_4A1540:
	cmp ebx, 4
	jb loc_4A1552
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4A1552:
	cmp ebx, 2
	jb loc_4A1566
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4A1566:
	cmp ebx, 1
	jb loc_4A1578
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4A1578:
	pop ecx
	ret

loc_4A157A:
	test eax, 1
	jz loc_4A1593
	cmp ebx, 1
	jl loc_4A1593
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4A1593:
	test eax, 2
	jz loc_4A15AE
	cmp ebx, 2
	jl loc_4A15AE
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4A15AE:
	test eax, 4
	jz loc_4A15C7
	cmp ebx, 4
	jl loc_4A15C7
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4A15C7:
	jmp loc_4A14E1
;sub_4A14D5 endp

sub_4A3DB0: ;SUBROUTINE
	push ecx
	push edx
	call SDL_GetTicks_wrap
	pop edx
	pop ecx
	ret
;sub_4A3DB0 endp

sub_4A3DBC: ;SUBROUTINE
	push ebx
	push edx
	push esi
	push ebp
	call sub_489E0C
	mov edx, dword [dword_59BF94]
	mov dword [dword_4DDA70], eax
	test edx, edx
	jz loc_4A3E27

loc_4A3DD4:
	mov eax, dword [dword_4DDA70]
	call sub_489E5C
	mov ebx, dword [dword_59BF94]
	test ebx, ebx
	jz loc_4A3E1E
	mov eax, ebx
	call sub_489F48
	mov esi, dword [dword_59BF60]
	xor edx, edx
	test esi, esi
	jz loc_4A3E14

loc_4A3DFB:
	mov eax, edx
	add edx, 4
	call dword dword_59BF60[eax]
	cmp edx, 20h
	jge loc_4A3E14
	cmp dword dword_59BF60[edx], 0
	jnz loc_4A3DFB

loc_4A3E14:
	mov eax, dword [dword_59BF94]
	call sub_489F60

loc_4A3E1E:
	cmp dword [dword_59BF94], 0
	jnz loc_4A3DD4

loc_4A3E27:
	mov eax, dword [dword_4DDA70]
	xor ebp, ebp
	call CloseHandleCaller
	mov dword [dword_4DDA70], ebp
	pop ebp
	pop esi
	pop edx
	pop ebx
	ret
;sub_4A3DBC endp

sub_4A3E40: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, dword [dword_59BF94]
	test edx, edx
	jnz loc_4A3E51

loc_4A3E4D:
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A3E51:
	mov eax, edx
	mov ecx, edx
	call sub_489F48
	xor ebx, ebx
	mov eax, dword_59BF80
	mov edx, dword [dword_4DDA70]
	mov dword [dword_59BF94], ebx
	call sub_489E20
	mov eax, ecx
	call sub_489F60
	mov eax, ecx
	call sub_489F74
	mov eax, dword_59BF80
	call sub_489BE8
	test eax, eax
	jnz loc_4A3E4D
	xor edx, edx

loc_4A3E90:
	cmp edx, dword [dword_4DDA70]
	jz loc_4A3E4D
	mov eax, edx
	call sub_489B9C
	jmp loc_4A3E90
;sub_4A3E40 endp

sub_4A3EA4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov eax, sub_4A3E40
	mov ecx, 0FFFFFFFFh
	mov ebx, 2
	call atexit_
	call sub_489EF8
	mov dword [dword_59BF94], eax
	call sub_489F48
	push dword_59BF80
	xor edx, edx
	mov eax, sub_4A3DBC
	call sub_489AE0
	test eax, eax
	jnz loc_4A3EF5
	mov eax, dword [dword_59BF94]
	xor edx, edx
	call sub_489F74
	mov dword [dword_59BF94], edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A3EF5:
	mov eax, dword [dword_59BF94]
	call sub_489F60
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A3EA4 endp

sub_4A3F04: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	mov edx, dword [dword_59BF94]
	mov ecx, 0FFFFFFFFh
	test edx, edx
	jz loc_4A3F5E

loc_4A3F18:
	mov eax, dword [dword_59BF94]
	call sub_489F48
	xor edx, edx
	xor eax, eax

loc_4A3F26:
	cmp dword dword_59BF60[edx], 0
	jnz loc_4A3F33
	test ecx, ecx
	jl loc_4A3F65

loc_4A3F33:
	cmp ebx, dword dword_59BF60[edx]
	jz loc_4A3F50

loc_4A3F3B:
	inc eax
	add edx, 4
	cmp eax, 8
	jl loc_4A3F26
	cmp ecx, 0FFFFFFFFh
	jz loc_4A3F50
	mov dword dword_59BF60[ecx*4], ebx

loc_4A3F50:
	mov eax, dword [dword_59BF94]
	call sub_489F60
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A3F5E:
	call sub_4A3EA4
	jmp loc_4A3F18

loc_4A3F65:
	mov ecx, eax
	jmp loc_4A3F3B
;sub_4A3F04 endp

sub_4A3F6C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push ebp
	mov ecx, eax
	mov edx, dword [dword_59BF94]
	test edx, edx
	jnz loc_4A3F81

loc_4A3F7C:
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A3F81:
	mov eax, edx
	call sub_489F48
	mov ebx, dword [dword_59BF60]
	xor edx, edx
	xor eax, eax
	cmp ecx, ebx
	jz loc_4A3FA7

loc_4A3F96:
	add eax, 4
	inc edx
	cmp eax, 20h
	jge loc_4A3FA7
	cmp ecx, dword dword_59BF60[eax]
	jnz loc_4A3F96

loc_4A3FA7:
	cmp edx, 8
	jge loc_4A3FDC
	lea eax, 0[edx*4]
	cmp ecx, dword dword_59BF60[eax]
	jnz loc_4A3FDC
	cmp edx, 7
	jge loc_4A3FD4

loc_4A3FC0:
	add eax, 4
	mov edx, dword dword_59BF60[eax]
	mov dword dword_59BF5C[eax], edx
	cmp eax, 1Ch
	jl loc_4A3FC0

loc_4A3FD4:
	xor ebp, ebp
	mov dword [dword_59BF7C], ebp

loc_4A3FDC:
	mov eax, dword [dword_59BF94]
	call sub_489F60
	mov edx, dword [dword_59BF60]
	xor eax, eax
	test edx, edx

loc_4A3FF0:
	jnz loc_4A3F7C
	add eax, 4
	cmp eax, 20h
	jge loc_4A4003
	cmp dword dword_59BF60[eax], 0
	jmp loc_4A3FF0

loc_4A4003:
	call sub_4A3E40
	pop ebp
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A3F6C endp

sub_4A4030: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov ecx, 0Eh
	mov esi, dword_4DB240
	mov edi, eax
	rep movsd
	mov ecx, 0Eh
	mov esi, dword_4DB278
	lea edi, [eax+38h]
	rep movsd
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A4030 endp

sub_4A4054: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov esi, eax
	mov ecx, 0Eh
	mov edi, dword_4DB278
	call sub_48259C
	lea esi, [esi+38h]
	rep movsd
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A4054 endp

;	Attributes: library function

vsprintf_: ;SUBROUTINE
	push ecx

	push ebx
	push edx
	push eax
	call vsprintf_wrap
	add esp, 0Ch

	pop ecx
	ret
;vsprintf_ endp

sub_4A40A0: ;SUBROUTINE
	cmp dword [dword_59BF98], 0
	jz loc_4A40AF
	mov eax, dword_59BF98
	ret

loc_4A40AF:
	call sub_489EF8
	mov dword [dword_59BF98], eax
	mov eax, dword_59BF98
	ret
;sub_4A40A0 endp

sub_4A40C0: ;SUBROUTINE
	mov eax, [eax]
	jmp sub_489F48
;sub_4A40C0 endp

sub_4A40C8: ;SUBROUTINE
	mov eax, [eax]
	jmp sub_489F60
;sub_4A40C8 endp

sub_4A40D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov bl, [eax]
	mov edx, eax
	test bl, bl
	jz loc_4A40ED

loc_4A40DB:
	mov cl, [eax]
	cmp cl, 5Ch
	jnz loc_4A40F3

loc_4A40E2:
	lea edx, [eax+1]
	mov bh, [eax+1]
	inc eax
	test bh, bh
	jnz loc_4A40DB

loc_4A40ED:
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A40F3:
	cmp cl, 3Ah
	jz loc_4A40E2
	cmp cl, 2Fh
	jz loc_4A40E2
	mov bh, [eax+1]
	inc eax
	test bh, bh
	jnz loc_4A40DB
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A40D0 endp

sub_4A4110: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov eax, dword [dword_563F00]
	call sub_4A40C0
	or byte [edx+19h], 40h
	mov ebx, 4
	mov ecx, [edx+14h]
	mov eax, [edx]
	mov edx, 42454E44h
	add eax, ecx
	call sub_48C054
	mov eax, dword [dword_563F00]
	call sub_4A40C8
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A4110 endp

sub_4A4248: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, edx
	xor edx, edx
	mov ecx, [eax+24h]
	mov [esp+4], edx
	mov esi, ecx
	mov edx, [eax]

loc_4A4261:
	xor ebp, ebp

loc_4A4263:
	mov eax, [ecx]
	mov ebx, [ecx+10h]
	add ebx, eax
	cmp ebx, edx
	jnb loc_4A4289
	mov ebp, edx
	mov esi, ecx
	mov edx, ebx
	sub ebp, ebx

loc_4A4276:
	test ebp, ebp
	jz loc_4A4294

loc_4A427A:
	cmp esi, edi
	jz loc_4A4294
	test byte [esi+18h], 18h
	jnz loc_4A42A1
	mov esi, [esi+24h]
	jmp loc_4A427A

loc_4A4289:
	cmp ecx, edi
	jz loc_4A4276
	mov edx, eax
	mov ecx, [ecx+24h]
	jmp loc_4A4263

loc_4A4294:
	mov eax, [esp+4]
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A42A1:
	mov eax, [esi]
	mov ebx, [esi+10h]
	add ebx, eax
	mov [esp], ebx
	lea ebx, [edx+ebp]
	mov [esp+8], ebx
	cmp edx, [esp]
	jz loc_4A42C9
	mov edx, [esi+10h]
	cmp ebp, edx
	jge loc_4A42ED
	mov edx, [ecx]
	cmp ecx, edi
	jz loc_4A4294
	mov ecx, [ecx+24h]
	jmp loc_4A4261

loc_4A42C9:
	mov ebp, [esp+8]
	mov edx, [esi+10h]
	sub ebp, edx
	mov ebx, edx
	mov edx, ebp
	call sub_48A980
	mov ebx, 1
	mov edx, ebp
	mov [esi], ebp
	mov [esp+4], ebx
	jmp loc_4A4261

loc_4A42ED:
	mov ebp, [esp+8]
	sub ebp, edx
	mov ebx, edx
	mov edx, ebp
	call sub_48A980
	mov eax, [esi+24h]
	mov edx, [esi+20h]
	mov [esi], ebp
	mov [eax+20h], edx
	mov eax, [esi+24h]
	mov [edx+24h], eax
	mov eax, [ecx+20h]
	mov [esi+20h], eax
	mov [esi+24h], ecx
	mov eax, [ecx+20h]
	mov [eax+24h], esi
	mov ebp, 1
	mov [ecx+20h], esi
	mov [esp+4], ebp
	mov edx, [esi]
	jmp loc_4A4261
;sub_4A4248 endp

sub_4A4358: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov ebp, edx
	mov edi, [eax]
	mov edx, [eax+10h]
	mov ecx, [eax+20h]
	xor ebx, ebx
	mov esi, ecx

loc_4A436D:
	add edi, edx

loc_4A436F:
	mov edx, [ecx]
	xor eax, eax
	cmp edi, edx

loc_4A4375:
	jb loc_4A438E
	cmp ecx, ebp
	jnz loc_4A4396

loc_4A437B:
	test eax, eax
	jz loc_4A43A4

loc_4A437F:
	cmp esi, ebp
	jz loc_4A43A4
	test byte [esi+18h], 18h
	jnz loc_4A43AC
	mov esi, [esi+20h]
	jmp loc_4A437F

loc_4A438E:
	mov eax, [ecx]
	mov esi, ecx
	sub eax, edi
	jmp loc_4A437B

loc_4A4396:
	mov edi, [ecx]
	mov edx, [ecx+10h]
	mov ecx, [ecx+20h]
	add edi, edx
	cmp edi, [ecx]
	jmp loc_4A4375

loc_4A43A4:
	mov eax, ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A43AC:
	cmp esi, ecx
	jz loc_4A43C5
	mov edx, [esi+10h]
	cmp eax, edx
	jge loc_4A43DF
	mov edi, [ecx]
	add edi, [ecx+10h]
	cmp ecx, ebp
	jz loc_4A43A4
	mov ecx, [ecx+20h]
	jmp loc_4A436F

loc_4A43C5:
	mov edx, edi
	mov eax, [ecx]
	mov ebx, [ecx+10h]
	call sub_48A980
	mov ebx, [ecx+10h]
	mov [ecx], edi
	add edi, ebx
	mov ebx, 1
	jmp loc_4A436F

loc_4A43DF:
	mov ebx, edx
	mov eax, [esi]
	mov edx, edi
	call sub_48A980
	mov eax, [esi+24h]
	mov ebx, [esi+20h]
	mov [esi], edi
	mov [eax+20h], ebx
	mov eax, [esi+24h]
	mov [ebx+24h], eax
	mov [esi+20h], ecx
	mov eax, [ecx+24h]
	mov [esi+24h], eax
	mov [eax+20h], esi
	mov [ecx+24h], esi
	mov edx, [esi+10h]
	mov ebx, 1
	jmp loc_4A436D
;sub_4A4358 endp

sub_4A4474: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	and edx, 0F00h
	sar edx, 8
	lea eax, 0[edx*4]
	sub eax, edx
	mov edi, dword_563D80
	shl eax, 3
	add edi, eax
	mov eax, ecx
	call sub_4A40D0
	mov ecx, [edi]
	mov edx, [edi+4]
	mov esi, eax
	cmp ecx, edx
	jz loc_4A44C9

loc_4A44A8:
	mov ebx, 0Ch
	lea edx, [ecx+4]
	mov eax, esi
	call strncmp_
	test eax, eax
	jnz loc_4A44C1
	test byte [ecx+18h], 8
	jnz loc_4A44D0

loc_4A44C1:
	mov ecx, [ecx+20h]
	cmp ecx, [edi+4]
	jnz loc_4A44A8

loc_4A44C9:
	xor eax, eax
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A44D0:
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A4474 endp

sub_4A4508: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edx, eax
	mov ebx, eax
	and ebx, 0F00h
	sar ebx, 8
	lea eax, 0[ebx*4]
	sub eax, ebx
	mov ebx, dword_563D80
	shl eax, 3
	add ebx, eax
	cmp dword [ebx+10h], 0
	jz loc_4A45BF
	mov edi, edx
	mov esi, [ebx]
	xor ebp, ebp
	and edi, 7
	mov esi, [esi+20h]
	xor edx, edx

loc_4A4549:
	test byte [esi+18h], 8
	jz loc_4A4571
	mov eax, [esi+18h]
	and eax, 7
	cmp eax, edi
	jbe loc_4A45C8

loc_4A455D:
	mov eax, dword [dword_4DB200]
	mov ebp, esi
	mov edx, [esi+1Ch]
	mov edi, [esi+18h]
	sub eax, edx
	and edi, 7
	mov edx, eax

loc_4A4571:
	mov esi, [esi+20h]
	mov ecx, [ebx+4]
	cmp esi, ecx
	jnz loc_4A4549
	test ebp, ebp
	jz loc_4A45B3
	mov edx, ecx
	xor eax, eax

loc_4A4583:
	inc eax
	mov bl, [edx+4]
	inc edx
	mov [esp+eax-1], bl
	cmp eax, 0Ch
	jl loc_4A4583
	xor dl, dl
	mov [esp+0Ch], dl

loc_4A4597:
	mov eax, esp
	mov ebx, [esi+18h]
	mov edx, [ebp+14h]
	xor ecx, ecx
	or bl, 8
	call sub_484510
	mov edx, eax
	test eax, eax
	jz loc_4A45D8
	test edx, edx
	jnz loc_4A45F3

loc_4A45B3:
	xor eax, eax

loc_4A45B5:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A45BF:
	mov eax, edx
	call sub_484A00
	jmp loc_4A45B5

loc_4A45C8:
	jnz loc_4A4571
	mov eax, dword [dword_4DB200]
	sub eax, [esi+1Ch]
	cmp eax, edx
	jnb loc_4A455D
	jmp loc_4A4571

loc_4A45D8:
	mov eax, edi
	call sub_4A4508
	test eax, eax
	jnz loc_4A4597
	test edx, edx
	jnz loc_4A45F3
	xor eax, eax
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A45F3:
	mov ebx, [ebp+14h]
	mov edx, [edx]
	mov eax, [ebp+0]
	call sub_48A980
	mov eax, ebp
	call sub_484948
	mov eax, 1
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A4508 endp

sub_4A4618: ;SUBROUTINE
	call sub_4A4624
	test eax, eax
	jz locret_4A4623
	mov eax, [eax]

locret_4A4623:
	ret
;sub_4A4618 endp

sub_4A4624: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, eax
	xor edx, edx
	call sub_4A4474
	mov esi, eax
	test eax, eax
	jnz loc_4A466F
	mov ebx, dword [off_4DB1EC]
	mov ebx, [ebx+10h]

loc_4A4641:
	mov edx, ebx
	mov eax, edi
	call sub_4A4474
	mov esi, eax
	test eax, eax
	jnz loc_4A46B1
	and ebx, 0F00h
	sar ebx, 8
	imul ebx, 18h
	add ebx, dword_563D80
	mov ebx, [ebx+10h]
	test ebx, ebx
	jnz loc_4A4641

loc_4A4669:
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A466F:
	mov ah, [eax+18h]
	and ah, 0F7h
	mov [esi+18h], ah
	test ah, 10h
	jz loc_4A4681
	mov eax, esi
	jmp loc_4A4669

loc_4A4681:
	mov eax, edi
	mov ebx, [esi+18h]
	mov edx, [esi+14h]
	xor ecx, ecx
	call sub_484510
	mov edi, eax
	test eax, eax
	jnz loc_4A469A
	mov eax, esi
	jmp loc_4A4669

loc_4A469A:
	mov ebx, [esi+14h]
	mov edx, [eax]
	mov eax, [esi]
	call sub_48A980
	mov eax, esi
	call sub_484928
	mov eax, edi
	jmp loc_4A4669

loc_4A46B1:
	and byte [eax+18h], 0F7h
	xor ecx, ecx
	mov ebx, [eax+18h]
	mov edx, [eax+14h]
	mov eax, edi
	call sub_484510
	mov edi, eax
	mov ebx, [esi+14h]
	mov edx, [eax]
	mov eax, [esi]
	call sub_48A980
	mov eax, edi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A4624 endp

sub_4A47B0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 20h
	mov eax, esp
	mov edx, 20h
	push eax ; lpBuffer
	mov [esp+4], edx
	call GlobalMemoryStatus_wrap
	mov eax, [esp+14h]
	and eax, 7FFFFFFFh ;GlobalMemoryStatus fix for >= 2GiB of RAM
	add esp, 20h
	pop edx
	pop ecx
	ret
;sub_4A47B0 endp

sub_4A47D4: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 20h
	mov eax, esp
	mov edx, 20h
	push eax ; lpBuffer
	mov [esp+4], edx
	call GlobalMemoryStatus_wrap
	mov eax, [esp+8]
	add esp, 20h
	pop edx
	pop ecx
	ret
;sub_4A47D4 endp

sub_4A48C0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, edx
	mov ecx, dword dword_59C5B0[eax*8]
	mov edx, 0FFFFFFFFh
	mov edi, 80h
	cmp byte [ecx+4], 1
	jb loc_4A48E3
	xor edi, edi
	mov di, [ecx+6]

loc_4A48E3:
	call sub_486314
	test eax, eax
	jnz loc_4A4939
	test esi, esi
	jl loc_4A4939
	cmp esi, edi
	jge loc_4A4939
	lea eax, 0[esi*4]
	add eax, ecx
	cmp byte [ecx+4], 2
	jb loc_4A4943
	mov ebp, ecx
	mov eax, [eax+0Ch]

loc_4A4908:
	test eax, eax
	jz loc_4A4939
	cmp dword [eax], 6C544150h
	jnz loc_4A4948
	call sub_4A4968

loc_4A4919:
	mov edx, eax

loc_4A491B:
	test edx, edx
	jl loc_4A4932
	mov ah, [ecx+4]
	shl esi, 2
	cmp ah, 2
	jb loc_4A4958
	mov dword [esi+ebp+0Ch], 0

loc_4A4932:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4A4939:
	mov eax, 0FFFFFFF8h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4A4943:
	mov eax, [eax+8]
	jmp loc_4A4908

loc_4A4948:
	cmp word [eax], 5450h
	jnz loc_4A491B
	mov edx, ebx
	call sub_4A89B0
	jmp loc_4A4919

loc_4A4958:
	mov dword [ecx+esi+8], 0
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A48C0 endp

sub_4A4968: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov ebx, eax
	xor edx, edx
	xor ecx, ecx
	xor eax, eax
	mov al, [ebx+7]
	cmp edx, eax
	jl loc_4A4980
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A4980:
	mov eax, [ebx+0Ch]
	add eax, ecx
	add eax, 28h
	inc edx
	call sub_488B30
	add ecx, 44h
	xor eax, eax
	mov al, [ebx+7]
	cmp edx, eax
	jl loc_4A4980
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A4968 endp

sub_4A4AD0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	sub esp, 0C00h
	mov esi, eax
	mov ecx, edx
	mov edx, dword_59BFB0
	lea ebx, [edx+600h]

loc_4A4AE8:
	mov eax, [edx+7]
	sar eax, 18h
	cmp eax, esi
	jnz loc_4A4B03
	xor eax, esi
	mov ax, [edx+8]
	cmp eax, ecx
	jnz loc_4A4B03
	mov eax, [edx]
	call sub_489840

loc_4A4B03:
	add edx, 60h
	cmp edx, ebx
	jnz loc_4A4AE8
	xor edx, ebx
	mov ebx, 0FFFFFFFFh

loc_4A4B11:
	add edx, 0Ch
	mov [esp+edx-0Ch], ebx
	cmp edx, 0C00h
	jnz loc_4A4B11
	mov ebx, esp
	mov edx, ecx
	mov eax, esi
	call sub_4A48C0
	add esp, 0C00h
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A4AD0 endp

sub_4A4C20: ;SUBROUTINE
	cmp dword [eax], 6C544150h
	jz loc_4A4B40
	cmp word [eax], 5450h
	jz loc_4A8904
	mov eax, 0FFFFFFFFh
	ret

loc_4A4B40:
	push ecx
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov ebp, edx
	mov [esp+4], ebx
	mov edx, 0FFFFFFFFh
	mov ah, [eax+5]
	mov [esp], edx
	test ah, ah
	jnz loc_4A4BCA
	push edi
	push esi
	lea eax, [ecx+0Ch]
	mov ebx, [ecx+0Ch]
	xor esi, esi
	add ebx, eax
	xor edi, edi
	mov [ecx+0Ch], ebx

loc_4A4B71:
	xor eax, eax
	mov al, [ecx+7]
	cmp esi, eax
	jge loc_4A4BD7
	mov eax, [ecx+0Ch]
	add eax, edi
	cmp dword [eax+18h], 0
	jz loc_4A4B8B
	lea edx, [eax+18h]
	add [eax+18h], edx

loc_4A4B8B:
	cmp dword [eax+1Ch], 0
	jz loc_4A4B97
	lea edx, [eax+1Ch]
	add [eax+1Ch], edx

loc_4A4B97:
	cmp dword [eax+20h], 0
	jz loc_4A4BA3
	lea edx, [eax+20h]
	add [eax+20h], edx

loc_4A4BA3:
	lea edx, [eax+24h]
	mov ebx, [eax+24h]
	add eax, 28h
	add ebx, edx
	mov edx, ebp
	mov [eax-4], ebx
	mov ebx, [esp+0Ch]
	call sub_488CE0
	mov [esp+10h], eax
	test eax, eax
	jl loc_4A4BD2
	add edi, 44h
	inc esi
	jmp loc_4A4B71

loc_4A4BCA:
	mov eax, edx
	add esp, 0Ch
	pop ebp
	pop ecx
	ret

loc_4A4BD2:
	dec esi
	mov [esp+8], esi

loc_4A4BD7:
	mov esi, [esp+8]
	cmp esi, 0FFFFFFFFh
	jle loc_4A4C10
	test esi, esi
	jl loc_4A4C04
	mov eax, esi
	shl esi, 4
	add esi, eax
	xor edx, edx
	shl esi, 2

loc_4A4BF0:
	mov eax, [ecx+0Ch]
	add eax, edx
	add eax, 28h
	add edx, 44h
	call sub_488B30
	cmp edx, esi
	jle loc_4A4BF0

loc_4A4C04:
	mov eax, [esp+10h]
	pop esi
	pop edi
	add esp, 0Ch
	pop ebp
	pop ecx
	ret

loc_4A4C10:
	mov byte [ecx+5], 1
	mov eax, [esp+10h]
	pop esi
	pop edi
	add esp, 0Ch
	pop ebp
	pop ecx
	ret

loc_4A8904:
	push edi
	push ebp
	sub esp, 4
	mov [esp], eax
	mov ebp, edx
	mov edi, ebx
	mov dx, [eax]
	mov ebx, 0FFFFFFFFh
	cmp dx, 5450h
	jnz loc_4A8971
	mov dl, [eax+3]
	test dl, 1
	jnz loc_4A897C
	push esi
	push ecx
	test dl, 2
	jz loc_4A8980
	lea ecx, [eax+8]

loc_4A8931:
	mov al, [ecx]
	cmp al, 0FFh
	jz loc_4A8997
	movzx esi, al
	cmp esi, 0FDh
	jnz loc_4A8950
	inc ecx
	mov ebx, edi
	mov edx, ebp
	mov eax, ecx
	call sub_4892B0
	mov ebx, eax

loc_4A8950:
	inc ecx
	cmp esi, 0FEh
	jz loc_4A8931
	cmp esi, 0FCh
	jz loc_4A8931
	xor eax, eax
	mov al, [ecx]
	cmp eax, 0FFh
	jz loc_4A8985

loc_4A896C:
	inc ecx
	add ecx, eax
	jmp loc_4A8931

loc_4A8971:
	mov eax, 0FFFFFFF9h

loc_4A8976:
	add esp, 4
	pop ebp
	pop edi
	ret

loc_4A897C:
	mov eax, ebx
	jmp loc_4A8976

loc_4A8980:
	lea ecx, [eax+4]
	jmp loc_4A8931

loc_4A8985:
	inc ecx
	mov edx, 4
	mov eax, ecx
	call sub_4A7E90
	add ecx, 3
	jmp loc_4A896C

loc_4A8997:
	test ebx, ebx
	jl loc_4A89A3
	mov eax, [esp+8]
	or byte [eax+3], 1

loc_4A89A3:
	mov eax, ebx
	pop ecx
	pop esi
	add esp, 4
	pop ebp
	pop edi
	ret
;sub_4A4C20 endp

sub_4A4C40: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, eax
	mov [esp], edx
	mov ebp, ecx
	xor esi, esi
	test eax, eax
	jz loc_4A4C99
	cmp dword [eax], 6C544150h
	jnz loc_4A4CA7
	cmp byte [eax+4], 1
	jnz loc_4A4CAE
	cmp ecx, 0FFFFFFFFh
	jnz loc_4A4CB5
	mov ebp, 7Fh

loc_4A4C6B:
	cmp ebx, 0FFFFFFFFh
	jnz loc_4A4CC0
	mov ebx, 3Ch

loc_4A4C75:
	xor eax, eax
	xor edx, edx

loc_4A4C79:
	xor ecx, ecx
	mov cl, [edi+7]
	cmp eax, ecx
	jge loc_4A4CE6
	mov esi, [edi+0Ch]
	add esi, edx
	xor ecx, ecx
	mov cl, [esi]
	cmp ebp, ecx
	jge loc_4A4CCB

loc_4A4C93:
	add edx, 44h
	inc eax
	jmp loc_4A4C79

loc_4A4C99:
	mov eax, 0FFFFFFF8h

loc_4A4C9E:
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4CA7:
	mov eax, 0FFFFFFF9h
	jmp loc_4A4C9E

loc_4A4CAE:
	mov eax, 0FFFFFFF5h
	jmp loc_4A4C9E

loc_4A4CB5:
	test ecx, ecx
	jl loc_4A4C99
	cmp ecx, 7Fh
	jle loc_4A4C6B
	jmp loc_4A4C99

loc_4A4CC0:
	test ebx, ebx
	jl loc_4A4C99
	cmp ebx, 7Fh
	jle loc_4A4C75
	jmp loc_4A4C99

loc_4A4CCB:
	xor ecx, ecx
	mov cl, [esi+1]
	cmp ebp, ecx
	jg loc_4A4C93
	xor ecx, ecx
	mov cl, [esi+2]
	cmp ebx, ecx
	jl loc_4A4C93
	xor ecx, ecx
	mov cl, [esi+3]
	cmp ebx, ecx
	jg loc_4A4C93

loc_4A4CE6:
	xor edx, edx
	mov dl, [edi+7]
	cmp eax, edx
	jz loc_4A4F75
	mov eax, [esp+24h]
	cmp eax, 0FFFFFFFFh
	jnz loc_4A4F83
	mov dword [esp+24h], 7Fh

loc_4A4D08:
	mov edx, [esp+20h]
	cmp edx, 0FFFFFFFFh
	jnz loc_4A4FA2
	mov dword [esp+20h], 40h

loc_4A4D1D:
	xor edx, edx
	xor eax, eax
	mov dl, [edi+0Ah]
	mov al, [esi+10h]
	add eax, edx
	sub eax, 40h
	mov dl, [esi+11h]
	mov [esp+0Ch], eax
	test dl, dl
	jz loc_4A4D4C
	mov eax, [esi+0Eh]
	sar eax, 18h
	mov ecx, [esp+0Ch]
	call sub_4B3E80
	add ecx, eax
	mov [esp+0Ch], ecx

loc_4A4D4C:
	mov eax, [esp+0Ch]
	cmp eax, 7Fh
	jle loc_4A4FC1
	mov dword [esp+0Ch], 7Fh

loc_4A4D61:
	mov eax, [esp+0Ch]
	add eax, [esp+20h]
	sub eax, 40h
	mov [esp+20h], eax
	test eax, eax
	jl loc_4A4FD4
	cmp eax, 7Fh
	jle loc_4A4D85
	mov dword [esp+20h], 7Fh

loc_4A4D85:
	mov eax, [esi+1Ch]
	test eax, eax
	jz loc_4A4D97
	add eax, [esp+20h]
	movsx eax, byte [eax]
	mov [esp+20h], eax

loc_4A4D97:
	cmp dword [esp+28h], 0FFFFFFFFh
	jnz loc_4A4DA7
	xor eax, eax
	mov al, [esi+0Ch]
	mov [esp+28h], eax

loc_4A4DA7:
	mov eax, [edi+6]
	mov edx, [esi+12h]
	sar eax, 10h
	sar edx, 10h
	add eax, edx
	xor edx, edx
	mov dl, [esi+9]
	sub edx, ebx
	mov [esp+8], eax
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 3
	add eax, edx
	mov ebx, [esp+8]
	shl eax, 2
	sub ebx, eax
	mov dx, [esi+16h]
	mov [esp+8], ebx
	test dx, dx
	jz loc_4A4DF6
	mov eax, [esi+14h]
	sar eax, 10h
	call sub_4B3E80
	lea edx, [ebx+eax]
	mov [esp+8], edx

loc_4A4DF6:
	call sub_4A5360
	mov ecx, dword_59C610
	mov eax, [esi+4]
	xor ebx, ebx
	xor edx, edx
	mov bl, [esi+8]
	mov dl, [esi+0Fh]
	call sub_4A53BC
	mov edx, eax
	mov [esp+4], eax
	test eax, eax
	jl loc_4A4FDF
	shl eax, 2
	sub eax, edx
	mov ebx, dword_59BFB0
	shl eax, 5
	add ebx, eax
	mov eax, [esi+18h]
	mov [ebx+4Ch], eax
	mov eax, [esi+1Ch]
	mov [ebx+50h], eax
	mov eax, [esi+20h]
	mov [ebx+54h], eax
	mov al, [edi+6]
	mov [ebx+0Dh], al
	mov eax, [esp+24h]
	mov dword [ebx+18h], 0
	shl eax, 10h
	mov [ebx+20h], eax
	mov eax, [edi+8]
	mov edx, [esi+0Fh]
	sar eax, 18h
	sar edx, 18h
	imul edx, eax
	mov ecx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, eax
	mov eax, [esi+10h]
	sar eax, 18h
	call sub_4B3E80
	add edx, eax
	cmp edx, ecx
	jle loc_4A4FEF
	mov edx, ecx

loc_4A4E8C:
	imul edx, ebp
	mov ebp, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	mov [ebx+30h], al
	mov al, [esp+0Ch]
	mov [ebx+32h], al
	mov al, [esp+20h]
	mov [ebx+0Fh], al
	mov eax, [esp+8]
	mov [ebx+10h], ax
	xor eax, eax
	mov al, [esi+0Dh]
	imul eax, 64h
	mov [ebx+42h], ax
	mov al, [esp+28h]
	mov [ebx+33h], al
	mov eax, [esp+4]
	call sub_4B0D30
	mov eax, [esi+24h]
	mov [ebx+48h], eax
	mov eax, [ebx+48h]
	mov dword [ebx+24h], 0
	mov eax, [eax]
	mov [ebx+2Ch], eax
	mov eax, [ebx+48h]
	mov eax, [eax+4]
	shl eax, 10h
	mov byte [ebx+35h], 0
	mov [ebx+28h], eax
	mov al, [esi+0Ah]
	mov [ebx+34h], al
	mov al, [esi+0Bh]
	mov [ebx+36h], al
	mov al, [esp]
	xor edx, edx
	mov [ebx+0Ah], al
	mov eax, [esp+4]
	mov byte [ebx+0Bh], 0Fh
	call sub_4A8BF0
	mov ecx, dword [dword_59BFA4]
	mov dl, [esi+0Eh]
	imul edx, ecx
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	push eax
	mov eax, [ebx+10h]
	sar eax, 10h
	mov ecx, [esp+24h]
	push eax
	mov eax, [ebx+2Eh]
	xor edx, edx
	sar eax, 18h
	mov dl, [edi+6]
	push eax
	mov ebx, [esp+10h]
	lea eax, [esi+28h]
	call sub_488CFC
	mov edx, eax
	test eax, eax
	jge loc_4A4F62
	mov eax, [esp+4]
	call sub_4A5678
	mov dword [dword_59C610], edx

loc_4A4F62:
	call sub_4A5374
	mov eax, dword [dword_59C610]
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4F75:
	mov eax, 0FFFFFFFFh
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4F83:
	test eax, eax
	jl loc_4A4C99
	cmp eax, 7Fh
	jle loc_4A4D08
	mov eax, 0FFFFFFF8h
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4FA2:
	test edx, edx
	jl loc_4A4C99
	cmp edx, 7Fh
	jle loc_4A4D1D
	mov eax, 0FFFFFFF8h
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4FC1:
	test eax, eax
	jge loc_4A4D61
	xor ecx, ecx
	mov [esp+0Ch], ecx
	jmp loc_4A4D61

loc_4A4FD4:
	xor ecx, ecx
	mov [esp+20h], ecx
	jmp loc_4A4D85

loc_4A4FDF:
	call sub_4A5374
	mov eax, edx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A4FEF:
	test edx, edx
	jge loc_4A4E8C
	xor edx, edx
	jmp loc_4A4E8C
;sub_4A4C40 endp

sub_4A5000: ;SUBROUTINE
	test eax, eax
	jz loc_4A501D
	cmp dword [eax], 6C544150h
	jz loc_4A5023
	cmp word [eax], 5450h
	jz sub_4A8524
	mov eax, 0FFFFFFF9h
	ret

loc_4A501D:
	mov eax, 0FFFFFFF8h
	ret

loc_4A5023:
	push ecx
	push ebx
	mov ecx, [edx+6]
	sar ecx, 18h
	push ecx
	mov ecx, [edx+5]
	sar ecx, 18h
	push ecx
	mov ecx, [edx+4]
	mov ebx, [edx+2]
	sar ecx, 18h
	sar ebx, 18h
	push ecx
	mov ecx, [edx+3]
	mov edx, [edx+1]
	sar ecx, 18h
	sar edx, 18h
	call sub_4A4C40
	pop ebx
	pop ecx
	ret
;sub_4A5000 endp

sub_4A5060: ;SUBROUTINE
	mov dword [dword_59C614], eax
	ret
;sub_4A5060 endp

sub_4A5068: ;SUBROUTINE
	push edx
	push edi
	mov edx, eax
	cmp dword [dword_4DDAA8], 0
	jz loc_4A5091

loc_4A5075:
	cmp dword [dword_59C614], 0
	jz loc_4A509D
	xor edi, edi
	mov eax, edx
	mov dword [dword_4DDAA4], edi
	call dword [dword_59C614]
	pop edi
	pop edx
	ret

loc_4A5091:
	call sub_489E0C
	mov dword [dword_4DDAA8], eax
	jmp loc_4A5075

loc_4A509D:
	push esi
	mov esi, 1
	mov edx, dword [dword_4DDAA8]
	xor eax, eax
	mov dword [dword_4DDAA4], esi
	call sub_489E20
	pop esi
	pop edi
	pop edx
	ret
;sub_4A5068 endp

sub_4A50F8: ;SUBROUTINE
	push edx
	mov edx, dword [dword_4DDAA8]
	test edx, edx
	jnz loc_4A5105
	pop edx
	ret

loc_4A5105:
	push ecx
	mov ecx, 1
	xor eax, eax
	mov dword [dword_4DDAA4], ecx
	call sub_489E20
	pop ecx
	pop edx
	ret
;sub_4A50F8 endp

sub_4A5124: ;SUBROUTINE
	cmp dword [dword_59C614], 0
	jz locret_4A5136
	cmp dword [dword_4DABCC], 0
	jnz loc_4A5137

locret_4A5136:
	ret

loc_4A5137:
	call sub_4A5068
	jmp sub_4A513C
;sub_4A5124 endp

sub_4A513C: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push edi
	push ebp
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_4A50DA
	mov ebx, 3E8h
	xor ecx, ecx

loc_4A5153:
	cmp ecx, dword [dword_4DDAA8]
	jz loc_4A5169
	mov edi, dword [dword_4DDAA4]
	cmp ecx, edi
	jz loc_4A50BA

loc_4A5169:
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A50BA:
	mov eax, edi
	call sub_483EB0
	mov edx, ebx
	mov ebp, dword [dword_4DABCC]
	mov eax, ebx
	sar edx, 1Fh
	idiv ebp
	call sub_489B9C
	jmp loc_4A5153

loc_4A50DA:
	mov edx, dword [dword_4DDAA8]
	test edx, edx
	jz loc_4A5169
	mov eax, edx
	call sub_489E5C
	pop ebp
	pop edi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A513C endp

sub_4A5170: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	inc dword [dword_4DDAB4]
	inc dword [dword_59C608]
	cmp dword [dword_4DDA84], 0
	jnz loc_4A52B8

loc_4A5194:
	cmp dword [dword_4DDA78], 0
	jz loc_4A51A3
	call dword [dword_4DDA78]

loc_4A51A3:
	cmp dword [dword_4DDA7C], 0
	jnz loc_4A52C3

loc_4A51B0:
	mov esi, dword_59BFB0
	xor ebx, ebx

loc_4A51B7:
	mov ah, [esi+0Ch]
	mov ecx, esi
	cmp ah, 1
	jnz loc_4A527F
	cmp dword [esi], 0
	jl loc_4A527F
	cmp dword [esi+5Ch], 0
	jz loc_4A51F9
	mov dl, [esi+3Fh]
	inc dl
	mov [esi+3Fh], dl
	cmp dl, [esi+3Dh]
	jb loc_4A51E5
	mov byte [esi+3Fh], 0

loc_4A51E5:
	mov eax, ebx
	call sub_4B0D30
	mov edx, [ecx+10h]
	mov eax, ebx
	sar edx, 10h
	call sub_489690

loc_4A51F9:
	mov edx, [ecx+58h]
	xor edi, edi
	test edx, edx
	jz loc_4A521A
	mov al, [ecx+3Eh]
	inc al
	mov [ecx+3Eh], al
	mov ah, [ecx+3Ch]
	mov edi, 1
	cmp al, ah
	jb loc_4A521A
	mov byte [ecx+3Eh], 0

loc_4A521A:
	mov ebp, [ecx+18h]
	test ebp, ebp
	jz loc_4A5252
	mov edx, [ecx+20h]
	mov edi, 1
	add edx, ebp
	mov ebp, [ecx+18h]
	mov [ecx+20h], edx
	test ebp, ebp
	jl loc_4A52CE
	mov eax, edx
	mov edx, [ecx+1Ch]
	cmp eax, edx
	jl loc_4A524C
	mov dword [ecx+18h], 0
	mov [ecx+20h], edx

loc_4A524C:
	cmp dword [ecx+20h], 0
	jl loc_4A5278

loc_4A5252:
	mov edx, [ecx+24h]
	test edx, edx
	jz loc_4A5261
	add [ecx+28h], edx
	mov edi, 1

loc_4A5261:
	cmp dword [ecx+2Ch], 0
	jnz loc_4A5317
	mov dl, [ecx+35h]
	inc dl
	mov [ecx+35h], dl
	cmp dl, [ecx+34h]
	jl loc_4A52E8

loc_4A5278:
	mov eax, [ecx]
	call sub_489840

loc_4A527F:
	inc ebx
	add esi, 60h
	cmp ebx, 10h
	jl loc_4A51B7
	cmp dword [dword_4DDA80], 0
	jz loc_4A52AB
	mov ecx, 3
	mov eax, dword [dword_59C608]
	xor edx, edx
	div ecx
	test edx, edx
	jz loc_4A534D

loc_4A52AB:
	dec dword [dword_4DDAB4]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A52B8:
	call dword [dword_4DDA84]
	jmp loc_4A5194

loc_4A52C3:
	call dword [dword_4DDA7C]
	jmp loc_4A51B0

loc_4A52CE:
	mov ebp, [ecx+1Ch]
	cmp edx, ebp
	jg loc_4A524C
	mov dword [ecx+18h], 0
	mov [ecx+20h], ebp
	jmp loc_4A524C

loc_4A52E8:
	mov eax, [ecx+32h]
	sar eax, 18h
	mov edx, [ecx+48h]
	shl eax, 3
	add eax, edx
	mov edx, [eax]
	mov [ecx+2Ch], edx
	test edx, edx
	jl loc_4A5344

loc_4A52FF:
	mov edx, [eax+4]
	mov ebp, [ecx+28h]
	shl edx, 10h
	sub edx, ebp
	mov eax, edx
	mov ebp, [ecx+2Ch]
	sar edx, 1Fh
	idiv ebp
	mov [ecx+24h], eax

loc_4A5317:
	dec dword [ecx+2Ch]
	test edi, edi
	jz loc_4A527F
	mov eax, ebx
	call sub_4A8BF0
	cmp dword [ecx], 0
	jl loc_4A527F
	mov edx, [ecx+2Eh]
	mov eax, ebx
	sar edx, 18h
	call sub_4894A4
	jmp loc_4A527F

loc_4A5344:
	mov dword [ecx+2Ch], 7FFFFFFFh
	jmp loc_4A52FF

loc_4A534D:
	call dword [dword_4DDA80]
	dec dword [dword_4DDAB4]
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A5170 endp

sub_4A5360: ;SUBROUTINE
	mov eax, dword [dword_59C600]
	call sub_489F48
	inc dword [dword_4DDAB8]
	ret
;sub_4A5360 endp

sub_4A5374: ;SUBROUTINE
	dec dword [dword_4DDAB8]
	mov eax, dword [dword_59C600]
	jmp sub_489F60
;sub_4A5374 endp

sub_4A5390: ;SUBROUTINE
	push ebx
	push ecx
	mov ebx, eax
	mov ecx, edx
	xor eax, eax
	test edx, edx
	jle loc_4A53AE

loc_4A539C:
	mov edx, dword (dword_59C614+1)[eax]
	sar edx, 18h
	cmp edx, ebx
	jz loc_4A53B3
	inc eax
	cmp eax, ecx
	jl loc_4A539C

loc_4A53AE:
	xor eax, eax
	pop ecx
	pop ebx
	ret

loc_4A53B3:
	mov eax, 1
	pop ecx
	pop ebx
	ret
;sub_4A5390 endp

sub_4A53BC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov [esp+1Ch], eax
	mov [esp+18h], edx
	mov [esp+10h], ebx
	mov [esp+8], ecx
	mov edx, 0FFFFFFF7h
	mov ebx, [esp+18h]
	xor ecx, ecx
	xor eax, eax
	mov [esp+0Ch], edx
	mov [esp], ecx
	test ebx, ebx
	jle loc_4A53FC
	mov dl, 0FFh
	mov esi, [esp+18h]

loc_4A53F0:
	inc eax
	mov byte (dword_59C614+3)[eax], dl
	cmp eax, esi
	jl loc_4A53F0
	nop

loc_4A53FC:
	mov edi, dword [dword_4DDABC]
	add edi, 20h
	mov dword [dword_4DDABC], edi
	test edi, edi
	jl loc_4A543A

loc_4A540F:
	mov edi, [esp+18h]
	xor ebx, ebx
	xor esi, esi

loc_4A5417:
	mov eax, dword [dword_4DDA70+2]
	sar eax, 18h
	cmp ebx, eax
	jge loc_4A546D
	mov eax, 1
	mov cl, bl
	mov edx, [esp+1Ch]
	shl eax, cl
	test eax, edx
	jnz loc_4A5443

loc_4A5434:
	add esi, 60h
	inc ebx
	jmp loc_4A5417

loc_4A543A:
	xor eax, eax
	mov dword [dword_4DDABC], eax
	jmp loc_4A540F

loc_4A5443:
	cmp byte dword_59BFBC[esi], 0
	jnz loc_4A5434
	mov edx, [esp]
	mov eax, ebx
	call sub_4A5390
	test eax, eax
	jnz loc_4A5434
	mov eax, [esp]
	lea ecx, [eax+1]
	mov byte byte_59C618[eax], bl
	mov [esp], ecx
	cmp ecx, edi
	jl loc_4A5434

loc_4A546D:
	mov eax, [esp]
	mov ebp, [esp+18h]
	mov [esp+14h], eax
	cmp eax, ebp
	jge loc_4A5514

loc_4A5480:
	mov edi, 66h
	mov ebp, 7FFFFFFFh
	mov esi, dword_59BFB0
	xor ecx, ecx
	xor ebx, ebx
	mov [esp+4], ecx

loc_4A5497:
	mov eax, dword [dword_4DDA70+2]
	sar eax, 18h
	cmp ebx, eax
	jge loc_4A54EB
	mov eax, 1
	mov cl, bl
	mov edx, [esp+1Ch]
	shl eax, cl
	test eax, edx
	jnz loc_4A54BA

loc_4A54B4:
	add esi, 60h
	inc ebx
	jmp loc_4A5497

loc_4A54BA:
	mov edx, [esp]
	mov eax, ebx
	call sub_4A5390
	test eax, eax
	jnz loc_4A54B4
	mov al, [esi+0Eh]
	cmp eax, edi
	jge loc_4A54DA
	mov edi, eax
	mov [esp+4], ebx
	mov ebp, [esi+14h]
	jmp loc_4A54B4

loc_4A54DA:
	jnz loc_4A54B4
	mov ecx, [esi+14h]
	cmp ebp, ecx
	jle loc_4A54B4
	mov ebp, ecx
	mov [esp+4], ebx
	jmp loc_4A54B4

loc_4A54EB:
	cmp edi, [esp+10h]
	jg loc_4A55D7
	mov al, [esp+4]
	mov ebx, [esp]
	mov edi, [esp+18h]
	lea esi, [ebx+1]
	mov byte byte_59C618[ebx], al
	mov [esp], esi
	cmp esi, edi
	jl loc_4A55D7

loc_4A5514:
	mov eax, [esp]
	cmp eax, [esp+18h]
	jnz loc_4A55CC
	mov ebx, dword [dword_59C614+1]
	mov eax, dword [dword_4DDABC]
	sar ebx, 18h
	or eax, ebx
	mov ebx, [esp+8]
	mov [ebx], eax
	mov ebx, dword [dword_59C614+1]
	mov edi, dword [dword_4DDABC]
	sar ebx, 18h
	or edi, ebx
	lea eax, 0[ebx*4]
	mov esi, [esp]
	sub eax, ebx
	mov [esp+0Ch], ebx
	shl eax, 5
	xor ebx, ebx
	mov dword dword_59BFB0[eax], edi
	test esi, esi
	jle loc_4A561F

loc_4A556B:
	mov eax, dword (dword_59C614+1)[ebx]
	sar eax, 18h
	imul eax, 60h
	mov edi, dword_59BFB0
	add edi, eax
	mov cl, [edi+0Ch]
	mov esi, [edi]
	cmp cl, 1
	jnz loc_4A5602
	test esi, esi
	jl loc_4A55F1

loc_4A5590:
	mov eax, esi
	call sub_489840
	mov eax, esi
	call sub_486040
	cmp eax, 1
	jz loc_4A5602
	dec ebx
	test ebx, ebx
	jl loc_4A55C4
	xor edx, edx

loc_4A55AA:
	mov eax, dword (dword_59C614+1)[ebx]
	sar eax, 18h
	imul eax, 60h
	add eax, dword_59BFB0
	dec ebx
	mov [eax+0Ch], dl
	test ebx, ebx
	jge loc_4A55AA
	nop

loc_4A55C4:
	mov dword [esp+0Ch], 0FFFFFFF7h

loc_4A55CC:
	mov eax, [esp+0Ch]
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret

loc_4A55D7:
	mov eax, [esp+14h]
	inc eax
	mov edx, [esp+18h]
	mov [esp+14h], eax
	cmp eax, edx
	jl loc_4A5480
	jmp loc_4A5514

loc_4A55F1:
	mov eax, [edi+41h]
	sar eax, 18h
	imul eax, 60h
	mov esi, dword dword_59BFB0[eax]
	jmp loc_4A5590

loc_4A5602:
	mov eax, dword [dword_59C608]
	mov byte [edi+0Ch], 1
	mov [edi+14h], eax
	mov al, [esp+10h]
	inc ebx
	mov [edi+0Eh], al
	cmp ebx, [esp]
	jl loc_4A556B

loc_4A561F:
	mov eax, 1
	cmp eax, [esp]
	jge loc_4A55CC
	mov ecx, [esp]

loc_4A562C:
	mov ebx, dword [dword_59C614+1]
	sar ebx, 18h
	imul ebx, 60h
	mov dl, byte byte_59C618[eax]
	mov byte (dword_59BFB0+3)[ebx+eax], dl
	mov ebx, dword (dword_59C614+1)[eax]
	sar ebx, 18h
	imul ebx, 60h
	mov dword dword_59BFB0[ebx], 0FFFFFFFFh
	mov dl, byte [byte_59C618]
	inc eax
	mov byte byte_59BFF4[ebx], dl
	cmp eax, ecx
	jl loc_4A562C
	mov eax, [esp+0Ch]
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret
;sub_4A53BC endp

sub_4A5678: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov ebp, eax
	lea edx, 0[eax*4]
	mov esi, 0FFFFFFFFh
	sub edx, eax
	mov eax, dword_59BFB0
	shl edx, 5
	xor ecx, ecx
	mov bl, [edx+eax+3Bh]
	movzx edi, byte [edx+eax+3Bh]
	test bl, bl
	jz loc_4A575D
	xor edx, edx

loc_4A56AB:
	xor ebx, ebx
	mov bl, [eax+3Bh]
	cmp ebx, edi
	jnz loc_4A56C9
	cmp dword [eax], 0
	jl loc_4A56C9
	cmp byte [eax+0Ch], 0
	jz loc_4A56C9
	mov bh, [eax+3Ah]
	inc ecx
	test bh, bh
	jz loc_4A56C9
	mov esi, edx

loc_4A56C9:
	inc edx
	add eax, 60h
	cmp edx, 10h
	jl loc_4A56AB
	lea ebx, 0[ebp*4]
	sub ebx, ebp
	shl ebx, 5
	cmp ecx, 1
	jz loc_4A5728
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 5
	cmp byte dword_59BFBC[eax], 2
	jnz loc_4A5701
	cmp ebp, esi
	jz loc_4A5701
	cmp ecx, 2
	jz loc_4A5732

loc_4A5701:
	lea eax, 0[esi*4]
	sub eax, esi
	shl eax, 5
	cmp byte dword_59BFBC[eax], 1
	jnz loc_4A5742
	cmp ebp, esi
	jnz loc_4A5742
	mov byte dword_59BFBC[eax], 2

loc_4A5721:
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A5728:
	xor al, al
	mov byte dword_59BFBC[ebx], al
	jmp loc_4A5721

loc_4A5732:
	xor cl, cl
	mov byte dword_59BFBC[ebx], cl
	mov byte dword_59BFBC[eax], cl
	jmp loc_4A5721

loc_4A5742:
	lea eax, 0[ebp*4]
	sub eax, ebp
	shl eax, 5
	xor bl, bl
	mov byte dword_59BFBC[eax], bl
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A575D:
	xor bh, bh
	mov byte dword_59BFBC[edx], bh
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A5678 endp

sub_4A576C: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, eax
	and edx, 1Fh
	lea eax, 0[edx*4]
	sub eax, edx
	shl eax, 5
	add eax, dword_59BFB0
	cmp byte [eax+0Ch], 0
	jz loc_4A5790
	cmp ecx, [eax]
	jz loc_4A5795

loc_4A5790:
	mov edx, 0FFFFFFF8h

loc_4A5795:
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_4A576C endp

sub_4A5830: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 34h
	mov esi, [esp+50h]
	mov [esp+24h], eax
	mov [esp+18h], edx
	mov eax, [esp+44h]
	imul eax, esi
	mov edx, ecx
	add ebx, 10h
	sar edx, 1Fh
	add ebx, eax
	mov eax, ecx
	sub eax, edx
	sar eax, 1
	lea edi, [ebx+eax]
	mov eax, [esp+48h]
	inc eax
	sar eax, 1
	mov [esp+10h], eax
	mov ah, byte [byte_4DB25E]
	mov ebp, dword [dword_4DD774]
	test ah, ah
	jnz loc_4A5C00
	mov eax, [esp+24h]
	cmp eax, dword [dword_4DB24C]
	jl loc_4A5C00
	cmp eax, dword [dword_4DB254]
	jge loc_4A5C00
	mov eax, [esp+18h]
	cmp eax, dword [dword_4DB250]
	jl loc_4A5C00
	cmp eax, dword [dword_4DB258]
	jge loc_4A5C00
	mov eax, [esp+24h]
	mov ecx, [esp+48h]
	mov ebx, dword [dword_4DB24C]
	add eax, ecx
	cmp eax, ebx
	jl loc_4A5C00
	cmp eax, dword [dword_4DB254]
	jge loc_4A5C00
	mov eax, [esp+18h]
	mov ecx, [esp+4Ch]
	mov ebx, dword [dword_4DB250]
	add eax, ecx
	cmp eax, ebx
	jl loc_4A5C00
	cmp eax, dword [dword_4DB258]
	jge loc_4A5C00
	mov ecx, [esp+10h]
	mov eax, esi
	mov dl, byte [byte_4DB25C]
	sub eax, ecx
	cmp dl, 10h
	jnz loc_4A5A77
	mov [esp], eax

loc_4A5915:
	mov ebx, [esp+18h]
	mov eax, [esp+24h]
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov esi, eax
	mov eax, [esp+10h]
	mov [esp+2Ch], eax

loc_4A593F:
	xor eax, eax
	mov al, [edi]
	shr eax, 4
	mov ebx, [ebp+eax*4+0]
	cmp ebx, 10000000h
	jb loc_4A59BD
	cmp ebx, 0FC000000h
	jnb loc_4A599A
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_4A599A:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4A59BD:
	lea esi, [esi+2]
	xor eax, eax
	mov al, [edi]
	and eax, 0Fh
	mov ebx, [ebp+eax*4+0]
	cmp ebx, 10000000h
	jb loc_4A5A3E
	cmp ebx, 0FC000000h
	jnb loc_4A5A1B
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_4A5A1B:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4A5A3E:
	lea esi, [esi+2]
	mov ebx, [esp+2Ch]
	inc edi
	dec ebx
	mov [esp+2Ch], ebx
	jnz loc_4A593F
	mov edx, [esp]
	mov ecx, [esp+18h]
	mov ebx, [esp+4Ch]
	inc ecx
	add edi, edx
	mov [esp+18h], ecx
	dec ebx
	mov [esp+4Ch], ebx
	jnz loc_4A5915

loc_4A5A6E:
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A5A77:
	cmp dl, 0Fh
	jnz loc_4A5BF7
	mov [esp+8], eax

loc_4A5A84:
	mov ebx, [esp+18h]
	mov eax, [esp+24h]
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov esi, eax
	mov eax, [esp+10h]
	mov [esp+30h], eax

loc_4A5AAE:
	xor eax, eax
	mov al, [edi]
	shr eax, 4
	shl eax, 2
	lea ebx, [eax+ebp]
	mov ebx, [ebx]
	cmp ebx, 10000000h
	jb loc_4A5B38
	cmp ebx, 0FC000000h
	jnb loc_4A5B15
	mov ax, [esi]
	mov ecx, eax
	and eax, 7C00h
	shl eax, 11h
	mov edx, ecx
	and edx, 3E0h
	shl edx, 9
	add eax, edx
	and ecx, 1Fh
	add eax, ecx
	mov ecx, ebx
	shr ecx, 18h
	xor ecx, 0FFh
	mul ecx
	shl edx, 10h
	add ebx, edx
	mov edx, eax
	shr edx, 5
	and edx, 0FFh
	add ebx, edx
	shr eax, 0Bh
	and eax, 0FF00h
	add ebx, eax

loc_4A5B15:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4A5B38:
	lea esi, [esi+2]
	xor eax, eax
	mov al, [edi]
	and eax, 0Fh
	mov ebx, [ebp+eax*4+0]
	cmp ebx, 10000000h
	jb loc_4A5BC1
	cmp ebx, 0FC000000h
	jnb loc_4A5B9E
	mov ax, [esi]
	mov ecx, eax
	and eax, 7C00h
	shl eax, 11h
	mov edx, ecx
	and edx, 3E0h
	shl edx, 9
	add eax, edx
	and ecx, 1Fh
	add eax, ecx
	mov ecx, ebx
	shr ecx, 18h
	xor ecx, 0FFh
	mul ecx
	shl edx, 10h
	add ebx, edx
	mov edx, eax
	shr edx, 5
	and edx, 0FFh
	add ebx, edx
	shr eax, 0Bh
	and eax, 0FF00h
	add ebx, eax

loc_4A5B9E:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 9
	mov edx, eax
	shr eax, 3
	and edx, 0F800h
	shr edx, 6
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4A5BC1:
	lea esi, [esi+2]
	mov ecx, [esp+30h]
	inc edi
	dec ecx
	mov [esp+30h], ecx
	jnz loc_4A5AAE
	mov esi, [esp+8]
	mov eax, [esp+18h]
	mov edx, [esp+4Ch]
	inc eax
	add edi, esi
	mov [esp+18h], eax
	dec edx
	mov [esp+4Ch], edx
	jz loc_4A5A6E
	jmp loc_4A5A84

loc_4A5BF7:
	cmp dl, 8
	jz loc_4A5C9C

loc_4A5C00:
	mov ebx, [esp+4Ch]
	test ebx, ebx
	jle loc_4A5A6E
	mov eax, [esp+18h]
	mov ecx, [esp+10h]
	mov [esp+14h], eax
	sub esi, ecx
	add eax, ebx
	mov [esp+4], esi
	mov [esp+0Ch], eax

loc_4A5C24:
	mov esi, [esp+48h]
	xor ecx, ecx
	test esi, esi
	jle loc_4A5C7F
	mov eax, [esp+14h]
	mov esi, [esp+24h]
	mov [esp+20h], eax
	mov [esp+1Ch], eax
	inc esi

loc_4A5C3F:
	xor ebx, ebx
	mov bl, [edi]
	inc edi
	mov eax, ebx
	and ebx, 0Fh
	sar eax, 4
	mov [esp+28h], ebx
	test eax, eax
	jnz loc_4A5CE7

loc_4A5C58:
	mov edx, [esp+28h]
	test edx, edx
	jz loc_4A5C71
	mov eax, edx
	mov edx, [esp+20h]
	mov ebx, [ebp+eax*4+0]
	mov eax, esi
	call sub_4B3EE0

loc_4A5C71:
	mov eax, [esp+48h]
	add ecx, 2
	add esi, 2
	cmp ecx, eax
	jl loc_4A5C3F

loc_4A5C7F:
	mov ebx, [esp+4]
	mov esi, [esp+14h]
	mov edx, [esp+0Ch]
	inc esi
	add edi, ebx
	mov [esp+14h], esi
	cmp esi, edx
	jge loc_4A5A6E
	jmp loc_4A5C24

loc_4A5C9C:
	mov ebx, dword [dword_4DB268]
	add ecx, ecx
	sub ebx, ecx
	push ebx
	push eax
	mov esi, [esp+54h]
	push esi
	mov eax, [esp+1Ch]
	push eax
	mov eax, [esp+28h]
	mov ecx, dword [dword_4DB26C]
	shl eax, 2
	add ecx, eax
	mov eax, dword [dword_4DB260]
	mov edx, [ecx]
	mov ecx, [esp+34h]
	add eax, edx
	add eax, ecx
	push eax
	push edi
	add ebp, 40h
	push ebp
	call sub_4B416C
	add esp, 1Ch
	add esp, 34h
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A5CE7:
	mov ebx, [ebp+eax*4+0]
	mov eax, [esp+24h]
	mov edx, [esp+1Ch]
	add eax, ecx
	call sub_4B3EE0
	jmp loc_4A5C58
;sub_4A5830 endp

sub_4A5D00: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 20h
	mov ebp, [esp+38h]
	mov edi, [esp+3Ch]
	mov [esp+1Ch], eax
	mov esi, edx
	test ebp, ebp
	jle loc_4A5DCA
	mov edx, ecx
	mov eax, ecx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov [esp+8], edi
	mov [esp], eax
	imul eax, edi, 0
	imul edi, [esp+30h]
	add ebx, 10h
	mov [esp+10h], esi
	add eax, ebx
	add esi, ebp
	add eax, edi
	mov [esp+4], esi
	mov [esp+0Ch], eax

loc_4A5D4B:
	mov edi, [esp+0Ch]
	mov ecx, [esp]
	mov ebx, [esp+34h]
	add edi, ecx
	xor ecx, ecx
	test ebx, ebx
	jle loc_4A5DAB
	mov eax, [esp+10h]
	mov esi, [esp+1Ch]
	mov [esp+18h], eax
	mov [esp+14h], eax
	inc esi

loc_4A5D6F:
	movzx ebp, byte [edi]
	mov ebx, ebp
	inc edi
	sar ebx, 4
	and ebp, 0Fh
	test ebx, ebx
	jnz loc_4A5DD3

loc_4A5D7F:
	test ebp, ebp
	jz loc_4A5D9D
	lea ebx, 0[ebp*4]
	add ebx, dword_4DD71C
	mov edx, [esp+18h]
	mov eax, esi
	mov ebx, [ebx]
	call sub_4AD870

loc_4A5D9D:
	mov ebp, [esp+34h]
	add ecx, 2
	add esi, 2
	cmp ecx, ebp
	jl loc_4A5D6F

loc_4A5DAB:
	mov eax, [esp+8]
	mov edx, [esp+0Ch]
	mov ecx, [esp+10h]
	mov ebx, [esp+4]
	add edx, eax
	inc ecx
	mov [esp+0Ch], edx
	mov [esp+10h], ecx
	cmp ecx, ebx
	jl loc_4A5D4B

loc_4A5DCA:
	add esp, 20h
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A5DD3:
	shl ebx, 2
	mov eax, [esp+1Ch]
	add ebx, dword_4DD71C
	mov edx, [esp+14h]
	add eax, ecx
	mov ebx, [ebx]
	call sub_4AD870
	jmp loc_4A5D7F
;sub_4A5D00 endp

sub_4A5DF0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov esi, eax
	mov [esp+8], ebx
	mov [esp+0Ch], ecx
	mov ebx, [esp+40h]
	mov al, byte [byte_4DB25C]
	cmp al, 10h
	jnb loc_4A5F8D
	cmp al, 8
	jb loc_4A5FC5
	ja loc_4A5FB7
	mov edi, sub_4A63EC

loc_4A5E24:
	test edi, edi
	jz loc_4A5FC5
	mov ebp, dword [dword_4DB24C]
	xor ecx, ecx
	xor eax, eax
	mov [esp+18h], ecx
	cmp esi, ebp
	jge loc_4A5E42
	mov eax, ebp
	sub eax, esi

loc_4A5E42:
	mov ecx, dword [dword_4DB250]
	cmp edx, ecx
	jge loc_4A5E52
	sub ecx, edx
	mov [esp+18h], ecx

loc_4A5E52:
	mov ebp, dword [dword_4DB254]
	lea ecx, [esi+ebx]
	cmp ecx, ebp
	jle loc_4A5E63
	mov ebx, ebp
	sub ebx, esi

loc_4A5E63:
	mov ecx, [esp+44h]
	mov ebp, dword [dword_4DB258]
	add ecx, edx
	cmp ecx, ebp
	jle loc_4A5E7B
	mov ecx, ebp
	sub ecx, edx
	mov [esp+44h], ecx

loc_4A5E7B:
	test ebx, ebx
	jl loc_4A5FC5
	cmp dword [esp+44h], 0
	jl loc_4A5FC5
	cmp eax, ebx
	jge loc_4A5FC5
	mov ecx, [esp+18h]
	cmp ecx, [esp+44h]
	jge loc_4A5FC5
	mov ebp, [esp+3Ch]
	add ebp, [esp+18h]
	imul ebp, [esp+48h]
	mov [esp], ebp
	mov ebp, [esp+8]
	add ebp, 10h
	mov ecx, eax
	add ebp, [esp]
	and cl, 0F8h
	mov [esp], ebp
	mov ebp, [esp+0Ch]
	add ebp, ecx
	sar ebp, 3
	mov [esp+4], ebp
	mov ebp, [esp]
	add ebp, [esp+4]
	mov [esp+1Ch], ebp
	add edx, [esp+18h]
	mov ebp, dword [dword_4DB26C]
	shl edx, 2
	add edx, ebp
	mov ebp, dword [dword_4DB260]
	add ebp, [edx]
	mov edx, dword [dword_4DB270]
	add esi, ecx
	mov edx, [edx+4]
	imul edx, esi
	sub ebx, ecx
	add ebp, edx
	mov edx, ebx
	sar edx, 3
	mov ecx, ebx
	mov [esp+14h], edx
	shl edx, 3
	mov [esp+10h], ebx
	sub ecx, edx
	and eax, 7
	mov [esp+10h], ecx
	mov cl, al
	mov eax, 0FFh
	sar eax, cl
	mov cl, 8
	mov [esp+24h], al
	sub cl, [esp+10h]
	mov al, 0FFh
	shl al, cl
	mov [esp+20h], al

loc_4A5F3D:
	mov eax, [esp+18h]
	lea ebx, [eax+1]
	mov esi, [esp+44h]
	mov [esp+18h], ebx
	cmp eax, esi
	jge loc_4A5FC5
	mov esi, [esp+14h]
	mov al, [esp+24h]
	mov ecx, [esp+1Ch]
	mov ebx, ebp
	mov [esp+28h], al
	test esi, esi
	jnz loc_4A5FCE

loc_4A5F6A:
	cmp dword [esp+10h], 0
	jnz loc_4A6006

loc_4A5F75:
	mov eax, [esp+48h]
	mov ecx, [esp+1Ch]
	mov ebx, dword [dword_4DB268]
	add ecx, eax
	add ebp, ebx
	mov [esp+1Ch], ecx
	jmp loc_4A5F3D

loc_4A5F8D:
	ja loc_4A5F99
	mov edi, sub_4A6430
	jmp loc_4A5E24

loc_4A5F99:
	cmp al, 18h
	jb loc_4A5FC5
	ja loc_4A5FA9
	mov edi, sub_4A6480
	jmp loc_4A5E24

loc_4A5FA9:
	cmp al, 20h
	jnz loc_4A5FC5
	mov edi, sub_4A6510
	jmp loc_4A5E24

loc_4A5FB7:
	cmp al, 0Fh
	jnz loc_4A5FC5
	mov edi, sub_4A6430
	jmp loc_4A5E24

loc_4A5FC5:
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A5FCE:
	mov bl, [esp+24h]
	mov al, [ecx]
	mov edx, dword [dword_4DD714]
	and al, bl
	and eax, 0FFh
	mov ebx, ebp
	call edi ; sub_4A63EC
	mov ebx, eax
	mov al, 0FFh
	inc ecx
	mov [esp+28h], al

loc_4A5FEE:
	dec esi
	jz loc_4A5F6A
	xor eax, eax
	mov edx, dword [dword_4DD714]
	mov al, [ecx]
	inc ecx
	call edi ; sub_4A63EC
	mov ebx, eax
	jmp loc_4A5FEE

loc_4A6006:
	mov al, [ecx]
	mov ah, [esp+28h]
	mov cl, [esp+20h]
	and al, ah
	mov edx, dword [dword_4DD714]
	and al, cl
	and eax, 0FFh
	call edi ; sub_4A63EC
	jmp loc_4A5F75
;sub_4A5DF0 endp

sub_4A6028: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 330h
	mov [esp+300h], eax
	mov [esp+30Ch], edx
	xor edx, edx
	xor eax, eax

loc_4A6045:
	add edx, 3
	mov ecx, dword dword_570E60[eax]
	mov ebx, dword dword_570E60[eax]
	shr ecx, 10h
	shr ebx, 8
	mov [esp+edx-3], cl
	mov [esp+edx-2], bl
	mov bl, byte dword_570E60[eax]
	add eax, 4
	mov [esp+edx-1], bl
	cmp eax, 400h
	jnz loc_4A6045
	mov eax, [esp+300h]
	xor edi, edi
	add eax, 40h
	mov [esp+304h], edi
	mov [esp+308h], eax

loc_4A6090:
	mov edx, [esp+304h]
	xor eax, eax
	mov al, [esp+edx]
	mov [esp+318h], eax
	xor eax, eax
	mov al, [esp+edx+1]
	mov [esp+310h], eax
	xor eax, eax
	mov ecx, [esp+300h]
	mov al, [esp+edx+2]
	xor esi, esi
	mov [esp+314h], eax

loc_4A60C6:
	xor edx, edx
	mov dl, [ecx+3]
	test edx, edx
	jnz loc_4A611A
	mov eax, edi

loc_4A60D1:
	mov edx, esi
	mov ebx, [esp+30Ch]
	or edx, edi
	mov ebp, [esp+308h]
	add edx, ebx
	add ecx, 4
	add esi, 100h
	mov [edx], al
	cmp ecx, ebp
	jnz loc_4A60C6
	mov eax, [esp+304h]
	add eax, 3
	inc edi
	mov [esp+304h], eax
	cmp edi, 100h
	jl loc_4A6090
	add esp, 330h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A611A:
	mov ebx, 0FFh
	mov [esp+324h], edx
	sub ebx, edx
	mov edx, [esp+318h]
	imul edx, ebx
	xor eax, eax
	mov al, [ecx+2]
	mov [esp+31Ch], eax
	xor eax, eax
	mov al, [ecx]
	mov dword [esp+32Ch], 0FFh
	mov [esp+320h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv dword [esp+32Ch]
	add eax, [esp+31Ch]
	movzx ebp, byte [ecx+1]
	cmp eax, 0FFh
	jle loc_4A6177
	mov eax, 0FFh

loc_4A6177:
	mov edx, [esp+310h]
	imul edx, ebx
	mov dword [esp+32Ch], 0FFh
	mov [esp+328h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv dword [esp+32Ch]
	add eax, ebp
	cmp eax, 0FFh
	jle loc_4A61AD
	mov eax, 0FFh

loc_4A61AD:
	mov edx, [esp+314h]
	imul edx, ebx
	mov ebp, eax
	mov ebx, 0FFh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esp+320h]
	add edx, eax
	cmp edx, ebx
	jle loc_4A61D4
	mov edx, ebx

loc_4A61D4:
	mov eax, [esp+324h]
	mov ebx, [esp+328h]
	shl eax, 18h
	shl ebx, 10h
	shl ebp, 8
	or eax, ebx
	or eax, ebp
	or eax, edx
	call sub_48266C
	jmp loc_4A60D1
;sub_4A6028 endp

sub_4A61FC: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov edx, dword [dword_4DD774]
	call sub_49B2E0
	mov edi, eax
	mov ebx, eax
	and eax, 0FFh
	mov [esp], eax
	imul ebp, eax, 0
	shr ebx, 8
	and ebx, 0FFh
	mov [esp+10h], ebx
	imul ebx, 0
	shr edi, 10h
	and edi, 0FFh
	mov [esp+0Ch], edi
	imul edi, 0
	mov [esp+8], edx
	mov ecx, edx
	lea eax, [edx+40h]
	xor esi, esi
	mov [esp+4], eax

loc_4A624E:
	mov dword [esp+14h], 0Fh
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv dword [esp+14h]
	mov dword [esp+14h], 0Fh
	mov edx, edi
	mov [ecx+3], al
	mov eax, edi
	sar edx, 1Fh
	idiv dword [esp+14h]
	mov dword [esp+14h], 0Fh
	mov edx, ebx
	mov [ecx+2], al
	mov eax, ebx
	sar edx, 1Fh
	idiv dword [esp+14h]
	mov dword [esp+14h], 0Fh
	mov edx, ebp
	mov [ecx+1], al
	mov eax, ebp
	sar edx, 1Fh
	idiv dword [esp+14h]
	add ecx, 4
	add esi, 0FFh
	mov edx, [esp]
	mov [ecx-4], al
	mov eax, [esp+10h]
	add ebp, edx
	mov edx, [esp+0Ch]
	add ebx, eax
	mov eax, [esp+4]
	add edi, edx
	cmp ecx, eax
	jnz loc_4A624E
	cmp byte [byte_4DB25C], 8
	jbe loc_4A62DB
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A62DB:
	mov edx, dword [dword_4DD774]
	mov eax, [esp+8]
	add edx, 40h
	call sub_4A6028
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A61FC endp

sub_4A62F8: ;SUBROUTINE
	cmp dword [dword_4DD774], 0
	jnz loc_4A631A
	push ecx
	mov ecx, 1040h
	mov eax, ecx
	mov dword [dword_4DD778], ecx
	call sub_49E3E0
	mov dword [dword_4DD774], eax
	pop ecx

loc_4A631A:
	call sub_4A6354
	cmp dword [dword_4DD6FC], 1
	jz loc_4A633C
	cmp dword [dword_4DD700], 0
	jz loc_4A6347
	mov dword [dword_4DD77C], sub_4A5830
	ret

loc_4A633C:
	mov dword [dword_4DD77C], sub_4A5DF0
	ret

loc_4A6347:
	mov dword [dword_4DD77C], sub_4A5D00
	ret
;sub_4A62F8 endp

sub_4A6354: ;SUBROUTINE
	push ebx
	push edx
	cmp dword [dword_4DD798], 0
	jnz loc_4A6374
	cmp dword [dword_4DD700], 0
	jz loc_4A6371
	cmp dword [dword_4DD6FC], 4
	jz loc_4A63A2

loc_4A6371:
	pop edx
	pop ebx
	ret

loc_4A6374:
	mov ebx, 40h
	mov eax, dword_4DD71C
	mov edx, dword [dword_4DD774]
	call sub_48A980
	cmp byte [byte_4DB25C], 8
	ja loc_4A6371
	mov eax, dword [dword_4DD774]
	lea edx, [eax+40h]
	call sub_4A6028
	pop edx
	pop ebx
	ret

loc_4A63A2:
	mov eax, dword [dword_4DD714]
	call sub_4A61FC
	pop edx
	pop ebx
	ret
;sub_4A6354 endp

sub_4A63B0: ;SUBROUTINE
	push edx
	push esi
	mov edx, dword [dword_4DD774]
	test edx, edx
	jnz loc_4A63C7
	xor esi, esi
	mov dword [dword_4DD77C], esi
	pop esi
	pop edx
	ret

loc_4A63C7:
	push ecx
	mov eax, edx
	xor ecx, ecx
	call sub_49E448
	mov dword [dword_4DD774], ecx
	mov dword [dword_4DD778], ecx
	pop ecx
	xor esi, esi
	mov dword [dword_4DD77C], esi
	pop esi
	pop edx
	ret
;sub_4A63B0 endp

sub_4A63EC: ;SUBROUTINE
	test al, 80h
	jnz loc_4A6422

loc_4A63F0:
	test al, 40h
	jz loc_4A63F7
	mov [ebx+1], dl

loc_4A63F7:
	test al, 20h
	jz loc_4A63FE
	mov [ebx+2], dl

loc_4A63FE:
	test al, 10h
	jz loc_4A6405
	mov [ebx+3], dl

loc_4A6405:
	test al, 8
	jz loc_4A640C
	mov [ebx+4], dl

loc_4A640C:
	test al, 4
	jz loc_4A6413
	mov [ebx+5], dl

loc_4A6413:
	test al, 2
	jz loc_4A641A
	mov [ebx+6], dl

loc_4A641A:
	test al, 1
	jnz loc_4A6426
	lea eax, [ebx+8]
	ret

loc_4A6422:
	mov [ebx], dl
	jmp loc_4A63F0

loc_4A6426:
	mov [ebx+7], dl
	lea eax, [ebx+8]
	ret
;sub_4A63EC endp

sub_4A6430: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	test al, 80h
	jnz loc_4A6470

loc_4A6437:
	test al, 40h
	jz loc_4A643F
	mov [ecx+2], dx

loc_4A643F:
	test al, 20h
	jz loc_4A6447
	mov [ecx+4], dx

loc_4A6447:
	test al, 10h
	jz loc_4A644F
	mov [ecx+6], dx

loc_4A644F:
	test al, 8
	jz loc_4A6457
	mov [ecx+8], dx

loc_4A6457:
	test al, 4
	jz loc_4A645F
	mov [ecx+0Ah], dx

loc_4A645F:
	test al, 2
	jz loc_4A6467
	mov [ecx+0Ch], dx

loc_4A6467:
	test al, 1
	jnz loc_4A6475
	lea eax, [ecx+10h]
	pop ecx
	ret

loc_4A6470:
	mov [ebx], dx
	jmp loc_4A6437

loc_4A6475:
	mov [ecx+0Eh], dx
	lea eax, [ecx+10h]
	pop ecx
	ret
;sub_4A6430 endp

sub_4A6480: ;SUBROUTINE
	push ecx
	sub esp, 4
	mov [esp], edx
	mov ecx, [esp]
	sar ecx, 8
	sar edx, 10h
	mov ah, cl
	mov dh, [esp]
	test al, 80h
	jnz loc_4A64F3

loc_4A6499:
	test al, 40h
	jz loc_4A64A6
	mov [ebx+3], dl
	mov [ebx+4], ah
	mov [ebx+5], dh

loc_4A64A6:
	test al, 20h
	jz loc_4A64B3
	mov [ebx+6], dl
	mov [ebx+7], ah
	mov [ebx+8], dh

loc_4A64B3:
	test al, 10h
	jz loc_4A64C0
	mov [ebx+9], dl
	mov [ebx+0Ah], ah
	mov [ebx+0Bh], dh

loc_4A64C0:
	test al, 8
	jz loc_4A64CD
	mov [ebx+0Ch], dl
	mov [ebx+0Dh], ah
	mov [ebx+0Eh], dh

loc_4A64CD:
	test al, 4
	jz loc_4A64DA
	mov [ebx+0Fh], dl
	mov [ebx+10h], ah
	mov [ebx+11h], dh

loc_4A64DA:
	test al, 2
	jz loc_4A64E7
	mov [ebx+12h], dl
	mov [ebx+13h], ah
	mov [ebx+14h], dh

loc_4A64E7:
	test al, 1
	jnz loc_4A64FD
	lea eax, [ebx+18h]
	add esp, 4
	pop ecx
	ret

loc_4A64F3:
	mov [ebx], dl
	mov [ebx+1], cl
	mov [ebx+2], dh
	jmp loc_4A6499

loc_4A64FD:
	mov [ebx+15h], dl
	mov [ebx+16h], ah
	mov [ebx+17h], dh
	lea eax, [ebx+18h]
	add esp, 4
	pop ecx
	ret
;sub_4A6480 endp

sub_4A6510: ;SUBROUTINE
	push ecx
	mov ecx, ebx
	test al, 80h
	jnz loc_4A654A

loc_4A6517:
	test al, 40h
	jz loc_4A651E
	mov [ecx+4], edx

loc_4A651E:
	test al, 20h
	jz loc_4A6525
	mov [ecx+8], edx

loc_4A6525:
	test al, 10h
	jz loc_4A652C
	mov [ecx+0Ch], edx

loc_4A652C:
	test al, 8
	jz loc_4A6533
	mov [ecx+10h], edx

loc_4A6533:
	test al, 4
	jz loc_4A653A
	mov [ecx+14h], edx

loc_4A653A:
	test al, 2
	jz loc_4A6541
	mov [ecx+18h], edx

loc_4A6541:
	test al, 1
	jnz loc_4A654E
	lea eax, [ecx+20h]
	pop ecx
	ret

loc_4A654A:
	mov [ebx], edx
	jmp loc_4A6517

loc_4A654E:
	mov [ecx+1Ch], edx
	lea eax, [ecx+20h]
	pop ecx
	ret
;sub_4A6510 endp

;	Attributes: library function

malloc_: ;SUBROUTINE
	push ecx
	push edx

	push eax
	call malloc_wrap
	add esp, 4

	pop edx
	pop ecx

	ret
;malloc_ endp

sub_4A66EC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, ebx
	mov edi, dword [dword_563F28]
	xor ecx, ecx
	test edx, 3
	jz loc_4A6722
	sub ebp, 1
	js loc_4A671F

loc_4A6707:
	mov cl, [eax]
	cmp cl, 0FFh
	jz loc_4A671F
	mov ebx, [edi+ecx*4]
	mov [edx], bx
	lea eax, [eax+1]
	lea edx, [edx+2]
	sub ebp, 1
	jns loc_4A6707

loc_4A671F:
	add ebp, 1

loc_4A6722:
	sub ebp, 2
	js loc_4A6780

loc_4A6727:
	mov cl, [eax]
	cmp cl, 0FFh
	jz loc_4A6756
	mov ebx, [edi+ecx*4]
	mov cl, [eax+1]
	cmp cl, 0FFh
	jz loc_4A6772
	mov esi, [edi+ecx*4]
	and ebx, 0FFFFh
	shl esi, 10h
	or ebx, esi
	mov [edx], ebx

loc_4A6749:
	lea eax, [eax+2]
	lea edx, [edx+4]
	sub ebp, 2
	jns loc_4A6727
	jmp loc_4A6780

loc_4A6756:
	mov cl, [eax+1]
	cmp cl, 0FFh
	jz loc_4A6749
	mov ebx, [edi+ecx*4]
	mov [edx+2], bx
	lea eax, [eax+2]
	lea edx, [edx+4]
	sub ebp, 2
	jns loc_4A6727
	jmp loc_4A6780

loc_4A6772:
	mov [edx], bx
	lea eax, [eax+2]
	lea edx, [edx+4]
	sub ebp, 2
	jns loc_4A6727

loc_4A6780:
	add ebp, 2
	sub ebp, 1
	js loc_4A67A0

loc_4A6788:
	mov cl, [eax]
	cmp cl, 0FFh
	jz loc_4A67A0
	mov ebx, [edi+ecx*4]
	mov [edx], bx
	lea eax, [eax+1]
	lea edx, [edx+2]
	sub ebp, 1
	jns loc_4A6788

loc_4A67A0:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A66EC endp

sub_4A67F8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov esi, eax
	mov edi, edx
	mov eax, edi
	mov ecx, 40h
	mov edx, dword_4DDC4E

loc_4A680B:
	cmp [edx], eax
	jz loc_4A6821
	cmp word [edx], 0
	jz loc_4A681F
	add edx, 4
	dec ecx
	jnz loc_4A680B
	pop edi
	pop esi
	pop ecx
	ret

loc_4A681F:
	mov [edx], eax

loc_4A6821:
	mov eax, 41h
	sub eax, ecx
	mov edx, esi
	or dl, dl
	jz loc_4A683D
	cmp edx, 7Fh
	jg loc_4A6839
	mov byte byte_4DDB44[edx], al

loc_4A6839:
	pop edi
	pop esi
	pop ecx
	ret

loc_4A683D:
	movzx edx, dh
	cmp edx, 84h
	jg loc_4A6839
	mov byte byte_4DDBC4[edx], al
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A67F8 endp

sub_4A6860: ;SUBROUTINE
	push ecx
	push edx
	mov edx, [eax]
	inc edx
	xor ecx, ecx
	mov cl, [edx-1]
	mov [eax], edx
	mov eax, ecx
	pop edx
	pop ecx
	ret
;sub_4A6860 endp

sub_4A6874: ;SUBROUTINE
	cmp eax, 20h
	jl locret_4A688B
	cmp eax, 7Fh
	jg locret_4A688B
	mov ax, word word_4DDD14[eax*2]
	and eax, 0FFFFh

locret_4A688B:
	ret
;sub_4A6874 endp

sub_4A688C: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	mov edx, [eax]
	xor ah, ah
	mov al, [edx]
	inc edx
	test al, 80h
	jz loc_4A68B1
	push ebx
	xor bh, bh
	shl eax, 8
	mov bl, [edx]
	inc edx
	or eax, ebx
	pop ebx
	mov [ecx], edx
	and eax, 0FFFFh
	pop edx
	pop ecx
	ret

loc_4A68B1:
	and eax, 0FFFFh
	call sub_4A6874
	mov [ecx], edx
	and eax, 0FFFFh
	pop edx
	pop ecx
	ret
;sub_4A688C endp

sub_4A68D0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ebx, eax
	mov esi, dword [dword_4DB24C]
	xor ecx, ecx
	cmp eax, esi
	jl loc_4A6930
	cmp eax, dword [dword_4DB254]
	jge loc_4A6930
	cmp edx, dword [dword_4DB250]
	jl loc_4A6930
	cmp edx, dword [dword_4DB258]
	jge loc_4A6930
	mov eax, dword [dword_4DB26C]
	mov esi, dword [dword_4DB270]
	mov edx, [eax+edx*4]
	mov edi, [esi+ebx*4]
	mov eax, dword [dword_4DB260]
	add edx, edi
	add edx, eax
	mov al, byte [byte_4DB25C]
	cmp al, 0Fh
	jnb loc_4A6937
	cmp al, 4
	jb loc_4A6930
	ja loc_4A6952
	test bl, 1
	jz loc_4A695A
	mov cl, [edx]
	sar ecx, 4
	and ecx, 0Fh

loc_4A6930:
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A6937:
	jbe loc_4A6941
	cmp al, 18h
	jnb loc_4A6948
	cmp al, 10h
	jnz loc_4A6930

loc_4A6941:
	xor ecx, ecx
	mov cx, [edx]
	jmp loc_4A6930

loc_4A6948:
	jbe loc_4A6966
	cmp al, 20h
	jnz loc_4A6930
	mov ecx, [edx]
	jmp loc_4A6930

loc_4A6952:
	cmp al, 8
	jnz loc_4A6930
	mov cl, [edx]
	jmp loc_4A6930

loc_4A695A:
	mov cl, [edx]
	and ecx, 0Fh
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A6966:
	mov ecx, 3
	mov eax, edx
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, eax
	mov eax, ecx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A68D0 endp

sub_4A6988: ;SUBROUTINE
	push ecx
	push esi
	test edx, 2
	jz loc_4A69B5
	cmp ebx, 1
	jl loc_4A69B5
	mov cx, [eax]
	lea eax, [eax+2]
	mov esi, ecx
	and ecx, 0FFC0h
	shr ecx, 1
	and esi, 1Fh
	or ecx, esi
	sub ebx, 1
	mov [edx], cx
	lea edx, [edx+2]

loc_4A69B5:
	sub ebx, 2
	js loc_4A69DB

loc_4A69BA:
	mov ecx, [eax]
	lea eax, [eax+4]
	mov esi, ecx
	and ecx, 0FFC0FFC0h
	shr ecx, 1
	and esi, 1F001Fh
	or ecx, esi
	sub ebx, 2
	mov [edx], ecx
	lea edx, [edx+4]
	jns loc_4A69BA

loc_4A69DB:
	add ebx, 1
	js loc_4A6A00

loc_4A69E0:
	mov cx, [eax]
	lea eax, [eax+2]
	mov esi, ecx
	and ecx, 0FFC0h
	shr ecx, 1
	and esi, 1Fh
	or ecx, esi
	sub ebx, 1
	mov [edx], cx
	lea edx, [edx+2]
	jns loc_4A69E0

loc_4A6A00:
	pop esi
	pop ecx
	ret
;sub_4A6988 endp

sub_4A6A03: ;SUBROUTINE
	push ecx
	push esi
	test edx, 2
	jz loc_4A6A30
	cmp ebx, 1
	jl loc_4A6A30
	mov cx, [eax]
	lea eax, [eax+2]
	mov esi, ecx
	and ecx, 7FE0h
	add ecx, ecx
	and esi, 1Fh
	or ecx, esi
	sub ebx, 1
	mov [edx], cx
	lea edx, [edx+2]

loc_4A6A30:
	sub ebx, 2
	js loc_4A6A56

loc_4A6A35:
	mov ecx, [eax]
	lea eax, [eax+4]
	mov esi, ecx
	and ecx, 7FE07FE0h
	add ecx, ecx
	and esi, 1F001Fh
	or ecx, esi
	sub ebx, 2
	mov [edx], ecx
	lea edx, [edx+4]
	jns loc_4A6A35

loc_4A6A56:
	add ebx, 1
	js loc_4A6A7B

loc_4A6A5B:
	mov cx, [eax]
	lea eax, [eax+2]
	mov esi, ecx
	and ecx, 7FE0h
	add ecx, ecx
	and esi, 1Fh
	or ecx, esi
	sub ebx, 1
	mov [edx], cx
	lea edx, [edx+2]
	jns loc_4A6A5B

loc_4A6A7B:
	pop esi
	pop ecx
	ret
;sub_4A6A03 endp

sub_4A6A7E: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, dword [off_4DD044]
	xor ecx, ecx

loc_4A6A89:
	mov cl, [eax]
	sub ebx, 1
	lea eax, [eax+1]
	lea edx, [edx+4]
	mov esi, [edi+ecx*4]
	mov [edx-4], esi
	jg loc_4A6A89
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A6A7E endp

sub_4A6AA0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	xor eax, eax
	xor ebx, ebx
	xor ecx, ecx
	xor edx, edx
	sub ebp, 4
	test edi, 2
	jnz loc_4A6B0B
	cmp ebp, 0
	js loc_4A6B0B
	mov al, [esi+1]
	mov bl, [esi]
	mov cl, [esi+3]
	mov dl, [esi+2]

loc_4A6ACD:
	mov eax, dword (dword_56EF38+2)[eax*2]
	lea esi, [esi+4]
	mov ecx, dword (dword_56EF38+2)[ecx*2]
	lea edi, [edi+8]
	mov ax, word word_56EF3C[ebx*2]
	mov bl, [esi]
	mov cx, word word_56EF3C[edx*2]
	mov dl, [esi+2]
	mov [edi-8], eax
	mov [edi-4], ecx
	mov eax, ebx
	mov ecx, edx
	mov al, [esi+1]
	sub ebp, 4
	mov cl, [esi+3]
	jns loc_4A6ACD

loc_4A6B0B:
	add ebp, 3
	js loc_4A6B28

loc_4A6B10:
	mov dl, [esi]
	lea esi, [esi+1]
	mov ax, word word_56EF3C[edx*2]
	mov [edi], ax
	lea edi, [edi+2]
	sub ebp, 1
	jns loc_4A6B10

loc_4A6B28:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A6AA0 endp

sub_4A6B2D: ;SUBROUTINE
	push ecx
	push esi
	lea esi, [eax-1]
	sub ebx, 4
	js loc_4A6B76

loc_4A6B37:
	mov eax, [esi]
	mov ecx, [esi+3]
	bswap eax
	bswap ecx
	or eax, 0FF000000h
	or ecx, 0FF000000h
	mov [edx], eax
	mov [edx+4], ecx
	mov eax, [esi+6]
	mov ecx, [esi+9]
	bswap eax
	bswap ecx
	or eax, 0FF000000h
	or ecx, 0FF000000h
	mov [edx+8], eax
	mov [edx+0Ch], ecx
	sub ebx, 4
	lea esi, [esi+0Ch]
	lea edx, [edx+10h]
	jns loc_4A6B37

loc_4A6B76:
	add ebx, 3
	js loc_4A6B91

loc_4A6B7B:
	mov eax, [esi]
	bswap eax
	or eax, 0FF000000h
	mov [edx], eax
	sub ebx, 1
	lea esi, [esi+3]
	lea edx, [edx+4]
	jns loc_4A6B7B

loc_4A6B91:
	pop esi
	pop ecx
	ret
;sub_4A6B2D endp

sub_4A6B94: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub ebx, 2
	js loc_4A6BCB

loc_4A6B9C:
	mov ecx, [eax]
	mov edi, ecx
	and edi, 7C007C00h
	shr edi, 0Ah
	mov esi, ecx
	and esi, 83E083E0h
	or edi, esi
	and ecx, 1F001Fh
	shl ecx, 0Ah
	or edi, ecx
	mov [edx], edi
	sub ebx, 2
	lea eax, [eax+4]
	lea edx, [edx+4]
	jns loc_4A6B9C

loc_4A6BCB:
	add ebx, 1
	js loc_4A6C01

loc_4A6BD0:
	mov cx, [eax]
	mov edi, ecx
	and edi, 7C007C00h
	shr edi, 0Ah
	mov esi, ecx
	and esi, 83E083E0h
	or edi, esi
	and ecx, 1F001Fh
	shl ecx, 0Ah
	or edi, ecx
	mov [edx], di
	sub ebx, 1
	lea eax, [eax+2]
	lea edx, [edx+2]
	jns loc_4A6BD0

loc_4A6C01:
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A6B94 endp

sub_4A6C05: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	xor eax, eax
	xor ebx, ebx
	xor ecx, ecx
	sub ebp, 4
	test edi, 2
	jnz loc_4A6C6E
	cmp ebp, 0
	js loc_4A6C6E
	mov al, [esi]
	mov bl, [esi+1]

loc_4A6C2A:
	mov ecx, eax
	shr ecx, 4
	mov edx, dword (dword_56EF38+2)[ecx*2]
	lea esi, [esi+2]
	mov ecx, ebx
	shr ecx, 4
	mov ecx, dword (dword_56EF38+2)[ecx*2]
	lea edi, [edi+8]
	and eax, 0Fh
	mov dx, word word_56EF3C[eax*2]
	mov al, [esi]
	and ebx, 0Fh
	mov cx, word word_56EF3C[ebx*2]
	mov bl, [esi+1]
	mov [edi-8], edx
	mov [edi-4], ecx
	sub ebp, 4
	jns loc_4A6C2A

loc_4A6C6E:
	add ebp, 2
	js loc_4A6C9A

loc_4A6C73:
	mov ecx, eax
	shr ecx, 4
	mov edx, dword (dword_56EF38+2)[ecx*2]
	lea esi, [esi+1]
	lea edi, [edi+4]
	and eax, 0Fh
	mov dx, word word_56EF3C[eax*2]
	mov al, [esi]
	mov [edi-4], edx
	sub ebp, 2
	jns loc_4A6C73

loc_4A6C9A:
	add ebp, 1
	js loc_4A6CAD
	and eax, 0Fh
	mov dx, word word_56EF3C[eax*2]
	mov [edi], dx

loc_4A6CAD:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4A6C05 endp

sub_4A6EA8: ;SUBROUTINE
	push ecx
	pushf
	push ebp
	mov ebp, esp
	sub esp, 20h
	pushf
	pop eax
	mov ecx, eax
	xor eax, 200000h
	push eax
	popf
	pushf
	pop eax
	xor eax, ecx
	mov esp, ebp
	pop ebp
	popf
	pop ecx
	ret
;sub_4A6EA8 endp

sub_4A6EC5: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push eax
	mov eax, edx
	cpuid
	pop esi
	mov [esi], eax
	mov [esi+4], ebx
	mov [esi+8], edx
	mov [esi+0Ch], ecx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A6EC5 endp

sub_4A6EE1: ;SUBROUTINE
	push ebx
	push edx
	xor eax, eax
	sahf
	mov eax, 5
	mov ebx, 2
	div bl
	lahf
	cmp ah, 2
	mov eax, 0
	jnz loc_4A6F02
	mov eax, 1

loc_4A6F02:
	pop edx
	pop ebx
	ret
;sub_4A6EE1 endp

strncat_: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ebp, eax
	mov esi, edx
	mov ecx, 0FFFFFFFFh
	mov edi, ebp
	xor al, al
	push es
	jecxz loc_4A6F22
	mov edx, ds
	mov es, dx
	repne scasb
	jnz loc_4A6F22
	dec edi
	jmp loc_4A6F24

loc_4A6F22:
	mov edi, ecx

loc_4A6F24:
	pop es
	mov eax, edi

loc_4A6F29:
	test ebx, ebx
	jz loc_4A6F3A
	mov dl, [esi]
	mov [eax], dl
	test dl, dl
	jz loc_4A6F3A
	inc eax
	inc esi
	dec ebx
	jmp loc_4A6F29

loc_4A6F3A:
	mov byte [eax], 0
	mov eax, ebp
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;strncat_ endp

nullsub_50: ;SUBROUTINE
	ret
;nullsub_50 endp

sub_4A6F54: ;SUBROUTINE
	push ebp
	mov eax, dword [dword_4DABAC]
	mov dword [dword_4DDEE4], eax
	test eax, eax
	jnz loc_4A6F65
	pop ebp
	ret

loc_4A6F65:
	push edi
	push esi
	push edx
	push ecx
	push ebx
	mov ecx, sub_4B634C
	mov ebx, sub_4B644C
	mov esi, sub_4B651C
	mov edi, sub_4B6610
	mov ebp, sub_4B66F0
	mov eax, sub_4B6724
	mov edx, sub_4B67D4
	mov dword [off_4DDE8C], ecx
	mov dword [off_4DDE90], ebx
	mov dword [off_4DDE94], esi
	mov dword [off_4DDE98], edi
	mov dword [off_4DDEBC], ebp
	mov dword [off_4DDEC0], eax
	mov dword [off_4DDEC4], edx
	mov ecx, sub_4B6804
	mov ebx, sub_4B6884
	mov esi, sub_4B6BE8
	mov edi, sub_4B6FDC
	mov ebp, sub_4B7350
	mov eax, sub_4B7794
	mov dword [off_4DDEC8], ecx
	mov dword [off_4DDECC], ebx
	mov dword [off_4DDEAC], esi
	mov dword [off_4DDEB0], edi
	mov dword [off_4DDEB4], ebp
	mov dword [off_4DDEB8], eax
	mov dword [off_4DDE9C], esi
	mov dword [off_4DDEA0], edi
	mov dword [off_4DDEA4], ebp
	mov dword [off_4DDEA8], eax
	mov edi, sub_4B77D4
	xor ebp, ebp
	mov dword [off_4DDED0], edi
	mov dword [dword_4DDEE0], ebp
	pop ebx
	pop ecx
	pop edx
	pop esi
	pop edi
	pop ebp
	ret
;sub_4A6F54 endp

sub_4A7028: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebx, dword [off_4DDED4]
	mov esi, dword [off_4DDEDC]
	mov edi, dword [off_4DDED8]
	mov ecx, eax
	mov ebp, edx
	call sub_4B77E0
	call sub_4B7890
	call sub_4B79D0
	call sub_4B7A80
	mov edi, dword [off_4DDED8]
	mov esi, dword [off_4DDEDC]

loc_4A7066:
	mov ebx, dword [off_4DDED4]
	mov dword [esp], 8
	mov edx, ebx
	mov eax, ebx
	sar edx, 1Fh
	idiv dword [esp]
	test edx, edx
	jnz loc_4A7099

loc_4A7081:
	mov dword [esp], 8
	mov edx, edi
	mov eax, edi
	sar edx, 1Fh
	idiv dword [esp]
	test edx, edx
	jz loc_4A70A2
	inc edi
	jmp loc_4A7081

loc_4A7099:
	inc ebx
	mov dword [off_4DDED4], ebx
	jmp loc_4A7066

loc_4A70A2:
	mov dword [esp], 8
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv dword [esp]
	mov dword [off_4DDED4], ebx
	mov dword [off_4DDEDC], esi
	mov dword [off_4DDED8], edi
	test edx, edx
	jz loc_4A70CC
	inc esi
	jmp loc_4A70A2

loc_4A70CC:
	call sub_4A6F54
	mov dword [dword_5AF5E0], ebp
	test cl, 8
	jz loc_4A7185
	mov edx, 400h
	mov edi, dword [off_4DDED8]
	mov esi, dword [off_4DDEDC]
	mov eax, dword [off_4DDEC8]
	mov ebx, dword [off_4DDED4]

loc_4A70FC:
	mov dword [dword_5AF5E4], eax
	mov dword [dword_5AF5E8], edx

loc_4A7107:
	test ch, 20h
	jz loc_4A71FC
	mov dword [dword_5AF5EC], 0AC44h

loc_4A711A:
	xor eax, eax
	mov dword [off_4DDEDC], esi
	mov dword [off_4DDED8], edi

loc_4A7128:
	add eax, 0DE4h
	xor dl, dl
	mov byte byte_5A09B8[eax], dl
	cmp eax, 0DE40h
	jnz loc_4A7128
	push 200h
	push ebx
	mov dword [off_4DDED4], ebx
	call dword [off_4DDECC]
	add esp, 8
	push 200h
	mov eax, 1F4h
	push dword_4DE2E8
	mov dword [dword_5AF5DC], eax
	call dword [off_4DDECC]
	mov ebx, dword [off_4DDED4]
	add esp, 8
	xor eax, eax
	mov dword [off_4DDED4], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A7185:
	mov edi, dword [off_4DDED8]
	mov esi, dword [off_4DDEDC]
	mov ebx, dword [off_4DDED4]
	test cl, 2
	jz loc_4A71B5
	mov eax, dword [off_4DDEC0]
	mov dword [dword_5AF5E4], eax
	mov dword [dword_5AF5E8], 200h
	jmp loc_4A7107

loc_4A71B5:
	test cl, 4
	jz loc_4A71D4
	mov eax, dword [off_4DDEC4]
	mov ebp, 200h
	mov dword [dword_5AF5E4], eax
	mov dword [dword_5AF5E8], ebp
	jmp loc_4A7107

loc_4A71D4:
	test cl, 1
	jz loc_4A71E8
	mov eax, dword [off_4DDEBC]
	mov edx, 100h
	jmp loc_4A70FC

loc_4A71E8:
	mov eax, 0FFFFFFF8h
	mov dword [off_4DDED4], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A71FC:
	test ch, 10h
	jz loc_4A7210
	mov dword [dword_5AF5EC], 7D00h
	jmp loc_4A711A

loc_4A7210:
	test ch, 8
	jz loc_4A7224
	mov dword [dword_5AF5EC], 5622h
	jmp loc_4A711A

loc_4A7224:
	test ch, 4
	jz loc_4A7238
	mov dword [dword_5AF5EC], 3E80h
	jmp loc_4A711A

loc_4A7238:
	test ch, 2
	jz loc_4A724C
	mov dword [dword_5AF5EC], 2B11h
	jmp loc_4A711A

loc_4A724C:
	test ch, 1
	jz loc_4A7260
	mov dword [dword_5AF5EC], 1F40h
	jmp loc_4A711A

loc_4A7260:
	mov eax, 0FFFFFFF8h
	mov dword [off_4DDEDC], esi
	mov dword [off_4DDED8], edi
	mov dword [off_4DDED4], ebx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A7028 endp

sub_4A734C: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, [esp+30h]
	shl eax, 2
	lea esi, 0[eax*8]
	sub esi, eax
	mov eax, esi
	shl esi, 7
	sub esi, eax
	add esi, dword_5A179C
	mov byte [esi], 0
	lea eax, [esi+0Ch]
	mov byte [esi+9], 0FFh
	mov [esi+0D60h], eax
	test dl, 4
	jnz loc_4A73DD
	test dl, 8
	jz loc_4A7407
	mov eax, dword [off_4DDE98]
	mov [esp], eax
	mov eax, 9
	cmp edi, 19h
	jg loc_4A73FF
	mov edi, dword [off_4DDEA8]

loc_4A73A5:
	test ebx, ebx
	jnz loc_4A7469

loc_4A73AD:
	cmp ecx, 1
	jnz loc_4A74D6
	cmp dword [esp+20h], 0
	jle loc_4A73BF

loc_4A73BD:
	add eax, ecx

loc_4A73BF:
	shl eax, 2
	cmp dword dword_4DDE14[eax], 0
	jnz loc_4A74ED

loc_4A73CF:
	mov eax, 0FFFFFFF2h
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 24h

loc_4A73DD:
	mov eax, dword [off_4DDE94]
	mov [esp], eax
	mov eax, 6
	cmp edi, 19h
	jg loc_4A73F7
	mov edi, dword [off_4DDEA4]
	jmp loc_4A73A5

loc_4A73F7:
	mov edi, dword [off_4DDEB4]
	jmp loc_4A73A5

loc_4A73FF:
	mov edi, dword [off_4DDEB8]
	jmp loc_4A73A5

loc_4A7407:
	test dl, 1
	jz loc_4A742E
	mov eax, dword [off_4DDE8C]
	mov [esp], eax
	xor eax, eax
	cmp edi, 19h
	jg loc_4A7423
	mov edi, dword [off_4DDE9C]
	jmp loc_4A73A5

loc_4A7423:
	mov edi, dword [off_4DDEAC]
	jmp loc_4A73A5

loc_4A742E:
	test dl, 2
	jz loc_4A745B
	mov eax, dword [off_4DDE90]
	mov [esp], eax
	mov eax, 3
	cmp edi, 19h
	jg loc_4A7450
	mov edi, dword [off_4DDEA0]
	jmp loc_4A73A5

loc_4A7450:
	mov edi, dword [off_4DDEB0]
	jmp loc_4A73A5

loc_4A745B:
	mov eax, 0FFFFFFF1h
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 24h

loc_4A7469:
	cmp ebx, 7
	jnz loc_4A749A
	test dl, 4
	jz loc_4A747D
	mov eax, 0Ch
	jmp loc_4A73AD

loc_4A747D:
	test dl, 8
	jz loc_4A748C
	mov eax, 0Fh
	jmp loc_4A73AD

loc_4A748C:
	mov eax, 0FFFFFFF9h
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 24h

loc_4A749A:
	cmp ebx, 9
	jnz loc_4A74AE

loc_4A749F:
	test dl, 4
	jz loc_4A748C
	mov eax, 1Bh
	jmp loc_4A73AD

loc_4A74AE:
	cmp ebx, 8
	jz loc_4A749F
	cmp ebx, 2
	jnz loc_4A745B
	test dl, 4
	jz loc_4A74C7
	mov eax, 12h
	jmp loc_4A73AD

loc_4A74C7:
	test dl, 8
	jz loc_4A748C
	mov eax, 15h
	jmp loc_4A73AD

loc_4A74D6:
	cmp ecx, 2
	jz loc_4A73BD
	mov eax, 0FFFFFFF2h
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 24h

loc_4A74ED:
	mov ebp, eax
	lea eax, [esi+0DACh]
	push eax
	lea eax, [esi+0DA8h]
	mov ebx, [esp+24h]
	push eax
	mov ecx, [esp+24h]
	mov edx, [esp+1Ch]
	push ebx
	mov eax, [esi+0D60h]
	mov ebx, [esp+24h]
	call dword dword_4DDE14[ebp]
	cmp dword [esp], 0
	jz loc_4A73CF
	lea eax, [esi+0DBCh]
	push eax
	lea eax, [esi+0DC0h]
	push eax
	lea eax, [esi+0D90h]
	push eax
	call dword [esp+0Ch]
	add esp, 0Ch
	lea eax, [esi+0DDCh]
	push eax
	lea eax, [esi+0DE0h]
	push eax
	lea eax, [esi+0DC4h]
	push eax
	call dword [esp+0Ch]
	add esp, 0Ch
	test edi, edi
	jz loc_4A73CF
	lea eax, [esi+0DB8h]
	push eax
	lea eax, [esi+0DB4h]
	push eax
	lea eax, [esi+0DB0h]
	push eax
	lea eax, [esi+0D64h]
	push eax
	call edi ; sub_4B587C
	add esp, 10h
	cmp dword [esp+2Ch], 80000h
	jbe loc_4A7597
	mov dword [esp+2Ch], 80000h

loc_4A7597:
	mov ecx, [esp+2Ch]
	push ecx
	lea eax, [esi+0D64h]
	push eax
	call dword [esi+0DB0h]
	add esp, 8
	mov al, [esp+24h]
	mov [esi+1], al
	mov al, [esp+28h]
	mov [esi+2], al
	mov al, [esp+24h]
	mov [esi+4], al
	mov al, [esp+28h]
	mov [esi+5], al
	mov al, [esp+34h]
	mov [esi+3], al
	mov eax, esi
	mov ebx, [esp+28h]
	call sub_4A7800
	push ebx
	mov edi, [esp+28h]
	push edi
	lea eax, [esi+0D90h]
	push eax
	call dword [esi+0DBCh]
	add esp, 0Ch
	mov byte [esi], 1
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 24h
;sub_4A734C endp

sub_4A7600: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov ebp, edx
	add eax, 0DC4h
	mov [esp], eax
	mov eax, esi
	add eax, 0D90h
	mov [esp+0Ch], eax
	mov eax, esi
	add eax, 0D64h
	xor edi, edi
	mov [esp+8], eax

loc_4A762C:
	mov al, [esi+1]
	cmp al, [esi+4]
	jz loc_4A7705

loc_4A7638:
	test ebp, ebp
	jz loc_4A7711
	mov al, [esi+1]
	mov dh, [esi+4]
	dec ebp
	cmp al, dh
	jnz loc_4A771C

loc_4A764F:
	mov al, [esi+2]
	cmp al, [esi+5]
	jz loc_4A765D
	mov al, [esi+7]
	add [esi+2], al

loc_4A765D:
	movsx eax, byte [esi+2]
	push eax
	movsx eax, byte [esi+1]
	push eax
	mov edx, [esp+14h]
	push edx
	call dword [esi+0DBCh]
	add esp, 0Ch
	push 1
	mov ecx, [esp+0Ch]
	push ecx
	call dword [esi+0DB4h]
	mov ecx, dword [off_4DDED8]
	add esp, 8
	add ecx, 10h
	mov [esp+4], ecx
	lea ebx, [esp+4]
	mov ecx, [esi+0D60h]
	mov edx, eax
	mov eax, ecx
	call dword [esi+0DA8h]
	test eax, eax
	jl loc_4A7711
	mov eax, dword [off_4DDEDC]
	mov ecx, [esp+4]
	mov [esp+4], eax
	lea eax, [esp+4]
	push eax
	push ecx
	push 1
	mov ebx, [esp+14h]
	push ebx
	call dword [esi+0DB8h]
	mov cl, byte [dword_4DDEE0]
	mov eax, edi
	shl eax, cl
	mov ecx, dword [off_4DDED4]
	shl eax, 2
	add esp, 10h
	add eax, ecx
	push eax
	mov eax, [esp+8]
	push eax
	push 1
	mov edx, [esp+18h]
	push edx
	call dword [esi+0DC0h]
	mov ch, [esi+8]
	add esp, 10h
	test ch, ch
	jnz loc_4A7727
	inc edi
	jmp loc_4A762C

loc_4A7705:
	mov al, [esi+2]
	cmp al, [esi+5]
	jnz loc_4A7638

loc_4A7711:
	mov eax, edi
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A771C:
	mov al, [esi+6]
	add [esi+1], al
	jmp loc_4A764F

loc_4A7727:
	mov cl, byte [dword_4DDEE0]
	mov eax, edi
	shl eax, cl
	shl eax, 2
	add eax, dword_4DE2E8
	push eax
	mov ecx, [esp+8]
	push ecx
	push 1
	mov ebx, [esp+0Ch]
	push ebx
	call dword [esi+0DE0h]
	add esp, 10h
	inc edi
	jmp loc_4A762C
;sub_4A7600 endp

sub_4A7758: ;SUBROUTINE
	push edx
	push esi
	push edi
	mov esi, eax
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, eax
	shl eax, 7
	mov edi, dword_5A179C
	sub eax, edx
	add edi, eax
	cmp byte [edi], 0
	jnz loc_4A7783
	mov eax, 0FFFFFFFFh
	pop edi
	pop esi
	pop edx
	ret

loc_4A7783:
	push ecx
	push ebx
	mov eax, esi
	xor ebx, ebx
	xor edx, edx
	call sub_4A7850
	mov edx, 100h
	mov eax, edi
	call sub_4A7600
	call dword [off_4DDED0]
	mov eax, esi
	mov byte [edi], 0
	call dword [dword_5AF5E0]
	xor eax, eax
	pop ebx
	pop ecx
	pop edi
	pop esi
	pop edx
	ret
;sub_4A7758 endp

sub_4A77B8: ;SUBROUTINE
	push ecx
	mov ecx, edx
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, eax
	shl eax, 7
	sub eax, edx
	add eax, dword_5A179C
	cmp byte [eax], 0
	jz loc_4A77F8
	cmp ecx, 80000h
	jbe loc_4A77E3
	mov ecx, 80000h

loc_4A77E3:
	push ecx
	lea edx, [eax+0D64h]
	push edx
	call dword [eax+0DB0h]
	add esp, 8
	xor eax, eax
	pop ecx
	ret

loc_4A77F8:
	mov eax, 0FFFFFFFFh
	pop ecx
	ret
;sub_4A77B8 endp

sub_4A7800: ;SUBROUTINE
	push edx
	mov dl, [eax+3]
	test dl, dl
	jnz loc_4A780D
	mov [eax+8], dl
	pop edx
	ret

loc_4A780D:
	push ecx
	mov edx, [eax+1]
	mov ecx, [eax+2]
	sar edx, 18h
	sar ecx, 18h
	add edx, ecx
	sar edx, 1
	mov [eax+8], dl
	mov ecx, [eax+5]
	mov edx, [eax]
	sar ecx, 18h
	sar edx, 18h
	imul edx, ecx
	sar edx, 7
	mov [eax+8], dl
	mov edx, [eax+5]
	sar edx, 18h
	push edx
	push edx
	lea edx, [eax+0DC4h]
	push edx
	call dword [eax+0DDCh]
	add esp, 0Ch
	pop ecx
	pop edx
	ret
;sub_4A7800 endp

sub_4A7850: ;SUBROUTINE
	push ecx
	mov ecx, edx
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, eax
	shl eax, 7
	sub eax, edx
	add eax, dword_5A179C
	cmp byte [eax], 0
	jz loc_4A7895
	mov [eax+4], cl
	movsx edx, byte [eax+1]
	mov [eax+5], bl
	cmp edx, ecx
	jl loc_4A789C
	mov byte [eax+6], 0FFh

loc_4A7880:
	movsx edx, byte [eax+2]
	cmp edx, ebx
	jge loc_4A78A2
	mov byte [eax+7], 1
	call sub_4A7800
	xor eax, eax
	pop ecx
	ret

loc_4A7895:
	mov eax, 0FFFFFFFFh
	pop ecx
	ret

loc_4A789C:
	mov byte [eax+6], 1
	jmp loc_4A7880

loc_4A78A2:
	mov byte [eax+7], 0FFh
	call sub_4A7800
	xor eax, eax
	pop ecx
	ret
;sub_4A7850 endp

sub_4A78B0: ;SUBROUTINE
	shl eax, 2
	mov edx, eax
	shl eax, 3
	sub eax, edx
	mov edx, eax
	shl eax, 7
	sub eax, edx
	add eax, dword_5A179C
	cmp byte [eax], 0
	jnz loc_4A78D1
	mov eax, 0FFFFFFFFh
	ret

loc_4A78D1:
	mov [eax+3], bl
	call sub_4A7800
	xor eax, eax
	ret
;sub_4A78B0 endp

sub_4A7914: ;SUBROUTINE
	push ebx
	push esi
	sub esp, 4
	mov esi, [esp+14h]
	mov ebx, [esp+18h]
	call dword [off_4DDED0]
	mov ecx, [esp+10h]
	shl ecx, 2
	add ecx, ebx
	cmp ebx, ecx
	jnb loc_4A7954

loc_4A7934:
	mov eax, [esi]
	movsx edx, word [esi]
	sar eax, 10h
	add eax, edx
	add esi, 4
	mov [esp], eax
	add ebx, 4
	fild dword [esp]
	fstp dword [ebx-4]
	cmp ebx, ecx
	jb loc_4A7934

loc_4A7954:
	add esp, 4
	pop esi
	pop ebx
	ret
;sub_4A7914 endp

sub_4A795C: ;SUBROUTINE
	push ebx
	push esi
	sub esp, 10h
	mov esi, [esp+20h]
	mov ebx, [esp+24h]
	call dword [off_4DDED0]
	mov ecx, [esp+1Ch]
	shl ecx, 2
	add ecx, esi
	cmp esi, ecx
	jnb loc_4A7A10

loc_4A7980:
	fild word [ebx]
	fadd dword [esi]
	fstp dword [esp+8]
	fild word [ebx+2]
	fadd dword [esi]
	fstp dword [esp+0Ch]
	fld dword [esp+8]
	fld st0
	fld qword [dbl_4D1484]
	fxch st1
	fadd st0, st1
	add esi, 4
	fstp st2
	fxch st1
	fstp dword [esp+8]
	fld dword [esp+0Ch]
	fadd st1, st0
	mov eax, [esp+8]
	fxch st1
	fstp st1
	fstp dword [esp+0Ch]
	mov edx, [esp+0Ch]
	and eax, 0FFFFFh
	and edx, 0FFFFFh
	cmp eax, 7FFFh
	jbe loc_4A7A1D
	cmp eax, 0F8000h
	jnb loc_4A7A1D
	cmp eax, 80000h
	jnb loc_4A7A16
	mov word [ebx], 7FFFh

loc_4A79E7:
	cmp edx, 7FFFh
	jbe loc_4A7A2A
	cmp edx, 0F8000h
	jnb loc_4A7A2A
	cmp edx, 80000h
	jnb loc_4A7A22
	mov word [ebx+2], 7FFFh

loc_4A7A05:
	add ebx, 4
	cmp esi, ecx
	jb loc_4A7980

loc_4A7A10:
	add esp, 10h
	pop esi
	pop ebx
	ret

loc_4A7A16:
	mov word [ebx], 8000h
	jmp loc_4A79E7

loc_4A7A1D:
	mov [ebx], ax
	jmp loc_4A79E7

loc_4A7A22:
	mov word [ebx+2], 8000h
	jmp loc_4A7A05

loc_4A7A2A:
	mov [ebx+2], dx
	add ebx, 4
	cmp esi, ecx
	jb loc_4A7980
	add esp, 10h
	pop esi
	pop ebx
	ret
;sub_4A795C endp

sub_4A7A40: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 64h
	mov [esp+4Ch], eax
	mov [esp+54h], edx
	xor edx, edx
	mov esi, dword_5A179C
	mov [esp+50h], edx
	mov [esp+60h], edx

loc_4A7A5F:
	mov ah, [esi]
	mov edi, esi
	test ah, ah
	jnz loc_4A7B26

loc_4A7A6B:
	mov ebp, [esp+60h]
	inc ebp
	add esi, 0DE4h
	mov [esp+60h], ebp
	cmp ebp, 10h
	jl loc_4A7A5F

loc_4A7A7F:
	cmp dword [esp+50h], 0
	jz loc_4A7C22
	xor esi, esi
	mov dword [dword_5AF5DC], esi

loc_4A7A92:
	mov ebx, [esp+54h]
	mov edi, dword [dword_4DDEE4]
	add ebx, ebx
	test edi, edi
	jz loc_4A7C40
	push dword_4DDEE8
	push dword_4DE2E8
	mov esi, [esp+5Ch]
	push esi
	call sub_4A7914
	add esp, 0Ch
	push ebx
	push dword_4DE2E8
	call dword [off_4DDECC]
	add esp, 8
	push dword_4DDEE8
	push esi
	call sub_4B7AD0
	add esp, 8
	mov ebp, dword [off_4DDED4]
	push ebp
	push dword_4DDEE8
	push esi
	call sub_4A795C
	add esp, 0Ch

loc_4A7AEF:
	mov edx, [esp+4Ch]
	push edx
	mov ecx, dword [off_4DDED4]
	push ecx
	mov ebx, [esp+5Ch]
	push ebx
	call dword [dword_5AF5E4]
	add esp, 0Ch
	lea eax, [ebx+ebx]
	push eax
	mov esi, dword [off_4DDED4]
	push esi
	call dword [off_4DDECC]
	add esp, 8
	add esp, 64h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A7B26:
	mov edx, [esp+54h]
	mov eax, esi
	mov ebp, [esp+54h]
	call sub_4A7600
	mov [esp+5Ch], eax
	sub ebp, eax
	jz loc_4A7A7F
	push ebp
	lea eax, [esi+0D64h]
	push eax
	mov [esp+60h], eax
	call dword [edi+0DB4h]
	mov ecx, dword [off_4DDED8]
	add esp, 8
	add ecx, 10h
	mov [esp+40h], ecx
	lea ebx, [esp+40h]
	mov ecx, [esi+0D60h]
	mov edx, eax
	mov eax, ecx
	call dword [edi+0DA8h]
	test eax, eax
	jl loc_4A7C14
	mov ecx, dword [off_4DDEDC]
	mov eax, [esp+40h]
	mov [esp+40h], ecx
	lea ecx, [esp+40h]
	push ecx
	push eax
	push ebp
	mov edx, [esp+64h]
	push edx
	call dword [edi+0DB8h]
	add esp, 10h
	mov cl, byte [dword_4DDEE0]
	mov eax, [esp+5Ch]
	shl eax, cl
	mov ecx, dword [off_4DDED4]
	shl eax, 2
	add eax, ecx
	push eax
	mov ecx, [esp+44h]
	push ecx
	push ebp
	lea eax, [esi+0D90h]
	push eax
	call dword [edi+0DC0h]
	mov dl, [esi+8]
	add esp, 10h
	test dl, dl
	jz loc_4A7A6B
	mov eax, [esp+5Ch]
	mov cl, byte [dword_4DDEE0]
	shl eax, cl
	shl eax, 2
	add eax, dword_4DE2E8
	push eax
	mov ebx, [esp+44h]
	push ebx
	push ebp
	lea eax, [esi+0DC4h]
	push eax
	call dword [edi+0DE0h]
	mov edi, 1
	add esp, 10h
	mov [esp+50h], edi
	jmp loc_4A7A6B

loc_4A7C14:
	mov eax, [esp+60h]
	call sub_4A7758
	jmp loc_4A7A6B

loc_4A7C22:
	mov ecx, dword [dword_5AF5DC]
	inc ecx
	mov dword [dword_5AF5DC], ecx
	cmp ecx, 1F4h
	jl loc_4A7A92
	jmp loc_4A7AEF

loc_4A7C40:
	push dword_4DDEE8
	push dword_4DE2E8
	mov ebp, [esp+5Ch]
	push ebp
	call sub_4B7CA0
	add esp, 0Ch
	push ebx
	push dword_4DE2E8
	call dword [off_4DDECC]
	add esp, 8
	push dword_4DDEE8
	push ebp
	call sub_4B7AD0
	add esp, 8
	lea eax, [esp+44h]
	push eax
	lea eax, [esp+4Ch]
	push eax
	lea eax, [esp+8]
	push eax
	call sub_4B4FB8
	add esp, 0Ch
	push 7Fh
	push 7Fh
	lea eax, [esp+8]
	push eax
	call dword [esp+50h]
	add esp, 0Ch
	mov edx, dword [off_4DDED4]
	push edx
	push dword_4DDEE8
	push ebp
	lea eax, [esp+0Ch]
	push eax
	call dword [esp+58h]
	add esp, 10h
	jmp loc_4A7AEF
;sub_4A7A40 endp

sub_4A7CBC: ;SUBROUTINE
	push ebx
	push ecx
	mov ecx, edx
	mov ebx, eax
	test edx, edx
	jle loc_4A7CEE

loc_4A7CC6:
	cmp ecx, 100h
	jle loc_4A7CF1
	mov eax, 100h

loc_4A7CD3:
	mov edx, eax
	mov eax, ebx
	call sub_4A7A40
	mov edx, dword [dword_5AF5E8]
	sub ecx, 100h
	add ebx, edx
	test ecx, ecx
	jg loc_4A7CC6

loc_4A7CEE:
	pop ecx
	pop ebx
	ret

loc_4A7CF1:
	mov eax, ecx
	jmp loc_4A7CD3
;sub_4A7CBC endp

sub_4A7D00: ;SUBROUTINE
	push ecx
	push edx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov [esp+4], eax
	fild dword [esp+4]
	fmul dword [esp+20h]
	call __CHP
	fistp dword [esp]

loc_4A7D1C:
	mov ecx, 2
	cmp ecx, [esp]
	jg loc_4A7D37
	mov esi, [esp]

loc_4A7D29:
	mov eax, [esp]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	test edx, edx
	jnz loc_4A7D46

loc_4A7D37:
	mov edi, [esp]
	cmp ecx, edi
	jz loc_4A7D4D
	lea ebp, [edi+1]
	mov [esp], ebp
	jmp loc_4A7D1C

loc_4A7D46:
	inc ecx
	cmp ecx, esi
	jle loc_4A7D29
	jmp loc_4A7D37

loc_4A7D4D:
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	ret 4
;sub_4A7D00 endp

sub_4A7D5C: ;SUBROUTINE
	push ecx
	push edx
	push esi
	sub esp, 0Ch
	mov esi, eax
	mov dword [esp+8], 3DCCCCCDh
	cmp eax, 5622h
	jg loc_4A7E0D
	xor edx, edx

loc_4A7D79:
	add edx, 4
	xor ecx, ecx
	mov dword dword_5AF5FC[edx], ecx
	cmp edx, 5910h
	jnz loc_4A7D79
	push ebx
	mov ecx, dword_5AF600
	xor edx, edx

loc_4A7D94:
	add edx, 4
	push dword [esp+0Ch]
	mov eax, esi
	mov dword dword_5B4F2C[edx], ecx
	call sub_4A7D00
	fld dword flt_4DEAF4[edx]
	fld1
	fsubrp st1, st0
	lea ebx, 0[eax*4]
	fstp dword flt_4DEB04[edx]
	fld dword [esp+0Ch]
	fld st0
	fmul qword [dbl_4D148C]
	mov eax, dword dword_5B4F2C[edx]
	add ecx, ebx
	sub ebx, 4
	mov dword dword_5B4F0C[edx], eax
	add ebx, eax
	mov dword dword_5B4F1C[edx], eax
	mov dword dword_5B4F4C[edx], ebx
	mov dword dword_5AF5EC[edx], ebx
	xor ebx, ebx
	fstp st1
	mov dword dword_5B4F3C[edx], ebx
	fstp dword [esp+0Ch]
	cmp edx, 10h
	jnz loc_4A7D94
	xor eax, eax
	pop ebx
	add esp, 0Ch
	pop esi
	pop edx
	pop ecx
	ret

loc_4A7E0D:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop esi
	pop edx
	pop ecx
	ret
;sub_4A7D5C endp

sub_4A7E20: ;SUBROUTINE
	push ecx
	sub esp, 8
	mov ecx, eax
	mov eax, ebx
	mov [esp+4], ecx
	call sub_4B7CD0
	fild dword [esp+4]
	fmulp st1, st0
	mov [esp+4], edx
	fild dword [esp+4]
	fdivp st1, st0
	fmul dword [flt_4D1494]
	call __CHP
	fistp dword [esp]
	mov eax, [esp]
	add esp, 8
	pop ecx
	ret
;sub_4A7E20 endp

sub_4A7E60: ;SUBROUTINE
	mov [ebx], edx
	mov [ecx], edx
	cmp eax, 40h
	jz locret_4A7E73
	jge loc_4A7E74
	imul eax, edx
	sar eax, 6
	mov [ecx], eax

locret_4A7E73:
	ret

loc_4A7E74:
	mov ecx, 7Fh
	sub ecx, eax
	mov eax, ecx
	imul eax, edx
	sar eax, 6
	mov [ebx], eax
	ret
;sub_4A7E60 endp

sub_4A7E90: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, edx
	xor ecx, ecx

loc_4A7E97:
	dec edx
	cmp edx, 0FFFFFFFFh
	jz loc_4A7EA9
	xor ebx, ebx
	shl ecx, 8
	mov bl, [eax]
	inc eax
	add ecx, ebx
	jmp loc_4A7E97

loc_4A7EA9:
	cmp esi, 1
	jnz loc_4A7EB3
	cmp ecx, 7Fh
	jg loc_4A7ED9

loc_4A7EB3:
	cmp esi, 2
	jnz loc_4A7EC0
	cmp ecx, 7FFFh
	jg loc_4A7EE1

loc_4A7EC0:
	cmp esi, 3
	jnz loc_4A7ED3
	cmp ecx, 7FFFFFh
	jle loc_4A7ED3
	sub ecx, 1000000h

loc_4A7ED3:
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A7ED9:
	sub ecx, 100h
	jmp loc_4A7ED3

loc_4A7EE1:
	sub ecx, 10000h
	mov eax, ecx
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A7E90 endp

sub_4A7EF0: ;SUBROUTINE
	mov dword [eax], 1
	mov dword [eax+90h], 0
	mov dword [eax+6Ch], 0Fh
	ret
;sub_4A7EF0 endp

sub_4A7F08: ;SUBROUTINE
	mov dword [eax+4], 0
	mov dword [eax+8], 7Fh
	mov dword [eax+0Ch], 0
	mov dword [eax+10h], 7Fh
	mov dword [eax+14h], 0FFFFFFFFh
	mov dword [eax+18h], 0
	mov dword [eax+1Ch], 3Ch
	mov dword [eax+20h], 0FFFFFFFFh
	mov dword [eax+24h], 1
	mov dword [eax+28h], 0
	mov dword [eax+2Ch], 1
	mov dword [eax+30h], 40h
	mov dword [eax+34h], 0
	mov dword [eax+38h], 7Fh
	mov dword [eax+3Ch], 0
	mov dword [eax+40h], 0
	mov dword [eax+44h], 0
	mov dword [eax+48h], 0
	mov dword [eax+4Ch], 0
	mov dword [eax+54h], 0
	mov dword [eax+5Ch], 0
	mov dword [eax+64h], dword_4DEB28
	mov dword [eax+70h], 7Fh
	mov dword [eax+74h], 0
	mov dword [eax+78h], 0
	mov dword [eax+7Ch], 0
	mov dword [eax+80h], 0
	mov dword [eax+84h], 0
	mov dword [eax+8Ch], 0
	mov dword [eax+88h], 0
	mov dword [eax+94h], 1
	mov eax, edx
	add edx, 98h

loc_4A7FF8:
	mov dword [eax], 0
	add eax, 4
	cmp eax, edx
	jnz loc_4A7FF8
	ret
;sub_4A7F08 endp

sub_4A8008: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	cmp dword [eax+48h], 0
	jnz loc_4A8065

loc_4A8013:
	mov esi, [eax+54h]
	test esi, esi
	jz loc_4A8023
	mov ecx, [edx+54h]
	lea edi, [esi+ecx]
	mov [eax+54h], edi

loc_4A8023:
	mov ebp, [eax+5Ch]
	test ebp, ebp
	jz loc_4A8033
	mov ecx, [edx+5Ch]
	lea ebx, [ecx+ebp]
	mov [eax+5Ch], ebx

loc_4A8033:
	mov esi, [eax+64h]
	test esi, esi
	jz loc_4A8043
	mov ecx, [edx+64h]
	lea edi, [esi+ecx]
	mov [eax+64h], edi

loc_4A8043:
	mov ebp, [eax+74h]
	test ebp, ebp
	jz loc_4A8053
	mov ecx, [edx+74h]
	lea ebx, [ecx+ebp]
	mov [eax+74h], ebx

loc_4A8053:
	mov esi, [eax+80h]
	test esi, esi
	jnz loc_4A806D
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A8065:
	mov ecx, [edx+48h]
	add [eax+48h], ecx
	jmp loc_4A8013

loc_4A806D:
	mov edx, [edx+80h]
	lea edi, [esi+edx]
	mov [eax+80h], edi
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A8008 endp

sub_4A8084: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov bh, byte [byte_4DEB30]
	xor ecx, ecx

loc_4A808F:
	inc bh
	jz loc_4A80BD

loc_4A8093:
	mov eax, dword_59BFB0
	mov edx, ecx

loc_4A809A:
	cmp cl, [eax+0Ch]
	jz loc_4A80A6
	mov bl, [eax+3Bh]
	cmp bl, bh
	jz loc_4A808F

loc_4A80A6:
	inc edx
	add eax, 60h
	cmp edx, 10h
	jl loc_4A809A
	xor eax, eax
	mov al, bh
	mov byte [byte_4DEB30], bh
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A80BD:
	inc bh
	jmp loc_4A8093
;sub_4A8084 endp

sub_4A80C4: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 1Ch
	mov [esp], eax
	mov [esp+4], edx
	mov edi, ebx
	mov esi, ecx
	mov edx, [esp+2Ch]
	mov eax, [ebx+4]
	sar eax, 18h
	mov [esp+18h], eax
	mov eax, [ebx+5]
	sar eax, 18h
	mov [esp+0Ch], eax
	mov eax, [ebx+6]
	sar eax, 18h
	mov [esp+10h], eax
	mov eax, [ebx+7]
	sar eax, 18h
	mov [esp+8], eax
	mov eax, ecx
	call sub_4A8008
	mov edx, [esp+0Ch]
	cmp edx, 0FFFFFFFFh
	jz loc_4A843E
	test edx, edx
	jl loc_4A844B
	cmp edx, 7Fh
	jg loc_4A844B

loc_4A8126:
	mov eax, [esp+18h]
	cmp eax, 0FFFFFFFFh
	jnz loc_4A8459
	mov dword [esp+18h], 40h

loc_4A813B:
	mov ebp, [esp+8]
	cmp ebp, 0FFFFFFFFh
	jnz loc_4A8474
	mov dword [esp+8], 7Fh

loc_4A8150:
	mov eax, [esi+30h]
	mov ebx, [esi+34h]
	mov [esp+14h], eax
	test ebx, ebx
	jz loc_4A816F
	mov eax, ebx
	mov ebp, [esp+14h]
	call sub_4B3E80
	add ebp, eax
	mov [esp+14h], ebp

loc_4A816F:
	mov eax, [esp+14h]
	cmp eax, 7Fh
	jle loc_4A848F
	mov dword [esp+14h], 7Fh

loc_4A8184:
	mov ebp, [esi+94h]
	cmp ebp, 1
	jz loc_4A81A0
	mov eax, [esp+18h]
	sub eax, 40h
	imul eax, ebp
	add eax, 40h
	mov [esp+18h], eax

loc_4A81A0:
	mov eax, [esp+14h]
	add eax, [esp+18h]
	sub eax, 40h
	mov [esp+18h], eax
	test eax, eax
	jl loc_4A84A2
	cmp eax, 7Fh
	jle loc_4A81C4
	mov dword [esp+18h], 7Fh

loc_4A81C4:
	mov ecx, [esp+10h]
	cmp ecx, 0FFFFFFFFh
	jnz loc_4A84AD
	mov dword [esp+10h], 40h

loc_4A81D9:
	mov ecx, dword_5B4F60
	mov ebx, [esi+18h]
	mov edx, [esi+2Ch]
	mov eax, [esi+14h]
	call sub_4A53BC
	mov ebp, eax
	test eax, eax
	jl loc_4A8435
	lea ecx, 0[eax*4]
	sub ecx, eax
	shl ecx, 5
	add ecx, dword_59BFB0
	mov al, [esi+94h]
	mov [ecx+37h], al
	mov ax, [esi+40h]
	mov [ecx+10h], ax
	mov edx, [esp+30h]
	mov ax, [esi+1Ch]
	sub eax, edx
	imul eax, 64h
	mov bx, [ecx+10h]
	sub ebx, eax
	mov [ecx+10h], bx
	cmp dword [esi+90h], 0
	jz loc_4A8245
	mov eax, [esp+38h]
	mov edx, ebx
	add edx, eax
	mov [ecx+10h], dx

loc_4A8245:
	mov ebx, [esi+44h]
	test ebx, ebx
	jz loc_4A8257
	mov eax, ebx
	call sub_4B3E80
	add [ecx+10h], ax

loc_4A8257:
	mov eax, [esi+48h]
	mov [ecx+4Ch], eax
	mov eax, [esi+54h]
	mov [ecx+50h], eax
	mov eax, [esi+5Ch]
	mov [ecx+54h], eax
	mov eax, [ecx+50h]
	test eax, eax
	jz loc_4A827B
	add eax, [esp+18h]
	movsx eax, byte [eax]
	mov [esp+18h], eax

loc_4A827B:
	mov al, [esi]
	mov [ecx+0Dh], al
	mov eax, [esp+0Ch]
	mov dword [ecx+18h], 0
	shl eax, 10h
	mov [ecx+20h], eax
	mov ebx, [esi+3Ch]
	mov edx, [esi+38h]
	test ebx, ebx
	jz loc_4A82A4
	mov eax, ebx
	call sub_4B3E80
	add edx, eax

loc_4A82A4:
	cmp edx, 7Fh
	jle loc_4A84C8
	mov edx, 7Fh

loc_4A82B2:
	imul edx, [esp+34h]
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov [ecx+30h], al
	mov al, [esp+14h]
	mov [ecx+32h], al
	mov al, [esp+18h]
	mov [ecx+0Fh], al
	mov ax, [esi+28h]
	imul eax, 64h
	mov [ecx+42h], ax
	mov al, [esp+10h]
	mov [ecx+33h], al
	mov eax, [esi+64h]
	mov [ecx+48h], eax
	mov eax, [esi+70h]
	shl eax, 10h
	mov byte [ecx+35h], 0
	mov [ecx+28h], eax
	mov al, [esi+24h]
	mov [ecx+34h], al
	mov al, [esi+20h]
	mov [ecx+36h], al
	mov eax, [ecx+48h]
	mov eax, [eax]
	mov [ecx+2Ch], eax
	test eax, eax
	jl loc_4A84DB

loc_4A8315:
	mov eax, [ecx+48h]
	mov edx, [eax+4]
	mov ebx, [ecx+28h]
	shl edx, 10h
	sub edx, ebx
	mov eax, edx
	mov ebx, [ecx+2Ch]
	sar edx, 1Fh
	idiv ebx
	mov [ecx+24h], eax
	mov eax, [esi+74h]
	mov [ecx+58h], eax
	mov eax, [esi+80h]
	mov [ecx+5Ch], eax
	mov al, [esi+78h]
	mov [ecx+3Ch], al
	mov al, [esi+84h]
	mov [ecx+3Dh], al
	mov ax, [esi+88h]
	mov [ecx+40h], ax
	cmp dword [esi+7Ch], 0
	jz loc_4A84E7
	call sub_488074
	mov ebx, [esi+78h]
	xor edx, edx
	div ebx
	mov [ecx+3Eh], dl

loc_4A8372:
	cmp dword [esi+8Ch], 0
	jz loc_4A84F0
	call sub_488074
	mov ebx, [esi+84h]
	xor edx, edx
	div ebx
	mov [ecx+3Fh], dl

loc_4A8391:
	mov eax, ebp
	call sub_4B0D30
	mov al, [esi+6Ch]
	mov [ecx+0Bh], al
	mov al, [esi+4Ch]
	mov [ecx+38h], al
	mov al, [esp+8]
	mov [ecx+39h], al
	mov al, [edi+4]
	mov [ecx+0Ah], al
	mov ax, [edi]
	mov [ecx+8], ax
	mov eax, ebp
	call sub_4A8BF0
	cmp byte [edi+0Bh], 0
	jz loc_4A84F9
	xor eax, eax

loc_4A83CB:
	push eax
	mov eax, [edi+0Ch]
	sar eax, 10h
	push eax
	xor eax, eax
	mov ax, [edi+0Ch]
	push eax
	mov eax, [ecx+35h]
	mov edi, dword [dword_59BFA4]
	sar eax, 18h
	imul eax, edi
	mov edx, [ecx+36h]
	sar edx, 18h
	imul edx, eax
	mov ebx, 3F01h
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	push eax
	mov eax, [ecx+10h]
	sar eax, 10h
	push eax
	mov eax, [ecx+2Eh]
	sar eax, 18h
	mov edx, [esp+14h]
	push eax
	mov eax, [esp+30h]
	mov ebx, [esi]
	push eax
	xor eax, eax
	mov ecx, ebp
	mov al, [edx+2]
	mov edx, [esp+20h]
	call sub_488F38
	test eax, eax
	jl loc_4A8503
	mov eax, dword [dword_5B4F60]

loc_4A8435:
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A843E:
	mov dword [esp+0Ch], 7Fh
	jmp loc_4A8126

loc_4A844B:
	mov eax, 0FFFFFFF8h
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A8459:
	test eax, eax
	jl loc_4A8466
	cmp eax, 7Fh
	jle loc_4A813B

loc_4A8466:
	mov eax, 0FFFFFFF8h
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A8474:
	test ebp, ebp
	jl loc_4A8481
	cmp ebp, 7Fh
	jle loc_4A8150

loc_4A8481:
	mov eax, 0FFFFFFF8h
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A848F:
	test eax, eax
	jge loc_4A8184
	xor ecx, ecx
	mov [esp+14h], ecx
	jmp loc_4A8184

loc_4A84A2:
	xor edx, edx
	mov [esp+18h], edx
	jmp loc_4A81C4

loc_4A84AD:
	test ecx, ecx
	jl loc_4A84BA
	cmp ecx, 7Fh
	jle loc_4A81D9

loc_4A84BA:
	mov eax, 0FFFFFFF8h
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h

loc_4A84C8:
	cmp edx, 0FFFFFF80h
	jge loc_4A82B2
	mov edx, 0FFFFFF80h
	jmp loc_4A82B2

loc_4A84DB:
	mov dword [ecx+2Ch], 7FFFFFFFh
	jmp loc_4A8315

loc_4A84E7:
	mov byte [ecx+3Eh], 0
	jmp loc_4A8372

loc_4A84F0:
	mov byte [ecx+3Fh], 0
	jmp loc_4A8391

loc_4A84F9:
	mov eax, 1
	jmp loc_4A83CB

loc_4A8503:
	mov eax, ebp
	mov edx, 0FFFFFFFFh
	call sub_4A5678
	mov dword [dword_5B4F60], edx
	mov eax, dword [dword_5B4F60]
	add esp, 1Ch
	pop ebp
	pop edi
	pop esi
	ret 10h
;sub_4A80C4 endp

sub_4A8524: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 198h
	mov [esp+180h], eax
	mov [esp+17Ch], edx
	xor edx, edx
	mov ecx, 0FFFFFFF7h
	mov [esp+188h], edx
	mov [esp+170h], ecx
	mov [esp+18Ch], edx
	mov [esp+190h], edx
	mov [esp+174h], edx
	test eax, eax
	jz loc_4A8657
	cmp word [eax], 5450h
	jnz loc_4A8634
	mov ebp, [esp+17Ch]
	mov edi, [esp+17Ch]
	mov ebp, [ebp+3]
	mov edi, [edi+2]
	sar ebp, 18h
	sar edi, 18h
	cmp ebp, 0FFFFFFFFh
	jnz loc_4A863B
	mov ebp, 7Fh

loc_4A85A2:
	cmp edi, 0FFFFFFFFh
	jnz loc_4A864A
	mov edi, 3Ch

loc_4A85B0:
	mov eax, [esp+180h]
	test byte [eax+3], 2
	jz loc_4A8668
	lea esi, [eax+8]

loc_4A85C4:
	lea eax, [esp+98h]
	mov edx, esp
	call sub_4A7EF0
	lea eax, [esp+98h]
	call sub_4A7F08
	call sub_4A5360
	call sub_4A8084
	mov [esp+178h], eax
	mov eax, [esp+18Ch]
	shl eax, 2
	mov [esp+194h], eax

loc_4A8600:
	mov eax, [esp+18Ch]
	inc eax
	mov dh, [esi]
	mov [esp+184h], eax
	cmp dh, 0FFh
	jz loc_4A87A3
	xor ebx, ebx
	mov bl, dh
	lea eax, [esi+1]
	cmp ebx, 0FDh
	jnz loc_4A8670
	mov esi, eax
	mov [esp+188h], eax
	jmp loc_4A8600

loc_4A8634:
	mov eax, 0FFFFFFF9h
	jmp loc_4A865C

loc_4A863B:
	test ebp, ebp
	jl loc_4A8657
	cmp ebp, 7Fh
	jle loc_4A85A2
	jmp loc_4A8657

loc_4A864A:
	test edi, edi
	jl loc_4A8657
	cmp edi, 7Fh
	jle loc_4A85B0

loc_4A8657:
	mov eax, 0FFFFFFF8h

loc_4A865C:
	add esp, 198h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A8668:
	lea esi, [eax+4]
	jmp loc_4A85C4

loc_4A8670:
	cmp ebx, 0FEh
	jnz loc_4A872D
	cmp ebp, [esp+9Ch]
	jge loc_4A8699

loc_4A8685:
	mov edx, esp
	lea eax, [esp+98h]
	call sub_4A7F08
	inc esi
	jmp loc_4A8600

loc_4A8699:
	cmp ebp, [esp+0A0h]
	jg loc_4A8685
	cmp edi, [esp+0A4h]
	jl loc_4A8685
	cmp edi, [esp+0A8h]
	jg loc_4A8685
	mov edx, [esp+174h]
	push edx
	push ebp
	lea eax, [esp+8]
	push edi
	lea ecx, [esp+0A4h]
	mov ebx, [esp+188h]
	push eax
	mov edx, [esp+198h]
	mov eax, [esp+190h]
	call sub_4A80C4
	mov [esp+170h], eax
	test eax, eax
	jl loc_4A882D
	mov edx, [esp+194h]
	lea ecx, [edx+4]
	mov [esp+edx+130h], eax
	mov eax, [esp+184h]
	mov [esp+194h], ecx
	mov [esp+18Ch], eax
	mov edx, esp
	lea eax, [esp+98h]
	call sub_4A7F08
	inc esi
	jmp loc_4A8600

loc_4A872D:
	mov esi, eax
	cmp ebx, 0FCh
	jz loc_4A8600
	xor ecx, ecx
	mov cl, [eax]
	cmp ecx, 0FFh
	jnz loc_4A875B
	lea esi, [eax+1]
	mov edx, 4
	mov eax, esi
	call sub_4A7E90
	mov ecx, eax
	add esi, 3

loc_4A875B:
	inc esi
	cmp ebx, 26h
	jl loc_4A8768

loc_4A8761:
	add esi, ecx
	jmp loc_4A8600

loc_4A8768:
	test ecx, ecx
	jl loc_4A8761
	cmp ecx, 4
	jg loc_4A8761
	mov edx, ecx
	mov eax, esi
	call sub_4A7E90
	mov [esp+ebx*4+98h], eax
	mov [esp+ebx*4], esi
	cmp ebx, 24h
	jnz loc_4A8761
	mov eax, [esp+128h]
	call sub_4B3E80
	mov [esp+174h], eax
	add esi, ecx
	jmp loc_4A8600

loc_4A87A3:
	cmp ebp, [esp+9Ch]
	jl loc_4A8822
	cmp ebp, [esp+0A0h]
	jg loc_4A8822
	cmp edi, [esp+0A4h]
	jl loc_4A8822
	cmp edi, [esp+0A8h]
	jg loc_4A8822
	mov esi, [esp+174h]
	push esi
	push ebp
	lea eax, [esp+8]
	push edi
	lea ecx, [esp+0A4h]
	mov ebx, [esp+188h]
	push eax
	mov edx, [esp+198h]
	mov eax, [esp+190h]
	call sub_4A80C4
	mov [esp+170h], eax
	test eax, eax
	jl loc_4A882D
	mov edx, [esp+194h]
	mov [esp+edx+130h], eax
	mov eax, [esp+184h]
	mov [esp+18Ch], eax

loc_4A8822:
	mov edi, [esp+18Ch]
	test edi, edi
	jnz loc_4A886F

loc_4A882D:
	mov ebx, [esp+18Ch]
	call sub_4A5374
	test ebx, ebx
	jle loc_4A885C
	lea edx, 0[ebx*4]
	xor ecx, ecx

loc_4A8846:
	mov eax, [esp+ecx+130h]
	add ecx, 4
	call sub_489840
	cmp ecx, edx
	jl loc_4A8846

loc_4A885C:
	mov eax, [esp+170h]
	add esp, 198h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A886F:
	cmp edi, 1
	jnz loc_4A88B3
	mov eax, [esp+130h]
	call sub_4A576C
	test eax, eax
	jl loc_4A889B
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 5
	add eax, dword_59BFB0
	mov byte [eax+3Bh], 0
	mov byte [eax+3Ah], 0

loc_4A889B:
	call sub_4A5374
	mov eax, [esp+170h]
	add esp, 198h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4A88B3:
	test edi, edi
	jle loc_4A88F6
	lea edx, 0[edi*4]
	xor ecx, ecx

loc_4A88C0:
	mov eax, [esp+ecx+130h]
	call sub_4A576C
	test eax, eax
	jl loc_4A88EF
	imul eax, 60h
	mov ebx, dword_59BFB0
	add ebx, eax
	mov al, [esp+178h]
	mov byte [ebx+3Ah], 0
	mov [esp+190h], ebx
	mov [ebx+3Bh], al

loc_4A88EF:
	add ecx, 4
	cmp ecx, edx
	jl loc_4A88C0

loc_4A88F6:
	mov eax, [esp+190h]
	mov byte [eax+3Ah], 1
	jmp loc_4A889B
;sub_4A8524 endp

sub_4A89B0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, edx
	test byte [eax+3], 2
	jz loc_4A89F5
	lea ecx, [edi+8]

loc_4A89C1:
	mov dl, [ecx]
	cmp dl, 0FFh
	jz loc_4A8A18
	xor ebx, ebx
	mov bl, dl
	cmp ebx, 0FDh
	jz loc_4A89FA

loc_4A89D4:
	inc ecx
	cmp ebx, 0FEh
	jz loc_4A89C1
	cmp ebx, 0FCh
	jz loc_4A89C1
	xor eax, eax
	mov al, [ecx]
	cmp eax, 0FFh
	jz loc_4A8A06

loc_4A89F0:
	inc ecx
	add ecx, eax
	jmp loc_4A89C1

loc_4A89F5:
	lea ecx, [edi+4]
	jmp loc_4A89C1

loc_4A89FA:
	inc ecx
	mov edx, esi
	mov eax, ecx
	call sub_488B30
	jmp loc_4A89D4

loc_4A8A06:
	inc ecx
	mov edx, 4
	mov eax, ecx
	call sub_4A7E90
	add ecx, 3
	jmp loc_4A89F0

loc_4A8A18:
	mov dh, [edi+3]
	and dh, 0FEh
	xor eax, eax
	mov [edi+3], dh
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4A89B0 endp

sub_4A8A30: ;SUBROUTINE
	push esi
	push edi
	mov esi, ebx
	mov edi, ecx
	call sub_4B7D50
	mov edx, [esi]
	test edx, edx
	jl loc_4A8A4A
	mov ebx, [edi]
	test ebx, ebx
	jl loc_4A8A58
	pop edi
	pop esi
	ret

loc_4A8A4A:
	imul eax, edx, -1
	mov [esi], eax
	mov ebx, [edi]
	test ebx, ebx
	jl loc_4A8A58
	pop edi
	pop esi
	ret

loc_4A8A58:
	imul eax, ebx, -1
	mov [edi], eax
	pop edi
	pop esi
	ret
;sub_4A8A30 endp

sub_4A8A60: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, [esp+18h]
	mov [esp], eax
	mov edi, ebx
	mov esi, ecx
	call sub_4B7D50
	mov edx, [esp+14h]
	test edx, edx
	jl loc_4A8B15

loc_4A8A82:
	mov ecx, [esp+14h]
	test ecx, ecx
	jl loc_4A8B2F
	test ebp, ebp
	jl loc_4A8B2F
	cmp ebp, ecx
	jle loc_4A8B25

loc_4A8A9E:
	mov eax, 2

loc_4A8AA3:
	mov ecx, [esp]
	xor edx, edx
	cmp ecx, 4000h
	jl loc_4A8B79
	cmp ecx, 0C000h
	jge loc_4A8B79
	mov ecx, [edi]
	cmp ecx, [esi]
	jge loc_4A8B6F
	mov ecx, 3

loc_4A8ACF:
	cmp eax, 2
	jg loc_4A8AE7
	mov edx, 2
	cmp ecx, 3
	jnz loc_4A8AE7
	cmp eax, edx

loc_4A8AE0:
	jnz loc_4A8AE7
	mov edx, 1

loc_4A8AE7:
	cmp dword [esp+14h], 0
	jl loc_4A8BA9

loc_4A8AF2:
	test ebp, ebp
	jl loc_4A8BB5

loc_4A8AFA:
	cmp edx, 1
	jz loc_4A8BC1
	cmp edx, 2
	jz loc_4A8BD1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4A8B15:
	test ebp, ebp
	jge loc_4A8A82
	cmp ebp, edx
	jle loc_4A8A9E

loc_4A8B25:
	mov eax, 1
	jmp loc_4A8AA3

loc_4A8B2F:
	mov ebx, [esp+14h]
	test ebx, ebx
	jle loc_4A8B4D
	mov eax, ebx

loc_4A8B39:
	test ebp, ebp
	jle loc_4A8B53
	mov edx, ebp
	cmp eax, edx
	jle loc_4A8B65
	mov eax, 4
	jmp loc_4A8AA3

loc_4A8B4D:
	mov eax, ebx
	neg eax
	jmp loc_4A8B39

loc_4A8B53:
	mov edx, ebp
	neg edx
	cmp eax, edx
	jle loc_4A8B65
	mov eax, 4
	jmp loc_4A8AA3

loc_4A8B65:
	mov eax, 3
	jmp loc_4A8AA3

loc_4A8B6F:
	mov ecx, 4
	jmp loc_4A8ACF

loc_4A8B79:
	mov ecx, [edi]
	cmp ecx, [esi]
	jge loc_4A8BA2
	mov ecx, 2

loc_4A8B84:
	cmp eax, 3
	jl loc_4A8AE7
	mov edx, 2
	cmp ecx, edx
	jnz loc_4A8AE7
	cmp eax, 3
	jmp loc_4A8AE0

loc_4A8BA2:
	mov ecx, 1
	jmp loc_4A8B84

loc_4A8BA9:
	mov ecx, [edi]
	imul eax, ecx, -1
	mov [edi], eax
	jmp loc_4A8AF2

loc_4A8BB5:
	mov ebx, [esi]
	imul eax, ebx, -1
	mov [esi], eax
	jmp loc_4A8AFA

loc_4A8BC1:
	mov ebp, [edi]
	imul eax, ebp, -1
	mov [edi], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4A8BD1:
	mov edi, [esi]
	imul eax, edi, -1
	mov [esi], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_4A8A60 endp

sub_4A8BF0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	lea ecx, 0[eax*4]
	sub ecx, eax
	shl ecx, 5
	add ecx, dword_59BFB0
	mov eax, [ecx+20h]
	mov edx, [ecx+2Dh]
	sar eax, 10h
	sar edx, 18h
	imul eax, edx
	mov edx, [ecx+28h]
	sar edx, 10h
	imul eax, edx
	mov edx, dword [dword_59C608+2]
	sar edx, 18h
	imul edx, eax
	mov ebx, 1F417Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [ecx+58h]
	mov [ecx+31h], al
	test edx, edx
	jnz loc_4A8C4A
	mov ebx, [ecx+4Ch]
	test ebx, ebx
	jnz loc_4A8C79
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A8C4A:
	xor edx, edx
	mov eax, [ecx+58h]
	mov dl, [ecx+3Eh]
	movsx edx, byte [edx+eax]
	mov eax, [ecx+2Eh]
	sar eax, 18h
	imul edx, eax
	mov ebx, 7Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov [ecx+31h], al
	mov ebx, [ecx+4Ch]
	test ebx, ebx
	jnz loc_4A8C79
	pop edx
	pop ecx
	pop ebx
	ret

loc_4A8C79:
	mov eax, [ecx+2Eh]
	mov edx, ebx
	sar eax, 18h
	mov al, [edx+eax]
	mov [ecx+31h], al
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4A8BF0 endp

sub_4A8C8C: ;SUBROUTINE
	mov dword [dword_4DEB3C], eax
	mov dword [dword_4DEB38], edx
	ret
;sub_4A8C8C endp

sub_4A8F65: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov esi, [esp+18h]
	mov edi, [esp+14h]
	mov ecx, [esp+1Ch]
	mov edx, dword [dword_4DEB38]
	add esi, dword [dword_4DEB3C]
	add edi, dword [dword_4DB260]
	mov ebx, [edx+0Ch]
	cmp byte [byte_4DB25C], 8
	jg loc_4A90BD
	sub ecx, 10h
	jl loc_4A9039
	test edi, 3
	jnz loc_4A908E

loc_4A8FAC:
	mov ebp, [edx+8]
	mov ah, [ebx+esi]
	mov ebx, [edx+4]
	mov al, [ebp+esi+0]
	shl eax, 10h
	mov ebp, [edx]
	mov ah, [ebx+esi]
	mov ebx, [edx+1Ch]
	mov al, [ebp+esi+0]
	mov ebp, [edx+18h]
	mov [edi], eax
	mov ah, [ebx+esi]
	mov ebx, [edx+14h]
	mov al, [ebp+esi+0]
	shl eax, 10h
	mov ebp, [edx+10h]
	mov ah, [ebx+esi]
	mov ebx, [edx+2Ch]
	mov al, [ebp+esi+0]
	mov ebp, [edx+28h]
	mov [edi+4], eax
	mov ah, [ebx+esi]
	mov ebx, [edx+24h]
	mov al, [ebp+esi+0]
	shl eax, 10h
	mov ebp, [edx+20h]
	mov ah, [ebx+esi]
	mov ebx, [edx+3Ch]
	mov al, [ebp+esi+0]
	mov ebp, [edx+38h]
	mov [edi+8], eax
	mov ah, [ebx+esi]
	mov ebx, [edx+34h]
	mov al, [ebp+esi+0]
	shl eax, 10h
	mov ebp, [edx+30h]
	mov ah, [ebx+esi]
	mov ebx, [edx+4Ch]
	mov al, [ebp+esi+0]
	lea edx, [edx+40h]
	mov [edi+0Ch], eax
	sub ecx, 10h
	lea edi, [edi+10h]
	jns loc_4A8FAC

loc_4A9039:
	add ecx, 0Ch
	js loc_4A906F
	test edi, 3
	jnz loc_4A906F

loc_4A9046:
	mov ebp, [edx+8]
	mov ah, [ebx+esi]
	mov ebx, [edx+4]
	mov al, [ebp+esi+0]
	shl eax, 10h
	mov ebp, [edx]
	mov ah, [ebx+esi]
	mov ebx, [edx+1Ch]
	mov al, [ebp+esi+0]
	lea edx, [edx+10h]
	mov [edi], eax
	sub ecx, 4
	lea edi, [edi+4]
	jns loc_4A9046

loc_4A906F:
	add ecx, 3
	js loc_4A9089
	mov ebx, [edx]

loc_4A9076:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	sub ecx, 1
	lea edx, [edx+4]
	lea edi, [edi+1]
	jns loc_4A9076

loc_4A9089:
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4A908E:
	add ecx, 10h
	mov ebx, [edx]

loc_4A9093:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	lea edi, [edi+1]
	lea edx, [edx+4]
	lea ecx, [ecx-1]
	test edi, 3
	jnz loc_4A9093
	mov ebx, [edx+0Ch]
	sub ecx, 10h
	jns loc_4A8FAC
	jmp loc_4A9039

loc_4A90BD:
	mov ebx, [edx]
	cmp byte [byte_4DB25C], 10h
	jg loc_4A90E4
	sub ecx, 1
	js loc_4A9089

loc_4A90CD:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	mov [edi], ax
	sub ecx, 1
	lea edx, [edx+4]
	lea edi, [edi+2]
	jns loc_4A90CD
	jmp loc_4A9089

loc_4A90E4:
	sub ecx, 1
	js loc_4A9089

loc_4A90E9:
	mov eax, [esi+ebx*4]
	mov ebx, [edx+4]
	mov [edi], eax
	sub ecx, 1
	lea edx, [edx+4]
	lea edi, [edi+4]
	jns loc_4A90E9
	jmp loc_4A9089
;sub_4A8F65 endp

sub_4A90FE: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov esi, [esp+18h]
	mov edi, [esp+14h]
	mov ebp, [esp+1Ch]
	mov edx, dword [dword_4DEB38]
	add esi, dword [dword_4DEB3C]
	add edi, dword [dword_4DB260]
	mov ebx, [edx]
	sub ebp, 1
	js loc_4A9147
	xor eax, eax
	xor ecx, ecx

loc_4A912B:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov cx, word word_56EF3C[eax*2]
	sub ebp, 1
	mov [edi], cx
	lea edx, [edx+4]
	lea edi, [edi+2]
	jns loc_4A912B

loc_4A9147:
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4A90FE endp

sub_4A9240: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov esi, [esp+18h]
	mov edi, [esp+14h]
	mov edx, dword [dword_4DEB38]
	add esi, dword [dword_4DEB3C]
	add edi, dword [dword_4DB260]
	mov ebx, [edx]
	xor eax, eax
	cmp byte [byte_4DB25C], 8
	jg loc_4A93A1
	test edi, 7
	jz loc_4A9298

loc_4A9277:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+1]
	js loc_4A939C
	test edi, 7
	jnz loc_4A9277

loc_4A9298:
	sub dword [esp+1Ch], 8
	jl loc_4A9330

loc_4A92A3:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	movd mm1, eax
	mov al, [ebx+esi]
	mov ebx, [edx+8]
	movd mm0, eax
	psllq mm0, 8
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+0Ch]
	movd mm0, eax
	psllq mm0, 10h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+10h]
	movd mm0, eax
	psllq mm0, 18h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+14h]
	movd mm0, eax
	psllq mm0, 20h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+18h]
	movd mm0, eax
	psllq mm0, 28h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+1Ch]
	movd mm0, eax
	psllq mm0, 30h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+20h]
	movd mm0, eax
	psllq mm0, 38h
	por mm1, mm0
	movq qword [edi], mm1
	sub dword [esp+1Ch], 8
	lea edx, [edx+20h]
	lea edi, [edi+8]
	jns loc_4A92A3

loc_4A9330:
	add dword [esp+1Ch], 4
	js loc_4A9380

loc_4A9337:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	movd mm1, eax
	mov al, [ebx+esi]
	mov ebx, [edx+8]
	movd mm0, eax
	psllq mm0, 8
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+0Ch]
	movd mm0, eax
	psllq mm0, 10h
	por mm1, mm0
	mov al, [ebx+esi]
	mov ebx, [edx+10h]
	movd mm0, eax
	psllq mm0, 18h
	por mm1, mm0
	movd dword [edi], mm1
	sub dword [esp+1Ch], 4
	lea edx, [edx+10h]
	lea edi, [edi+4]
	jns loc_4A9337

loc_4A9380:
	add dword [esp+1Ch], 3
	js loc_4A939C

loc_4A9387:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+1]
	jns loc_4A9387

loc_4A939C:
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4A93A1:
	cmp byte [byte_4DB25C], 10h
	jg loc_4A94F5
	test edi, 7
	jz loc_4A93D5

loc_4A93B6:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	mov [edi], ax
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+2]
	js loc_4A939C
	test edi, 7
	jnz loc_4A93B6

loc_4A93D5:
	sub dword [esp+1Ch], 8
	jl loc_4A9472

loc_4A93E0:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	movd mm1, eax
	mov ax, [esi+ebx*2]
	mov ebx, [edx+8]
	movd mm0, eax
	psllq mm0, 10h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+0Ch]
	movd mm0, eax
	psllq mm0, 20h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+10h]
	movd mm0, eax
	psllq mm0, 30h
	por mm1, mm0
	movq qword [edi], mm1
	mov ax, [esi+ebx*2]
	mov ebx, [edx+14h]
	movd mm1, eax
	mov ax, [esi+ebx*2]
	mov ebx, [edx+18h]
	movd mm0, eax
	psllq mm0, 10h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+1Ch]
	movd mm0, eax
	psllq mm0, 20h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+20h]
	movd mm0, eax
	psllq mm0, 30h
	por mm1, mm0
	movq qword [edi+8], mm1
	sub dword [esp+1Ch], 8
	lea edx, [edx+20h]
	lea edi, [edi+10h]
	jns loc_4A93E0

loc_4A9472:
	add dword [esp+1Ch], 4
	js loc_4A94CE
	test edi, 3
	jnz loc_4A94CE

loc_4A9481:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	movd mm1, eax
	mov ax, [esi+ebx*2]
	mov ebx, [edx+8]
	movd mm0, eax
	psllq mm0, 10h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+0Ch]
	movd mm0, eax
	psllq mm0, 20h
	por mm1, mm0
	mov ax, [esi+ebx*2]
	mov ebx, [edx+10h]
	movd mm0, eax
	psllq mm0, 30h
	por mm1, mm0
	movq qword [edi], mm1
	sub dword [esp+1Ch], 4
	lea edx, [edx+10h]
	lea edi, [edi+8]
	jns loc_4A9481

loc_4A94CE:
	add dword [esp+1Ch], 3
	js loc_4A939C

loc_4A94D9:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	mov [edi], ax
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+2]
	jns loc_4A94D9
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4A94F5:
	sub dword [esp+1Ch], 1
	js loc_4A939C

loc_4A9500:
	mov eax, [esi+ebx*4]
	mov ebx, [edx+4]
	mov [edi], eax
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+4]
	jns loc_4A9500
	jmp loc_4A939C
;sub_4A9240 endp

sub_4A951A: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov esi, [esp+18h]
	mov edi, [esp+14h]
	mov edx, dword [dword_4DEB38]
	add esi, dword [dword_4DEB3C]
	add edi, dword [dword_4DB260]
	mov ebx, [edx]
	xor eax, eax
	cmp byte [byte_4DB25C], 8
	jg loc_4A9646
	test edi, 3
	jz loc_4A9572

loc_4A9551:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+1]
	js loc_4A9641
	test edi, 3
	jnz loc_4A9551

loc_4A9572:
	mov ebx, [edx+0Ch]
	sub dword [esp+1Ch], 8
	jl loc_4A95E3

loc_4A957C:
	mov ebp, [edx+8]
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	mov ebp, [edx]
	or ecx, eax
	shl ecx, 8
	mov al, [ebx+esi]
	mov ebx, [edx+1Ch]
	or ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	or ecx, eax
	mov ebp, [edx+18h]
	mov al, [ebx+esi]
	mov ebx, [edx+14h]
	mov [edi], ecx
	mov ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	mov ebp, [edx+10h]
	or ecx, eax
	shl ecx, 8
	mov al, [ebx+esi]
	mov ebx, [edx+2Ch]
	or ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	or ecx, eax
	sub dword [esp+1Ch], 8
	lea edx, [edx+20h]
	mov [edi+4], ecx
	lea edi, [edi+8]
	jns loc_4A957C

loc_4A95E3:
	add dword [esp+1Ch], 4
	js loc_4A9623

loc_4A95EA:
	mov ebp, [edx+8]
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	mov ebp, [edx]
	or ecx, eax
	shl ecx, 8
	mov al, [ebx+esi]
	mov ebx, [edx+1Ch]
	or ecx, eax
	shl ecx, 8
	mov al, [ebp+esi+0]
	or ecx, eax
	mov [edi], ecx
	sub dword [esp+1Ch], 4
	lea edx, [edx+10h]
	lea edi, [edi+4]
	jns loc_4A95EA

loc_4A9623:
	add dword [esp+1Ch], 3
	js loc_4A9641
	mov ebx, [edx]

loc_4A962C:
	mov al, [ebx+esi]
	mov ebx, [edx+4]
	mov [edi], al
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+1]
	jns loc_4A962C

loc_4A9641:
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4A9646:
	xor eax, eax
	mov ebx, [edx]
	cmp byte [byte_4DB25C], 10h
	jg loc_4A9673
	sub dword [esp+1Ch], 1
	js loc_4A9641

loc_4A965A:
	mov ax, [esi+ebx*2]
	mov ebx, [edx+4]
	mov [edi], ax
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+2]
	jns loc_4A965A
	jmp loc_4A9641

loc_4A9673:
	sub dword [esp+1Ch], 1
	js loc_4A9641

loc_4A967A:
	mov eax, [esi+ebx*4]
	mov ebx, [edx+4]
	mov [edi], eax
	sub dword [esp+1Ch], 1
	lea edx, [edx+4]
	lea edi, [edi+4]
	jns loc_4A967A
	jmp loc_4A9641
;sub_4A951A endp

sub_4A96A0: ;SUBROUTINE
	push ecx
	push edx
	mov edx, eax
	mov eax, [eax]
	and eax, 0FFh
	cmp eax, 7Bh
	jnz loc_4A96B9
	mov eax, [edx+2]
	sar eax, 10h
	pop edx
	pop ecx
	ret

loc_4A96B9:
	mov eax, edx
	mov eax, [eax]
	and eax, 7Fh
	mov al, byte byte_4DD7B0[eax]
	mov ecx, eax
	cmp eax, 0Fh
	jnz loc_4A96D2
	mov ecx, 10h

loc_4A96D2:
	push ebx
	mov ebx, [edx+2]
	sar ebx, 10h
	imul ecx, ebx
	mov eax, [edx]
	and eax, 0F0h
	cmp eax, 40h
	jnz loc_4A96F4
	lea eax, [ecx+0Fh]
	and al, 0F0h
	sar eax, 3
	pop ebx
	pop edx
	pop ecx
	ret

loc_4A96F4:
	lea eax, [ecx+7]
	and al, 0F8h
	sar eax, 3
	pop ebx
	pop edx
	pop ecx
	ret
;sub_4A96A0 endp

sub_4A9700: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, [esp+24h]
	mov esi, eax
	mov ebp, ecx
	mov eax, [esp+20h]
	inc edi
	sar edi, 1
	test edi, edi
	jle loc_4A9774
	lea ecx, [eax-1]
	test eax, ecx
	jz loc_4A977D

loc_4A9720:
	mov ecx, ebx
	sar ecx, 10h
	imul ecx, eax
	mov [esp+4], ecx
	mov ecx, edx
	sar ecx, 10h
	mov [esp], ecx
	mov ecx, [esp+4]
	add ecx, [esp]
	mov [esi], ecx
	mov ecx, [esp+1Ch]
	add ebx, ecx
	mov ecx, ebx
	sar ecx, 10h
	imul ecx, eax
	add edx, ebp
	mov [esp], ecx
	mov ecx, edx
	sar ecx, 10h
	mov [esp+4], ecx
	mov ecx, [esp]
	add esi, 8
	add ecx, [esp+4]
	mov [esi-4], ecx
	mov ecx, [esp+1Ch]
	add edx, ebp
	add ebx, ecx
	dec edi
	jnz loc_4A9720

loc_4A9774:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch

loc_4A977D:
	call sub_4AD9F0
	mov [esp+8], eax

loc_4A9786:
	mov eax, ebx
	sar eax, 10h
	mov cl, [esp+8]
	shl eax, cl
	mov [esp], eax
	mov eax, edx
	mov ecx, [esp]
	sar eax, 10h
	add ecx, eax
	mov eax, [esp+1Ch]
	add ebx, eax
	mov eax, ebx
	mov [esi], ecx
	sar eax, 10h
	mov cl, [esp+8]
	shl eax, cl
	add edx, ebp
	mov [esp], eax
	mov eax, edx
	mov ecx, [esp]
	sar eax, 10h
	add esi, 8
	add ecx, eax
	mov [esi-4], ecx
	mov ecx, [esp+1Ch]
	add edx, ebp
	add ebx, ecx
	dec edi
	jnz loc_4A9786
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_4A9700 endp

sub_4A9CF0: ;SUBROUTINE
	mov eax, dword [lpTlsValue]
	ret
;sub_4A9CF0 endp

;	Attributes: library function

free_: ;SUBROUTINE
	push ecx
	push edx

	push eax
	call free_wrap
	add esp, 4

	pop edx
	pop ecx

	ret
;free_ endp

sub_4AB61D: ;SUBROUTINE
	push ecx
	test eax, 7
	jnz loc_4AB6A4

loc_4AB625:
	sub ebx, 20h
	js loc_4AB64F

loc_4AB62A:
	fild qword [edx]
	fild qword [edx+8]
	fxch st1
	fistp qword [eax]
	fistp qword [eax+8]
	fild qword [edx+10h]
	fild qword [edx+18h]
	fxch st1
	fistp qword [eax+10h]
	fistp qword [eax+18h]
	lea edx, [edx+20h]
	lea eax, [eax+20h]
	sub ebx, 20h
	jns loc_4AB62A

loc_4AB64F:
	add ebx, 18h
	js loc_4AB663

loc_4AB654:
	fild qword [edx]
	fistp qword [eax]
	lea edx, [edx+8]
	lea eax, [eax+8]
	sub ebx, 8
	jns loc_4AB654

loc_4AB663:
	add ebx, 8
	jnz loc_4AB66A
	pop ecx
	ret

loc_4AB66A:
	cmp ebx, 4
	jb loc_4AB67C
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4AB67C:
	cmp ebx, 2
	jb loc_4AB690
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4AB690:
	cmp ebx, 1
	jb loc_4AB6A2
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4AB6A2:
	pop ecx
	ret

loc_4AB6A4:
	test eax, 1
	jz loc_4AB6BD
	cmp ebx, 1
	jl loc_4AB6BD
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4AB6BD:
	test eax, 2
	jz loc_4AB6D8
	cmp ebx, 2
	jl loc_4AB6D8
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4AB6D8:
	test eax, 4
	jz loc_4AB6F1
	cmp ebx, 4
	jl loc_4AB6F1
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4AB6F1:
	jmp loc_4AB625
;sub_4AB61D endp

sub_4AB6F9: ;SUBROUTINE
	push ecx
	test eax, 7
	jnz loc_4AB78A

loc_4AB705:
	sub ebx, 20h
	js loc_4AB733

loc_4AB70A:
	movq mm0, qword [edx]
	movq mm1, qword [edx+8]
	movq mm2, qword [edx+10h]
	movq mm3, qword [edx+18h]
	movq qword [eax], mm0
	movq qword [eax+8], mm1
	movq qword [eax+10h], mm2
	movq qword [eax+18h], mm3
	lea edx, [edx+20h]
	lea eax, [eax+20h]
	sub ebx, 20h
	jns loc_4AB70A

loc_4AB733:
	add ebx, 18h
	js loc_4AB749

loc_4AB738:
	movq mm0, qword [edx]
	movq qword [eax], mm0
	lea edx, [edx+8]
	lea eax, [eax+8]
	sub ebx, 8
	jns loc_4AB738

loc_4AB749:
	add ebx, 8
	jnz loc_4AB750
	pop ecx
	ret

loc_4AB750:
	cmp ebx, 4
	jb loc_4AB762
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4AB762:
	cmp ebx, 2
	jb loc_4AB776
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4AB776:
	cmp ebx, 1
	jb loc_4AB788
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4AB788:
	pop ecx
	ret

loc_4AB78A:
	test eax, 1
	jz loc_4AB7A3
	cmp ebx, 1
	jl loc_4AB7A3
	mov cl, [edx]
	lea edx, [edx+1]
	mov [eax], cl
	lea eax, [eax+1]
	sub ebx, 1

loc_4AB7A3:
	test eax, 2
	jz loc_4AB7BE
	cmp ebx, 2
	jl loc_4AB7BE
	mov cx, [edx]
	lea edx, [edx+2]
	mov [eax], cx
	lea eax, [eax+2]
	sub ebx, 2

loc_4AB7BE:
	test eax, 4
	jz loc_4AB7D7
	cmp ebx, 4
	jl loc_4AB7D7
	mov ecx, [edx]
	lea edx, [edx+4]
	mov [eax], ecx
	lea eax, [eax+4]
	sub ebx, 4

loc_4AB7D7:
	jmp loc_4AB705
;sub_4AB6F9 endp

sub_4AC810: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov edi, edx
	mov ebp, ecx
	mov ecx, [esp+14h]
	test ecx, ecx
	jnz loc_4AC82A
	mov ecx, dword [dword_4DAB84]

loc_4AC82A:
	test ecx, ecx
	jnz loc_4AC833
	mov ecx, 8

loc_4AC833:
	lea eax, [ecx+1]
	and al, 0FEh
	mov edx, 38h
	mov [esp], eax
	mov eax, esi
	call sub_48A01C
	mov dword [esi], 57494E44h
	mov byte [esi+1Eh], 0FFh
	mov [esi+28h], ebp
	mov [esi+4], edi
	mov [esi+8], ebx
	mov [esi+14h], edi
	mov [esi+18h], ebx
	mov eax, ecx
	mov [esi+1Ch], cl
	call sub_4ACB80
	mov edx, ebp
	mov [esi+1Dh], al
	mov eax, [esp+18h]
	mov ecx, ebx
	mov [esi+20h], eax
	mov eax, [esp+1Ch]
	xor ebx, ebx
	mov [esi+34h], eax
	xor eax, eax
	call sub_49B174
	mov ebx, 3
	mov edx, [esp]
	mov ecx, edi
	mov [esi+2Ch], eax
	xor eax, eax
	call sub_49B174
	mov [esi+30h], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 0Ch
;sub_4AC810 endp

sub_4AC934: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	test eax, eax
	jnz loc_4AC943
	mov esi, dword_4DB240

loc_4AC943:
	mov ecx, [esi+28h]
	mov [esi+20h], ebx
	cmp edx, ecx
	jz loc_4AC96D
	mov ebx, [esi+2Ch]
	test ebx, ebx
	jz loc_4AC95B
	mov eax, ebx
	call sub_49B24C

loc_4AC95B:
	mov ecx, [esi+8]
	xor ebx, ebx
	xor eax, eax
	mov [esi+28h], edx
	call sub_49B174
	mov [esi+2Ch], eax

loc_4AC96D:
	mov eax, [esi+0Ch]
	mov edi, [esi+4]
	cmp eax, edi
	jle loc_4AC97A
	mov [esi+0Ch], edi

loc_4AC97A:
	mov eax, [esi+10h]
	mov ebp, [esi+8]
	cmp eax, ebp
	jle loc_4AC987
	mov [esi+10h], ebp

loc_4AC987:
	mov eax, [esi+14h]
	mov edx, [esi+4]
	cmp eax, edx
	jle loc_4AC9AA
	mov [esi+14h], edx

loc_4AC994:
	mov eax, [esi+18h]
	mov ebx, [esi+8]
	cmp eax, ebx
	jg loc_4AC9B6
	mov edi, [esi+10h]
	cmp eax, edi
	jl loc_4AC9BE
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4AC9AA:
	mov ecx, [esi+0Ch]
	cmp eax, ecx
	jge loc_4AC994
	mov [esi+14h], ecx
	jmp loc_4AC994

loc_4AC9B6:
	mov [esi+18h], ebx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4AC9BE:
	mov [esi+18h], edi
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4AC934 endp

sub_4AC9C8: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	mov ecx, [eax+2Ch]
	test ecx, ecx
	jnz loc_4AC9FD

loc_4AC9D4:
	mov ebx, [edx+30h]
	test ebx, ebx
	jz loc_4AC9E9
	mov eax, ebx
	call sub_49B24C
	mov dword [edx+30h], 0

loc_4AC9E9:
	cmp edx, dword_4DB278
	jz loc_4AC9F9
	cmp edx, dword_4DB2B0
	jnz loc_4ACA0D

loc_4AC9F9:
	pop edx
	pop ecx
	pop ebx
	ret

loc_4AC9FD:
	mov eax, ecx
	call sub_49B24C
	mov dword [edx+2Ch], 0
	jmp loc_4AC9D4

loc_4ACA0D:
	mov eax, edx
	call sub_4848FC
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4AC9C8 endp

;	Attributes: library function

__STOSB: ;SUBROUTINE
	or ecx, ecx
	jz locret_4ACB00

loc_4ACAD6:
	test al, 3
	jz loc_4ACAE3
	mov [eax], dl
	inc eax
	ror edx, 8
	dec ecx
	jnz loc_4ACAD6

loc_4ACAE3:
	push ecx
	shr ecx, 2
	call __STOSD
	pop ecx
	and ecx, 3
	jz locret_4ACB00
	mov [eax], dl
	dec ecx
	jz locret_4ACB00
	mov [eax+1], dh
	dec ecx
	jz locret_4ACB00
	mov [eax+2], dl

locret_4ACB00:
	ret
;__STOSB endp

;	Attributes: library function

__STOSD: ;SUBROUTINE
	or ecx, ecx
	jz locret_4ACB72

loc_4ACB0B:
	test al, 1Fh
	jz loc_4ACB17
	mov [eax], edx
	lea eax, [eax+4]
	dec ecx
	jnz loc_4ACB0B

loc_4ACB17:
	push ecx
	shr ecx, 2
	jz loc_4ACB57
	dec ecx
	jz loc_4ACB49

loc_4ACB20:
	mov [eax], edx
	mov [eax+4], edx
	dec ecx
	mov [eax+8], edx
	mov [eax+0Ch], edx
	jz loc_4ACB46
	mov [eax+10h], edx
	mov [eax+14h], edx
	dec ecx
	mov [eax+18h], edx
	mov [eax+1Ch], edx
	lea eax, [eax+20h]
	jnz loc_4ACB20
	lea eax, [eax-10h]

loc_4ACB46:
	lea eax, [eax+10h]

loc_4ACB49:
	mov [eax], edx
	mov [eax+4], edx
	mov [eax+8], edx
	mov [eax+0Ch], edx
	lea eax, [eax+10h]

loc_4ACB57:
	pop ecx
	and ecx, 3
	jz locret_4ACB72
	mov [eax], edx
	lea eax, [eax+4]
	dec ecx
	jz locret_4ACB72
	mov [eax], edx
	lea eax, [eax+4]
	dec ecx
	jz locret_4ACB72
	mov [eax], edx
	lea eax, [eax+4]

locret_4ACB72:
	ret
;__STOSD endp

sub_4ACB80: ;SUBROUTINE
	push edx
	xor edx, edx
	cmp eax, 0Fh
	jnb loc_4ACB9B
	cmp eax, 4
	jnb loc_4ACBC0
	cmp eax, 1
	jnz loc_4ACB97
	mov edx, 79h

loc_4ACB97:
	mov eax, edx
	pop edx
	ret

loc_4ACB9B:
	jbe loc_4ACBD9
	cmp eax, 18h
	jnb loc_4ACBB0
	cmp eax, 10h
	jnz loc_4ACB97
	mov edx, 78h
	mov eax, edx
	pop edx
	ret

loc_4ACBB0:
	jbe loc_4ACBE2
	cmp eax, 20h
	jnz loc_4ACB97
	mov edx, 7Dh
	mov eax, edx
	pop edx
	ret

loc_4ACBC0:
	jbe loc_4ACBD0
	cmp eax, 8
	jnz loc_4ACB97
	mov edx, 7Bh
	mov eax, edx
	pop edx
	ret

loc_4ACBD0:
	mov edx, 7Ah
	mov eax, edx
	pop edx
	ret

loc_4ACBD9:
	mov edx, 7Eh
	mov eax, edx
	pop edx
	ret

loc_4ACBE2:
	mov edx, 7Fh
	mov eax, edx
	pop edx
	ret
;sub_4ACB80 endp

sub_4ACBEC: ;SUBROUTINE
	mov ebx, [esi+14h]
	mov eax, [esi+0Ch]
	mov ecx, [esi+4]
	mov edx, [esi+1Ch]
	or ecx, ebx
	or edx, eax
	mov edi, [esi+8]
	mov ebp, [esi+18h]
	or edx, ecx
	or edi, ebp
	mov ecx, [esi+10h]
	or edx, edi
	or edx, ecx
	jz loc_4ACD23
	mov ecx, [esi+4]
	mov edx, [esi+1Ch]
	lea edi, [ebx+eax]
	sub ebx, eax
	lea eax, [ecx+edx]
	sub ecx, edx
	mov dword [dbl_4E28A8], ebx
	mov dword [dbl_4E28A8+4], ecx
	lea ebp, [eax+edi]
	sub eax, edi
	fild dword [dbl_4E28A8]
	fild dword [dbl_4E28A8+4]
	fld st0
	fmul dword [flt_4E28C0]
	fxch st2
	fadd st1, st0
	fmul dword [flt_4E28BC]
	fxch st1
	fmul dword [flt_4E28C4]
	imul dword [dword_4E28B8]
	fadd st1, st0
	fsubp st2, st0
	fadd dword [flt_4E28C8]
	fxch st1
	fadd dword [flt_4E28C8]
	mov eax, [esi+8]
	mov ebx, [esi+18h]
	shl edx, 1
	fstp qword [dbl_4E28B0]
	fstp qword [dbl_4E28A8]
	mov ecx, dword [dbl_4E28A8]
	mov edi, dword [dbl_4E28B0]
	add ecx, edx
	add edx, edi
	add edi, ebp
	mov dword [dbl_4E28A8+4], ecx
	mov dword [dbl_4E28B0], edx
	mov dword [dbl_4E28B0+4], edi
	mov ecx, [esi]
	mov edx, [esi+10h]
	lea esi, [eax+ebx]
	sub eax, ebx
	lea ebx, [ecx+edx]
	sub ecx, edx
	imul dword [dword_4E28B8]
	shl edx, 1
	mov edi, dword [dword_4E28A4]
	add esi, edx
	mov ebp, dword [dbl_4E28A8+4]
	lea eax, [ecx+edx]
	sub ecx, edx
	lea edx, [ebx+esi]
	sub ebx, esi
	lea esi, [ecx+ebp]
	sub ecx, ebp
	mov ebp, dword [dbl_4E28A8]
	mov [edi+48h], esi
	mov esi, dword [dbl_4E28B0]
	mov [edi+0B4h], ecx
	lea ecx, [ebx+ebp]
	sub ebx, ebp
	mov ebp, dword [dbl_4E28B0+4]
	mov [edi+6Ch], ecx
	mov [edi+90h], ebx
	lea ebx, [eax+esi]
	sub eax, esi
	lea ecx, [edx+ebp]
	sub edx, ebp
	mov [edi], ecx
	mov [edi+24h], ebx
	mov [edi+0D8h], eax
	mov [edi+0FCh], edx
	ret

loc_4ACD23:
	mov eax, [esi]
	mov edi, dword [dword_4E28A4]
	mov [edi], eax
	mov [edi+24h], eax
	mov [edi+48h], eax
	mov [edi+6Ch], eax
	mov [edi+90h], eax
	mov [edi+0B4h], eax
	mov [edi+0D8h], eax
	mov [edi+0FCh], eax
	ret
;sub_4ACBEC endp

sub_4ACD4F: ;SUBROUTINE
	mov ebx, [esi+14h]
	mov eax, [esi+0Ch]
	mov ecx, [esi+4]
	mov edx, [esi+1Ch]
	lea edi, [ebx+eax]
	sub ebx, eax
	lea eax, [ecx+edx]
	sub ecx, edx
	mov dword [dbl_4E28A8], ebx
	mov dword [dbl_4E28A8+4], ecx
	lea ebp, [eax+edi]
	sub eax, edi
	fild dword [dbl_4E28A8]
	fild dword [dbl_4E28A8+4]
	fld st0
	fmul dword [flt_4E28C0]
	fxch st2
	fadd st1, st0
	fmul dword [flt_4E28BC]
	fxch st1
	fmul dword [flt_4E28C4]
	imul dword [dword_4E28B8]
	fadd st1, st0
	fsubp st2, st0
	fadd dword [flt_4E28C8]
	fxch st1
	fadd dword [flt_4E28C8]
	mov eax, [esi+8]
	mov ebx, [esi+18h]
	shl edx, 1
	fstp qword [dbl_4E28B0]
	fstp qword [dbl_4E28A8]
	mov ecx, dword [dbl_4E28A8]
	mov edi, dword [dbl_4E28B0]
	add ecx, edx
	add edx, edi
	add edi, ebp
	mov dword [dbl_4E28A8+4], ecx
	mov dword [dbl_4E28B0], edx
	mov dword [dbl_4E28B0+4], edi
	mov ecx, [esi]
	mov edx, [esi+10h]
	lea esi, [eax+ebx]
	sub eax, ebx
	lea ebx, [ecx+edx]
	sub ecx, edx
	imul dword [dword_4E28B8]
	shl edx, 1
	mov edi, dword [dword_4E28A4]
	add esi, edx
	mov ebp, dword [dbl_4E28A8+4]
	lea eax, [ecx+edx]
	sub ecx, edx
	lea edx, [ebx+esi]
	sub ebx, esi
	lea esi, [ecx+ebp]
	sub ecx, ebp
	mov ebp, dword [dbl_4E28A8]
	mov [edi+8], esi
	mov esi, dword [dbl_4E28B0]
	mov [edi+14h], ecx
	lea ecx, [ebx+ebp]
	sub ebx, ebp
	mov ebp, dword [dbl_4E28B0+4]
	mov [edi+0Ch], ecx
	mov [edi+10h], ebx
	lea ebx, [eax+esi]
	sub eax, esi
	lea ecx, [edx+ebp]
	sub edx, ebp
	mov [edi], ecx
	mov [edi+4], ebx
	mov [edi+18h], eax
	mov [edi+1Ch], edx
	ret
;sub_4ACD4F endp

sub_4ACE59: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	push eax
	shl edx, 2
	mov dword [dword_4E28A0], edx
	mov esi, dword_4E29EC
	mov dword [dword_4E28A4], dword_4E28CC
	call sub_4ACBEC
	mov esi, dword_4E2A0C
	mov dword [dword_4E28A4], dword_4E28D0
	call sub_4ACBEC
	mov esi, dword_4E2A2C
	mov dword [dword_4E28A4], dword_4E28D4
	call sub_4ACBEC
	mov esi, dword_4E2A4C
	mov dword [dword_4E28A4], dword_4E28D8
	call sub_4ACBEC
	mov esi, dword_4E2A6C
	mov dword [dword_4E28A4], dword_4E28DC
	call sub_4ACBEC
	mov esi, dword_4E2A8C
	mov dword [dword_4E28A4], dword_4E28E0
	call sub_4ACBEC
	mov esi, dword_4E2AAC
	mov dword [dword_4E28A4], dword_4E28E4
	call sub_4ACBEC
	mov esi, dword_4E2ACC
	mov dword [dword_4E28A4], dword_4E28E8
	call sub_4ACBEC
	pop eax
	mov esi, dword_4E28CC
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E28F0
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E2914
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E2938
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E295C
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E2980
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E29A4
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	mov eax, dword [dword_4E28A4]
	mov edx, dword [dword_4E28A0]
	add eax, edx
	mov esi, dword_4E29C8
	mov dword [dword_4E28A4], eax
	call sub_4ACD4F
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4ACE59 endp

sub_4ACFE4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	xor ebx, ebx
	mov esi, eax
	mov bx, [eax]
	mov edi, edx
	shl ebx, 10h
	mov ebp, 10h
	add esi, 2
	mov eax, ebx

loc_4ACFFE:
	shr eax, 16h
	cmp eax, 1FFh
	jz loc_4AD0EA
	mov [edi], ax
	add edi, 2
	shl ebx, 0Ah
	sub ebp, 0Ah
	cmp ebp, 10h
	jge loc_4AD033
	xor eax, eax
	mov ecx, 10h
	mov ax, [esi]
	sub ecx, ebp
	shl eax, cl
	add esi, 2
	or ebx, eax
	add ebp, 10h

loc_4AD033:
	mov edx, ebx

loc_4AD035:
	shr edx, 13h
	mov eax, dword dword_56475C[edx*4]
	test eax, 200000h
	jz loc_4AD0A7
	test eax, 10000h
	jz loc_4AD07A
	shl ebx, 6
	sub ebp, 6
	cmp ebp, 10h
	jge loc_4AD06E
	xor eax, eax
	mov ecx, 10h
	mov ax, [esi]
	sub ecx, ebp
	shl eax, cl
	add esi, 2
	or ebx, eax
	add ebp, 10h

loc_4AD06E:
	mov eax, ebx
	shr eax, 10h
	or eax, 100000h
	jmp loc_4AD0A7

loc_4AD07A:
	shl ebx, 8
	sub ebp, 8
	cmp ebp, 10h
	jge loc_4AD09B
	xor eax, eax
	mov ecx, 10h
	mov ax, [esi]
	sub ecx, ebp
	shl eax, cl
	add esi, 2
	or ebx, eax
	add ebp, 10h

loc_4AD09B:
	mov edx, ebx
	shr edx, 17h
	mov eax, dword dword_56C75C[edx*4]

loc_4AD0A7:
	mov [edi], ax
	mov ecx, eax
	shr ecx, 10h
	add edi, 2
	shl ebx, cl
	sub ebp, ecx
	cmp ebp, 10h
	jge loc_4AD0D1
	xor edx, edx
	mov ecx, 10h
	mov dx, [esi]
	sub ecx, ebp
	shl edx, cl
	add esi, 2
	or ebx, edx
	add ebp, 10h

loc_4AD0D1:
	and eax, 0FFFFh
	mov edx, ebx
	cmp eax, 0FE00h
	jnz loc_4AD035
	mov eax, ebx
	jmp loc_4ACFFE

loc_4AD0EA:
	mov word [edi], 0FE00h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4ACFE4 endp

sub_4AD0F4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	mov esi, eax
	xor eax, eax
	mov ax, [esi]
	xor ebx, ebx
	shl eax, 16h
	mov ecx, 1
	sar eax, 16h
	mov edi, 3Fh
	imul dword [dword_56CF5C]
	mov dword [dword_4E29EC], eax
	xor ebp, ebp

loc_4AD120:
	xor eax, eax
	mov ax, [esi+ecx*2]
	inc ecx
	cmp eax, 0FE00h
	jz loc_4AD164
	mov edx, eax
	mov bl, byte byte_4DEF20[edi]
	shr edx, 0Ah
	jz loc_4AD14D

loc_4AD13B:
	dec edi
	dec edx
	mov dword dword_4E29EC[ebx*4], ebp
	nop
	mov bl, byte byte_4DEF20[edi]
	jnz loc_4AD13B

loc_4AD14D:
	shl eax, 16h
	sar eax, 16h
	dec edi
	imul dword dword_56CF5C[ebx*4]
	mov dword dword_4E29EC[ebx*4], eax
	jmp loc_4AD120

loc_4AD164:
	mov bl, byte byte_4DEF20[edi]

loc_4AD16A:
	dec edi
	js loc_4AD17D
	mov dword dword_4E29EC[ebx*4], ebp
	nop
	mov bl, byte byte_4DEF20[edi]
	jmp loc_4AD16A

loc_4AD17D:
	mov eax, ecx
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4AD0F4 endp

sub_4AD186: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov esi, eax
	mov edi, edx
	mov ebp, ebx
	xor eax, eax
	xor ebx, ebx
	xor ecx, ecx
	xor edx, edx
	mov al, [esi+2]
	mov bl, [edi+102h]
	mov cl, [esi+6]
	mov dl, [edi+2]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+0], eax
	xor eax, eax
	mov al, [esi+0Ah]
	mov bl, [edi+106h]
	mov cl, [esi+0Eh]
	mov dl, [edi+6]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+4], eax
	xor eax, eax
	mov al, [esi+12h]
	mov bl, [edi+10Ah]
	mov cl, [esi+16h]
	mov dl, [edi+0Ah]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+8], eax
	xor eax, eax
	mov al, [esi+1Ah]
	mov bl, [edi+10Eh]
	mov cl, [esi+1Eh]
	mov dl, [edi+0Eh]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+0Ch], eax
	xor eax, eax
	mov al, [esi+22h]
	mov bl, [edi+112h]
	mov cl, [esi+26h]
	mov dl, [edi+12h]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+10h], eax
	xor eax, eax
	mov al, [esi+2Ah]
	mov bl, [edi+116h]
	mov cl, [esi+2Eh]
	mov dl, [edi+16h]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+14h], eax
	xor eax, eax
	mov al, [esi+32h]
	mov bl, [edi+11Ah]
	mov cl, [esi+36h]
	mov dl, [edi+1Ah]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+18h], eax
	xor eax, eax
	mov al, [esi+3Ah]
	mov bl, [edi+11Eh]
	mov cl, [esi+3Eh]
	mov dl, [edi+1Eh]
	mov al, byte byte_56D05C[eax]
	mov bl, byte byte_56D05C[ebx]
	shl eax, 8
	mov cl, byte byte_56D05C[ecx]
	shl ebx, 8
	mov dl, byte byte_56D05C[edx]
	or eax, ecx
	or ebx, edx
	shl eax, 10h
	or eax, ebx
	xor ebx, ebx
	mov [ebp+1Ch], eax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4AD186 endp

sub_4AD390: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov esi, edx
	mov [esp], ebx
	mov ebp, ecx
	call sub_49D180
	mov edx, 205h
	jmp loc_4AD3BB

loc_4AD3BB:
	mov ecx, esi
	mov eax, edi
	xor ebx, ebx
	call sub_45A560
	test eax, eax
	jnz loc_4AD3DC
	mov [esi], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4AD3DC:
	push 0
	mov ebx, [esp+18h]
	mov ecx, ebp
	mov eax, [esi]
	xor edx, edx
	call sub_45A420
	test eax, eax
	jz loc_4AD408
	mov eax, [esp]
	mov dword [eax], 0
	mov eax, 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4AD408:
	mov eax, [esi]
	call sub_459B80
	mov dword [esi], 0
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret 8
;sub_4AD390 endp

sub_4AD420: ;SUBROUTINE
	push esi
	push 1
	mov esi, [esp+0Ch]
	push esi
	call sub_4AD390
	pop esi
	ret 4
;sub_4AD420 endp

;	Attributes: thunk

sub_4AD44C: ;SUBROUTINE
	jmp sub_459B80
;sub_4AD44C endp

sub_4AD454: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov [esp+8], edx
	mov ebp, ebx
	mov [esp+4], ecx
	xor edi, edi
	mov ebx, esp
	push edi
	xor ecx, ecx
	xor edx, edx
	call sub_45A420
	test eax, eax
	jnz loc_4AD481

loc_4AD478:
	mov eax, edi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4AD481:
	mov ebx, [esp]
	imul ebx, ebp
	mov edx, [esp+8]
	mov eax, esi
	call sub_45A070
	mov edx, [esp+4]
	mov edi, eax
	test edx, edx
	jz loc_4AD478
	test eax, eax
	jnz loc_4AD478
	mov eax, edi
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4AD454 endp

sub_4AD4AC: ;SUBROUTINE
	push ecx
	mov ecx, 1
	call sub_4AD454
	pop ecx
	ret
;sub_4AD4AC endp

sub_4AD4DC: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call sub_459D60
	mov eax, ecx
	call sub_459CB0
	pop ecx
	ret
;sub_4AD4DC endp

sub_4AD510: ;SUBROUTINE
	push ecx
	lea ecx, [eax+0Ch]
	mov eax, [eax+0Ch]
	add eax, ecx
	mov byte [edx], 0
	mov cl, [eax+2Dh]
	mov [edx+1], cl
	mov cl, [eax+2Fh]
	mov [edx+2], cl
	mov cl, [eax+2Eh]
	mov [edx+3], cl
	mov ax, [eax+32h]
	and eax, 0FFFFh
	mov [edx+4], eax
	xor eax, eax
	pop ecx
	ret
;sub_4AD510 endp

sub_4AD540: ;SUBROUTINE
	push ecx
	push edi
	mov edi, edx
	cmp dword [eax], 6C544150h
	jz loc_4AD591
	test byte [eax+3], 2
	jz loc_4AD59B
	lea ecx, [eax+8]

loc_4AD555:
	push esi
	push ebx
	mov byte [edi], 0
	mov byte [edi+1], 0
	mov byte [edi+2], 0
	mov byte [edi+3], 0
	mov dword [edi+4], 0
	cmp byte [ecx], 0FFh
	jz loc_4AD58A

loc_4AD572:
	mov bh, [ecx]
	cmp bh, 0FEh
	jz loc_4AD58A
	movzx esi, bh
	inc ecx
	cmp esi, 0FDh
	jnz loc_4AD5A0

loc_4AD585:
	cmp byte [ecx], 0FFh
	jnz loc_4AD572

loc_4AD58A:
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_4AD591:
	mov edx, edi
	call sub_4AD510
	pop edi
	pop ecx
	ret

loc_4AD59B:
	lea ecx, [eax+4]
	jmp loc_4AD555

loc_4AD5A0:
	cmp esi, 0FCh
	jz loc_4AD585
	xor ebx, ebx
	mov bl, [ecx]
	cmp ebx, 0FFh
	jnz loc_4AD5C6
	inc ecx
	mov edx, 4
	mov eax, ecx
	call sub_4A7E90
	mov ebx, eax
	add ecx, 3

loc_4AD5C6:
	inc ecx
	cmp esi, 82h
	jnb loc_4AD5E2
	cmp esi, 13h
	jnb loc_4AD606

loc_4AD5D4:
	add ecx, ebx
	cmp byte [ecx], 0FFh
	jnz loc_4AD572
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_4AD5E2:
	jbe loc_4AD64B
	cmp esi, 83h
	jbe loc_4AD669
	cmp esi, 84h
	jnz loc_4AD5D4
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov [edi+4], eax
	jmp loc_4AD5D4

loc_4AD606:
	jbe loc_4AD62E
	cmp esi, 81h
	jnz loc_4AD5D4
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov [edi+1], al
	add ecx, ebx
	cmp byte [ecx], 0FFh
	jnz loc_4AD572
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_4AD62E:
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov [edi], al
	add ecx, ebx
	cmp byte [ecx], 0FFh
	jnz loc_4AD572
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_4AD64B:
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov [edi+3], al
	add ecx, ebx
	cmp byte [ecx], 0FFh
	jnz loc_4AD572
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret

loc_4AD669:
	mov edx, ebx
	mov eax, ecx
	call sub_4A7E90
	mov [edi+2], al
	add ecx, ebx
	cmp byte [ecx], 0FFh
	jnz loc_4AD572
	xor eax, eax
	pop ebx
	pop esi
	pop edi
	pop ecx
	ret
;sub_4AD540 endp

sub_4AD690: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, eax
	mov [esp+4], edx
	mov [esp+8], ebx
	mov [esp], ecx
	mov esi, [esp+8]
	mov edi, [esp]
	mov ebx, [eax]
	mov ecx, [edx]
	mov edx, dword [dword_4DB24C]
	mov esi, [esi]
	mov edi, [edi]
	cmp ebx, edx
	jl loc_4AD6F8
	cmp ebx, dword [dword_4DB254]
	jge loc_4AD6F8
	cmp ecx, dword [dword_4DB250]
	jl loc_4AD6F8
	cmp ecx, dword [dword_4DB258]
	jge loc_4AD6F8
	cmp esi, dword [dword_4DB24C]
	jl loc_4AD6F8
	cmp esi, dword [dword_4DB254]
	jge loc_4AD6F8
	cmp edi, dword [dword_4DB250]
	jl loc_4AD6F8
	cmp edi, dword [dword_4DB258]
	jl loc_4AD858

loc_4AD6F8:
	mov edx, dword [dword_4DB254]
	cmp ebx, edx
	jl loc_4AD70A
	cmp esi, edx
	jge loc_4AD864

loc_4AD70A:
	mov edx, dword [dword_4DB24C]
	cmp ebx, edx
	jge loc_4AD71C
	cmp esi, edx
	jl loc_4AD864

loc_4AD71C:
	mov edx, dword [dword_4DB258]
	cmp ecx, edx
	jl loc_4AD72E
	cmp edi, edx
	jge loc_4AD864

loc_4AD72E:
	mov edx, dword [dword_4DB250]
	cmp ecx, edx
	jge loc_4AD740
	cmp edi, edx
	jl loc_4AD864

loc_4AD740:
	cmp ebx, esi
	jle loc_4AD750
	mov eax, ebx
	mov ebx, esi
	mov esi, eax
	mov eax, ecx
	mov ecx, edi
	mov edi, eax

loc_4AD750:
	mov edx, dword [dword_4DB24C]
	cmp ebx, edx
	jge loc_4AD77E
	cmp ebx, esi
	jz loc_4AD77E
	mov eax, edx
	mov edx, edi
	sub eax, ebx
	sub edx, ecx
	imul edx, eax
	mov eax, esi
	sub eax, ebx
	mov ebx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov ebx, dword [dword_4DB24C]
	add ecx, eax

loc_4AD77E:
	mov edx, dword [dword_4DB254]
	cmp esi, edx
	jl loc_4AD7AA
	cmp ebx, esi
	jz loc_4AD7AA
	mov eax, edx
	mov edx, edi
	sub eax, ebx
	sub edx, ecx
	imul edx, eax
	sub esi, ebx
	mov eax, edx
	sar edx, 1Fh
	idiv esi
	mov esi, dword [dword_4DB254]
	lea edi, [eax+ecx]
	dec esi

loc_4AD7AA:
	cmp ecx, edi
	jle loc_4AD7BA
	mov eax, ebx
	mov ebx, esi
	mov esi, eax
	mov eax, ecx
	mov ecx, edi
	mov edi, eax

loc_4AD7BA:
	mov eax, dword [dword_4DB250]
	cmp ecx, eax
	jge loc_4AD7E5
	cmp ecx, edi
	jz loc_4AD7E5
	mov edx, esi
	sub eax, ecx
	sub edx, ebx
	imul edx, eax
	mov eax, edi
	sub eax, ecx
	mov ecx, eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, dword [dword_4DB250]
	add ebx, eax

loc_4AD7E5:
	mov edx, dword [dword_4DB258]
	cmp edi, edx
	jl loc_4AD80D
	cmp ecx, edi
	jz loc_4AD80D
	sub edx, ecx
	sub esi, ebx
	imul edx, esi
	sub edi, ecx
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov edi, dword [dword_4DB258]
	lea esi, [eax+ebx]
	dec edi

loc_4AD80D:
	mov eax, [esp+8]
	mov [ebp+0], ebx
	mov [eax], esi
	mov eax, [esp+4]
	mov [eax], ecx
	mov eax, [esp]
	mov ebp, dword [dword_4DB24C]
	mov [eax], edi
	cmp ebx, ebp
	jl loc_4AD864
	mov eax, dword [dword_4DB254]
	cmp ebx, eax
	jge loc_4AD864
	mov edx, dword [dword_4DB250]
	cmp ecx, edx
	jl loc_4AD864
	mov ebx, dword [dword_4DB258]
	cmp ecx, ebx
	jge loc_4AD864
	cmp esi, ebp
	jl loc_4AD864
	cmp esi, eax
	jge loc_4AD864
	cmp edi, edx
	jl loc_4AD864
	cmp edi, ebx
	jge loc_4AD864

loc_4AD858:
	mov eax, 1
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4AD864:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4AD690 endp

sub_4AD870: ;SUBROUTINE
	push ecx
	push esi
	sub esp, 4
	mov [esp], eax
	mov ecx, edx
	mov edx, ebx
	cmp eax, dword [dword_4DB24C]
	jl loc_4AD8E0
	cmp eax, dword [dword_4DB254]
	jge loc_4AD8E0
	cmp ecx, dword [dword_4DB250]
	jl loc_4AD8E0
	cmp ecx, dword [dword_4DB258]
	jge loc_4AD8E0
	mov eax, dword [dword_4DB26C]
	shl ecx, 2
	add ecx, eax
	mov ebx, dword [dword_4DB270]
	mov eax, [esp]
	mov ecx, [ecx]
	mov esi, [ebx+eax*4]
	mov eax, dword [dword_4DB260]
	add ecx, esi
	add ecx, eax
	mov al, byte [byte_4DB25C]
	cmp al, 0Fh
	jnb loc_4AD8E6
	cmp al, 4
	jb loc_4AD8E0
	ja loc_4AD8FF
	test byte [esp], 1
	jz loc_4AD907
	mov dh, [ecx]
	and dh, 0Fh
	mov al, dl
	shl al, 4
	or dh, al
	mov [ecx], dh

loc_4AD8E0:
	add esp, 4
	pop esi
	pop ecx
	ret

loc_4AD8E6:
	jbe loc_4AD8F0
	cmp al, 18h
	jnb loc_4AD8F5
	cmp al, 10h
	jnz loc_4AD8E0

loc_4AD8F0:
	mov [ecx], dx
	jmp loc_4AD8E0

loc_4AD8F5:
	jbe loc_4AD915
	cmp al, 20h
	jnz loc_4AD8E0
	mov [ecx], edx
	jmp loc_4AD8E0

loc_4AD8FF:
	cmp al, 8
	jnz loc_4AD8E0
	mov [ecx], dl
	jmp loc_4AD8E0

loc_4AD907:
	mov al, [ecx]
	and al, 0F0h
	or al, dl
	mov [ecx], al
	add esp, 4
	pop esi
	pop ecx
	ret

loc_4AD915:
	mov ebx, 3
	mov eax, ecx
	call sub_48C06F
	add esp, 4
	pop esi
	pop ecx
	ret
;sub_4AD870 endp

;	Attributes: library function

__setbits_: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	mov esi, eax
	mov ecx, edx
	mov ebx, 20h
	xor edx, edx
	call memset_
	jmp loc_4AD95B

loc_4AD93C:
	xor eax, eax
	mov al, dl
	sar eax, 3
	and dl, 7
	and edx, 0FFh
	mov dl, byte byte_4D1FA4[edx]
	mov dh, [esi+eax]
	or dh, dl
	inc ecx
	mov [esi+eax], dh

loc_4AD95B:
	mov dl, [ecx]
	test dl, dl
	jnz loc_4AD93C
	pop esi
	pop ecx
	pop ebx
	ret
;__setbits_ endp

;	Attributes: library function

modf_: ;SUBROUTINE
	push eax
	fld qword [esp+8]
	fld st0
	call __CHP
	fsub st1, st0
	mov eax, [esp+10h]
	fstp qword [eax]
	pop eax
	wait
	ret 0Ch
;modf_ endp

sub_4AD9F0: ;SUBROUTINE
	push ecx
	push edx
	mov ecx, eax
	xor edx, edx
	test eax, eax
	jl loc_4ADA39

loc_4AD9FA:
	test eax, eax
	jz loc_4ADA3D
	cmp eax, 10000h
	jl loc_4ADA0B
	sar eax, 10h
	add edx, 10h

loc_4ADA0B:
	cmp eax, 100h
	jl loc_4ADA18
	sar eax, 8
	add edx, 8

loc_4ADA18:
	cmp eax, 10h
	jl loc_4ADA23
	sar eax, 4
	add edx, 4

loc_4ADA23:
	cmp eax, 4
	jl loc_4ADA2E
	sar eax, 2
	add edx, 2

loc_4ADA2E:
	cmp eax, 2
	jl loc_4ADA34
	inc edx

loc_4ADA34:
	mov eax, edx
	pop edx
	pop ecx
	ret

loc_4ADA39:
	not eax
	jmp loc_4AD9FA

loc_4ADA3D:
	mov edx, 3Fh
	mov eax, edx
	pop edx
	pop ecx
	ret
;sub_4AD9F0 endp

sub_4ADAC0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov eax, ebx
	xor esi, esi
	test edi, edi
	jle loc_4ADB36
	mov ebp, 3Fh
	mov ebx, edx
	mov ecx, eax

loc_4ADAD7:
	cmp esi, 0FFh
	jnz loc_4ADB3B
	xor eax, eax

loc_4ADAE1:
	xor edx, edx
	mov [ecx+3], al
	mov dl, [ebx]
	imul edx, 0FFh
	add edx, 20h
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	mov [ecx+2], al
	xor eax, eax
	mov al, [ebx+1]
	imul eax, 0FFh
	lea edx, [eax+20h]
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	mov [ecx+1], al
	xor eax, eax
	mov al, [ebx+2]
	imul eax, 0FFh
	lea edx, [eax+20h]
	mov eax, edx
	sar edx, 1Fh
	idiv ebp
	add ecx, 4
	add ebx, 3
	inc esi
	mov [ecx-4], al
	cmp esi, edi
	jl loc_4ADAD7

loc_4ADB36:
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4ADB3B:
	mov eax, 0FFh
	jmp loc_4ADAE1
;sub_4ADAC0 endp

sub_4ADBB4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	sub esp, 4
	mov esi, eax
	xor ecx, ecx
	test eax, eax
	jle loc_4ADBF5
	mov eax, ebx

loc_4ADBC4:
	cmp ecx, 0FFh
	jz loc_4ADBFC
	mov dword [esp], 0FFh

loc_4ADBD3:
	mov bl, [esp]
	mov [eax+3], bl
	mov bl, [edx]
	mov [eax+2], bl
	mov bl, [edx+1]
	add edx, 3
	mov [eax+1], bl
	add eax, 4
	mov bl, [edx-1]
	inc ecx
	mov [eax-4], bl
	cmp ecx, esi
	jl loc_4ADBC4

loc_4ADBF5:
	add esp, 4
	pop edi
	pop esi
	pop ecx
	ret

loc_4ADBFC:
	xor edi, edi
	mov [esp], edi
	jmp loc_4ADBD3
;sub_4ADBB4 endp

sub_4B09C0: ;SUBROUTINE
	cmp dword [dword_4DF37C], 0
	jz loc_4B09CA
	ret

loc_4B09CA:
	push edx
	push ecx
	mov edx, 0B4h
	mov eax, dword_4DD6E8
	mov ecx, 1
	call sub_48A01C
	mov eax, sub_4B09F4
	mov dword [dword_4DF37C], ecx
	call atexit_
	pop ecx
	pop edx
	ret
;sub_4B09C0 endp

sub_4B09F4: ;SUBROUTINE
	cmp dword [dword_4DF37C], 0
	jnz loc_4B09FE
	ret

loc_4B09FE:
	push edx
	push ecx
	call sub_4A63B0
	mov edx, 0B4h
	mov eax, dword_4DD6E8
	xor ecx, ecx
	call sub_48A01C
	mov dword [dword_4DF37C], ecx
	pop ecx
	pop edx
	ret
;sub_4B09F4 endp

sub_4B0A20: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push 0 ; nTypeFlag
	call GetKeyboardType_wrap
	push 1 ; nTypeFlag
	mov ebx, eax
	call GetKeyboardType_wrap
	cmp ebx, 7
	jnz loc_4B0A4A
	cmp eax, 0D01h
	jl loc_4B0A4A
	cmp eax, 0D04h
	jle loc_4B0A50

loc_4B0A4A:
	xor eax, eax
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B0A50:
	mov edx, dword_4DFBF0
	mov eax, 1
	mov dword [dword_4DAB40], edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B0A20 endp

;	Attributes: library function static

;	void .fn_init(void)
fn_init: ;SUBROUTINE
	push edx
	mov edx, sub_4BB6F4
	mov eax, 10h
	call sub_4A67F8
	mov edx, sub_4BB528
	mov eax, 18h
	call sub_4A67F8
	pop edx
	ret
;fn_init endp

sub_4B0AA0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	call sub_4844D0
	mov ecx, eax
	mov eax, edx
	call sub_484DA4
	xor edx, edx
	cmp eax, 0Ch
	jge loc_4B0AC0

loc_4B0ABA:
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B0AC0:
	add eax, ecx
	mov ecx, 4
	sub eax, 0Ch
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov ecx, 4
	mov ebx, eax
	mov eax, aCrcf ; "CRCF"
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	cmp ebx, eax
	jnz loc_4B0ABA
	mov edx, 1
	mov eax, edx
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B0AA0 endp

sub_4B0B04: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edx, eax
	call sub_4844D0
	mov ebx, eax
	mov eax, edx
	call sub_484DA4
	mov edi, eax
	mov eax, edx
	mov esi, 1
	call sub_4B0AA0
	test eax, eax
	jnz loc_4B0B33

loc_4B0B2B:
	mov eax, esi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B0B33:
	lea eax, [ebx+edi]
	mov ecx, 4
	sub eax, 4
	mov eax, [ecx+eax-4]
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	lea edx, [edi-0Ch]
	mov ecx, eax
	mov eax, ebx
	call sub_48EBE0
	cmp ecx, eax
	jz loc_4B0B2B
	xor esi, esi
	mov eax, esi
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B0B04 endp

sub_4B0B68: ;SUBROUTINE
	push esi
	push edi
	mov esi, eax
	test eax, eax
	jnz loc_4B0B75

loc_4B0B70:
	mov eax, esi
	pop edi
	pop esi
	ret

loc_4B0B75:
	call sub_4B0AA0
	mov edi, eax
	test eax, eax
	jnz loc_4B0BA2
	cmp dword [dword_4DFC74], 0
	jz loc_4B0B70
	mov eax, esi
	call sub_484DA4

loc_4B0B90:
	test edi, edi
	jnz loc_4B0B70
	mov eax, esi
	call sub_484928
	xor esi, esi
	mov eax, esi
	pop edi
	pop esi
	ret

loc_4B0BA2:
	mov eax, esi
	call sub_4B0B04
	mov edi, eax
	test eax, eax
	jz loc_4B0B90
	mov eax, esi
	call sub_484DA4
	sub eax, dword [dword_4DFC70]
	mov ebx, ecx
	mov edx, eax
	mov eax, esi
	call sub_488128
	jmp loc_4B0B90
;sub_4B0B68 endp

sub_4B0BCC: ;SUBROUTINE
	mov dword [dword_4DDD50], sub_4B0B68
	ret
;sub_4B0BCC endp

sub_4B0BE0: ;SUBROUTINE
	push ecx
	push esi
	push ebp
	sub esp, 8
	mov esi, eax
	mov ebp, edx
	mov ecx, ebx
	mov ah, byte [byte_4DDA74]
	xor edx, edx
	test ah, ah
	jz loc_4B0C0D
	cmp ebp, 1
	jge loc_4B0C01
	test ebp, ebp
	jge loc_4B0C14

loc_4B0C01:
	mov eax, 0FFFFFFF8h

loc_4B0C06:
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	ret

loc_4B0C0D:
	mov eax, 0FFFFFFF6h
	jmp loc_4B0C06

loc_4B0C14:
	call sub_4A5360
	mov eax, esi
	call sub_4A576C
	mov esi, eax
	test eax, eax
	jl loc_4B0CD3
	cmp ebx, 7Fh
	jg loc_4B0CD3
	test ebx, ebx
	jl loc_4B0CD3
	push edi
	shl eax, 2
	sub eax, esi
	shl eax, 5
	add eax, dword_59BFB0
	xor ebx, ebx
	mov bl, [eax+3Bh]
	mov [esp+8], ebx
	mov ebx, ebp
	mov edi, [esp+8]
	shl ebx, 4
	test edi, edi
	jz loc_4B0CE4
	mov esi, dword_59BFB0
	mov [esp+4], ebx
	xor edi, edi

loc_4B0C6E:
	xor eax, eax
	mov ebx, [esp+8]
	mov al, [esi+3Bh]
	cmp eax, ebx
	jnz loc_4B0CBB
	cmp byte [esi+0Ch], 1
	jnz loc_4B0CBB
	cmp dword [esi], 0
	jl loc_4B0CBB
	lea eax, [esi+ebp]
	mov edx, [eax+35h]
	sar edx, 18h
	imul edx, ecx
	mov [eax+39h], cl
	mov eax, [esp+4]
	imul edx, dword dword_59BFA4[eax]
	mov ecx, 3F01h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ecx, eax
	mov ebx, eax
	mov edx, ebp
	mov eax, edi
	call sub_48934C
	mov edx, eax

loc_4B0CBB:
	inc edi
	add esi, 60h
	cmp edi, 10h
	jl loc_4B0C6E
	call sub_4A5374
	mov eax, edx
	pop edi
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	ret

loc_4B0CD3:
	call sub_4A5374
	mov eax, 0FFFFFFF8h
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	ret

loc_4B0CE4:
	mov [eax+ebp+39h], cl
	mov eax, [eax+ebp+35h]
	sar eax, 18h
	imul eax, ecx
	mov edx, dword dword_59BFA4[ebx]
	imul edx, eax
	mov ecx, 3F01h
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ebx, eax
	mov edx, ebp
	mov eax, esi
	call sub_48934C
	mov edx, eax
	call sub_4A5374
	mov eax, edx
	pop edi
	add esp, 8
	pop ebp
	pop esi
	pop ecx
	ret
;sub_4B0BE0 endp

sub_4B0D30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	shl eax, 5
	add eax, dword_59BFB0
	mov edx, [eax+0Eh]
	mov bx, [eax+42h]
	sar edx, 10h
	test bx, bx
	jz loc_4B0D75
	mov ecx, [eax+54h]
	test ecx, ecx
	jz loc_4B0D9E
	xor ecx, ecx
	mov ebx, [eax+54h]
	mov cl, [eax+33h]
	movsx ecx, byte [ecx+ebx]

loc_4B0D64:
	mov ebx, [eax+40h]
	sub ecx, 40h
	sar ebx, 10h
	imul ecx, ebx
	sar ecx, 6
	add edx, ecx

loc_4B0D75:
	mov ebx, [eax+5Ch]
	test ebx, ebx
	jz loc_4B0D96
	xor ecx, ecx
	mov cl, [eax+3Fh]
	movsx ecx, byte [ecx+ebx]
	mov ebx, [eax+3Eh]
	sub ecx, 40h
	sar ebx, 10h
	imul ecx, ebx
	sar ecx, 6
	add edx, ecx

loc_4B0D96:
	mov [eax+12h], dx
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B0D9E:
	mov cl, [eax+33h]
	jmp loc_4B0D64
;sub_4B0D30 endp

sub_4B0E94: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	mov edi, [esp+20h]
	mov ecx, [esp+18h]
	mov eax, [esp+1Ch]
	mov ebx, 20h
	xor edx, edx

loc_4B0EAC:
	mov esi, ecx
	dec ebx
	add eax, eax
	shr esi, 1Fh
	add edx, edx
	add eax, esi
	add ecx, ecx
	cmp eax, edi
	jb loc_4B0EC1
	inc edx
	sub eax, edi

loc_4B0EC1:
	test ebx, ebx
	jnz loc_4B0EAC
	mov eax, edx
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret 0Ch
;sub_4B0E94 endp

sub_4B1218: ;SUBROUTINE
	push ebx
	push ecx
	push edi
	sub esp, 8
	mov ebx, esi
	cmp edx, 20h
	jge loc_4B124E
	test edx, edx
	jz loc_4B125C
	mov cl, dl
	mov esi, eax
	shl esi, cl
	mov ecx, 20h
	sub ecx, edx
	sar eax, cl
	mov [esp], esi

loc_4B123B:
	mov [esp+4], eax
	mov esi, esp
	mov edi, ebx
	movsd
	movsd
	mov eax, ebx
	add esp, 8
	pop edi
	pop ecx
	pop ebx
	ret

loc_4B124E:
	xor ecx, ecx
	sub edx, 20h
	mov [esp], ecx
	mov cl, dl
	shl eax, cl
	jmp loc_4B123B

loc_4B125C:
	mov [esp], eax
	sar eax, 1Fh
	mov [esp+4], eax
	mov esi, esp
	mov edi, ebx
	movsd
	movsd
	mov eax, ebx
	add esp, 8
	pop edi
	pop ecx
	pop ebx
	ret
;sub_4B1218 endp

sub_4B12D0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 544h
	mov [esp+4C4h], edx
	mov [esp+4D4h], edx
	xor edx, edx
	mov [esp+4CCh], edx
	test eax, eax
	jz loc_4B2530
	xor ecx, ecx
	mov cl, [eax]
	mov dl, [eax+1]
	shl ecx, 8
	or edx, ecx
	add eax, 2
	mov [esp+534h], edx
	mov esi, edx
	xor edx, edx
	mov [esp+530h], eax
	mov dl, [eax]
	mov eax, [esp+534h]
	xor edi, edi
	shl eax, 8
	mov ecx, [esp+530h]
	or edx, eax
	shl esi, 10h
	mov [esp+534h], edx
	mov edx, [esp+530h]
	xor eax, eax
	add ecx, 2
	mov al, [edx+1]
	mov edx, [esp+534h]
	shr esi, 10h
	shl edx, 8
	mov [esp+4C8h], esi
	or eax, edx
	mov [esp+530h], ecx
	mov [esp+534h], eax
	mov esi, eax
	mov ah, [esp+4C9h]
	shl esi, 10h
	test ah, 1
	jnz loc_4B156B

loc_4B1383:
	mov dl, [esp+4C9h]
	mov ebp, esi
	sub edi, 8
	and dl, 0FEh
	shr ebp, 18h
	shl esi, 8
	mov [esp+4C9h], dl
	test edi, edi
	jl loc_4B15E0

loc_4B13A7:
	mov eax, esi
	sub edi, 10h
	shr eax, 10h
	shl esi, 10h
	mov [esp+4CCh], eax
	test edi, edi
	jl loc_4B163E

loc_4B13C1:
	mov eax, ebp
	mov ecx, [esp+4CCh]
	shl eax, 10h
	or ecx, eax
	mov [esp+4CCh], ecx
	test ebx, ebx
	jnz loc_4B169C

loc_4B13DE:
	lea eax, [esp+100h]
	lea ebx, [esp+200h]
	mov [esp+500h], eax

loc_4B13F3:
	mov eax, esi
	shr eax, 18h
	mov al, [ebx+eax]
	and eax, 0FFh
	sub edi, eax
	test edi, edi
	jl loc_4B14D8

loc_4B140A:
	mov edx, esi
	mov ecx, [esp+500h]
	shr edx, 18h
	add edx, ecx
	mov ah, [edx]
	mov cl, al
	mov edx, [esp+4D4h]
	shl esi, cl
	mov [edx], ah
	mov edx, esi
	mov ebp, [esp+4D4h]
	shr edx, 18h
	inc ebp
	lea eax, [ebx+edx]
	mov [esp+4D4h], ebp
	mov al, [eax]
	and eax, 0FFh
	sub edi, eax
	test edi, edi
	jl loc_4B14D8
	add edx, [esp+500h]
	mov ah, [edx]
	mov cl, al
	shl esi, cl
	mov edx, esi
	inc ebp
	shr edx, 18h
	mov [ebp-1], ah
	lea eax, [ebx+edx]
	mov [esp+4D4h], ebp
	mov al, [eax]
	and eax, 0FFh
	sub edi, eax
	test edi, edi
	jl loc_4B14D8
	add edx, [esp+500h]
	mov ah, [edx]
	mov cl, al
	shl esi, cl
	mov edx, esi
	inc ebp
	shr edx, 18h
	mov [ebp-1], ah
	lea eax, [ebx+edx]
	mov [esp+4D4h], ebp
	mov al, [eax]
	and eax, 0FFh
	sub edi, eax
	test edi, edi
	jl loc_4B14D8
	add edx, [esp+500h]
	mov ah, [edx]
	mov cl, al
	shl esi, cl
	mov [ebp+0], ah
	mov eax, esi
	inc ebp
	shr eax, 18h
	mov [esp+4D4h], ebp
	mov al, [ebx+eax]
	and eax, 0FFh
	sub edi, eax
	test edi, edi
	jge loc_4B140A

loc_4B14D8:
	add edi, 10h
	test edi, edi
	jl loc_4B2025
	mov eax, [esp+500h]
	shr esi, 18h
	mov edx, [esp+4D4h]
	mov al, [esi+eax]
	mov [edx], al
	mov edx, [esp+530h]
	xor eax, eax
	mov al, [edx]
	mov edx, [esp+534h]
	shl edx, 8
	or eax, edx
	mov [esp+534h], eax
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax+1]
	mov eax, [esp+534h]
	mov ecx, 10h
	shl eax, 8
	sub ecx, edi
	or edx, eax
	mov eax, [esp+4D4h]
	mov [esp+534h], edx
	mov edx, [esp+530h]
	inc eax
	mov esi, [esp+534h]
	mov [esp+4D4h], eax
	add edx, 2
	shl esi, cl
	mov [esp+530h], edx
	jmp loc_4B13F3

loc_4B156B:
	mov eax, [esp+534h]
	xor edx, edx
	shl eax, 8
	mov dl, [ecx]
	or edx, eax
	mov [esp+534h], edx
	xor eax, eax
	shl edx, 8
	mov al, [ecx+1]
	or eax, edx
	lea esi, [ecx+2]
	mov [esp+534h], eax
	xor edx, edx
	shl eax, 8
	mov dl, [esi]
	mov [esp+530h], esi
	or edx, eax
	mov edi, esi
	mov [esp+534h], edx
	add edi, 2
	mov eax, [esp+534h]
	xor edx, edx
	shl eax, 8
	mov dl, [esi+1]
	mov [esp+530h], edi
	or edx, eax
	mov edi, 8
	mov esi, edx
	mov [esp+534h], edx
	shl esi, 8
	jmp loc_4B1383

loc_4B15E0:
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esp+534h]
	shl eax, 8
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	xor edx, edx
	mov ecx, edi
	mov dl, [eax+1]
	mov eax, [esp+534h]
	neg ecx
	shl eax, 8
	add edi, 10h
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	mov esi, edx
	add eax, 2
	shl esi, cl
	mov [esp+530h], eax
	jmp loc_4B13A7

loc_4B163E:
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esp+534h]
	shl eax, 8
	or edx, eax
	mov [esp+534h], edx
	mov edx, [esp+530h]
	xor eax, eax
	mov ecx, edi
	mov al, [edx+1]
	mov edx, [esp+534h]
	neg ecx
	shl edx, 8
	add edi, 10h
	or eax, edx
	mov edx, [esp+530h]
	mov [esp+534h], eax
	mov esi, eax
	add edx, 2
	shl esi, cl
	mov [esp+530h], edx
	jmp loc_4B13C1

loc_4B169C:
	mov eax, esi
	sub edi, 8
	shr eax, 18h
	shl esi, 8
	mov [esp+540h], al
	test edi, edi
	jl loc_4B1A9A

loc_4B16B6:
	mov eax, 1
	mov edx, 0Fh
	xor ebp, ebp
	mov ecx, 4
	mov [esp+4E4h], ebp
	mov [esp+4D8h], eax
	mov [esp+518h], edx
	mov [esp+51Ch], ecx

loc_4B16E3:
	add ebp, ebp
	mov ebx, [esp+4E4h]
	mov eax, ebp
	mov edx, [esp+51Ch]
	sub eax, ebx
	mov [esp+edx+480h], eax
	test esi, esi
	jl loc_4B1AF8
	mov eax, esi
	shr eax, 10h
	test eax, eax
	jz loc_4B1BD1
	mov eax, 2

loc_4B1718:
	add esi, esi
	inc eax
	test esi, esi
	jge loc_4B1718
	lea edx, [eax-1]
	sub edi, edx
	add esi, esi
	test edi, edi
	jl loc_4B1B6E

loc_4B172E:
	mov edx, [esp+534h]
	shl edx, 8
	mov [esp+510h], edx
	mov edx, [esp+530h]
	add edx, 2
	mov [esp+528h], edx
	cmp eax, 10h
	jle loc_4B1D1E
	mov ecx, 20h
	lea ebx, [eax-10h]
	mov edx, esi
	sub ecx, ebx
	shr edx, cl
	mov cl, bl
	sub edi, ebx
	shl esi, cl
	test edi, edi
	jl loc_4B1C4E

loc_4B1775:
	mov ebx, esi
	sub edi, 10h
	shr ebx, 10h
	shl esi, 10h
	test edi, edi
	jl loc_4B1CA6

loc_4B1788:
	shl edx, 10h
	mov cl, al
	mov eax, 1
	or edx, ebx

loc_4B1794:
	shl eax, cl
	add edx, eax

loc_4B1798:
	sub edx, 4
	mov eax, [esp+51Ch]
	mov ebx, [esp+4E4h]
	add ebp, edx
	xor ecx, ecx
	add ebx, edx
	mov [esp+eax+400h], edx
	mov [esp+4E4h], ebx
	test edx, edx
	jz loc_4B17D4
	mov cl, [esp+518h]
	mov eax, ebp
	shl eax, cl
	mov ecx, eax
	and ecx, 0FFFFh

loc_4B17D4:
	mov eax, [esp+51Ch]
	mov [esp+eax+440h], ecx
	mov eax, [esp+518h]
	dec eax
	mov ebx, [esp+51Ch]
	mov [esp+518h], eax
	mov eax, [esp+4D8h]
	add ebx, 4
	inc eax
	mov [esp+51Ch], ebx
	mov [esp+4D8h], eax
	test edx, edx
	jz loc_4B16E3
	test ecx, ecx
	jnz loc_4B16E3
	dec eax
	mov edx, 0FFFFFFFFh
	mov [esp+4DCh], eax
	mov [esp+eax*4+440h], edx
	mov edx, 10h
	mov eax, esp

loc_4B183C:
	add eax, 10h
	mov [eax-10h], ecx
	mov [eax-0Ch], ecx
	mov [eax-8], ecx
	mov [eax-4], ecx
	dec edx
	jnz loc_4B183C
	mov al, 0FFh
	mov ebx, [esp+4E4h]
	mov [esp+4E0h], edx
	test ebx, ebx
	jle loc_4B1962

loc_4B1866:
	test esi, esi
	jl loc_4B1D9E
	mov edx, esi
	shr edx, 10h
	test edx, edx
	jz loc_4B1E72
	mov edx, 2

loc_4B1880:
	add esi, esi
	inc edx
	test esi, esi
	jge loc_4B1880
	lea ecx, [edx-1]
	sub edi, ecx
	add esi, esi
	test edi, edi
	jl loc_4B1E14

loc_4B1896:
	mov ecx, [esp+530h]
	mov ebp, [esp+534h]
	add ecx, 2
	shl ebp, 8
	mov [esp+52Ch], ecx
	cmp edx, 10h
	jle loc_4B1F89
	lea ecx, [edx-10h]
	mov [esp+50Ch], ecx
	mov ecx, 20h
	sub ecx, [esp+50Ch]
	mov ebx, esi
	shr ebx, cl
	mov cl, [esp+50Ch]
	shl esi, cl
	sub edi, [esp+50Ch]
	test edi, edi
	jl loc_4B1EEF

loc_4B18EC:
	mov ecx, esi
	sub edi, 10h
	shr ecx, 10h
	shl esi, 10h
	mov [esp+4E8h], ecx
	test edi, edi
	jl loc_4B1F2F

loc_4B1906:
	mov ecx, [esp+4E8h]
	shl ebx, 10h
	or ebx, ecx

loc_4B1912:
	mov cl, dl
	mov edx, 1
	shl edx, cl
	add ebx, edx

loc_4B191D:
	sub ebx, 4
	inc ebx
	xor ecx, ecx

loc_4B1923:
	inc al
	xor edx, edx
	mov dl, al
	cmp cl, [esp+edx]
	jnz loc_4B192F
	dec ebx

loc_4B192F:
	test ebx, ebx
	jnz loc_4B1923
	xor edx, edx
	mov dl, al
	mov byte [esp+edx], 1
	mov edx, [esp+4E0h]
	mov ecx, [esp+4E4h]
	lea ebp, [edx+1]
	mov [esp+edx+300h], al
	mov [esp+4E0h], ebp
	cmp ebp, ecx
	jl loc_4B1866

loc_4B1962:
	mov ecx, 10h
	lea edx, [esp+200h]
	mov ebx, 40404040h

loc_4B1973:
	add edx, 10h
	mov [edx-10h], ebx
	mov [edx-0Ch], ebx
	mov [edx-8], ebx
	mov [edx-4], ebx
	dec ecx
	jnz loc_4B1973
	lea eax, [esp+300h]
	lea ebx, [esp+100h]
	lea edx, [esp+200h]
	mov [esp+4FCh], eax
	mov eax, 1
	mov ecx, [esp+4DCh]
	mov [esp+4ECh], eax
	cmp ecx, eax
	jl loc_4B13DE
	mov eax, 4
	mov ecx, 7
	mov [esp+520h], eax
	mov [esp+524h], ecx

loc_4B19D4:
	mov eax, [esp+520h]
	mov eax, [esp+eax+400h]
	mov ebp, [esp+4ECh]
	mov [esp+4F0h], eax
	cmp ebp, 9
	jge loc_4B13DE
	mov cl, [esp+524h]
	mov ebp, 1
	shl ebp, cl

loc_4B1A07:
	mov eax, [esp+4F0h]
	dec eax
	mov [esp+4F0h], eax
	cmp eax, 0FFFFFFFFh
	jz loc_4B1FE2
	mov ecx, [esp+4FCh]
	xor eax, eax
	mov al, [ecx]
	inc ecx
	mov [esp+4F4h], eax
	mov eax, [esp+4ECh]
	mov [esp+4FCh], ecx
	mov [esp+4F8h], eax
	xor eax, eax
	mov ecx, [esp+4F4h]
	mov al, [esp+540h]
	cmp eax, ecx
	jnz loc_4B1A74
	mov eax, [esp+4ECh]
	mov [esp+4D0h], eax
	mov dword [esp+4F8h], 60h

loc_4B1A74:
	xor eax, eax
	test ebp, ebp
	jle loc_4B1A07

loc_4B1A7A:
	inc ebx
	mov cl, [esp+4F4h]
	inc edx
	mov [ebx-1], cl
	mov cl, [esp+4F8h]
	inc eax
	mov [edx-1], cl
	cmp eax, ebp
	jl loc_4B1A7A
	jmp loc_4B1A07

loc_4B1A9A:
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esp+534h]
	mov ebx, [esp+530h]
	shl eax, 8
	mov ecx, edi
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	xor edx, edx
	neg ecx
	mov dl, [eax+1]
	mov eax, [esp+534h]
	add ebx, 2
	shl eax, 8
	add edi, 10h
	or edx, eax
	mov [esp+530h], ebx
	mov esi, edx
	mov [esp+534h], edx
	shl esi, cl
	jmp loc_4B16B6

loc_4B1AF8:
	mov edx, esi
	sub edi, 3
	shr edx, 1Dh
	shl esi, 3
	test edi, edi
	jge loc_4B1798
	mov eax, [esp+530h]
	xor ecx, ecx
	mov cl, [eax]
	mov eax, [esp+534h]
	shl eax, 8
	or ecx, eax
	mov eax, [esp+530h]
	mov [esp+534h], ecx
	xor ecx, ecx
	mov cl, [eax+1]
	mov eax, [esp+534h]
	shl eax, 8
	or ecx, eax
	mov [esp+534h], ecx
	mov eax, [esp+530h]
	mov esi, [esp+534h]
	mov ecx, edi
	add eax, 2
	neg ecx
	mov [esp+530h], eax
	add edi, 10h
	shl esi, cl
	jmp loc_4B1798

loc_4B1B6E:
	mov edx, [esp+530h]
	xor ecx, ecx
	mov cl, [edx]
	mov edx, [esp+534h]
	shl edx, 8
	or ecx, edx
	mov edx, [esp+530h]
	mov [esp+534h], ecx
	xor ecx, ecx
	mov cl, [edx+1]
	mov edx, [esp+534h]
	mov ebx, [esp+530h]
	shl edx, 8
	add ebx, 2
	or ecx, edx
	mov [esp+530h], ebx
	mov [esp+534h], ecx
	mov ecx, edi
	mov esi, [esp+534h]
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B172E

loc_4B1BD1:
	mov eax, 2

loc_4B1BD6:
	mov edx, esi
	inc eax
	dec edi
	shr edx, 1Fh
	add esi, esi
	test edi, edi
	jl loc_4B1BEC
	test edx, edx
	jz loc_4B1BD6
	jmp loc_4B172E

loc_4B1BEC:
	mov ebx, [esp+530h]
	xor ecx, ecx
	mov cl, [ebx]
	mov ebx, [esp+534h]
	shl ebx, 8
	or ecx, ebx
	mov [esp+534h], ecx
	mov ecx, [esp+530h]
	xor ebx, ebx
	mov bl, [ecx+1]
	mov ecx, [esp+534h]
	shl ecx, 8
	or ebx, ecx
	mov ecx, edi
	mov esi, ebx
	neg ecx
	shl esi, cl
	mov ecx, [esp+530h]
	mov [esp+534h], ebx
	add ecx, 2
	add edi, 10h
	mov [esp+530h], ecx
	test edx, edx
	jz loc_4B1BD6
	jmp loc_4B172E

loc_4B1C4E:
	mov ebx, [esp+530h]
	xor ecx, ecx
	mov cl, [ebx]
	mov ebx, [esp+510h]
	or ebx, ecx
	mov ecx, [esp+530h]
	mov [esp+534h], ebx
	xor ebx, ebx
	mov bl, [ecx+1]
	mov ecx, [esp+534h]
	shl ecx, 8
	or ebx, ecx
	mov ecx, edi
	mov esi, ebx
	neg ecx
	mov [esp+534h], ebx
	shl esi, cl
	mov ecx, [esp+528h]
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B1775

loc_4B1CA6:
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	mov [esp+50Ch], ecx
	mov ecx, [esp+534h]
	mov esi, [esp+50Ch]
	shl ecx, 8
	or esi, ecx
	mov [esp+534h], esi
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi+1]
	mov [esp+50Ch], ecx
	mov ecx, [esp+534h]
	mov esi, [esp+50Ch]
	shl ecx, 8
	or esi, ecx
	mov ecx, edi
	neg ecx
	mov [esp+534h], esi
	shl esi, cl
	mov ecx, [esp+530h]
	add ecx, 2
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B1788

loc_4B1D1E:
	mov ecx, 20h
	mov edx, esi
	sub ecx, eax
	shr edx, cl
	mov cl, al
	sub edi, eax
	shl esi, cl
	test edi, edi
	jl loc_4B1D3F
	mov cl, al
	mov eax, 1
	jmp loc_4B1794

loc_4B1D3F:
	mov ebx, [esp+530h]
	xor ecx, ecx
	mov cl, [ebx]
	mov ebx, [esp+510h]
	or ebx, ecx
	mov ecx, [esp+530h]
	mov [esp+534h], ebx
	xor ebx, ebx
	mov bl, [ecx+1]
	mov ecx, [esp+534h]
	shl ecx, 8
	or ebx, ecx
	mov ecx, edi
	mov esi, ebx
	neg ecx
	mov [esp+534h], ebx
	shl esi, cl
	mov ecx, [esp+528h]
	add edi, 10h
	mov [esp+530h], ecx
	mov cl, al
	mov eax, 1
	jmp loc_4B1794

loc_4B1D9E:
	mov ebx, esi
	sub edi, 3
	shr ebx, 1Dh
	shl esi, 3
	test edi, edi
	jge loc_4B191D
	mov edx, [esp+530h]
	xor ecx, ecx
	mov cl, [edx]
	mov edx, [esp+534h]
	shl edx, 8
	or ecx, edx
	mov edx, [esp+530h]
	mov [esp+534h], ecx
	xor ecx, ecx
	mov cl, [edx+1]
	mov edx, [esp+534h]
	mov ebp, [esp+530h]
	shl edx, 8
	add ebp, 2
	or ecx, edx
	mov [esp+530h], ebp
	mov [esp+534h], ecx
	mov ecx, edi
	mov esi, [esp+534h]
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B191D

loc_4B1E14:
	mov ebx, [esp+530h]
	xor ecx, ecx
	mov cl, [ebx]
	mov ebx, [esp+534h]
	shl ebx, 8
	or ecx, ebx
	mov [esp+534h], ecx
	mov ecx, [esp+530h]
	xor ebx, ebx
	mov bl, [ecx+1]
	mov ecx, [esp+534h]
	mov ebp, [esp+530h]
	shl ecx, 8
	add ebp, 2
	or ebx, ecx
	mov [esp+530h], ebp
	mov [esp+534h], ebx
	mov ecx, edi
	mov esi, ebx
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B1896

loc_4B1E72:
	mov edx, 2

loc_4B1E77:
	mov ebp, esi
	inc edx
	dec edi
	shr ebp, 1Fh
	add esi, esi
	test edi, edi
	jl loc_4B1E8D
	test ebp, ebp
	jz loc_4B1E77
	jmp loc_4B1896

loc_4B1E8D:
	mov ecx, [esp+530h]
	xor ebx, ebx
	mov bl, [ecx]
	mov ecx, [esp+534h]
	shl ecx, 8
	or ebx, ecx
	mov ecx, [esp+530h]
	mov [esp+534h], ebx
	xor ebx, ebx
	mov bl, [ecx+1]
	mov ecx, [esp+534h]
	shl ecx, 8
	or ebx, ecx
	mov [esp+534h], ebx
	mov ecx, edi
	mov esi, ebx
	mov ebx, [esp+530h]
	neg ecx
	add edi, 10h
	add ebx, 2
	shl esi, cl
	mov [esp+530h], ebx
	test ebp, ebp
	jz loc_4B1E77
	jmp loc_4B1896

loc_4B1EEF:
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	or ecx, ebp
	movzx esi, byte [esi+1]
	mov [esp+534h], ecx
	shl ecx, 8
	or esi, ecx
	mov ecx, edi
	neg ecx
	mov [esp+534h], esi
	shl esi, cl
	mov ecx, [esp+52Ch]
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B18EC

loc_4B1F2F:
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi]
	or esi, ecx
	mov ebp, [esp+530h]
	mov [esp+534h], esi
	add ebp, 2
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi+1]
	mov [esp+530h], ebp
	or esi, ecx
	mov ecx, edi
	mov [esp+534h], esi
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B1906

loc_4B1F89:
	mov ecx, 20h
	mov ebx, esi
	sub ecx, edx
	shr ebx, cl
	mov cl, dl
	sub edi, edx
	shl esi, cl
	test edi, edi
	jge loc_4B1912
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	or ecx, ebp
	movzx esi, byte [esi+1]
	mov [esp+534h], ecx
	shl ecx, 8
	or esi, ecx
	mov ecx, edi
	neg ecx
	mov [esp+534h], esi
	shl esi, cl
	mov ecx, [esp+52Ch]
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B1912

loc_4B1FE2:
	mov ebp, [esp+520h]
	mov eax, [esp+524h]
	mov ecx, [esp+4ECh]
	add ebp, 4
	dec eax
	inc ecx
	mov [esp+520h], ebp
	mov [esp+524h], eax
	mov ebp, [esp+4DCh]
	mov [esp+4ECh], ecx
	cmp ecx, ebp
	jle loc_4B19D4
	jmp loc_4B13DE

loc_4B2025:
	sub edi, 10h
	add edi, eax
	cmp eax, 60h
	jz loc_4B2097
	mov eax, 8
	mov edx, esi
	mov ecx, 20h
	shr edx, 10h

loc_4B203E:
	mov ebp, [esp+ecx+444h]
	add ecx, 4
	inc eax
	cmp edx, ebp
	jnb loc_4B203E

loc_4B204D:
	mov ecx, 20h
	mov edx, esi
	sub ecx, eax
	shr edx, cl
	mov cl, al
	sub edi, eax
	shl esi, cl
	mov ecx, [esp+eax*4+480h]
	mov eax, edx
	sub eax, ecx
	mov dl, [esp+540h]
	mov al, [esp+eax+300h]
	cmp al, dl
	jz loc_4B20A0
	test edi, edi
	jl loc_4B20A0
	mov edx, [esp+4D4h]
	mov [edx], al
	lea eax, [edx+1]
	mov [esp+4D4h], eax
	jmp loc_4B13F3

loc_4B2097:
	mov eax, [esp+4D0h]
	jmp loc_4B204D

loc_4B20A0:
	test edi, edi
	jl loc_4B20C5

loc_4B20A4:
	cmp al, [esp+540h]
	jz loc_4B2128
	mov edx, [esp+4D4h]
	lea ebp, [edx+1]
	mov [edx], al
	mov [esp+4D4h], ebp
	jmp loc_4B13F3

loc_4B20C5:
	mov edx, [esp+530h]
	xor ecx, ecx
	mov cl, [edx]
	mov edx, [esp+534h]
	shl edx, 8
	or ecx, edx
	mov edx, [esp+530h]
	mov [esp+534h], ecx
	xor ecx, ecx
	mov cl, [edx+1]
	mov edx, [esp+534h]
	mov ebp, [esp+530h]
	shl edx, 8
	add ebp, 2
	or ecx, edx
	mov [esp+530h], ebp
	mov [esp+534h], ecx
	mov ecx, edi
	mov esi, [esp+534h]
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B20A4

loc_4B2128:
	mov edx, [esp+4D4h]
	test esi, esi
	jl loc_4B222E
	mov eax, esi
	shr eax, 10h
	test eax, eax
	jz loc_4B230D
	mov eax, 2

loc_4B2149:
	add esi, esi
	inc eax
	test esi, esi
	jge loc_4B2149
	lea ecx, [eax-1]
	sub edi, ecx
	add esi, esi
	test edi, edi
	jl loc_4B22B9

loc_4B215F:
	mov ecx, [esp+534h]
	shl ecx, 8
	mov [esp+514h], ecx
	mov ecx, [esp+530h]
	add ecx, 2
	mov [esp+4C0h], ecx
	cmp eax, 10h
	jle loc_4B2450
	lea ecx, [eax-10h]
	mov [esp+50Ch], ecx
	mov ecx, 20h
	sub ecx, [esp+50Ch]
	mov ebp, esi
	shr ebp, cl
	mov cl, [esp+50Ch]
	shl esi, cl
	sub edi, [esp+50Ch]
	mov [esp+504h], ebp
	test edi, edi
	jl loc_4B2399

loc_4B21C3:
	mov ecx, esi
	sub edi, 10h
	shr ecx, 10h
	shl esi, 10h
	mov [esp+508h], ecx
	test edi, edi
	jl loc_4B23EE

loc_4B21DD:
	mov ecx, [esp+504h]
	mov ebp, [esp+508h]
	shl ecx, 10h
	or ebp, ecx
	mov cl, al
	mov eax, 1
	shl eax, cl
	add eax, ebp

loc_4B21FB:
	sub eax, 4
	mov [esp+504h], eax

loc_4B2205:
	mov ebp, [esp+504h]
	test ebp, ebp
	jz loc_4B24DB
	mov cl, [edx-1]
	lea eax, [edx+ebp]

loc_4B221A:
	inc edx
	mov [edx-1], cl
	cmp edx, eax
	jb loc_4B221A
	mov [esp+4D4h], edx
	jmp loc_4B13F3

loc_4B222E:
	mov eax, esi
	sub edi, 3
	shr eax, 1Dh
	shl esi, 3
	mov [esp+504h], eax
	test edi, edi
	jl loc_4B224E
	sub dword [esp+504h], 4
	jmp loc_4B2205

loc_4B224E:
	mov ecx, [esp+530h]
	xor eax, eax
	mov al, [ecx]
	mov ecx, [esp+534h]
	shl ecx, 8
	or eax, ecx
	mov [esp+534h], eax
	mov eax, [esp+530h]
	xor ecx, ecx
	mov cl, [eax+1]
	mov eax, [esp+534h]
	shl eax, 8
	or ecx, eax
	mov [esp+534h], ecx
	mov eax, [esp+530h]
	mov esi, [esp+534h]
	mov ecx, edi
	add eax, 2
	neg ecx
	mov [esp+530h], eax
	add edi, 10h
	shl esi, cl
	sub dword [esp+504h], 4
	jmp loc_4B2205

loc_4B22B9:
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	mov esi, [esp+534h]
	mov ebp, [esp+530h]
	shl esi, 8
	add ebp, 2
	or ecx, esi
	mov esi, [esp+530h]
	mov [esp+534h], ecx
	shl ecx, 8
	movzx esi, byte [esi+1]
	mov [esp+530h], ebp
	or esi, ecx
	mov ecx, edi
	mov [esp+534h], esi
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B215F

loc_4B230D:
	mov eax, 2
	xor ebp, ebp

loc_4B2314:
	mov ecx, esi
	inc eax
	dec edi
	shr ecx, 1Fh
	add esi, esi
	mov [esp+538h], ecx
	test edi, edi
	jl loc_4B2336
	cmp ebp, [esp+538h]
	jz loc_4B2314
	jmp loc_4B215F

loc_4B2336:
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi]
	or esi, ecx
	mov [esp+534h], esi
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi+1]
	or esi, ecx
	mov ecx, edi
	neg ecx
	mov [esp+534h], esi
	shl esi, cl
	mov ecx, [esp+530h]
	add ecx, 2
	add edi, 10h
	mov [esp+530h], ecx
	cmp ebp, [esp+538h]
	jz loc_4B2314
	jmp loc_4B215F

loc_4B2399:
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	mov esi, [esp+514h]
	or esi, ecx
	mov [esp+534h], esi
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi+1]
	or esi, ecx
	mov ecx, edi
	neg ecx
	mov [esp+534h], esi
	shl esi, cl
	mov ecx, [esp+4C0h]
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B21C3

loc_4B23EE:
	mov ecx, [esp+534h]
	mov esi, [esp+530h]
	shl ecx, 8
	movzx esi, byte [esi]
	or esi, ecx
	mov [esp+534h], esi
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi+1]
	mov esi, [esp+534h]
	mov ebp, [esp+530h]
	shl esi, 8
	add ebp, 2
	or ecx, esi
	mov [esp+530h], ebp
	mov [esp+534h], ecx
	mov ecx, edi
	mov esi, [esp+534h]
	neg ecx
	add edi, 10h
	shl esi, cl
	jmp loc_4B21DD

loc_4B2450:
	mov ecx, 20h
	mov ebp, esi
	sub ecx, eax
	sub edi, eax
	shr ebp, cl
	mov cl, al
	mov [esp+504h], ebp
	shl esi, cl
	test edi, edi
	jl loc_4B2481

loc_4B246C:
	mov cl, al
	mov eax, 1
	shl eax, cl
	add eax, [esp+504h]
	jmp loc_4B21FB

loc_4B2481:
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi]
	mov esi, [esp+514h]
	or esi, ecx
	mov [esp+534h], esi
	mov esi, [esp+530h]
	xor ecx, ecx
	mov cl, [esi+1]
	mov esi, [esp+534h]
	shl esi, 8
	or ecx, esi
	mov [esp+534h], ecx
	mov ecx, edi
	mov esi, [esp+534h]
	neg ecx
	shl esi, cl
	mov ecx, [esp+4C0h]
	add edi, 10h
	mov [esp+530h], ecx
	jmp loc_4B246C

loc_4B24DB:
	mov ebp, esi
	dec edi
	shr ebp, 1Fh
	add esi, esi
	test edi, edi
	jl loc_4B2542

loc_4B24E7:
	test ebp, ebp
	jz loc_4B25A0
	mov edi, [esp+4C4h]
	mov ebx, [esp+4CCh]
	mov esi, [esp+4C8h]
	add edi, ebx
	cmp esi, 32FBh
	jnz loc_4B2630
	mov eax, [esp+4C4h]
	mov ebx, edi
	xor ecx, ecx
	cmp edi, eax
	jbe loc_4B2530

loc_4B2521:
	xor edx, edx
	mov dl, [eax]
	inc eax
	add ecx, edx
	mov [eax-1], cl
	cmp eax, ebx
	jb loc_4B2521
	nop

loc_4B2530:
	mov eax, [esp+4CCh]
	add esp, 544h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4B2542:
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esp+534h]
	shl eax, 8
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	xor edx, edx
	mov ecx, edi
	mov dl, [eax+1]
	mov eax, [esp+534h]
	neg ecx
	shl eax, 8
	add edi, 10h
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	mov esi, edx
	add eax, 2
	shl esi, cl
	mov [esp+530h], eax
	jmp loc_4B24E7

loc_4B25A0:
	mov eax, esi
	sub edi, 8
	shr eax, 18h
	shl esi, 8
	mov [esp+53Ch], al
	test edi, edi
	jl loc_4B25D5

loc_4B25B6:
	mov edx, [esp+4D4h]
	mov al, [esp+53Ch]
	lea ecx, [edx+1]
	mov [edx], al
	mov [esp+4D4h], ecx
	jmp loc_4B13F3

loc_4B25D5:
	mov eax, [esp+530h]
	xor edx, edx
	mov dl, [eax]
	mov eax, [esp+534h]
	shl eax, 8
	or edx, eax
	mov eax, [esp+530h]
	mov [esp+534h], edx
	xor edx, edx
	mov dl, [eax+1]
	mov eax, [esp+534h]
	shl eax, 8
	mov ecx, edi
	or edx, eax
	neg ecx
	mov [esp+534h], edx
	mov esi, edx
	mov edx, [esp+530h]
	add edi, 10h
	add edx, 2
	shl esi, cl
	mov [esp+530h], edx
	jmp loc_4B25B6

loc_4B2630:
	cmp esi, 34FBh
	jnz loc_4B2530
	mov eax, [esp+4C4h]
	mov esi, edi
	xor ecx, ecx
	xor edx, edx
	cmp edi, eax
	jbe loc_4B2530

loc_4B2651:
	xor ebx, ebx
	mov bl, [eax]
	add ecx, ebx
	inc eax
	add edx, ecx
	mov [eax-1], dl
	cmp eax, esi
	jb loc_4B2651
	mov eax, [esp+4CCh]
	add esp, 544h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4B12D0 endp

off_4B2680: dd loc_4B271D
	dd loc_4B277F ; jump table for switch statement
	dd loc_4B278B
	dd loc_4B27B2

sub_4B2690: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov ebp, eax
	xor ah, ah
	mov ecx, 2
	mov [esp+10h], ah
	mov eax, ebp
	mov [esp+0Ch], edx
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	mov edx, eax
	lea eax, [ebp+2]
	cmp edx, 4B31h
	jz loc_4B2763
	mov ecx, 3
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	add ebp, 5

loc_4B26E2:
	mov [esp+8], eax
	mov [esp], ebp
	mov eax, [esp+8]
	mov [esp+4], eax
	test eax, eax
	jle loc_4B2756

loc_4B26F5:
	mov eax, [esp]
	mov al, [eax]
	mov ah, al
	and ah, 3Fh
	movzx ebp, ah
	mov ebx, [esp]
	and eax, 0FFh
	inc ebx
	sar eax, 6
	mov [esp], ebx
	cmp eax, 3 ; switch 4 cases
	ja loc_4B274F ; jumptable 004B2716 default case
	jmp off_4B2680[eax*4] ; switch jump

loc_4B271D:
	mov edi, [esp+0Ch] ; jumptable 004B2716 case 0
	mov ecx, ebp
	mov esi, ebx
	mov edx, [esp+8]
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov eax, [esp+0Ch]
	lea edi, [ebx+ebp]
	sub edx, ebp
	mov [esp], edi
	add eax, ebp
	mov [esp+8], edx
	mov [esp+0Ch], eax

loc_4B274F:
	cmp dword [esp+8], 0 ; jumptable 004B2716 default case
	jg loc_4B26F5

loc_4B2756:
	mov eax, [esp+4]
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4B2763:
	mov ecx, 2
	mov eax, [eax]
	bswap eax
	neg ecx
	lea ecx, 20h[ecx*8]
	shr eax, cl
	add ebp, 4
	jmp loc_4B26E2

loc_4B277F:
	mov al, [ebx] ; jumptable 004B2716 case 1
	lea ecx, [ebx+1]
	mov [esp+10h], al
	mov [esp], ecx

loc_4B278B:
	mov eax, [esp+0Ch] ; jumptable 004B2716 case 2
	xor edx, edx
	mov ebx, ebp
	mov dl, [esp+10h]
	mov esi, [esp+8]
	call memset_
	mov ebx, [esp+0Ch]
	sub esi, ebp
	add ebx, ebp
	mov [esp+8], esi
	mov [esp+0Ch], ebx
	jmp loc_4B274F ; jumptable 004B2716 default case

loc_4B27B2:
	mov edx, [esp+0Ch] ; jumptable 004B2716 case 3
	lea esi, [ebx+1]
	mov ah, [ebx]
	mov [esp], esi
	lea edi, [edx+1]
	mov [edx], ah
	mov edx, [esp+8]
	and ah, 0F0h
	mov [esp+0Ch], edi
	sub edx, ebp
	dec ebp
	mov [esp+8], edx
	test ebp, ebp
	jle loc_4B274F ; jumptable 004B2716 default case

loc_4B27DD:
	mov edx, [esp]
	mov al, [edx]
	xor edx, edx
	xor ecx, ecx
	mov dl, al
	mov cl, ah
	sar edx, 4
	or edx, ecx
	mov ecx, [esp+0Ch]
	mov ebx, [esp+0Ch]
	dec ebp
	mov [ecx], dl
	mov ecx, [esp]
	inc ebx
	inc ecx
	mov [esp+0Ch], ebx
	mov [esp], ecx
	test ebp, ebp
	jle loc_4B2818
	and al, 0Fh
	lea esi, [ebx+1]
	dec ebp
	or al, ah
	mov [esp+0Ch], esi
	mov [ebx], al

loc_4B2818:
	test ebp, ebp
	jg loc_4B27DD
	jmp loc_4B274F ; jumptable 004B2716 default case
;sub_4B2690 endp

sub_4B2824: ;SUBROUTINE
	push ebp
	mov ebp, esp
	sub esp, 4
	push ecx
	push esi
	push edi
	mov ecx, ebx
	mov ebx, eax
	mov edi, edx
	mov dword [ebp-4], 0
	or ebx, ebx
	jz loc_4B291A
	mov ax, [ebx]
	lea ebx, [ebx+2]
	and al, 1
	jz loc_4B284F
	lea ebx, [ebx+3]

loc_4B284F:
	xor eax, eax
	mov al, [ebx]
	shl eax, 10h
	mov ah, [ebx+1]
	mov al, [ebx+2]
	lea ebx, [ebx+3]
	mov [ebp-4], eax
	cmp ecx, 0
	jz loc_4B291A
	xor ecx, ecx
	jmp loc_4B28B5

loc_4B2870:
	lea esi, [ebx+2]
	rep movsb
	mov ebx, esi
	mov ch, dl
	mov cl, dh
	and edx, 1Ch
	shr ch, 5
	shr edx, 2
	neg ecx
	lea esi, [edi+ecx-1]
	lea ecx, [edx+3]
	rep movsb
	or cl, [ebx]
	mov edx, [ebx]
	js loc_4B28BB

loc_4B2895:
	and ecx, 3
	jnz loc_4B2870
	lea ebx, [ebx+2]
	mov ch, dl
	mov cl, dh
	and edx, 1Ch
	shr ch, 5
	shr edx, 2
	neg ecx
	lea esi, [edi+ecx-1]
	lea ecx, [edx+3]
	rep movsb

loc_4B28B5:
	or cl, [ebx]
	mov edx, [ebx]
	jns loc_4B2895

loc_4B28BB:
	add cl, cl
	js loc_4B28F0
	mov cl, dh
	lea esi, [ebx+3]
	shr ecx, 6
	and ecx, 3
	rep movsb
	mov ebx, esi
	mov ecx, edx
	shr ecx, 10h
	mov ch, dh
	and ch, 3Fh
	neg ecx
	lea esi, [edi+ecx-1]
	and edx, 3Fh
	lea ecx, [edx+4]
	rep movsb
	or cl, [ebx]
	mov edx, [ebx]
	jns loc_4B2895
	jmp loc_4B28BB

loc_4B28F0:
	add cl, cl
	jns loc_4B2924
	cmp dl, 0FCh
	jnb loc_4B2910
	and edx, 1Fh
	lea esi, [ebx+1]
	lea ecx, [edx+1]
	rep movsd
	mov ebx, esi
	or cl, [esi]
	mov edx, [esi]
	jns loc_4B2895
	jmp loc_4B28BB

loc_4B2910:
	mov ecx, edx
	lea esi, [ebx+1]
	and ecx, 3
	rep movsb

loc_4B291A:
	mov eax, [ebp-4]
	pop edi
	pop esi
	pop ecx
	mov esp, ebp
	pop ebp
	ret

loc_4B2924:
	mov ecx, edx
	lea esi, [ebx+4]
	and ecx, 3
	rep movsb
	mov ebx, esi
	mov ecx, edx
	mov eax, edx
	and ecx, 10h
	shr eax, 8
	shl ecx, 0Ch
	mov cl, ah
	mov ch, al
	neg ecx
	lea esi, [edi+ecx-1]
	rol edx, 8
	shr dh, 2
	and edx, 3FFh
	cmp ecx, 0FFFFFFFCh
	jge loc_4B297C
	lea ecx, [edx+5]
	lea edx, [edx+5]
	shr ecx, 2
	and edx, 3
	rep movsd
	mov ecx, edx
	rep movsb
	or cl, [ebx]
	mov edx, [ebx]
	jns loc_4B2895
	jmp loc_4B28BB

loc_4B297C:
	lea ecx, [edx+5]
	rep movsb
	or cl, [ebx]
	mov edx, [ebx]
	jns loc_4B2895
	jmp loc_4B28BB
;sub_4B2824 endp

sub_4B2990: ;SUBROUTINE
	push ecx
	push edx

loc_4B2992:
	xor edx, edx
	mov ecx, dword [dword_5B9450]
	mov dl, al
	cmp byte [ecx+edx], 0
	jnz loc_4B29B5
	mov edx, dword [dword_5B9440]
	inc edx
	mov [edx-1], al
	mov dword [dword_5B9440], edx
	pop edx
	pop ecx
	ret

loc_4B29B5:
	mov eax, dword [dword_5B9444]
	mov al, [edx+eax]
	and eax, 0FFh
	call sub_4B2990
	mov eax, dword [dword_5B944C]
	mov al, [edx+eax]
	and eax, 0FFh
	jmp loc_4B2992
;sub_4B2990 endp

sub_4B29D8: ;SUBROUTINE
	push ecx
	push esi
	push ebp
	sub esp, 304h
	mov dword [dword_5B9440], edx
	xor edx, edx
	mov [esp+300h], edx
	lea edx, [esp+200h]
	mov dword [dword_5B9450], edx
	mov edx, esp
	mov dword [dword_5B9444], edx
	lea edx, [esp+100h]
	mov ecx, eax
	mov dword [dword_5B944C], edx
	test eax, eax
	jz loc_4B2B61
	xor edx, edx
	lea ecx, [eax+1]
	mov dl, [eax]
	xor eax, eax
	shl edx, 8
	mov al, [ecx]
	add edx, eax
	inc ecx
	cmp edx, 47FBh
	jz loc_4B2B09

loc_4B2A39:
	xor eax, eax
	xor edx, edx
	mov al, [ecx]
	mov dl, [ecx+1]
	mov [esp+300h], eax
	shl eax, 8
	add eax, edx
	mov [esp+300h], eax
	inc ecx
	mov edx, [esp+300h]
	xor eax, eax
	shl edx, 8
	mov al, [ecx+1]
	inc ecx
	add edx, eax
	inc ecx
	mov [esp+300h], edx
	xor edx, edx

loc_4B2A72:
	mov eax, dword [dword_5B9450]
	lea esi, [eax+edx]
	inc edx
	mov byte [esi], 0
	cmp edx, 100h
	jl loc_4B2A72
	push edi
	push ebx
	inc ecx
	xor edx, edx
	mov dl, [ecx-1]
	inc ecx
	mov byte [edx+eax], 1
	movzx ebp, byte [ecx-1]
	xor eax, eax
	test ebp, ebp
	jle loc_4B2AD4

loc_4B2A9D:
	xor edx, edx
	mov ebx, dword [dword_5B9444]
	mov dl, [ecx]
	lea esi, [ecx+1]
	lea edi, [ebx+edx]
	lea ecx, [esi+1]
	mov bl, [esi]
	mov esi, ecx
	mov [edi], bl
	mov edi, dword [dword_5B944C]
	mov bl, [esi]
	mov [edx+edi], bl
	mov ebx, dword [dword_5B9450]
	inc eax
	inc ecx
	mov byte [edx+ebx], 0FFh
	cmp eax, ebp
	jl loc_4B2A9D

loc_4B2AD4:
	mov dword [dword_5B9448], ecx
	pop ebx
	pop edi

loc_4B2ADC:
	mov ecx, dword [dword_5B9448]
	xor edx, edx
	mov eax, dword [dword_5B9450]
	mov dl, [ecx]
	mov al, [edx+eax]
	inc ecx
	test al, al
	jnz loc_4B2B11
	mov eax, dword [dword_5B9440]
	inc eax
	mov dword [dword_5B9448], ecx
	mov [eax-1], dl
	mov dword [dword_5B9440], eax
	jmp loc_4B2ADC

loc_4B2B09:
	add ecx, 3
	jmp loc_4B2A39

loc_4B2B11:
	mov dword [dword_5B9448], ecx
	jl loc_4B2B38
	xor edx, edx
	mov dl, [ecx]
	inc ecx
	test edx, edx
	jz loc_4B2B61
	mov eax, dword [dword_5B9440]
	inc eax
	mov dword [dword_5B9448], ecx
	mov [eax-1], dl
	mov dword [dword_5B9440], eax
	jmp loc_4B2ADC

loc_4B2B38:
	mov eax, dword [dword_5B9444]
	mov al, [edx+eax]
	and eax, 0FFh
	call sub_4B2990
	mov eax, dword [dword_5B944C]
	mov al, [edx+eax]
	and eax, 0FFh
	call sub_4B2990
	jmp loc_4B2ADC

loc_4B2B61:
	mov eax, [esp+300h]
	mov dword [dword_5B9448], ecx
	add esp, 304h
	pop ebp
	pop esi
	pop ecx
	ret
;sub_4B29D8 endp

;	Attributes: library function

stackavail_: ;SUBROUTINE
	push edx
	call dword [off_4DED58]
	mov edx, eax
	mov eax, esp
	sub eax, [edx]
	pop edx
	ret
;stackavail_ endp

sub_4B2D3C: ;SUBROUTINE
	push eax
	push ebx
	mov eax, [esp+0Ch]
	mov ebx, 0FFFFFFFCh

loc_4B2D47:
	mov [esp+ebx], ebx
	sub ebx, 1000h
	sub eax, 1000h
	jg loc_4B2D47
	pop ebx
	pop eax
	ret 4
;sub_4B2D3C endp

start: ;SUBROUTINE
%ifdef SWAP_WINDOW_AND_GL_THREAD
	push doStart
	call WrapperStartInThread

theLoop:
	cmp byte [canRunWindowThread], 0
	jnz runWindowThread
	push 1 ; ms
	call SDL_Delay_wrap
	add esp, 4
	jmp theLoop

runWindowThread:
	call sub_481080 ;Call the window thread function, but do it in main thread
	mov byte [canRunWindowThread], 0
	jmp theLoop
%else
	;Jump to the "doStart" function
	jmp doStart
%endif
;start endp

doStart: ;SUBROUTINE
	call WrapperInit
	sub esp, 8
	mov eax, dword [dword_4E0950]
	add eax, 3
	and al, 0FCh
	xor edx, edx
	sub esp, eax
	mov ecx, esp
	mov ebx, dword [dword_4E0950]
	mov eax, ecx
	call memset_
	mov eax, dword [dword_4E0950]
	mov [ecx+0F0h], eax
	mov dword [lpTlsValue], ecx
	jmp sub_4BB81E
;doStart endp

sub_4B2FD0: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp byte [byte_4DDA74], 0
	jnz loc_4B2FE3
	mov eax, 0FFFFFFF6h
	pop edx
	ret

loc_4B2FE3:
	call sub_4A5360
	mov eax, edx
	call sub_4A576C
	mov edx, eax
	test eax, eax
	jl loc_4B300F
	call sub_4A5374
	mov eax, edx
	shl eax, 2
	sub eax, edx
	shl eax, 5
	mov eax, dword dword_59BFDE[eax]
	sar eax, 18h
	pop edx
	ret

loc_4B300F:
	call sub_4A5374
	mov eax, 0FFFFFFF8h
	pop edx
	ret
;sub_4B2FD0 endp

sub_4B3E80: ;SUBROUTINE
	push edx
	mov edx, eax
	cmp eax, 10000h
	jg loc_4B3EA5
	test eax, eax
	jl loc_4B3EAC

loc_4B3E8E:
	call sub_488074
	and eax, 7FFFh
	sub eax, 4000h
	imul eax, edx
	sar eax, 0Eh
	pop edx
	ret

loc_4B3EA5:
	mov edx, 10000h
	jmp loc_4B3E8E

loc_4B3EAC:
	xor edx, eax
	jmp loc_4B3E8E
;sub_4B3E80 endp

sub_4B3EE0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 18h
	mov edi, eax
	mov esi, edx
	mov ecx, ebx
	cmp eax, dword [dword_4DB24C]
	jl loc_4B3F3E
	cmp eax, dword [dword_4DB254]
	jge loc_4B3F3E
	cmp esi, dword [dword_4DB250]
	jl loc_4B3F3E
	cmp esi, dword [dword_4DB258]
	jge loc_4B3F3E
	cmp byte [byte_4DB25C], 10h
	jnz loc_4B3F1F
	cmp byte [byte_4DB25E], 0
	jz loc_4B3F46

loc_4B3F1F:
	mov ebx, ecx
	shr ebx, 18h
	and ebx, 0FFh
	cmp ebx, 0FFh
	jz loc_4B3FE4
	test ebx, ebx
	jnz loc_4B3FFE

loc_4B3F3E:
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4B3F46:
	mov ebx, esi
	mov eax, edi
	mov edx, dword [dword_4DB270]
	mov eax, [edx+eax*4]
	mov edx, dword [dword_4DB26C]
	add eax, [edx+ebx*4]
	add eax, dword [dword_4DB260]
	mov ebx, ecx
	mov esi, eax
	cmp ebx, 10000000h
	jb loc_4B3FD9
	cmp ebx, 0FC000000h
	jnb loc_4B3FB6
	mov ax, [esi]
	mov ecx, ebx
	mov edx, eax
	xor ecx, 0FFFFFFFFh
	shl eax, 10h
	mov al, dl
	and edx, 7E0h
	shl edx, 8
	and eax, 0F800001Fh
	shr ecx, 18h
	add eax, edx
	mul ecx
	shl edx, 10h
	mov ecx, eax
	shr ecx, 5
	add ebx, edx
	shr eax, 0Bh
	and ecx, 0FFh
	and eax, 0FF00h
	add ebx, ecx
	add ebx, eax

loc_4B3FB6:
	mov eax, ebx
	and ebx, 0F80000h
	shr ebx, 8
	mov edx, eax
	shr eax, 3
	and edx, 0FC00h
	shr edx, 5
	and eax, 1Fh
	add ebx, eax
	add ebx, edx
	mov [esi], bx

loc_4B3FD9:
	lea esi, [esi+2]
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4B3FE4:
	mov eax, ecx
	call sub_48266C
	mov edx, esi
	mov ebx, eax
	mov eax, edi
	call sub_4AD870
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4B3FFE:
	mov eax, ecx
	shr eax, 10h
	and eax, 0FFh
	mov [esp], eax
	mov eax, ecx
	shr eax, 8
	and ecx, 0FFh
	and eax, 0FFh
	mov [esp+4], ecx
	mov [esp+8], eax
	mov ecx, ebx
	mov eax, 10000h
	shl ecx, 8
	sub eax, ecx
	mov edx, esi
	mov ecx, eax
	mov eax, edi
	call sub_4A68D0
	call sub_49B2E0
	mov edx, eax
	sar edx, 18h
	and edx, 0FFh
	mov [esp+14h], edx
	mov edx, eax
	mov ebp, eax
	sar edx, 8
	and eax, 0FFh
	and edx, 0FFh
	mov [esp+0Ch], eax
	mov [esp+10h], edx
	mov edx, 0FFh
	mov eax, 0FFh
	sub edx, ebx
	sub eax, [esp+14h]
	imul edx, eax
	mov ebx, 0FFh
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, ebx
	sar ebp, 10h
	sub edx, eax
	and ebp, 0FFh
	mov [esp+14h], edx
	mov eax, ebp
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, [esp]
	cmp eax, ebx
	jle loc_4B4128
	mov eax, ebx

loc_4B40B3:
	mov ebx, eax
	mov edx, ecx
	mov eax, [esp+10h]
	mov ebp, [esp+8]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebp
	cmp eax, 0FFh
	jle loc_4B4140
	mov eax, 0FFh

loc_4B40D7:
	mov ebp, eax
	mov edx, ecx
	mov eax, [esp+0Ch]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, [esp+4]
	cmp eax, 0FFh
	jle loc_4B4154
	mov eax, 0FFh

loc_4B40F9:
	mov edx, [esp+14h]
	mov ecx, ebx
	shl edx, 18h
	shl ecx, 10h
	or edx, ecx
	mov ecx, ebp
	shl ecx, 8
	or edx, ecx
	or eax, edx
	call sub_48266C
	mov ebx, eax
	mov edx, esi
	mov eax, edi
	call sub_4AD870
	add esp, 18h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4B4128:
	mov edx, ecx
	mov eax, ebp
	mov ebx, [esp]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebx
	jmp loc_4B40B3

loc_4B4140:
	mov eax, [esp+10h]
	mov edx, ecx
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ebp
	jmp loc_4B40D7

loc_4B4154:
	mov eax, [esp+0Ch]
	mov edx, ecx
	mov ecx, [esp+4]
	imul edx
	shl edx, 10h
	shr eax, 10h
	adc eax, edx
	add eax, ecx
	jmp loc_4B40F9
;sub_4B3EE0 endp

sub_4B416C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	cmp dword [esp+24h], 0
	jle loc_4B4276
	xor ebx, ebx
	xor edx, edx
	mov ebp, [esp+14h]
	mov esi, [esp+18h]
	mov edi, [esp+1Ch]
	mov ecx, [esp+20h]
	cmp ecx, 1
	jl loc_4B4276
	shr ecx, 1
	mov [esp+20h], ecx
	jb loc_4B41F9

loc_4B41A0:
	mov ecx, [esp+20h]

loc_4B41A4:
	mov bh, [esi+1]
	mov dh, [esi+1]
	mov bl, [edi+2]
	mov dl, [edi+3]
	shr bh, 4
	and dh, 0Fh
	mov al, [ebp+ebx+0]
	mov ah, [ebp+edx+0]
	shl eax, 10h
	mov bh, [esi]
	mov dh, [esi]
	mov bl, [edi]
	mov dl, [edi+1]
	shr bh, 4
	and dh, 0Fh
	mov al, [ebp+ebx+0]
	mov ah, [ebp+edx+0]
	sub ecx, 1
	mov [edi], eax
	lea esi, [esi+2]
	lea edi, [edi+4]
	jg loc_4B41A4
	add esi, [esp+28h]
	add edi, [esp+2Ch]
	sub dword [esp+24h], 1
	jnz loc_4B41A0
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B41F9:
	add dword [esp+28h], 1
	add dword [esp+2Ch], 2

loc_4B4203:
	mov ecx, [esp+20h]
	cmp ecx, 0
	jz loc_4B424D

loc_4B420C:
	mov bh, [esi+1]
	mov dh, [esi+1]
	mov bl, [edi+2]
	mov dl, [edi+3]
	shr bh, 4
	and dh, 0Fh
	mov al, [ebp+ebx+0]
	mov ah, [ebp+edx+0]
	shl eax, 10h
	mov bh, [esi]
	mov dh, [esi]
	mov bl, [edi]
	mov dl, [edi+1]
	shr bh, 4
	and dh, 0Fh
	mov al, [ebp+ebx+0]
	mov ah, [ebp+edx+0]
	sub ecx, 1
	mov [edi], eax
	lea esi, [esi+2]
	lea edi, [edi+4]
	jg loc_4B420C

loc_4B424D:
	mov bh, [esi]
	mov bl, [edi]
	mov dl, [edi+1]
	mov dh, bh
	shr bh, 4
	and dh, 0Fh
	mov al, [ebp+ebx+0]
	mov ah, [ebp+edx+0]
	mov [edi], ax
	add esi, [esp+28h]
	add edi, [esp+2Ch]
	sub dword [esp+24h], 1
	jnz loc_4B4203

loc_4B4276:
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B416C endp

sub_4B4FB8: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+8], eax
	mov eax, [ebp+10h]
	mov [esi+0Ch], eax
	mov dword [eax], sub_4B4FD6
	pop esi
	pop eax
	leave
	ret
;sub_4B4FB8 endp

sub_4B4FD6: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push ecx
	push esi
	mov esi, [ebp+8]
	mov ecx, [esi+8]
	mov eax, [ebp+0Ch]
	mov ebx, [ebp+10h]
	fild dword [ebp+0Ch]
	fild dword [ebp+10h]
	fxch st1
	fmul dword [flt_4E0518]
	fxch st1
	fmul dword [flt_4E0518]
	fxch st1
	fstp dword [esi]
	fstp dword [esi+4]
	cmp eax, 0
	jz loc_4B5022
	cmp ebx, 0
	jz loc_4B5058
	cmp eax, 7Fh
	jz loc_4B5029
	cmp ebx, 7Fh
	jz loc_4B5048
	mov dword [ecx], sub_4B5066
	jmp loc_4B5060

loc_4B5022:
	cmp ebx, 0
	jz loc_4B5030
	jmp loc_4B5050

loc_4B5029:
	cmp ebx, 7Fh
	jz loc_4B5038
	jmp loc_4B5040

loc_4B5030:
	mov dword [ecx], sub_4B5369
	jmp loc_4B5060

loc_4B5038:
	mov dword [ecx], sub_4B50F6
	jmp loc_4B5060

loc_4B5040:
	mov dword [ecx], sub_4B52E3
	jmp loc_4B5060

loc_4B5048:
	mov dword [ecx], sub_4B525E
	jmp loc_4B5060

loc_4B5050:
	mov dword [ecx], sub_4B51E1
	jmp loc_4B5060

loc_4B5058:
	mov dword [ecx], sub_4B5165
	jmp loc_4B5060

loc_4B5060:
	pop esi
	pop ecx
	pop ebx
	pop eax
	leave
	ret
;sub_4B4FD6 endp

sub_4B5066: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B50C5
	sub ecx, 1

loc_4B5083:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi]
	fmul st0, st3
	fld dword [edi+4]
	fmul st0, st3
	fld dword [edi+4]
	fmul st0, st5
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 8
	add ebp, 10h
	sub ecx, 2
	jg loc_4B5083
	add ecx, 1

loc_4B50C5:
	cmp ecx, 0
	jle loc_4B50EF
	fld dword [edi]
	fmul st0, st1
	fld dword [edi]
	fmul st0, st3
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B50C5

loc_4B50EF:
	fstp st0
	fstp st0
	popa
	leave
	ret
;sub_4B5066 endp

sub_4B50F6: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B5140
	sub ecx, 1

loc_4B510E:
	fld dword [ebp+0]
	fadd dword [edi]
	fld dword [ebp+4]
	fadd dword [edi]
	fld dword [ebp+8]
	fadd dword [edi+4]
	fld dword [ebp+0Ch]
	fadd dword [edi+4]
	fxch st3
	fstp dword [ebp+0]
	fstp dword [ebp+8]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	add edi, 8
	add ebp, 10h
	sub ecx, 2
	jg loc_4B510E
	add ecx, 1

loc_4B5140:
	cmp ecx, 0
	jle loc_4B5162
	fld dword [ebp+0]
	fadd dword [edi]
	fld dword [ebp+4]
	fadd dword [edi]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B5140

loc_4B5162:
	popa
	leave
	ret
;sub_4B50F6 endp

sub_4B5165: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 3
	jle loc_4B51C2
	sub ecx, 3

loc_4B517F:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fmul st0, st2
	fld dword [edi+8]
	fmul st0, st3
	fld dword [edi+0Ch]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+8]
	fxch st1
	fadd dword [ebp+10h]
	fxch st3
	fadd dword [ebp+18h]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+8]
	fstp dword [ebp+18h]
	fstp dword [ebp+10h]
	add edi, 10h
	add ebp, 20h
	sub ecx, 4
	jg loc_4B517F
	add ecx, 3

loc_4B51C2:
	cmp ecx, 0
	jle loc_4B51DC
	fld dword [edi]
	fmul st0, st1
	fadd dword [ebp+0]
	fstp dword [ebp+0]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B51C2

loc_4B51DC:
	fstp st0
	popa
	leave
	ret
;sub_4B5165 endp

sub_4B51E1: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	mov ebp, [ebp+14h]
	cmp ecx, 3
	jle loc_4B523F
	sub ecx, 3

loc_4B51FC:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fmul st0, st2
	fld dword [edi+8]
	fmul st0, st3
	fld dword [edi+0Ch]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+4]
	fxch st2
	fadd dword [ebp+0Ch]
	fxch st1
	fadd dword [ebp+14h]
	fxch st3
	fadd dword [ebp+1Ch]
	fxch st2
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+1Ch]
	fstp dword [ebp+14h]
	add edi, 10h
	add ebp, 20h
	sub ecx, 4
	jg loc_4B51FC
	add ecx, 3

loc_4B523F:
	cmp ecx, 0
	jle loc_4B5259
	fld dword [edi]
	fmul st0, st1
	fadd dword [ebp+4]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B523F

loc_4B5259:
	fstp st0
	popa
	leave
	ret
;sub_4B51E1 endp

sub_4B525E: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B52B6
	sub ecx, 1

loc_4B5278:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi]
	fld dword [edi+4]
	fmul st0, st3
	fld dword [edi+4]
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 8
	add ebp, 10h
	sub ecx, 2
	jg loc_4B5278
	add ecx, 1

loc_4B52B6:
	cmp ecx, 0
	jle loc_4B52DE
	fld dword [edi]
	fmul st0, st1
	fld dword [edi]
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B52B6

loc_4B52DE:
	fstp st0
	popa
	leave
	ret
;sub_4B525E endp

sub_4B52E3: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B533C
	sub ecx, 1

loc_4B52FE:
	fld dword [edi]
	fld dword [edi]
	fmul st0, st2
	fld dword [edi+4]
	fld dword [edi+4]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 8
	add ebp, 10h
	sub ecx, 2
	jg loc_4B52FE
	add ecx, 1

loc_4B533C:
	cmp ecx, 0
	jle loc_4B5364
	fld dword [edi]
	fld dword [edi]
	fmul st0, st2
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B533C

loc_4B5364:
	fstp st0
	popa
	leave
	ret
;sub_4B52E3 endp

sub_4B5369: ;SUBROUTINE
	push ebp
	mov ebp, esp
	leave
	ret
;sub_4B5369 endp

sub_4B5370: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+8], eax
	mov eax, [ebp+10h]
	mov [esi+0Ch], eax
	mov dword [eax], sub_4B538E
	pop esi
	pop eax
	leave
	ret
;sub_4B5370 endp

sub_4B538E: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push ecx
	push esi
	mov esi, [ebp+8]
	mov ecx, [esi+8]
	mov eax, [ebp+0Ch]
	mov ebx, [ebp+10h]
	fild dword [ebp+0Ch]
	fild dword [ebp+10h]
	fxch st1
	fmul dword [flt_4E051C]
	fxch st1
	fmul dword [flt_4E051C]
	fxch st1
	fstp dword [esi]
	fstp dword [esi+4]
	cmp eax, 0
	jz loc_4B53DA
	cmp ebx, 0
	jz loc_4B5410
	cmp eax, 7Fh
	jz loc_4B53E1
	cmp ebx, 7Fh
	jz loc_4B5400
	mov dword [ecx], sub_4B541E
	jmp loc_4B5418

loc_4B53DA:
	cmp ebx, 0
	jz loc_4B53E8
	jmp loc_4B5408

loc_4B53E1:
	cmp ebx, 7Fh
	jz loc_4B53F0
	jmp loc_4B53F8

loc_4B53E8:
	mov dword [ecx], sub_4B572B
	jmp loc_4B5418

loc_4B53F0:
	mov dword [ecx], sub_4B54B0
	jmp loc_4B5418

loc_4B53F8:
	mov dword [ecx], sub_4B56A3
	jmp loc_4B5418

loc_4B5400:
	mov dword [ecx], sub_4B561C
	jmp loc_4B5418

loc_4B5408:
	mov dword [ecx], sub_4B559D
	jmp loc_4B5418

loc_4B5410:
	mov dword [ecx], sub_4B5521
	jmp loc_4B5418

loc_4B5418:
	pop esi
	pop ecx
	pop ebx
	pop eax
	leave
	ret
;sub_4B538E endp

sub_4B541E: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B547E
	sub ecx, 1

loc_4B543B:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fmul st0, st3
	fld dword [edi+8]
	fmul st0, st3
	fld dword [edi+0Ch]
	fmul st0, st5
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 10h
	add ebp, 10h
	sub ecx, 2
	jg loc_4B543B
	add ecx, 1

loc_4B547E:
	cmp ecx, 0
	jle loc_4B54A9
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fmul st0, st3
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 4
	add ebp, 8
	sub ecx, 1
	jg loc_4B547E

loc_4B54A9:
	fstp st0
	fstp st0
	popa
	leave
	ret
;sub_4B541E endp

sub_4B54B0: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B54FB
	sub ecx, 1

loc_4B54C8:
	fld dword [ebp+0]
	fadd dword [edi]
	fld dword [ebp+4]
	fadd dword [edi+4]
	fld dword [ebp+8]
	fadd dword [edi+8]
	fld dword [ebp+0Ch]
	fadd dword [edi+0Ch]
	fxch st3
	fstp dword [ebp+0]
	fstp dword [ebp+8]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	add edi, 10h
	add ebp, 10h
	sub ecx, 2
	jg loc_4B54C8
	add ecx, 1

loc_4B54FB:
	cmp ecx, 0
	jle loc_4B551E
	fld dword [ebp+0]
	fadd dword [edi]
	fld dword [ebp+4]
	fadd dword [edi+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 8
	add ebp, 8
	sub ecx, 1
	jg loc_4B54FB

loc_4B551E:
	popa
	leave
	ret
;sub_4B54B0 endp

sub_4B5521: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 3
	jle loc_4B557E
	sub ecx, 3

loc_4B553B:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+8]
	fmul st0, st2
	fld dword [edi+10h]
	fmul st0, st3
	fld dword [edi+18h]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+8]
	fxch st1
	fadd dword [ebp+10h]
	fxch st3
	fadd dword [ebp+18h]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+8]
	fstp dword [ebp+18h]
	fstp dword [ebp+10h]
	add edi, 20h
	add ebp, 20h
	sub ecx, 4
	jg loc_4B553B
	add ecx, 3

loc_4B557E:
	cmp ecx, 0
	jle loc_4B5598
	fld dword [edi]
	fmul st0, st1
	fadd dword [ebp+0]
	fstp dword [ebp+0]
	add edi, 8
	add ebp, 8
	sub ecx, 1
	jg loc_4B557E

loc_4B5598:
	fstp st0
	popa
	leave
	ret
;sub_4B5521 endp

sub_4B559D: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	mov ebp, [ebp+14h]
	cmp ecx, 3
	jle loc_4B55FC
	sub ecx, 3

loc_4B55B8:
	fld dword [edi+4]
	fmul st0, st1
	fld dword [edi+0Ch]
	fmul st0, st2
	fld dword [edi+14h]
	fmul st0, st3
	fld dword [edi+1Ch]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+4]
	fxch st2
	fadd dword [ebp+0Ch]
	fxch st1
	fadd dword [ebp+14h]
	fxch st3
	fadd dword [ebp+1Ch]
	fxch st2
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+1Ch]
	fstp dword [ebp+14h]
	add edi, 20h
	add ebp, 20h
	sub ecx, 4
	jg loc_4B55B8
	add ecx, 3

loc_4B55FC:
	cmp ecx, 0
	jle loc_4B5617
	fld dword [edi+4]
	fmul st0, st1
	fadd dword [ebp+4]
	fstp dword [ebp+4]
	add edi, 8
	add ebp, 8
	sub ecx, 1
	jg loc_4B55FC

loc_4B5617:
	fstp st0
	popa
	leave
	ret
;sub_4B559D endp

sub_4B561C: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B5675
	sub ecx, 1

loc_4B5636:
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fld dword [edi+8]
	fmul st0, st3
	fld dword [edi+0Ch]
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 10h
	add ebp, 10h
	sub ecx, 2
	jg loc_4B5636
	add ecx, 1

loc_4B5675:
	cmp ecx, 0
	jle loc_4B569E
	fld dword [edi]
	fmul st0, st1
	fld dword [edi+4]
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 8
	add ebp, 8
	sub ecx, 1
	jg loc_4B5675

loc_4B569E:
	fstp st0
	popa
	leave
	ret
;sub_4B561C endp

sub_4B56A3: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	fld dword [esi+4]
	mov ebp, [ebp+14h]
	cmp ecx, 1
	jle loc_4B56FD
	sub ecx, 1

loc_4B56BE:
	fld dword [edi]
	fld dword [edi+4]
	fmul st0, st2
	fld dword [edi+8]
	fld dword [edi+0Ch]
	fmul st0, st4
	fxch st3
	fadd dword [ebp+0]
	fxch st2
	fadd dword [ebp+4]
	fxch st1
	fadd dword [ebp+8]
	fxch st3
	fadd dword [ebp+0Ch]
	fxch st2
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	add edi, 10h
	add ebp, 10h
	sub ecx, 2
	jg loc_4B56BE
	add ecx, 1

loc_4B56FD:
	cmp ecx, 0
	jle loc_4B5726
	fld dword [edi]
	fld dword [edi+4]
	fmul st0, st2
	fxch st1
	fadd dword [ebp+0]
	fxch st1
	fadd dword [ebp+4]
	fxch st1
	fstp dword [ebp+0]
	fstp dword [ebp+4]
	add edi, 8
	add ebp, 8
	sub ecx, 1
	jg loc_4B56FD

loc_4B5726:
	fstp st0
	popa
	leave
	ret
;sub_4B56A3 endp

sub_4B572B: ;SUBROUTINE
	push ebp
	mov ebp, esp
	leave
	ret
;sub_4B572B endp

sub_4B5730: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	mov dword [esi], 0
	mov dword [esi+0Ch], 0
	mov eax, [ebp+0Ch]
	mov dword [eax], sub_4B5770
	mov [esi+10h], eax
	mov eax, [ebp+10h]
	mov dword [eax], sub_4B5785
	mov [esi+14h], eax
	mov eax, [ebp+14h]
	mov dword [eax], sub_4B57CB
	mov [esi+18h], eax
	pop esi
	mov eax, 0
	leave
	ret
;sub_4B5730 endp

sub_4B5770: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+4], eax
	pop esi
	mov eax, 0
	leave
	ret
;sub_4B5770 endp

sub_4B5785: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	cmp dword [esi+4], 10000h
	jl loc_4B579D
	jg loc_4B57B5
	pop esi
	mov eax, [ebp+0Ch]
	leave
	ret

loc_4B579D:
	push edx
	mov edx, [ebp+0Ch]
	mov eax, [esi+4]
	dec edx
	imul eax, edx
	add eax, [esi]
	pop edx
	shr eax, 10h
	inc eax
	sub eax, [esi+0Ch]
	pop esi
	leave
	ret

loc_4B57B5:
	push edx
	mov eax, [esi+4]
	mov edx, [ebp+0Ch]
	imul eax, edx
	add eax, [esi]
	pop edx
	shr eax, 10h
	sub eax, [esi+0Ch]
	pop esi
	leave
	ret
;sub_4B5785 endp

sub_4B57CB: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	cmp dword [esi+4], 10000h
	jnz loc_4B57EA
	push eax
	push ebx
	mov eax, [ebp+14h]
	mov ebx, [ebp+10h]
	mov [eax], ebx
	pop ebx
	pop eax
	pop esi
	leave
	ret

loc_4B57EA:
	pusha
	mov edx, [esi]
	mov eax, [ebp+14h]
	mov ebx, [esi+4]
	mov ecx, [ebp+0Ch]
	shl edx, 10h
	mov edi, [eax]
	shl ecx, 2
	mov eax, [esi+8]
	add ecx, edi
	mov dword [dword_4E0520], eax
	mov eax, [esi+0Ch]
	mov esi, [ebp+10h]
	push ebp
	shr esi, 2
	mov ebp, ebx
	shr ebx, 10h
	shl ebp, 10h
	cmp eax, 1
	jnz loc_4B583B
	push esi
	mov esi, 0

loc_4B5825:
	mov eax, dword [dword_4E0520]
	mov [edi], eax
	add edx, ebp
	adc esi, ebx
	add edi, 4
	cmp esi, 0
	jz loc_4B5825
	pop esi
	nop
	nop

loc_4B583B:
	mov eax, 0[esi*4]
	mov [edi], eax
	add edx, ebp
	adc esi, ebx
	add edi, 4
	cmp edi, ecx
	jl loc_4B583B
	shr edx, 10h
	pop ebp
	mov esi, [ebp+8]
	mov [esi], edx
	cmp ebx, [esi+4]
	jl loc_4B586E
	mov eax, [edi-4]
	mov dword [esi+0Ch], 1
	mov [esi+8], eax
	popa
	pop esi
	leave
	ret

loc_4B586E:
	mov dword [esi+0Ch], 0
	popa
	pop esi
	leave
	ret
;sub_4B57CB endp

sub_4B587C: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	mov dword [esi], 0
	mov dword [esi+10h], 0
	mov eax, [ebp+0Ch]
	mov dword [eax], sub_4B58BC
	mov [esi+14h], eax
	mov eax, [ebp+10h]
	mov dword [eax], sub_4B58D1
	mov [esi+18h], eax
	mov eax, [ebp+14h]
	mov dword [eax], sub_4B5917
	mov [esi+1Ch], eax
	pop esi
	mov eax, 0
	leave
	ret
;sub_4B587C endp

sub_4B58BC: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+4], eax
	pop esi
	mov eax, 0
	leave
	ret
;sub_4B58BC endp

sub_4B58D1: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	cmp dword [esi+4], 10000h
	jl loc_4B58E9
	jg loc_4B5901
	pop esi
	mov eax, [ebp+0Ch]
	leave
	ret

loc_4B58E9:
	push edx
	mov edx, [ebp+0Ch]
	mov eax, [esi+4]
	dec edx
	imul eax, edx
	add eax, [esi]
	pop edx
	shr eax, 10h
	inc eax
	sub eax, [esi+10h]
	pop esi
	leave
	ret

loc_4B5901:
	push edx
	mov eax, [esi+4]
	mov edx, [ebp+0Ch]
	imul eax, edx
	add eax, [esi]
	pop edx
	shr eax, 10h
	sub eax, [esi+10h]
	pop esi
	leave
	ret
;sub_4B58D1 endp

sub_4B5917: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push esi
	mov esi, [ebp+8]
	cmp dword [esi+4], 10000h
	jnz loc_4B5936
	push eax
	push ebx
	mov eax, [ebp+14h]
	mov ebx, [ebp+10h]
	mov [eax], ebx
	pop ebx
	pop eax
	pop esi
	leave
	ret

loc_4B5936:
	pusha
	mov edx, [esi]
	mov eax, [ebp+14h]
	mov ebx, [esi+4]
	mov ecx, [ebp+0Ch]
	shl edx, 10h
	mov edi, [eax]
	shl ecx, 3
	mov eax, [esi+8]
	add ecx, edi
	mov dword [dword_4E0528], eax
	mov eax, [esi+0Ch]
	mov dword [dword_4E052C], eax
	mov eax, [esi+10h]
	mov esi, [ebp+10h]
	push ebp
	shr esi, 3
	mov ebp, ebx
	shr ebx, 10h
	shl ebp, 10h
	cmp eax, 1
	jnz loc_4B5995
	push esi
	mov esi, 0

loc_4B5979:
	mov eax, dword [dword_4E0528]
	mov [edi], eax
	mov eax, dword [dword_4E052C]
	mov [edi+4], eax
	add edx, ebp
	adc esi, ebx
	add edi, 8
	cmp esi, 0
	jz loc_4B5979
	pop esi

loc_4B5995:
	mov dword [dword_4E0524], esp
	nop

loc_4B599C:
	mov eax, 0[esi*8]
	mov esp, 4[esi*8]
	mov [edi], eax
	mov [edi+4], esp
	add edx, ebp
	adc esi, ebx
	add edi, 8
	cmp edi, ecx
	jl loc_4B599C
	mov esp, dword [dword_4E0524]
	shr edx, 10h
	pop ebp
	mov esi, [ebp+8]
	mov [esi], edx
	cmp ebx, [esi+4]
	jl loc_4B59E5
	mov eax, [edi-8]
	mov dword [esi+10h], 1
	mov [esi+8], eax
	mov eax, [edi-4]
	mov [esi+0Ch], eax
	popa
	pop esi
	leave
	ret

loc_4B59E5:
	mov dword [esi+10h], 0
	popa
	pop esi
	leave
	ret
;sub_4B5917 endp

sub_4B59F0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+13h]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+15h]
	mov ecx, edx
	test bl, bl
	jnz loc_4B5A1D
	inc eax

loc_4B5A1D:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+16h], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B59F0 endp

sub_4B5A38: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B5A38 endp

sub_4B5A40: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+15h]
	inc eax
	test bl, bl
	jnz loc_4B5A61
	inc eax

loc_4B5A61:
	mov edx, [ecx+11h]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B5A40 endp

sub_4B5A6C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov eax, [esp+28h]
	mov edi, [esp+2Ch]
	mov edx, [esp+30h]
	mov ebx, eax
	mov cl, [eax+15h]
	mov esi, edx
	test cl, cl
	jnz loc_4B5AFB

loc_4B5A8A:
	mov ebp, [esp+34h]
	dec edi
	mov ebp, [ebp+0]
	test edi, edi
	jg loc_4B5B05

loc_4B5A96:
	xor edx, edx
	mov eax, [ebx+4]
	mov [esp+4], edx
	mov [esp], eax
	fild qword [esp]
	fmul qword [dbl_4D1818]
	fld st0
	fld1
	fsubrp st1, st0
	mov eax, [ebx]
	fld dword [esi+eax*4+4]
	fmulp st2, st0
	fmul dword [esi+eax*4]
	faddp st1, st0
	fstp dword [ebp+edi*4+0]
	mov eax, [ebx]
	mov ecx, [ebx+4]
	fld dword [esi+eax*4+4]
	mov eax, [ebx+8]
	fstp dword [ebx+10h]
	add ecx, eax
	mov esi, [ebx]
	mov eax, ecx
	mov [ebx+4], ecx
	shr eax, 10h
	mov word [ebx+6], 0
	add esi, eax
	mov eax, [ebx+13h]
	mov [ebx], esi
	sar eax, 18h
	mov byte [ebx+15h], 1
	mov [ebx], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B5AFB:
	lea esi, [edx-4]
	mov edx, [eax+10h]
	mov [esi], edx
	jmp loc_4B5A8A

loc_4B5B05:
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+18h], eax
	lea eax, [esp+18h]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBDB4
	add esp, 1Ch
	mov eax, [esp+10h]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B5A96
;sub_4B5A6C endp

sub_4B5B40: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B5B40 endp

sub_4B5B4C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov eax, [esp+28h]
	mov edi, [esp+2Ch]
	mov edx, [esp+30h]
	mov ebx, eax
	mov cl, [eax+15h]
	mov esi, edx
	test cl, cl
	jnz loc_4B5C33

loc_4B5B6E:
	cmp byte [ebx+14h], 0
	jz loc_4B5B7D
	mov eax, [ebx+0Ch]
	mov [esi-4], eax
	sub esi, 4

loc_4B5B7D:
	mov ebp, [esp+34h]
	mov dword [ebx], 0
	mov ebp, [ebp+0]
	dec edi
	jz loc_4B5BC0
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+18h], eax
	lea eax, [esp+18h]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBDB4
	add esp, 1Ch
	mov eax, [esp+10h]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B5BC0:
	xor edx, edx
	mov eax, [ebx+4]
	mov [esp+4], edx
	mov [esp], eax
	fild qword [esp]
	fmul qword [dbl_4D1820]
	fld st0
	fld1
	fsubrp st1, st0
	mov eax, [ebx]
	fld dword [esi+eax*4+4]
	fmulp st2, st0
	fmul dword [esi+eax*4]
	faddp st1, st0
	fstp dword [ebp+edi*4+0]
	mov eax, [ebx]
	mov ecx, [ebx+4]
	mov edi, [ebx]
	fld dword [esi+eax*4+4]
	mov eax, [ebx+8]
	mov ebp, [ebx+8]
	add ecx, eax
	fstp dword [ebx+10h]
	mov eax, ecx
	mov [ebx+4], ecx
	shr eax, 10h
	mov word [ebx+6], 0
	add edi, eax
	mov eax, [ebx+4]
	mov [ebx], edi
	cmp eax, ebp
	jb loc_4B5C40
	mov eax, [ebx]
	mov byte [ebx+14h], 1
	mov edx, [esi+eax*4]
	mov [ebx+0Ch], edx
	mov byte [ebx+15h], 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B5C33:
	lea esi, [edx-4]
	mov edx, [eax+10h]
	mov [esi], edx
	jmp loc_4B5B6E

loc_4B5C40:
	mov byte [ebx+14h], 0
	mov byte [ebx+15h], 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B5B4C endp

sub_4B5C50: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B5C93
	cmp edx, 10000h
	jnb loc_4B5C93

loc_4B5C6F:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B5CC5
	jbe loc_4B5CDC
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B59F0
	mov eax, [eax+20h]
	mov dword [eax], sub_4B5A6C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B5C93:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B5C6F
	cmp esi, 10000h
	jbe loc_4B5CAA
	cmp edx, 10000h
	ja loc_4B5C6F

loc_4B5CAA:
	mov byte [eax+14h], 0
	mov byte [eax+15h], 0
	mov byte [eax+16h], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B5C6F

loc_4B5CC5:
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B5A40
	mov eax, [eax+20h]
	mov dword [eax], sub_4B5B4C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B5CDC:
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B5A38
	mov eax, [eax+20h]
	mov dword [eax], sub_4B5B40
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B5C50 endp

sub_4B5CF4: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+14h], 0
	mov dword [eax+10h], 0
	mov byte [eax+15h], 0
	mov edx, [esp+8]
	mov byte [eax+16h], 1
	mov [eax+18h], edx
	mov edx, [esp+0Ch]
	mov [eax+1Ch], edx
	mov edx, [esp+10h]
	mov [eax+20h], edx
	mov eax, [eax+18h]
	mov dword [eax], sub_4B5C50
	xor eax, eax
	ret
;sub_4B5CF4 endp

sub_4B5D40: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+1Bh]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+1Dh]
	mov ecx, edx
	test bl, bl
	jnz loc_4B5D6D
	inc eax

loc_4B5D6D:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+1Eh], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B5D40 endp

sub_4B5D88: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B5D88 endp

sub_4B5D90: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+1Dh]
	inc eax
	test bl, bl
	jnz loc_4B5DB1
	inc eax

loc_4B5DB1:
	mov edx, [ecx+19h]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B5D90 endp

sub_4B5DBC: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov eax, [esp+28h]
	mov edi, [esp+2Ch]
	mov edx, [esp+30h]
	mov ebx, eax
	mov cl, [eax+1Dh]
	mov esi, edx
	test cl, cl
	jnz loc_4B5E76

loc_4B5DDE:
	mov ebp, [esp+34h]
	dec edi
	mov ebp, [ebp+0]
	test edi, edi
	jg loc_4B5E8B

loc_4B5DEE:
	xor edx, edx
	mov eax, [ebx+4]
	mov [esp+4], edx
	mov [esp], eax
	fild qword [esp]
	fmul qword [dbl_4D1828]
	fld st0
	fld1
	fsubrp st1, st0
	mov eax, [ebx]
	fld dword [esi+eax*8+8]
	fmul st0, st2
	fld dword [esi+eax*8]
	fmul st0, st2
	faddp st1, st0
	lea eax, 0[edi*8]
	fstp dword [eax+ebp]
	mov edi, [ebx]
	fmul dword [esi+edi*8+4]
	fld dword [esi+edi*8+0Ch]
	fmulp st2, st0
	faddp st1, st0
	fstp dword [eax+ebp+4]
	mov eax, [ebx]
	mov ecx, [ebx+4]
	fld dword [esi+eax*8+8]
	mov eax, [ebx]
	fstp dword [ebx+14h]
	fld dword [esi+eax*8+0Ch]
	mov eax, [ebx+8]
	fstp dword [ebx+18h]
	add ecx, eax
	mov esi, [ebx]
	mov eax, ecx
	mov [ebx+4], ecx
	shr eax, 10h
	mov word [ebx+6], 0
	add esi, eax
	mov eax, [ebx+1Bh]
	mov [ebx], esi
	sar eax, 18h
	mov byte [ebx+1Dh], 1
	mov [ebx], eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B5E76:
	lea esi, [edx-4]
	mov edx, [eax+18h]
	mov [esi], edx
	sub esi, 4
	mov edx, [eax+14h]
	mov [esi], edx
	jmp loc_4B5DDE

loc_4B5E8B:
	mov edx, [ebx+8]
	mov ecx, [ebx+8]
	mov eax, [ebx+4]
	shl ecx, 10h
	shr edx, 10h
	push ecx
	shl eax, 10h
	push edx
	mov [esp+18h], eax
	lea eax, [esp+18h]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBEA4
	add esp, 1Ch
	mov eax, [esp+10h]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B5DEE
;sub_4B5DBC endp

sub_4B5EC4: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B5EC4 endp

sub_4B5ED0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov eax, [esp+28h]
	mov edi, [esp+2Ch]
	mov edx, [esp+30h]
	mov ebx, eax
	mov cl, [eax+1Dh]
	mov esi, edx
	test cl, cl
	jnz loc_4B5FE4

loc_4B5EF2:
	cmp byte [ebx+1Ch], 0
	jz loc_4B5F0A
	mov eax, [ebx+10h]
	mov [esi-4], eax
	sub esi, 4
	mov eax, [ebx+0Ch]
	mov [esi-4], eax
	sub esi, 4

loc_4B5F0A:
	mov ebp, [esp+34h]
	mov dword [ebx], 0
	dec edi
	mov ebp, [ebp+0]
	test edi, edi
	jle loc_4B5F4F
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+18h], eax
	lea eax, [esp+18h]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBEA4
	add esp, 1Ch
	mov eax, [esp+10h]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B5F4F:
	xor edx, edx
	mov eax, [ebx+4]
	mov [esp+4], edx
	mov [esp], eax
	fild qword [esp]
	fmul qword [dbl_4D1830]
	mov edx, [ebx]
	fld st0
	fld1
	fsubrp st1, st0
	mov eax, edx
	fld dword [esi+eax*8+8]
	fmul st0, st2
	fld dword [esi+eax*8]
	fmul st0, st2
	faddp st1, st0
	fstp dword [ebp+edi*8+0]
	fmul dword [esi+edx*8+4]
	fld dword [esi+edx*8+0Ch]
	fmulp st2, st0
	faddp st1, st0
	fstp dword [ebp+edi*8+4]
	fld dword [esi+edx*8+8]
	mov eax, [ebx+8]
	mov ecx, [ebx+4]
	mov edi, [ebx]
	mov ebp, [ebx+8]
	fstp dword [ebx+14h]
	fld dword [esi+edx*8+0Ch]
	add ecx, eax
	fstp dword [ebx+18h]
	mov eax, ecx
	mov [ebx+4], ecx
	shr eax, 10h
	mov word [ebx+6], 0
	add edi, eax
	mov eax, [ebx+4]
	mov [ebx], edi
	cmp eax, ebp
	jb loc_4B5FF9
	mov eax, [ebx]
	mov byte [ebx+1Ch], 1
	fld dword [esi+eax*8]
	mov eax, [ebx]
	fstp dword [ebx+0Ch]
	mov edx, [esi+eax*8+4]
	mov [ebx+10h], edx
	mov byte [ebx+1Dh], 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B5FE4:
	lea esi, [edx-4]
	mov edx, [eax+18h]
	mov [esi], edx
	sub esi, 4
	mov edx, [eax+14h]
	mov [esi], edx
	jmp loc_4B5EF2

loc_4B5FF9:
	mov byte [ebx+1Ch], 0
	mov byte [ebx+1Dh], 1
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B5ED0 endp

sub_4B600C: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B604F
	cmp edx, 10000h
	jnb loc_4B604F

loc_4B602B:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B6081
	jbe loc_4B6098
	mov edx, [eax+24h]
	mov dword [edx], sub_4B5D40
	mov eax, [eax+28h]
	mov dword [eax], sub_4B5DBC
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B604F:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B602B
	cmp esi, 10000h
	jbe loc_4B6066
	cmp edx, 10000h
	ja loc_4B602B

loc_4B6066:
	mov byte [eax+1Ch], 0
	mov byte [eax+1Dh], 0
	mov byte [eax+1Eh], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B602B

loc_4B6081:
	mov edx, [eax+24h]
	mov dword [edx], sub_4B5D90
	mov eax, [eax+28h]
	mov dword [eax], sub_4B5ED0
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B6098:
	mov edx, [eax+24h]
	mov dword [edx], sub_4B5D88
	mov eax, [eax+28h]
	mov dword [eax], sub_4B5EC4
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B600C endp

sub_4B60B0: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+1Ch], 0
	mov byte [eax+1Dh], 0
	mov edx, [esp+8]
	mov byte [eax+1Eh], 0
	mov [eax+20h], edx
	mov edx, [esp+0Ch]
	mov [eax+24h], edx
	mov edx, [esp+10h]
	mov [eax+28h], edx
	mov eax, [eax+20h]
	mov dword [eax], sub_4B600C
	xor eax, eax
	ret
;sub_4B60B0 endp

sub_4B60F0: ;SUBROUTINE
	push ebx
	sub esp, 8
	mov ecx, [esp+14h]
	mov ebx, [esp+10h]
	shl ebx, 3
	mov edx, [esp+18h]
	add ebx, ecx
	mov eax, ecx
	cmp ecx, ebx
	jnb loc_4B614C

loc_4B610B:
	fld dword [eax+4]
	fadd dword [eax]
	fld st0
	fmul qword [dbl_4D1838]
	fst st1
	fadd qword [dbl_4D1840]
	fstp st1
	fstp dword [eax]
	mov ecx, [eax]
	and ecx, 0FFFFFh
	add eax, 8
	cmp ecx, 7Fh
	jbe loc_4B6156
	cmp ecx, 0FFF80h
	jnb loc_4B6156
	cmp ecx, 80000h
	jnb loc_4B6151
	mov byte [edx], 0FFh

loc_4B6147:
	inc edx
	cmp eax, ebx
	jb loc_4B610B

loc_4B614C:
	add esp, 8
	pop ebx
	ret

loc_4B6151:
	mov byte [edx], 0
	jmp loc_4B6147

loc_4B6156:
	add cl, 80h
	mov [edx], cl
	inc edx
	cmp eax, ebx
	jb loc_4B610B
	add esp, 8
	pop ebx
	ret
;sub_4B60F0 endp

sub_4B6170: ;SUBROUTINE
	push ebx
	sub esp, 8
	mov ecx, [esp+14h]
	mov ebx, [esp+10h]
	shl ebx, 3
	mov edx, [esp+18h]
	add ebx, ecx
	mov eax, ecx
	cmp ecx, ebx
	jnb loc_4B61C4

loc_4B618B:
	fld dword [eax]
	fld st0
	fadd qword [dbl_4D1848]
	fstp st1
	fstp dword [eax]
	mov ecx, [eax]
	and ecx, 0FFFFFh
	add eax, 4
	cmp ecx, 7FFFh
	jbe loc_4B61CE
	cmp ecx, 0F8000h
	jnb loc_4B61CE
	cmp ecx, 80000h
	jnb loc_4B61C9
	mov byte [edx], 0FFh

loc_4B61BF:
	inc edx
	cmp eax, ebx
	jb loc_4B618B

loc_4B61C4:
	add esp, 8
	pop ebx
	ret

loc_4B61C9:
	mov byte [edx], 0
	jmp loc_4B61BF

loc_4B61CE:
	shr ecx, 8
	and ecx, 0FFh
	add ecx, 80h
	mov [edx], cl
	inc edx
	cmp eax, ebx
	jb loc_4B618B
	add esp, 8
	pop ebx
	ret
;sub_4B6170 endp

sub_4B61F0: ;SUBROUTINE
	push ebx
	sub esp, 8
	mov ecx, [esp+14h]
	mov ebx, [esp+10h]
	shl ebx, 3
	mov edx, [esp+18h]
	add ebx, ecx
	mov eax, ecx
	cmp ecx, ebx
	jnb loc_4B6253

loc_4B620B:
	fld dword [eax+4]
	fadd dword [eax]
	fld st0
	fmul qword [dbl_4D1850]
	fst st1
	fadd qword [dbl_4D1858]
	fstp st1
	fstp dword [eax]
	mov ecx, [eax]
	and ecx, 0FFFFFh
	add eax, 8
	cmp ecx, 7FFFh
	jbe loc_4B625F
	cmp ecx, 0F8000h
	jnb loc_4B625F
	cmp ecx, 80000h
	jnb loc_4B6258
	mov word [edx], 7FFFh

loc_4B624C:
	add edx, 2
	cmp eax, ebx
	jb loc_4B620B

loc_4B6253:
	add esp, 8
	pop ebx
	ret

loc_4B6258:
	mov word [edx], 8000h
	jmp loc_4B624C

loc_4B625F:
	mov [edx], cx
	add edx, 2
	cmp eax, ebx
	jb loc_4B620B
	add esp, 8
	pop ebx
	ret
;sub_4B61F0 endp

sub_4B6270: ;SUBROUTINE
	push ebx
	sub esp, 8
	mov ecx, [esp+14h]
	mov ebx, [esp+10h]
	shl ebx, 3
	mov edx, [esp+18h]
	add ebx, ecx
	mov eax, ecx
	cmp ecx, ebx
	jnb loc_4B62C8

loc_4B628B:
	fld dword [eax]
	fld st0
	fadd qword [dbl_4D1860]
	fstp st1
	fstp dword [eax]
	mov ecx, [eax]
	and ecx, 0FFFFFh
	add eax, 4
	cmp ecx, 7FFFh
	jbe loc_4B62D4
	cmp ecx, 0F8000h
	jnb loc_4B62D4
	cmp ecx, 80000h
	jnb loc_4B62CD
	mov word [edx], 7FFFh

loc_4B62C1:
	add edx, 2
	cmp eax, ebx
	jb loc_4B628B

loc_4B62C8:
	add esp, 8
	pop ebx
	ret

loc_4B62CD:
	mov word [edx], 8000h
	jmp loc_4B62C1

loc_4B62D4:
	mov [edx], cx
	add edx, 2
	cmp eax, ebx
	jb loc_4B628B
	add esp, 8
	pop ebx
	ret
;sub_4B6270 endp

sub_4B62E4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ecx
	push edi
	mov edi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov eax, 0
	cmp ecx, 0Fh
	jle loc_4B6337
	sub ecx, 0Fh

loc_4B62FD:
	mov [edi], eax
	mov [edi+4], eax
	mov [edi+8], eax
	mov [edi+0Ch], eax
	mov [edi+10h], eax
	mov [edi+14h], eax
	mov [edi+18h], eax
	mov [edi+1Ch], eax
	mov [edi+20h], eax
	mov [edi+24h], eax
	mov [edi+28h], eax
	mov [edi+2Ch], eax
	mov [edi+30h], eax
	mov [edi+34h], eax
	mov [edi+38h], eax
	mov [edi+3Ch], eax
	add edi, 40h
	sub ecx, 10h
	jg loc_4B62FD
	add ecx, 0Fh

loc_4B6337:
	cmp ecx, 0
	jle loc_4B6346
	mov [edi], eax
	add edi, 4
	sub ecx, 1
	jg loc_4B6337

loc_4B6346:
	pop edi
	pop ecx
	pop eax
	leave
	ret
;sub_4B62E4 endp

sub_4B634C: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+10h], eax
	mov dword [eax], sub_4B63A9
	mov eax, [ebp+10h]
	mov [esi+14h], eax
	mov dword [eax], sub_4B6370
	pop esi
	pop eax
	leave
	ret
;sub_4B634C endp

sub_4B6370: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	shl eax, 18h
	mov ebx, [ebp+0Ch]
	mov ax, bx
	shl ax, 8
	mov [esi], eax
	mov [esi+4], eax
	mov eax, [ebp+10h]
	shl eax, 18h
	mov ebx, [ebp+10h]
	mov ax, bx
	shl ax, 8
	mov [esi+8], eax
	mov [esi+0Ch], eax
	pop esi
	pop ebx
	pop eax
	leave
	ret
;sub_4B6370 endp

sub_4B63A9: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	movq mm0, qword [esi]
	movq mm1, qword [esi+8]
	mov ebp, [ebp+14h]
	mov eax, ecx
	and eax, 3
	cmp eax, 0
	jz loc_4B63CF
	sub ecx, 4
	jl loc_4B640D

loc_4B63CF:
	movq mm2, mm0
	movq mm4, mm1
	movd mm5, dword [edi]
	punpcklbw mm6, mm5
	pmulhw mm2, mm6
	pmulhw mm4, mm6
	movq mm3, mm2
	punpckhwd mm3, mm4
	punpcklwd mm2, mm4
	paddsw mm2, qword [ebp+0]
	paddsw mm3, qword [ebp+8]
	movq qword [ebp+0], mm2
	movq qword [ebp+8], mm3
	add edi, 4
	add ebp, 10h
	sub ecx, 4
	jg loc_4B63CF
	cmp ecx, 0
	jnz loc_4B640D
	popa
	leave
	ret

loc_4B640D:
	add ecx, 4
	neg ecx
	mov eax, 0

loc_4B6417:
	movq mm2, mm0
	movq mm4, mm1
	mov ah, [edi]
	movd mm6, eax
	pmulhw mm2, mm6
	pmulhw mm4, mm6
	movq mm3, mm2
	punpckhwd mm3, mm4
	punpcklwd mm2, mm4
	movd mm3, dword [ebp+0]
	paddsw mm3, mm2
	movd dword [ebp+0], mm3
	add edi, 1
	add ebp, 4
	add ecx, 1
	jl loc_4B6417
	popa
	leave
	ret
;sub_4B63A9 endp

sub_4B644C: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+8], eax
	mov dword [eax], sub_4B6493
	mov eax, [ebp+10h]
	mov [esi+0Ch], eax
	mov dword [eax], sub_4B6470
	pop esi
	pop eax
	leave
	ret
;sub_4B644C endp

sub_4B6470: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+10h]
	shl eax, 18h
	mov ebx, [ebp+0Ch]
	mov ax, bx
	shl ax, 8
	mov [esi], eax
	mov [esi+4], eax
	pop esi
	pop ebx
	pop eax
	leave
	ret
;sub_4B6470 endp

sub_4B6493: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	movq mm0, qword [esi]
	mov ebp, [ebp+14h]
	mov eax, ecx
	and eax, 3
	cmp eax, 0
	jz loc_4B64B5
	sub ecx, 4
	jl loc_4B64ED

loc_4B64B5:
	movq mm3, qword [edi]
	movq mm1, mm0
	movq mm2, mm0
	punpcklbw mm4, mm3
	punpckhbw mm5, mm3
	pmulhw mm1, mm4
	pmulhw mm2, mm5
	paddsw mm1, qword [ebp+0]
	paddsw mm2, qword [ebp+8]
	movq qword [ebp+0], mm1
	movq qword [ebp+8], mm2
	add edi, 8
	add ebp, 10h
	sub ecx, 4
	jg loc_4B64B5
	cmp ecx, 0
	jnz loc_4B64ED
	popa
	leave
	ret

loc_4B64ED:
	add ecx, 4
	neg ecx

loc_4B64F2:
	mov al, [edi+1]
	shl eax, 18h
	mov ah, [edi]
	movd mm1, eax
	pmulhw mm1, mm0
	movd mm2, dword [ebp+0]
	paddsw mm1, mm2
	movd dword [ebp+0], mm1
	add edi, 2
	add ebp, 4
	add ecx, 1
	jl loc_4B64F2
	popa
	leave
	ret
;sub_4B6493 endp

sub_4B651C: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+10h], eax
	mov dword [eax], sub_4B6579
	mov eax, [ebp+10h]
	mov [esi+14h], eax
	mov dword [eax], sub_4B6540
	pop esi
	pop eax
	leave
	ret
;sub_4B651C endp

sub_4B6540: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	shl eax, 18h
	mov ebx, [ebp+0Ch]
	mov ax, bx
	shl ax, 8
	mov [esi], eax
	mov [esi+4], eax
	mov eax, [ebp+10h]
	shl eax, 18h
	mov ebx, [ebp+10h]
	mov ax, bx
	shl ax, 8
	mov [esi+8], eax
	mov [esi+0Ch], eax
	pop esi
	pop ebx
	pop eax
	leave
	ret
;sub_4B6540 endp

sub_4B6579: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	movq mm0, qword [esi]
	movq mm1, qword [esi+8]
	mov ebx, [ebp+14h]
	mov eax, ecx
	and eax, 3
	cmp eax, 0
	jz loc_4B659F
	sub ecx, 4
	jl loc_4B65D8

loc_4B659F:
	movq mm2, mm0
	movq mm4, mm1
	movq mm6, qword [edi]
	pmulhw mm2, mm6
	pmulhw mm4, mm6
	movq mm3, mm2
	punpckhwd mm3, mm4
	punpcklwd mm2, mm4
	paddsw mm2, qword [ebx]
	paddsw mm3, qword [ebx+8]
	movq qword [ebx], mm2
	movq qword [ebx+8], mm3
	add edi, 8
	add ebx, 10h
	sub ecx, 4
	jg loc_4B659F
	cmp ecx, 0
	jnz loc_4B65D8
	popa
	leave
	ret

loc_4B65D8:
	add ecx, 4
	neg ecx

loc_4B65DD:
	movq mm2, mm0
	movq mm4, mm1
	mov ax, [edi]
	movd mm6, eax
	pmulhw mm2, mm6
	pmulhw mm4, mm6
	movq mm3, mm2
	punpckhwd mm3, mm4
	punpcklwd mm2, mm4
	movd mm3, dword [ebx]
	paddsw mm3, mm2
	movd dword [ebx], mm3
	add edi, 2
	add ebx, 4
	add ecx, 1
	jl loc_4B65DD
	popa
	leave
	ret
;sub_4B6579 endp

sub_4B6610: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+0Ch]
	mov [esi+8], eax
	mov dword [eax], sub_4B6657
	mov eax, [ebp+10h]
	mov [esi+0Ch], eax
	mov dword [eax], sub_4B6634
	pop esi
	pop eax
	leave
	ret
;sub_4B6610 endp

sub_4B6634: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push eax
	push ebx
	push esi
	mov esi, [ebp+8]
	mov eax, [ebp+10h]
	shl eax, 18h
	mov ebx, [ebp+0Ch]
	mov ax, bx
	shl ax, 8
	mov [esi], eax
	mov [esi+4], eax
	pop esi
	pop ebx
	pop eax
	leave
	ret
;sub_4B6634 endp

sub_4B6657: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+10h]
	movq mm0, qword [esi]
	mov ebp, [ebp+14h]
	mov eax, ecx
	and eax, 7
	cmp eax, 0
	jz loc_4B6679
	sub ecx, 8
	jl loc_4B66C7

loc_4B6679:
	movq mm1, mm0
	movq mm2, mm0
	movq mm3, mm0
	movq mm4, mm0
	pmulhw mm1, qword [edi]
	pmulhw mm2, qword [edi+8]
	pmulhw mm3, qword [edi+10h]
	pmulhw mm4, qword [edi+18h]
	paddsw mm1, qword [ebp+0]
	paddsw mm2, qword [ebp+8]
	paddsw mm3, qword [ebp+10h]
	paddsw mm4, qword [ebp+18h]
	movq qword [ebp+0], mm1
	movq qword [ebp+8], mm2
	movq qword [ebp+10h], mm3
	movq qword [ebp+18h], mm4
	add edi, 20h
	add ebp, 20h
	sub ecx, 8
	jg loc_4B6679
	cmp ecx, 0
	jnz loc_4B66C7
	popa
	leave
	ret

loc_4B66C7:
	add ecx, 8
	neg ecx
	movq mm1, mm0

loc_4B66CF:
	mov eax, [edi]
	movd mm1, eax
	pmulhw mm1, mm0
	movd mm2, dword [ebp+0]
	paddsw mm1, mm2
	movd dword [ebp+0], mm1
	add edi, 4
	add ebp, 4
	add ecx, 1
	jl loc_4B66CF
	popa
	leave
	ret
;sub_4B6657 endp

sub_4B66F0: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+10h]
	mov esi, [ebp+0Ch]

loc_4B66FD:
	mov ax, [esi+ecx*4-4]
	movd mm0, eax
	mov ax, [esi+ecx*4-2]
	movd mm1, eax
	paddsw mm0, mm1
	movd eax, mm0
	xor eax, 8000h
	mov [ecx+edi-1], ah
	sub ecx, 1
	jg loc_4B66FD
	popa
	leave
	ret
;sub_4B66F0 endp

sub_4B6724: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+10h]
	shl ecx, 1
	mov esi, [ebp+0Ch]
	mov ebx, byte_4E0530

loc_4B6738:
	movq mm0, qword [esi+ecx*2-8]
	movq mm1, qword [esi+ecx*2-10h]
	movq mm2, qword [esi+ecx*2-18h]
	movq mm3, qword [esi+ecx*2-20h]
	movq mm4, qword [esi+ecx*2-28h]
	movq mm5, qword [esi+ecx*2-30h]
	movq mm6, qword [esi+ecx*2-38h]
	movq mm7, qword [esi+ecx*2-40h]
	paddsw mm0, mm0
	paddsw mm1, mm1
	paddsw mm2, mm2
	paddsw mm3, mm3
	paddsw mm4, mm4
	paddsw mm5, mm5
	paddsw mm6, mm6
	paddsw mm7, mm7
	psrlw mm0, 8
	psrlw mm1, 8
	psrlw mm2, 8
	psrlw mm3, 8
	psrlw mm4, 8
	psrlw mm5, 8
	psrlw mm6, 8
	psrlw mm7, 8
	packuswb mm1, mm0
	packuswb mm3, mm2
	packuswb mm5, mm4
	packuswb mm7, mm6
	movq mm0, qword [ebx]
	pxor mm1, mm0
	pxor mm3, mm0
	pxor mm5, mm0
	pxor mm7, mm0
	movq qword [ecx+edi-8], mm1
	movq qword [ecx+edi-10h], mm3
	movq qword [ecx+edi-18h], mm5
	movq qword [ecx+edi-20h], mm7
	sub ecx, 20h
	jg loc_4B6738
	popa
	leave
	ret
;sub_4B6724 endp

sub_4B67D4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+10h]
	mov esi, [ebp+0Ch]

loc_4B67E1:
	mov ax, [esi+ecx*4-4]
	movd mm0, eax
	mov ax, [esi+ecx*4-2]
	movd mm1, eax
	paddsw mm0, mm1
	movd eax, mm0
	mov [edi+ecx*2-2], ax
	sub ecx, 1
	jg loc_4B67E1
	popa
	leave
	ret
;sub_4B67D4 endp

sub_4B6804: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+10h]
	shl ecx, 2
	mov esi, [ebp+0Ch]

loc_4B6814:
	movq mm0, qword [ecx+esi-8]
	movq mm1, qword [ecx+esi-10h]
	movq mm2, qword [ecx+esi-18h]
	movq mm3, qword [ecx+esi-20h]
	movq mm4, qword [ecx+esi-28h]
	movq mm5, qword [ecx+esi-30h]
	movq mm6, qword [ecx+esi-38h]
	movq mm7, qword [ecx+esi-40h]
	paddsw mm0, mm0
	paddsw mm1, mm1
	paddsw mm2, mm2
	paddsw mm3, mm3
	paddsw mm4, mm4
	paddsw mm5, mm5
	paddsw mm6, mm6
	paddsw mm7, mm7
	movq qword [ecx+edi-8], mm0
	movq qword [ecx+edi-10h], mm1
	movq qword [ecx+edi-18h], mm2
	movq qword [ecx+edi-20h], mm3
	movq qword [ecx+edi-28h], mm4
	movq qword [ecx+edi-30h], mm5
	movq qword [ecx+edi-38h], mm6
	movq qword [ecx+edi-40h], mm7
	sub ecx, 40h
	jg loc_4B6814
	popa
	leave
	ret
;sub_4B6804 endp

sub_4B6884: ;SUBROUTINE
	push ebp
	mov ebp, esp
	push ecx
	push edi
	mov ecx, [ebp+0Ch]
	mov edi, [ebp+8]
	pxor mm0, mm0
	cmp ecx, 0Fh
	jle loc_4B68C4
	sub ecx, 0Fh

loc_4B689A:
	movq qword [edi], mm0
	movq qword [edi+8], mm0
	movq qword [edi+10h], mm0
	movq qword [edi+18h], mm0
	movq qword [edi+20h], mm0
	movq qword [edi+28h], mm0
	movq qword [edi+30h], mm0
	movq qword [edi+38h], mm0
	add edi, 40h
	sub ecx, 10h
	jg loc_4B689A
	add ecx, 0Fh

loc_4B68C4:
	cmp ecx, 0
	jle loc_4B68D4
	movd dword [edi], mm0
	add edi, 4
	sub ecx, 1
	jg loc_4B68C4

loc_4B68D4:
	pop edi
	pop ecx
	emms
	leave
	ret
;sub_4B6884 endp

sub_4B68E0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+0Dh]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+0Fh]
	mov ecx, edx
	test bl, bl
	jnz loc_4B690D
	inc eax

loc_4B690D:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+10h], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B68E0 endp

sub_4B6928: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B6928 endp

sub_4B6930: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+0Fh]
	inc eax
	test bl, bl
	jnz loc_4B6951
	inc eax

loc_4B6951:
	mov edx, [ecx+0Bh]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B6930 endp

sub_4B695C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+0Fh]
	mov esi, edx
	test cl, cl
	jnz loc_4B69EC

loc_4B697A:
	mov ebp, [esp+24h]
	mov ebp, [ebp+0]
	dec edi
	jnz loc_4B69F6

loc_4B6984:
	mov eax, [ebx]
	mov edx, 0FFFFh
	mov ecx, [ebx+4]
	movsx eax, byte [esi+eax]
	sub edx, ecx
	shl eax, 8
	imul eax, edx
	mov edx, [ebx]
	movsx edx, byte [edx+esi+1]
	shl edx, 8
	imul edx, ecx
	shr eax, 10h
	shr edx, 10h
	add eax, edx
	sar eax, 8
	mov [edi+ebp], al
	mov eax, [ebx]
	mov al, [esi+eax+1]
	mov [ebx+0Dh], al
	mov esi, [ebx+4]
	add esi, [ebx+8]
	mov edi, [ebx]
	mov eax, esi
	mov [ebx+4], esi
	shr eax, 10h
	mov word [ebx+6], 0
	add edi, eax
	mov eax, [ebx+0Dh]
	mov [ebx], edi
	sar eax, 18h
	mov byte [ebx+0Fh], 1
	mov [ebx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B69EC:
	lea esi, [edx-1]
	mov al, [eax+0Dh]
	mov [esi], al
	jmp loc_4B697A

loc_4B69F6:
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBF34
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B6984
;sub_4B695C endp

sub_4B6A30: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B6A30 endp

sub_4B6A3C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+0Fh]
	mov esi, edx
	test cl, cl
	jnz loc_4B6B25

loc_4B6A5E:
	cmp byte [ebx+0Eh], 0
	jz loc_4B6A6A
	dec esi
	mov al, [ebx+0Ch]
	mov [esi], al

loc_4B6A6A:
	mov ebp, [esp+24h]
	mov dword [ebx], 0
	mov ebp, [ebp+0]
	dec edi
	jz loc_4B6AAC
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBF34
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B6AAC:
	mov eax, [ebx]
	movsx eax, byte [esi+eax]
	mov ecx, [ebx+4]
	mov edx, eax
	mov eax, 0FFFFh
	shl edx, 8
	sub eax, ecx
	imul eax, edx
	mov edx, [ebx]
	movsx edx, byte [edx+esi+1]
	shl edx, 8
	imul edx, ecx
	shr eax, 10h
	shr edx, 10h
	add eax, edx
	sar eax, 8
	mov [edi+ebp], al
	mov eax, [ebx]
	mov al, [esi+eax+1]
	mov [ebx+0Dh], al
	mov edi, [ebx+4]
	mov eax, [ebx+8]
	mov ebp, [ebx]
	add edi, eax
	mov edx, [ebx+8]
	mov eax, edi
	mov [ebx+4], edi
	shr eax, 10h
	mov word [ebx+6], 0
	add ebp, eax
	mov eax, [ebx+4]
	mov [ebx], ebp
	cmp eax, edx
	jb loc_4B6B32
	add esi, [ebx]
	mov byte [ebx+0Eh], 1
	mov al, [esi]
	mov [ebx+0Ch], al
	mov byte [ebx+0Fh], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B6B25:
	lea esi, [edx-1]
	mov al, [eax+0Dh]
	mov [esi], al
	jmp loc_4B6A5E

loc_4B6B32:
	mov byte [ebx+0Eh], 0
	mov byte [ebx+0Fh], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B6A3C endp

sub_4B6B44: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B6B87
	cmp edx, 10000h
	jnb loc_4B6B87

loc_4B6B63:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B6BB9
	jbe loc_4B6BD0
	mov edx, [eax+18h]
	mov dword [edx], sub_4B68E0
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B695C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B6B87:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B6B63
	cmp esi, 10000h
	jbe loc_4B6B9E
	cmp edx, 10000h
	ja loc_4B6B63

loc_4B6B9E:
	mov byte [eax+0Eh], 0
	mov byte [eax+0Fh], 0
	mov byte [eax+10h], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B6B63

loc_4B6BB9:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B6930
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B6A3C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B6BD0:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B6928
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B6A30
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B6B44 endp

sub_4B6BE8: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+0Eh], 0
	mov byte [eax+0Dh], 0
	mov byte [eax+0Fh], 0
	mov edx, [esp+8]
	mov byte [eax+10h], 1
	mov [eax+14h], edx
	mov edx, [esp+0Ch]
	mov [eax+18h], edx
	mov edx, [esp+10h]
	mov [eax+1Ch], edx
	mov eax, [eax+14h]
	mov dword [eax], sub_4B6B44
	xor eax, eax
	ret
;sub_4B6BE8 endp

sub_4B6C30: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+0Fh]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+11h]
	mov ecx, edx
	test bl, bl
	jnz loc_4B6C5D
	inc eax

loc_4B6C5D:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+12h], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B6C30 endp

sub_4B6C78: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B6C78 endp

sub_4B6C80: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+11h]
	inc eax
	test bl, bl
	jnz loc_4B6CA1
	inc eax

loc_4B6CA1:
	mov edx, [ecx+0Dh]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B6C80 endp

sub_4B6CAC: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov eax, [esp+1Ch]
	mov edi, [esp+20h]
	mov edx, [esp+24h]
	mov ebx, eax
	mov cl, [eax+11h]
	mov esi, edx
	test cl, cl
	jnz loc_4B6D87

loc_4B6CCE:
	mov ebp, [esp+28h]
	mov ebp, [ebp+0]
	dec edi
	jnz loc_4B6D9A

loc_4B6CDC:
	mov edx, [ebx]
	movsx eax, byte [esi+edx*2]
	shl eax, 8
	mov ecx, [ebx+4]
	mov [esp+4], eax
	mov eax, 0FFFFh
	sub eax, ecx
	imul eax, [esp+4]
	movsx edx, byte [esi+edx*2+2]
	shl edx, 8
	imul edx, [ebx+4]
	shr eax, 10h
	shr edx, 10h
	add edi, edi
	add eax, edx
	add ebp, edi
	sar eax, 8
	mov [ebp+0], al
	mov edi, [ebx]
	mov eax, 0FFFFh
	mov ecx, [ebx+4]
	movsx edx, byte [esi+edi*2+1]
	sub eax, ecx
	shl edx, 8
	imul eax, edx
	mov edx, [esi+edi*2]
	sar edx, 18h
	shl edx, 8
	imul edx, ecx
	shr eax, 10h
	shr edx, 10h
	add eax, edx
	sar eax, 8
	mov [ebp+1], al
	mov eax, [ebx]
	mov al, [esi+eax*2+2]
	mov [ebx+0Eh], al
	mov eax, [ebx]
	mov al, [esi+eax*2+3]
	mov [ebx+0Fh], al
	mov ebp, [ebx+4]
	add ebp, [ebx+8]
	mov edx, [ebx]
	mov eax, ebp
	mov [ebx+4], ebp
	shr eax, 10h
	mov word [ebx+6], 0
	add edx, eax
	mov eax, [ebx+0Fh]
	mov [ebx], edx
	sar eax, 18h
	mov byte [ebx+11h], 1
	mov [ebx], eax
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B6D87:
	lea esi, [edx-1]
	mov dl, [eax+0Fh]
	mov [esi], dl
	dec esi
	mov al, [eax+0Eh]
	mov [esi], al
	jmp loc_4B6CCE

loc_4B6D9A:
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBFB4
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B6CDC
;sub_4B6CAC endp

sub_4B6DD4: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B6DD4 endp

sub_4B6DE0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+11h]
	mov esi, edx
	test cl, cl
	jnz loc_4B6F12

loc_4B6E02:
	cmp byte [ebx+10h], 0
	jz loc_4B6E14
	dec esi
	mov al, [ebx+0Dh]
	mov [esi], al
	dec esi
	mov al, [ebx+0Ch]
	mov [esi], al

loc_4B6E14:
	mov ebp, [esp+24h]
	mov dword [ebx], 0
	mov ebp, [ebp+0]
	dec edi
	jz loc_4B6E56
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BBFB4
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B6E56:
	mov edx, [ebx]
	mov ecx, 0FFFFh
	movsx eax, byte [esi+edx*2]
	sub ecx, [ebx+4]
	shl eax, 8
	imul eax, ecx
	movsx edx, byte [esi+edx*2+2]
	shl edx, 8
	imul edx, [ebx+4]
	shr eax, 10h
	shr edx, 10h
	add edi, edi
	add eax, edx
	add ebp, edi
	sar eax, 8
	mov [ebp+0], al
	mov edi, [ebx]
	mov eax, 0FFFFh
	mov ecx, [ebx+4]
	movsx edx, byte [esi+edi*2+1]
	sub eax, ecx
	shl edx, 8
	imul eax, edx
	mov edx, [esi+edi*2]
	sar edx, 18h
	shl edx, 8
	imul edx, ecx
	shr eax, 10h
	shr edx, 10h
	add eax, edx
	sar eax, 8
	mov [ebp+1], al
	mov eax, [ebx]
	mov al, [esi+eax*2+2]
	mov [ebx+0Eh], al
	mov eax, [ebx]
	mov al, [esi+eax*2+3]
	mov [ebx+0Fh], al
	mov ebp, [ebx+4]
	mov eax, [ebx+8]
	mov edx, [ebx]
	add ebp, eax
	mov ecx, [ebx+8]
	mov eax, ebp
	mov [ebx+4], ebp
	shr eax, 10h
	mov word [ebx+6], 0
	add edx, eax
	mov eax, [ebx+4]
	mov [ebx], edx
	cmp eax, ecx
	jb loc_4B6F25
	mov eax, [ebx]
	mov byte [ebx+10h], 1
	mov al, [esi+eax*2]
	mov [ebx+0Ch], al
	mov eax, [ebx]
	mov al, [esi+eax*2+1]
	mov [ebx+0Dh], al
	mov byte [ebx+11h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B6F12:
	lea esi, [edx-1]
	mov dl, [eax+0Fh]
	mov [esi], dl
	dec esi
	mov al, [eax+0Eh]
	mov [esi], al
	jmp loc_4B6E02

loc_4B6F25:
	mov byte [ebx+10h], 0
	mov byte [ebx+11h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B6DE0 endp

sub_4B6F38: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B6F7B
	cmp edx, 10000h
	jnb loc_4B6F7B

loc_4B6F57:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B6FAD
	jbe loc_4B6FC4
	mov edx, [eax+18h]
	mov dword [edx], sub_4B6C30
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B6CAC
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B6F7B:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B6F57
	cmp esi, 10000h
	jbe loc_4B6F92
	cmp edx, 10000h
	ja loc_4B6F57

loc_4B6F92:
	mov byte [eax+10h], 0
	mov byte [eax+11h], 0
	mov byte [eax+12h], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B6F57

loc_4B6FAD:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B6C80
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B6DE0
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B6FC4:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B6C78
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B6DD4
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B6F38 endp

sub_4B6FDC: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+10h], 0
	mov byte [eax+11h], 0
	mov edx, [esp+8]
	mov byte [eax+12h], 0
	mov [eax+14h], edx
	mov edx, [esp+0Ch]
	mov [eax+18h], edx
	mov edx, [esp+10h]
	mov [eax+1Ch], edx
	mov eax, [eax+14h]
	mov dword [eax], sub_4B6F38
	xor eax, eax
	ret
;sub_4B6FDC endp

sub_4B7020: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+0Fh]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+11h]
	mov ecx, edx
	test bl, bl
	jnz loc_4B704D
	inc eax

loc_4B704D:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+12h], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B7020 endp

sub_4B7068: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B7068 endp

sub_4B7070: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+11h]
	inc eax
	test bl, bl
	jnz loc_4B7091
	inc eax

loc_4B7091:
	mov edx, [ecx+0Dh]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B7070 endp

sub_4B709C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+11h]
	mov esi, edx
	test cl, cl
	jnz loc_4B713F

loc_4B70BE:
	mov ebp, [esp+24h]
	mov ebp, [ebp+0]
	dec edi
	jnz loc_4B714E

loc_4B70CC:
	mov eax, [ebx]
	mov edx, 0FFFFh
	mov ecx, [ebx+4]
	movsx eax, word [esi+eax*2]
	sub edx, ecx
	imul eax, edx
	shr eax, 10h
	mov edx, eax
	lea eax, [edi+edi]
	mov [eax+ebp], dx
	mov edx, [ebx]
	mov edx, [esi+edx*2]
	mov edi, [ebx+4]
	sar edx, 10h
	imul edi, edx
	shr edi, 10h
	movsx edx, word [eax+ebp]
	add edx, edi
	mov [eax+ebp], dx
	mov eax, [ebx]
	mov ax, [esi+eax*2+2]
	mov [ebx+0Eh], ax
	mov ebp, [ebx+4]
	add ebp, [ebx+8]
	mov edx, [ebx]
	mov eax, ebp
	mov [ebx+4], ebp
	shr eax, 10h
	mov word [ebx+6], 0
	add edx, eax
	mov eax, [ebx+0Fh]
	mov [ebx], edx
	sar eax, 18h
	mov byte [ebx+11h], 1
	mov [ebx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B713F:
	lea esi, [edx-2]
	mov ax, [eax+0Eh]
	mov [esi], ax
	jmp loc_4B70BE

loc_4B714E:
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BC054
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B70CC
;sub_4B709C endp

sub_4B7188: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B7188 endp

sub_4B7194: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+11h]
	mov esi, edx
	test cl, cl
	jnz loc_4B728B

loc_4B71B6:
	cmp byte [ebx+10h], 0
	jz loc_4B71C6
	sub esi, 2
	mov ax, [ebx+0Ch]
	mov [esi], ax

loc_4B71C6:
	mov ebp, [esp+24h]
	mov dword [ebx], 0
	mov ebp, [ebp+0]
	dec edi
	jz loc_4B7208
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BC054
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B7208:
	mov eax, [ebx]
	mov ecx, [ebx+4]
	movsx edx, word [esi+eax*2]
	mov eax, 0FFFFh
	sub eax, ecx
	imul eax, edx
	lea edx, [edi+edi]
	shr eax, 10h
	mov [edx+ebp], ax
	mov eax, [ebx]
	mov eax, [esi+eax*2]
	mov edi, [ebx+4]
	sar eax, 10h
	imul edi, eax
	shr edi, 10h
	movsx eax, word [edx+ebp]
	add eax, edi
	mov [edx+ebp], ax
	mov eax, [ebx]
	mov ax, [esi+eax*2+2]
	mov [ebx+0Eh], ax
	mov ebp, [ebx+4]
	mov eax, [ebx+8]
	mov edx, [ebx]
	add ebp, eax
	mov ecx, [ebx+8]
	mov eax, ebp
	mov [ebx+4], ebp
	shr eax, 10h
	mov word [ebx+6], 0
	add edx, eax
	mov eax, [ebx+4]
	mov [ebx], edx
	cmp eax, ecx
	jb loc_4B729A
	mov eax, [ebx]
	mov byte [ebx+10h], 1
	mov ax, [esi+eax*2]
	mov [ebx+0Ch], ax
	mov byte [ebx+11h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B728B:
	lea esi, [edx-2]
	mov ax, [eax+0Eh]
	mov [esi], ax
	jmp loc_4B71B6

loc_4B729A:
	mov byte [ebx+10h], 0
	mov byte [ebx+11h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B7194 endp

sub_4B72AC: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B72EF
	cmp edx, 10000h
	jnb loc_4B72EF

loc_4B72CB:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B7321
	jbe loc_4B7338
	mov edx, [eax+18h]
	mov dword [edx], sub_4B7020
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B709C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B72EF:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B72CB
	cmp esi, 10000h
	jbe loc_4B7306
	cmp edx, 10000h
	ja loc_4B72CB

loc_4B7306:
	mov byte [eax+10h], 0
	mov byte [eax+11h], 0
	mov byte [eax+12h], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B72CB

loc_4B7321:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B7070
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B7194
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B7338:
	mov edx, [eax+18h]
	mov dword [edx], sub_4B7068
	mov eax, [eax+1Ch]
	mov dword [eax], sub_4B7188
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B72AC endp

sub_4B7350: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+10h], 0
	mov word [eax+0Eh], 0
	mov byte [eax+11h], 0
	mov edx, [esp+8]
	mov byte [eax+12h], 1
	mov [eax+14h], edx
	mov edx, [esp+0Ch]
	mov [eax+18h], edx
	mov edx, [esp+10h]
	mov [eax+1Ch], edx
	mov eax, [eax+14h]
	mov dword [eax], sub_4B72AC
	xor eax, eax
	ret
;sub_4B7350 endp

sub_4B73A0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	mov edx, [esp+10h]
	mov eax, [esp+14h]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	shr eax, 10h
	mov ebx, [edx+13h]
	inc eax
	sar ebx, 18h
	mov esi, eax
	add eax, ebx
	mov bl, [edx+15h]
	mov ecx, edx
	test bl, bl
	jnz loc_4B73CD
	inc eax

loc_4B73CD:
	mov edi, [esp+14h]
	mov edx, [ecx+8]
	imul edx, edi
	add edx, [ecx+4]
	shr edx, 10h
	sub edx, esi
	mov [ecx+16h], dl
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B73A0 endp

sub_4B73E8: ;SUBROUTINE
	mov eax, [esp+8]
	ret
;sub_4B73E8 endp

sub_4B73F0: ;SUBROUTINE
	push ebx
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ebx, [edx+8]
	dec eax
	imul eax, ebx
	add eax, [edx+4]
	mov ecx, edx
	shr eax, 10h
	mov bl, [edx+15h]
	inc eax
	test bl, bl
	jnz loc_4B7411
	inc eax

loc_4B7411:
	mov edx, [ecx+11h]
	sar edx, 18h
	sub eax, edx
	pop ebx
	ret
;sub_4B73F0 endp

sub_4B741C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+15h]
	mov esi, edx
	test cl, cl
	jnz loc_4B750F

loc_4B743E:
	mov ebp, [esp+24h]
	mov ebp, [ebp+0]
	dec edi
	jnz loc_4B7528

loc_4B744C:
	mov eax, [ebx]
	mov edx, 0FFFFh
	mov ecx, [ebx+4]
	movsx eax, word [esi+eax*4]
	sub edx, ecx
	imul eax, edx
	shr eax, 10h
	mov edx, eax
	lea eax, 0[edi*4]
	mov [eax+ebp], dx
	mov edx, [ebx]
	mov edx, [esi+edx*4+2]
	mov ecx, edx
	mov edi, [ebx+4]
	sar ecx, 10h
	imul ecx, edi
	movsx edx, word [eax+ebp]
	shr ecx, 10h
	add edx, ecx
	mov [eax+ebp], dx
	mov edx, [ebx]
	mov ecx, 0FFFFh
	mov edi, [ebx+4]
	mov edx, [esi+edx*4]
	sub ecx, edi
	sar edx, 10h
	imul edx, ecx
	shr edx, 10h
	mov [eax+ebp+2], dx
	mov edx, [ebx]
	mov edx, [esi+edx*4+4]
	mov edi, edx
	mov ecx, [ebx+4]
	sar edi, 10h
	imul edi, ecx
	mov edx, [eax+ebp]
	sar edx, 10h
	shr edi, 10h
	add edx, edi
	mov [eax+ebp+2], dx
	mov eax, [ebx]
	mov ax, [esi+eax*4+4]
	mov [ebx+10h], ax
	mov eax, [ebx]
	mov ax, [esi+eax*4+6]
	mov [ebx+12h], ax
	mov esi, [ebx+4]
	add esi, [ebx+8]
	mov edi, [ebx]
	mov eax, esi
	mov [ebx+4], esi
	shr eax, 10h
	mov word [ebx+6], 0
	add edi, eax
	mov eax, [ebx+13h]
	mov [ebx], edi
	sar eax, 18h
	mov byte [ebx+15h], 1
	mov [ebx], eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B750F:
	lea esi, [edx-2]
	mov dx, [eax+12h]
	mov [esi], dx
	sub esi, 2
	mov ax, [eax+10h]
	mov [esi], ax
	jmp loc_4B743E

loc_4B7528:
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BC0D4
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax
	jmp loc_4B744C
;sub_4B741C endp

sub_4B7560: ;SUBROUTINE
	mov edx, [esp+10h]
	mov eax, [esp+0Ch]
	mov [edx], eax
	ret
;sub_4B7560 endp

sub_4B756C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov eax, [esp+18h]
	mov edi, [esp+1Ch]
	mov edx, [esp+20h]
	mov ebx, eax
	mov cl, [eax+15h]
	mov esi, edx
	test cl, cl
	jnz loc_4B76C6

loc_4B758E:
	cmp byte [ebx+14h], 0
	jz loc_4B75A8
	sub esi, 2
	mov ax, [ebx+0Eh]
	mov [esi], ax
	sub esi, 2
	mov ax, [ebx+0Ch]
	mov [esi], ax

loc_4B75A8:
	mov ebp, [esp+24h]
	mov dword [ebx], 0
	mov ebp, [ebp+0]
	dec edi
	jz loc_4B75EA
	mov ecx, [ebx+8]
	mov edx, [ebx+8]
	mov eax, [ebx+4]
	shl edx, 10h
	shr ecx, 10h
	push edx
	shl eax, 10h
	push ecx
	mov [esp+8], eax
	lea eax, [esp+8]
	push eax
	push ebx
	push ebp
	push esi
	push edi
	call sub_4BC0D4
	add esp, 1Ch
	mov eax, [esp]
	shr eax, 10h
	mov [ebx+4], eax

loc_4B75EA:
	mov eax, [ebx]
	mov ecx, [ebx+4]
	movsx edx, word [esi+eax*4]
	mov eax, 0FFFFh
	sub eax, ecx
	imul eax, edx
	shr eax, 10h
	mov edx, eax
	lea eax, 0[edi*4]
	mov [eax+ebp], dx
	mov edx, [ebx]
	mov edx, [esi+edx*4+2]
	mov edi, [ebx+4]
	sar edx, 10h
	imul edx, edi
	shr edx, 10h
	movsx edi, word [eax+ebp]
	add edi, edx
	mov [eax+ebp], di
	mov edx, [ebx]
	mov ecx, [ebx+4]
	mov edi, [esi+edx*4]
	mov edx, 0FFFFh
	sar edi, 10h
	sub edx, ecx
	imul edi, edx
	shr edi, 10h
	mov [eax+ebp+2], di
	mov edx, [ebx]
	mov edx, [esi+edx*4+4]
	mov edi, [ebx+4]
	sar edx, 10h
	imul edx, edi
	mov edi, [eax+ebp]
	shr edx, 10h
	sar edi, 10h
	add edi, edx
	mov [eax+ebp+2], di
	mov eax, [ebx]
	mov ax, [esi+eax*4+4]
	mov [ebx+10h], ax
	mov eax, [ebx]
	mov ax, [esi+eax*4+6]
	mov [ebx+12h], ax
	mov ebp, [ebx+4]
	mov eax, [ebx+8]
	mov edx, [ebx]
	add ebp, eax
	mov ecx, [ebx+8]
	mov eax, ebp
	mov [ebx+4], ebp
	shr eax, 10h
	mov word [ebx+6], 0
	add edx, eax
	mov eax, [ebx+4]
	mov [ebx], edx
	cmp eax, ecx
	jb loc_4B76DF
	mov eax, [ebx]
	mov byte [ebx+14h], 1
	mov ax, [esi+eax*4]
	mov [ebx+0Ch], ax
	mov eax, [ebx]
	mov ax, [esi+eax*4+2]
	mov [ebx+0Eh], ax
	mov byte [ebx+15h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4B76C6:
	lea esi, [edx-2]
	mov dx, [eax+12h]
	mov [esi], dx
	sub esi, 2
	mov ax, [eax+10h]
	mov [esi], ax
	jmp loc_4B758E

loc_4B76DF:
	mov byte [ebx+14h], 0
	mov byte [ebx+15h], 1
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B756C endp

sub_4B76F0: ;SUBROUTINE
	push ebx
	push esi
	mov ecx, [esp+0Ch]
	mov edx, [esp+10h]
	mov ebx, [ecx+8]
	mov eax, ecx
	cmp ebx, 10000h
	jnb loc_4B7733
	cmp edx, 10000h
	jnb loc_4B7733

loc_4B770F:
	mov [eax+8], edx
	cmp edx, 10000h
	jb loc_4B7765
	jbe loc_4B777C
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B73A0
	mov eax, [eax+20h]
	mov dword [eax], sub_4B741C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B7733:
	mov esi, [eax+8]
	cmp edx, esi
	jz loc_4B770F
	cmp esi, 10000h
	jbe loc_4B774A
	cmp edx, 10000h
	ja loc_4B770F

loc_4B774A:
	mov byte [eax+14h], 0
	mov byte [eax+15h], 0
	mov byte [eax+16h], 0
	mov dword [eax+4], 0
	mov dword [eax], 0
	jmp loc_4B770F

loc_4B7765:
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B73F0
	mov eax, [eax+20h]
	mov dword [eax], sub_4B756C
	xor eax, eax
	pop esi
	pop ebx
	ret

loc_4B777C:
	mov edx, [eax+1Ch]
	mov dword [edx], sub_4B73E8
	mov eax, [eax+20h]
	mov dword [eax], sub_4B7560
	xor eax, eax
	pop esi
	pop ebx
	ret
;sub_4B76F0 endp

sub_4B7794: ;SUBROUTINE
	mov eax, [esp+4]
	mov dword [eax], 0
	mov dword [eax+4], 0
	mov byte [eax+14h], 0
	mov byte [eax+15h], 0
	mov edx, [esp+8]
	mov byte [eax+16h], 0
	mov [eax+18h], edx
	mov edx, [esp+0Ch]
	mov [eax+1Ch], edx
	mov edx, [esp+10h]
	mov [eax+20h], edx
	mov eax, [eax+18h]
	mov dword [eax], sub_4B76F0
	xor eax, eax
	ret
;sub_4B7794 endp

sub_4B77D4: ;SUBROUTINE
	emms
	ret
;sub_4B77D4 endp

sub_4B77E0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	cmp dword [dword_4DABAC], 0
	jz loc_4B783A
	mov edx, sub_4BC170
	mov ecx, sub_4BC190
	mov ebx, sub_4BC1C0
	mov esi, sub_4BC1E0
	mov edi, sub_4BC200
	mov ebp, sub_4BC230
	mov dword [dword_4DDE14], edx
	mov dword [dword_4DDE18], ecx
	mov dword [dword_4DDE1C], ebx
	mov dword [dword_4DDE20], esi
	mov dword [dword_4DDE24], edi
	mov dword [dword_4DDE28], ebp
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B783A:
	call sub_4BC250
	mov ecx, sub_4BC280
	mov ebx, sub_4BC2A0
	mov esi, sub_4BC2D0
	mov edi, sub_4BC2F0
	mov ebp, sub_4BC310
	mov eax, sub_4BC340
	mov dword [dword_4DDE14], ecx
	mov dword [dword_4DDE18], ebx
	mov dword [dword_4DDE1C], esi
	mov dword [dword_4DDE20], edi
	mov dword [dword_4DDE24], ebp
	mov dword [dword_4DDE28], eax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B77E0 endp

sub_4B7890: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	cmp dword [dword_4DABAC], 0
	jz loc_4B78EA
	push edx
	mov edx, sub_4BC360
	mov ecx, sub_4BC380
	mov ebx, sub_4BC3B0
	mov esi, sub_4BC3D0
	mov edi, sub_4BC3F0
	mov ebp, sub_4BC420
	mov dword [dword_4DDE2C], edx
	mov dword [dword_4DDE30], ecx
	mov dword [dword_4DDE34], ebx
	mov dword [dword_4DDE38], esi
	mov dword [dword_4DDE3C], edi
	mov dword [dword_4DDE40], ebp
	pop edx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4B78EA:
	mov ecx, sub_4BC440
	mov ebx, sub_4BC460
	mov esi, sub_4BC490
	mov edi, sub_4BC4B0
	mov ebp, sub_4BC4D0
	mov eax, sub_4BC500
	mov dword [dword_4DDE2C], ecx
	mov dword [dword_4DDE30], ebx
	mov dword [dword_4DDE34], esi
	mov dword [dword_4DDE38], edi
	mov dword [dword_4DDE3C], ebp
	mov dword [dword_4DDE40], eax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4B7890 endp

sub_4B7940: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, 40h
	xor ebx, ebx

loc_4B794E:
	mov eax, ebx
	mov edi, ebp
	mov cl, bl
	xor edx, edx
	shl eax, 6

loc_4B7959:
	mov esi, edx
	sar esi, 10h
	sar esi, cl
	add eax, 4
	mov [esp], esi
	add edx, 10000000h
	fild dword [esp]
	fstp dword flt_5B9460[eax]
	cmp eax, edi
	jnz loc_4B7959
	inc ebx
	add ebp, 40h
	cmp ebx, 0Dh
	jl loc_4B794E
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B7940 endp

sub_4B798C: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	mov ebp, 40h
	xor ebx, ebx

loc_4B7997:
	mov eax, ebx
	mov edi, ebp
	mov cl, bl
	xor edx, edx
	shl eax, 6

loc_4B79A2:
	mov esi, edx
	sar esi, 10h
	sar esi, cl
	add eax, 4
	shl esi, 8
	add edx, 10000000h
	mov dword dword_5B9860[eax], esi
	cmp eax, edi
	jnz loc_4B79A2
	inc ebx
	add ebp, 40h
	cmp ebx, 0Dh
	jl loc_4B7997
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret
;sub_4B798C endp

sub_4B79D0: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	push edi
	push ebp
	cmp dword [dword_4DABAC], 0
	jz loc_4B7A2F
	call sub_4B798C
	mov edx, sub_4BC6A8
	mov ecx, sub_4BCAF8
	mov ebx, sub_4BCD40
	mov esi, sub_4BCF54
	mov edi, sub_4BD458
	mov ebp, sub_4BD66C
	mov dword [dword_4DDE44], edx
	mov dword [dword_4DDE48], ecx
	mov dword [dword_4DDE4C], ebx
	mov dword [dword_4DDE50], esi
	mov dword [dword_4DDE54], edi
	mov dword [dword_4DDE58], ebp
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret

loc_4B7A2F:
	call sub_4B7940
	mov ecx, sub_4BD848
	mov ebx, sub_4BDC7C
	mov esi, sub_4BDE94
	mov edi, sub_4BE088
	mov ebp, sub_4BE564
	mov eax, sub_4BE770
	mov dword [dword_4DDE44], ecx
	mov dword [dword_4DDE48], ebx
	mov dword [dword_4DDE4C], esi
	mov dword [dword_4DDE50], edi
	mov dword [dword_4DDE54], ebp
	mov dword [dword_4DDE58], eax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B79D0 endp

sub_4B7A80: ;SUBROUTINE
	push edi
	cmp dword [dword_4DABAC], 0
	jz loc_4B7AA9
	mov edi, sub_4BE944
	mov eax, sub_4BEB18
	mov dword [dword_4DDE74], edi
	mov dword [dword_4DDE80], edi
	mov dword [dword_4DDE88], eax
	xor eax, eax
	pop edi
	ret

loc_4B7AA9:
	push esi
	push ecx
	mov ecx, sub_4BECB8
	mov esi, sub_4BEEC0
	mov dword [dword_4DDE74], ecx
	mov dword [dword_4DDE80], ecx
	mov dword [dword_4DDE88], esi
	pop ecx
	pop esi
	xor eax, eax
	pop edi
	ret
;sub_4B7A80 endp

sub_4B7AD0: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+0Ch]
	mov edx, dword [dword_5B4F50]
	mov eax, dword [dword_5AF5F0]
	mov ebx, dword [dword_5B4F10]
	add eax, 4
	add ebx, 4

loc_4B7AF1:
	cmp eax, edx
	jl loc_4B7AFA
	mov eax, dword [dword_5B4F20]

loc_4B7AFA:
	cmp ebx, edx
	jl loc_4B7B04
	mov ebx, dword [dword_5B4F20]

loc_4B7B04:
	fld dword [edi]
	fadd dword [flt_5B4F40]
	fld dword [ebx]
	mov dword [dword_5AF5F0], eax
	mov dword [dword_5B4F10], ebx
	fmul dword [flt_4DEB18]
	fxch st1
	fst dword [eax]
	fmul dword [flt_4DEB18]
	fxch st1
	fstp dword [flt_5B4F40]
	fsubr dword [ebx]
	mov edx, dword [dword_5B4F54]
	mov eax, dword [dword_5AF5F4]
	mov ebx, dword [dword_5B4F14]
	add eax, 4
	add ebx, 4
	cmp eax, edx
	jl loc_4B7B53
	mov eax, dword [dword_5B4F24]

loc_4B7B53:
	cmp ebx, edx
	jl loc_4B7B5D
	mov ebx, dword [dword_5B4F24]

loc_4B7B5D:
	fadd dword [flt_5B4F44]
	fld dword [ebx]
	mov dword [dword_5AF5F4], eax
	mov dword [dword_5B4F14], ebx
	fmul dword [flt_4DEB1C]
	fxch st1
	fst dword [eax]
	fmul dword [flt_4DEB1C]
	fxch st1
	fstp dword [flt_5B4F44]
	fsubr dword [ebx]
	fld dword [flt_4DEAEC]
	fmul dword [flt_4DEAFC]
	fxch st1
	fmul dword [flt_4DEB0C]
	mov eax, dword [dword_5AF5F8]
	mov ebx, dword [dword_5B4F18]
	mov edx, dword [dword_5B4F58]
	faddp st1, st0
	add eax, 4
	add ebx, 4
	cmp eax, edx
	jl loc_4B7BC0
	mov eax, dword [dword_5B4F28]

loc_4B7BC0:
	cmp ebx, edx
	jl loc_4B7BCA
	mov ebx, dword [dword_5B4F28]

loc_4B7BCA:
	fst dword [flt_4DEAEC]
	fadd dword [flt_5B4F48]
	fld dword [ebx]
	mov dword [dword_5AF5F8], eax
	mov dword [dword_5B4F18], ebx
	fmul dword [flt_4DEB20]
	fxch st1
	fst dword [eax]
	fmul dword [flt_4DEB20]
	fxch st1
	fstp dword [flt_5B4F48]
	fsubr dword [ebx]
	mov edx, dword [dword_5B4F5C]
	mov eax, dword [dword_5AF5FC]
	mov ebx, dword [dword_5B4F1C]
	add eax, 4
	add ebx, 4
	cmp eax, edx
	jl loc_4B7C1D
	mov eax, dword [dword_5B4F2C]

loc_4B7C1D:
	cmp ebx, edx
	jl loc_4B7C27
	mov ebx, dword [dword_5B4F2C]

loc_4B7C27:
	fadd dword [dword_5B4F4C]
	fld dword [ebx]
	mov dword [dword_5AF5FC], eax
	mov dword [dword_5B4F1C], ebx
	fmul dword [flt_4DEB24]
	fxch st1
	fst dword [eax]
	fmul dword [flt_4DEB24]
	fxch st1
	fstp dword [dword_5B4F4C]
	fsubr dword [ebx]
	fld dword [flt_4DEAF4]
	fmul dword [flt_4DEB04]
	fxch st1
	fmul dword [flt_4DEB14]
	mov edx, dword [dword_5B4F50]
	mov eax, dword [dword_5AF5F0]
	mov ebx, dword [dword_5B4F10]
	faddp st1, st0
	add eax, 4
	add ebx, 4
	add edi, 4
	fst dword [flt_4DEAF4]
	fstp dword [edi-4]
	sub ecx, 1
	jg loc_4B7AF1
	popa
	leave
	ret
;sub_4B7AD0 endp

sub_4B7CA0: ;SUBROUTINE
	mov edx, [esp+8]
	mov eax, [esp+0Ch]
	mov ecx, [esp+4]
	shl ecx, 2
	add ecx, eax
	cmp eax, ecx
	jnb locret_4B7CC8

loc_4B7CB5:
	fld dword [edx]
	add eax, 4
	fadd dword [edx+4]
	add edx, 8
	fstp dword [eax-4]
	cmp eax, ecx
	jb loc_4B7CB5
	nop

locret_4B7CC8:
	ret
;sub_4B7CA0 endp

sub_4B7CD0: ;SUBROUTINE
	push ecx
	push edx
	sub esp, 4
	mov dword [esp], 3F800000h
	test eax, eax
	jle loc_4B7D0F
	mov edx, 1
	cmp eax, edx
	jl loc_4B7CF8
	xor ecx, ecx

loc_4B7CEB:
	test edx, eax
	jnz loc_4B7D01

loc_4B7CEF:
	add edx, edx
	add ecx, 4
	cmp edx, eax
	jle loc_4B7CEB

loc_4B7CF8:
	fld dword [esp]
	add esp, 4
	pop edx
	pop ecx
	ret

loc_4B7D01:
	fld dword [esp]
	fmul dword flt_4E0578[ecx]
	fstp dword [esp]
	jmp loc_4B7CEF

loc_4B7D0F:
	imul eax, -1
	mov edx, 1
	cmp eax, edx
	jl loc_4B7CF8
	xor ecx, ecx

loc_4B7D1D:
	test edx, eax
	jnz loc_4B7D2C
	add edx, edx
	add ecx, 4
	cmp edx, eax
	jg loc_4B7CF8
	jmp loc_4B7D1D

loc_4B7D2C:
	fld dword [esp]
	fdiv dword flt_4E0578[ecx]
	fstp dword [esp]
	add edx, edx
	add ecx, 4
	cmp edx, eax
	jg loc_4B7CF8
	jmp loc_4B7D1D
;sub_4B7CD0 endp

sub_4B7D50: ;SUBROUTINE
	push esi
	push edi
	mov edi, edx
	mov esi, ecx
	sar eax, 6
	shl ah, 7
	sbb edx, edx
	add ah, ah
	sbb ecx, ecx
	xor eax, ecx
	and eax, 0FFh
	sub eax, ecx
	mov eax, dword dword_4DB6B4[eax*4]
	xor eax, edx
	sub eax, edx
	mov ecx, 10000h
	sub ecx, eax
	mov edx, eax
	mov eax, ecx
	imul eax, edi
	shr eax, 10h
	mov [ebx], eax
	cmp eax, 7Fh
	jg loc_4B7DA4

loc_4B7D8E:
	add edx, 10000h
	imul edi, edx
	shr edi, 10h
	mov [esi], edi
	cmp edi, 7Fh
	jg loc_4B7DAC
	pop edi
	pop esi
	ret

loc_4B7DA4:
	mov dword [ebx], 7Fh
	jmp loc_4B7D8E

loc_4B7DAC:
	mov dword [esi], 7Fh
	pop edi
	pop esi
	ret
;sub_4B7D50 endp

sub_4B83A9: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov ebx, eax
	call GetCurrentThreadId_wrap
	mov edx, [ebx+8]
	mov esi, eax
	cmp eax, edx
	jz loc_4B8402
	cmp dword [ebx+4], 0
	jnz loc_4B83F5
	mov eax, dword_5B9D94
	call sub_4B83A9
	cmp dword [ebx+4], 0
	jnz loc_4B83EB
	push eax ; lpCriticalSection
	mov [ebx], eax
	call InitializeCriticalSection_wrap
	mov dword [ebx+4], 1

loc_4B83EB:
	mov eax, dword_5B9D94
	call sub_4B840F

loc_4B83F5:
	mov eax, [ebx]
	push eax ; lpCriticalSection
	call EnterCriticalSection_wrap
	mov [ebx+8], esi

loc_4B8402:
	inc dword [ebx+0Ch]
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B83A9 endp

sub_4B840F: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	push esi
	mov edx, [eax+0Ch]
	test edx, edx
	jbe loc_4B8431
	lea ebx, [edx-1]
	mov [eax+0Ch], ebx
	test ebx, ebx
	jnz loc_4B8431
	mov esi, [eax]
	push esi ; lpCriticalSection
	mov [eax+8], ebx
	call LeaveCriticalSection_wrap

loc_4B8431:
	pop esi
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4B840F endp

sub_4BB2C0: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, [ecx+20h]
	call sub_4850B0
	pop ecx
	ret
;sub_4BB2C0 endp

sub_4BB2D4: ;SUBROUTINE
	push ecx
	mov ecx, eax
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, [ecx+20h]
	call sub_483460
	call sub_4824BC
	pop ecx
	ret
;sub_4BB2D4 endp

sub_4BB2EC: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 140h
	mov edi, [esp+154h]
	mov [esp+12Ch], eax
	mov [esp+13Ch], edx
	mov ebp, ebx
	mov [esp+138h], ecx
	mov eax, 0FFFFFFFFh
	call sub_4A1080
	mov [esp+130h], eax
	xor eax, eax
	mov edx, [esp+150h]
	call sub_4A1080
	mov eax, [esp+138h]
	mov ecx, dword [dword_4DABE8]
	mov ebx, dword [dword_4DAB84]
	call sub_492820
	mov esi, eax
	mov [esp+134h], eax
	lea eax, [esp+0B4h]
	call sub_4A4030
	mov eax, esp
	call sub_4871B0
	mov eax, dword_4DF380 ; "FNTF"
	call sub_487060
	mov eax, [esp+150h]
	add eax, ebp
	mov ecx, [esp+138h]
	mov [esp+124h], eax
	push eax
	mov eax, [esp+140h]
	mov edx, [esp+140h]
	add eax, ecx
	mov ebx, ebp
	mov [esp+12Ch], eax
	mov ecx, eax
	mov eax, dword_4DB278
	call sub_4C0B80
	call dword [off_4DAC40]
	mov eax, esi
	mov edx, [esp+13Ch]
	call sub_4825A8
	mov ebx, ebp
	mov eax, esi
	mov ecx, [esp+150h]
	call sub_4BB2C0
	call unknown_libname_4 ; Watcom v9-*1.5 32bit NT runtime
	mov eax, 0FF000000h
	mov ebx, [esp+138h]
	call sub_48266C
	push eax
	mov edx, ebp
	mov eax, [esp+140h]
	call sub_488620
	mov eax, 0FFAA0000h
	mov ecx, [esp+124h]
	mov ebx, [esp+128h]
	call sub_48266C
	lea edx, [ebp+4]
	push eax
	sub ecx, 4
	mov eax, [esp+140h]
	sub ebx, 5
	add eax, 4
	call sub_4C0BE0
	mov eax, 0FFFFFFFFh
	xor edx, edx
	call sub_48266C
	call sub_486560
	mov eax, [esp+12Ch]
	lea edx, [ebp+9]
	call sub_4C0CDC
	call dword [off_4DAC44]
	mov eax, dword_4DB278
	call sub_4C0D30
	call sub_4824BC

loc_4BB45C:
	call dword [off_4DAC48]
	test eax, edi
	jnz loc_4BB45C

loc_4BB466:
	call sub_486E38
	mov edx, eax
	mov ecx, eax
	call dword [off_4DAC48]
	mov esi, eax
	and esi, edi
	test edx, edx
	jz loc_4BB518

loc_4BB481:
	or cl, 20h
	and esi, 1
	cmp ecx, 79h
	jnz loc_4BB491
	mov esi, 1

loc_4BB491:
	mov eax, [esp+150h]
	mov ecx, [esp+13Ch]
	mov ebx, [esp+138h]
	mov edx, [esp+13Ch]
	add eax, ebp
	add ecx, ebx
	push eax
	mov ebx, ebp
	mov eax, dword_4DB278
	call sub_4C0B80
	call dword [off_4DAC3C]
	mov edx, [esp+13Ch]
	mov eax, [esp+134h]
	mov ebx, ebp
	call sub_4BB2D4
	call dword [off_4DAC44]
	mov eax, esp
	call sub_4871C8
	lea eax, [esp+0B4h]
	call sub_4A4054
	mov eax, [esp+134h]
	call sub_482DA0
	mov eax, [esp+130h]
	call sub_4A1080
	mov eax, esi
	add esp, 140h
	pop ebp
	pop edi
	pop esi
	ret 8

loc_4BB518:
	test esi, esi
	jnz loc_4BB481
	jmp loc_4BB466
;sub_4BB2EC endp

sub_4BB528: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	cmp dword [dword_4DAB5C], 0
	jz loc_4BB544
	xor eax, eax
	call sub_489BE8
	test eax, eax
	jz loc_4BB581
	call sub_4824BC

loc_4BB544:
	mov eax, dword [dword_4DAB80]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebx, [eax-8]
	mov eax, dword [dword_4DAB7C]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	push 7
	push 18h
	lea edx, [eax-50h]
	mov ecx, 0A0h
	mov eax, aExitYN ; "Exit (Y/N)"
	call sub_4BB2EC
	test eax, eax
	jnz loc_4BB597
	pop edx
	pop ecx
	pop ebx
	ret

loc_4BB581:
	mov eax, dword [dword_4DB6A0]
	call sub_489F48
	mov eax, dword [dword_4DB6A0]
	call sub_489F60
	jmp loc_4BB544

loc_4BB597:
	jmp ExitProcess0
;sub_4BB528 endp

sub_4BB6F4: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov eax, dword [dword_4DAB80]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	lea ebx, [eax-8]
	mov eax, dword [dword_4DAB7C]
	mov edx, eax
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	push 1
	push 18h
	lea edx, [eax-90h]
	mov ecx, 120h
	mov eax, aPausePressAnyK ; "PAUSE - PRESS ANY KEY TO RESUME"
	call sub_4BB2EC
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4BB6F4 endp

sub_4BB81E: ;SUBROUTINE
	mov ebp, esp
	mov edx, dword [dword_4DDAEC]
	add edx, 3
	and dl, 0FCh
	call stackavail_
	cmp edx, eax
	jnb loc_4BB84D
	push edx
	call sub_4B2D3C ; __GRO
	mov eax, dword [dword_4DDAEC]
	add eax, 3
	and al, 0FCh
	sub esp, eax
	mov eax, esp
	jmp loc_4BB84F

loc_4BB84D:
	xor eax, eax

loc_4BB84F:
	mov edx, dword [dword_4DDAEC]
	add eax, edx
	mov dword [dword_4DDAF0], eax
	call main_
	push eax
	call ExitProcess_wrap ;Koniec programu
;sub_4BB81E endp

sub_4BBDB4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov dword [dword_4E09DC], ebx
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	cmp ecx, 1
	jle loc_4BBE58
	sub ecx, 1

loc_4BBDE1:
	fild dword [dword_4E09DC+2]
	fld dword [esi+ebp*4]
	fld dword [esi+ebp*4+4]
	add edi, 8
	add ebx, edx
	adc ebp, eax
	mov dword [dword_4E09DC], ebx
	fild dword [dword_4E09DC+2]
	fld dword [esi+ebp*4]
	fld dword [esi+ebp*4+4]
	fxch st5
	fmul dword [flt_4E09D8]
	fld dword [flt_4E09D4]
	fxch st3
	fmul dword [flt_4E09D8]
	fxch st1
	fsub st3, st0
	fld dword [flt_4E09D4]
	fxch st2
	fsub st2, st0
	fxch st4
	fmulp st6, st0
	add ebx, edx
	fmulp st4, st0
	fmulp st1, st0
	fxch st1
	fmulp st4, st0
	fxch st2
	faddp st1, st0
	fxch st1
	faddp st2, st0
	adc ebp, eax
	mov dword [dword_4E09DC], ebx
	fstp dword [edi-8]
	fstp dword [edi-4]
	sub ecx, 2
	jg loc_4BBDE1
	add ecx, 1

loc_4BBE58:
	cmp ecx, 0
	jle loc_4BBE93
	fild dword [dword_4E09DC+2]
	fld dword [flt_4E09D4]
	fxch st1
	fmul dword [flt_4E09D8]
	fsub st1, st0
	fmul dword [esi+ebp*4+4]
	fxch st1
	fmul dword [esi+ebp*4]
	faddp st1, st0
	add ebx, edx
	adc ebp, eax
	add edi, 4
	mov dword [dword_4E09DC], ebx
	fstp dword [edi-4]
	sub ecx, 1
	jg loc_4BBE58

loc_4BBE93:
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BBDB4 endp

sub_4BBEA4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov dword [dword_4E09EC], ebx
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	jmp loc_4BBED1

loc_4BBECB:
	fstp dword [edi-8]
	fstp dword [edi-4]

loc_4BBED1:
	fild dword [dword_4E09EC+2]
	fld dword [flt_4E09E4]
	fld dword [esi+ebp*8]
	fxch st2
	fmul dword [flt_4E09E8]
	fld dword [esi+ebp*8+4]
	fld dword [esi+ebp*8+8]
	fxch st2
	fsub st3, st0
	fmul st2, st0
	fld dword [esi+ebp*8+0Ch]
	fxch st4
	fmul st5, st0
	add edi, 8
	add ebx, edx
	fmulp st2, st0
	adc ebp, eax
	mov dword [dword_4E09EC], ebx
	fmulp st3, st0
	fxch st3
	faddp st1, st0
	fxch st1
	faddp st2, st0
	sub ecx, 1
	jg loc_4BBECB
	fstp dword [edi-8]
	fstp dword [edi-4]
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BBEA4 endp

sub_4BBF34: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ebx, 0FFFFh
	movd mm3, ebx
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	movd mm1, ebx
	movd mm2, ebx
	psrld mm1, 10h
	por mm1, mm2
	pxor mm1, mm3
	dec edx
	movd mm4, edx
	inc edx
	movd mm5, edx
	psrld mm4, 10h
	por mm4, mm5
	pxor mm4, mm3

loc_4BBF7D:
	punpcklbw mm0, qword [ebp+esi+0]
	movq mm2, mm1
	psrlw mm2, 1
	pmaddwd mm0, mm2
	psrlq mm0, 17h
	push ecx
	movd ecx, mm0
	paddw mm1, mm4
	mov [edi], cl
	pop ecx
	add ebx, edx
	adc ebp, eax
	add edi, 1
	dec ecx
	jg loc_4BBF7D
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BBF34 endp

sub_4BBFB4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ebx, 0FFFFh
	movd mm4, ebx
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	movd mm2, ebx
	movd mm3, ebx
	psrld mm2, 10h
	por mm2, mm3
	pxor mm2, mm4
	movq mm5, mm2
	psllq mm2, 20h
	por mm2, mm5
	dec edx
	movd mm5, edx
	inc edx
	movd mm6, edx
	psrld mm5, 10h
	por mm5, mm6
	pxor mm5, mm4
	movq mm4, mm5
	psllq mm5, 20h
	por mm5, mm4

loc_4BC011:
	movd mm1, dword [esi+ebp*2]
	movq mm3, mm2
	psrlw mm3, 1
	punpcklbw mm1, qword [esi+ebp*2+2]
	punpcklbw mm0, mm1
	pmaddwd mm0, mm3
	psrad mm0, 17h
	paddw mm2, mm5
	packssdw mm0, mm1
	packsswb mm0, mm1
	add ebx, edx
	movd dword [edi], mm0
	adc ebp, eax
	add edi, 2
	dec ecx
	jg loc_4BC011
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BBFB4 endp

sub_4BC054: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ebx, 0FFFFh
	movd mm3, ebx
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	movd mm1, ebx
	movd mm2, ebx
	psrld mm1, 10h
	por mm1, mm2
	pxor mm1, mm3
	dec edx
	movd mm4, edx
	inc edx
	movd mm5, edx
	psrld mm4, 10h
	por mm4, mm5
	pxor mm4, mm3

loc_4BC09D:
	movd mm0, dword [esi+ebp*2]
	movq mm2, mm1
	psrlw mm2, 1
	pmaddwd mm0, mm2
	psrlq mm0, 0Fh
	push ecx
	movd ecx, mm0
	paddw mm1, mm4
	mov [edi], cx
	pop ecx
	add ebx, edx
	adc ebp, eax
	add edi, 2
	dec ecx
	jg loc_4BC09D
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BC054 endp

sub_4BC0D4: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	push ebp
	mov ebx, 0FFFFh
	movd mm4, ebx
	mov ecx, [ebp+8]
	mov esi, [ebp+0Ch]
	mov edi, [ebp+10h]
	mov eax, [ebp+1Ch]
	mov edx, [ebp+20h]
	mov ebx, [ebp+18h]
	mov ebx, [ebx]
	mov ebp, [ebp+14h]
	mov ebp, [ebp+0]
	movd mm2, ebx
	movd mm3, ebx
	psrld mm2, 10h
	por mm2, mm3
	pxor mm2, mm4
	movq mm5, mm2
	psllq mm2, 20h
	por mm2, mm5
	dec edx
	movd mm5, edx
	inc edx
	movd mm6, edx
	psrld mm5, 10h
	por mm5, mm6
	pxor mm5, mm4
	movq mm4, mm5
	psllq mm5, 20h
	por mm5, mm4

loc_4BC131:
	movd mm0, dword [esi+ebp*4]
	punpcklwd mm0, qword [esi+ebp*4+4]
	movq mm3, mm2
	psrlw mm3, 1
	pmaddwd mm0, mm3
	psrad mm0, 0Fh
	paddw mm2, mm5
	packssdw mm0, mm1
	add ebx, edx
	movd dword [edi], mm0
	adc ebp, eax
	add edi, 4
	dec ecx
	jg loc_4BC131
	mov ecx, ebp
	pop ebp
	mov edx, [ebp+18h]
	mov [edx], ebx
	mov edx, [ebp+14h]
	mov [edx], ecx
	popa
	leave
	ret
;sub_4BC0D4 endp

sub_4BC170: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	mov ecx, 1
	call sub_4C1C38
	pop esi
	ret 0Ch
;sub_4BC170 endp

sub_4BC190: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 1
	call sub_4C1D04
	pop esi
	ret 0Ch
;sub_4BC190 endp

sub_4BC1C0: ;SUBROUTINE
	mov ebx, [esp+8]
	mov edx, [esp+0Ch]
	mov dword [edx], 0
	mov edx, 1
	call sub_4C1E5C
	ret 0Ch
;sub_4BC1C0 endp

sub_4BC1E0: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	mov ecx, 2
	call sub_4C1C38
	pop esi
	ret 0Ch
;sub_4BC1E0 endp

sub_4BC200: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 2
	call sub_4C1D04
	pop esi
	ret 0Ch
;sub_4BC200 endp

sub_4BC230: ;SUBROUTINE
	mov ebx, [esp+8]
	mov edx, [esp+0Ch]
	mov dword [edx], 0
	mov edx, 2
	call sub_4C1E5C
	ret 0Ch
;sub_4BC230 endp

sub_4BC250: ;SUBROUTINE
	sub esp, 4
	mov eax, 0FFFFFF80h
	fld qword [dbl_4D1D6C]

loc_4BC25E:
	mov [esp], eax
	xor edx, edx
	fild dword [esp]
	fmul st0, st1
	mov dl, al
	inc eax
	fstp dword dword_5BA4E4[edx*4]
	cmp eax, 7Fh
	jle loc_4BC25E
	fstp st0
	add esp, 4
	ret
;sub_4BC250 endp

sub_4BC280: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	push 0
	xor ecx, ecx
	call sub_4C1F6C
	pop esi
	ret 0Ch
;sub_4BC280 endp

sub_4BC2A0: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 0
	push 0
	call sub_4C2040
	pop esi
	ret 0Ch
;sub_4BC2A0 endp

sub_4BC2D0: ;SUBROUTINE
	mov ecx, [esp+8]
	mov edx, [esp+0Ch]
	xor ebx, ebx
	mov dword [edx], 0
	xor edx, edx
	call sub_4C21CC
	ret 0Ch
;sub_4BC2D0 endp

sub_4BC2F0: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	push 1
	xor ecx, ecx
	call sub_4C1F6C
	pop esi
	ret 0Ch
;sub_4BC2F0 endp

sub_4BC310: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 1
	push 0
	call sub_4C2040
	pop esi
	ret 0Ch
;sub_4BC310 endp

sub_4BC340: ;SUBROUTINE
	mov ecx, [esp+8]
	mov edx, [esp+0Ch]
	mov ebx, 1
	mov dword [edx], 0
	xor edx, edx
	call sub_4C21CC
	ret 0Ch
;sub_4BC340 endp

sub_4BC360: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	mov ecx, 2
	call sub_4C1C38
	pop esi
	ret 0Ch
;sub_4BC360 endp

sub_4BC380: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 2
	call sub_4C1D04
	pop esi
	ret 0Ch
;sub_4BC380 endp

sub_4BC3B0: ;SUBROUTINE
	mov ebx, [esp+8]
	mov edx, [esp+0Ch]
	mov dword [edx], 0
	mov edx, 2
	call sub_4C1E5C
	ret 0Ch
;sub_4BC3B0 endp

sub_4BC3D0: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	mov ecx, 4
	call sub_4C1C38
	pop esi
	ret 0Ch
;sub_4BC3D0 endp

sub_4BC3F0: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 4
	call sub_4C1D04
	pop esi
	ret 0Ch
;sub_4BC3F0 endp

sub_4BC420: ;SUBROUTINE
	mov ebx, [esp+8]
	mov edx, [esp+0Ch]
	mov dword [edx], 0
	mov edx, 4
	call sub_4C1E5C
	ret 0Ch
;sub_4BC420 endp

sub_4BC440: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	push 0
	mov ecx, 1
	call sub_4C1F6C
	pop esi
	ret 0Ch
;sub_4BC440 endp

sub_4BC460: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 0
	push 1
	call sub_4C2040
	pop esi
	ret 0Ch
;sub_4BC460 endp

sub_4BC490: ;SUBROUTINE
	mov ecx, [esp+8]
	mov edx, [esp+0Ch]
	xor ebx, ebx
	mov dword [edx], 0
	mov edx, 1
	call sub_4C21CC
	ret 0Ch
;sub_4BC490 endp

sub_4BC4B0: ;SUBROUTINE
	push esi
	mov ecx, [esp+10h]
	push ecx
	mov esi, [esp+10h]
	push esi
	push 1
	mov ecx, 1
	call sub_4C1F6C
	pop esi
	ret 0Ch
;sub_4BC4B0 endp

sub_4BC4D0: ;SUBROUTINE
	push esi
	mov ebx, ecx
	mov ecx, [esp+8]
	mov esi, [esp+10h]
	mov dword [esi], 0
	mov esi, [esp+0Ch]
	push esi
	push 1
	push 1
	call sub_4C2040
	pop esi
	ret 0Ch
;sub_4BC4D0 endp

sub_4BC500: ;SUBROUTINE
	mov ecx, [esp+8]
	mov edx, [esp+0Ch]
	mov ebx, 1
	mov dword [edx], 0
	mov edx, ebx
	call sub_4C21CC
	ret 0Ch
;sub_4BC500 endp

sub_4BC520: ;SUBROUTINE
	mov eax, [eax+18h]
	ret
;sub_4BC520 endp

sub_4BC524: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, eax
	mov esi, edx
	mov eax, ebx
	mov edx, [edi+18h]
	mov ecx, [edi+14h]
	mov ebx, edi
	cmp edx, ecx
	jge loc_4BC578
	mov eax, [eax]
	mov [edi+0Ch], eax
	mov eax, [edi+1Ah]
	sar eax, 10h
	cmp esi, eax
	jle loc_4BC582
	mov ebp, 2
	mov edx, edi
	xor eax, eax

loc_4BC552:
	mov edi, [ebx+1Ah]
	sar edi, 10h
	cmp eax, edi
	jge loc_4BC5D8
	mov edi, [ebx+0Ch]
	mov cx, [edx+1Eh]
	mov [edi], cx
	mov edi, [ebx+0Ch]
	add edx, 2
	add edi, ebp
	inc eax
	mov [ebx+0Ch], edi
	jmp loc_4BC552

loc_4BC578:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC582:
	xor eax, eax
	test esi, esi
	jle loc_4BC5A8
	mov edx, edi

loc_4BC58A:
	mov edi, [ebx+0Ch]
	mov cx, [edx+1Eh]
	mov [edi], cx
	mov ecx, [ebx+0Ch]
	add edx, 2
	add ecx, 2
	inc eax
	mov [ebx+0Ch], ecx
	cmp eax, esi
	jl loc_4BC58A

loc_4BC5A8:
	mov esi, ebx
	lea edx, [eax+eax]
	xor edi, edi
	add edx, ebx

loc_4BC5B1:
	mov ecx, [ebx+1Ah]
	sar ecx, 10h
	cmp eax, ecx
	jge loc_4BC5CD
	add esi, 2
	inc edi
	mov cx, [edx+1Eh]
	add edx, 2
	inc eax
	mov [esi+1Ch], cx
	jmp loc_4BC5B1

loc_4BC5CD:
	xor eax, eax
	mov [ebx+1Ch], di
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC5D8:
	mov ebp, [ebx+14h]
	sub esi, edi
	sub ebp, [ebx+18h]
	test ebp, ebp
	jl loc_4BC663

loc_4BC5E8:
	cmp esi, ebp
	jge loc_4BC667
	mov edi, esi

loc_4BC5F2:
	mov edx, [ebx+18h]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [ebx+10h]
	mov [ebx], edi
	add edx, eax
	push ebx
	mov [ebx+8], edx
	call sub_4C2200
	add [ebx+18h], edi
	mov eax, [ebx]
	mov edx, [ebx+18h]
	sub edx, eax
	add esp, 4
	mov [ebx+18h], edx
	cmp ebp, edi
	jnz loc_4BC66B
	mov eax, edx
	mov ecx, [ebx+14h]
	sub esi, edi
	sub eax, ecx
	sub esi, eax
	test esi, esi
	jle loc_4BC65C
	xor edx, edx

loc_4BC646:
	mov eax, [ebx+0Ch]
	mov [eax], dx
	mov ebp, [ebx+0Ch]
	add ebp, 2
	dec esi
	mov [ebx+0Ch], ebp
	test esi, esi
	jg loc_4BC646

loc_4BC65C:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC663:
	xor ebp, ebp
	jmp loc_4BC5E8

loc_4BC667:
	mov edi, ebp
	jmp loc_4BC5F2

loc_4BC66B:
	mov edi, [ebx]
	xor eax, eax
	test edi, edi
	jl loc_4BC67E
	mov [ebx+1Ch], ax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC67E:
	mov edx, ebx
	lea esi, [edi+edi]

loc_4BC683:
	add esi, 2
	mov ecx, [ebx+0Ch]
	inc edi
	add edx, 2
	mov cx, [ecx+esi-2]
	inc eax
	mov [edx+1Ch], cx
	test esi, esi
	jl loc_4BC683
	mov [ebx+1Ch], ax
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BC524 endp

sub_4BC6A8: ;SUBROUTINE
	mov dword [eax+18h], 0
	mov word [eax+1Ch], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov [eax+10h], edx
	mov [eax+14h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BC524
	mov eax, [esp+0Ch]
	mov dword [eax], sub_4BC520
	mov eax, 54h
	ret 0Ch
;sub_4BC6A8 endp

sub_4BC6F0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov [esp+4], edx
	mov [esp], ecx
	mov edi, ebx
	mov edx, [ecx]
	cmp eax, ebx
	jge loc_4BC709
	mov edi, eax

loc_4BC709:
	xor eax, eax
	test edi, edi
	jle loc_4BC728
	mov ecx, [esp+4]

loc_4BC713:
	add edx, 2
	mov bx, [ecx]
	add ecx, 2
	inc eax
	mov [edx-2], bx
	cmp eax, edi
	jl loc_4BC713

loc_4BC728:
	cmp eax, ebp
	jge loc_4BC748
	mov ecx, [esp+4]
	lea ebx, [eax+eax]
	add ebx, ecx

loc_4BC735:
	add ecx, 2
	mov si, [ebx]
	add ebx, 2
	inc eax
	mov [ecx-2], si
	cmp eax, ebp
	jl loc_4BC735
	nop

loc_4BC748:
	mov eax, [esp]
	mov [eax], edx
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BC6F0 endp

sub_4BC758: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 44h
	mov edi, edx
	mov edx, [ebx]
	mov esi, eax
	mov [eax+0Ch], edx
	test edi, edi
	jle loc_4BC7C1
	lea edx, [eax+0Ch]
	mov [esp+3Ch], edx
	lea ebp, [eax+26h]

loc_4BC776:
	cmp word [esi+24h], 0
	jnz loc_4BC7D9
	mov eax, [esi+18h]
	mov ecx, [esi+20h]
	add eax, 1Bh
	cmp eax, ecx
	jge loc_4BC7FA
	imul edx, [esi+18h], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+10h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+8], edx
	call sub_4C2200
	mov edx, [esi+18h]
	sub edi, 1Ch
	add edx, 1Ch
	add esp, 4
	mov [esi+18h], edx

loc_4BC7BD:
	test edi, edi
	jg loc_4BC776

loc_4BC7C1:
	lea eax, [edi+edi]
	add [esi+0Ch], eax
	test edi, edi
	jl loc_4BC90E
	xor eax, eax
	add esp, 44h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC7D9:
	mov ecx, [esp+3Ch]
	mov ebx, edi
	mov eax, [esi+22h]
	mov edx, ebp
	sar eax, 10h
	call sub_4BC6F0
	mov bx, [esi+24h]
	sub ebx, eax
	sub edi, eax
	mov [esi+24h], bx
	jmp loc_4BC7BD

loc_4BC7FA:
	imul edx, [esi+18h], 0Fh
	mov eax, [esi+0Ch]
	mov ecx, 1Ch
	mov [esp+38h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [esi], 1Ch
	mov edx, [esi+10h]
	mov [esi+0Ch], ebp
	add edx, eax
	push esi
	mov [esi+8], edx
	call sub_4C2200
	add dword [esi+18h], 1Ch
	mov bx, [esi+20h]
	mov ax, [esi+18h]
	mov edx, 1Ch
	sub eax, ebx
	sub edx, eax
	mov ax, [esi+94h]
	mov [esi+24h], dx
	mov [esi+6], ax
	mov ax, [esi+96h]
	mov ecx, edx
	mov [esi+4], ax
	inc ecx
	mov eax, [esi+1Ch]
	mov [esi+24h], cx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	imul eax, ecx
	mov [esi+18h], eax
	mov eax, [esi+1Ch]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	add esp, 4
	test edx, edx
	jz loc_4BC902
	mov [esi], ecx
	imul edx, [esi+18h], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+10h]
	add edx, eax
	mov eax, esp
	mov [esi+8], edx
	push esi
	mov [esi+0Ch], eax
	call sub_4C2200
	mov ebx, [esi+18h]
	add ebx, 1Ch
	mov edx, [esi+1Ch]
	mov eax, ebx
	add esp, 4
	sub eax, edx
	mov [esp+40h], eax
	mov eax, 1Ch
	mov ecx, [esp+40h]
	sub eax, ecx
	mov edx, esp
	add eax, eax
	mov [esi+18h], ebx
	add edx, eax
	xor eax, eax
	test ecx, ecx
	jle loc_4BC902

loc_4BC8DB:
	mov ecx, [esi+22h]
	sar ecx, 10h
	add ecx, ecx
	lea ebx, [esi+ecx]
	mov cx, [edx]
	mov [ebx+26h], cx
	mov bx, [esi+24h]
	inc ebx
	inc eax
	mov [esi+24h], bx
	mov ebx, [esp+40h]
	add edx, 2
	cmp eax, ebx
	jl loc_4BC8DB

loc_4BC902:
	mov eax, [esp+38h]
	mov [esi+0Ch], eax
	jmp loc_4BC7BD

loc_4BC90E:
	mov eax, [esi+22h]
	sar eax, 10h
	add eax, eax
	mov ecx, [esi+0Ch]
	lea edx, [esi+eax]
	mov ax, [ecx]
	mov [edx+26h], ax
	add dword [esi+0Ch], 2
	mov cx, [esi+24h]
	inc ecx
	inc edi
	mov [esi+24h], cx
	test edi, edi
	jl loc_4BC90E
	xor eax, eax
	add esp, 44h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BC758 endp

sub_4BC940: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov [esp+4], edx
	mov edx, [ebx]
	mov [eax+0Ch], edx
	mov edx, [eax+22h]
	mov ecx, [esp+4]
	sar edx, 10h
	mov esi, eax
	cmp edx, ecx
	jge loc_4BC98D
	mov edi, 2
	xor ebx, ebx

loc_4BC967:
	mov edx, [esi+22h]
	sar edx, 10h
	cmp ebx, edx
	jge loc_4BC9E7
	mov edx, [esi+0Ch]
	mov cx, [eax+26h]
	mov [edx], cx
	mov ebp, [esi+0Ch]
	add eax, 2
	add ebp, edi
	inc ebx
	mov [esi+0Ch], ebp
	jmp loc_4BC967

loc_4BC98D:
	xor ebx, ebx
	test ecx, ecx
	jle loc_4BC9B4
	mov ebp, [esp+4]

loc_4BC997:
	mov edx, [esi+0Ch]
	mov cx, [eax+26h]
	mov [edx], cx
	mov edi, [esi+0Ch]
	add eax, 2
	add edi, 2
	inc ebx
	mov [esi+0Ch], edi
	cmp ebx, ebp
	jl loc_4BC997

loc_4BC9B4:
	mov eax, esi
	lea edx, [ebx+ebx]
	xor edi, edi
	add edx, esi

loc_4BC9BD:
	mov ecx, [esi+22h]
	sar ecx, 10h
	cmp ebx, ecx
	jge loc_4BC9D9
	add eax, 2
	inc edi
	mov cx, [edx+26h]
	add edx, 2
	inc ebx
	mov [eax+24h], cx
	jmp loc_4BC9BD

loc_4BC9D9:
	xor eax, eax
	mov [esi+24h], di
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BC9E7:
	mov edi, [esi+1Ch]
	mov eax, [esi+18h]
	mov ebp, [esp+4]
	sub edi, eax
	sub ebp, edx
	sub edi, 1Ch
	mov [esp+4], ebp
	cmp edi, ebp
	jle loc_4BCA02
	mov edi, ebp

loc_4BCA02:
	test edi, edi
	jl loc_4BCAC5

loc_4BCA0A:
	mov edx, [esi+18h]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+10h]
	mov [esi], edi
	add edx, eax
	push esi
	mov [esi+8], edx
	call sub_4C2200
	add esp, 4
	mov ecx, [esi+18h]
	mov eax, [esi]
	add ecx, edi
	xor edx, edx
	mov ebx, ecx
	mov [esi+18h], ecx
	sub ebx, eax
	mov eax, [esi]
	mov [esi+18h], ebx
	mov [esp+8], eax
	lea ecx, [eax+eax]
	xor ebx, ebx
	mov eax, ecx

loc_4BCA60:
	test eax, eax
	jl loc_4BCACC
	mov eax, [esp+4]
	mov ebp, [esi+0Ch]
	sub eax, edi
	sub ebp, edx
	mov [esp+4], eax
	mov edx, [esi+18h]
	mov eax, [esi+1Ch]
	mov [esi+24h], bx
	sub eax, edx
	mov [esi+0Ch], ebp
	cmp eax, 1Ch
	jge loc_4BCABB
	mov ax, [esi+6]
	mov [esi+94h], ax
	mov ax, [esi+4]
	mov [esi+96h], ax
	mov eax, [esi+98h]
	mov ecx, [esp+4]
	mov dword [eax], sub_4BC758
	test ecx, ecx
	jle loc_4BCABB
	lea ebx, [esi+0Ch]
	mov edx, ecx
	mov eax, esi
	call sub_4BC758

loc_4BCABB:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BCAC5:
	xor edi, edi
	jmp loc_4BCA0A

loc_4BCACC:
	lea ecx, [esi+edx]
	mov ebp, [esi+0Ch]
	mov [esp], ecx
	mov cx, [eax+ebp]
	mov ebp, [esp]
	add eax, 2
	mov [ebp+26h], cx
	mov ecx, [esp+8]
	inc ebx
	inc ecx
	add edx, 2
	mov [esp+8], ecx
	jmp loc_4BCA60
;sub_4BC940 endp

sub_4BCAF8: ;SUBROUTINE
	mov dword [eax+18h], 0
	mov word [eax+24h], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov [eax+10h], edx
	mov [eax+14h], ebx
	mov [eax+1Ch], ecx
	mov edx, [esp+4]
	mov [eax+20h], edx
	mov edx, [esp+8]
	mov [eax+98h], edx
	mov eax, [esp+0Ch]
	mov dword [edx], sub_4BC940
	mov dword [eax], 0
	mov eax, 9Ch
	ret 0Ch
;sub_4BCAF8 endp

sub_4BCB50: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov edi, edx
	mov edx, [eax+10h]
	mov esi, eax
	test edx, edx
	jz loc_4BCC2D
	push ecx
	mov edx, [ebx]
	mov [eax+0Ch], edx
	test edi, edi
	jle loc_4BCC15
	lea edx, [eax+0Ch]
	mov [esp+4], edx
	lea edx, [eax+1Eh]
	lea ebp, [eax+14h]
	add eax, 10h
	mov [esp+8], edx
	mov [esp+0Ch], eax

loc_4BCB8B:
	cmp word [esi+1Ch], 0
	jnz loc_4BCC39
	mov eax, [esi+18h]
	mov ecx, [esi+14h]
	add eax, 1Bh
	cmp eax, ecx
	jge loc_4BCC62
	mov edx, ecx
	sub edx, [esi+18h]
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov [esp+10h], eax
	imul eax, ebx
	mov [esp+10h], eax
	cmp edi, eax
	jge loc_4BCBD8
	lea edx, [edi+1Bh]
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	imul eax, ebx
	mov [esp+10h], eax

loc_4BCBD8:
	imul edx, [esi+18h], 0Fh
	mov eax, [esp+10h]
	mov [esi], eax
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+10h]
	add edx, eax
	push esi
	mov [esi+8], edx
	call sub_4C2200
	add esp, 4
	mov edx, [esi+18h]
	mov eax, [esp+10h]
	add edx, eax
	sub edi, eax
	mov [esi+18h], edx

loc_4BCC0D:
	test edi, edi
	jg loc_4BCB8B

loc_4BCC15:
	lea eax, [edi+edi]
	add [esi+0Ch], eax
	test edi, edi
	jl loc_4BCD0B
	xor eax, eax
	pop ecx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4BCC2D:
	mov eax, 0FFFFFFFFh
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4BCC39:
	mov ecx, [esp+4]
	mov edx, [esp+8]
	mov eax, [esi+1Ah]
	mov ebx, edi
	sar eax, 10h
	call sub_4BC6F0
	mov [esp+10h], eax
	mov bx, [esi+1Ch]
	sub ebx, [esp+10h]
	sub edi, eax
	mov [esi+1Ch], bx
	jmp loc_4BCC0D

loc_4BCC62:
	cmp dword [esi+10h], 1
	jz loc_4BCCB7
	cmp ecx, [esi+18h]
	jle loc_4BCCB7
	imul edx, [esi+18h], 0Fh
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+10h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+8], edx
	call sub_4C2200
	mov ebx, [esi+18h]
	add ebx, 1Ch
	mov edx, [esi+14h]
	mov eax, ebx
	add esp, 4
	sub eax, edx
	mov edx, 1Ch
	mov ecx, [esi+0Ch]
	sub edx, eax
	add eax, eax
	mov [esi+18h], ebx
	sub ecx, eax
	sub edi, edx
	mov [esi+0Ch], ecx

loc_4BCCB7:
	mov eax, [esp+0Ch]
	mov edx, ebp
	call dword [dword_4DCFDC]
	mov ebx, [esi+10h]
	test ebx, ebx
	jz loc_4BCCEE
	mov dx, [ebx]
	mov [esi+6], dx
	mov ax, [ebx+2]
	mov [esi+4], ax
	mov eax, [esi+10h]
	mov dword [esi+18h], 0
	add eax, 8
	mov [esi+10h], eax
	jmp loc_4BCC0D

loc_4BCCEE:
	mov eax, [esi+0Ch]
	add edi, edi
	xor edx, edx
	mov ebx, edi
	call memset_
	mov edx, [esi+0Ch]
	add edx, edi
	xor edi, edi
	mov [esi+0Ch], edx
	jmp loc_4BCC15

loc_4BCD0B:
	mov edx, [esi+1Ah]
	mov eax, [esi+0Ch]
	sar edx, 10h
	mov ax, [eax]
	mov [esi+edx*2+1Eh], ax
	mov ebx, [esi+0Ch]
	mov cx, [esi+1Ch]
	add ebx, 2
	inc ecx
	mov [esi+0Ch], ebx
	inc edi
	mov [esi+1Ch], cx
	test edi, edi
	jl loc_4BCD0B
	xor eax, eax
	pop ecx
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BCB50 endp

sub_4BCD40: ;SUBROUTINE
	mov dword [eax+10h], 1
	mov dword [eax+18h], 0
	mov word [eax+1Ch], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov [eax+14h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BCB50
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, 54h
	ret 0Ch
;sub_4BCD40 endp

sub_4BCD80: ;SUBROUTINE
	mov eax, [eax+1Ch]
	ret
;sub_4BCD80 endp

sub_4BCD84: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, edx
	mov edx, ebx
	mov ecx, [eax+1Ch]
	mov edi, [eax+18h]
	mov ebx, eax
	cmp ecx, edi
	jge loc_4BCDDA
	mov edx, [edx]
	mov [eax+10h], edx
	mov edx, [eax+1Eh]
	sar edx, 10h
	sar edx, 1
	cmp esi, edx
	jle loc_4BCDE7
	mov edi, 2
	xor edx, edx

loc_4BCDB3:
	mov ecx, [ebx+1Eh]
	sar ecx, 10h
	cmp edx, ecx
	jge loc_4BCE4B
	mov ebp, [ebx+10h]
	mov cx, [eax+24h]
	mov [ebp+0], cx
	mov ecx, [ebx+10h]
	add eax, 2
	add ecx, edi
	inc edx
	mov [ebx+10h], ecx
	jmp loc_4BCDB3

loc_4BCDDA:
	mov eax, 0FFFFFFFFh
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BCDE7:
	add esi, esi
	xor edx, edx
	test esi, esi
	jle loc_4BCE0C

loc_4BCDEF:
	mov ecx, [ebx+10h]
	mov di, [eax+24h]
	mov [ecx], di
	mov ebp, [ebx+10h]
	add eax, 2
	add ebp, 2
	inc edx
	mov [ebx+10h], ebp
	cmp edx, esi
	jl loc_4BCDEF

loc_4BCE0C:
	xor eax, eax
	lea esi, [edx+edx]
	mov [esp], eax
	add esi, ebx
	mov eax, ebx

loc_4BCE18:
	mov ecx, [ebx+1Eh]
	sar ecx, 10h
	cmp edx, ecx
	jge loc_4BCE3A
	add eax, 2
	mov cx, [esi+24h]
	mov [eax+22h], cx
	mov ecx, [esp]
	add esi, 2
	inc ecx
	inc edx
	mov [esp], ecx
	jmp loc_4BCE18

loc_4BCE3A:
	mov eax, [esp]
	mov [ebx+20h], ax
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BCE4B:
	mov ebp, [ebx+18h]
	mov eax, [ebx+1Ch]
	sar ecx, 1
	sub ebp, eax
	sub esi, ecx
	test ebp, ebp
	jl loc_4BCEE6

loc_4BCE5F:
	cmp esi, ebp
	jge loc_4BCEED
	mov [esp], esi

loc_4BCE6A:
	mov eax, [esp]
	mov [ebx], eax
	mov eax, [ebx+1Ch]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [ebx+14h]
	add edx, eax
	push ebx
	mov [ebx+0Ch], edx
	call sub_4C22F0
	add esp, 4
	mov edx, [ebx+1Ch]
	mov eax, [esp]
	add edx, eax
	mov ecx, edx
	mov eax, [ebx]
	mov [ebx+1Ch], edx
	sub ecx, eax
	mov edi, [esp]
	mov [ebx+1Ch], ecx
	cmp ebp, edi
	jnz loc_4BCEF5
	mov eax, ecx
	mov edx, [ebx+18h]
	sub esi, edi
	sub eax, edx
	sub esi, eax
	add esi, esi
	test esi, esi
	jle loc_4BCEDC
	xor edx, edx

loc_4BCEC6:
	mov eax, [ebx+10h]
	mov [eax], dx
	mov edi, [ebx+10h]
	add edi, 2
	dec esi
	mov [ebx+10h], edi
	test esi, esi
	jg loc_4BCEC6

loc_4BCEDC:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BCEE6:
	xor ebp, ebp
	jmp loc_4BCE5F

loc_4BCEED:
	mov [esp], ebp
	jmp loc_4BCE6A

loc_4BCEF5:
	mov ecx, 1Ch
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv ecx
	mov esi, ecx
	sub esi, edx
	imul esi, -1
	cmp esi, 0FFFFFFE4h
	jnz loc_4BCF11
	xor esi, esi

loc_4BCF11:
	add esi, esi
	xor edx, edx
	test esi, esi
	jl loc_4BCF27
	mov [ebx+20h], dx
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BCF27:
	mov ecx, ebx
	lea eax, [esi+esi]

loc_4BCF2C:
	add eax, 2
	mov ebp, [ebx+10h]
	inc esi
	add ecx, 2
	mov di, [eax+ebp-2]
	inc edx
	mov [ecx+22h], di
	test eax, eax
	jl loc_4BCF2C
	mov [ebx+20h], dx
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BCD84 endp

sub_4BCF54: ;SUBROUTINE
	mov dword [eax+1Ch], 0
	mov word [eax+20h], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov word [eax+0Ah], 0
	mov word [eax+8], 0
	mov [eax+14h], edx
	mov [eax+18h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BCD84
	mov eax, [esp+0Ch]
	mov dword [eax], sub_4BCD80
	mov eax, 90h
	ret 0Ch
;sub_4BCF54 endp

sub_4BCFA0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, eax
	mov [esp+4], edx
	mov [esp], ecx
	mov edi, ebx
	mov edx, [ecx]
	cmp eax, ebx
	jge loc_4BCFB9
	mov edi, eax

loc_4BCFB9:
	xor eax, eax
	test edi, edi
	jle loc_4BCFE0
	mov ecx, [esp+4]

loc_4BCFC3:
	add edx, 2
	mov bx, [ecx]
	add ecx, 4
	mov [edx-2], bx
	add edx, 2
	mov bx, [ecx-2]
	inc eax
	mov [edx-2], bx
	cmp eax, edi
	jl loc_4BCFC3

loc_4BCFE0:
	cmp eax, ebp
	jge loc_4BD00C
	mov ecx, [esp+4]
	lea ebx, 0[eax*4]
	add ebx, ecx

loc_4BCFF1:
	mov si, [ebx]
	add ebx, 4
	mov [ecx], si
	add ecx, 4
	mov si, [ebx-2]
	inc eax
	mov [ecx-2], si
	cmp eax, ebp
	jl loc_4BCFF1

loc_4BD00C:
	mov eax, [esp]
	mov [eax], edx
	mov eax, edi
	add esp, 8
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BCFA0 endp

sub_4BD01C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 7Ch
	mov edi, edx
	mov edx, [ebx]
	mov esi, eax
	mov [eax+10h], edx
	test edi, edi
	jle loc_4BD089
	lea edx, [eax+10h]
	mov [esp+74h], edx
	lea ebp, [eax+2Ch]

loc_4BD03A:
	cmp word [esi+28h], 0
	jnz loc_4BD0A5
	mov eax, [esi+1Ch]
	mov ecx, [esi+24h]
	add eax, 1Bh
	cmp eax, ecx
	jge loc_4BD0C6
	imul edx, [esi+1Ch], 1Eh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C22F0
	mov eax, [esi+1Ch]
	sub edi, 1Ch
	add eax, 1Ch
	add esp, 4
	mov [esi+1Ch], eax

loc_4BD085:
	test edi, edi
	jg loc_4BD03A

loc_4BD089:
	lea eax, 0[edi*4]
	add [esi+10h], eax
	test edi, edi
	jl loc_4BD1FE
	xor eax, eax
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD0A5:
	mov ecx, [esp+74h]
	mov ebx, edi
	mov eax, [esi+26h]
	mov edx, ebp
	sar eax, 10h
	call sub_4BCFA0
	mov bx, [esi+28h]
	sub ebx, eax
	sub edi, eax
	mov [esi+28h], bx
	jmp loc_4BD085

loc_4BD0C6:
	imul edx, [esi+1Ch], 1Eh
	mov eax, [esi+10h]
	mov ecx, 1Ch
	mov [esp+70h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [esi], 1Ch
	mov edx, [esi+14h]
	mov [esi+10h], ebp
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C22F0
	add dword [esi+1Ch], 1Ch
	mov bx, [esi+24h]
	mov ax, [esi+1Ch]
	mov edx, 1Ch
	sub eax, ebx
	sub edx, eax
	mov ax, [esi+108h]
	mov [esi+28h], dx
	mov [esi+6], ax
	mov ax, [esi+10Ah]
	mov [esi+4], ax
	mov ax, [esi+10Ch]
	mov [esi+0Ah], ax
	mov ax, [esi+10Eh]
	mov ecx, edx
	mov [esi+8], ax
	inc ecx
	mov eax, [esi+20h]
	mov [esi+28h], cx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	imul eax, ecx
	mov [esi+1Ch], eax
	mov eax, [esi+20h]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	add esp, 4
	test edx, edx
	jz loc_4BD1F2
	mov [esi], ecx
	imul edx, [esi+1Ch], 1Eh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	add edx, eax
	mov eax, esp
	mov [esi+0Ch], edx
	push esi
	mov [esi+10h], eax
	call sub_4C22F0
	mov ebx, [esi+1Ch]
	add ebx, 1Ch
	mov edx, [esi+20h]
	mov eax, ebx
	add esp, 4
	sub eax, edx
	mov edx, 38h
	mov [esp+78h], eax
	add eax, eax
	sub edx, eax
	lea eax, [edx+edx]
	mov [esi+1Ch], ebx
	mov edx, esp
	mov ecx, [esp+78h]
	add eax, edx
	xor edx, edx
	test ecx, ecx
	jle loc_4BD1F2

loc_4BD1C0:
	mov ecx, [esi+26h]
	sar ecx, 10h
	mov bx, [eax]
	mov [esi+ecx*4+2Ch], bx
	mov ecx, [esi+26h]
	sar ecx, 10h
	mov bx, [eax+2]
	mov [esi+ecx*4+2Eh], bx
	add eax, 4
	mov bx, [esi+28h]
	inc edx
	inc ebx
	mov ecx, [esp+78h]
	mov [esi+28h], bx
	cmp edx, ecx
	jl loc_4BD1C0

loc_4BD1F2:
	mov eax, [esp+70h]
	mov [esi+10h], eax
	jmp loc_4BD085

loc_4BD1FE:
	mov eax, [esi+26h]
	sar eax, 10h
	shl eax, 2
	mov edx, [esi+10h]
	lea ecx, [esi+eax]
	mov ax, [edx]
	mov [ecx+2Ch], ax
	mov eax, [esi+26h]
	sar eax, 10h
	shl eax, 2
	mov edx, [esi+10h]
	lea ecx, [esi+eax]
	mov ax, [edx+2]
	mov [ecx+2Eh], ax
	mov edx, [esi+10h]
	mov cx, [esi+28h]
	add edx, 4
	inc ecx
	mov [esi+10h], edx
	inc edi
	mov [esi+28h], cx
	test edi, edi
	jl loc_4BD1FE
	xor eax, eax
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BD01C endp

sub_4BD24C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 8
	mov ebp, edx
	mov edx, [ebx]
	mov [eax+10h], edx
	mov edx, [eax+26h]
	sar edx, 10h
	mov esi, eax
	cmp ebp, edx
	jle loc_4BD29E
	mov edi, 4
	xor ebx, ebx

loc_4BD26D:
	mov edx, [esi+26h]
	sar edx, 10h
	cmp ebx, edx
	jge loc_4BD31D
	mov edx, [esi+10h]
	mov cx, [eax+2Ch]
	mov [edx], cx
	mov edx, [esi+10h]
	mov cx, [eax+2Eh]
	mov [edx+2], cx
	mov ecx, [esi+10h]
	add eax, 4
	add ecx, edi
	inc ebx
	mov [esi+10h], ecx
	jmp loc_4BD26D

loc_4BD29E:
	xor ebx, ebx
	test ebp, ebp
	jle loc_4BD2CC

loc_4BD2A4:
	mov edx, [esi+10h]
	mov cx, [eax+2Ch]
	mov [edx], cx
	mov ecx, [esi+10h]
	mov dx, [eax+2Eh]
	mov [ecx+2], dx
	mov edi, [esi+10h]
	add eax, 4
	add edi, 4
	inc ebx
	mov [esi+10h], edi
	cmp ebx, ebp
	jl loc_4BD2A4

loc_4BD2CC:
	mov eax, esi
	xor ebp, ebp
	lea edx, 0[ebx*4]
	mov [esp+4], ebp
	add edx, esi

loc_4BD2DD:
	mov ecx, [esi+26h]
	sar ecx, 10h
	cmp ebx, ecx
	jge loc_4BD309
	mov cx, [edx+2Ch]
	mov [eax+2Ch], cx
	add eax, 4
	mov cx, [edx+2Eh]
	mov [eax+2Ah], cx
	mov ecx, [esp+4]
	add edx, 4
	inc ecx
	inc ebx
	mov [esp+4], ecx
	jmp loc_4BD2DD

loc_4BD309:
	mov eax, [esp+4]
	xor edx, edx
	mov [esi+28h], ax
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD31D:
	mov eax, [esi+20h]
	sub ebp, edx
	sub eax, [esi+1Ch]
	sub eax, 1Ch
	cmp ebp, eax
	jge loc_4BD411
	mov [esp+4], ebp

loc_4BD334:
	cmp dword [esp+4], 0
	jl loc_4BD41A

loc_4BD33F:
	mov eax, [esp+4]
	mov [esi], eax
	mov eax, [esi+1Ch]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C22F0
	add esp, 4
	mov edi, [esi+1Ch]
	add edi, [esp+4]
	xor ebx, ebx
	mov edx, edi
	mov eax, [esi]
	mov [esi+1Ch], edi
	sub edx, eax
	mov eax, [esi]
	mov [esi+1Ch], edx
	mov [esp], eax
	lea ecx, 0[eax*4]
	xor edx, edx
	mov eax, ecx
	test ecx, ecx

loc_4BD398:
	jl loc_4BD425
	mov eax, [esi+10h]
	mov [esi+28h], bx
	sub eax, edx
	mov [esi+10h], eax
	mov ecx, [esi+1Ch]
	mov eax, [esi+20h]
	mov edx, [esp+4]
	sub eax, ecx
	sub ebp, edx
	cmp eax, 1Ch
	jge loc_4BD405
	mov ax, [esi+6]
	mov [esi+108h], ax
	mov ax, [esi+4]
	mov [esi+10Ah], ax
	mov ax, [esi+0Ah]
	mov [esi+10Ch], ax
	mov ax, [esi+8]
	mov [esi+10Eh], ax
	mov eax, [esi+110h]
	mov dword [eax], sub_4BD01C
	test ebp, ebp
	jle loc_4BD405
	lea ebx, [esi+10h]
	mov edx, ebp
	mov eax, esi
	call sub_4BD01C

loc_4BD405:
	xor edx, edx
	mov eax, edx
	add esp, 8
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD411:
	mov [esp+4], eax
	jmp loc_4BD334

loc_4BD41A:
	xor ebx, ebx
	mov [esp+4], ebx
	jmp loc_4BD33F

loc_4BD425:
	mov ecx, [esi+10h]
	lea edi, [ecx+eax]
	lea ecx, [esi+edx]
	mov di, [edi]
	mov [ecx+2Ch], di
	mov edi, [esi+10h]
	mov di, [edi+eax+2]
	inc ebx
	mov [ecx+2Eh], di
	mov edi, [esp]
	add eax, 4
	inc edi
	add edx, 4
	mov [esp], edi
	test eax, eax
	jmp loc_4BD398
;sub_4BD24C endp

sub_4BD458: ;SUBROUTINE
	mov dword [eax+1Ch], 0
	mov word [eax+28h], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov word [eax+0Ah], 0
	mov word [eax+8], 0
	mov [eax+14h], edx
	mov [eax+18h], ebx
	mov [eax+20h], ecx
	mov edx, [esp+4]
	mov [eax+24h], edx
	mov edx, [esp+8]
	mov [eax+110h], edx
	mov eax, [esp+0Ch]
	mov dword [edx], sub_4BD24C
	mov dword [eax], 0
	mov eax, 114h
	ret 0Ch
;sub_4BD458 endp

sub_4BD4B0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, edx
	mov edx, [eax+14h]
	mov esi, eax
	test edx, edx
	jz loc_4BD552
	push ecx
	mov edx, [ebx]
	mov [eax+10h], edx
	test edi, edi
	jle loc_4BD536
	lea edx, [eax+10h]
	mov [esp+4], edx
	lea edx, [eax+24h]
	lea ebp, [eax+18h]
	add eax, 14h
	mov [esp+0Ch], edx
	mov [esp+8], eax

loc_4BD4E7:
	mov ebx, [esi+20h]
	test ebx, ebx
	jnz loc_4BD559
	mov eax, [esi+1Ch]
	mov edx, [esi+18h]
	add eax, 1Bh
	cmp eax, edx
	jge loc_4BD576
	imul edx, [esi+1Ch], 1Eh
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+14h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C22F0
	mov ebx, [esi+1Ch]
	sub edi, 1Ch
	add ebx, 1Ch
	add esp, 4
	mov [esi+1Ch], ebx

loc_4BD532:
	test edi, edi
	jg loc_4BD4E7

loc_4BD536:
	lea eax, 0[edi*4]
	add [esi+10h], eax
	test edi, edi
	jl loc_4BD62D
	xor eax, eax
	pop ecx

loc_4BD54B:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4BD552:
	mov eax, 0FFFFFFFFh
	jmp loc_4BD54B

loc_4BD559:
	mov ecx, [esp+4]
	mov edx, [esp+0Ch]
	mov eax, ebx
	mov ebx, edi
	call sub_4BCFA0
	mov edx, [esi+20h]
	sub edx, eax
	sub edi, eax
	mov [esi+20h], edx
	jmp loc_4BD532

loc_4BD576:
	cmp dword [esi+14h], 1
	jz loc_4BD5C1
	imul edx, [esi+1Ch], 1Eh
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+14h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C22F0
	mov eax, [esi+1Ch]
	add eax, ebx
	mov edx, [esi+18h]
	mov [esi+1Ch], eax
	sub eax, edx
	mov edx, ebx
	mov ecx, [esi+10h]
	sub edx, eax
	shl eax, 2
	add esp, 4
	sub ecx, eax
	sub edi, edx
	mov [esi+10h], ecx

loc_4BD5C1:
	mov eax, [esp+8]
	mov edx, ebp
	call dword [dword_4DCFDC]
	mov ebx, [esi+14h]
	test ebx, ebx
	jz loc_4BD608
	mov dx, [ebx]
	mov [esi+6], dx
	mov dx, [ebx+2]
	mov [esi+4], dx
	mov dx, [ebx+4]
	mov [esi+0Ah], dx
	mov ax, [ebx+6]
	mov [esi+8], ax
	mov eax, [esi+14h]
	mov dword [esi+1Ch], 0
	add eax, 8
	mov [esi+14h], eax
	jmp loc_4BD532

loc_4BD608:
	add edi, edi
	test edi, edi
	jle loc_4BD532

loc_4BD612:
	mov eax, [esi+10h]
	mov word [eax], 0
	mov eax, [esi+10h]
	add eax, 2
	dec edi
	mov [esi+10h], eax
	test edi, edi
	jg loc_4BD612
	jmp loc_4BD532

loc_4BD62D:
	mov edx, [esi+10h]
	mov eax, [esi+20h]
	mov dx, [edx]
	mov [esi+eax*4+24h], dx
	mov edx, [esi+10h]
	mov eax, [esi+20h]
	mov dx, [edx+2]
	mov [esi+eax*4+26h], dx
	mov ecx, [esi+10h]
	mov ebx, [esi+20h]
	add ecx, 4
	inc ebx
	mov [esi+10h], ecx
	inc edi
	mov [esi+20h], ebx
	test edi, edi
	jl loc_4BD62D
	xor eax, eax
	pop ecx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BD4B0 endp

sub_4BD66C: ;SUBROUTINE
	mov dword [eax+14h], 1
	mov dword [eax+1Ch], 0
	mov dword [eax+20h], 0
	mov word [eax+6], 0
	mov word [eax+4], 0
	mov word [eax+0Ah], 0
	mov word [eax+8], 0
	mov [eax+18h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BD4B0
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, 90h
	ret 0Ch
;sub_4BD66C endp

sub_4BD6C0: ;SUBROUTINE
	mov eax, [eax+1Ch]
	ret
;sub_4BD6C0 endp

sub_4BD6C4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov eax, ebx
	mov edx, [ecx+1Ch]
	mov edi, [ecx+18h]
	mov ebx, ecx
	cmp edx, edi
	jge loc_4BD73E
	mov eax, [eax]
	mov ebp, [ecx+20h]
	mov [ecx+10h], eax
	cmp esi, ebp
	jg loc_4BD748
	xor eax, eax
	test esi, esi
	jle loc_4BD708
	mov edx, ecx

loc_4BD6EE:
	mov ecx, [ebx+10h]
	mov edi, [edx+24h]
	mov [ecx], edi
	mov ecx, [ebx+10h]
	add edx, 4
	add ecx, 4
	inc eax
	mov [ebx+10h], ecx
	cmp eax, esi
	jl loc_4BD6EE
	nop

loc_4BD708:
	mov esi, [ebx+20h]
	xor ecx, ecx
	cmp eax, esi
	jge loc_4BD734
	lea edx, 0[eax*4]
	mov esi, ebx
	add edx, ebx

loc_4BD71C:
	fld dword [edx+24h]
	inc ecx
	inc eax
	fstp dword [esi+24h]
	add esi, 4
	mov edi, [ebx+20h]
	add edx, 4
	cmp eax, edi
	jl loc_4BD71C

loc_4BD734:
	xor eax, eax
	mov [ebx+20h], ecx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD73E:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD748:
	xor edx, edx
	test ebp, ebp
	jle loc_4BD76C
	mov eax, ecx

loc_4BD750:
	mov ecx, [ebx+10h]
	fld dword [eax+24h]
	add eax, 4
	fstp dword [ecx]
	mov ecx, [ebx+10h]
	inc edx
	add ecx, 4
	mov edi, [ebx+20h]
	mov [ebx+10h], ecx
	cmp edx, edi
	jl loc_4BD750

loc_4BD76C:
	mov edi, [ebx+18h]
	mov eax, [ebx+1Ch]
	mov ebp, [ebx+20h]
	sub edi, eax
	sub esi, ebp
	test edi, edi
	jl loc_4BD7FF

loc_4BD781:
	cmp esi, edi
	jge loc_4BD806
	mov ebp, esi

loc_4BD78B:
	mov edx, [ebx+1Ch]
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [ebx+14h]
	mov [ebx], ebp
	add edx, eax
	push ebx
	mov [ebx+0Ch], edx
	call sub_4C2580
	mov edx, [ebx+1Ch]
	add edx, ebp
	mov eax, [ebx]
	mov ecx, edx
	mov [ebx+1Ch], edx
	sub ecx, eax
	add esp, 4
	mov [ebx+1Ch], ecx
	cmp edi, ebp
	jnz loc_4BD80A
	mov eax, ecx
	mov edi, [ebx+18h]
	sub esi, ebp
	sub eax, edi
	sub esi, eax
	test esi, esi
	jle loc_4BD7F8

loc_4BD7E1:
	mov eax, [ebx+10h]
	mov dword [eax], 0
	mov ebp, [ebx+10h]
	add ebp, 4
	dec esi
	mov [ebx+10h], ebp
	test esi, esi
	jg loc_4BD7E1

loc_4BD7F8:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD7FF:
	xor edi, edi
	jmp loc_4BD781

loc_4BD806:
	mov ebp, edi
	jmp loc_4BD78B

loc_4BD80A:
	mov esi, [ebx]
	xor ecx, ecx
	test esi, esi
	jl loc_4BD81C
	mov [ebx+20h], ecx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD81C:
	mov edx, ebx
	lea eax, 0[esi*4]

loc_4BD825:
	add eax, 4
	inc esi
	mov edi, [ebx+10h]
	add edx, 4
	inc ecx
	mov ebp, [edi+eax-4]
	mov [edx+20h], ebp
	test eax, eax
	jl loc_4BD825
	mov [ebx+20h], ecx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BD6C4 endp

sub_4BD848: ;SUBROUTINE
	mov dword [eax+1Ch], 0
	mov dword [eax+20h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov [eax+14h], edx
	mov [eax+18h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BD6C4
	mov eax, [esp+0Ch]
	mov dword [eax], sub_4BD6C0
	mov eax, 90h
	ret 0Ch
;sub_4BD848 endp

sub_4BD890: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, eax
	mov [esp], edx
	mov ebp, ecx
	mov esi, ebx
	mov edx, [ecx]
	cmp eax, ebx
	jge loc_4BD8A7
	mov esi, eax

loc_4BD8A7:
	xor eax, eax
	test esi, esi
	jle loc_4BD8C0
	mov ecx, [esp]

loc_4BD8B0:
	fld dword [ecx]
	add edx, 4
	add ecx, 4
	inc eax
	fstp dword [edx-4]
	cmp eax, esi
	jl loc_4BD8B0

loc_4BD8C0:
	cmp eax, edi
	jge loc_4BD8E0
	mov ebx, [esp]
	lea ecx, 0[eax*4]
	add ecx, ebx

loc_4BD8D0:
	fld dword [ecx]
	add ebx, 4
	add ecx, 4
	inc eax
	fstp dword [ebx-4]
	cmp eax, edi
	jl loc_4BD8D0

loc_4BD8E0:
	mov eax, esi
	mov [ebp+0], edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BD890 endp

sub_4BD8EC: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 7Ch
	mov edi, edx
	mov edx, [ebx]
	mov esi, eax
	mov [eax+10h], edx
	test edi, edi
	jle loc_4BD955
	lea edx, [eax+10h]
	mov [esp+74h], edx
	lea ebp, [eax+2Ch]

loc_4BD90A:
	mov ecx, [esi+28h]
	test ecx, ecx
	jnz loc_4BD971
	mov eax, [esi+1Ch]
	mov ebx, [esi+24h]
	add eax, 1Bh
	cmp eax, ebx
	jge loc_4BD98C
	imul edx, [esi+1Ch], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C2580
	mov eax, [esi+1Ch]
	sub edi, 1Ch
	add eax, 1Ch
	add esp, 4
	mov [esi+1Ch], eax

loc_4BD951:
	test edi, edi
	jg loc_4BD90A

loc_4BD955:
	lea eax, 0[edi*4]
	add [esi+10h], eax
	test edi, edi
	jl loc_4BDA8B
	xor eax, eax
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BD971:
	mov eax, ecx
	mov ebx, edi
	mov edx, ebp
	mov ecx, [esp+74h]
	call sub_4BD890
	mov edx, [esi+28h]
	sub edx, eax
	sub edi, eax
	mov [esi+28h], edx
	jmp loc_4BD951

loc_4BD98C:
	mov eax, [esi+10h]
	mov [esp+70h], eax
	imul edx, [esi+1Ch], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [esi], 1Ch
	mov edx, [esi+14h]
	mov [esi+10h], ebp
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C2580
	mov edx, [esi+1Ch]
	add edx, 1Ch
	mov ecx, [esi+24h]
	mov eax, edx
	mov [esi+1Ch], edx
	mov edx, 1Ch
	sub eax, ecx
	sub edx, eax
	mov eax, [esi+20h]
	mov [esi+28h], edx
	lea ebx, [edx+1]
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	imul eax, ecx
	mov [esi+1Ch], eax
	mov eax, [esi+20h]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	fld dword [esi+108h]
	add esp, 4
	fstp dword [esi+4]
	mov eax, [esi+10Ch]
	mov [esi+8], eax
	mov [esi+28h], ebx
	test edx, edx
	jz loc_4BDA7F
	mov eax, [esi+1Ch]
	imul edx, eax, 0Fh
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	mov [esi], ecx
	add edx, eax
	mov eax, esp
	mov [esi+0Ch], edx
	push esi
	mov [esi+10h], eax
	call sub_4C2580
	mov edx, [esi+1Ch]
	add edx, 1Ch
	mov ecx, [esi+20h]
	mov eax, edx
	add esp, 4
	sub eax, ecx
	mov [esp+78h], eax
	mov eax, 1Ch
	mov ebx, [esp+78h]
	mov [esi+1Ch], edx
	sub eax, ebx
	mov edx, esp
	shl eax, 2
	add eax, edx
	xor edx, edx
	test ebx, ebx
	jle loc_4BDA7F
	mov ebx, [esp+78h]

loc_4BDA67:
	mov ecx, [esi+28h]
	fld dword [eax]
	fstp dword [esi+ecx*4+2Ch]
	mov ecx, [esi+28h]
	add eax, 4
	inc ecx
	inc edx
	mov [esi+28h], ecx
	cmp edx, ebx
	jl loc_4BDA67

loc_4BDA7F:
	mov eax, [esp+70h]
	mov [esi+10h], eax
	jmp loc_4BD951

loc_4BDA8B:
	mov edx, [esi+10h]
	mov eax, [esi+28h]
	mov ecx, [edx]
	mov [esi+eax*4+2Ch], ecx
	mov ecx, [esi+10h]
	mov ebx, [esi+28h]
	add ecx, 4
	inc ebx
	mov [esi+10h], ecx
	inc edi
	mov [esi+28h], ebx
	test edi, edi
	jl loc_4BDA8B
	xor eax, eax
	add esp, 7Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BD8EC endp

sub_4BDAB8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov ecx, eax
	mov [esp+4], edx
	mov esi, eax
	mov eax, [ebx]
	mov [ecx+10h], eax
	mov eax, edx
	cmp eax, [ecx+28h]
	jg loc_4BDB35
	mov edi, [esp+4]
	xor eax, eax
	test edi, edi
	jle loc_4BDAFC
	mov edi, [esp+4]
	mov edx, ecx

loc_4BDAE3:
	mov ecx, [esi+10h]
	mov ebx, [edx+2Ch]
	mov [ecx], ebx
	mov ebx, [esi+10h]
	add edx, 4
	add ebx, 4
	inc eax
	mov [esi+10h], ebx
	cmp eax, edi
	jl loc_4BDAE3

loc_4BDAFC:
	mov ebp, [esi+28h]
	xor ebx, ebx
	cmp eax, ebp
	jge loc_4BDB28
	lea edx, 0[eax*4]
	mov ecx, esi
	add edx, esi

loc_4BDB10:
	fld dword [edx+2Ch]
	inc ebx
	inc eax
	fstp dword [ecx+2Ch]
	add ecx, 4
	mov edi, [esi+28h]
	add edx, 4
	cmp eax, edi
	jl loc_4BDB10

loc_4BDB28:
	xor eax, eax
	mov [esi+28h], ebx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BDB35:
	mov ebx, [ecx+28h]
	xor edx, edx
	test ebx, ebx
	jle loc_4BDB5C
	mov eax, ecx

loc_4BDB40:
	mov ecx, [esi+10h]
	fld dword [eax+2Ch]
	add eax, 4
	fstp dword [ecx]
	mov ebp, [esi+10h]
	inc edx
	add ebp, 4
	mov ecx, [esi+28h]
	mov [esi+10h], ebp
	cmp edx, ecx
	jl loc_4BDB40

loc_4BDB5C:
	mov ebx, [esp+4]
	mov eax, [esi+28h]
	mov edi, [esi+1Ch]
	sub ebx, eax
	mov eax, [esi+20h]
	sub eax, edi
	sub eax, 1Ch
	mov [esp+4], ebx
	cmp eax, ebx
	jle loc_4BDC43
	mov [esp], ebx

loc_4BDB7F:
	cmp dword [esp], 0
	jl loc_4BDC4B

loc_4BDB89:
	mov eax, [esp]
	mov edx, [esi+1Ch]
	mov [esi], eax
	lea eax, 0[edx*4]
	add eax, edx
	mov edx, eax
	shl eax, 2
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C2580
	add esp, 4
	mov ecx, [esi+1Ch]
	mov eax, [esp]
	add ecx, eax
	mov ebx, ecx
	mov eax, [esi]
	mov [esi+1Ch], ecx
	sub ebx, eax
	mov [esi+1Ch], ebx
	mov ebx, [esi]
	xor edx, edx
	lea edi, 0[ebx*4]
	xor ecx, ecx
	mov eax, edi
	test edi, edi
	nop

loc_4BDBE4:
	jl loc_4BDC55
	mov eax, [esp]
	mov ebp, [esp+4]
	mov edi, [esi+10h]
	mov [esi+28h], ecx
	sub edi, edx
	sub ebp, eax
	mov eax, [esi+20h]
	mov edx, [esi+1Ch]
	mov [esp+4], ebp
	sub eax, edx
	mov [esi+10h], edi
	cmp eax, 1Ch
	jge loc_4BDC39
	fld dword [esi+4]
	mov eax, [esi+110h]
	fstp dword [esi+108h]
	mov edx, [esi+8]
	mov [esi+10Ch], edx
	mov dword [eax], sub_4BD8EC
	test ebp, ebp
	jle loc_4BDC39
	lea ebx, [esi+10h]
	mov edx, ebp
	mov eax, esi
	call sub_4BD8EC

loc_4BDC39:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BDC43:
	mov [esp], eax
	jmp loc_4BDB7F

loc_4BDC4B:
	xor edx, edx
	mov [esp], edx
	jmp loc_4BDB89

loc_4BDC55:
	mov edi, [esi+10h]
	add edi, eax
	inc ebx
	mov [esp+8], edi
	inc ecx
	mov ebp, [esp+8]
	add eax, 4
	lea edi, [esi+edx]
	fld dword [ebp+0]
	add edx, 4
	fstp dword [edi+2Ch]
	test eax, eax
	jmp loc_4BDBE4
;sub_4BDAB8 endp

sub_4BDC7C: ;SUBROUTINE
	mov dword [eax+1Ch], 0
	mov dword [eax+28h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov [eax+14h], edx
	mov [eax+18h], ebx
	mov [eax+20h], ecx
	mov edx, [esp+4]
	mov [eax+24h], edx
	mov edx, [esp+8]
	mov [eax+110h], edx
	mov eax, [esp+0Ch]
	mov dword [edx], sub_4BDAB8
	mov dword [eax], 0
	mov eax, 114h
	ret 0Ch
;sub_4BDC7C endp

sub_4BDCD0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, edx
	mov edx, [eax+14h]
	mov esi, eax
	test edx, edx
	jz loc_4BDD99
	push ecx
	mov edx, [ebx]
	mov [eax+10h], edx
	test edi, edi
	jle loc_4BDD7D
	lea ebp, [eax+10h]
	lea edx, [eax+24h]
	mov [esp+8], edx
	lea edx, [eax+18h]
	add eax, 14h
	mov [esp+4], edx
	mov [esp+0Ch], eax

loc_4BDD0B:
	mov ebx, [esi+20h]
	test ebx, ebx
	jnz loc_4BDDA5
	mov eax, [esi+1Ch]
	mov edx, [esi+18h]
	add eax, 1Bh
	cmp eax, edx
	jge loc_4BDDC0
	sub edx, [esi+1Ch]
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov ebx, eax
	imul ebx, ecx
	cmp edi, ebx
	jge loc_4BDD4C
	lea edx, [edi+1Bh]
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	imul ebx, eax, 1Ch

loc_4BDD4C:
	imul edx, [esi+1Ch], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	mov [esi], ebx
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C2580
	mov edx, [esi+1Ch]
	sub edi, ebx
	add edx, ebx
	add esp, 4
	mov [esi+1Ch], edx

loc_4BDD79:
	test edi, edi
	jg loc_4BDD0B

loc_4BDD7D:
	lea eax, 0[edi*4]
	add [esi+10h], eax
	test edi, edi
	jl loc_4BDE66
	xor eax, eax
	pop ecx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4BDD99:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4BDDA5:
	mov edx, [esp+8]
	mov eax, ebx
	mov ecx, ebp
	mov ebx, edi
	call sub_4BD890
	mov ecx, [esi+20h]
	sub ecx, eax
	sub edi, eax
	mov [esi+20h], ecx
	jmp loc_4BDD79

loc_4BDDC0:
	cmp dword [esi+14h], 1
	jz loc_4BDE14
	cmp edx, [esi+1Ch]
	jle loc_4BDE14
	imul edx, [esi+1Ch], 0Fh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+14h]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+0Ch], edx
	call sub_4C2580
	mov edx, [esi+1Ch]
	mov eax, 1Ch
	add edx, 1Ch
	mov ecx, [esi+18h]
	mov [esi+1Ch], edx
	sub edx, ecx
	mov ebx, [esi+10h]
	sub eax, edx
	shl edx, 2
	add esp, 4
	sub ebx, edx
	sub edi, eax
	mov [esi+10h], ebx

loc_4BDE14:
	mov edx, [esp+4]
	mov eax, [esp+0Ch]
	call dword [dword_4DCFDC]
	mov eax, [esi+14h]
	test eax, eax
	jnz loc_4BDE46

loc_4BDE29:
	test edi, edi
	jle loc_4BDD79
	mov eax, [esi+10h]
	mov dword [eax], 0
	mov eax, [esi+10h]
	add eax, 4
	dec edi
	mov [esi+10h], eax
	jmp loc_4BDE29

loc_4BDE46:
	fild word [eax]
	mov edx, [esi+14h]
	fstp dword [esi+4]
	fild word [eax+2]
	mov dword [esi+1Ch], 0
	add edx, 8
	fstp dword [esi+8]
	mov [esi+14h], edx
	jmp loc_4BDD79

loc_4BDE66:
	mov edx, [esi+10h]
	mov eax, [esi+20h]
	mov ecx, [edx]
	mov [esi+eax*4+24h], ecx
	mov ebx, [esi+10h]
	mov ebp, [esi+20h]
	add ebx, 4
	inc ebp
	mov [esi+10h], ebx
	inc edi
	mov [esi+20h], ebp
	test edi, edi
	jl loc_4BDE66
	xor eax, eax
	pop ecx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BDCD0 endp

sub_4BDE94: ;SUBROUTINE
	mov dword [eax+14h], 1
	mov dword [eax+1Ch], 0
	mov dword [eax+20h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov [eax+18h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BDCD0
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, 90h
	ret 0Ch
;sub_4BDE94 endp

sub_4BDEE0: ;SUBROUTINE
	mov eax, [eax+24h]
	ret
;sub_4BDEE0 endp

sub_4BDEE4: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov ecx, eax
	mov esi, edx
	mov eax, ebx
	mov edx, [ecx+24h]
	mov edi, [ecx+20h]
	mov ebx, ecx
	cmp edx, edi
	jge loc_4BDF66
	mov eax, [eax]
	mov [ecx+18h], eax
	mov eax, [ecx+28h]
	sar eax, 1
	cmp esi, eax
	jg loc_4BDF70
	add esi, esi
	xor edx, edx
	test esi, esi
	jle loc_4BDF30
	mov eax, ecx

loc_4BDF16:
	mov ecx, [ebx+18h]
	mov edi, [eax+2Ch]
	mov [ecx], edi
	mov ecx, [ebx+18h]
	add eax, 4
	add ecx, 4
	inc edx
	mov [ebx+18h], ecx
	cmp edx, esi
	jl loc_4BDF16
	nop

loc_4BDF30:
	mov esi, [ebx+28h]
	xor ecx, ecx
	cmp edx, esi
	jge loc_4BDF5C
	lea esi, 0[edx*4]
	mov eax, ebx
	add esi, ebx

loc_4BDF44:
	fld dword [esi+2Ch]
	inc ecx
	inc edx
	fstp dword [eax+2Ch]
	add eax, 4
	mov edi, [ebx+28h]
	add esi, 4
	cmp edx, edi
	jl loc_4BDF44

loc_4BDF5C:
	xor eax, eax
	mov [ebx+28h], ecx
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BDF66:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BDF70:
	mov ebp, [ecx+28h]
	xor eax, eax
	test ebp, ebp
	jle loc_4BDF98
	mov edx, ecx

loc_4BDF7B:
	mov ecx, [ebx+18h]
	fld dword [edx+2Ch]
	add edx, 4
	fstp dword [ecx]
	mov ecx, [ebx+18h]
	inc eax
	add ecx, 4
	mov edi, [ebx+28h]
	mov [ebx+18h], ecx
	cmp eax, edi
	jl loc_4BDF7B
	nop

loc_4BDF98:
	mov eax, [ebx+28h]
	sar eax, 1
	mov ebp, [ebx+20h]
	sub esi, eax
	sub ebp, [ebx+24h]
	test ebp, ebp
	jl loc_4BE027

loc_4BDFAD:
	cmp esi, ebp
	jge loc_4BE02B
	mov edi, esi

loc_4BDFB7:
	mov eax, [ebx+24h]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [ebx+1Ch]
	mov [ebx], edi
	add edx, eax
	push ebx
	mov [ebx+14h], edx
	call sub_4C2668
	mov edx, [ebx+24h]
	add edx, edi
	mov eax, [ebx]
	mov ecx, edx
	mov [ebx+24h], edx
	sub ecx, eax
	add esp, 4
	mov [ebx+24h], ecx
	cmp ebp, edi
	jnz loc_4BE02F
	mov eax, ecx
	sub esi, edi
	sub eax, [ebx+20h]
	sub esi, eax
	add esi, esi
	test esi, esi
	jle loc_4BE020

loc_4BE006:
	mov eax, [ebx+18h]
	mov dword [eax], 0
	mov ebp, [ebx+18h]
	add ebp, 4
	dec esi
	mov [ebx+18h], ebp
	test esi, esi
	jg loc_4BE006

loc_4BE020:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE027:
	xor ebp, ebp
	jmp loc_4BDFAD

loc_4BE02B:
	mov edi, ebp
	jmp loc_4BDFB7

loc_4BE02F:
	mov ecx, 1Ch
	mov edx, esi
	mov eax, esi
	sar edx, 1Fh
	idiv ecx
	mov esi, ecx
	sub esi, edx
	imul esi, -1
	cmp esi, 0FFFFFFE4h
	jnz loc_4BE04B
	xor esi, esi

loc_4BE04B:
	add esi, esi
	xor ecx, ecx
	test esi, esi
	jl loc_4BE05D
	mov [ebx+28h], ecx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE05D:
	mov eax, ebx
	lea edx, 0[esi*4]

loc_4BE066:
	add edx, 4
	inc esi
	mov edi, [ebx+18h]
	add eax, 4
	inc ecx
	mov ebp, [edx+edi-4]
	mov [eax+28h], ebp
	test edx, edx
	jl loc_4BE066
	mov [ebx+28h], ecx
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4BDEE4 endp

sub_4BE088: ;SUBROUTINE
	mov dword [eax+24h], 0
	mov dword [eax+28h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov dword [eax+0Ch], 0
	mov dword [eax+10h], 0
	mov [eax+1Ch], edx
	mov [eax+20h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BDEE4
	mov eax, [esp+0Ch]
	mov dword [eax], sub_4BDEE0
	mov eax, 104h
	ret 0Ch
;sub_4BE088 endp

sub_4BE0E0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 4
	mov esi, eax
	mov [esp], edx
	mov ebp, ecx
	mov edi, ebx
	mov edx, [ecx]
	cmp eax, ebx
	jge loc_4BE0F7
	mov edi, eax

loc_4BE0F7:
	xor eax, eax
	test edi, edi
	jle loc_4BE11C
	mov ecx, [esp]

loc_4BE100:
	fld dword [ecx]
	add edx, 4
	add ecx, 8
	inc eax
	fstp dword [edx-4]
	add edx, 4
	mov ebx, [ecx-4]
	mov [edx-4], ebx
	cmp eax, edi
	jl loc_4BE100

loc_4BE11C:
	cmp eax, esi
	jge loc_4BE144
	mov ecx, [esp]
	lea ebx, 0[eax*8]
	add ebx, ecx

loc_4BE12C:
	fld dword [ebx]
	add ebx, 8
	inc eax
	fstp dword [ecx]
	add ecx, 8
	fld dword [ebx-4]
	fstp dword [ecx-4]
	cmp eax, esi
	jl loc_4BE12C

loc_4BE144:
	mov eax, edi
	mov [ebp+0], edx
	add esp, 4
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BE0E0 endp

sub_4BE150: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0ECh
	mov edi, edx
	mov edx, [ebx]
	mov esi, eax
	mov [eax+18h], edx
	test edi, edi
	jle loc_4BE1C3
	lea edx, [eax+18h]
	mov [esp+0E4h], edx
	lea ebp, [eax+34h]

loc_4BE174:
	cmp word [esi+30h], 0
	jnz loc_4BE1E5
	mov eax, [esi+24h]
	mov ecx, [esi+2Ch]
	add eax, 1Bh
	cmp eax, ecx
	jge loc_4BE209
	imul edx, [esi+24h], 1Eh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+1Ch]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+14h], edx
	call sub_4C2668
	mov eax, [esi+24h]
	sub edi, 1Ch
	add eax, 1Ch
	add esp, 4
	mov [esi+24h], eax

loc_4BE1BF:
	test edi, edi
	jg loc_4BE174

loc_4BE1C3:
	lea eax, 0[edi*8]
	add [esi+18h], eax

loc_4BE1D0:
	test edi, edi
	jl loc_4BE344
	xor eax, eax
	add esp, 0ECh
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE1E5:
	mov ecx, [esp+0E4h]
	mov ebx, edi
	mov eax, [esi+2Eh]
	mov edx, ebp
	sar eax, 10h
	call sub_4BE0E0
	mov bx, [esi+30h]
	sub ebx, eax
	sub edi, eax
	mov [esi+30h], bx
	jmp loc_4BE1BF

loc_4BE209:
	imul edx, [esi+24h], 1Eh
	mov eax, [esi+18h]
	mov ecx, 1Ch
	mov [esp+0E0h], eax
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov dword [esi], 1Ch
	mov edx, [esi+1Ch]
	mov [esi+18h], ebp
	add edx, eax
	push esi
	mov [esi+14h], edx
	call sub_4C2668
	add dword [esi+24h], 1Ch
	mov bx, [esi+2Ch]
	mov ax, [esi+24h]
	mov edx, 1Ch
	sub eax, ebx
	sub edx, eax
	mov ecx, edx
	mov eax, [esi+28h]
	mov [esi+30h], dx
	mov edx, eax
	inc ecx
	sar edx, 1Fh
	mov [esi+30h], cx
	mov ecx, 1Ch
	idiv ecx
	imul eax, ecx
	mov [esi+24h], eax
	mov eax, [esi+28h]
	mov edx, eax
	sar edx, 1Fh
	idiv ecx
	fld dword [esi+1ECh]
	add esp, 4
	fstp dword [esi+4]
	mov eax, [esi+1F0h]
	mov [esi+8], eax
	mov eax, [esi+1F4h]
	mov [esi+0Ch], eax
	mov eax, [esi+1F8h]
	mov [esi+10h], eax
	test edx, edx
	jz loc_4BE335
	mov [esi], ecx
	imul edx, [esi+24h], 1Eh
	mov ecx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+1Ch]
	add edx, eax
	mov eax, esp
	mov [esi+14h], edx
	push esi
	mov [esi+18h], eax
	call sub_4C2668
	mov ebx, [esi+24h]
	add ebx, 1Ch
	mov edx, [esi+28h]
	mov eax, ebx
	add esp, 4
	sub eax, edx
	mov edx, 38h
	mov [esp+0E8h], eax
	add eax, eax
	mov [esi+24h], ebx
	sub edx, eax
	mov eax, esp
	shl edx, 2
	mov ecx, [esp+0E8h]
	add eax, edx
	xor edx, edx
	test ecx, ecx
	jle loc_4BE335

loc_4BE304:
	mov ecx, [esi+2Eh]
	sar ecx, 10h
	mov ebx, [eax]
	mov [esi+ecx*8+34h], ebx
	mov ecx, [esi+2Eh]
	add eax, 8
	sar ecx, 10h
	mov ebx, [eax-4]
	mov [esi+ecx*8+38h], ebx
	mov bx, [esi+30h]
	inc edx
	inc ebx
	mov ecx, [esp+0E8h]
	mov [esi+30h], bx
	cmp edx, ecx
	jl loc_4BE304

loc_4BE335:
	mov eax, [esp+0E0h]
	mov [esi+18h], eax
	jmp loc_4BE1BF

loc_4BE344:
	mov edx, [esi+2Eh]
	mov eax, [esi+18h]
	sar edx, 10h
	mov ecx, [eax]
	mov [esi+edx*8+34h], ecx
	mov eax, [esi+2Eh]
	mov edx, [esi+18h]
	sar eax, 10h
	mov ecx, [edx+4]
	mov [esi+eax*8+38h], ecx
	mov edx, [esi+18h]
	mov cx, [esi+30h]
	add edx, 8
	inc ecx
	mov [esi+18h], edx
	inc edi
	mov [esi+30h], cx
	jmp loc_4BE1D0
;sub_4BE150 endp

sub_4BE37C: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov [esp], edx
	mov edx, [ebx]
	mov [eax+18h], edx
	mov edx, [eax+2Eh]
	mov ecx, [esp]
	sar edx, 10h
	mov esi, eax
	cmp edx, ecx
	jge loc_4BE3CE
	mov edi, 8
	xor ebx, ebx

loc_4BE3A1:
	mov edx, [esi+2Eh]
	sar edx, 10h
	cmp ebx, edx
	jge loc_4BE439
	mov edx, [esi+18h]
	mov ecx, [eax+34h]
	mov [edx], ecx
	mov edx, [esi+18h]
	mov ecx, [eax+38h]
	mov [edx+4], ecx
	mov ebp, [esi+18h]
	add eax, 8
	add ebp, edi
	inc ebx
	mov [esi+18h], ebp
	jmp loc_4BE3A1

loc_4BE3CE:
	xor ebx, ebx
	test ecx, ecx
	jle loc_4BE3FC
	mov ebp, [esp]

loc_4BE3D7:
	mov edx, [esi+18h]
	mov ecx, [eax+34h]
	mov [edx], ecx
	mov edx, [esi+18h]
	mov ecx, [eax+38h]
	mov [edx+4], ecx
	mov edi, [esi+18h]
	add eax, 8
	add edi, 8
	inc ebx
	mov [esi+18h], edi
	cmp ebx, ebp
	jl loc_4BE3D7

loc_4BE3FC:
	mov eax, esi
	lea edx, 0[ebx*8]
	xor edi, edi
	add edx, esi

loc_4BE409:
	mov ecx, [esi+2Eh]
	sar ecx, 10h
	cmp ebx, ecx
	jge loc_4BE429
	fld dword [edx+34h]
	inc edi
	add edx, 8
	inc ebx
	fstp dword [eax+34h]
	add eax, 8
	mov ecx, [edx+30h]
	mov [eax+30h], ecx
	jmp loc_4BE409

loc_4BE429:
	xor edx, edx
	mov [esi+30h], di
	mov eax, edx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE439:
	mov edi, [esi+28h]
	mov eax, [esi+24h]
	mov ebp, [esp]
	sub edi, eax
	sub ebp, edx
	sub edi, 1Ch
	mov [esp], ebp
	cmp edi, ebp
	jle loc_4BE452
	mov edi, ebp

loc_4BE452:
	test edi, edi
	jl loc_4BE522

loc_4BE45A:
	mov eax, [esi+24h]
	add eax, eax
	mov edx, eax
	shl eax, 4
	sub eax, edx
	mov edx, eax
	mov ecx, 1Ch
	sar edx, 1Fh
	idiv ecx
	mov edx, [esi+1Ch]
	mov [esi], edi
	add edx, eax
	push esi
	mov [esi+14h], edx
	call sub_4C2668
	add esp, 4
	mov ecx, [esi+24h]
	mov eax, [esi]
	add ecx, edi
	xor edx, edx
	mov ebx, ecx
	mov [esi+24h], ecx
	sub ebx, eax
	mov eax, [esi]
	mov [esi+24h], ebx
	mov [esp+4], eax
	lea ecx, 0[eax*8]
	xor ebx, ebx
	mov eax, ecx
	test ecx, ecx
	nop

loc_4BE4AC:
	jl loc_4BE529
	mov eax, [esp]
	mov ebp, [esi+18h]
	sub eax, edi
	sub ebp, edx
	mov [esp], eax
	mov edx, [esi+24h]
	mov eax, [esi+28h]
	mov [esi+30h], bx
	sub eax, edx
	mov [esi+18h], ebp
	cmp eax, 1Ch
	jge loc_4BE516
	fld dword [esi+4]
	mov ecx, [esp]
	mov eax, [esi+1FCh]
	fstp dword [esi+1ECh]
	mov edx, [esi+8]
	mov [esi+1F0h], edx
	mov edx, [esi+0Ch]
	mov [esi+1F4h], edx
	mov edx, [esi+10h]
	mov [esi+1F8h], edx
	mov dword [eax], sub_4BE150
	test ecx, ecx
	jle loc_4BE516
	lea ebx, [esi+18h]
	mov edx, ecx
	mov eax, esi
	call sub_4BE150

loc_4BE516:
	xor edx, edx
	mov eax, edx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE522:
	xor edi, edi
	jmp loc_4BE45A

loc_4BE529:
	mov ecx, [esi+18h]
	add ecx, eax
	mov [esp+8], ecx
	mov ebp, [esp+8]
	lea ecx, [esi+edx]
	fld dword [ebp+0]
	fstp dword [ecx+34h]
	mov ebp, [esi+18h]
	add ebp, eax
	inc ebx
	add edx, 8
	fld dword [ebp+4]
	fstp dword [ecx+38h]
	mov ecx, [esp+4]
	inc ecx
	add eax, 8
	mov [esp+4], ecx
	test eax, eax
	jmp loc_4BE4AC
;sub_4BE37C endp

sub_4BE564: ;SUBROUTINE
	mov dword [eax+24h], 0
	mov word [eax+30h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov dword [eax+0Ch], 0
	mov dword [eax+10h], 0
	mov [eax+1Ch], edx
	mov [eax+20h], ebx
	mov [eax+28h], ecx
	mov edx, [esp+4]
	mov [eax+2Ch], edx
	mov edx, [esp+8]
	mov [eax+1FCh], edx
	mov eax, [esp+0Ch]
	mov dword [edx], sub_4BE37C
	mov dword [eax], 0
	mov eax, 200h
	ret 0Ch
;sub_4BE564 endp

sub_4BE5C0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, edx
	mov edx, [eax+1Ch]
	mov esi, eax
	test edx, edx
	jz loc_4BE662
	push ecx
	mov edx, [ebx]
	mov [eax+18h], edx
	test edi, edi
	jle loc_4BE646
	lea edx, [eax+18h]
	mov [esp+4], edx
	lea edx, [eax+2Ch]
	lea ebp, [eax+20h]
	add eax, 1Ch
	mov [esp+8], edx
	mov [esp+0Ch], eax

loc_4BE5F7:
	mov ebx, [esi+28h]
	test ebx, ebx
	jnz loc_4BE669
	mov eax, [esi+24h]
	mov edx, [esi+20h]
	add eax, 1Bh
	cmp eax, edx
	jge loc_4BE686
	imul edx, [esi+24h], 1Eh
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+1Ch]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+14h], edx
	call sub_4C2668
	mov ebx, [esi+24h]
	sub edi, 1Ch
	add ebx, 1Ch
	add esp, 4
	mov [esi+24h], ebx

loc_4BE642:
	test edi, edi
	jg loc_4BE5F7

loc_4BE646:
	lea eax, 0[edi*8]
	add [esi+18h], eax
	test edi, edi
	jl loc_4BE738
	xor eax, eax
	pop ecx

loc_4BE65B:
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret

loc_4BE662:
	mov eax, 0FFFFFFFFh
	jmp loc_4BE65B

loc_4BE669:
	mov ecx, [esp+4]
	mov edx, [esp+8]
	mov eax, ebx
	mov ebx, edi
	call sub_4BE0E0
	mov edx, [esi+28h]
	sub edx, eax
	sub edi, eax
	mov [esi+28h], edx
	jmp loc_4BE642

loc_4BE686:
	cmp dword [esi+1Ch], 1
	jz loc_4BE6D1
	imul edx, [esi+24h], 1Eh
	mov ebx, 1Ch
	mov eax, edx
	sar edx, 1Fh
	idiv ebx
	mov edx, [esi+1Ch]
	mov dword [esi], 1Ch
	add edx, eax
	push esi
	mov [esi+14h], edx
	call sub_4C2668
	mov eax, [esi+24h]
	add eax, ebx
	mov edx, [esi+20h]
	mov [esi+24h], eax
	sub eax, edx
	mov edx, ebx
	mov ecx, [esi+18h]
	sub edx, eax
	shl eax, 3
	add esp, 4
	sub ecx, eax
	sub edi, edx
	mov [esi+18h], ecx

loc_4BE6D1:
	mov eax, [esp+0Ch]
	mov edx, ebp
	call dword [dword_4DCFDC]
	mov ebx, [esi+1Ch]
	test ebx, ebx
	jz loc_4BE712
	mov eax, ebx
	fild word [eax]
	fstp dword [esi+4]
	fild word [eax+2]
	fstp dword [esi+8]
	fild word [eax+4]
	fstp dword [esi+0Ch]
	fild word [eax+6]
	mov eax, [esi+1Ch]
	mov dword [esi+24h], 0
	add eax, 8
	fstp dword [esi+10h]
	mov [esi+1Ch], eax
	jmp loc_4BE642

loc_4BE712:
	add edi, edi
	test edi, edi
	jle loc_4BE642

loc_4BE71C:
	mov eax, [esi+18h]
	mov dword [eax], 0
	mov eax, [esi+18h]
	add eax, 4
	dec edi
	mov [esi+18h], eax
	test edi, edi
	jg loc_4BE71C
	jmp loc_4BE642

loc_4BE738:
	mov edx, [esi+18h]
	mov eax, [esi+28h]
	mov ecx, [edx]
	mov [esi+eax*8+2Ch], ecx
	mov eax, [esi+18h]
	mov edx, [esi+28h]
	mov ecx, [eax+4]
	mov [esi+edx*8+30h], ecx
	mov ecx, [esi+18h]
	mov ebx, [esi+28h]
	add ecx, 8
	inc ebx
	mov [esi+18h], ecx
	inc edi
	mov [esi+28h], ebx
	test edi, edi
	jl loc_4BE738
	xor eax, eax
	pop ecx
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret
;sub_4BE5C0 endp

sub_4BE770: ;SUBROUTINE
	mov dword [eax+1Ch], 1
	mov dword [eax+24h], 0
	mov dword [eax+28h], 0
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	mov dword [eax+0Ch], 0
	mov dword [eax+10h], 0
	mov [eax+20h], ebx
	mov eax, [esp+8]
	mov dword [eax], sub_4BE5C0
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, 104h
	ret 0Ch
;sub_4BE770 endp

sub_4BE7C0: ;SUBROUTINE
	mov eax, [eax+0D4Ch]
	ret
;sub_4BE7C0 endp

sub_4BE7C8: ;SUBROUTINE
	push ecx
	push esi
	push edi
	mov edi, eax
	mov esi, ebx
	mov eax, edx
	xor ecx, ecx
	test ebx, ebx
	jle loc_4BE80B
	mov edx, edi
	mov ebx, eax

loc_4BE7DB:
	mov eax, [edx]
	and eax, 1FFFFh
	cmp eax, 7FFFh
	jbe loc_4BE7FC
	cmp eax, 18000h
	jnb loc_4BE7FC
	cmp eax, 10000h
	jnb loc_4BE80F
	mov eax, 7FFFh

loc_4BE7FC:
	add ebx, 2
	add edx, 4
	inc ecx
	mov [ebx-2], ax
	cmp ecx, esi
	jl loc_4BE7DB

loc_4BE80B:
	pop edi
	pop esi
	pop ecx
	ret

loc_4BE80F:
	mov eax, 8000h
	jmp loc_4BE7FC
;sub_4BE7C8 endp

sub_4BE818: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, edx
	mov ecx, [eax+0D4Ch]
	mov edx, [eax+0D44h]
	mov edi, eax
	cmp ecx, edx
	jnb loc_4BE921
	push esi
	mov ecx, [ebx]
	mov ebx, [eax+0D4Ch]
	add ebx, ebp
	mov edx, [eax+0D44h]
	mov esi, ebx
	sub esi, edx
	mov [eax+0D4Ch], ebx
	mov [esp+4], esi
	test esi, esi
	jle loc_4BE92D
	sub ebp, esi

loc_4BE85F:
	mov esi, [edi+0D48h]
	cmp ebp, esi
	jge loc_4BE86B
	mov esi, ebp

loc_4BE86B:
	mov eax, 1B0h
	mov edx, [edi+0D48h]
	lea ebx, [edi+684h]
	sub eax, edx
	mov [esp+8], ebx
	shl eax, 2
	mov edx, ecx
	add eax, ebx
	mov ebx, esi
	call sub_4BE7C8
	lea eax, [esi+esi]
	add ecx, eax
	mov eax, [edi+0D48h]
	sub eax, esi
	sub ebp, esi
	mov [edi+0D48h], eax
	test ebp, ebp
	jle loc_4BE908
	mov eax, [esp+8]
	mov [esp+0Ch], eax

loc_4BE8B1:
	mov edx, 1
	mov eax, edi
	mov esi, 1B0h
	call sub_4C3400
	mov dword [edi+0D48h], 1B0h
	cmp ebp, esi
	jge loc_4BE8D2
	mov esi, ebp

loc_4BE8D2:
	mov eax, 1B0h
	sub eax, [edi+0D48h]
	mov ebx, [esp+0Ch]
	shl eax, 2
	mov edx, ecx
	add eax, ebx
	mov ebx, esi
	call sub_4BE7C8
	lea eax, [esi+esi]
	add ecx, eax
	mov eax, [edi+0D48h]
	sub eax, esi
	sub ebp, esi
	mov [edi+0D48h], eax
	test ebp, ebp
	jg loc_4BE8B1

loc_4BE908:
	xor eax, eax
	pop esi

loc_4BE90B:
	mov edx, [esp]
	cmp eax, edx
	jge loc_4BE938
	add ecx, 2
	lea ebx, [edx-1]
	mov [ecx-2], ax
	mov [esp], ebx
	jmp loc_4BE90B

loc_4BE921:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop ebp
	pop edi
	pop ecx
	ret

loc_4BE92D:
	xor eax, eax
	mov [esp+4], eax
	jmp loc_4BE85F

loc_4BE938:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop ecx
	ret
;sub_4BE818 endp

sub_4BE944: ;SUBROUTINE
	push esi
	mov esi, eax
	mov eax, edx
	mov edx, esi
	call sub_4C3314
	mov dword [esi+0D48h], 0
	mov dword [esi+0D4Ch], 0
	mov eax, [esp+0Ch]
	mov [esi+0D44h], ebx
	mov dword [eax], sub_4BE818
	mov eax, [esp+10h]
	mov dword [eax], sub_4BE7C0
	mov eax, 0D50h
	pop esi
	ret 0Ch
;sub_4BE944 endp

sub_4BE990: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov edi, edx
	mov edx, [eax+0D44h]
	mov ecx, eax
	test edx, edx
	jz loc_4BEA5E
	mov ebp, [ebx]
	test edi, edi
	jle loc_4BEA54
	lea ebx, [eax+684h]
	mov [esp+4], ebx
	lea ebx, [eax+0D48h]
	add eax, 0D44h
	mov [esp+8], ebx
	mov [esp], eax

loc_4BE9CF:
	mov eax, [ecx+0D4Ch]
	cmp eax, [ecx+0D48h]
	jge loc_4BEA6B

loc_4BE9E1:
	cmp dword [ecx+0D50h], 0
	jle loc_4BEAFD

loc_4BE9EE:
	mov esi, [ecx+0D48h]
	sub esi, [ecx+0D4Ch]
	cmp edi, esi
	jge loc_4BEA00
	mov esi, edi

loc_4BEA00:
	mov edx, [ecx+0D50h]
	cmp esi, edx
	jle loc_4BEA0C
	mov esi, edx

loc_4BEA0C:
	mov eax, 1B0h
	sub eax, [ecx+0D50h]
	mov edx, [esp+4]
	shl eax, 2
	mov ebx, esi
	add eax, edx
	mov edx, ebp
	call sub_4BE7C8
	mov ebx, [ecx+0D4Ch]
	add ebx, esi
	lea eax, [esi+esi]
	add ebp, eax
	mov eax, [ecx+0D50h]
	mov [ecx+0D4Ch], ebx
	sub eax, esi
	sub edi, esi
	mov [ecx+0D50h], eax
	test edi, edi
	jg loc_4BE9CF

loc_4BEA54:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEA5E:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEA6B:
	mov edx, [esp+8]
	mov eax, [esp]
	call dword [dword_4DCFDC]
	test eax, eax
	jnz loc_4BEAA7
	mov ebx, [ecx+0D44h]
	test ebx, ebx
	jz loc_4BEAA7
	mov dl, [ebx]
	mov eax, ebx
	test dl, dl
	jz loc_4BEAD1
	lea eax, [ebx+1]
	mov edx, ecx
	call sub_4C3314
	mov dword [ecx+0D4Ch], 0
	jmp loc_4BE9E1

loc_4BEAA7:
	lea ebx, [edi+edi]
	mov eax, ebp
	xor edx, edx
	call memset_
	mov dword [ecx+0D4Ch], 0
	mov dword [ecx+0D48h], 0
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEAD1:
	mov al, [ebx+1]
	and eax, 0FFh
	mov [ecx+4], eax
	mov eax, [ecx+0D44h]
	mov dword [ecx+8], 8
	add eax, 2
	mov [ecx], eax
	mov dword [ecx+0D4Ch], 0
	jmp loc_4BE9E1

loc_4BEAFD:
	mov edx, 1
	mov eax, ecx
	call sub_4C3400
	mov dword [ecx+0D50h], 1B0h
	jmp loc_4BE9EE
;sub_4BE990 endp

sub_4BEB18: ;SUBROUTINE
	mov dword [eax+0D44h], 1
	mov dword [eax+0D48h], 0
	mov dword [eax+0D4Ch], 0
	mov dword [eax+0D50h], 0
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, [esp+8]
	mov dword [eax], sub_4BE990
	mov eax, 0D54h
	ret 0Ch
;sub_4BEB18 endp

sub_4BEB60: ;SUBROUTINE
	mov eax, [eax+0D4Ch]
	ret
;sub_4BEB60 endp

sub_4BEB68: ;SUBROUTINE
	push ecx
	mov ecx, eax
	xor eax, eax
	test ebx, ebx
	jle loc_4BEB84

loc_4BEB71:
	fld dword [ecx]
	add edx, 4
	add ecx, 4
	inc eax
	fstp dword [edx-4]
	cmp eax, ebx
	jl loc_4BEB71

loc_4BEB84:
	pop ecx
	ret
;sub_4BEB68 endp

sub_4BEB88: ;SUBROUTINE
	push ecx
	push edi
	push ebp
	sub esp, 0Ch
	mov ebp, edx
	mov ecx, [eax+0D4Ch]
	mov edx, [eax+0D44h]
	mov edi, eax
	cmp ecx, edx
	jnb loc_4BEC98
	push esi
	mov ecx, [ebx]
	mov ebx, [eax+0D4Ch]
	add ebx, ebp
	mov edx, [eax+0D44h]
	mov esi, ebx
	sub esi, edx
	mov [eax+0D4Ch], ebx
	mov [esp+0Ch], esi
	test esi, esi
	jle loc_4BECA4
	sub ebp, esi

loc_4BEBCF:
	mov esi, [edi+0D48h]
	cmp ebp, esi
	jge loc_4BEBDB
	mov esi, ebp

loc_4BEBDB:
	mov eax, 1B0h
	mov edx, [edi+0D48h]
	lea ebx, [edi+684h]
	sub eax, edx
	mov [esp+4], ebx
	shl eax, 2
	mov edx, ecx
	add eax, ebx
	mov ebx, esi
	call sub_4BEB68
	lea eax, 0[esi*4]
	add ecx, eax
	mov eax, [edi+0D48h]
	sub eax, esi
	sub ebp, esi
	mov [edi+0D48h], eax
	test ebp, ebp
	jle loc_4BEC7D
	mov eax, [esp+4]
	mov [esp+8], eax

loc_4BEC25:
	mov eax, edi
	xor edx, edx
	mov esi, 1B0h
	call sub_4C3400
	mov dword [edi+0D48h], 1B0h
	cmp ebp, esi
	jge loc_4BEC43
	mov esi, ebp

loc_4BEC43:
	mov eax, 1B0h
	sub eax, [edi+0D48h]
	mov ebx, [esp+8]
	shl eax, 2
	mov edx, ecx
	add eax, ebx
	mov ebx, esi
	call sub_4BEB68
	lea eax, 0[esi*4]
	add ecx, eax
	mov eax, [edi+0D48h]
	sub eax, esi
	sub ebp, esi
	mov [edi+0D48h], eax
	test ebp, ebp
	jg loc_4BEC25

loc_4BEC7D:
	pop esi

loc_4BEC7E:
	mov edx, [esp+8]
	test edx, edx
	jle loc_4BECAF
	lea ebx, [edx-1]
	mov dword [ecx], 0
	add ecx, 4
	mov [esp+8], ebx
	jmp loc_4BEC7E

loc_4BEC98:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop ebp
	pop edi
	pop ecx
	ret

loc_4BECA4:
	xor eax, eax
	mov [esp+0Ch], eax
	jmp loc_4BEBCF

loc_4BECAF:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop ecx
	ret
;sub_4BEB88 endp

sub_4BECB8: ;SUBROUTINE
	push esi
	mov esi, eax
	mov eax, edx
	mov edx, esi
	call sub_4C3314
	mov dword [esi+0D48h], 0
	mov dword [esi+0D4Ch], 0
	mov eax, [esp+0Ch]
	mov [esi+0D44h], ebx
	mov dword [eax], sub_4BEB88
	mov eax, [esp+10h]
	mov dword [eax], sub_4BEB60
	mov eax, 0D50h
	pop esi
	ret 0Ch
;sub_4BECB8 endp

sub_4BED00: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 14h
	mov esi, eax
	mov [esp+10h], edx
	mov edx, [eax+0D44h]
	mov ebp, eax
	test edx, edx
	jz loc_4BEDFF
	mov eax, [ebx]
	mov ecx, [esp+10h]
	mov [esp], eax
	test ecx, ecx
	jle loc_4BEDF5
	lea eax, [esi+684h]
	mov [esp+4], eax
	lea eax, [esi+0D48h]
	add esi, 0D44h
	mov [esp+0Ch], eax
	mov [esp+8], esi

loc_4BED4C:
	mov eax, [ebp+0D4Ch]
	cmp eax, [ebp+0D48h]
	jge loc_4BEE0C

loc_4BED5E:
	cmp dword [ebp+0D50h], 0
	jle loc_4BEEA5

loc_4BED6B:
	mov edx, [ebp+0D48h]
	mov edi, [ebp+0D4Ch]
	mov eax, [esp+10h]
	sub edx, edi
	cmp edx, eax
	jle loc_4BED83
	mov edx, eax

loc_4BED83:
	mov ecx, [ebp+0D50h]
	cmp edx, ecx
	jle loc_4BED8F
	mov edx, ecx

loc_4BED8F:
	mov esi, 1B0h
	mov eax, [esp+4]
	mov edi, [ebp+0D50h]
	lea ebx, 0[edx*4]
	sub esi, edi
	mov ecx, ebx
	shl esi, 2
	mov edi, [esp]
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ecx, [ebp+0D4Ch]
	lea esi, [edi+ebx]
	mov eax, [ebp+0D50h]
	mov edi, [esp+10h]
	mov [esp], esi
	add ecx, edx
	sub eax, edx
	mov [ebp+0D4Ch], ecx
	sub edi, edx
	mov [ebp+0D50h], eax
	mov [esp+10h], edi
	test edi, edi
	jg loc_4BED4C

loc_4BEDF5:
	xor eax, eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEDFF:
	mov eax, 0FFFFFFFFh
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEE0C:
	mov edx, [esp+0Ch]
	mov eax, [esp+8]
	call dword [dword_4DCFDC]
	test eax, eax
	jnz loc_4BEE49
	mov ebx, [ebp+0D44h]
	test ebx, ebx
	jz loc_4BEE49
	mov dl, [ebx]
	mov eax, ebx
	test dl, dl
	jz loc_4BEE78
	lea eax, [ebx+1]
	mov edx, ebp
	call sub_4C3314
	mov dword [ebp+0D4Ch], 0
	jmp loc_4BED5E

loc_4BEE49:
	mov ebx, [esp+10h]
	mov eax, [esp]
	xor edx, edx
	shl ebx, 2
	call memset_
	mov dword [ebp+0D4Ch], 0
	mov dword [ebp+0D48h], 0
	xor eax, eax
	add esp, 14h
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4BEE78:
	mov al, [ebx+1]
	and eax, 0FFh
	mov [ebp+4], eax
	mov eax, [ebp+0D44h]
	mov dword [ebp+8], 8
	add eax, 2
	mov [ebp+0], eax
	mov dword [ebp+0D4Ch], 0
	jmp loc_4BED5E

loc_4BEEA5:
	mov eax, ebp
	xor edx, edx
	call sub_4C3400
	mov dword [ebp+0D50h], 1B0h
	jmp loc_4BED6B
;sub_4BED00 endp

sub_4BEEC0: ;SUBROUTINE
	mov dword [eax+0D44h], 1
	mov dword [eax+0D48h], 0
	mov dword [eax+0D4Ch], 0
	mov dword [eax+0D50h], 0
	mov eax, [esp+8]
	mov dword [eax], sub_4BED00
	mov eax, [esp+0Ch]
	mov dword [eax], 0
	mov eax, 0D54h
	ret 0Ch
;sub_4BEEC0 endp

sub_4C0B80: ;SUBROUTINE
	push esi
	push edi
	mov edi, [esp+0Ch]
	test edx, edx
	jl loc_4C0BC5

loc_4C0B8A:
	test ecx, ecx
	jl loc_4C0BC9

loc_4C0B8E:
	mov esi, [eax+4]
	cmp edx, esi
	jle loc_4C0B97
	mov edx, esi

loc_4C0B97:
	cmp ecx, esi
	jle loc_4C0B9D
	mov ecx, esi

loc_4C0B9D:
	test ebx, ebx
	jl loc_4C0BCD

loc_4C0BA1:
	test edi, edi
	jl loc_4C0BD1

loc_4C0BA5:
	mov esi, [eax+8]
	cmp ebx, esi
	jle loc_4C0BAE
	mov ebx, esi

loc_4C0BAE:
	cmp edi, esi
	jle loc_4C0BB4
	mov edi, esi

loc_4C0BB4:
	mov [eax+0Ch], edx
	mov [eax+14h], ecx
	mov [eax+10h], ebx
	mov [eax+18h], edi
	pop edi
	pop esi
	ret 4

loc_4C0BC5:
	xor edx, edx
	jmp loc_4C0B8A

loc_4C0BC9:
	xor ecx, ecx
	jmp loc_4C0B8E

loc_4C0BCD:
	xor ebx, ebx
	jmp loc_4C0BA1

loc_4C0BD1:
	xor edi, edi
	jmp loc_4C0BA5
;sub_4C0B80 endp

sub_4C0BE0: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov esi, eax
	mov edi, edx
	mov [esp+8], ebx
	mov ebp, ecx
	cmp eax, ebx
	jg loc_4C0C7C

loc_4C0BF8:
	cmp ebp, edi
	jge loc_4C0C02
	mov eax, edi
	mov edi, ebp
	mov ebp, eax

loc_4C0C02:
	mov eax, [esp+8]
	sub eax, esi
	mov ecx, [esp+1Ch]
	inc eax
	mov edx, edi
	mov [esp], eax
	mov eax, ebp
	push ecx
	sub eax, edi
	mov ecx, 1
	dec eax
	mov ebx, [esp+4]
	mov [esp+8], eax
	mov eax, esi
	inc edi
	call sub_488620
	mov ebx, [esp+1Ch]
	mov ecx, [esp+4]
	mov eax, [esp+8]
	push ebx
	mov edx, edi
	mov ebx, 1
	call sub_488620
	mov eax, [esp+1Ch]
	mov ecx, [esp+4]
	mov ebx, 1
	push eax
	mov edx, edi
	mov eax, esi
	call sub_488620
	mov edx, [esp+1Ch]
	mov ecx, 1
	mov ebx, [esp]
	push edx
	mov eax, esi
	mov edx, ebp
	call sub_488620
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	ret 4

loc_4C0C7C:
	mov esi, ebx
	mov [esp+8], eax
	jmp loc_4C0BF8
;sub_4C0BE0 endp

sub_4C0CDC: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, eax
	mov ebx, edx
	call sub_482424
	mov edx, dword [dword_4DAB7C]
	sub edx, eax
	mov eax, edx
	sar edx, 1Fh
	sub eax, edx
	sar eax, 1
	mov edi, dword [dword_4DD6EC]
	mov edx, ebx
	mov esi, dword [dword_4DD6F0]
	call sub_4871F8
	mov eax, ecx
	call sub_4867D8
	mov dword [dword_4DD6EC], edi
	mov dword [dword_4DD6F0], esi
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4C0CDC endp

sub_4C0D30: ;SUBROUTINE
	push ebx
	push ecx
	push edx
	mov edx, [eax+8]
	mov ecx, [eax+4]
	push edx
	xor ebx, ebx
	xor edx, edx
	call sub_4C0B80
	pop edx
	pop ecx
	pop ebx
	ret
;sub_4C0D30 endp

sub_4C1BA0: ;SUBROUTINE
	mov eax, [eax+4]
	ret
;sub_4C1BA0 endp

sub_4C1BA4: ;SUBROUTINE
	push ebp
	sub esp, 4
	mov ebp, eax
	mov [esp], edx
	mov eax, [eax+4]
	cmp eax, [ebp+8]
	jnb loc_4C1BDD
	push ecx
	mov edx, [esp+4]
	mov eax, [ebp+4]
	add edx, eax
	mov ecx, [ebp+8]
	mov [ebp+4], edx
	cmp edx, ecx
	jnb loc_4C1BE7
	mov cl, [ebp+0Ch]
	mov edx, [ebp+0]
	shl eax, cl
	add edx, eax
	mov [ebx], edx
	xor eax, eax
	pop ecx
	add esp, 4
	pop ebp
	ret

loc_4C1BDD:
	mov eax, 0FFFFFFFFh
	add esp, 4
	pop ebp
	ret

loc_4C1BE7:
	push edi
	push esi
	mov edx, ecx
	mov edi, [ebp+0]
	sub edx, eax
	mov cl, [ebp+0Ch]
	mov esi, edx
	shl eax, cl
	shl esi, cl
	add eax, edi
	mov ecx, esi
	mov edi, [ebx]
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov esi, [esp+0Ch]
	mov eax, edx
	mov cl, [ebp+0Ch]
	sub esi, edx
	shl eax, cl
	shl esi, cl
	mov edx, [ebx]
	mov ebx, esi
	add eax, edx
	xor edx, edx
	call memset_
	pop esi
	pop edi
	xor eax, eax
	pop ecx
	add esp, 4
	pop ebp
	ret
;sub_4C1BA4 endp

sub_4C1C38: ;SUBROUTINE
	mov dword [eax+4], 0
	mov [eax], edx
	sar ecx, 1
	mov [eax+8], ebx
	mov [eax+0Ch], ecx
	mov eax, [esp+4]
	mov dword [eax], sub_4C1BA4
	mov eax, [esp+8]
	mov dword [eax], sub_4C1BA0
	mov eax, 10h
	ret 8
;sub_4C1C38 endp

sub_4C1C70: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov ebp, edx
	mov ecx, [ebx]
	mov [esp], ecx
	mov ecx, [eax+4]
	mov esi, [eax+0Ch]
	add ecx, ebp
	mov edx, eax
	cmp ecx, esi
	jbe loc_4C1CE8

loc_4C1C8C:
	test ebp, ebp
	jle loc_4C1CF9
	mov ebx, [edx+0Ch]
	sub ebx, [edx+4]
	inc ebx
	cmp ebp, ebx
	jge loc_4C1C9D
	mov ebx, ebp

loc_4C1C9D:
	mov esi, ebx
	mov cl, [edx+10h]
	mov eax, [edx+4]
	shl esi, cl
	shl eax, cl
	mov ecx, [edx]
	mov edi, [esp]
	add eax, ecx
	mov ecx, esi
	mov esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	add [edx+4], ebx
	mov eax, ebx
	mov cl, [edx+10h]
	shl eax, cl
	sub ebp, ebx
	lea esi, [edi+eax]
	mov eax, [edx+4]
	mov edi, [edx+0Ch]
	mov [esp], esi
	cmp eax, edi
	jbe loc_4C1C8C
	mov eax, [edx+8]
	mov [edx+4], eax
	jmp loc_4C1C8C

loc_4C1CE8:
	mov edx, [eax+4]
	mov cl, [eax+10h]
	shl edx, cl
	mov ecx, [eax]
	add ecx, edx
	mov [ebx], ecx
	add [eax+4], ebp

loc_4C1CF9:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret
;sub_4C1C70 endp

sub_4C1D04: ;SUBROUTINE
	mov dword [eax+4], 0
	mov [eax], edx
	mov [eax+8], ebx
	mov edx, [esp+4]
	mov [eax+0Ch], ecx
	sar edx, 1
	mov [eax+10h], edx
	mov eax, [esp+8]
	mov dword [eax], sub_4C1C70
	mov eax, 14h
	ret 8
;sub_4C1D04 endp

sub_4C1D30: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 0Ch
	mov [esp+8], edx
	cmp dword [eax], 0
	jz loc_4C1DDD
	mov edx, [ebx]
	mov ecx, [esp+8]
	mov [esp+4], edx
	mov edx, [eax+8]
	mov esi, [eax+4]
	add edx, ecx
	mov ebp, eax
	cmp edx, esi
	jle loc_4C1DEA
	add eax, 4
	mov [esp], eax

loc_4C1D66:
	cmp dword [esp+8], 0
	jle loc_4C1DFF
	mov eax, [ebp+8]
	cmp eax, [ebp+4]
	jge loc_4C1E09

loc_4C1D7D:
	mov edx, [ebp+4]
	mov ebx, [ebp+8]
	mov esi, [esp+8]
	sub edx, ebx
	cmp edx, esi
	jg loc_4C1E52

loc_4C1D91:
	mov edi, [esp+4]
	mov ebx, edx
	mov cl, [ebp+0Ch]
	mov eax, [ebp+8]
	mov esi, [ebp+0]
	shl ebx, cl
	shl eax, cl
	mov ecx, ebx
	add esi, eax
	push edi
	mov eax, ecx
	shr ecx, 2
	rep movsd
	mov cl, al
	and cl, 3
	rep movsb
	pop edi
	mov ebx, [esp+8]
	mov eax, edx
	mov edi, [ebp+8]
	mov cl, [ebp+0Ch]
	add edi, edx
	shl eax, cl
	sub ebx, edx
	mov ecx, [esp+4]
	mov [esp+8], ebx
	add ecx, eax
	mov [ebp+8], edi
	mov [esp+4], ecx
	jmp loc_4C1D66

loc_4C1DDD:
	mov eax, 0FFFFFFFFh
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C1DEA:
	mov esi, [eax+8]
	mov cl, [eax+0Ch]
	mov edx, [eax]
	shl esi, cl
	add edx, esi
	mov [ebx], edx
	mov edx, [esp+8]
	add [eax+8], edx

loc_4C1DFF:
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C1E09:
	mov edx, [esp]
	mov eax, ebp
	call dword [dword_4DCFDC]
	test eax, eax
	jnz loc_4C1E26
	cmp dword [ebp+0], 0
	jz loc_4C1E26
	mov [ebp+8], eax
	jmp loc_4C1D7D

loc_4C1E26:
	mov ebx, [esp+8]
	mov eax, [esp+4]
	mov cl, [ebp+0Ch]
	xor edx, edx
	shl ebx, cl
	call memset_
	mov dword [ebp+8], 0
	mov dword [ebp+4], 0
	xor eax, eax
	add esp, 0Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C1E52:
	mov edx, esi
	jmp loc_4C1D91
;sub_4C1D30 endp

sub_4C1E5C: ;SUBROUTINE
	mov dword [eax], 1
	mov dword [eax+4], 0
	sar edx, 1
	mov dword [eax+8], 0
	mov [eax+0Ch], edx
	mov eax, 10h
	mov dword [ebx], sub_4C1D30
	ret
;sub_4C1E5C endp

sub_4C1E90: ;SUBROUTINE
	mov eax, [eax+4]
	ret
;sub_4C1E90 endp

sub_4C1E94: ;SUBROUTINE
	push ecx
	push esi
	push ebp
	mov esi, edx
	mov edx, [eax+4]
	mov ecx, [eax+8]
	mov ebp, eax
	cmp edx, ecx
	jnb loc_4C1EDD
	push edi
	lea ecx, [edx+esi]
	mov [eax+4], ecx
	mov edi, ecx
	mov ecx, [eax+8]
	cmp edi, ecx
	jnb loc_4C1F02
	cmp dword [eax+14h], 0
	jz loc_4C1EE6
	mov ecx, [ebx]
	push ecx
	mov cl, [eax+0Ch]
	mov ebx, [eax]
	shl edx, cl
	add edx, ebx
	mov cl, [eax+18h]
	push edx
	shl esi, cl
	push esi
	call sub_4C40A8

loc_4C1ED3:
	add esp, 0Ch
	xor eax, eax
	pop edi
	pop ebp
	pop esi
	pop ecx
	ret

loc_4C1EDD:
	mov eax, 0FFFFFFFFh
	pop ebp
	pop esi
	pop ecx
	ret

loc_4C1EE6:
	mov ebp, [ebx]
	mov cl, [eax+0Ch]
	mov ebx, edx
	mov edx, [eax]
	shl ebx, cl
	push ebp
	add edx, ebx
	mov cl, [eax+18h]
	push edx
	shl esi, cl
	push esi
	call sub_4C4114
	jmp loc_4C1ED3

loc_4C1F02:
	mov edi, ecx
	mov ecx, [eax+14h]
	sub edi, edx
	test ecx, ecx
	jz loc_4C1F4D
	mov ecx, [ebx]
	push ecx
	mov cl, [eax+0Ch]
	shl edx, cl
	mov ecx, [eax]
	add edx, ecx
	mov cl, [eax+18h]
	mov eax, edi
	push edx
	shl eax, cl
	push eax
	call sub_4C40A8

loc_4C1F27:
	add esp, 0Ch
	mov eax, esi
	mov cl, [ebp+10h]
	mov edx, [ebx]
	mov esi, edi
	sub eax, edi
	shl esi, cl
	shl eax, cl
	add esi, edx
	mov ebx, eax
	mov eax, esi
	xor edx, edx
	call memset_
	xor eax, eax
	pop edi
	pop ebp
	pop esi
	pop ecx
	ret

loc_4C1F4D:
	mov ecx, [ebx]
	push ecx
	mov cl, [eax+0Ch]
	shl edx, cl
	mov ecx, [eax]
	add edx, ecx
	mov cl, [eax+18h]
	mov eax, edi
	push edx
	shl eax, cl
	push eax
	call sub_4C4114
	jmp loc_4C1F27
;sub_4C1E94 endp

sub_4C1F6C: ;SUBROUTINE
	push esi
	mov esi, [esp+8]
	mov dword [eax+4], 0
	mov [eax], edx
	mov [eax+8], ebx
	lea edx, [ecx+esi]
	mov [eax+0Ch], edx
	mov [eax+14h], ecx
	lea edx, [esi+2]
	mov [eax+10h], edx
	mov [eax+18h], esi
	mov eax, [esp+0Ch]
	mov dword [eax], sub_4C1E94
	mov eax, [esp+10h]
	mov dword [eax], sub_4C1E90
	mov eax, 1Ch
	pop esi
	ret 0Ch
;sub_4C1F6C endp

sub_4C1FB0: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	mov edi, edx
	mov ebp, ebx
	mov ebx, eax
	mov ebp, [ebp+0]
	test edx, edx
	jle loc_4C201B

loc_4C1FC1:
	mov eax, [ebx+0Ch]
	sub eax, [ebx+4]
	lea esi, [eax+1]
	cmp edi, esi
	jge loc_4C1FD0
	mov esi, edi

loc_4C1FD0:
	cmp dword [ebx+18h], 0
	jz loc_4C2022
	mov eax, [ebx+4]
	mov cl, [ebx+10h]
	mov edx, [ebx]
	shl eax, cl
	push ebp
	add eax, edx
	mov cl, [ebx+1Ch]
	push eax
	mov eax, esi
	shl eax, cl
	push eax
	call sub_4C40A8

loc_4C1FF1:
	add esp, 0Ch
	mov eax, [ebx+4]
	add eax, esi
	mov cl, [ebx+14h]
	mov [ebx+4], eax
	mov eax, esi
	shl eax, cl
	mov edx, [ebx+0Ch]
	add ebp, eax
	mov eax, [ebx+4]
	sub edi, esi
	cmp eax, edx
	jbe loc_4C2017
	mov eax, [ebx+8]
	mov [ebx+4], eax

loc_4C2017:
	test edi, edi
	jg loc_4C1FC1

loc_4C201B:
	xor eax, eax
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C2022:
	mov edx, [ebx+4]
	mov cl, [ebx+10h]
	mov eax, [ebx]
	shl edx, cl
	push ebp
	add eax, edx
	mov cl, [ebx+1Ch]
	push eax
	mov eax, esi
	shl eax, cl
	push eax
	call sub_4C4114
	jmp loc_4C1FF1
;sub_4C1FB0 endp

sub_4C2040: ;SUBROUTINE
	push esi
	mov esi, [esp+0Ch]
	mov dword [eax+4], 0
	mov [eax], edx
	mov [eax+8], ebx
	mov edx, [esp+8]
	mov [eax+0Ch], ecx
	add edx, esi
	mov [eax+10h], edx
	lea edx, [esi+2]
	mov [eax+14h], edx
	mov [eax+1Ch], esi
	mov edx, [esp+8]
	mov [eax+18h], edx
	mov eax, [esp+10h]
	mov dword [eax], sub_4C1FB0
	mov eax, 20h
	pop esi
	ret 0Ch
;sub_4C2040 endp

sub_4C2080: ;SUBROUTINE
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 4
	mov edi, edx
	cmp dword [eax], 0
	jz loc_4C20FC
	mov esi, eax
	mov edx, [eax+8]
	mov ecx, [eax+4]
	add edx, edi
	mov ebp, [ebx]
	cmp edx, ecx
	jle loc_4C2109
	add eax, 4
	mov [esp], eax

loc_4C20A4:
	test edi, edi
	jle loc_4C2130
	mov eax, [esi+8]
	cmp eax, [esi+4]
	jge loc_4C2165

loc_4C20B8:
	mov ebx, [esi+4]
	sub ebx, [esi+8]
	cmp edi, ebx
	jge loc_4C20C4
	mov ebx, edi

loc_4C20C4:
	cmp dword [esi+14h], 0
	jz loc_4C21A9
	mov eax, [esi+8]
	mov cl, [esi+0Ch]
	mov edx, [esi]
	shl eax, cl
	push ebp
	add eax, edx
	mov cl, [esi+18h]
	push eax
	mov eax, ebx
	shl eax, cl
	push eax
	call sub_4C40A8

loc_4C20E9:
	add esp, 0Ch
	add [esi+8], ebx
	mov eax, ebx
	mov cl, [esi+10h]
	shl eax, cl
	sub edi, ebx
	add ebp, eax
	jmp loc_4C20A4

loc_4C20FC:
	mov eax, 0FFFFFFFFh
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C2109:
	cmp dword [eax+14h], 0
	jz loc_4C213A
	push ebp
	mov ebx, [eax+8]
	mov cl, [eax+0Ch]
	mov edx, [eax]
	shl ebx, cl
	mov cl, [eax+18h]
	add edx, ebx
	mov eax, edi
	push edx
	shl eax, cl
	push eax
	call sub_4C40A8
	add esp, 0Ch
	add [esi+8], edi

loc_4C2130:
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C213A:
	push ebp
	mov edx, [eax+8]
	mov cl, [eax+0Ch]
	mov ebx, [eax]
	shl edx, cl
	mov cl, [eax+18h]
	add edx, ebx
	mov eax, edi
	push edx
	shl eax, cl
	push eax
	call sub_4C4114
	add esp, 0Ch
	add [esi+8], edi
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C2165:
	mov edx, [esp]
	mov eax, esi
	call dword [dword_4DCFDC]
	test eax, eax
	jnz loc_4C2181
	cmp dword [esi], 0
	jz loc_4C2181
	mov [esi+8], eax
	jmp loc_4C20B8

loc_4C2181:
	mov ebx, edi
	mov eax, ebp
	mov cl, [esi+10h]
	xor edx, edx
	shl ebx, cl
	call memset_
	mov dword [esi+8], 0
	mov dword [esi+4], 0
	xor eax, eax
	add esp, 4
	pop ebp
	pop edi
	pop esi
	pop ecx
	ret

loc_4C21A9:
	mov eax, [esi+8]
	mov cl, [esi+0Ch]
	mov edx, [esi]
	shl eax, cl
	push ebp
	add eax, edx
	mov cl, [esi+18h]
	push eax
	mov eax, ebx
	shl eax, cl
	push eax
	call sub_4C4114
	jmp loc_4C20E9
;sub_4C2080 endp

sub_4C21CC: ;SUBROUTINE
	push esi
	mov dword [eax], 1
	mov dword [eax+4], 0
	mov dword [eax+8], 0
	lea esi, [edx+ebx]
	mov [eax+0Ch], esi
	mov [eax+14h], edx
	lea esi, [ebx+2]
	mov [eax+10h], esi
	mov [eax+18h], ebx
	mov eax, 1Ch
	mov dword [ecx], sub_4C2080
	pop esi
	ret
;sub_4C21CC endp

sub_4C2200: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov edi, [esi+8]
	mov ebx, [esi+0Ch]
	movd mm3, dword [esi+4]
	mov edx, 7FFF0000h
	mov eax, 80000000h
	movd mm4, edx
	movd mm5, eax
	xor edx, edx

loc_4C2223:
	cmp dword [esi], 0
	jle loc_4C22CF
	xor eax, eax
	mov al, [edi]
	sub dword [esi], 1Ch
	shr eax, 4
	add ebx, 38h
	movd mm1, dword dword_4E0558[eax*4]
	movd mm2, dword dword_4E0568[eax*4]
	mov al, [edi]
	mov ecx, 0FFFFFFF2h
	and eax, 0Fh
	add edi, 0Fh
	shl eax, 6

loc_4C2259:
	mov dl, [ecx+edi]
	movq mm6, mm3
	shr dl, 4
	pmaddwd mm6, mm1
	movd mm0, dword dword_5B9864[eax+edx*4]
	paddd mm6, mm0
	movd ebp, mm6
	cmp ebp, 7FFF00h
	jg loc_4C22D9
	cmp ebp, 0FF800000h
	jl loc_4C22DE
	pslld mm6, 8

loc_4C2287:
	mov dl, [ecx+edi]
	punpcklwd mm6, mm3
	and dl, 0Fh
	psrlq mm6, 20h
	movq mm3, mm6
	pmaddwd mm6, mm2
	movd mm0, dword dword_5B9864[eax+edx*4]
	paddd mm6, mm0
	movd ebp, mm6
	cmp ebp, 7FFF00h
	jg loc_4C22E3
	cmp ebp, 0FF800000h
	jl loc_4C22E8
	pslld mm6, 8

loc_4C22BC:
	psrlq mm6, 10h
	punpcklwd mm3, mm6
	movd dword [ebx+ecx*4], mm3
	inc ecx
	jl loc_4C2259
	jmp loc_4C2223

loc_4C22CF:
	movd dword [esi+4], mm3
	mov [esi+0Ch], ebx
	popa
	leave
	ret

loc_4C22D9:
	movq mm6, mm4
	jmp loc_4C2287

loc_4C22DE:
	movq mm6, mm5
	jmp loc_4C2287

loc_4C22E3:
	movq mm6, mm4
	jmp loc_4C22BC

loc_4C22E8:
	movq mm6, mm5
	jmp loc_4C22BC
;sub_4C2200 endp

sub_4C22F0: ;SUBROUTINE
	push ebx
	push esi
	push edi
	push ebp
	sub esp, 2Ch
	mov ebx, [esp+40h]
	mov esi, [ebx+4]
	mov eax, [ebx+2]
	mov edi, [ebx+8]
	sar eax, 10h
	mov edx, [ebx]
	mov [esp+10h], eax
	mov eax, [ebx+6]
	sar esi, 10h
	sar eax, 10h
	sar edi, 10h
	mov [esp+0Ch], eax
	test edx, edx
	jle loc_4C250A

loc_4C2325:
	mov ebp, [ebx]
	mov eax, [ebx+0Ch]
	sub ebp, 1Ch
	xor edx, edx
	mov [ebx], ebp
	mov dl, [eax]
	sar edx, 4
	mov [esp+24h], edx
	mov dl, [eax]
	and dl, 0Fh
	and edx, 0FFh
	mov [esp+28h], edx
	mov edx, [esp+24h]
	mov ecx, dword dword_4E0AFC[edx*4]
	mov edx, dword dword_4E0B0C[edx*4]
	mov [esp+14h], edx
	mov edx, [esp+28h]
	mov [esp+20h], ecx
	mov ecx, dword dword_4E0AFC[edx*4]
	mov edx, dword dword_4E0B0C[edx*4]
	mov [esp+1Ch], edx
	xor edx, edx
	mov dl, [eax+1]
	sar edx, 4
	add edx, 8
	mov [esp+24h], edx
	mov dl, [eax+1]
	mov [esp+18h], ecx
	and dl, 0Fh
	and edx, 0FFh
	add edx, 8
	add eax, 2
	mov [esp+28h], edx
	mov edx, [ebx+10h]
	mov [ebx+0Ch], eax
	add edx, 70h
	mov eax, [ebx+10h]
	mov [esp], edx
	cmp eax, edx
	jnb loc_4C2501

loc_4C23B9:
	mov eax, [ebx+0Ch]
	mov al, [eax]
	and eax, 0FFh
	mov edx, eax
	sar edx, 4
	mov cl, [esp+24h]
	shl edx, 1Ch
	sar edx, cl
	mov ecx, edx
	mov edx, [esp+20h]
	imul edx, esi
	mov ebp, [esp+14h]
	add ecx, edx
	mov edx, [esp+10h]
	imul edx, ebp
	shl eax, 1Ch
	add edx, ecx
	mov cl, [esp+28h]
	sar eax, cl
	mov ecx, eax
	mov eax, [esp+18h]
	imul eax, edi
	mov ebp, [esp+1Ch]
	add ecx, eax
	mov eax, [esp+0Ch]
	imul eax, ebp
	add eax, ecx
	add edx, 80h
	add eax, 80h
	sar edx, 8
	sar eax, 8
	cmp edx, 0FFFF8000h
	jge loc_4C252A
	mov edx, 0FFFF8000h

loc_4C242C:
	cmp eax, 0FFFF8000h
	jge loc_4C2540
	mov eax, 0FFFF8000h

loc_4C243C:
	mov ecx, [ebx+10h]
	mov [ecx], dx
	mov ecx, [ebx+10h]
	mov [ecx+2], ax
	mov ecx, [ebx+0Ch]
	mov [esp+10h], edx
	mov [esp+0Ch], eax
	mov cl, [ecx+1]
	and ecx, 0FFh
	mov [esp+4], ecx
	sar ecx, 4
	shl ecx, 1Ch
	mov [esp+8], ecx
	mov cl, [esp+24h]
	mov ebp, [esp+8]
	sar ebp, cl
	mov ecx, ebp
	imul edx, [esp+20h]
	imul eax, [esp+18h]
	add edx, ecx
	imul esi, [esp+14h]
	add edx, esi
	mov esi, [esp+4]
	mov cl, [esp+28h]
	shl esi, 1Ch
	sar esi, cl
	imul edi, [esp+1Ch]
	add eax, esi
	add eax, edi
	add edx, 80h
	add eax, 80h
	sar edx, 8
	sar eax, 8
	cmp edx, 0FFFF8000h
	jge loc_4C2555
	mov edx, 0FFFF8000h

loc_4C24C2:
	cmp eax, 0FFFF8000h
	jge loc_4C256B
	mov eax, 0FFFF8000h

loc_4C24D2:
	mov ecx, [ebx+10h]
	mov [ecx+4], dx
	mov esi, edx
	mov edx, [ebx+10h]
	mov [edx+6], ax
	mov edi, eax
	mov ecx, [ebx+0Ch]
	mov ebp, [ebx+10h]
	add ecx, 2
	add ebp, 8
	mov [ebx+0Ch], ecx
	mov edx, [esp]
	mov [ebx+10h], ebp
	cmp ebp, edx
	jb loc_4C23B9

loc_4C2501:
	cmp dword [ebx], 0
	jg loc_4C2325

loc_4C250A:
	mov [ebx+6], si
	mov eax, [esp+10h]
	mov [ebx+0Ah], di
	mov [ebx+4], ax
	mov eax, [esp+0Ch]
	mov [ebx+8], ax
	add esp, 2Ch
	pop ebp
	pop edi
	pop esi
	pop ebx
	ret

loc_4C252A:
	cmp edx, 7FFFh
	jle loc_4C242C
	mov edx, 7FFFh
	jmp loc_4C242C

loc_4C2540:
	cmp eax, 7FFFh
	jle loc_4C243C
	mov eax, 7FFFh
	jmp loc_4C243C

loc_4C2555:
	cmp edx, 7FFFh
	jle loc_4C24C2
	mov edx, 7FFFh
	jmp loc_4C24C2

loc_4C256B:
	cmp eax, 7FFFh
	jle loc_4C24D2
	mov eax, 7FFFh
	jmp loc_4C24D2
;sub_4C22F0 endp

sub_4C2580: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov edi, [esi+0Ch]
	mov ebx, [esi+10h]
	mov edx, [esi+4]
	mov dword [dword_4E0B1C], edx
	mov edx, [esi+8]
	mov dword [dword_4E0B20], edx

loc_4C259F:
	cmp dword [esi], 0
	jle loc_4C264F
	sub dword [esi], 1Ch
	xor eax, eax
	mov al, [edi]
	shr eax, 4
	fld dword flt_4E0548[eax*4]
	fld dword flt_4E0538[eax*4]
	mov al, [edi]
	and eax, 0Fh
	shl eax, 6
	add edi, 1
	xor edx, edx
	mov ecx, 0FFFFFFF2h
	fld dword [dword_4E0B20]
	fmul st0, st2
	fld dword [dword_4E0B1C]
	fld dword [dword_4E0B1C]
	fld dword [dword_4E0B20]
	add edi, 0Eh
	add ebx, 70h

loc_4C25F2:
	fstp st0
	fmul st0, st3
	mov dl, [ecx+edi]
	shr dl, 4
	faddp st2, st0
	fmul st0, st3
	fxch st1
	fadd dword flt_5B9464[eax+edx*4]
	fld st0
	mov dl, [ecx+edi]
	fld st0
	fxch st2
	fst dword [ebx+ecx*8]
	fmul st0, st4
	fxch st1
	fmul st0, st5
	fxch st1
	faddp st3, st0
	and dl, 0Fh
	fxch st2
	fadd dword flt_5B9464[eax+edx*4]
	fld st0
	fxch st1
	fst dword [ebx+ecx*8+4]
	fxch st2
	inc ecx
	jl loc_4C25F2
	fstp dword [dword_4E0B20]
	fstp st0
	fstp dword [dword_4E0B1C]
	fcompp
	fstp st0
	jmp loc_4C259F

loc_4C264F:
	mov edx, dword [dword_4E0B1C]
	mov [esi+4], edx
	mov edx, dword [dword_4E0B20]
	mov [esi+8], edx
	mov [esi+10h], ebx
	popa
	leave
	ret
;sub_4C2580 endp

sub_4C2668: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov esi, [ebp+8]
	mov edi, [esi+14h]
	mov ebp, [esi+18h]
	mov edx, [esi+4]
	mov dword [dword_4E0B24], edx
	mov edx, [esi+8]
	mov dword [dword_4E0B28], edx
	mov edx, [esi+0Ch]
	mov dword [dword_4E0B2C], edx
	mov edx, [esi+10h]
	mov dword [dword_4E0B30], edx

loc_4C2699:
	cmp dword [esi], 0
	jle loc_4C27B9
	sub dword [esi], 1Ch
	xor eax, eax
	xor ebx, ebx
	mov al, [edi]
	mov bl, [edi]
	shr eax, 4
	and ebx, 0Fh
	fld dword flt_4E0548[ebx*4]
	fld dword flt_4E0538[ebx*4]
	fld dword flt_4E0548[eax*4]
	fld dword flt_4E0538[eax*4]
	mov al, [edi+1]
	mov bl, [edi+1]
	shr eax, 4
	and ebx, 0Fh
	shl eax, 6
	shl ebx, 6
	add edi, 2
	xor edx, edx
	mov ecx, 1Ch
	push esi
	mov esi, ebx

loc_4C26EE:
	fld dword [dword_4E0B24]
	fmul st0, st1
	fld dword [dword_4E0B2C]
	fmul st0, st4
	fld dword [dword_4E0B28]
	fmul st0, st4
	fld dword [dword_4E0B30]
	fmul st0, st7
	fxch st1
	faddp st3, st0
	mov dl, [edi]
	mov bl, [edi]
	shr edx, 4
	and ebx, 0Fh
	faddp st1, st0
	fxch st1
	fadd dword flt_5B9464[eax+edx*4]
	fxch st1
	fadd dword flt_5B9464[esi+ebx*4]
	fxch st1
	fst dword [ebp+0]
	fstp dword [dword_4E0B28]
	fst dword [ebp+4]
	fstp dword [dword_4E0B30]
	fld dword [dword_4E0B28]
	fmul st0, st1
	fld dword [dword_4E0B30]
	fmul st0, st4
	fld dword [dword_4E0B24]
	fmul st0, st4
	fld dword [dword_4E0B2C]
	fmul st0, st7
	fxch st1
	faddp st3, st0
	mov dl, [edi+1]
	mov bl, [edi+1]
	shr edx, 4
	and ebx, 0Fh
	faddp st1, st0
	fxch st1
	fadd dword flt_5B9464[eax+edx*4]
	fxch st1
	fadd dword flt_5B9464[esi+ebx*4]
	fxch st1
	fst dword [ebp+8]
	fstp dword [dword_4E0B24]
	fst dword [ebp+0Ch]
	fstp dword [dword_4E0B2C]
	add edi, 2
	add ebp, 10h
	sub ecx, 2
	jg loc_4C26EE
	fstp st0
	fstp st0
	fstp st0
	fstp st0
	pop esi
	jmp loc_4C2699

loc_4C27B9:
	mov [esi+18h], ebp
	mov edx, dword [dword_4E0B24]
	mov [esi+4], edx
	mov edx, dword [dword_4E0B28]
	mov [esi+8], edx
	mov edx, dword [dword_4E0B2C]
	mov [esi+0Ch], edx
	mov edx, dword [dword_4E0B30]
	mov [esi+10h], edx
	popa
	leave
	ret
;sub_4C2668 endp

sub_4C27F0: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	mov ecx, [eax+4]
	mov ebx, dword dword_4E0B34[edx*4]
	mov esi, [eax+4]
	mov edi, [eax+8]
	and ebx, ecx
	sub edi, edx
	mov cl, dl
	mov [eax+8], edi
	shr esi, cl
	mov [eax+4], esi
	cmp edi, 8
	jl loc_4C281E
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4C281E:
	mov edx, [eax]
	mov dl, [edx]
	and edx, 0FFh
	mov cl, [eax+8]
	mov esi, [eax]
	mov edi, [eax+8]
	inc esi
	add edi, 8
	mov [eax], esi
	shl edx, cl
	mov ecx, [eax+4]
	mov [eax+8], edi
	or ecx, edx
	mov [eax+4], ecx
	mov eax, ebx
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4C27F0 endp

sub_4C284C: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push ebp
	mov cl, dl
	mov ebx, [eax+4]
	mov esi, [eax+8]
	shr ebx, cl
	sub esi, edx
	mov [eax+4], ebx
	mov [eax+8], esi
	cmp esi, 8
	jl loc_4C286C
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret

loc_4C286C:
	mov edx, [eax]
	mov dl, [edx]
	and edx, 0FFh
	mov cl, [eax+8]
	mov ebp, [eax+4]
	shl edx, cl
	mov ecx, [eax+8]
	or ebp, edx
	add ecx, 8
	mov edx, [eax]
	mov [eax+4], ebp
	inc edx
	mov [eax+8], ecx
	mov [eax], edx
	pop ebp
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4C284C endp

off_4C2898: dd loc_4C28D0
	dd loc_4C2A21 ; jump table for switch statement
	dd loc_4C28D0
	dd loc_4C2A35

sub_4C28A8: ;SUBROUTINE
	push esi
	push edi
	push ebp
	sub esp, 10h
	mov esi, eax
	mov ebp, ebx
	mov edi, ecx
	test edx, edx
	jnz loc_4C28F2
	xor ecx, ecx
	mov ebx, 3

loc_4C28BF:
	mov eax, [esi+4]
	and eax, ebx
	cmp eax, 3 ; switch 4 cases
	ja loc_4C28E4 ; jumptable 004C28C9 default case
	jmp off_4C2898[eax*4] ; switch jump

loc_4C28D0:
	mov edx, 1 ; jumptable 004C28C9 cases 0,2
	mov eax, esi
	mov dword [ebp+ecx*4+0], 0

loc_4C28DF:
	call sub_4C284C

loc_4C28E4:
	add ecx, edi ; jumptable 004C28C9 default case
	cmp ecx, 6Ch
	jl loc_4C28BF
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4C28F2:
	xor edx, edx
	xor ecx, ecx
	mov [esp], edx

loc_4C28F9:
	mov eax, [esi+4]
	mov edx, [esp]
	and eax, 0FFh
	shl edx, 8
	xor ebx, ebx
	mov bl, byte byte_4E0C58[edx+eax]
	imul eax, ebx, 0Ch
	mov [esp+4], eax
	mov eax, dword dword_4E0E58[eax]
	mov edx, [esp+4]
	mov [esp], eax
	mov edx, dword dword_4E0E5C[edx]
	mov eax, esi
	call sub_4C284C
	cmp ebx, 3
	jle loc_4C2952
	mov edx, [esp+4]
	mov eax, dword dword_4E0E60[edx]
	mov [ebp+ecx*4+0], eax
	add ecx, edi

loc_4C2946:
	cmp ecx, 6Ch
	jl loc_4C28F9
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4C2952:
	cmp ebx, 1
	jg loc_4C2971
	mov ebx, 7

loc_4C295C:
	mov edx, 1
	mov eax, esi
	call sub_4C27F0
	cmp eax, 1
	jnz loc_4C29CD
	add ebx, eax
	jmp loc_4C295C

loc_4C2971:
	mov edx, 6
	mov eax, esi
	call sub_4C27F0
	add eax, 7
	mov [esp+8], eax
	imul eax, edi
	add eax, ecx
	cmp eax, 6Ch
	jle loc_4C29A0
	mov edx, 6Ch
	sub edx, ecx
	mov eax, edx
	sar edx, 1Fh
	idiv edi
	mov [esp+8], eax

loc_4C29A0:
	mov ebx, [esp+8]
	xor eax, eax
	test ebx, ebx
	jle loc_4C2946
	mov edx, [esp+8]

loc_4C29AE:
	inc eax
	mov dword [ebp+ecx*4+0], 0
	add ecx, edi
	cmp eax, edx
	jl loc_4C29AE
	cmp ecx, 6Ch
	jl loc_4C28F9
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4C29CD:
	mov edx, 1
	mov eax, esi
	call sub_4C27F0
	lea edx, 0[ecx*4]
	add edx, ebp
	cmp eax, 1
	jnz loc_4C2A03
	mov [esp+0Ch], ebx
	fild dword [esp+0Ch]
	fstp dword [edx]
	add ecx, edi
	cmp ecx, 6Ch
	jl loc_4C28F9
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4C2A03:
	neg ebx
	mov [esp+0Ch], ebx
	fild dword [esp+0Ch]
	fstp dword [edx]
	add ecx, edi
	cmp ecx, 6Ch
	jl loc_4C28F9
	add esp, 10h
	pop ebp
	pop edi
	pop esi
	ret

loc_4C2A21:
	mov edx, 2 ; jumptable 004C28C9 case 1
	mov eax, esi
	mov dword [ebp+ecx*4+0], 0C0000000h
	jmp loc_4C28DF

loc_4C2A35:
	mov edx, 2 ; jumptable 004C28C9 case 3
	mov eax, esi
	mov dword [ebp+ecx*4+0], 40000000h
	jmp loc_4C28DF
;sub_4C28A8 endp

sub_4C2A4C: ;SUBROUTINE
	push edx
	mov edx, eax
	lea edx, [eax+1B0h]
	fld qword [dbl_4D1E68]
	fld qword [dbl_4D1E60]
	fld qword [dbl_4D1E58]

loc_4C2A67:
	fld dword [eax-4]
	fadd dword [eax+4]
	fmul st0, st1
	fld dword [eax-0Ch]
	fadd dword [eax+0Ch]
	fmul st0, st3
	faddp st1, st0
	fld dword [eax-14h]
	fadd dword [eax+14h]
	fmul st0, st4
	faddp st1, st0
	add eax, 8
	fstp dword [eax-8]
	cmp eax, edx
	jnz loc_4C2A67
	fstp st0
	fstp st0
	fstp st0
	pop edx
	ret
;sub_4C2A4C endp

sub_4C2A98: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 6Ch
	mov ebp, eax
	mov [esp+64h], edx
	mov eax, 0Ah
	lea edx, [ebp+28h]

loc_4C2AAE:
	dec eax
	fld dword [edx]
	sub edx, 4
	fstp dword [esp+eax*4+38h]
	test eax, eax
	jge loc_4C2AAE
	mov edx, 3F800000h
	mov edi, [esp+64h]
	lea eax, [ebp+28h]
	xor ebx, ebx
	xor esi, esi
	mov [esp+30h], edx
	mov [esp+60h], eax

loc_4C2AD4:
	fld dword [ebp+2Ch]
	fchs
	fmul dword [esp+5Ch]
	mov eax, 0Ah
	mov edx, [esp+60h]
	fst dword [esp+68h]

loc_4C2AEA:
	fld dword [edx]
	fmul dword [esp+eax*4+30h]
	fsubp st1, st0
	fld dword [edx]
	fmul st0, st1
	dec eax
	fadd dword [esp+eax*4+34h]
	sub edx, 4
	fstp dword [esp+eax*4+38h]
	test eax, eax
	jge loc_4C2AEA
	fstp dword [esp+68h]
	mov eax, [esp+68h]
	xor ecx, ecx
	mov [esp+30h], eax
	mov [esp+esi], eax
	test ebx, ebx
	jle loc_4C2B3C
	fld dword [esp+68h]
	mov edx, [esp+64h]
	mov eax, esi

loc_4C2B25:
	fld dword [edx]
	fmul dword [esp+eax-4]
	add edx, 4
	sub eax, 4
	inc ecx
	fsubp st1, st0
	cmp ecx, ebx
	jl loc_4C2B25
	fstp dword [esp+68h]

loc_4C2B3C:
	mov eax, [esp+68h]
	add edi, 4
	add esi, 4
	inc ebx
	mov [edi-4], eax
	cmp ebx, 0Ch
	jl loc_4C2AD4
	add esp, 6Ch
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret
;sub_4C2A98 endp

sub_4C2B58: ;SUBROUTINE
	push esi
	push edi
	sub esp, 34h
	mov esi, eax
	mov edi, edx
	test ecx, ecx
	jnz loc_4C3307
	mov [esp+30h], ecx

loc_4C2B6D:
	mov edx, esp
	lea eax, [esi+114h]
	call sub_4C2A98
	lea eax, 0[edi*4]
	lea edx, [esi+684h]
	add eax, edx
	xor edx, edx
	test ebx, ebx
	jle loc_4C3301

loc_4C2B93:
	fld dword [esp]
	fmul dword [esi+144h]
	fadd dword [eax]
	fld dword [esp+4]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+170h]
	faddp st1, st0
	fst dword [esi+170h]
	fld dword [esp+30h]
	fxch st1
	fadd st0, st1
	fstp dword [eax]
	fld dword [esp]
	fmul dword [esi+170h]
	fadd dword [eax+4]
	fld dword [esp+4]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fst dword [esi+16Ch]
	fadd st0, st1
	fstp dword [eax+4]
	fld dword [esp]
	fmul dword [esi+16Ch]
	fadd dword [eax+8]
	fld dword [esp+4]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+168h]
	faddp st1, st0
	fst dword [esi+168h]
	faddp st1, st0
	fstp dword [eax+8]
	fld dword [esp]
	fmul dword [esi+168h]
	fadd dword [eax+0Ch]
	fld dword [esp+4]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+164h]
	faddp st1, st0
	fstp dword [esi+164h]
	fld dword [esp+30h]
	fld dword [esi+164h]
	fadd st0, st1
	fstp dword [eax+0Ch]
	fld dword [esp]
	fmul dword [esi+164h]
	fadd dword [eax+10h]
	fld dword [esp+4]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+160h]
	faddp st1, st0
	fst dword [esi+160h]
	fadd st0, st1
	fstp dword [eax+10h]
	fld dword [esp]
	fmul dword [esi+160h]
	fadd dword [eax+14h]
	fld dword [esp+4]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fst dword [esi+15Ch]
	fadd st0, st1
	fstp dword [eax+14h]
	fld dword [esp]
	fmul dword [esi+15Ch]
	fadd dword [eax+18h]
	fld dword [esp+4]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+158h]
	faddp st1, st0
	fst dword [esi+158h]
	faddp st1, st0
	fstp dword [eax+18h]
	fld dword [esp]
	fmul dword [esi+158h]
	fadd dword [eax+1Ch]
	fld dword [esp+4]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+154h]
	faddp st1, st0
	fst dword [esi+154h]
	fld dword [esp+30h]
	fxch st1
	fadd st0, st1
	fstp dword [eax+1Ch]
	fld dword [esp]
	fmul dword [esi+154h]
	fadd dword [eax+20h]
	fld dword [esp+4]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+150h]
	faddp st1, st0
	fst dword [esi+150h]
	fadd st0, st1
	fstp dword [eax+20h]
	fld dword [esp]
	fmul dword [esi+150h]
	fadd dword [eax+24h]
	fld dword [esp+4]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+148h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fst dword [esi+14Ch]
	faddp st1, st0
	fstp dword [eax+24h]
	fld dword [esp]
	fmul dword [esi+14Ch]
	fadd dword [eax+28h]
	fld dword [esp+4]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+144h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+148h]
	faddp st1, st0
	fstp dword [esi+148h]
	fld dword [esp+30h]
	fld dword [esi+148h]
	fadd st0, st1
	fstp dword [eax+28h]
	fld dword [esp]
	fmul dword [esi+148h]
	fadd dword [eax+2Ch]
	fld dword [esp+4]
	fmul dword [esi+14Ch]
	faddp st1, st0
	fld dword [esp+8]
	fmul dword [esi+150h]
	faddp st1, st0
	fld dword [esp+0Ch]
	fmul dword [esi+154h]
	faddp st1, st0
	fld dword [esp+10h]
	fmul dword [esi+158h]
	faddp st1, st0
	fld dword [esp+14h]
	fmul dword [esi+15Ch]
	faddp st1, st0
	fld dword [esp+18h]
	fmul dword [esi+160h]
	faddp st1, st0
	fld dword [esp+1Ch]
	fmul dword [esi+164h]
	faddp st1, st0
	fld dword [esp+20h]
	fmul dword [esi+168h]
	faddp st1, st0
	fld dword [esp+24h]
	fmul dword [esi+16Ch]
	faddp st1, st0
	fld dword [esp+28h]
	fmul dword [esi+170h]
	faddp st1, st0
	fld dword [esp+2Ch]
	fmul dword [esi+144h]
	faddp st1, st0
	add eax, 30h
	fst dword [esi+144h]
	faddp st1, st0
	inc edx
	fstp dword [eax-4]
	cmp edx, ebx
	jl loc_4C2B93

loc_4C3301:
	add esp, 34h
	pop edi
	pop esi
	ret

loc_4C3307:
	mov dword [esp+30h], 4B400000h
	jmp loc_4C2B6D
;sub_4C2B58 endp

sub_4C3314: ;SUBROUTINE
	push ebx
	push esi
	sub esp, 8
	mov esi, eax
	mov ebx, edx
	push ecx
	call dword [off_4DDED0]
	xor eax, eax
	mov edx, 1
	mov al, [esi]
	mov dword [ebx+8], 8
	inc esi
	mov [ebx+4], eax
	mov eax, ebx
	mov [ebx], esi
	call sub_4C27F0
	mov edx, 4
	mov [ebx+0Ch], eax
	mov eax, ebx
	call sub_4C27F0
	mov edx, 20h
	sub edx, eax
	mov eax, ebx
	mov [ebx+10h], edx
	mov edx, 4
	call sub_4C27F0
	xor edx, edx
	inc eax
	mov [esp+8], edx
	mov [esp+4], eax
	xor ecx, ecx
	fild qword [esp+4]
	fmul qword [dbl_4D1E70]
	mov [esp+8], ecx
	mov edx, 6
	mov eax, ebx
	fstp dword [ebx+14h]
	call sub_4C27F0
	mov [esp+4], eax
	fild qword [esp+4]
	fmul qword [dbl_4D1E78]
	lea eax, [ebx+4]
	fadd qword [dbl_4D1E80]
	lea edx, [ebx+100h]
	pop ecx

loc_4C33AE:
	fld dword [eax+10h]
	fmul st0, st1
	add eax, 4
	fstp dword [eax+10h]
	cmp eax, edx
	jnz loc_4C33AE
	fstp st0
	mov eax, ebx
	lea edx, [ebx+30h]

loc_4C33C4:
	add eax, 4
	mov dword [eax+110h], 0
	mov dword [eax+140h], 0
	cmp eax, edx
	jnz loc_4C33C4
	mov eax, ebx
	add ebx, 510h

loc_4C33E7:
	add eax, 4
	mov dword [eax+170h], 0
	cmp eax, ebx
	jnz loc_4C33E7
	add esp, 8
	pop esi
	pop ebx
	ret
;sub_4C3314 endp

sub_4C3400: ;SUBROUTINE
	push ebx
	push ecx
	push esi
	push edi
	push ebp
	sub esp, 230h
	mov esi, eax
	mov [esp+214h], edx
	call dword [off_4DDED0]
	mov edx, 6
	mov eax, esi
	call sub_4C27F0
	mov ecx, [esi+10h]
	mov edx, eax
	cmp eax, ecx
	jnb loc_4C36BE
	mov ebp, 1

loc_4C3438:
	fld dword flt_4E0B58[edx*4]
	fsub dword [esi+114h]
	fmul qword [dbl_4D1E88]
	mov ecx, 1
	lea edi, [esi+4]
	fstp dword [esp+1D8h]
	mov ebx, 6

loc_4C345F:
	mov edx, ebx
	mov eax, esi
	call sub_4C27F0
	fld dword flt_4E0B58[eax*4]
	fsub dword [edi+114h]
	fmul qword [dbl_4D1E88]
	inc ecx
	add edi, 4
	fstp dword [esp+ecx*4+1D4h]
	cmp ecx, 4
	jl loc_4C345F
	mov ecx, 4
	mov ebx, 5
	lea edi, [esi+10h]

loc_4C3498:
	mov edx, ebx
	mov eax, esi
	call sub_4C27F0
	fld dword flt_4E0B98[eax*4]
	fsub dword [edi+114h]
	fmul qword [dbl_4D1E88]
	inc ecx
	add edi, 4
	fstp dword [esp+ecx*4+1D4h]
	cmp ecx, 0Ch
	jl loc_4C3498
	mov ebx, 0D8h
	xor edi, edi
	mov [esp+220h], ebx

loc_4C34D2:
	mov edx, 8
	mov eax, esi
	call sub_4C27F0
	mov edx, [esp+220h]
	sub edx, eax
	mov [esp+22Ch], edx
	mov eax, esi
	mov edx, 4
	call sub_4C27F0
	xor edx, edx
	mov [esp+208h], eax
	mov [esp+20Ch], edx
	fild qword [esp+208h]
	fmul qword [dbl_4D1E90]
	mov eax, esi
	mov edx, 6
	fstp dword [esp+224h]
	call sub_4C27F0
	mov eax, [esi+eax*4+14h]
	mov ecx, [esi+0Ch]
	mov [esp+228h], eax
	test ecx, ecx
	jnz loc_4C36C5
	mov ecx, 1
	lea ebx, [esp+14h]
	mov edx, ebp
	mov eax, esi
	call sub_4C28A8

loc_4C3552:
	mov edx, [esp+22Ch]
	lea ecx, [esi+edi]
	shl edx, 2
	xor eax, eax
	add edx, esi
	fld dword [esp+228h]
	fld dword [esp+224h]

loc_4C3571:
	fld st0
	fmul dword [edx+174h]
	fld st2
	fmul dword [esp+eax+14h]
	add ecx, 4
	add eax, 4
	faddp st1, st0
	add edx, 4
	fstp dword [ecx+680h]
	cmp eax, 1B0h
	jnz loc_4C3571
	fstp st0
	mov ebx, [esp+220h]
	fstp st0
	add ebx, 6Ch
	add edi, eax
	mov [esp+220h], ebx
	cmp edi, 6C0h
	jnz loc_4C34D2
	mov eax, esi
	lea edx, [esi+510h]

loc_4C35C2:
	add eax, 4
	mov ecx, [eax+830h]
	mov [eax+170h], ecx
	cmp eax, edx
	jnz loc_4C35C2
	xor eax, edx
	mov edx, esi

loc_4C35D9:
	add edx, 4
	fld dword [esp+eax*4+1D8h]
	fadd dword [edx+110h]
	inc eax
	fstp dword [edx+110h]
	cmp eax, 0Ch
	jl loc_4C35D9
	mov ecx, [esp+214h]
	mov ebx, 1
	mov eax, esi
	xor edx, edx
	call sub_4C2B58
	mov eax, esi
	xor edx, edx

loc_4C360E:
	add eax, 4
	fld dword [esp+edx*4+1D8h]
	fadd dword [eax+110h]
	inc edx
	fstp dword [eax+110h]
	cmp edx, 0Ch
	jl loc_4C360E
	mov ecx, [esp+214h]
	mov ebx, 1
	mov edx, 0Ch
	mov eax, esi
	call sub_4C2B58
	mov edx, esi
	xor eax, eax

loc_4C3646:
	add edx, 4
	fld dword [esp+eax*4+1D8h]
	fadd dword [edx+110h]
	inc eax
	fstp dword [edx+110h]
	cmp eax, 0Ch
	jl loc_4C3646
	mov ecx, [esp+214h]
	mov ebx, 1
	mov edx, 18h
	mov eax, esi
	call sub_4C2B58
	mov edx, esi
	xor eax, eax

loc_4C367E:
	add edx, 4
	fld dword [esp+eax*4+1D8h]
	fadd dword [edx+110h]
	inc eax
	fstp dword [edx+110h]
	cmp eax, 0Ch
	jl loc_4C367E
	mov ecx, [esp+214h]
	mov ebx, 21h
	mov edx, 24h
	mov eax, esi
	call sub_4C2B58
	add esp, 230h
	pop ebp
	pop edi
	pop esi
	pop ecx
	pop ebx
	ret

loc_4C36BE:
	xor ebp, ebp
	jmp loc_4C3438

loc_4C36C5:
	mov edx, 1
	mov eax, esi
	call sub_4C27F0
	mov edx, 1
	mov ecx, eax
	mov [esp+218h], eax
	mov eax, esi
	lea ebx, [esp+14h]
	call sub_4C27F0
	shl ecx, 2
	mov [esp+210h], eax
	mov [esp+21Ch], ecx
	mov edx, ebp
	add ebx, ecx
	mov ecx, 2
	mov eax, esi
	call sub_4C28A8
	cmp dword [esp+210h], 0
	jz loc_4C3739
	mov edx, [esp+21Ch]
	neg edx
	lea eax, [edx+18h]
	add edx, 1C8h

loc_4C3727:
	add eax, 8
	xor ecx, ecx
	mov [esp+eax-8], ecx
	cmp eax, edx
	jnz loc_4C3727
	jmp loc_4C3552

loc_4C3739:
	xor eax, eax

loc_4C373B:
	add eax, 4
	xor ecx, ecx
	mov [esp+eax-4], ecx
	cmp eax, 14h
	jnz loc_4C373B
	mov eax, 1C4h

loc_4C374E:
	add eax, 4
	xor ebx, ebx
	mov [esp+eax-4], ebx
	cmp eax, 1D8h
	jnz loc_4C374E
	mov edx, [esp+218h]
	lea eax, [esp+18h]
	shl edx, 2
	sub eax, edx
	call sub_4C2A4C
	fld dword [esp+228h]
	fld st0
	fmul qword [dbl_4D1E98]
	fstp st1
	fstp dword [esp+228h]
	jmp loc_4C3552
;sub_4C3400 endp

sub_4C40A8: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+0Ch]
	mov ebp, [ebp+10h]
	cmp ecx, 7
	jle loc_4C40FC
	sub ecx, 7

loc_4C40BD:
	fild word [edi]
	fild word [edi+2]
	fild word [edi+4]
	fild word [edi+6]
	fild word [edi+8]
	fild word [edi+0Ah]
	fild word [edi+0Ch]
	fild word [edi+0Eh]
	fxch st7
	fstp dword [ebp+0]
	fstp dword [ebp+18h]
	fstp dword [ebp+14h]
	fstp dword [ebp+10h]
	fstp dword [ebp+0Ch]
	fstp dword [ebp+8]
	fstp dword [ebp+4]
	fstp dword [ebp+1Ch]
	add edi, 10h
	add ebp, 20h
	sub ecx, 8
	jg loc_4C40BD
	add ecx, 7

loc_4C40FC:
	cmp ecx, 0
	jle loc_4C4111
	fild word [edi]
	fstp dword [ebp+0]
	add edi, 2
	add ebp, 4
	sub ecx, 1
	jg loc_4C40FC

loc_4C4111:
	popa
	leave
	ret
;sub_4C40A8 endp

sub_4C4114: ;SUBROUTINE
	push ebp
	mov ebp, esp
	pusha
	mov ecx, [ebp+8]
	mov edi, [ebp+0Ch]
	mov ebp, [ebp+10h]
	xor eax, eax
	xor edx, edx
	cmp ecx, 3
	jle loc_4C416E
	sub ecx, 3

loc_4C412D:
	mov al, [edi]
	mov dl, [edi+1]
	add edi, 4
	add ebp, 10h
	mov ebx, dword dword_5BA4E4[eax*4]
	mov esi, dword dword_5BA4E4[edx*4]
	mov al, [edi-2]
	mov dl, [edi-1]
	mov [ebp-10h], ebx
	mov [ebp-0Ch], esi
	mov ebx, dword dword_5BA4E4[eax*4]
	mov esi, dword dword_5BA4E4[edx*4]
	mov [ebp-8], ebx
	mov [ebp-4], esi
	sub ecx, 4
	jg loc_4C412D
	add ecx, 3

loc_4C416E:
	cmp ecx, 0
	jle loc_4C418A
	mov al, [edi]
	add edi, 1
	add ebp, 4
	mov ebx, dword dword_5BA4E4[eax*4]
	mov [ebp-4], ebx
	sub ecx, 1
	jg loc_4C416E

loc_4C418A:
	popa
	leave
	ret
;sub_4C4114 endp

;	DInput data
off_4C4B50: dd dword_4E2838
	dd 0
	dd 0FFFF03h, 0
	dd dword_4E2828
	dd 4, 0FFFF03h, 0
	dd dword_4E2818
	dd 8, 80FFFF03h
	times 2 dd 0
	dd 0Ch, 0FFFF0Ch
	times 2 dd 0
	dd 0Dh, 0FFFF0Ch
	times 2 dd 0
	dd 0Eh, 80FFFF0Ch
	times 2 dd 0
	dd 0Fh, 80FFFF0Ch, 0
dword_4C4BC0: dd 18h, 10h, 2, 10h, 7
	dd off_4C4B50
off_4C4BE0: dd dword_4E2838
	dd 0
	dd 80FFFF03h, 100h
	dd dword_4E2828
	dd 4, 80FFFF03h, 100h
	dd dword_4E2818
	dd 8, 80FFFF03h, 100h
	dd dword_4E2888
	dd 0Ch, 80FFFF03h, 100h
	dd dword_4E2878
	dd 10h, 80FFFF03h, 100h
	dd dword_4E2868
	dd 14h, 80FFFF03h, 100h
	dd dword_4E2858
	dd 18h, 80FFFF03h, 100h
	dd dword_4E2858
	dd 1Ch, 80FFFF03h, 100h
	dd dword_4E2848
	dd 20h, 80FFFF10h, 0
	dd dword_4E2848
	dd 24h, 80FFFF10h, 0
	dd dword_4E2848
	dd 28h, 80FFFF10h, 0
	dd dword_4E2848
	dd 2Ch, 80FFFF10h
	times 2 dd 0
	dd 30h, 80FFFF0Ch
	times 2 dd 0
	dd 31h, 80FFFF0Ch
	times 2 dd 0
	dd 32h, 80FFFF0Ch
	times 2 dd 0
	dd 33h, 80FFFF0Ch
	times 2 dd 0
	dd 34h, 80FFFF0Ch
	times 2 dd 0
	dd 35h, 80FFFF0Ch
	times 2 dd 0
	dd 36h, 80FFFF0Ch
	times 2 dd 0
	dd 37h, 80FFFF0Ch
	times 2 dd 0
	dd 38h, 80FFFF0Ch
	times 2 dd 0
	dd 39h, 80FFFF0Ch
	times 2 dd 0
	dd 3Ah, 80FFFF0Ch
	times 2 dd 0
	dd 3Bh, 80FFFF0Ch
	times 2 dd 0
	dd 3Ch, 80FFFF0Ch
	times 2 dd 0
	dd 3Dh, 80FFFF0Ch
	times 2 dd 0
	dd 3Eh, 80FFFF0Ch
	times 2 dd 0
	dd 3Fh, 80FFFF0Ch
	times 2 dd 0
	dd 40h, 80FFFF0Ch
	times 2 dd 0
	dd 41h, 80FFFF0Ch
	times 2 dd 0
	dd 42h, 80FFFF0Ch
	times 2 dd 0
	dd 43h, 80FFFF0Ch
	times 2 dd 0
	dd 44h, 80FFFF0Ch
	times 2 dd 0
	dd 45h, 80FFFF0Ch
	times 2 dd 0
	dd 46h, 80FFFF0Ch
	times 2 dd 0
	dd 47h, 80FFFF0Ch
	times 2 dd 0
	dd 48h, 80FFFF0Ch
	times 2 dd 0
	dd 49h, 80FFFF0Ch
	times 2 dd 0
	dd 4Ah, 80FFFF0Ch
	times 2 dd 0
	dd 4Bh, 80FFFF0Ch
	times 2 dd 0
	dd 4Ch, 80FFFF0Ch
	times 2 dd 0
	dd 4Dh, 80FFFF0Ch
	times 2 dd 0
	dd 4Eh, 80FFFF0Ch
	times 2 dd 0
	dd 4Fh, 80FFFF0Ch, 0
dword_4C4EA0: dd 18h, 10h, 1, 50h, 2Ch
	dd off_4C4BE0

section .data

binaryGameVersion: db '1.1.2',0

aDbar: db 'dbar',0
aDlog: db 'dlog',0
dword_4C8014: dd 0
a1: db '1',0
a2: db '2',0
a_: db '_',0
aCNfs2seFront_1: db 'c:\nfs2se\frontend\common\Dialog.c',0
aDialogargv: db 'DialogArgv',0
aBsld: db 'bsld',0
aMemc: db 'memc',0
aTsld: db 'tsld',0
aUppd: db 'uppd',0
aDwnd: db 'dwnd',0
aEnglish_1: db 'English',0
aGerman_1: db 'German',0
aFrench_1: db 'French',0
aSpanish_1: db 'Spanish',0
aItalian_1: db 'Italian',0
aCNfs2seFronten: db 'c:\nfs2se\frontend\common\Feaudio.c',0
aComheader: db 'comHeader',0
aStreambuffer: db 'streamBuffer',0
aLumpyhead: db 'lumpyhead',0
a000: db '000',0
aSSS_viv: db '%s%s\%s.viv',0
aC_0: db '%c',0
aD_4: db '%d',0
dbl_4C8114: dq 1.1
dbl_4C811C: dq 0.8
aCali: db 'cali',0
aCtab: db 'ctab',0
aSswiss13_ffn: db '%sswiss13.ffn',0
aSfixed14_ffn: db '%sfixed14.ffn',0
aSswiss16_ffn: db '%sswiss16.ffn',0
aSswiss18_ffn: db '%sswiss18.ffn',0
aSswiss36_ffn: db '%sswiss36.ffn',0
aC: db '%c ',0
	dd 0
dbl_4C818C: dq 0.6
aScn04d_tga: db 'scn%04d.tga',0
dword_4C81B8: dd 0
dword_4C81BC: dd 31h
dword_4C81C0: dd 32h
aCNfs2seFront_0: db 'c:\nfs2se\frontend\common\Front.c',0
aFrontend: db 'frontend',0
aSconfig_dat: db '%sconfig.dat',0
aEnglish_0: db 'english',0
aGerman_0: db 'german',0
aFrench_0: db 'french',0
aSpanish_0: db 'spanish',0
aItalian_0: db 'italian',0
aSwedish_0: db 'swedish',0
aRemote: db 'remote',0
aBack: db 'back',0
aEngl: db 'engl',0
aGerm: db 'germ',0
aFren: db 'fren',0
aSpan: db 'span',0
aItly: db 'itly',0
aSwed: db 'swed',0
aBugUnsupported: db 'BUG: unsupported language <%d>',0Ah,0
aStitle_qfs: db '%stitle.qfs',0
aTitleav_dct: db 'titleav.dct',0
aReplay_rpy: db 'replay.rpy',0
aSS_rpy: db '%s%s.rpy',0
aSS_tou: db '%s%s.tou',0
a_tou: db '*.tou',0
a_rpy: db '*.rpy',0
aTrk6: db 'trk6',0
aTrk5: db 'trk5',0
aTrk8: db 'trk8',0
aTrk4: db 'trk4',0
aTrk1: db 'trk1',0
aTrk3: db 'trk3',0
aTrk2: db 'trk2',0
aTrk7: db 'trk7',0
aCar1: db 'car1',0
aCar9: db 'car9',0
aCarc: db 'carc',0
aCar7: db 'car7',0
aCar8: db 'car8',0
aCara: db 'cara',0
aCar4: db 'car4',0
aCar6_1: db 'car6',0
aCar3: db 'car3',0
aCarb: db 'carb',0
aCar5: db 'car5',0
aCar2: db 'car2',0
aCarf: db 'carf',0
aCare: db 'care',0
aCard: db 'card',0
aClsa: db 'clsa',0
aClsb: db 'clsb',0
aClsc: db 'clsc',0
aCome: db 'come',0
aComg: db 'comg',0
aComf: db 'comf',0
aComs: db 'coms',0
aComi: db 'comi',0
aComw: db 'comw',0
aNedb: db 'nedb',0
aNeds: db 'neds',0
aSpdb: db 'spdb',0
aSpds: db 'spds',0
aForb: db 'forb',0
aFors: db 'fors',0
aBspb: db 'bspb',0
aBsps: db 'bsps',0
aBndb: db 'bndb',0
aBnds: db 'bnds',0
aBfrb: db 'bfrb',0
aBfrs: db 'bfrs',0
aGren_0: db 'gren',0
aRedd_0: db 'redd',0
aYell_0: db 'yell',0
aBlue: db 'blue',0
aSin: db 'sin',0
aTwo: db 'two',0
aMod: db 'mod',0
aLnk: db 'lnk',0
aNet: db 'net',0
aOva: db 'ova',0
dword_4C8478: dd 0
aRac: db 'rac',0
aTrn: db 'trn',0
aNok: db 'nok',0
aSlt: db 'slt',0
aCir: db 'cir',0
aOut: db 'out',0
aLrs: db 'Lrs',0
aNor: db 'nor',0
aPac: db 'pac',0
aMed: db 'med',0
aHim: db 'him',0
aMon: db 'mon',0
aMac: db 'mac',0
aF50: db 'F50',0
a355: db '355',0
aFgt: db 'fgt',0
aInd: db 'ind',0
aMus: db 'mus',0
aJag: db 'jag',0
aLgt: db 'lgt',0
aLv8: db 'lv8',0
aNas: db 'nas',0
aCal: db 'Cal',0
aIsd: db 'isd',0
aBom: db 'bom',0
aTom: db 'tom',0
aFzr: db 'fzr',0
aTko: db 'tko',0
aA_0: db 'A',0
aB_0: db 'B',0
aC_1: db 'C',0
aEngl_1: db 'engl',0
aGerm_0: db 'germ',0
aFren_0: db 'fren',0
aSpan_0: db 'span',0
aItly_0: db 'itly',0
aSwed_0: db 'swed',0
aSide: db 'side',0
aBlk6: db 'blk6',0
aDemoav: db 'demoav',0
aSD_dct: db '%s%d.dct',0
aCNfs2seFront_2: db 'c:\nfs2se\frontend\common\Mainmenu.c',0
aBugUserDidNotG: db 'BUG: User did not go back to netmenu_netmenu() to exit properly',0Ah,0
aBlk4: db 'blk4',0
aTrnm: db 'trnm',0
aGrph: db 'grph',0
aGrpg: db 'grpg',0
aGrpb: db 'grpb',0
aGrpr: db 'grpr',0
aGrpy: db 'grpy',0
aLogo_0: db 'logo',0
aS5: db '%s5',0
aA5: db 'A5',0
aFre1: db 'fre1',0
aAd2: db 'Ad',0
aFred: db 'fred',0
aB5: db 'B5',0
aFre2: db 'fre2',0
aBd: db 'Bd',0
aFree: db 'free',0
aC5: db 'C5',0
aFre3: db 'fre3',0
aCd: db 'Cd',0
aFref: db 'fref',0
asc_4C8648: db '  ',0
aLaul: db 'laul',0
aRaul: db 'raul',0
aAudi: db 'audi',0
aAbar: db 'abar',0
aLaud: db 'laud',0
aRaud: db 'raud',0
aKnwd: db 'knwd',0
aChy2: db 'chy2',0
aBac1: db 'Bac1',0
asc_4C869C: db ':',0
aDark: db 'dark',0
aWait: db 'wait',0
a___: db '...',0
aRedy: db 'redy',0
aRedd: db 'redd',0
aYell: db 'yell',0
aGren: db 'gren',0
aLogo: db 'logo',0
aMain: db 'main',0
aBlk4_0: db 'blk4',0
aBack_4: db 'back',0
	times 3 db 0
unk_4C86F4: db 0
	db 0
	db 0
	db 0
aCredits: db 'credits',0
aPost: db 'post',0
aVictory: db 'victory',0
aBlk6_0: db 'blk6',0
aE: db 'e',0
aG_0: db 'g',0
asc_4C8720: db 'f',0
aS_6: db 's',0
aI_0: db 'i',0
aW: db 'w',0
aSSS_qfs: db '%s%s%s.qfs',0
aSS_qfs: db '%s%s.qfs',0
aSS_fsh: db '%s%s.fsh',0
aSful: db 'sful',0
aSthr: db 'sthr',0
aShlf: db 'shlf',0
aSqrt: db 'sqrt',0
asc_4C8780: db ':',0
a____1: db '...',0
aD_2: db '%d',0
flt_4C878C: dd 10.0
flt_4C8790: dd -1.0
aNetwork: db 'network',0
aModem: db 'modem',0
aHismac: db 'hismac',0
aHisfer: db 'hisfer',0
aHisfrd: db 'hisfrd',0
aHisjag: db 'hisjag',0
aHisltus: db 'hisltus',0
aHisita: db 'hisita',0
aHisisd: db 'hisisd',0
aEngl_0: db 'engl',0
aGerm_3: db 'germ',0
aFren_3: db 'fren',0
aSpan_3: db 'span',0
aItly_3: db 'itly',0
aMac_1: db 'mac',0
aFerr: db 'ferr',0
aF355: db 'f355',0
aGt90: db 'gt90',0
aIndigo: db 'indigo',0
aMus_0: db 'mus',0
aJag_0: db 'jag',0
aGt1: db 'gt1',0
aLotus: db 'lotus',0
aNazca: db 'nazca',0
aItal: db 'ital',0
aIsdera: db 'isdera',0
aSldmac: db 'sldmac',0
aSldfer: db 'sldfer',0
aSld355f: db 'sld355f',0
aSldfrd: db 'sldfrd',0
aSldind: db 'sldInd',0
aSldmus: db 'sldmus',0
aSldjag: db 'sldjag',0
aSldgt1: db 'sldgt1',0
aSldv8: db 'sldv8',0
aSldnaz: db 'sldnaz',0
aSldita: db 'sldita',0
aSldisd: db 'sldisd',0
aMclarav: db 'mclarav',0
aF50av: db 'f50av',0
aF355av: db 'f355av',0
aGt90av: db 'gt90av',0
aIndigav: db 'indigav',0
aMustav: db 'mustav',0
aJagav: db 'jagav',0
aGt1av: db 'gt1av',0
aEspritav: db 'espritav',0
aNazcaav: db 'nazcaav',0
aCalaav: db 'calaav',0
aIsderav: db 'isderav',0
aSD: db '%s%d',0
aCar6: db 'car6',0
a02d0: db '%02d0',0
aBack_0: db 'back',0
aGnrl: db 'gnrl',0
aPerf: db 'perf',0
aMech: db 'mech',0
aS_dct: db '%s.dct',0
aSS_qfs_0: db '%s%s.qfs',0
aSS: db '%s %s',0
aHD0: db 'h%d0',0
aCNfs2seFront_4: db 'c:\nfs2se\frontend\common\Statchk.c',0
aBestlaps: db 'bestlaps',0
aRankspd: db 'rankspd',0
aRanklap: db 'ranklap',0
aRankbst: db 'rankbst',0
aTrkrcrds: db 'trkrcrds',0
aC10: db 'c10',0
aC11: db 'c11',0
aC09: db 'c09',0
aToprcrds: db 'toprcrds',0
aCarttime: db 'carttime',0
aCarttrnk: db 'carttrnk',0
aRecords: db 'records',0
aC04: db 'c04',0
aC05: db 'c05',0
aC03: db 'c03',0
aC07: db 'c07',0
aC08: db 'c08',0
aC06: db 'c06',0
aRecord: db 'record',0
aSDS: db '%s %d:  %s',0
aDumitime: db 'dumitime',0
aErrorAllocatin: db 'Error allocating memory',0Ah,0
aDumirank_0: db 'dumirank',0
aE1: db 'e1  ',0
aG1: db 'g1  ',0
aF1: db 'f1  ',0
aS1: db 's1  ',0
aI1: db 'i1  ',0
aW1: db 'w1  ',0
aE2: db 'e2  ',0
aG2: db 'g2  ',0
aF2: db 'f2  ',0
aS2: db 's2  ',0
aI2: db 'i2  ',0
aW2: db 'w2  ',0
aE3: db 'e3  ',0
aG3: db 'g3  ',0
aF3: db 'f3  ',0
aS3: db 's3  ',0
aI3: db 'i3  ',0
aW3: db 'w3  ',0
aE4: db 'e4  ',0
aG4: db 'g4  ',0
aF4: db 'f4  ',0
aS4: db 's4  ',0
aI4: db 'i4  ',0
aW4: db 'w4  ',0
aE6: db 'e6  ',0
aG6: db 'g6  ',0
aF6: db 'f6  ',0
aS6: db 's6  ',0
aI6: db 'i6  ',0
aW6: db 'w6  ',0
aE5: db 'e5  ',0
aG5: db 'g5  ',0
aF5: db 'f5  ',0
aS5_0: db 's5  ',0
aI5: db 'i5  ',0
aW5: db 'w5  ',0
aEmeg: db 'emeg',0
aGmeg: db 'gmeg',0
aFmeg: db 'fmeg',0
aSmeg: db 'smeg',0
aImeg: db 'imeg',0
aWmeg: db 'wmeg',0
aMac_2: db 'mac',0
aFerr_0: db 'ferr',0
aGt90_0: db 'gt90',0
aIndigo_0: db 'indigo',0
aMus_1: db 'mus',0
aJag_1: db 'jag',0
aGt1_0: db 'gt1',0
aLotus_0: db 'lotus',0
aNazca_0: db 'nazca',0
aItal_0: db 'ital',0
aIsdera_0: db 'isdera',0
aEcon: db 'econ',0
aGcon: db 'gcon',0
aFcon: db 'fcon',0
aScon: db 'scon',0
aIcon: db 'icon',0
aWcon: db 'wcon',0
aMcf1_0: db 'mcf1',0
aFf50: db 'ff50',0
aF355_0: db 'f355',0
aFgt9: db 'fgt9',0
aFind: db 'find',0
aFmus: db 'fmus',0
aJagr: db 'jagr',0
aLgt1: db 'lgt1',0
aLesp: db 'lesp',0
aNazc: db 'nazc',0
aCala: db 'cala',0
aIsde: db 'isde',0
aBbfs: db 'bbfs',0
aDayt: db 'dayt',0
aFzr2: db 'fzr2',0
aCNfs2seFront_3: db 'c:\nfs2se\frontend\common\Statdisp.c',0
aDumicars: db 'dumicars',0
aSD_0: db '%s %d',0
aDS: db '%d %s',0
aS_4: db '%s',0
aSS_0: db '%s (%s)',0
aD_3: db '%d',0
aBack_1: db 'back',0
aD_: db '%d.',0
aOmg6: db 'omg6',0
aDumirank: db 'dumirank',0
aSS_qfs_1: db '%s%s.qfs',0
aCar6_0: db 'car6',0
aRec6: db 'rec6',0
aC01: db 'c01',0
aC02: db 'c02',0
aC00: db 'c00',0
aC37: db 'c37',0
aC33: db 'c33',0
aC36: db 'c36',0
aC32: db 'c32',0
aC35: db 'c35',0
aC31: db 'c31',0
aC34: db 'c34',0
aC30: db 'c30',0
aC28: db 'c28',0
aC29: db 'c29',0
aC27: db 'c27',0
aC25: db 'c25',0
aC26: db 'c26',0
aC24: db 'c24',0
aC13: db 'c13',0
aC14: db 'c14',0
aC12: db 'c12',0
aC16: db 'c16',0
aC17: db 'c17',0
aC15: db 'c15',0
aC19: db 'c19',0
aC20: db 'c20',0
aC18: db 'c18',0
aOval: db 'oval',0
aOz: db 'oz',0
aLrt: db 'lrt',0
aNort: db 'nort',0
aPac_0: db 'pac',0
aMed_0: db 'med',0
aMyst: db 'myst',0
aMono: db 'mono',0
aLast: db 'last',0
aSlick: db 'Slick',0
aJammin: db 'Jammin',0
aShusaka: db 'Shusaka',0
aNatasha: db 'Natasha',0
aBigguy: db 'BigGuy',0
aZipper: db 'Zipper',0
aCheyenne: db 'Cheyenne',0
aCrash: db 'Crash',0
aBeefy: db 'Beefy',0
aSassy: db 'Sassy',0
aKlutch: db 'Klutch',0
aCNfs2seFront_5: db 'c:\nfs2se\frontend\common\Stattool.c',0
aStattool_creat: db 'Stattool_CreateIndex:  This routine is not suitable for N > 50',0Ah,0
aTempsort: db 'TempSort',0
aStattoolMemory: db 'Stattool: memory allocation failure',0Ah,0
aStattool_ncrea: db 'Stattool_nCreateIndex:  This routine is not suitable for N > 50',0Ah,0
a_ssf: db '.ssf',0
aSSS: db '%s%s%s',0
a_stf: db '.stf',0
aSrec: db '%srec',0
aSinfo: db '%sinfo',0
a01dC02dC02d: db '%01d%c%02d%c%02d',0
dbl_4C8F70: dq 1.5625
aRecords_0: db 'records',0
aTrkrcrds_0: db 'trkrcrds',0
aS: db '%s',0
a5_2f: db '%5.2f',0
flt_4C8FB4: dd 0.000034133187
flt_4C8FB8: dd 0.000054932982
aText_eng: db 'text.eng',0
aText_ger: db 'text.ger',0
aText_fre: db 'text.fre',0
aText_spa: db 'text.spa',0
aText_ita: db 'text.ita',0
aText_swe: db 'text.swe',0
aSS_1: db '%s%s',0
aEngl_2: db 'engl',0
aGerm_1: db 'germ',0
aFren_1: db 'fren',0
aSpan_1: db 'span',0
aItal_1: db 'ital',0
aSwed_1: db 'swed',0
aItly_1: db 'itly',0
a5_1: db '5.1',0
a7_5: db '7.5',0
a8_1: db '8.1',0
a6_5: db '6.5',0
a7_6: db '7.6',0
a7_3: db '7.3',0
a3_2: db '3.2',0
a4_7: db '4.7',0
a5_0: db '5.0',0
a4_0: db '4.0',0
a4_5: db '4.5',0
aCNfs2seFront_6: db 'c:\nfs2se\frontend\common\Trkstat.c',0
aTrkrcrds_1: db 'trkrcrds',0
aRec6_0: db 'rec6',0
aSD_1: db '%s %d',0
aDS_0: db '%d %s',0
aS_0: db '%s',0
aSldr: db 'sldr',0
aBack_2: db 'back',0
aTD0: db 't%d0',0
asc_4C90D4: db ' ',0
aVtrkrcrd: db 'vtrkrcrd',0
aDosIpxCompatib: db 'DOS IPX compatible',0
aRecvfrom: db 'recvfrom',0
aCNfs2seFron_13: db 'c:\nfs2se\frontend\pc\ipx.c',0
aSocket: db 'socket',0
aIpxopensocket: db 'ipxopensocket',0
aOpenfailed: db 'openfailed',0
aAborterr: db 'aborterr',0
aIpxclosesocket: db 'ipxclosesocket',0
aCloseerr: db 'closeerr',0
aIpxfailready: db 'ipxfailready',0
aIpxfailsend: db 'ipxfailsend',0
aWinipxsend: db 'WINIPXSend',0
aTurfBuffer: db 'Turf Buffer',0
aWinipxrecv: db 'WINIPXRecv',0
aWinipxflush: db 'WINIPXFlush',0
aTcpIp: db 'TCP/IP',0
aCNfs2seFron_14: db 'c:\nfs2se\frontend\pc\tcp.c',0
aTcpdata: db 'TCPDATA',0
aSendpacketPack: db 'sendpacket - PACKET TOO LONG, MAXIMUM SIZE = %d (TCP).',0Ah,0
aSocket_0: db 'socket',0
aAckt: db 'ACKt',0
aSent: db 'sent',0
aRsnd: db 'rsnd',0
aWriteFailure: db 'write failure',0
aBusy: db 'busy',0
aHold: db 'hold',0
aNakt: db 'NAKt',0
aAckr: db 'ackr',0
aAckQ: db 'ack?',0
aNakr: db 'nakr',0
aShutdownconn: db 'shutdownconn',0
aDisconnect: db 'disconnect',0
aConnclosed: db 'connclosed',0
aDupShutdown: db 'dup shutdown',0
aQdat: db 'qdat',0
aCloseconnmsg: db 'closeconnmsg',0
aRecvnotify: db 'recvnotify',0
aRecv: db 'recv',0
aDeny: db 'deny',0
aGrbg: db 'grbg',0
aBad: db 'bad#',0
aCNfs2seFron_15: db 'c:\nfs2se\frontend\pc\eacpkt.c',0
aOpenpacketconn: db 'openpacketconnection - MAXIMUM SUPPORTED PACKET SIZE IS %d.',0Ah,0
aOpenpacketco_2: db 'openpacketconnection - PACKETSIZE IS GREATER THAN TRANSPORT LAYER`S MAXIMUM',0Ah,0
aOpenpacketco_0: db 'openpacketconnection - CALLED WITH AN ACTIVE PKTCONN.',0Ah,0
aOpenpacketco_1: db 'openpacketconnection - MAY ONLY BE CALLED FROM MAIN THREAD.',0Ah,0
aOpenpacketco_3: db 'openpacketconnection - MAY NOT BE CALLED WHILE DDRAW SURFACE IS LOCKED.',0Ah,0
aPktbuf: db 'PKTBUF',0
aPacketlayer_ti: db 'packetlayer_timeout - MUST BE NONZERO',0Ah,0
aOpenpktconn: db 'OpenPktConn',0
aConnAborted: db 'conn aborted',0
aConnInactive: db 'conn inactive',0
aConnectFailed: db 'connect failed',0
aOpenpktconnSuc: db 'OpenPktConn Success',0
aOpenpktconnFai: db 'OpenPktConn Failed',0
aSendpacketTooM: db 'sendpacket - TOO MUCH DATA TO FIT INTO ONE PACKET.',0Ah,0
aSendpacketSorr: db 'sendpacket - SORRY, TOO MANY PACKETS HAVE BEEN SENT DURING THIS CONNECTION. (WOW)',0Ah,0
aNobuffers: db 'nobuffers',0
aProcessconn: db 'processconn',0
aConntimeout: db 'conntimeout',0
aFailedconn: db 'failedconn',0
aClosepktconn: db 'ClosePktConn',0
aClosepacketcon: db 'closepacketconnection - DID NOT FIND ACTIVE PKTCONN IN CONN LIST.',0Ah,0
aCNfs2seFront_7: db 'c:\nfs2se\frontend\pc\eaInput.c',0
aUnknownErrorAc: db 'Unknown Error acquiring device %d',0Ah,0
aCNfs2seFron_12: db 'c:\nfs2se\frontend\pc\editor.c',0
aEditorAlreadyO: db 'Editor already open - ',0
aEdit: db 'edit',0
aOutOfMemoryReq: db 'Out of Memory, requested (%d)',0Ah,0
aEdittext: db 'edittext',0
a_num: db '*.num',0
aSS_num: db '%s%s.num',0
dword_4C9BA4: dd 0
aSmouse_fsh: db '%smouse.fsh',0
aPtr0: db 'ptr0',0
aCNfs2seFron_10: db 'c:\nfs2se\frontend\pc\movilite.c',0
aShowdct: db 'SHOWDCT',0
dbl_4C9C1C: dq 0.015625
dbl_4C9C24: dq -0.5
aMovieFileNotFo: db 'MOVIE FILE NOT FOUND',0
aShowdctNoDctCh: db 'SHOWDCT: No DCT chunks found!',0Ah,0
aEsta: db 'esta',0
aGsta: db 'gsta',0
aFsta: db 'fsta',0
aSsta: db 'ssta',0
aIsta: db 'ista',0
aWsta: db 'wsta',0
aPrh01: db 'prh01',0
aPrh02: db 'prh02',0
aPrh03: db 'prh03',0
aPrh04: db 'prh04',0
aPrh05: db 'prh05',0
aPrh06: db 'prh06',0
aPrh07: db 'prh07',0
aPrh08: db 'prh08',0
aCNfs2seFron_11: db 'c:\nfs2se\frontend\pc\prhstat.c',0
aPrhdata: db 'prhdata',0
aRec6_1: db 'rec6',0
aSDS_0: db '%s %d (%s)',0
aSD_2: db '%s %d',0
aDSS: db '%d %s (%s)',0
aDS_1: db '%d %s',0
aS_5: db '%s',0
a_ssf_0: db '.ssf',0
aSbSS: db '%sb%s%s',0
aSSS_0: db '%s%s%s',0
a_stf_0: db '.stf',0
aD_5: db '%d',0
aD_6: db '%d',0Ah,0
aRecords_1: db 'records',0
aPrhbuf: db 'prhbuf',0
asc_4C9D9C: db ' ',0
aPrhdumi: db 'prhdumi',0
aPrhfdumi: db 'prhfdumi',0
aPrhrank: db 'prhrank',0
a5_0f: db '%5.0f',0
aDot: db 'dot ',0
dbl_4C9DCC: dq 0.06
dbl_4C9DD4: dq 480.0
dbl_4C9DDC: dq 0.06666666666666667
dbl_4C9DE4: dq 640.0
flt_4C9DEC: dd 0.1
	dd 0
dbl_4C9DF4: dq 10.0
flt_4C9DFC: dd 0.015625
	dd 0
dbl_4C9E04: dq 64.0
dbl_4C9E0C: dq 288.0
dbl_4C9E14: dq 384.0
dbl_4C9E1C: dq 0.1111111111111111
dbl_4C9E24: dq 0.9
dbl_4C9E2C: dq 0.38
dbl_4C9E34: dq 144.0
dbl_4C9E3C: dq 243.2
aFilebufr: db 'filebufr',0
flt_4C9E50: dd 2.3
flt_4C9E6C: dd 0.1
flt_4C9E70: dd 2.3
flt_4C9E74: dd -0.1
	dd 0
	dd 40840000h, 0
	dd 407E0000h, 0
	dd 3FE00000h, 0
	dd 40740000h, 0
	dd 406E0000h
	times 2 dd 42000000h
	dd 42800000h
flt_4C9EAC: dd 32.0
flt_4C9EB0: dd 32.0
flt_4C9EB4: dd 32.0
	dd 440F8000h, 43000000h
flt_4C9EC0: dd 574.0
flt_4C9EC4: dd 128.0
flt_4C9EC8: dd 134.0
dbl_4C9ED0: dq 10.0
flt_4C9ED8: dd 256.0
aSswiss36a_ffn: db '%sswiss36a.ffn',0
aSswiss18_ffn_0: db '%sswiss18.ffn',0
dbl_4C9F00: dq -0.5
dbl_4C9F08: dq 0.5
flt_4C9F10: dd 32.0
aCNfs2seGame3_2: db 'c:\nfs2se\game\3rash\initgrf.c',0
aInitgraphicsIn: db 'initgraphics - INITMEMMAN REQUIRED BEFORE INITGRAPHICS',0Ah,0
dbl_4C9F6C: dq 0.5
dbl_4C9F74: dq 0.5
flt_4CA018: dd 0.050000001
aS3tr02d_hrz: db '%s3Tr%02d.hrz',0
aCNfs2seGame3_1: db 'c:\nfs2se\game\3rash\hrzsku.c',0
aGrngcoordtop: db 'gRngCoordTop',0
aGrngcoordbotto: db 'gRngCoordBottom',0
aSsky_fsh: db '%ssky.fsh',0
aCldD: db 'CLD%d',0
dbl_4CA214: dq 0.25
dbl_4CA21C: dq 0.001
dbl_4CA224: dq 0.0000152587890625
dbl_4CA22C: dq 0.0000152587890625
dbl_4CA234: dq 65536.0
aPazD: db 'paz%d',0
aCNfs2seGame3ra: db 'c:\nfs2se\game\3rash\platform.c',0
aDynamicRenderi: db 'Dynamic rendering buffer',0
aSplatcfg_dat: db '%splatcfg.dat',0
flt_4CB6B8: dd 0.00001525878
flt_4CB6BC: dd -1.0
flt_4CB6C0: dd 0.002004008
flt_4CB6C4: dd 0.5
flt_4CB6C8: dd 0.017453279
aS02d: db '%s%02d',0
aMooo: db 'mooo',0
aSm: db 'sm',0
aDi: db 'di',0
aGa: db 'ga',0
aSn: db 'sn',0
aGr: db 'gr',0
aMs: db 'ms',0
aSp: db 'sp',0
aCNfs2seGame3_0: db 'c:\nfs2se\game\3rash\Texture.c',0
aSwapshape: db 'swapShape',0
aGlideshape: db 'glideShape',0
aPaz: db 'paz',0
aTpg: db 'tpg',0
aLinD: db 'lin%d',0
aShad: db 'shad',0
aSkd0: db 'skd0',0
aSkd1: db 'skd1',0
aSkd2: db 'skd2',0
aSkd3: db 'skd3',0
aChr1: db 'chr1',0
aChr0: db 'chr0',0
aDrpD: db 'DRP%d',0
aSplD: db 'SPL%d',0
dbl_4CB7BC: dq 0.0000152587890625
dbl_4CB7C4: dq 0.0000152587890625
dbl_4CB7CC: dq 65536.0
dbl_4CB7D4: dq 0.0000152587890625
dbl_4CB7DC: dq 65536.0
dbl_4CB7E4: dq 0.0000152587890625
dbl_4CB7EC: dq 65536.0
dbl_4CB7F4: dq 0.0000152587890625
dbl_4CB7FC: dq 65536.0
aTrafcfg_dat: db 'trafcfg.dat',0
aAel1DDD: db 'AEL 1 (%d %d %d)',0
aAel1cD: db 'AEL 1c (%d ',0
aAel1aDD: db 'AEL 1a (%d %d)',0
aAel1bDD: db 'AEL 1b (%d %d)',0
aAel2DDDDDDD: db 'AEL 2 %d (%d %d %d) (%d %d %d)',0
aAel2aD: db 'AEL 2a [%d]',0
aAel3Purg: db 'AEL 3 purg ',0
aAelXDD: db 'AEL X (%d %d)',0
dbl_4CB98C: dq 4.0
dbl_4CB994: dq 65536.0
aAiPoaclXDDDDD: db 'AI-POACL X (%d) [%d] [%d %d %d] ',0
aAiCaXDDD: db 'AI-CA X (%d) [%d %d]',0
aAiAip1DDDDDDDD: db 'AI-AIP 1 (%d) [%d %d] [%d %d %d] [%d %d %d] [%d %d %d] [%d %d]',0
aAiAipXDDDDDDDD: db 'AI-AIP X (%d) [%d %d] [%d %d %d] [%d %d %d] [%d %d %d] [%d %d]',0
aB: db 'b',0
dword_4CBA68: dd 0
aStr02dS_S: db '%sTr%02d%s.%s',0
aCNfs2seGameCom: db 'c:\nfs2se\game\common\aispeeds.c',0
aSpeedsBuffer: db 'Speeds Buffer',0
aSpdLine: db 'Spd Line',0
aErrorCannotOpe: db 'ERROR: cannot open %s',0
aS02da_can: db '%s%02da.can',0
aS02d_can: db '%s%02d.can',0
aMacf1: db 'MacF1',0
aFerf50: db 'ferf50',0
aTr355: db 'tr355',0
aFgt90: db 'Fgt90',0
aFindi: db 'Findi',0
aMust: db 'must',0
aJxj220: db 'jxj220',0
aLogt1: db 'logt1',0
aLesv8: db 'lesv8',0
aNazca_1: db 'nazca',0
aIdcala: db 'idcala',0
aIsd112i: db 'isd112i',0
aMuscl: db 'muscl',0
aStock: db 'stock',0
aFutur: db 'futur',0
aOmacf1: db 'oMacF1',0
aOferf50: db 'oferf50',0
aOtr355: db 'otr355',0
aOfgt90: db 'oFgt90',0
aOfindi: db 'oFindi',0
aOmust: db 'omust',0
aOjxj220: db 'ojxj220',0
aOlogt1: db 'ologt1',0
aOlesv8: db 'olesv8',0
aOnazca: db 'onazca',0
aOidcala: db 'oidcala',0
aOisd112: db 'oisd112',0
aOmuscl: db 'omuscl',0
aOstock: db 'ostock',0
aOfutur: db 'ofutur',0
aSmacf1: db 'sMacF1',0
aSferf50: db 'sferf50',0
aStr355: db 'str355',0
aSfgt90: db 'sFgt90',0
aSfindi: db 'sFindi',0
aSmust: db 'smust',0
aSjxj220: db 'sjxj220',0
aSlogt1: db 'slogt1',0
aSlesv8: db 'slesv8',0
aSnazca: db 'snazca',0
aSidcala: db 'sidcala',0
aSisd112: db 'sisd112',0
aSmuscl: db 'smuscl',0
aSstock: db 'sstock',0
aSfutur: db 'sfutur',0
aWmacf1: db 'wMacF1',0
aWferf50: db 'wferf50',0
aWtr355: db 'wtr355',0
aWfgt90: db 'wFgt90',0
aWfindi: db 'wFindi',0
aWmust: db 'wmust',0
aWjxj220: db 'wjxj220',0
aWlogt1: db 'wlogt1',0
aWlesv8: db 'wlesv8',0
aWnazca: db 'wnazca',0
aWidcala: db 'widcala',0
aWisd112: db 'wisd112',0
aWbonus: db 'wbonus',0
aFesfx: db 'fesfx',0
aStrex: db 'strex',0
aScrate: db 'scrate',0
aSputt: db 'sputt',0
aStruck: db 'struck',0
aSlimo: db 'slimo',0
aTrex: db 'trex',0
aCrate: db 'crate',0
aPutt: db 'putt',0
aTruck: db 'truck',0
aLimo: db 'limo',0
aGen: db 'Gen',0
aCnteng: db 'cnteng',0
aCntger: db 'cntger',0
aCntfrn: db 'cntfrn',0
aCntspn: db 'cntspn',0
aCntitl: db 'cntitl',0
aSpcheng: db 'spcheng',0
aSpchger: db 'spchger',0
aSpchfrn: db 'spchfrn',0
aSpchspn: db 'spchspn',0
aSpchitl: db 'spchitl',0
aStramb02d: db '%stramb%02d',0
aG: db 'g',0
asc_4CBDB4: db 'f',0
aS_1: db 's',0
aI: db 'i',0
aRain: db 'rain',0
aStr02dS: db '%sTr%02d%s',0
a_dis: db '.dis',0
aCNfs2seGameC_3: db 'c:\nfs2se\game\common\bworld.c',0
aBwdistfront: db 'BWDistFront',0
dword_4CBFB8: dd 0
a_col: db '.col',0
a_trk: db '.trk',0
aSmain_trk: db '%smain.trk',0
aChunklist: db 'ChunkList',0
aMallocReturned: db 'malloc returned NULL: size:%d',0Ah,0
aArtres: db 'ArtRes',0
aPal: db '!pal',0
a0m_qfs: db '0m.qfs',0
a0_qfs: db '0.qfs',0
aPersist: db 'Persist',0
aNfs2_loadfilea: db 'Nfs2_loadfileadr mem error: %s',0Ah,0
flt_4CC48C: dd 0.0000025431316
	dd 0
dbl_4CC494: dq 1.34834
aS_dat: db '%s.dat',0
aStrd: db 'STRD',0
aPS: db 'p%s',0
aPjagr: db 'pjagr',0
aPtr02d: db 'ptr%02d',0
aPcala: db 'pcala',0
aCNfs2seGame_11: db 'c:\nfs2se\game\common\cars.c',0
aCarspecs: db 'carSpecs',0
aSimtune: db 'SimTune',0
aA_qfs: db 'a.qfs',0
a_qfs: db '.qfs',0
aCarobj: db 'carObj',0
aScardata_viv: db '%scardata.viv',0
dbl_4CC5C4: dq 6.0
aCol_opencolfil: db 'Col_OpenColFile: ERROR: collection file still open',0Ah,0
aCol_opencolf_0: db 'Col_OpenColFile: ERROR: rc:%d',0Ah,0
aColl: db 'COLL',0
aCol_opencolf_1: db 'Col_OpenColFile: ERROR: #2',0
aCol_opencolf_2: db 'Col_OpenColFile: ERROR: #3',0
aTextsim_eng: db 'textsim.eng',0
aTextsim_ger: db 'textsim.ger',0
aTextsim_fre: db 'textsim.fre',0
aTextsim_spa: db 'textsim.spa',0
aTextsim_ita: db 'textsim.ita',0
aTextsim_swe: db 'textsim.swe',0
a2d02d_02d: db '%2d:%02d.%02d',0
a2d02d02d: db '%2d:%02d:%02d',0
a2d02d02d_0: db '%2d',27h,'%02d',27h,27h,'%02d',0
a2d_02d02d: db '%2d.%02d,%02d',0
aSS_3: db '%s%s',0
aShudcon_dat: db '%shudcon.dat',0
aCNfs2seGameC_5: db 'c:\nfs2se\game\common\dashHUD.c',0
aHudcon: db 'hudcon',0
asc_4CC788: db ' / ',0
aDD2: db '%d/%d',0
a2d2d: db '%2d/%-2d',0
aD_1: db '%d',0
a3d: db '%3d',0
aCNfs2seGameC_0: db 'c:\nfs2se\game\common\eacfile.c',0
aFilehandles: db 'filehandles',0
aOpenwinfileCan: db 'openwinfile - CANNOT MIRROR MAPPED FILES',0Ah,0
aOpenwinfileC_0: db 'openwinfile - CANNOT MEMORY MIRROR FILES FOR WRITE',0Ah,0
aOpenwinfileMus: db 'openwinfile - MUST SPECIFY BLOCK SIZE FOR MEMORY MIRRORED FILES',0Ah,0
aMirror: db 'mirror',0
asc_4CC934: db ' :\',0
aReadwinfileMir: db 'readwinfile - MIRROR DATA MISSING FOR MIRRORED FILE',0Ah,0
aReadwinfileNon: db 'readwinfile - NONALIGNED READ ON BLOCK ORIENTED FILE',0Ah,0
aWritewinfileCa: db 'writewinfile - CANNOT WRITE TO MEMORY MIRRORED FILES',0Ah,0
aCNfs2seGameC_1: db 'c:\nfs2se\game\common\MinFront.c',0
aFeDataStream: db 'FE Data Stream',0
aCNfs2seGameC_9: db 'c:\nfs2se\game\common\newton.c',0
aNewtonUriXDDDD: db 'NEWTON-URI X (%d) [%d %d %d]',0
dbl_4CD820: dq 0.5
aNewtonAtlog1DD: db 'NEWTON-ATLOG 1 (%d) [%d %d] [%d %d %d] [%d %d %d] [%d %d %d]',0
aNewtonAtlogXDD: db 'NEWTON-ATLOG X (%d ) [%d %d %d] [%d %d %d] [%d %d %d]',0
aSfxtext_fsh: db '%sfxtext.fsh',0
aCNfs2seGameC_2: db 'c:\nfs2se\game\common\nfs2.c',0
aPasstats: db 'passtats',0
aCNfs2seGame_17: db 'c:\nfs2se\game\common\packet.c',0
aBugUnknownPktI: db 'BUG: unknown pkt index <%d>',0
aInstall_win_0: db 'install.win',0
aSprsonal_dat: db '%sprsonal.dat',0
	db 'oke - see dave)',0Ah,0
aCNfs2seGame_18: db 'c:\nfs2se\game\common\physics.c',0
aErrorAiSpeedFi: db 'ERROR: AI SPEED file not loaded',0
aCNfs2seGameC_8: db 'c:\nfs2se\game\common\R3DCar.c',0
a_geo: db '.geo',0
aCargeo: db 'carGeo',0
aSilSpd: db 'SIL SPD',0
aReplay_rpy_0: db 'replay.rpy',0
aCNfs2seGameC_6: db 'c:\nfs2se\game\common\risk.c',0
aHeadZSortingBu: db 'Head z sorting buffers',0
aTailZSortingBu: db 'Tail z sorting buffers',0
aCNfs2seGame_10: db 'c:\nfs2se\game\common\schedule.c',0
aCNfs2seGameC_7: db 'c:\nfs2se\game\common\serial.c',0
aSerial_connect: db 'Serial_Connect() called with invaild commMode',0
aSc32: db 'Sc32',0
aSc64: db 'Sc64',0
a____0: db '...',0
aCNfs2seGame_16: db 'c:\nfs2se\game\common\simqueue.c',0
aGamesetup_gdat: db 'GameSetup_gData.commMode invalid in SimQueue_Put',0Ah,0
aSsm02dS: db '%sSm%02d%s',0
a_dat: db '.dat',0
aCNfs2seGame_13: db 'c:\nfs2se\game\common\Transfmr.c',0
aTrnfset: db 'TrnfSet',0
aTrnfnode: db 'TrnfNode',0
aCNfs2seGame_14: db 'c:\nfs2se\game\common\udff.c',0
aUdffhandle: db 'udffhandle',0
aUdff_openaNotE: db 'Udff_Opena - not enough memory',0
aUdff_openaBadU: db 'Udff_Opena - bad usage',0
aPionrock: db 'pionrock',0
aNcntrock: db 'ncntrock',0
aObakrock: db 'obakrock',0
aPacrock: db 'pacrock',0
aLastrock: db 'lastrock',0
aMedrock: db 'medrock',0
aHimrock: db 'himrock',0
aHollyrok: db 'hollyrok',0
aPiontech: db 'piontech',0
aNcnttech: db 'ncnttech',0
aObaktech: db 'obaktech',0
aPactech: db 'pactech',0
aLasttech: db 'lasttech',0
aMedtech: db 'medtech',0
aHimtech: db 'himtech',0
aHollytec: db 'hollytec',0
aShow: db 'show',0
aCredits_0: db 'credits',0
aStemp_mus: db '%stemp.mus',0
aCNfs2seGamePcA: db 'c:\nfs2se\game\pc\audio.c',0
aBufptr: db 'bufPtr',0
aSS_mus: db '%s%s.mus',0
aSS_4: db '%s%s',0
aSshow2: db '%sshow2',0
aSshow: db '%sshow',0
a_map: db '.map',0
a_mus: db '.mus',0
aStemp: db '%stemp',0
a_asf: db '.asf',0
a_bnk: db '.bnk',0
aBhdr: db 'bhdr',0
aCNfs2seGamePcC: db 'c:\nfs2se\game\pc\CarIO.c',0
aDraw_tpixmap: db 'Draw_tPixMap',0
	dd 9963E11Dh, 3F91DF46h, 0
	dd 40568000h, 6F676F6Ch, 0
aNull: db 'Null',0
aAnalog: db 'Analog',0
aButton: db 'Button',0
aKey: db 'Key',0
aIntface: db 'Intface',0
aJoycal_cfg: db 'JOYCAL.CFG',0
aMicrosoft: db 'Microsoft',0
aWater: db 0Ah,'>>>>>>Water<<<<<<<',0Ah,0
dbl_4CE850: dq 1000000.0
dbl_4CE858: dq 0.5
aHud0: db 'hud0',0
aHud2: db 'hud2',0
aHud3: db 'hud3',0
aCNfs2seGamePcH: db 'c:\nfs2se\game\pc\hud.c',0
aFacetlst: db 'facetlst',0
aShuddata_viv: db '%shuddata.viv',0
aR_2: db 'r',0
dword_4CE924: dd 0
aSplitS_msk: db 'split%s.msk',0
aHuddata1: db 'huddata1',0
aHudS_msk: db 'hud%s.msk',0
aHuddata2: db 'huddata2',0
aDsh02d_msk: db 'dsh%02d.msk',0
aHuddash: db 'huddash',0
aDsh00_msk: db 'dsh00.msk',0
aHuddata3: db 'huddata3',0
aHdDa: db 'hd%da',0
aTpgD: db 'tpg%d',0
aHudD: db 'hud%d',0
aF03d: db 'f%03d',0
aBack0_rlf: db 'back0.rlf',0
aBack1_rlf: db 'back1.rlf',0
aBack2_rlf: db 'back2.rlf',0
aMapbkg_rlf: db 'mapbkg.rlf',0
aTop0_rlf: db 'top0.rlf',0
aTop1_rlf: db 'top1.rlf',0
aTop2_rlf: db 'top2.rlf',0
aBottom0_rlf: db 'bottom0.rlf',0
aBottom1_rlf: db 'bottom1.rlf',0
aBottom2_rlf: db 'bottom2.rlf',0
aEng1: db 'eng1',0
aGer1: db 'ger1',0
aFre1_0: db 'fre1',0
aSpa1: db 'spa1',0
aIta1: db 'ita1',0
aSwe1: db 'swe1',0
aEng2: db 'eng2',0
aGer2: db 'ger2',0
aFre2_0: db 'fre2',0
aSpa2: db 'spa2',0
aIta2: db 'ita2',0
aSwe2: db 'swe2',0
aPio: db 'pio',0
dword_4CEAE8: dd 0
aOut_0: db 'out',0
aPac_1: db 'pac',0
aLas: db 'las',0
aNor_0: db 'nor',0
aMed_1: db 'med',0
aMys: db 'mys',0
aMon_0: db 'mon',0
aMac_0: db 'mac',0
aFer: db 'fer',0
a355f: db '355f',0
aFrd: db 'frd',0
aInd_0: db 'ind',0
aMus_2: db 'mus',0
aJag_2: db 'jag',0
aGt1_1: db 'gt1',0
aV8: db 'v8',0
aNaz: db 'naz',0
aIta: db 'ita',0
aIsd_0: db 'isd',0
aBra: db 'bra',0
aBlk: db 'blk',0
aFzr_0: db 'fzr',0
aEngl_3: db 'engl',0
aGerm_2: db 'germ',0
aFren_2: db 'fren',0
aSpan_2: db 'span',0
aItly_2: db 'itly',0
aSwed_2: db 'swed',0
aCNfs2seGamePcL: db 'c:\nfs2se\game\pc\loading.c',0
aBadSlidePickCa: db 'bad slide pick:  car = %d, # = %d',0
aSD_3: db '%s%d',0
aS_2: db '%s',0
aSsldS_qfs: db '%ssld%s.qfs',0
aSSload_qfs: db '%s%sload.qfs',0
aBack_3: db 'back',0
aSload_qfs: db '%sLoad.qfs',0
aUdp: db 'UDP',0
aTcpGather: db 'TCP gather',0
aCNfs2seGamePcN: db 'c:\nfs2se\game\pc\net.c',0
aBugAddnewplaye: db 'BUG: AddNewPlayers() - Player Overflow (should have gotten past addplayer_callback())',0Ah,0
aBugDropdeadpla: db 'BUG: DropDeadPlayers LC=%d IsHost=%d',0Ah,0
aServicelist: db 'ServiceList',0
aTcp: db 'TCP',0
aDirectplay: db 'DirectPlay',0
aDirectplayIpx: db 'DirectPlay IPX',0
aDirectplayTcp: db 'DirectPlay TCP',0
aPD: db 'P %d',0
aCNfs2seGamePcP: db 'c:\nfs2se\game\pc\palette.c',0
aRemaptable: db 'remaptable',0
aCNfs2seGamePcS: db 'c:\nfs2se\game\pc\skidmark.c',0
aSkidmark: db 'SkidMark',0
aCNfs2seGameP_0: db 'c:\nfs2se\game\pc\stmrdpc.c',0
aErrorCouldNotA: db 'ERROR - Could not allocate track memory.',0
aTrac: db 'TRAC',0
aStmchunkf: db 'StmChunkF',0
aStmcenter: db 'StmCenter',0
aStmmetai: db 'StmMetaI',0
flt_4CF458: dd 0.000015258789
aFileSLineD: db 'FILE %s LINE %d',0Ah,0
aCalledFromFile: db 'CALLED FROM FILE %s LINE %d',0Ah,0
;	char aAbortMessage[]
aAbortMessage: db 'Abort message:',0
aLow8s: db 'LOW %-8s',0
aHigh7s: db 'HIGH %-7s',0
aAsyncreader: db 'asyncreader',0
aAsyncfile: db 'asyncfile',0
aGenuineintel: db 'GenuineIntel',0
aAuthenticamd: db 'AuthenticAMD',0
aCyrixinstead: db 'CyrixInstead',0
a_fsh: db '.fsh',0
aResize: db 'RESIZE',0
aAttn: db 'ATTN',0
asc_4CFE60: db '    ',0
asc_4CFEB4: db 0Ah,0
dword_4CFEB8: dd 0
a08xC02x4_4s08x: db '%08x%c[%02x] %4.4s %08x %20s %4d bytes',0Ah,0
aEagame_08x_04x: db 'EAGAME.%08x.%04x%04x.%02x%02x%02x%02x.%02x%02x%02x%02x',0
aNetsrvr: db 'NETSRVR',0
aEac_ea_com: db 'eac.ea.com',0
aAte1: db 'ATE1',0Dh,0
aOk: db 'OK',0
a_0_: db '_0_',0
a0_0: db '0',0
aConnect: db 'CONNECT',0
a_1_: db '_1_',0
a1_0: db '1',0
aRing: db 'RING',0
a_2_: db '_2_',0
a2_0: db '2',0
aNoCarrier: db 'NO CARRIER',0
a_3_: db '_3_',0
a3: db '3',0
aError: db 'ERROR',0
a_4_: db '_4_',0
a4: db '4',0
aConnect1200: db 'CONNECT 1200',0
a_5_: db '_5_',0
a5: db '5',0
aNoDialtone: db 'NO DIALTONE',0
a_6_: db '_6_',0
a6: db '6',0
aNoDialTone2: db 'NO DIAL TONE',0
aBusy_0: db 'BUSY',0
a_7_: db '_7_',0
a7: db '7',0
aNoAnswer: db 'NO ANSWER',0
a_8_: db '_8_',0
a8: db '8',0
aConnect2400: db 'CONNECT 2400',0
a_10_: db '_10_',0
a10: db '10',0
aConnect9600: db 'CONNECT 9600',0
a_13_: db '_13_',0
a13: db '13',0
aConnect9600Arq: db 'CONNECT 9600/ARQ',0
a_17_: db '_17_',0
a17: db '17',0
aConnect9600Hst: db 'CONNECT 9600/HST',0
a_23_: db '_23_',0
a23: db '23',0
aConnect9600A_0: db 'CONNECT 9600/ARQ/HST',0
a_27_: db '_27_',0
a27: db '27',0
aConnect14400: db 'CONNECT 14400',0
a_25_: db '_25_',0
a25: db '25',0
aConnect14400Ar: db 'CONNECT 14400/ARQ',0
a_26_: db '_26_',0
a26: db '26',0
aConnect14400Hs: db 'CONNECT 14400/HST',0
a_35_: db '_35_',0
a35: db '35',0
aConnect14400_0: db 'CONNECT 14400/ARQ/HST',0
a_36_: db '_36_',0
a36: db '36',0
aConnect28800: db 'CONNECT 28800',0
a_107_: db '_107_',0
a107: db '107',0
asc_4D01A0: db 0Dh,0
asc_4D01A4: db '+++',0
aAt: db 'AT',0
aSerialbuf: db 'serialbuf',0
a_ComD: db '\\.\COM%d',0
aDxDxD: db '%dx%dx%d',0
dbl_4D05A0: dq -0.5
dbl_4D05A8: dq 0.5
dbl_4D05B0: dq -0.3441
dbl_4D05B8: dq 1.772
dbl_4D05C0: dq 1.402
dbl_4D05C8: dq -0.7141
dbl_4D05D0: dq 0.5
aCdbuffer: db 'CDBUFFER',0
aCdstream: db 'CDSTREAM',0
aStream: db 'STREAM',0
dword_4D070C: dd 0
aSeccdstream: db 'SECCDSTREAM',0
dbl_4D07E8: dq -1.0
aDtoD: db '%dto%d',0
aRowtbl: db 'rowtbl',0
dbl_4D0D94: dq 6.283184714
aMb_ram: db 'MB_RAM',0
aMb_vmm: db 'MB_VMM',0
aGalloc: db 'galloc',0
aGmem: db 'GMEM',0
aGend: db 'GEND',0
aGfre: db 'GFRE',0
dbl_4D1484: dq 1.2582912e7
dbl_4D148C: dq 0.7
flt_4D1494: dd 65536.0
aCrcf: db 'CRCF',0
	db 'd',0Ah,0
dbl_4D1818: dq 0.000015258
dbl_4D1820: dq 0.000015258
dbl_4D1828: dq 0.000015258
dbl_4D1830: dq 0.000015258
dbl_4D1838: dq 0.001953125
dbl_4D1840: dq 1.2582912e7
dbl_4D1848: dq 1.2582912e7
dbl_4D1850: dq 0.5
dbl_4D1858: dq 1.2582912e7
dbl_4D1860: dq 1.2582912e7
aExitYN: db 'Exit (Y/N)',0
aPausePressAnyK: db 'PAUSE - PRESS ANY KEY TO RESUME',0
dbl_4D1D6C: dq 256.0
dbl_4D1E58: dq 0.59738597
dbl_4D1E60: dq -0.11459156
dbl_4D1E68: dq 0.01803268
dbl_4D1E70: dq 8.0
dbl_4D1E78: dq 0.001
dbl_4D1E80: dq 1.04
dbl_4D1E88: dq 0.25
dbl_4D1E90: dq 0.06666666666666667
dbl_4D1E98: dq 0.5
byte_4D1FA4: db 1
	db 2, 4, 8
	db 10h, 20h
byte_4D1FE8: db 0
byte_4D1FE9: db 0
dword_4D1FEC: dd 15Eh
	dd 760076h
	times 2 dd 76006Ch
dword_4D1FFC: dd 0
dword_4D2000: dd 0
off_4D2004: dd aEnglish_1
	dd aGerman_1 ; "German"
	dd aFrench_1 ; "French"
	dd aSpanish_1 ; "Spanish"
	dd aItalian_1 ; "Italian"
	dd aEnglish_1 ; "English"
off_4D201C: dd dword_512E34
	dd dword_512E3C
	dd dword_512E44
	dd dword_512E4C
	dd dword_512E64
	dd dword_512E74
	dd dword_512E7C
	dd dword_512E5C
	dd dword_512E54
	dd dword_512E6C
	dd dword_512E38
	dd dword_512E40
	dd dword_512E48
	dd dword_512E50
	dd dword_512E68
	dd dword_512E78
	dd dword_512E80
	dd dword_512E60
	dd dword_512E58
	dd dword_512E70
off_4D206C: dd dword_512E0C
	dd dword_512E10
	dd dword_512E14
	dd dword_512E18
	dd dword_512E24
	dd dword_512E2C
	dd dword_512E30
	dd dword_512E20
	dd dword_512E1C
	dd dword_512E28
dword_4D2094: dd 0
dword_4D2098: dd 0
dword_4D209C: dd 0
dword_4D20A0: dd 0
dword_4D20A4: dd 0
dword_4D20A8: dd 0
	dd 14h
dword_4D20B0: dd 8
	dd 908080h, 0FFFFFFh, 815412h, 0F4CC28h, 8F0F0h, 484040h
	dd 800000h, 0D59C30h
dword_4D20D4: dd 6
aOc999: db 'Oc[;999',0
aXvkXwn: db ']XVK\]XWN',0
aKxvkn: db 'KXVKN[',0
aQxuubXxm: db 'QXUUb`XXM',0
aYrxwnn: db 'YRXWNN[',0
aUry: db '\URY',0
aUx: db '\UX]',0
aVjm: db 'VJM',0
aJrw: db '[JRW',0
aLqjN: db 'LQJ\N',0
aTlsxwn: db 'TLSXWN\',0
aQqx: db '[^\QQX^[',0
aNaqx: db '[NaQX^[',0
aVjmujwm: db 'VJMUJWM',0
aLqxxucxwn: db '\LQXXUcXWN',0
a_ry: db '_RY',0
aXjmJpn: db '[XJM[JPN',0
off_4D2158: dd aOc999
	dd aXvkXwn ; "]XVK\\]XWN"
	dd aKxvkn ; "KXVKN["
	dd aQxuubXxm ; "QXUUb`XXM"
	dd aYrxwnn ; "YRXWNN["
	dd aUry ; "\\URY"
	dd aUx ; "\\UX]"
	dd aVjm ; "VJM"
	dd aJrw ; "[JRW"
	dd aLqjN ; "LQJ\\N"
	dd aTlsxwn ; "TLSXWN\\"
	dd aQqx ; "[^\\QQX^["
	dd aNaqx ; "[NaQX^["
	dd aVjmujwm ; "VJMUJWM"
	dd aLqxxucxwn ; "\\LQXXUcXWN"
	dd a_ry ; "_RY"
	dd aXjmJpn ; "[XJM[JPN"
dword_4D219C: dd 0
dword_4D21A0: dd 0
word_4D21A4: dw 0
	times 2 db 0
	dd 0
dword_4D21AC: dd 0
dword_4D21B0: dd 1
word_4D21B4: dw 0
	times 2 db 0
	dd 20001h, 10000h, 2
dword_4D21C4: dd 30000h
	dd 70000h, 10003h
	db 1, 0
dword_4D21D2: dd 0C0000h
	dw 8
	dd 0D000Eh, 6000Bh, 0Ah, 20005h
dword_4D21E8: dd 0A0009h
	dd 20001h, 40007h, 60008h, 50003h
	db 9, 0
dword_4D21FE: dd 70000h
	dw 3
	dd 70000h, 10003h
	db 1, 0
dword_4D220E: dd 90000h
	dw 6
	dd 4000Bh, 0B0009h
dword_4D221C: dd 0C0006h
	dd 80005h, 0B0003h, 6, 0E000Ah
	db 2, 0
dword_4D2232: dd 4
	dw 2
	dd 10004h, 60003h, 80005h, 0A0009h
dword_4D2248: dd 40007h
	dd 60009h, 4000Bh, 0B0009h
dword_4D2258: dd 50006h
	dd 2000Ah, 80005h
	db 2, 0
dword_4D2266: dd 0C000Ah
	dw 8
	dd 0D000Eh, 6000Bh, 0Ah, 20005h
dword_4D227C: dd 20009h
	dd 3000Ah, 10009h, 40007h, 80006h
	db 5, 0
dword_4D2292: dd 80000h
	dw 5
	dd 2000Ah, 80005h, 0A0002h
dword_4D22A4: dd 0
byte_4D22A8: db 8
byte_4D22A9: db 13h
	dw 1615h
	dd 1E1D1B19h
	db 1Fh
byte_4D22B1: db 8
byte_4D22B2: db 12h
	db 17h
	dd 1D1B1A18h
	db 1Fh, 20h
byte_4D22BA: db 0Bh
byte_4D22BB: db 12h
	dd 16151413h, 1A191817h
	db 1Ch, 20h
byte_4D22C6: db 6
byte_4D22C7: db 12h
	dd 1D1C1A19h
	db 20h
byte_4D22CD: db 5
byte_4D22CE: db 13h
	db 16h
	db 19h, 1Eh, 21h
byte_4D22D3: db 5
byte_4D22D4: db 13h
	db 16h, 19h, 1Eh
	db 1Fh
byte_4D22D9: db 4
byte_4D22DA: db 22h
	db 23h
	dd 2322h
dword_4D22E0: dd 10000h
	dd 18000h, 20000h
dword_4D22EC: dd 0CCCCh
dword_4D22F0: dd 10000h
	dd 13333h
dword_4D22F8: dd 3333h
dword_4D22FC: dd 0
	dd 0FFFFCCCDh
dword_4D2304: dd 0D999h
dword_4D2308: dd 10000h
	dd 12666h
dword_4D2310: dd 0
dword_4D2314: dd 0
word_4D2318: dw 0
word_4D231A: dw 0
dword_4D231C: dd 0
dword_4D2320: dd 0
dword_4D2324: dd 0
dword_4D2328: dd 0
word_4D232C: dw 1
	dw 0
dword_4D2330: dd 0Ch
	dd 8, 4, 0Bh, 5, 3, 0Ah, 7, 1, 6, 2, 9
	times 3 dd 0
dword_4D236C: dd 0Ah
	dd 0Ch, 1, 0Bh, 7, 5, 9, 6, 3, 4, 2, 8
	times 3 dd 0
dword_4D23A8: dd 9
	dd 8, 4, 6, 0Ch, 5, 1, 0Bh, 3, 0Ah, 7, 2
	times 3 dd 0
dword_4D23E4: dd 0Ch
	dd 8, 5, 2, 0Bh, 4, 3, 0Ah, 7, 6, 9, 1
	times 3 dd 0
dword_4D2420: dd 0
off_4D2424: dd dword_4D26F0
off_4D2428: dd dword_4D26D4
	dd dword_4D298C
	dd dword_4D2F50
	dd dword_4D3088
	dd dword_4D317C
dword_4D243C: dd 0
dword_4D2440: dd 0
dword_4D2444: dd 0
word_4D2448: dw 28h
	dw 28h
	dd 280028h
	times 2 db 0
word_4D2452: dw 0
	dd 0
byte_4D2458: times 2 db 0
word_4D245A: dw 0
	dd 0
byte_4D2460: times 2 db 0
word_4D2462: dw 0
	dd 0
byte_4D2468: times 2 db 0
word_4D246A: dw 0
	times 2 dd 0
off_4D2474: dd aNedb
	dd aNeds ; "neds"
	dd aSpdb ; "spdb"
	dd aSpds ; "spds"
	dd aForb ; "forb"
	dd aFors ; "fors"
	dd aBspb ; "bspb"
	dd aBsps ; "bsps"
	dd aBndb ; "bndb"
	dd aBnds ; "bnds"
	dd aBfrb ; "bfrb"
	dd aBfrs ; "bfrs"
dword_4D24A4: dd 0FFFFFFF7h
	dd 0FFFFFFF7h, 45h, 0B0h, 10Dh, 16Bh, 0
word_4D24C0: dw 0
	dw 0FFFFh
	times 2 db 0
dword_4D24C6: dd 0
	times 2 db 0
dword_4D24CC: dd 0
	dd 1, 0
byte_4D24D8: db 0
	times 3 db 0
dword_4D24DC: dd 0
dword_4D24E0: dd 0
dword_4D24E4: dd 0
dword_4D24E8: dd 0
dword_4D24EC: dd 250024h, 270026h, 0
dword_4D24F8: dd 210002h, 0
	dd 4
	dd byte_512F44
	dd dword_4D24EC
dword_4D250C: dd 220002h
	dd dword_4D403C
	dd 902h, 0
	dd dword_4D24E8
dword_4D2520: dd 230002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2534: dd 200000h
	times 4 dd 0
off_4D2548: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 2
	dd dword_4D24F8
	dd dword_4D250C
	dd dword_4D2520
	dd dword_4D2534
	dd 0
dword_4D25A4: dd 2C0002h
	dd dword_4D403C
	dd 902h, 0
	dd dword_4D24E8
dword_4D25B8: dd 2D0002h
	dd dword_4D403C
	dd 0A02h, 0
	dd dword_4D24E8
dword_4D25CC: dd 2E0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D25E0: dd 280000h
	times 4 dd 0
off_4D260C: dd dword_4D25A4
off_4D2610: dd dword_4D25B8
	dd dword_4D25CC
	dd dword_4D25E0
	dd 0
dword_4D2620: dd 310002h, 0
	dd 504h, 0
	dd dword_4D24E8
dword_4D2634: dd 370036h, 0
dword_4D263C: dd 320002h, 0
	dd 604h
	dd byte_51345F
	dd dword_4D2634
dword_4D2650: dd 330002h
	dd dword_4D403C
	dd 800h, 0
	dd dword_4D24E8
dword_4D2664: dd 340002h
	dd dword_4D403C
	dd 700h, 0
	dd dword_4D24E8
dword_4D2678: dd 380002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D268C: dd 2F0000h
	times 4 dd 0
off_4D26A0: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 2
	dd dword_4D2620
off_4D26B0: dd dword_4D263C
	dd dword_4D2650
	dd dword_4D2664
	dd dword_4D2678
	dd dword_4D268C
	dd 0
dword_4D26C8: dd 120011h, 140013h, 15h
dword_4D26D4: dd 90002h, 0
	dd 4
	dd byte_512DA9
	dd dword_4D26C8
dword_4D26E8: dd 170016h, 18h
dword_4D26F0: dd 0A0002h, 0
	dd 4
	dd byte_512DAA
	dd dword_4D26E8
dword_4D2704: dd 1B0019h, 1Ah, 0B0002h, 0
byte_4D2714: db 4
	times 3 db 0
	dd byte_512DAB
	dd dword_4D2704
dword_4D2720: dd 0DB00DAh, 0DB0000h, 0DAh
dword_4D272C: dd 0C0002h, 0
	dd 4
	dd byte_512DAE
	dd dword_4D2720+6
dword_4D2740: dd 0D0002h, 0
	dd 4
	dd byte_512DBA
	dd dword_4D2720+6
dword_4D2754: dd 0E0002h, 0
	dd 4
	dd byte_512DBB
	dd dword_4D2720+6
dword_4D2768: dd 0F0002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D277C: dd 100002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
off_4D2790: dd aMain
	dd aBlk4_0 ; "blk4"
	db 2, 0
word_4D279A: dw 0
	dd dword_4D26D4
	dd dword_4D26F0
	dd dword_4D2704+8
off_4D27A8: dd dword_4D272C
	dd dword_4D2740
	dd dword_4D2754
	dd dword_4D2768
	dd dword_4D277C
	dd 0
dword_4D27C0: dd 0BF0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D27D4: dd 0C00002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D27E8: dd 0C10002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D27FC: dd 0C20002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D2810: dd 0C30002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2824: dd 0
	dd aBack_4 ; "back"
	dd 15h
	dd dword_4D27C0
	dd dword_4D27D4
	dd dword_4D27E8
	dd dword_4D27FC
	dd dword_4D2810
	dd 0
dword_4D2848: dd 9E0002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D285C: dd 9F0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2870: dd 0
	dd aBack_4 ; "back"
	dd 0Bh
	dd dword_4D2848
	dd dword_4D285C
	dd 0
dword_4D2888: dd 0AC0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D289C: dd 0AD0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D28B0: dd 0B20002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D28C4: dd 0
	dd aBack_4 ; "back"
	dd 16h
	dd dword_4D2888
	dd dword_4D289C
	dd dword_4D28B0
	dd 0
dword_4D28E0: dd 0AC0002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D28F4: dd 0AD0002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2908: dd 0AF0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D291C: dd 0B00002h
	dd dword_4D2824
	times 2 dd 0
	dd dword_4D24E8
dword_4D2930: dd 0B10002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2944: dd 0
	dd aBack_4 ; "back"
	dd 0Ah
	dd dword_4D28E0
	dd dword_4D28F4
	dd dword_4D2908
	dd dword_4D291C
	dd dword_4D2930
	dd 0
dword_4D2968: dd 410040h, 430042h, 450044h, 46h
dword_4D2978: dd 410040h, 430042h, 450044h, 470046h, 0
dword_4D298C: dd 390002h, 0
	dd 4
	dd byte_512DB0
off_4D299C: dd dword_4D2968
dword_4D29A0: dd 490048h, 4Ah
dword_4D29A8: dd 3A0002h, 0
	dd 1604h
	dd byte_512DB9
	dd dword_4D29A0
dword_4D29BC: dd 3B0002h
	dd dword_4D2870
	dd 2, 0
	dd dword_4D24E8
dword_4D29D0: dd 3C0002h
	dd dword_4D2944
	dd 2, 0
	dd dword_4D24E8
dword_4D29E4: dd 3D0002h
	dd dword_4D2824
	dd 2, 0
	dd dword_4D24E8
dword_4D29F8: dd 3E0002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D2A0C: dd 3F0002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
off_4D2A20: dd aMain
	dd aBlk4_0 ; "blk4"
	db 2, 0
word_4D2A2A: dw 0
off_4D2A2C: dd dword_4D298C
off_4D2A30: dd dword_4D29A8
	dd dword_4D29BC
	dd dword_4D29D0
off_4D2A3C: dd dword_4D29E4
off_4D2A40: dd dword_4D29F8
	dd dword_4D2A0C
	dd 0
dword_4D2A4C: dd 0DC0171h, 0DEh, 0D20002h, 0
	dd 4
	dd byte_512DD2
	dd dword_4D2A4C
dword_4D2A68: dd 16D00DCh, 0DDh, 0D30002h, 0
	dd 4
	dd byte_512DD3
	dd dword_4D2A68
dword_4D2A84: dd 0D40002h, 0
	dd 4
	dd byte_512DD4
	dd dword_4D2A68
dword_4D2A98: dd 0E200E1h, 0E3h, 0D50002h, 0
	dd 4
	dd byte_512DD7
	dd dword_4D2A98
dword_4D2AB4: dd 0DC00E0h, 0DFh, 0D60002h, 0
	dd 4
	dd byte_512DD5
	dd dword_4D2AB4
dword_4D2AD0: dd 0D70002h, 0
	dd 0B00h, 0
	dd dword_4D24E8
dword_4D2AE4: dd 0D80002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D2AF8: dd 0D90002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D2B0C: dd 0CF0000h
	times 4 dd 0
dword_4D2B20: dd 0D10000h
	times 4 dd 0
off_4D2B34: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D2A68+8
	dd dword_4D2A84
	dd dword_4D2A98+8
	dd dword_4D2AB4+8
	dd dword_4D2AD0
	dd dword_4D2AE4
	dd dword_4D2AF8
	dd dword_4D2B0C
	dd dword_4D2B20
	dd 0
dword_4D2B68: dd 4F0002h, 0
	dd 1004h, 2
	dd dword_4D24E8
	dd 0D20002h, 0
	dd 4
	dd byte_512DEC
	dd dword_4D2A4C
dword_4D2B90: dd 0D30002h, 0
	dd 4
	dd byte_512DEE
	dd dword_4D2A68
dword_4D2BA4: dd 0D40002h, 0
	dd 4
	dd byte_512DEF
	dd dword_4D2A68
dword_4D2BB8: dd 0D50002h, 0
	dd 4
	dd byte_512DF1
	dd dword_4D2A98
dword_4D2BCC: dd 0D60002h, 0
	dd 4
	dd byte_512DF0
	dd dword_4D2AB4
dword_4D2BE0: dd 0D00000h
	times 4 dd 0
off_4D2BF4: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D2B90
	dd dword_4D2BA4
	dd dword_4D2BB8
	dd dword_4D2BCC
	dd dword_4D2AD0
	dd dword_4D2AE4
	dd dword_4D2AF8
	dd dword_4D2BE0
	dd dword_4D2B20
	dd 0
dword_4D2C28: dd 0EB0002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2C3C: dd 0EA0002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2C50: dd 0EC0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2C64: dd 0
	dd unk_4C86F4
	dd 0Ch
	dd dword_4D2C3C
	dd dword_4D2C28
	dd dword_4D2C50
	dd 0
off_4D2C80: dd aCredits
	dd 0
	dd 12h
	dd byte_4D2D60
	dd 0
dword_4D2C94: dd 3110002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2CA8: dd 3120002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D2CBC: times 2 dd 0
	dd 8
	dd dword_4D2C94
	dd dword_4D2CA8
	dd 0
dword_4D2CD4: dd 0E40002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2CE8: dd 0E50002h, 0
	dd 1100h, 0
	dd dword_4D24E8
dword_4D2CFC: dd 0E60002h
	dd dword_4D2CBC
	dd 2, 0
	dd dword_4D24E8
dword_4D2D10: dd 0E70002h
	dd dword_4D2C64
	dd 2, 0
	dd dword_4D24E8
dword_4D2D24: dd 0E80002h, 0
	dd 102h, 0
	dd dword_4D24E8
dword_4D2D38: dd 0E90002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
byte_4D2D4C: times 2 db 0
word_4D2D4E: dw 181h
	times 4 dd 0
byte_4D2D60: times 2 db 0
word_4D2D62: dw 182h
	times 4 dd 0
byte_4D2D74: times 2 db 0
word_4D2D76: dw 183h
	times 4 dd 0
byte_4D2D88: times 2 db 0
word_4D2D8A: dw 15Ah
	times 4 dd 0
byte_4D2D9C: times 2 db 0
word_4D2D9E: dw 15Ah
	times 4 dd 0
byte_4D2DB0: times 2 db 0
word_4D2DB2: dw 15Ah
	times 4 dd 0
byte_4D2DC4: times 2 db 0
word_4D2DC6: dw 15Ah
	times 4 dd 0
byte_4D2DD8: times 2 db 0
word_4D2DDA: dw 15Ah
	times 4 dd 0
byte_4D2DEC: times 2 db 0
word_4D2DEE: dw 15Ah
	times 4 dd 0
byte_4D2E00: times 2 db 0
word_4D2E02: dw 15Ah
	times 4 dd 0
byte_4D2E14: times 2 db 0
word_4D2E16: dw 15Ah
	times 4 dd 0
byte_4D2E28: times 2 db 0
word_4D2E2A: dw 15Ah
	times 4 dd 0
byte_4D2E3C: times 2 db 0
word_4D2E3E: dw 15Ah
	times 4 dd 0
byte_4D2E50: times 2 db 0
word_4D2E52: dw 15Ah
	times 4 dd 0
byte_4D2E64: times 2 db 0
word_4D2E66: dw 15Ah
	times 4 dd 0
dword_4D2E78: times 2 dd 0
	dd 7
	dd dword_4D2CD4
	dd dword_4D2CE8
	dd dword_4D2CFC
	dd dword_4D2D10
	dd dword_4D2D24
	dd dword_4D2D38
	dd byte_4D2D4C
	dd byte_4D2D60
	dd byte_4D2D74
	dd byte_4D2D88
	dd byte_4D2D9C
	dd byte_4D2DB0
	dd byte_4D2DC4
	dd byte_4D2DD8
	dd byte_4D2DEC
	dd byte_4D2E00
	dd byte_4D2E14
	dd byte_4D2E28
	dd byte_4D2E3C
	dd byte_4D2E50
	dd byte_4D2E64
	dd 0
dword_4D2EDC: dd 610060h, 630062h, 650064h, 670066h, 690068h, 6B006Ah
	times 2 db 0
word_4D2EF6: dw 60h
	dd 620061h, 640063h, 660065h, 680067h, 6A0069h, 6C006Bh
	times 2 db 0
word_4D2F12: dw 60h
	dd 620061h, 640063h, 660065h, 680067h, 6A0069h, 6C006Bh
	dd 6Dh
dword_4D2F30: dd 610060h, 630062h, 650064h, 670066h, 690068h, 6B006Ah
	dd 6D006Ch, 6Eh
dword_4D2F50: dd 4D0002h, 0
	dd 4
	dd byte_512DBF
off_4D2F60: dd dword_4D2EDC
dword_4D2F64: dd 5E005Fh, 0
dword_4D2F6C: dd 4E0002h, 0
	dd 4
	dd byte_512DC0
	dd dword_4D2F64
dword_4D2F80: dd 4F0002h, 0
byte_4D2F88: db 4
	db 10h
	times 2 db 0
	dd 1
	dd dword_4D24E8
dword_4D2F94: dd 530002h, 0
byte_4D2F9C: db 4
	times 3 db 0
	dd byte_512DD0
	dd dword_4D2720+6
dword_4D2FA8: dd 0DA00DBh, 0
dword_4D2FB0: dd 500002h, 0
byte_4D2FB8: db 4
	times 3 db 0
	dd byte_512DD1
	dd dword_4D2FA8
dword_4D2FC4: dd 510002h
	dd off_4D2B34
	dd 2, 0
	dd dword_4D24E8
dword_4D2FD8: dd 520002h
	dd dword_4D2E78
byte_4D2FE0: db 2
	times 7 db 0
	dd dword_4D24E8
dword_4D2FEC: dd 540002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D3000: dd 560002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D3014: dd 550002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D3028: dd 570002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D303C: dd 4B0000h
	times 4 dd 0
off_4D3050: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 2
	dd dword_4D2F50
	dd dword_4D2F6C
	dd dword_4D2F80
	dd dword_4D2FB0
off_4D306C: dd dword_4D2FC4
	dd dword_4D2FD8
off_4D3074: dd dword_4D2F94
off_4D3078: dd dword_4D2FEC
off_4D307C: dd dword_4D3000
off_4D3080: dd dword_4D303C
dword_4D3084: dd 0
dword_4D3088: dd 4D0002h, 0
	dd 4
	dd byte_512DDA
off_4D3098: dd dword_4D2EDC
dword_4D309C: dd 4F0002h, 0
byte_4D30A4: db 4
	db 10h
	times 2 db 0
	dd 2
	dd dword_4D24E8
dword_4D30B0: dd 530002h, 0
byte_4D30B8: db 4
	times 3 db 0
	dd byte_512DEB
	dd dword_4D2720+6
dword_4D30C4: dd 4E0002h, 0
	dd 4
	dd byte_512DDB
	dd dword_4D2F64
dword_4D30D8: dd 510002h
	dd off_4D2BF4
	dd 2, 0
	dd dword_4D24E8
dword_4D30EC: dd 4C0000h
	times 4 dd 0
off_4D3100: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 2
	dd dword_4D3088
	dd dword_4D30C4
	dd dword_4D309C
	dd dword_4D2FB0
off_4D311C: dd dword_4D30D8
	dd dword_4D2FD8
off_4D3124: dd dword_4D30B0
off_4D3128: dd dword_4D2FEC
off_4D312C: dd dword_4D3000
off_4D3130: dd dword_4D30EC
dword_4D3134: dd 0
dword_4D3138: dd 610060h, 630062h, 650064h, 670066h, 690068h, 6B006Ah
	dd 7D007Ch, 78007Eh, 15A0000h
	times 7 dd 15A015Ah
	dd 0
dword_4D317C: dd 710002h, 0
	dd 4
	dd byte_512DF5
	dd dword_4D3138
dword_4D3190: dd 740002h, 0
byte_4D3198: db 4
	db 17h
	times 2 db 0
	dd byte_512DF8
	dd dword_4D2720
dword_4D31A4: dd 7A0079h, 7Bh, 720002h, 0
	dd 4
	dd byte_512DF6
	dd dword_4D31A4
dword_4D31C0: dd 1D001Ch, 0
dword_4D31C8: dd 730002h, 0
byte_4D31D0: db 4
	times 3 db 0
	dd byte_512DAD
	dd dword_4D31C0
dword_4D31DC: dd 750002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D31F0: dd 760002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
off_4D3204: dd aMain
	dd aBlk4_0 ; "blk4"
	db 2, 0
word_4D320E: dw 0
	dd dword_4D317C
	dd dword_4D31A4+8
	dd dword_4D31C8
	dd dword_4D3190
	dd dword_4D31DC
	dd dword_4D31F0
	dd 0
dword_4D322C: dd 0EE0002h, 0
byte_4D3234: db 4
	db 12h
	times 2 db 0
	dd byte_512DFC
	dd dword_4D24E8
dword_4D3240: dd 0EF0002h, 0
byte_4D3248: db 4
	db 12h
	times 2 db 0
	dd byte_512DFD
	dd dword_4D24E8
dword_4D3254: dd 0F00002h, 0
	dd 1204h
	dd byte_512DFE
	dd dword_4D24E8
dword_4D3268: dd 0FD00FCh, 0
dword_4D3270: dd 0F30002h, 0
	dd 4
	dd byte_512F3E
	dd dword_4D3268
dword_4D3284: dd 0F10002h, 0
byte_4D328C: db 4
	times 3 db 0
	dd byte_512F3F
	dd dword_4D2720+6
dword_4D3298: dd 1010100h, 1030102h, 1050104h, 1070106h, 1090108h, 10B010Ah
	dd 10D010Ch, 10F010Eh, 1110110h, 0
dword_4D32C0: dd 0F20002h, 0
byte_4D32C8: db 4
	times 3 db 0
	dd byte_512F40
	dd dword_4D3298
dword_4D32D4: dd 0F900F8h, 0
dword_4D32DC: dd 0F50002h, 0
byte_4D32E4: db 4
	times 3 db 0
	dd byte_512F41
	dd dword_4D32D4
dword_4D32F0: dd 0FB00FAh, 0
dword_4D32F8: dd 0F40002h, 0
	dd 4
	dd byte_512DFF
	dd dword_4D32F0
dword_4D330C: dd 0F60002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D3320: dd 0F70002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D3334: dd 0ED0000h
	times 4 dd 0
off_4D3348: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0Eh
	dd dword_4D322C
	dd dword_4D3240
	dd dword_4D3254
	dd dword_4D3284
	dd dword_4D32C0
	dd dword_4D3270
	dd dword_4D32F8
	dd dword_4D32DC
	dd dword_4D330C
	dd dword_4D3320
	dd dword_4D3334
	dd 0
dword_4D3384: dd 1130002h, 0
	dd 0C04h
	dd dword_512E0C
	dd dword_4D24E8
dword_4D3398: dd 1140002h, 0
	dd 0C04h
	dd dword_512E10
	dd dword_4D24E8
dword_4D33AC: dd 1150002h, 0
	dd 0C04h
	dd dword_512E14
	dd dword_4D24E8
dword_4D33C0: dd 1160002h, 0
	dd 0C04h
	dd dword_512E18
	dd dword_4D24E8
dword_4D33D4: dd 11B0002h, 0
	dd 0C04h
	dd dword_512E1C
	dd dword_4D24E8
dword_4D33E8: dd 11A0002h, 0
	dd 0C04h
	dd dword_512E20
	dd dword_4D24E8
dword_4D33FC: dd 1170002h, 0
	dd 0C04h
	dd dword_512E24
	dd dword_4D24E8
dword_4D3410: dd 11C0002h, 0
	dd 0C04h
	dd dword_512E28
	dd dword_4D24E8
dword_4D3424: dd 1180002h, 0
	dd 0C04h
	dd dword_512E2C
	dd dword_4D24E8
dword_4D3438: dd 1190002h, 0
	dd 0C04h
	dd dword_512E30
	dd dword_4D24E8
dword_4D344C: dd 11F0002h, 0
	dd 1300h, 0
	dd dword_4D24E8
dword_4D3460: dd 11D0002h, 0FFFFFFFFh
byte_4D3468: db 8
	times 7 db 0
	dd dword_4D24E8
dword_4D3474: dd 11E0002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D3488: dd 1120000h
	times 4 dd 0
off_4D349C: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D3384
	dd dword_4D3398
	dd dword_4D33AC
	dd dword_4D33C0
	dd dword_4D33FC
	dd dword_4D3424
	dd dword_4D3438
	dd dword_4D33E8
	dd dword_4D33D4
	dd dword_4D3410
	dd dword_4D344C
	dd dword_4D3460
	dd dword_4D3474
	dd dword_4D3488
	dd 0
dword_4D34E4: dd 13B0002h, 0
	dd 0D04h
	dd dword_512E34
	dd dword_4D24E8
dword_4D34F8: dd 13C0002h, 0
	dd 0D04h
	dd dword_512E3C
	dd dword_4D24E8
dword_4D350C: dd 13D0002h, 0
	dd 0D04h
	dd dword_512E44
	dd dword_4D24E8
dword_4D3520: dd 13E0002h, 0
	dd 0D04h
	dd dword_512E4C
	dd dword_4D24E8
dword_4D3534: dd 1430002h, 0
	dd 0D04h
	dd dword_512E54
	dd dword_4D24E8
dword_4D3548: dd 1420002h, 0
	dd 0D04h
	dd dword_512E5C
	dd dword_4D24E8
dword_4D355C: dd 13F0002h, 0
	dd 0D04h
	dd dword_512E64
	dd dword_4D24E8
dword_4D3570: dd 1440002h, 0
	dd 0D04h
	dd dword_512E6C
	dd dword_4D24E8
dword_4D3584: dd 1400002h, 0
	dd 0D04h
	dd dword_512E74
	dd dword_4D24E8
dword_4D3598: dd 1410002h, 0
	dd 0D04h
	dd dword_512E7C
	dd dword_4D24E8
dword_4D35AC: dd 1380000h
	times 4 dd 0
dword_4D35C0: dd 1390000h
	times 4 dd 0
dword_4D35D4: dd 13A0000h
	times 4 dd 0
off_4D35E8: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 13h
	dd dword_4D34E4
	dd dword_4D34F8
	dd dword_4D350C
	dd dword_4D3520
	dd dword_4D355C
	dd dword_4D3584
	dd dword_4D3598
	dd dword_4D3548
	dd dword_4D3534
	dd dword_4D3570
	dd dword_4D344C
	dd dword_4D3460
	dd dword_4D3474
	dd dword_4D35AC
	dd dword_4D35C0
	dd dword_4D35D4
	dd 0
	dd 14F0000h
	times 4 dd 0
dword_4D364C: dd 1570156h, 1590158h, 0
dword_4D3658: dd 1530002h, 0
	dd 4
	dd byte_512E00
	dd dword_4D364C
dword_4D366C: dd 1540002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D3680: dd 1550002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D3694: dd 1520000h
	times 4 dd 0
off_4D36A8: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D3658
	dd dword_4D366C
	dd dword_4D3680
	dd dword_4D3694
	dd 0
dword_4D36C8: dd 15E0002h, 0
	dd 1204h
	dd dword_512ED4
	dd dword_4D24E8
dword_4D36DC: dd 15F0002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D36F0: dd 1600002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D3704: dd 15B0000h
	times 4 dd 0
dword_4D3718: dd 15C0000h
	times 4 dd 0
off_4D372C: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 14h
	dd dword_4D36C8
	dd dword_4D36DC
	dd dword_4D36F0
	dd dword_4D3704
	dd dword_4D3718
	dd 0
dword_4D3750: dd 1450000h
	times 4 dd 0
dword_4D3764: dd 1480002h
	dd off_4D349C
	dd 2, 0
	dd dword_4D24E8
dword_4D3778: dd 1490002h
	dd off_4D36A8
byte_4D3780: db 2
	times 7 db 0
	dd dword_4D24E8
dword_4D378C: dd 14A0002h
	dd off_4D372C
	dd 1502h, 0
	dd dword_4D24E8
dword_4D37A0: dd 14B0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
	dd 14C0002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
off_4D37C8: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D3764
	dd dword_4D3778
	dd dword_4D378C
	dd dword_4D37A0
	dd dword_4D3750
	dd 0
dword_4D37EC: dd 1620002h, 0
	dd 4
	dd byte_512ED1
	dd dword_4D2720
dword_4D3800: dd 1640002h, 0
	dd 1804h, 0
	dd dword_4D24E8
dword_4D3814: dd 16D016Ch, 16Eh, 1630002h, 0
	dd 4
	dd byte_512ECE
	dd dword_4D3814
dword_4D3830: dd 170016Fh, 1710172h, 173h, 1650002h, 0
	dd 4
	dd byte_512ECF
	dd dword_4D3830
dword_4D3850: dd 1700174h, 175h, 1660002h, 0
	dd 4
	dd byte_512ED0
	dd dword_4D3850
dword_4D386C: dd 0DB00DAh, 0
dword_4D3874: dd 1670002h, 0
	dd 4
	dd byte_512ED2
	dd dword_4D386C
dword_4D3888: dd 1690002h, 0
	dd 1400h, 0
	dd dword_4D24E8
dword_4D389C: dd 16A0002h, 0FFFFFFFFh, 8, 0
	dd dword_4D24E8
dword_4D38B0: dd 16B0002h, 0FFFFFFFFh, 10h, 0
	dd dword_4D24E8
dword_4D38C4: dd 1610000h
	times 4 dd 0
off_4D38D8: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D37EC
	dd dword_4D3800
	dd dword_4D3850+8
	dd dword_4D3874
	dd dword_4D3888
	dd dword_4D389C
	dd dword_4D38B0
	dd dword_4D38C4
	dd 0
dword_4D3908: dd 1790002h, 0
byte_4D3910: db 0
	times 7 db 0
	dd dword_4D24E8
dword_4D391C: dd 17A0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D3930: dd 17B0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D3944: dd 17C0002h, 0
byte_4D394C: db 0
	times 3 db 0
	dd 0
	dd dword_4D24E8
dword_4D3958: dd 17D0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D396C: dd 17E0002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D3980: dd 17F0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3994: dd 1780000h
	times 4 dd 0
off_4D39A8: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 9
	dd dword_4D3908
	dd dword_4D391C
	dd dword_4D3930
	dd dword_4D3944
	dd dword_4D3958
	dd dword_4D396C
	dd dword_4D3980
	dd dword_4D3994
	dd 0
dword_4D39D8: dd 880087h, 0
dword_4D39E0: dd 7F0002h, 0
	dd 4
	dd byte_512DFA
	dd dword_4D39D8
dword_4D39F4: dd 800002h
	dd off_4D3348
	dd 2, 0
	dd dword_4D24E8
dword_4D3A08: dd 810002h
	dd off_4D37C8
	dd 2, 0
	dd dword_4D24E8
dword_4D3A1C: dd 830002h
	dd off_4D38D8
	dd 2, 0
	dd dword_4D24E8
dword_4D3A30: dd 820002h
	dd off_4D39A8
byte_4D3A38: db 2
	times 7 db 0
	dd dword_4D24E8
dword_4D3A44: dd 0DA00DBh, 0
dword_4D3A4C: dd 840002h, 0
byte_4D3A54: db 4
	times 3 db 0
	dd byte_512DAF
	dd dword_4D3A44
dword_4D3A60: dd 850002h
	dd off_4D2C80
	dd 2, 0
	dd dword_4D24E8
dword_4D3A74: dd 860002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3A88: dd aMain
	dd aBlk4_0 ; "blk4"
	dd 2
	dd dword_4D39E0
	dd dword_4D39F4
	dd dword_4D3A08
	dd dword_4D3A30
	dd dword_4D3A1C
	dd dword_4D3A4C
	dd dword_4D3A60
	dd dword_4D3A74
	dd 0
dword_4D3AB8: dd 2DB0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3ACC: dd 2DF0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3AE0: dd 2E10002h, 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
	dd 2E20002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3B08: dd aPost
	dd aBack_4 ; "back"
	dd 10h
	dd dword_4D3AB8
	dd dword_4D3ACC
	dd dword_4D3AE0
	dd 0
byte_4D3B24: db 2, 0
word_4D3B26: dw 2DBh
	dd off_4D3B08
	times 2 dd 0
	dd dword_4D24E8
dword_4D3B38: dd 2DF0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3B4C: dd 2E10002h, 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3B60: dd 2E20002h, 0FFFFFFFCh
	times 2 dd 0
	dd dword_4D24E8
off_4D3B74: dd aPost
	dd aBack_4 ; "back"
	dd 0Fh
	dd byte_4D3B24
	dd dword_4D3B38
	dd dword_4D3B4C
	dd dword_4D3B60
	dd 0
byte_4D3B94: db 2, 0
word_4D3B96: dw 2CDh
	dd off_4D3B74
	times 2 dd 0
	dd dword_4D24E8
dword_4D3BA8: dd 2CF0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
byte_4D3BBC: db 2, 0
word_4D3BBE: dw 2D0h
	dd 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
	dd 2D20002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3BE4: dd aPost
	dd aBack_4 ; "back"
	dd 6
	dd byte_4D3B94
	dd dword_4D3BA8
	dd byte_4D3BBC
	dd 0
byte_4D3C00: db 2, 0
word_4D3C02: dw 2C0h
	dd off_4D3BE4
	dd 0, 0
	dd dword_4D24E8
dword_4D3C14: dd 2C30002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
byte_4D3C28: db 2, 0
word_4D3C2A: dw 2C4h
	dd 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
	dd 2C60002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3C50: dd aPost
	dd aBack_4 ; "back"
	dd 5
	dd byte_4D3C00
	dd dword_4D3C14
	dd byte_4D3C28
	dd 0
byte_4D3C6C: db 2, 0
word_4D3C6E: dw 2ACh
	dd off_4D3C50
	times 2 dd 0
	dd dword_4D24E8
dword_4D3C80: dd 2AF0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3C94: dd 2B20002h, 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
byte_4D3CA8: db 2, 0
word_4D3CAA: dw 2B0h
	dd 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3CBC: dd 2B30002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D3CD0: dd 1, 666C7774h, 666C7974h, 1, 74727774h, 74727974h, 2B40002h
	dd 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3CFC: dd aPost
	dd aBack_4 ; "back"
	dd 4
	dd byte_4D3C6C
	dd dword_4D3C80
	dd byte_4D3CA8
	dd dword_4D3C94
	dd dword_4D3CBC
	dd dword_4D3CD0
	dd dword_4D3CD0+0Ch
	dd 0
dword_4D3D28: dd 27F0002h
	dd off_4D3CFC
	times 2 dd 0
	dd dword_4D24E8
dword_4D3D3C: dd 2800002h, 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
byte_4D3D50: db 2, 0
word_4D3D52: dw 281h
	dd 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3D64: dd 2830002h
	times 3 dd 0
	dd dword_4D24E8
dword_4D3D78: dd 1, 666C7762h, 666C7962h, 1, 74727762h, 74727962h
off_4D3D90: dd aPost
	dd aBack_4 ; "back"
	dd 3
	dd dword_4D3D28
	dd dword_4D3D3C
	dd byte_4D3D50
	dd dword_4D3D64
	dd dword_4D3D78
	dd dword_4D3D78+0Ch
	dd 0
off_4D3DB8: dd aVictory
	dd aBack_4 ; "back"
	dd 0
	dd dword_4D3D28
	dd 0
dword_4D3DCC: dd 8A0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3DE0: dd 8B0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3DF4: dd 8C0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
	dd aMain ; "main"
	dd aBlk4_0 ; "blk4"
	dd 0
	dd dword_4D3DCC
	dd dword_4D3DE0
	dd dword_4D3DF4
	dd 0
dword_4D3E24: dd 2
	dd off_4D2790
byte_4D3E2C: db 0
	times 3 db 0
	dd 0
	dd dword_4D24E8
dword_4D3E38: dd 10002h
	dd off_4D2A20
byte_4D3E40: db 0
	times 7 db 0
	dd dword_4D24E8
dword_4D3E4C: dd 20002h
	dd off_4D3050
	times 2 dd 0
	dd dword_4D24E8
dword_4D3E60: dd 30002h
	dd off_4D3100
byte_4D3E68: db 0
	times 7 db 0
	dd dword_4D24E8
dword_4D3E74: dd 40002h
	dd off_4D3204
byte_4D3E7C: db 0
	times 3 db 0
	dd 0
	dd dword_4D24E8
byte_4D3E88: db 2, 0
word_4D3E8A: dw 5
	dd 0FFFFFFFDh
	times 2 dd 0
	dd dword_4D24E8
dword_4D3E9C: dd 70002h
	dd off_4D3A88
	times 2 dd 0
	dd dword_4D24E8
dword_4D3EB0: dd 80002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
off_4D3EC4: dd aMain
off_4D3EC8: dd aBlk6_0
byte_4D3ECC: db 1, 0
word_4D3ECE: dw 0
off_4D3ED0: dd dword_4D3E24
	dd dword_4D3E38
	dd dword_4D3E4C
	dd dword_4D3E60
off_4D3EE0: dd dword_4D3E74
	dd byte_4D3E88
	dd dword_4D3E9C
	dd dword_4D3EB0
	dd 0
dword_4D3EF4: dd 890002h, 0
	dd 4
	dd byte_512DAA
	dd dword_4D26E8
dword_4D3F08: dd 8F0002h, 0
	dd 4
	dd byte_512DB0
off_4D3F18: dd dword_4D2978
dword_4D3F1C: dd 900002h, 0
	dd 4
	dd byte_512DB9
	dd dword_4D29A0
dword_4D3F30: dd 930002h, 0
	dd 4
	dd byte_512DF8
	dd dword_4D2720
dword_4D3F44: dd 8D0002h, 0
	dd 4
	dd byte_512DAB
	dd dword_4D2704
dword_4D3F58: dd 9C009Bh, 9Dh, 910002h, 0
	dd 4
	dd byte_512F43
	dd dword_4D3F58
dword_4D3F74: dd 610060h, 630062h, 650064h, 670066h, 690068h, 6B006Ah
	dd 7D007Ch, 6F007Eh, 15A0000h
	times 8 dd 15A015Ah
	dd 0
dword_4D3FBC: dd 920002h, 0
	dd 4
	dd byte_512F42
	dd dword_4D3F74
dword_4D3FD0: dd 940002h, 0
	dd 4
	dd byte_512DBF
off_4D3FE0: dd dword_4D2EDC
dword_4D3FE4: dd 950002h, 0
	dd 4
	dd byte_512DC0
	dd dword_4D2F64
dword_4D3FF8: dd 960002h, 0
byte_4D4000: db 4
	db 10h
	times 2 db 0
	dd 1
	dd dword_4D24E8
dword_4D400C: dd 15A015Ah, 0
dword_4D4014: dd 970002h, 0
	dd 4
	dd byte_512F45
	dd dword_4D400C
dword_4D4028: dd 9A0002h, 0FFFFFFFFh
	times 2 dd 0
	dd dword_4D24E8
dword_4D403C: dd 0
	dd aBack_4 ; "back"
	dd 6000Dh
	dd dword_4D3EF4
	dd dword_4D3F44
	dd dword_4D3F08
	dd dword_4D3F1C
	dd dword_4D3F58+8
	dd dword_4D3FBC
	dd dword_4D3F30
	dd dword_4D3FD0
	dd dword_4D3FE4
	dd dword_4D3FF8
	dd dword_4D4014
	dd dword_4D4028
	dd 0
byte_4D407C: db 3Ch
byte_4D407D: db 6
	dw 51Eh
	dd 6420552h, 438001Eh, 5330618h, 723092Ah, 548054Dh, 18001Eh
	dd 257h
off_4D409C: dd aE
	dd aG_0 ; "g"
	dd asc_4C8720 ; "f"
	dd aS_6 ; "s"
	dd aI_0 ; "i"
	dd aW ; "w"
dword_4D40B4: dd 0
dword_4D40B8: dd 0
dword_4D40BC: dd 0
off_4D40C0: dd sub_4101C0
	dd sub_40D3D0
	dd sub_40C160
	dd sub_419044
	dd sub_417DD4
	dd sub_417900
	dd sub_417230
	dd sub_412670
	dd sub_411BD0
	dd sub_40938C
	dd sub_41C850
	dd sub_41C1B0
	dd sub_412300
	dd sub_411030
	dd sub_40A570
	dd sub_416884
	dd sub_415E60
	dd sub_403C20
	dd sub_40A0B0
	dd sub_403970
	dd sub_40B2C0
	dd sub_426050
	dd sub_41B8D0
	dd 10000h, 20001h, 80008h, 40003h, 50005h, 70006h
off_4D4134: dd aEngl_0
	dd aGerm_3 ; "germ"
	dd aFren_3 ; "fren"
	dd aSpan_3 ; "span"
	dd aItly_3 ; "itly"
	dd aSpan_3 ; "span"
	times 2 dd 0
dword_4D4154: dd 0
off_4D4158: dd aE1
	dd aG1 ; "g1 "
	dd aF1 ; "f1 "
	dd aS1 ; "s1 "
	dd aI1 ; "i1 "
	dd aW1 ; "w1 "
off_4D4170: dd aE2
	dd aG2 ; "g2 "
	dd aF2 ; "f2 "
	dd aS2 ; "s2 "
	dd aI2 ; "i2 "
	dd aW2 ; "w2 "
off_4D4188: dd aE3
	dd aG3 ; "g3 "
	dd aF3 ; "f3 "
	dd aS3 ; "s3 "
	dd aI3 ; "i3 "
	dd aW3 ; "w3 "
off_4D41A0: dd aE4
	dd aG4 ; "g4 "
	dd aF4 ; "f4 "
	dd aS4 ; "s4 "
	dd aI4 ; "i4 "
	dd aW4 ; "w4 "
off_4D41B8: dd aE6
	dd aG6 ; "g6 "
	dd aF6 ; "f6 "
	dd aS6 ; "s6 "
	dd aI6 ; "i6 "
	dd aW6 ; "w6 "
off_4D41D0: dd aE5
	dd aG5 ; "g5 "
	dd aF5 ; "f5 "
	dd aS5_0 ; "s5 "
	dd aI5 ; "i5 "
	dd aW5 ; "w5 "
off_4D41E8: dd aEmeg
	dd aGmeg ; "gmeg"
	dd aFmeg ; "fmeg"
	dd aSmeg ; "smeg"
	dd aImeg ; "imeg"
	dd aWmeg ; "wmeg"
word_4D4200: dw 0
word_4D4202: dw 1
word_4D4204: dw 1
	dw 0
dword_4D4208: dd 0
off_4D4A48: dd aOval
	dd aOz ; "oz"
	dd aLrt ; "lrt"
	dd aNort ; "nort"
	dd aPac_0 ; "pac"
	dd aMed_0 ; "med"
	dd aMyst ; "myst"
	dd aMono ; "mono"
off_4D4A68: dd aOval
	dd aOz ; "oz"
	dd aLast ; "last"
	dd aNort ; "nort"
	dd aPac_0 ; "pac"
	dd aMed_0 ; "med"
	dd aMyst ; "myst"
	dd aMono ; "mono"
byte_4D4A88: db 3Ah
	db 3Ah
	times 2 db 27h
	db 27h, 2Eh
byte_4D4A8E: db 2Eh
	db 2Eh
	dd 2C222222h
aJacques: db 'Jacques',0
off_4D4A9C: dd aSlick
	dd aJammin ; "Jammin"
	dd aShusaka ; "Shusaka"
	dd aNatasha ; "Natasha"
	dd aBigguy ; "BigGuy"
	dd aZipper ; "Zipper"
	dd aCheyenne ; "Cheyenne"
	dd aCrash ; "Crash"
	dd aBeefy ; "Beefy"
	dd aSassy ; "Sassy"
	dd aKlutch ; "Klutch"
off_4D4AC8: dd aText_eng
	dd aText_ger ; "text.ger"
	dd aText_fre ; "text.fre"
	dd aText_spa ; "text.spa"
	dd aText_ita ; "text.ita"
	dd aText_swe ; "text.swe"
dword_4D4AE0: dd 0
	times 2 dd 0
off_4D4AEC: dd aDosIpxCompatib
	dd 121EC2E0h, 11CF499Eh, 20001CADh, 3FBDD3AFh
	dd sub_41DA20
	dd sub_41DA00
	dd sub_41D7B0
	dd sub_41D720
	dd sub_41D700
	dd sub_41D6E0
	dd sub_41D6D0
	dd sub_41D6B0
	dd sub_41D6A0
	dd 0
	dd sub_41D670
	dd sub_41D650
	dd 0
	dd sub_41D640
	dd sub_41D5C0
	dd sub_41D480
	dd sub_41D2F0
	dd sub_41D280
dword_4D4B48: dd 0
dword_4D4B4C: dd 0
dword_4D4B50: dd 1
	dd sub_41E330
	dd sub_41E220
	dd 0
	dd sub_41E1B0
off_4D4B64: dd aTcpIp
	dd 0F784E080h, 11D0575Dh, 0A000569Eh, 0B32BCE24h
	dd sub_41E0C0
	dd sub_41E090
	dd sub_41DFA0
	dd sub_41DF40
	dd sub_41DF30
	dd sub_41DF20
	dd sub_41DF10
	dd sub_41DF00
	dd sub_41DEF0
	dd sub_41DE10
	dd sub_41DDE0
	dd sub_41DDA0
	times 6 dd 0
dword_4D4BC0: dd 0
dword_4D4BC4: dd 1
dword_4D4BC8: dd 0
	dd sub_41EF30
	dd sub_41EE60
	dd sub_41ED70
	dd sub_41EC30
off_4D4BF4: dd sub_4200B0
	dd sub_420080
	dd sub_420060
dword_4D4C00: dd 0
dword_4D4C04: dd 133h
	dd 142h, 151h, 160h, 16Fh, 17Eh, 18Dh
	db 9Ch, 1
word_4D4C22: dw 0
word_4D4C24: dw 21h
	dw 0
	dd 5Eh, 98h, 0D4h, 10Eh, 14Ah, 183h, 1BFh
dword_4D4C44: dd 0
;	LPSECURITY_ATTRIBUTES lpEventAttributes
lpEventAttributes: dd 0
dword_4D4C4C: dd 0
;	HANDLE hObject
hObject: dd 0
dword_4D4C54: dd 0
dword_4D4C58: dd 0
dword_4D4C5C: dd 0
dword_4D4C60: dd 0
dword_4D4C64: dd 0
dword_4D4C68: dd 0
dword_4D4C6C: dd 0
dword_4D4C70: dd 0
dword_4D4C78: dd 0
dword_4D4C7C: dd 0
dword_4D4C80: dd 0
dword_4D4C84: dd 0
dword_4D4C88: dd 0
flt_4D4C8C: dd 0.0
flt_4D4C90: dd 0.0
	times 2 dd 3F800000h
dword_4D4C9C: dd 0FFFFFFFFh
	dd 0
flt_4D4CA4: dd 0.0
flt_4D4CA8: dd 0.0
flt_4D4CAC: dd 639.0
flt_4D4CB0: dd 0.0
	times 2 dd 3F800000h
dword_4D4CBC: dd 0FFFFFFFFh
	dd 0
flt_4D4CC4: dd 1.0
flt_4D4CC8: dd 0.0
flt_4D4CCC: dd 639.0
flt_4D4CD0: dd 479.0
	times 2 dd 3F800000h
dword_4D4CDC: dd 0FFFFFFFFh
	dd 0
flt_4D4CE4: dd 1.0
flt_4D4CE8: dd 1.0
flt_4D4CEC: dd 0.0
flt_4D4CF0: dd 479.0
	times 2 dd 3F800000h
dword_4D4CFC: dd 0FFFFFFFFh
	dd 0
flt_4D4D04: dd 0.0
flt_4D4D08: dd 1.0
dword_4D4D0C: dd 0
	dd 1, 2, 3
dword_4D4D1C: dd 0
dword_4D4D20: dd 3FC00000h
dword_4D4D24: dd 0
dword_4D4D28: dd 0
dword_4D4D2C: dd 0
dword_4D4D30: dd 0
	times 3 dd 0
	dd 3F800000h, 0FFFFFFFFh
	times 3 dd 0
	dd 441FC000h
	times 2 dd 0
	dd 3F800000h, 0FFFFFFFFh, 0
	dd 3F800000h, 0
	dd 441FC000h, 43EF8000h, 0
	dd 3F800000h, 0FFFFFFFFh, 0
	times 2 dd 3F800000h
	dd 0
	dd 43EF8000h, 0
	dd 3F800000h, 0FFFFFFFFh
	times 2 dd 0
	dd 3F800000h
	times 3 dd 0
	dd 3F800000h, 0FFFFFFFFh
	times 3 dd 0
	dd 441FC000h
	times 2 dd 0
	dd 3F800000h, 0FFFFFFFFh, 0
	dd 3F800000h, 0
	dd 441FC000h, 43EF8000h, 0
	dd 3F800000h, 0FFFFFFFFh, 0
	times 2 dd 3F800000h
	dd 0
	dd 43EF8000h, 0
	dd 3F800000h, 0FFFFFFFFh
	times 2 dd 0
	dd 3F800000h, 0
	dd 1, 2, 3
dword_4D4E44: dd 0
	dd 0
dword_4D4E4C: dd 0
dword_4D4E50: dd 0FFFFFFFFh
dword_4D4E54: dd 0
dword_4D4E58: dd 0
dword_4D4E5C: dd 0
dword_4D4E60: dd 0
dword_4D4E64: dd 0
off_4D4E68: dd sub_428C40
	times 6 dd 0
byte_4D4E84: db 0
byte_4D4E85: db 0
	dw 0
dword_4D4E88: dd 0
dword_4D4E8C: dd 0
dword_4D4E90: times 2 dd 0
	dd 3F800000h, 0
	times 2 dd 3F800000h
	dd 0
	dd 3F800000h
dword_4D4EB0: dd 0
flt_4D4EB4: dd 0.0
flt_4D4EB8: dd 0.0
	dd 0
flt_4D4EC0: dd 1.0
dword_4D4EC4: dd 0FFFFFFFFh
	dd 0FFFFFFFFh
dword_4D4ECC: times 2 dd 0
flt_4D4ED4: dd 0.0
flt_4D4ED8: dd 0.0
	dd 0
flt_4D4EE0: dd 1.0
dword_4D4EE4: dd 0FFFFFFFFh
	dd 0FFFFFFFFh
dword_4D4EEC: times 2 dd 0
flt_4D4EF4: dd 0.0
flt_4D4EF8: dd 0.0
	dd 0
flt_4D4F00: dd 1.0
dword_4D4F04: dd 0FFFFFFFFh
	dd 0FFFFFFFFh
dword_4D4F0C: times 2 dd 0
flt_4D4F14: dd 0.0
flt_4D4F18: dd 0.0
	dd 0
flt_4D4F20: dd 1.0
dword_4D4F24: dd 0FFFFFFFFh
	dd 0FFFFFFFFh
dword_4D4F2C: times 2 dd 0
flt_4D4F34: dd 110.0
flt_4D4F38: dd 0.0
	dd 0
flt_4D4F40: dd 1.0
dword_4D4F44: dd 0FFFFFFFFh
	times 3 dd 0
flt_4D4F54: dd 210.0
flt_4D4F58: dd 0.0
	dd 0
flt_4D4F60: dd 1.0
dword_4D4F64: dd 0FFFFFFFFh
	dd 0
	dd 3F800000h, 0
flt_4D4F74: dd 310.0
flt_4D4F78: dd 0.0
	dd 0
flt_4D4F80: dd 1.0
dword_4D4F84: dd 0FFFFFFFFh
	dd 0
	times 2 dd 3F800000h
flt_4D4F94: dd 410.0
flt_4D4F98: dd 0.0
	dd 0
flt_4D4FA0: dd 1.0
dword_4D4FA4: dd 0FFFFFFFFh
	times 2 dd 0
	dd 3F800000h
flt_4D4FB4: dd 0.0
flt_4D4FB8: dd 0.0
	dd 0
	dd 3F800000h
	times 2 dd 0FFFFFFFFh
flt_4D4FCC: dd 0.0
flt_4D4FD0: dd 0.0
flt_4D4FD4: dd 0.0
dword_4D4FD8: dd 0
	dd 0
	dd 3F800000h
	times 2 dd 0FFFFFFFFh
flt_4D4FEC: dd 0.0
flt_4D4FF0: dd 0.0
dword_4D4FF4: dd 0
flt_4D4FF8: dd 0.0
	dd 0
	dd 3F800000h
	times 2 dd 0FFFFFFFFh
flt_4D500C: dd 0.0
flt_4D5010: dd 0.0
flt_4D5014: dd 0.0
dword_4D5018: dd 0
	dd 0
	dd 3F800000h
	times 2 dd 0FFFFFFFFh
flt_4D502C: dd 0.0
flt_4D5030: dd 0.0
flt_4D5034: dd 0.0
flt_4D5038: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5044: dd 0
	dd 0FFFFFFFFh
flt_4D504C: dd 0.0
flt_4D5050: dd 0.0
flt_4D5054: dd 0.0
dword_4D5058: dd 0
	dd 0
	dd 3F800000h
dword_4D5064: dd 0
	dd 0FFFFFFFFh
flt_4D506C: dd 0.0
flt_4D5070: dd 0.0
dword_4D5074: dd 0
flt_4D5078: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5084: dd 0
	dd 0FFFFFFFFh
flt_4D508C: dd 0.0
flt_4D5090: dd 0.0
flt_4D5094: dd 0.0
dword_4D5098: dd 0
	dd 0
	dd 3F800000h
dword_4D50A4: dd 0
	dd 0FFFFFFFFh
flt_4D50AC: dd 0.0
flt_4D50B0: dd 0.0
flt_4D50B4: dd 0.0
flt_4D50B8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D50C4: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D50D4: dd 0.0
flt_4D50D8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D50E4: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D50F4: dd 0.0
flt_4D50F8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5104: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5114: dd 0.0
flt_4D5118: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5124: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5134: dd 0.0
flt_4D5138: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5144: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5154: dd 0.0
flt_4D5158: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5164: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5174: dd 0.0
flt_4D5178: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5184: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5194: dd 0.0
flt_4D5198: dd 0.0
	dd 0
	dd 3F800000h
dword_4D51A4: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D51B4: dd 0.0
flt_4D51B8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D51C4: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D51D4: dd 0.0
flt_4D51D8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D51E4: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D51F4: dd 0.0
flt_4D51F8: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5204: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
flt_4D5214: dd 0.0
flt_4D5218: dd 0.0
	dd 0
	dd 3F800000h
dword_4D5224: dd 0
	dd 0FFFFFFFFh
	times 2 dd 0
dword_4D5234: dd 280h
dword_4D5238: dd 1E0h
	dd 280h, 1E0h, 280h, 1E0h
byte_4D524C: db 0
byte_4D524D: db 0
	dw 0
	times 2 dd 0
dword_4D5258: dd 0FFFFFFFFh
dword_4D525C: dd 0
flt_4D5260: dd 0.0
flt_4D5264: dd 0.0
dword_4D5268: times 2 dd 0
dword_4D5270: dd 0
	times 8 dd 0 ;?
dword_4D5294: dd 3F800000h
flt_4D5298: dd 1.0
flt_4D529C: dd 0.0
flt_4D52A0: dd 0.0
flt_4D52A4: dd 320.0
flt_4D52A8: dd 240.0
flt_4D52AC: dd 2.0
flt_4D52B0: dd 65536.0
off_4D52B4: dd dword_4F1E1C
off_4D52B8: dd dword_4F1E3C
off_4D52BC: dd dword_4F1E5C
off_4D52C0: dd dword_4F1E7C
	dd dword_4F1E9C
	dd dword_4F1EBC
dword_4D52CC: dd 0A0000h
	dd 78000h, 50000h
	times 2 dd 0
dword_4D52E0: dd 0
dword_4D52E4: dd 0
dword_4D52E8: dd 0
dword_4D52EC: dd 0
dword_4D52F0: dd 0
dword_4D52F4: dd 0
dword_4D52F8: dd 0
dword_4D52FC: dd 1
dword_4D5300: dd 0
dword_4D5304: dd 0
dword_4D5308: dd 0
dword_4D530C: dd 0
dword_4D5310: dd 0
dword_4D5314: dd 0
dword_4D5318: dd 0
dword_4D531C: dd 0
dword_4D5320: dd 0
dword_4D5324: dd 0
dword_4D5328: dd 0
dword_4D532C: dd 0
dword_4D5330: dd 0
	dd 0C0000h, 3, 32h, 19h, 0Fh, 5, 0B4h, 3, 7Eh, 10h, 40h
	dd 80h, 64h, 20000h, 6, 64h
	times 2 dd 14h
	dd 5
	times 2 dd 0
	dd 0C8h
	times 2 dd 60h
	dd 80h, 64h, 0
	dd 30h, 28h
	times 2 dd 14h
	dd 5, 0B4h, 1, 0F0h, 400h, 60h, 0FFh
	dd 64h, 0
	dd 3, 64h, 19h, 0Fh, 5
	times 2 dd 0
	dd 0C8h, 10h, 40h, 80h, 64h
byte_4D5404: db 1, 0
word_4D5406: dw 0
word_4D5408: dw 0
word_4D540A: dw 0
dword_4D540C: dd 0F00h
dword_4D5410: dd 12C0h
dword_4D5414: dd 1400h
dword_4D5418: dd 17C0h
	times 6 dd 0
	dd 5460003h, 2305AAh
	times 4 dd 0
	dd 1, 0
	dd 0F00h, 12C0h, 1400h, 17C0h, 2580001h, 0F02E4h, 3C0h
	dd 780h, 0A00h, 0C80h
	times 0Ch dd 0
	dd 2260002h, 3206FEh
	times 4 dd 0
	dd 0C90004h, 140141h
	times 4 dd 0
dword_4D54DC: dd 0
	dd 0
dword_4D5794: dd 0
dword_4D5798: dd 0
dword_4D579C: dd 726F70h, 72607000h
	times 2 db 0
word_4D57A6: dw 6F70h
	dd 7000006Bh, 6B60h
dword_4D57B0: dd 0EB85h
	dd 0FAE1h
	times 2 dd 10000h
	dd 0D999h, 10000h, 0CCCCh, 10000h
	dd 0DEB8h, 10000h, 0CCCCh, 10000h, 0CCCCh, 10000h, 0CCCCh
	dd 10000h, 0D999h, 10000h
dword_4D57F8: dd 10000h
	dd 10000h, 0F851h, 0FAE1h, 0F0A3h, 0F5C2h, 0E8F5h, 0F0A3h
	dd 0E147h, 0EB85h, 0D999h, 0E666h, 0D1EBh, 0E666h, 0CA3Dh
	dd 0E147h, 0C28Fh, 0E147h, 0BAE1h, 0E147h, 0B5C2h, 0E147h
	dd 0B5C2h, 0E147h
	times 4 dd 10000h
dword_4D5868: dd 10000h
	dd 10000h, 0FAE1h, 0FD70h, 0F5C2h, 0FAE1h, 0F0A3h, 0F851h
	dd 0EB85h, 0F5C2h, 0E666h, 0F333h, 0E147h, 0F0A3h, 0DC28h
	dd 0EE14h, 0D70Ah, 0EB85h, 0D1EBh, 0E8F5h, 0CCCCh, 0E666h
	dd 0C7AEh, 0E3D7h
	times 4 dd 10000h
dword_4D58D8: dd 10F5Ch
dword_4D58DC: dd 10B85h
	dd 10F5Ch, 10B85h, 10F5Ch, 1051Eh, 111EBh, 10B85h, 10F5Ch
	dd 10B85h, 10F5Ch, 1051Eh
	times 2 dd 0FAE1h
	dd 111EBh, 10B85h
	dd 10A3Dh
	times 2 dd 10000h
	dd 1051Eh, 1147Ah, 1051Eh, 0FD70h
	dd 0F5C2h, 0FD70h, 0F5C2h, 0FD70h, 0F5C2h, 10F5Ch, 10B85h
dword_4D5950: dd 12Ch
dword_4D5954: dd 1F4h
dword_4D5958: dd 28Ah
dword_4D595C: dd 320h
	dd 1F4h, 2EEh, 320h, 3E8h, 2EEh, 3E8h, 4E2h, 5DCh
byte_4D5980: db 40h
	times 3 db 40h
	times 3 dd 40404040h
	dd 28404040h, 55464032h, 40644632h, 4040402Dh
	times 2 dd 40404040h
byte_4D59A8: db 0, 0, 0, 0
	dd 1, 0
	dd 1
	times 8 dd 2
	dd 0
	dd 1
	times 2 dd 5
	times 2 dd 2
	dd 5, 1, 2
	times 2 dd 5
byte_4D5A04: db 2
byte_4D5A05: db 0
	times 2 db 0
dword_4D5A08: dd 0
byte_4D5A0C: db 4
byte_4D5A0D: db 0
byte_4D5A0E: db 0
byte_4D5A0F: db 0
byte_4D5A10: db 0
	times 3 db 0
dword_4D5A14: dd 0
byte_4D5A18: db 1
byte_4D5A19: db 1
	times 2 db 0
dword_4D5A1C: dd 1
dword_4D5A20: dd 1
	dd 28h
dword_4D5A28: dd 7Fh
dword_4D5A2C: dd 7Fh
dword_4D5A30: dd 7Fh
dword_4D5A34: dd 7Fh
dword_4D5A38: dd 1
dword_4D5A3C: dd 1
dword_4D5A40: dd 0
dword_4D5A44: dd 1
byte_4D5A48: db 0
byte_4D5A49: db 5Ah
	dw 0E692h
	dd 0BBCD3642h, 5796A473h, 7D5F8FDEh, 0B961243Dh, 0A5D1EFD7h
	dd 0A7507A1h, 0B685460h, 8A299799h, 0BEEB89FEh, 0ACEEF22Dh
	dd 18DCF7D8h, 6F9FE7F4h, 0EA6A1FBCh, 7162FB7Ah, 447F4015h
	dd 0FDC681BDh, 23E94ACCh, 8DFFED19h, 0D50EAAC1h, 0DFE0218Ch
	dd 0C864E3D6h, 0A0B7CE52h, 0ABBA1343h, 0BF263165h, 77C5D9D2h
	dd 461C1DDBh, 94827B03h, 0B84F45B6h, 0A61287D3h, 74A78032h
	dd 0AE3C3359h, 6B3478D0h, 914895E8h, 927935Bh, 53C28EC0h
	dd 6D0D1756h, 9DA8832Ah, 9BF6A33Fh, 0E5E25104h, 47D41441h
	dd 69082F30h, 0CA16B210h, 0E41ADD0Fh, 0F5982022h, 0FA0250DAh
	dd 7E284CF9h, 0C96755B0h, 6C7B34Dh, 5E90E1h, 3570F3FCh
	dd 25110C1Eh, 0ECF8B46Eh, 3E2E6686h, 5D582B49h, 0B1A29C63h
	dd 764E8B2Ch, 9A375C3Ah, 0AD9E05F0h, 0C4B57984h, 39CF3BCBh
	dd 0C3AFA901h, 1B723888h, 6CF14B85h
	db 7Ch
byte_4D5B49: db 0
	dw 703h
	dd 13100D0Ah, 1D1B1816h, 2523211Fh, 2D2B2927h, 3332302Eh
	dd 39373635h, 3E3D3C3Ah, 4342413Fh, 47464544h, 4B4A4948h
	dd 4F4E4D4Ch, 53525150h, 56555454h, 59585857h, 5C5B5B5Ah
	dd 5F5E5E5Dh, 62616060h, 64646362h, 67666565h, 69686867h
	dd 6B6B6A6Ah, 6D6D6C6Ch, 6F6F6E6Eh, 71717070h, 73737272h
	dd 75757474h, 77777676h, 79787877h, 7A7A7A79h, 7C7C7B7Bh
	dd 7E7D7D7Dh
	times 2 db 7Fh
byte_4D5BCA: db 40h
	db 40h
	times 5 dd 40404040h
	times 2 db 40h
byte_4D5BE2: db 0
	db 0
dword_4D5BE4: dd 63h
byte_4D5BE8: db 0
	times 3 db 0
dword_4D5BEC: dd 40h
dword_4D5BF0: dd 40h
	dd 0
	dd 0F423Fh
dword_4D5BFC: dd 1, 0
	dd 0Bh
	dd sub_448270
	times 2 dd 2
	dd 0Ah
	dd sub_448270
	dd 3, 4, 9
	dd sub_448270
dword_4D5C2C: dd 0
	dd 64h, 0
dword_4D5C38: dd 1
dword_4D5C3C: dd 0
dword_4D5C40: dd 0
dword_4D5C44: dd 10000h
dword_4D5C48: dd 8CCCh
dword_4D5C4C: dd 6666h
dword_4D5C50: dd 1
dword_4D5C54: dd 0FFFFFFFEh
dword_4D5C58: dd 3
dword_4D5C5C: dd 0FFFFFFFCh
dword_4D5C60: dd 5
dword_4D5C64: dd 0FFFFFFFAh
dword_4D5C68: dd 7
dword_4D5C6C: dd 0FFFFFFF8h
dword_4D5C70: dd 4
dword_4D5C74: dd 0
dword_4D5C78: dd 0
byte_4D5C7C: db 0
	times 3 db 0
dword_4D5C80: dd 0
dword_4D5C84: dd 0
dword_4D5C88: dd 0
dword_4D5C8C: dd 0
dword_4D5C90: dd 0
dword_4D5C94: dd 0
dword_4D5C98: dd 0
dword_4D5C9C: times 9 dd 0
dword_4D5CC0: dd 0
dword_4D5CC4: dd 0
dword_4D5CC8: times 3 dd 0
dword_4D5CD4: dd 0
	times 1Ch dd 0
dword_4D5D48: dd 0
dword_4D5D4C: dd 0
dword_4D5D50: dd 0
dword_4D5D54: dd 0
dword_4D5D58: dd 0
dword_4D5D5C: dd 0
dword_4D5D60: dd 0
dword_4D5D64: dd 0
dword_4D5D68: dd 0
dword_4D5D6C: dd 0
dword_4D5D70: dd 0
dword_4D5D74: dd 0
dword_4D5D78: dd 0
dword_4D5D7C: dd 0
dword_4D5D80: dd 0
	times 44h dd 0
dword_4D5E94: dd 0
dword_4D5E98: dd 0
dword_4D5E9C: dd 0
dword_4D5EA0: dd 0
dword_4D5EA4: dd 0
dword_4D5EA8: dd 0
dword_4D5EAC: dd 0
dword_4D5EB0: dd 0
dword_4D5EB4: dd 4000h
	dd 0, 0
	dd 0CCCh, 0
	dd 0CCCh, 0
	dd 4000h, 0
	times 2 dd 4CCCh
	times 4 dd 0
dword_4D5EF0: dd 0
dword_4D5EF4: dd 1999h
dword_4D5EF8: dd 0
dword_4D5EFC: dd 27h
dword_4D5F00: dd 9999h
	dd 20h, 0B333h, 20h, 0B333h, 20h, 0B333h, 1Ah, 10000h
	dd 20h, 0B333h, 2Dh, 3333h, 1Ah, 0C000h, 2Dh, 1999h, 20h
	dd 0B333h, 20h, 0B333h, 2Dh, 9999h, 41h, 0CCCCh, 41h, 0CCCCh
	dd 20h, 3333h
dword_4D5F74: dd 674CCCh
	dd 5A4CCCh, 51CCCCh, 626666h, 508000h, 504CCCh, 5E3333h
	dd 573333h, 4E3333h, 564CCCh, 50E666h, 5ECCCCh, 49B333h
	dd 5DE666h, 7AE666h
dword_4D5FB0: dd 0
	dd 0
	times 2 dd 640000h
	dd 0
	dd 0C80000h, 1
	times 2 dd 0
	dd 640000h
	times 3 dd 0
	dd 0C80000h, 0
	dd 640000h
dword_4D5FF0: dd 0
	dd 1
	times 2 dd 0
	dd 1
	times 2 dd 0
	dd 1
	times 2 dd 0
	times 3 dd 1
	times 3 dd 0
dword_4D6030: dd 1
	dd 0
	times 2 dd 1
	times 6 dd 0
	times 4 dd 1
	dd 0
	dd 1
dword_4D6070: dd 1
	times 2 dd 0
	dd 1
	times 7 dd 0
	times 3 dd 1
	times 2 dd 0
dword_4D60B0: dd 0
	dd 0
	dd 10000h, 18000h, 9999h, 13333h, 0
	dd 8000h, 0
	dd 4CCCh, 8000h, 10000h, 0CCCCh, 13333h, 0
	dd 13333h
dword_4D60F0: dd 0
	dd 0
	dd 7, 8, 0
	dd 6
	times 3 dd 0
	dd 9
	times 3 dd 0
	dd 6, 0
	dd 9
dword_4D6130: dd 0
	dd 0
	dd 3, 9, 0
	dd 3
	times 2 dd 0
	times 2 dd 8
	times 3 dd 0
	times 2 dd 3
	dd 8
dword_4D6170: dd 0
	times 2 dd 4
	dd 6, 4, 8, 0
	dd 6
dword_4D6190: dd 4
	times 2 dd 4
	dd 0Ah, 4, 0Bh
	times 2 dd 0Ah
dword_4D61B0: dd 1
	times 3 dd 2
	times 3 dd 1
dword_4D61CC: dd 0
	dd 0
	dd 0FFFFFFFDh, 0FFFFFFFAh, 0FFFFFFF8h, 0FFFFFFF7h, 0FFFFFFF8h
	dd 0FFFFFFFAh, 0FFFFFFFDh, 0
	dd 7, 0Ch, 10h, 12h, 13h, 12h, 10h, 0Ch, 7, 0
	dd 0FFFFFFF8h, 0FFFFFFF4h, 0FFFFFFEEh, 0FFFFFFECh, 0FFFFFFEBh
	dd 0FFFFFFECh, 0FFFFFFEEh, 0FFFFFFF1h, 0FFFFFFF5h, 0FFFFFFFAh
	dd 0
	dd 8, 10h, 18h, 20h, 2Ah, 36h
dword_4D6260: dd 0
dword_4D6264: dd 1
dword_4D6268: dd 0
dword_4D626C: dd 0
dword_4D6270: dd 0
	dd 1
dword_4D6278: dd 0
dword_4D627C: dd 1
dword_4D6280: dd 0
dword_4D6284: dd 0
dword_4D6288: dd 0
dword_4D628C: dd 0
dword_4D6290: dd 3333h
	dd 5999h
dword_4D6298: dd 10000h
	dd 3D999h
dword_4D62A0: dd 10000h
	dd 1D999h
dword_4D62A8: dd 10000h
	dd 3B333h
dword_4D62B0: dd 140000h
dword_4D62B4: dd 3333h
dword_4D62B8: dd 9999h
dword_4D62BC: dd 0D999h
dword_4D62C0: dd 0C000h
dword_4D62C4: dd 0
dword_4D62C8: dd 0
dword_4D62CC: dd 0
dword_4D62D0: dd 0D2h
dword_4D62D4: dd 50h
	dd 0, 0
	dd 3Ch, 6Eh, 0FEh, 0D7h, 0F9h, 60h, 0FDh, 0DBh, 85h, 64h
	dd 0F9h, 0B3h, 65h, 51h, 1Ch, 0FDh, 0D1h, 3Ah, 0Dh, 0E1h
	dd 0F9h, 59h, 2Ah, 97h, 59h, 5Ch, 59h, 0AFh, 3Fh, 69h
	dd 96h, 0FFh, 0E6h, 6Ah, 0A9h, 0A5h, 0B1h, 75h, 0D3h, 0CDh
	dd 84h, 4Fh, 7Fh, 0CFh
	times 2 dd 64h
	dd 19h, 0C4h, 0C8h, 49h
	times 2 dd 0
	dd 78h, 56h, 0F8h, 0C5h, 0D2h, 5Fh, 78h, 0A3h, 0D3h, 66h
	dd 0A3h, 56h, 0D3h, 66h, 1Ah, 59h, 0FAh, 5Eh, 2Bh, 0D3h
	dd 0EFh, 66h, 0Fh, 0CCh, 0F4h, 9Fh, 1Ah, 0DAh, 0FFh, 7Bh
	dd 35h, 0A7h, 0B0h, 91h, 0F6h, 70h, 0F7h, 69h, 0E4h, 0FFh
	dd 7Dh, 8Fh, 58h, 0DFh, 65h, 0E7h, 8, 18h, 30h, 98h, 88h
	dd 18h, 0F0h, 88h, 0F9h, 0F0h, 87h, 80h, 20h, 18h, 0FFh
	dd 30h, 0FDh, 0F1h, 0F8h, 58h, 1Ah, 0FEh, 0FFh, 3Ah, 8Eh
	dd 0E5h, 37h, 4Ah, 0A0h, 20h, 25h, 94h, 14h, 10h, 0FFh
	dd 34h, 80h, 8, 0E0h, 70h, 0FEh, 0F8h, 0B0h, 60h, 0A3h
	dd 0F0h, 81h, 61h, 28h, 0F8h, 0EEh, 49h, 0CEh, 0F8h, 2Eh
	dd 48h, 46h, 8, 0FFh, 49h, 4Eh, 8, 1Fh, 0B1h, 0FDh, 0DFh
	dd 0A5h, 7Fh, 0AAh, 0C2h, 46h, 50h, 5, 0F8h, 0C6h, 30h
	dd 0FEh, 0F8h, 0D8h, 68h, 1Fh, 0F5h, 0FFh, 31h, 6Dh, 0DFh
	dd 0A5h, 7Fh, 2Dh, 10h, 56h, 38h, 0A2h, 0E0h, 37h, 61h
	dd 46h, 8, 0FFh, 49h, 8, 18h, 30h, 98h, 0FEh, 0FFh, 0E0h
	dd 68h, 1Ah, 0FEh, 0FFh, 3Ah, 0B0h, 0E1h, 88h, 70h, 46h
	dd 8, 0FFh, 49h, 0
	dd 0FFh, 0D0h
	times 2 dd 58h
	dd 0AFh, 2Dh, 7Fh, 0A3h, 0D0h
	times 2 dd 61h
	dd 2Dh, 0
	dd 0FEh, 68h, 8, 18h, 30h, 98h, 1Ah, 0FEh, 0FFh, 3Ah, 8Eh
	dd 0E5h, 37h, 4Ah, 80h, 9, 0E0h, 40h
	times 2 dd 0
	dd 0C8h, 80h, 0FCh, 0F0h, 87h, 78h, 2Dh, 0
	dd 0FEh, 68h, 0FEh, 0F8h, 0D8h, 68h, 88h, 18h, 0F0h, 88h
	dd 8, 18h, 10h, 80h, 1Ah, 0FEh, 0FFh, 3Ah, 0A3h, 0F0h
	dd 81h, 61h, 9Dh, 4Ah, 0FAh, 6Eh, 4Eh, 8, 1Fh, 0B1h, 0A3h
	dd 0D0h
	times 2 dd 61h
	dd 0FEh, 0F8h, 0B0h, 60h, 83h, 0E6h
	dd 1Bh, 38h, 1Ah, 0FEh, 0FFh, 3Ah, 2, 0FFh, 0B0h, 78h
	dd 0CEh, 0F8h, 36h, 68h, 6Bh, 0B0h, 1Eh
	times 2 dd 80h
	dd 8
	dd 0FFh, 68h, 0FEh, 0F8h, 0D8h, 68h, 1Ah, 0FEh, 0FFh, 3Ah
	dd 2Dh, 0
	dd 0Eh, 50h, 0A3h, 0D0h
	times 2 dd 61h
	dd 2Dh, 0
	dd 0FEh, 56h, 0FEh, 0F8h, 0D8h, 68h
	times 5 dd 0
	dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
	dd 0Fh
	times 8 dd 0
	dd 0Bh, 8, 1, 0Eh, 2, 0
	dd 2, 5, 0Ah, 1, 0
	dd 0Eh, 2, 0Ah, 5, 0Bh, 0
	dd 1, 2, 0Ah, 6, 2, 5, 8, 0Eh, 1, 0
	dd 1, 2, 5, 0Ah, 0
	dd 2, 8, 0Ah, 0
	dd 1, 5, 0Ah, 0
	dd 0Eh, 2, 0
	dd 2, 0Eh, 1, 5, 0Ah, 0Eh, 1, 0Ah, 2, 8, 5, 2, 0Bh, 8
	dd 0
	dd 2, 5, 1, 0Ah, 0
	dd 2, 0
dword_4D69BC: dd 0
dword_4D69C0: dd 0
off_4D69C4: dd aTextsim_eng
	dd aTextsim_ger ; "textsim.ger"
	dd aTextsim_fre ; "textsim.fre"
	dd aTextsim_spa ; "textsim.spa"
	dd aTextsim_ita ; "textsim.ita"
	dd aTextsim_swe ; "textsim.swe"
dword_4D69DC: dd 0
off_4D69E0: dd a2d02d_02d
	dd a2d02d02d ; "%2d:%02d:%02d"
	dd a2d02d02d_0 ; "%2d'%02d''%02d"
	dd a2d02d02d_0 ; "%2d'%02d''%02d"
	dd a2d02d02d_0 ; "%2d'%02d''%02d"
	dd a2d_02d02d ; "%2d.%02d,%02d"
	times 3 dd 0
	dd 0FFF60000h, 0F0000h, 140000h, 0A0000h, 0F0000h, 140000h
	dd 0A0000h, 50000h, 140000h, 0FFF60000h, 50000h, 140000h
	times 2 dd 32h
	dd 12Ch, 32h, 12Ch, 0C8h, 32h, 0C8h
	dd 0
dword_4D6A58: dd 0
dword_4D6A5C: dd 0
dword_4D6A60: dd 0
dword_4D6A64: dd 0
dword_4D6A68: dd 0
dword_4D6A6C: dd 0
dword_4D6A70: dd 0
dword_4D6A74: dd 0
dword_4D6A78: dd 0F874AF01h
dword_4D6A7C: dd 0
dword_4D6A80: dd 1
aMcf1: db 'MCF1',0
	times 3 db 0
	db 'FF50',0
	times 3 db 0
	db 'F355',0
	times 3 db 0
	db 'GT90',0
	times 3 db 0
	db 'IDGO',0
	times 3 db 0
	db 'MACH',0
	times 3 db 0
	db 'JAGR',0
	times 3 db 0
	db 'LGT1',0
	times 3 db 0
	db 'ESPR',0
	times 3 db 0
	db 'NAZC',0
	times 3 db 0
	db 'CALA',0
	times 3 db 0
	db 'ISDE',0
	times 3 db 0
	db 'CHEV',0
	times 3 db 0
	db 'DAYT',0
	times 3 db 0
	db 'FUTR',0
	times 3 db 0
	db 'CITR',0
	times 3 db 0
	db 'OPP',0
	times 4 db 0
	db 'TRAF',0
	times 3 db 0
	db 'CITR',0
	times 3 db 0
	db 'COMC',0
	times 3 db 0
	db 'SBUS',0
	times 3 db 0
	db 'SEMI',0
	times 3 db 0
	db 'VANA',0
	times 3 db 0
	db 'QUAT',0
	times 3 db 0
	db 'VOLW',0
	times 3 db 0
	db 'YJ',0
	times 5 db 0
	db 'MERC',0
	times 3 db 0
	db 'VWFB',0
	times 3 db 0
	db 'MIAT',0
	times 3 db 0
	db 'BUG',0
	times 4 db 0
	db 'LAND',0
	times 3 db 0
	db 'ARMY',0
	times 3 db 0
	db 'BMW5',0
	times 3 db 0
	db 'SNOW',0
	times 3 db 0
	db 'mono',0
	times 3 db 0
	db 'limo',0
	times 3 db 0
	db 'MIAT',0
	times 3 db 0
	db 'SBUS',0
	times 3 db 0
	db 'SBUS',0
	times 3 db 0
	db 'SBUS',0
	times 3 db 0
	db 'CRAT',0
	times 3 db 0
	db 'CART',0
	times 3 db 0
	db 'OUTH',0
	times 3 db 0
	db 'TREX',0
	times 3 db 0
	db 'WAGO',0
	times 3 db 0
	db 'SOU1',0
	times 3 db 0
	db 'SOU2',0
	times 3 db 0
	db 'SOU3',0
	times 3 db 0
	db 'LOG',0
	times 4 db 0
	db 'BOX',0
	times 4 db 0
	db 'BEER',0
	times 3 db 0
	db 'RUIN',0
	times 3 db 0
	db 'SM47',0
	times 3 db 0
	db 'SM48',0
	times 3 db 0
	db 'SM49',0
	times 3 db 0
	db 'SM50',0
	times 3 db 0
	db 'BADCAR!',0
	times 2 dd 0
dword_4D6C58: dd 2
	dd dword_5121F8
	dd 3
	dd dword_5121FC
	dd 4
	dd dword_512200
	dd 5
	dd dword_512204
	dd 6
	dd dword_512208
	dd 8
	dd dword_51220C
	dd 9
	dd dword_512210
	dd 14h
	dd byte_512218
	dd 0Ah
	dd dword_51221C
	dd 0Bh
	dd dword_512220
	dd 0Ch
	dd dword_512224
	dd 0Dh
	dd dword_512260
	dd 10h
	dd dword_512264
	dd 11h
	dd dword_512268
	dd 12h
	dd dword_51226C
	dd 0Fh
	dd dword_5126F0
	dd 22h
	dd dword_512670
	dd 13h
	dd dword_512234
	dd 1Eh
	dd dword_512238
	dd 1Dh
	dd dword_51223C
	dd 15h
	dd dword_512240
	dd 16h
	dd dword_512244
	dd 17h
	dd dword_512248
	dd 18h
	dd dword_51224C
	dd 19h
	dd dword_512250
	dd 1Ah
	dd dword_512254
	dd 1Bh
	dd dword_512258
	dd 1Ch
	dd dword_51225C
	dd 7Bh
	dd dword_512270
	dd 7Ch
	dd dword_512274
	dd 7Dh
	dd dword_512278
	dd 7Fh
	dd dword_512280
	dd 80h
	dd dword_512284
	dd 81h
	dd dword_512288
	dd 7Eh
	dd dword_51227C
	dd 82h
	dd dword_51228C
	dd 83h
	dd dword_512290
	dd 84h
	dd dword_512294
	dd 85h
	dd dword_512298
	dd 86h
	dd dword_51229C
	dd 87h
	dd dword_5122A0
	dd 1Fh
	dd dword_512228
	dd 20h
	dd dword_51222C
	dd 21h
	dd dword_512230
	times 2 dd 0
dword_4D6DC0: dd 2
	dd 3
dword_4D6DC8: dd 4
	dd 5, 6, 7, 4, 5, 2, 3
byte_4D7650: db 5
	db 0
	dw 201h
	dd 50403h, 4030200h, 1000005h, 50403h, 4030000h, 2010004h
	dd 40403h, 4030200h, 1000004h, 40403h, 4030000h
byte_4D7680: db 1
	db 2, 3, 4
	dd 20005h, 50403h, 4000301h, 30005h, 50400h, 4030201h
	dd 20000h, 403h, 4000301h, 30000h, 400h
byte_4D76B4: db 1
	times 3 db 0
dword_4D76B8: dd 0
dword_4D76BC: dd 0
byte_4D76C0: db 1
byte_4D76C1: db 1
byte_4D76C2: db 1
byte_4D76C3: db 1
byte_4D76C4: db 1
byte_4D76C5: db 1
byte_4D76C6: db 0
byte_4D76C7: db 0
byte_4D76C8: db 0
	times 3 db 0
dword_4D76CC: dd 0
dword_4D76D0: dd 6C7071h, 696961h, 647073h, 6C6171h, 6C6173h, 617464h
	dd 737071h, 666E69h, 616471h, 726163h, 736171h, 746471h
	dd 6C7073h, 657073h
dword_4D7708: dd 0
dword_4D770C: dd 0
off_4D7710: dd sub_463BC0
	dd sub_40DFD0
	dd sub_40DF40
	dd sub_4638A0
	dd sub_472AD0
	dd sub_472950
	dd sub_471980
	dd sub_472E00
	dd sub_4214D0
	dd sub_47E440
dword_4D7738: dd 64636261h, 68676665h, 6C6B6A69h, 64636261h, 68676665h
	dd 6C6B6A69h
	times 3 dd 6D6D6D6Dh
	dd 64636261h, 68676665h, 6C6B6A69h
dword_4D7768: dd 61616161h
	times 2 dd 2CCCCh
	dd 2B333h, 29999h, 24CCCh, 21999h
	dd 1D1EAh, 1C189h, 18000h, 13333h, 10000h, 0F2AFh
	times 2 dd 0E666h
	dd 0D999h, 0CCCCh
	times 2 dd 0C000h
	dd 0B333h, 0A666h, 851Eh
	dd 90000h
	times 14h dd 10000h
	dd 0C7AEh, 10000h, 14h, 0A0000h
	dd 3CCCCh, 4CCCh, 1Eh
	times 4 dd 0
	dd 28h, 0C8h, 1, 62626262h
	times 2 dd 28000h
	dd 26666h, 24CCCh
	dd 228F3h, 1C000h, 1A8F5h, 18CCCh, 16666h, 12666h, 10000h
	dd 0FAE1h, 0F333h, 0E666h, 0E47Ah, 0C8B4h, 0C999h, 0ADC0h
	dd 0A666h
	times 2 dd 9999h
	dd 90000h
	times 14h dd 10000h
	dd 0CCCCh
	dd 10000h, 14h, 60000h, 3CCCCh, 4CCCh, 0Ah
	times 4 dd 0
	dd 28h, 0C8h, 1, 63636363h
	times 5 dd 20000h
	dd 1CCCCh, 16666h
	dd 1547Ah, 14CCCh, 13B64h, 12666h, 10000h, 0F333h, 0EB84h
	dd 0DEB7h, 0D47Ah, 0C28Fh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 90000h
	times 14h dd 10000h
	dd 0D1EBh, 10000h, 14h, 10000h
	dd 3CCCCh, 4CCCh, 14h, 3333h, 6666h, 0FFFFCCCDh, 0FFFF999Ah
	dd 14h, 8, 0Fh, 64646464h
	times 4 dd 20000h
	dd 1CCCCh, 16666h
	dd 14CCCh, 13333h, 11999h, 10CCCh
	times 2 dd 10000h
	dd 0F333h
	dd 0E666h, 0D999h, 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h, 90000h
	times 14h dd 10000h
	dd 0D70Ah, 10000h, 0
	dd 0A0000h, 3CCCCh, 4CCCh, 0Ah
	times 4 dd 0
	dd 32h, 0C8h, 1, 65656565h
	times 4 dd 1B333h
	dd 187AEh, 14CCCh
	dd 14000h, 13333h, 126E9h, 11C68h, 10000h
	times 2 dd 0F333h
	dd 0E666h, 0D999h, 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h, 90000h
	times 14h dd 10000h
	dd 0DC28h, 10000h, 0Ch
	dd 140000h, 3CCCCh, 4CCCh, 14h
	times 5 dd 0
	dd 8, 18h, 66666666h, 1CCCCh, 1B333h, 19999h
	times 2 dd 18000h
	times 3 dd 14CCCh
	dd 13333h
	times 3 dd 10000h
	times 2 dd 0DAE1h
	dd 0CEB7h, 0C28Fh, 0B666h, 0B5C2h
	times 2 dd 0AA7Eh
	dd 91EBh
	dd 90000h
	times 14h dd 10000h
	dd 0E147h, 0FAE1h, 14h, 10000h
	dd 43333h, 4CCCh, 14h, 8000h, 4000h, 0FFFF8000h, 0FFFFC000h
	dd 1Eh, 0C8h, 1, 67676767h
	times 2 dd 17FFFh
	times 2 dd 16666h
	dd 15999h, 14CCCh, 11999h
	times 5 dd 10000h
	dd 0E6F0h, 0DAE1h
	dd 0C3D7h, 0B851h
	times 2 dd 0ACCCh
	dd 0A147h
	times 2 dd 8A3Dh
	dd 90000h
	times 14h dd 10000h
	dd 0E666h, 0F333h, 0
	dd 140000h, 20000h, 4CCCh, 14h, 3333h, 0FFFFCCCDh, 6666h
	dd 0FFFF999Ah, 14h, 0Eh, 0FAh, 68686868h
	times 4 dd 16666h
	dd 1665Eh, 13333h, 11999h
	times 5 dd 10000h
	dd 0F333h, 0E666h
	dd 0D999h, 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h
	dd 90000h
	times 14h dd 10000h
	dd 0EB85h, 10000h, 0Fh, 50000h
	dd 3CCCCh, 4CCCh, 0Ch
	times 5 dd 0
	dd 0C8h, 1, 69696969h, 14CCBh
	times 3 dd 14CCCh
	times 2 dd 13333h
	dd 11999h, 13333h, 13332h
	times 3 dd 10000h
	dd 0F333h, 0E666h
	dd 0D999h, 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h
	dd 90000h
	times 14h dd 10000h
	dd 0F0A3h, 10000h, 0Ch, 140000h
	dd 3CCCCh, 4CCCh, 14h
	times 5 dd 0
	dd 0C8h, 1, 6A6A6A6Ah
	times 2 dd 14CCCh
	times 3 dd 13332h
	times 2 dd 11999h
	dd 10000h, 11999h
	times 3 dd 10000h
	dd 0F333h, 0E666h, 0D999h
	dd 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h, 90000h
	times 14h dd 10000h
	dd 0F5C2h, 10000h, 0Ch, 140000h, 3CCCCh
	dd 4CCCh, 14h
	times 5 dd 0
	dd 0C8h, 1, 6B6B6B6Bh, 15999h, 14CCBh, 14000h
	times 3 dd 13332h
	dd 11999h
	times 5 dd 10000h
	dd 0F333h, 0E666h, 0D999h, 0CCCCh
	times 2 dd 0C000h
	times 2 dd 0B333h
	dd 9999h, 90000h
	times 14h dd 10000h
	dd 0FAE1h, 10000h, 0Ch, 140000h, 3CCCCh, 4CCCh, 14h
	times 5 dd 0
	dd 7D0h, 2, 6C6C6C6Ch, 15999h, 14000h
	times 3 dd 13333h
	dd 13332h
	dd 12665h
	times 2 dd 0FAE1h
	dd 0EB84h, 10000h, 0FAE1h, 0E666h
	dd 0D999h, 0C28Fh, 0B851h, 0B000h, 0A333h, 9999h
	times 2 dd 8CCCh
	dd 90000h
	times 16h dd 10000h
	dd 0Ch, 140000h, 3CCCCh, 4CCCh
	dd 14h
	times 5 dd 0
	dd 0Eh, 0FAh, 6D6D6D6Dh
	times 4 dd 30000h
	dd 2B333h, 26665h
	dd 23333h, 20000h, 1B333h, 15999h, 10000h, 0DEB8h, 0CCCCh
	dd 0B999h, 0AB84h, 9AE1h, 8C26h, 4CCCh
	times 2 dd 4000h
	dd 3333h
	dd 90000h, 80000h, 50000h, 30000h, 20000h
	times 12h dd 10000h
	dd 2, 280000h, 3CCCCh, 4CCCh, 1Eh
	times 4 dd 0
	dd 28h, 0C8h, 1, 616E6E55h, 64656Dh
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 5 dd 0
	dd 6E550000h, 656D616Eh, 64h
	times 5 dd 0
	db 'Unnamed',0
	times 6 dd 0
dword_4D8484: dd 10000h
	dd 0FD70h, 0FAE1h, 0F851h, 0F333h, 0E666h, 0D999h, 0CCCCh
	dd 0C000h, 9999h, 10000h, 0FD70h, 0FAE1h, 0F851h, 0E666h
	dd 0CCCCh, 0C000h, 0B333h, 0A666h, 9999h
byte_4D84D4: db 0
	db 0
	dw 202h
	dd 1020201h, 1000202h, 2000201h, 0
byte_4D84E8: db 9
	times 3 db 9
	times 4 dd 9090909h
dword_4D84FC: dd 0
dword_4D8500: dd 0
dword_4D8504: dd 0
dword_4D8508: dd 0
dword_4D850C: dd 0
dword_4D8510: dd 0
dword_4D8514: dd 0
word_4D8518: dw 9
	dw 12h
	dd 0F000Ah, 0B0010h, 0D000Ch, 14000Eh, 110013h, 10005h
	dd 20006h, 30007h, 40008h, 40003h
	times 2 dd 10002h
	dd 0E0005h
	dd 0B001Ah, 7000Ch, 90008h, 19000Ah, 0D0006h, 10015h, 20016h
	dd 30017h, 40018h, 30002h, 10004h, 10002h, 120009h, 0F000Ah
	dd 0B0010h, 0D000Ch, 14000Eh, 110013h, 10005h, 20006h
	dd 30007h, 40008h, 40003h
	times 2 dd 10002h
	dd 120009h, 0F000Ah
	dd 0B0010h, 0D000Ch, 14000Eh, 110013h, 10005h, 20006h
	dd 30007h, 40008h, 40003h
	times 2 dd 10002h
	dd 120009h, 0F000Ah
	dd 0B0010h, 0D000Ch, 14000Eh, 110013h, 10005h, 20006h
	dd 30007h, 40008h, 40003h
	times 2 dd 10002h
	dd 120009h, 0F000Ah
	dd 0B0010h, 0D000Ch, 14000Eh, 110013h, 10005h, 20006h
	db 7, 0
word_4D863E: dw 3
	dd 40008h, 40003h
	times 2 dd 10002h
dword_4D8650: dd 50101h, 1, 0
	dd 1, 0
	dd 0E0101h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 60000h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 0B0001h, 0FFFFCA00h
	dd 3600h, 0FFFF8200h, 7E00h, 0C0001h, 4000h, 7E00h, 0FFFF8200h
	dd 7E00h, 70001h, 0FFFFFC00h, 6E00h, 0FFFF8200h, 7E00h
	dd 80001h, 0FFFF9200h, 400h, 0FFFF8200h, 7E00h, 90001h
	dd 1, 0
	dd 1, 0
	dd 0A0001h, 1, 0
	dd 1, 0
	dd 100001h, 20000h, 7E00h, 100h, 7E00h, 0F0001h, 1, 0
	dd 1, 0
	dd 0D0001h, 1, 0
	dd 1, 0
	dd 110000h, 0FFFFF800h, 7E00h, 0FFFF8200h, 7E00h, 10000h
	dd 0FFFFF800h, 6400h, 0FFFF8200h, 0FFFFF600h, 120000h
	dd 0FFFF8200h, 800h, 0FFFF8200h, 7E00h, 20000h, 0FFFF9C00h
	dd 800h, 0FFFF8200h, 0FFFFF600h, 130000h, 0FFFFF800h, 7E00h
	dd 0FFFF8200h, 7E00h, 30000h, 0FFFFF800h, 7E00h, 0FFFF8200h
	dd 0FFFFF600h, 140000h, 0FFFF8200h, 800h, 0FFFF8200h, 7E00h
	dd 40000h, 0FFFF8200h, 800h, 0FFFF8200h, 0FFFFF600h, 20001h
	dd 1, 0
	dd 1, 0
	dd 40101h, 1, 0
	dd 1, 0
	dd 30001h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 50100h, 1, 0
	dd 1, 0
	dd 0E0101h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 1A0000h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 0B0001h, 0FFFFCA00h
	dd 3600h, 0FFFF8200h, 7E00h, 0C0001h, 4000h, 7E00h, 0FFFF8200h
	dd 7E00h, 70001h, 0FFFFFB00h, 6400h, 0FFFF8200h, 7E00h
	dd 80001h, 0FFFF9C00h, 500h, 0FFFF8200h, 7E00h, 90001h
	dd 1, 0
	dd 1, 0
	dd 0A0001h, 1, 0
	dd 1, 0
	dd 190001h, 0FFFF8200h, 7E00h, 100h, 7D00h, 60001h, 0FFFF8200h
	dd 7E00h, 0A00h, 7E00h, 0D0001h, 1, 0
	dd 1, 0
	dd 150000h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 160000h, 1, 0
	dd 1, 0
	dd 20000h, 1, 0
	dd 1, 0
	dd 170000h, 1, 0
	dd 1, 0
	dd 30000h, 1, 0
	dd 1, 0
	dd 180000h, 1, 0
	dd 1, 0
	dd 40000h, 1, 0
	dd 1, 0
	dd 20000h, 1, 0
	dd 1, 0
	dd 30101h, 1, 0
	dd 1, 0
	dd 40001h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 50100h, 1, 0
	dd 1, 0
	dd 90101h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 1A0000h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 60001h, 1, 0
	dd 1, 0
	dd 0A0001h, 1, 0
	dd 1, 0
	dd 0B0001h, 1, 0
	dd 1, 0
	dd 0C0001h, 1, 0
	dd 1, 0
	dd 0D0001h, 1, 0
	dd 1, 0
	dd 0E0001h, 1, 0
	dd 1, 0
	dd 70001h, 0FFFF8200h, 7E00h, 100h, 7E00h, 80001h, 0FFFF8200h
	dd 7E00h, 0A00h, 7E00h, 190001h, 1, 0
	dd 1, 0
	dd 150000h, 0FFFFFD00h, 7E00h, 0FFFF8200h, 7E00h, 10000h
	dd 1, 0
	dd 0FFFF8200h, 0FFFFF600h, 160000h, 0FFFF8200h, 300h, 0FFFF8200h
	dd 7E00h, 20000h, 2, 0
	dd 0FFFF8200h, 0FFFFF600h, 170000h, 0FFFFF800h, 7E00h
	dd 0FFFF8200h, 7E00h, 30000h, 3, 0
	dd 0FFFF8200h, 0FFFFF600h, 180000h, 0FFFF8200h, 800h, 0FFFF8200h
	dd 7E00h, 40000h, 4, 0
	dd 0FFFF8200h, 0FFFFF600h, 20000h, 1, 0
	dd 1, 0
	dd 30101h, 1, 0
	dd 1, 0
	dd 40001h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 50100h, 1, 0
	dd 1, 0
	dd 0E0102h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 1A0000h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 0B0002h, 0FFFFCA00h
	dd 3600h, 0FFFF8200h, 7E00h, 0C0002h, 4000h, 7E00h, 0FFFF8200h
	dd 7E00h, 70002h, 0FFFFFB00h, 6400h, 0FFFF8200h, 7E00h
	dd 80002h, 0FFFF9C00h, 500h, 0FFFF8200h, 7E00h, 90002h
	dd 1, 0
	dd 1, 0
	dd 0A0002h, 1, 0
	dd 1, 0
	dd 190001h, 1, 0
	dd 1, 0
	dd 60002h, 0FFFF8200h, 7E00h, 0A00h, 7E00h, 0D0002h, 1
	dd 0
	dd 1, 0
	dd 150000h, 0FFFFFD00h, 7E00h, 0FFFF8200h, 7E00h, 10000h
	dd 1, 0
	dd 0FFFF8200h, 0FFFFF600h, 160000h, 0FFFF8200h, 300h, 0FFFF8200h
	dd 7E00h, 20000h, 2, 0
	dd 0FFFF8200h, 0FFFFF600h, 170000h, 0FFFFF800h, 7E00h
	dd 0FFFF8200h, 7E00h, 30000h, 3, 0
	dd 0FFFF8200h, 0FFFFF600h, 180000h, 0FFFF8200h, 800h, 0FFFF8200h
	dd 7E00h, 40000h, 4, 0
	dd 0FFFF8200h, 0FFFFF600h, 20000h, 1, 0
	dd 1, 0
	dd 30102h, 1, 0
	dd 1, 0
	dd 40002h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 50102h, 1, 0
	dd 1, 0
	dd 0E0102h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 60000h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 0B0002h, 0FFFFCA00h
	dd 3600h, 0FFFF8200h, 7E00h, 0C0002h, 4000h, 7E00h, 0FFFF8200h
	dd 7E00h, 70002h, 0FFFFFC00h, 6E00h, 0FFFF8200h, 7E00h
	dd 80002h, 0FFFF9200h, 400h, 0FFFF8200h, 7E00h, 90002h
	dd 1, 0
	dd 1, 0
	dd 0A0002h, 1, 0
	dd 1, 0
	dd 100002h, 20000h, 7E00h, 100h, 7E00h, 0F0002h, 1, 0
	dd 1, 0
	dd 0D0002h, 1, 0
	dd 1, 0
	dd 110000h, 0FFFFF800h, 7E00h, 0FFFF8200h, 7E00h, 10000h
	dd 0FFFFF800h, 6400h, 0FFFF8200h, 0FFFFF600h, 120000h
	dd 0FFFF8200h, 800h, 0FFFF8200h, 7E00h, 20000h, 0FFFF9C00h
	dd 800h, 0FFFF8200h, 0FFFFF600h, 130000h, 0FFFFF800h, 7E00h
	dd 0FFFF8200h, 7E00h, 30000h, 0FFFFF800h, 7E00h, 0FFFF8200h
	dd 0FFFFF600h, 140000h, 0FFFF8200h, 800h, 0FFFF8200h, 7E00h
	dd 40000h, 0FFFF8200h, 800h, 0FFFF8200h, 0FFFFF600h, 20002h
	dd 1, 0
	dd 1, 0
	dd 40102h, 1, 0
	dd 1, 0
	dd 30002h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
	dd 50102h, 1, 0
	dd 1, 0
	dd 0E0102h, 0FFFF8200h, 7E00h, 4600h, 3C00h, 60002h, 0FFFF8200h
	dd 7E00h, 0FFFFFF00h, 0FFFF8300h, 0B0002h, 0FFFFCA00h
	dd 3600h, 0FFFF8200h, 7E00h, 0C0002h, 4000h, 7E00h, 0FFFF8200h
	dd 7E00h, 70002h, 0FFFFFC00h, 6E00h, 0FFFF8200h, 7E00h
	dd 80002h, 0FFFF9200h, 400h, 0FFFF8200h, 7E00h, 90002h
	dd 1, 0
	dd 1, 0
	dd 0A0002h, 1, 0
	dd 1, 0
	dd 100002h, 20000h, 7E00h, 100h, 7E00h, 0F0002h, 1, 0
	dd 1, 0
	dd 0D0002h, 1, 0
	dd 1, 0
	dd 110000h, 0FFFFF800h, 7E00h, 0FFFF8200h, 7E00h, 10000h
	dd 0FFFFF800h, 6400h, 0FFFF8200h, 0FFFFF600h, 120000h
	dd 0FFFF8200h, 800h, 0FFFF8200h, 7E00h, 20000h, 0FFFF9C00h
	dd 800h, 0FFFF8200h, 0FFFFF600h, 130000h, 0FFFFF800h, 7E00h
	dd 0FFFF8200h, 7E00h, 30000h, 0FFFFF800h, 7E00h, 0FFFF8200h
	dd 0FFFFF600h, 140000h, 0FFFF8200h, 800h, 0FFFF8200h, 7E00h
	dd 40000h, 0FFFF8200h, 800h, 0FFFF8200h, 0FFFFF600h, 20002h
	dd 1, 0
	dd 1, 0
	dd 40102h, 1, 0
	dd 1, 0
	dd 30002h, 0FFFF8200h, 7E00h, 0FFFFFF00h, 0FFFF8300h, 10000h
	dd 1, 0
	dd 1, 0
	dd 20100h, 1, 0
	dd 1, 0
	dd 10000h, 1, 0
	dd 1, 0
dword_4D9280: dd 0
dword_4D9284: dd 0
dword_4D9288: dd 0
dword_4D928C: dd 0
dword_4D9290: dd 3
dword_4D9294: dd 0B570Ah
off_4D9298: dd sub_46EBA0
	dd 3, 0DF5C2h
	dd sub_46ECC0
	dd 3, 0DF5C2h
	dd sub_46ECC0
	dd 3, 0E8A3Dh
	dd sub_46EA80
	dd 3, 0A6E14h
	dd sub_46ECC0
	dd 3, 0E8A3Dh
	dd sub_46ECC0
	dd 3, 0EB333h
	dd sub_46ECC0
	dd 3, 0A8000h
	dd sub_46ECC0
	dd 3, 0DCCCCh
	dd sub_46ECC0
	dd 3, 0D0000h
	dd sub_46ECC0
	dd 3, 0D0000h
	dd sub_46ECC0
	dd 3, 0ECCCCh
	dd sub_46EC30
	dd 3, 280000h
	dd sub_46EAF0
	dd 3, 0D0000h
	dd sub_46ECC0
	dd 3, 0D0000h
	dd sub_46ECC0
	dd 3, 8000h
	dd sub_46ECC0
	dd 3, 0B0000h
	dd sub_46EA80
	dd 3, 0A0000h
	dd sub_46ECC0
	dd 3, 60000h
	dd sub_46ECC0
	dd 2, 0F0000h
	dd sub_46ECC0
	dd 1, 320000h
	dd sub_46ECC0
	dd 1, 320000h
	dd sub_46ECC0
	dd 3, 0D0000h
	dd sub_46ECC0
	dd 3, 0F0000h
	dd sub_46ECC0
	dd 3, 0F0000h
	dd sub_46ECC0
	dd 3, 0DA147h
	dd sub_46ECC0
	dd 3, 0F0A3Dh
	dd sub_46ECC0
	dd 3, 0B0000h
	dd sub_46ECC0
	dd 3, 90000h
	dd sub_46ECC0
	dd 3, 80000h
	dd sub_46ECC0
	dd 3, 0F0000h
	dd sub_46ECC0
	dd 1, 320000h
	dd sub_46ECC0
	dd 3, 0C224Dh
	dd sub_46ECC0
	dd 1, 460000h
	dd sub_46ECC0
	dd 3, 1E224Dh
	dd sub_46ECC0
	dd 3, 14224Dh
	dd sub_46ECC0
	dd 3, 0A0000h
	dd sub_46ECC0
	dd 3, 2224Dh
	dd sub_46ECC0
	dd 3, 2224Dh
	dd sub_46ECC0
	dd 3, 2224Dh
	dd sub_46ECC0
	dd 3, 8000h
	dd sub_46ECC0
	dd 3, 8000h
	dd sub_46ECC0
	dd 3, 30000h
	dd sub_46ECC0
	dd 3, 640000h
	dd sub_46ECC0
	dd 3, 70000h
	dd sub_46ECC0
	dd 3, 30000h
	dd sub_46ECC0
	dd 3, 30000h
	dd sub_46ECC0
	dd 3, 30000h
	dd sub_46ECC0
	dd 3, 20000h
	dd sub_46ECC0
	dd 3, 30000h
	dd sub_46ECC0
	dd 3, 1999h
	dd sub_46ECC0
	dd 3, 140000h
	dd sub_46ECC0
	dd 3, 10000h
	dd sub_46ECC0
	dd 3, 10000h
	dd sub_46ECC0
	dd 3, 10000h
	dd sub_46ECC0
	dd 3, 10000h
	dd sub_46ECC0
word_4D9530: dw 7FFFh
	dw 0
dword_4D9534: dd 0
dword_4D9538: dd 0
dword_4D953C: dd 60000000h
dword_4D9540: dd 0
dword_4D9544: dd 0
dword_4D9548: dd 0
	times 4 db 0
dword_4D9550: dd 0
	times 2 dd 0
dword_4D955C: dd 0
dword_4D9560: dd 0Ah
	dd 4, 6, 5, 7, 2, 3, 1, 0
dword_4D9584: dd 4
dword_4D9588: dd 6
	dd 7, 5
dword_4D9594: dd 6
	dd 1
dword_4D959C: dd 0
	dd 1, 2, 4, 8, 10h, 20h
dword_4D95B8: dd 20h
	dd 20h, 10h, 8, 4, 2, 1
dword_4D95D4: dd 0
	dd 10000h, 8000h, 4000h, 2000h, 1000h, 800h
dword_4D95F0: dd 3Fh
	dd 1Fh, 0Fh, 7, 3, 1, 0
byte_4D960C: db 4
	times 3 db 4
	times 2 dd 4040404h
	dd 3040404h, 3030303h
	times 2 dd 6060606h
	dd 5050606h
	times 2 dd 5050505h
	dd 5050506h
	times 4 dd 4040404h
	dd 6060606h, 5050505h
	times 3 dd 4040404h
dword_4D965C: dd 0
	times 2 dd 0
dword_4D9668: dd 0
dword_4D966C: dd 0
dword_4D9670: dd 0
dword_4D9674: dd 0
dword_4D9678: dd 0FFFFFFFFh
dword_4D967C: dd 1
dword_4D9680: dd 1
dword_4D9684: dd 0
dword_4D9688: dd 0
dword_4D968C: dd 0
dword_4D9690: dd 0
dword_4D9694: dd 0
	dd 2, 0
	dd 1
byte_4D96A4: db 0
	times 3 db 0
dword_4D96A8: dd 0
	dd 0
dword_4D96B0: dd 0
dword_4D96B4: dd 0
byte_4D96B8: db 0, 0, 0, 0
	dd 0
	dd 4
	times 2 dd 2
	times 2 dd 5
	dd 6, 5
	times 2 dd 0
	dd 4
	times 2 dd 2
	times 2 dd 5
	dd 6, 5
	times 2 dd 0
off_4D9708: dd aPionrock
	dd aNcntrock ; "ncntrock"
	dd aObakrock ; "obakrock"
	dd aPacrock ; "pacrock"
	dd aLastrock ; "lastrock"
	dd aNcntrock ; "ncntrock"
	dd aMedrock ; "medrock"
	dd aHimrock ; "himrock"
	dd aHollyrok ; "hollyrok"
	dd aPiontech ; "piontech"
	dd aNcnttech ; "ncnttech"
	dd aObaktech ; "obaktech"
	dd aPactech ; "pactech"
	dd aLasttech ; "lasttech"
	dd aNcnttech ; "ncnttech"
	dd aMedtech ; "medtech"
	dd aHimtech ; "himtech"
	dd aHollytec ; "hollytec"
	dd aShow ; "show"
	dd aCredits_0 ; "credits"
off_4D9758: dd aPionrock
	dd aNcntrock ; "ncntrock"
	dd aObakrock ; "obakrock"
	dd aPacrock ; "pacrock"
	dd aLastrock ; "lastrock"
	dd aNcntrock ; "ncntrock"
	dd aMedrock ; "medrock"
	dd aHimrock ; "himrock"
	dd aHollyrok ; "hollyrok"
	dd aPiontech ; "piontech"
	dd aNcnttech ; "ncnttech"
	dd aObaktech ; "obaktech"
	dd aPactech ; "pactech"
	dd aLasttech ; "lasttech"
	dd aNcnttech ; "ncnttech"
	dd aMedtech ; "medtech"
	dd aHimtech ; "himtech"
	dd aHollytec ; "hollytec"
	dd aShow ; "show"
	dd aCredits_0 ; "credits"
byte_4D97A8: db 0
byte_4D97A9: db 0
byte_4D97AA: db 0
	db 0
dword_4D97AC: dd 0
dword_4D97B0: dd 0
dword_4D97B4: dd 0
dword_4D97B8: dd 0
dword_4D980C: dd 200000h, 1090280h, 240000h, 1200280h, 240000h, 1200280h
	dd 2B0000h, 10B0280h, 0
	dd 1380280h, 0
	dd 12C0280h, 1C0000h, 1150280h, 420000h, 10F0280h, 220000h
	dd 1240280h, 0
	dd 13B0280h, 1F0000h, 1130280h, 270000h, 11B0280h
dword_4D986C: dd 129h
	times 2 dd 144h
	dd 136h, 138h, 12Ch, 131h, 151h, 146h, 13Bh
	dd 132h, 142h, 32314E52h, 36353433h
off_4D98A4: dd aNull
	dd sub_4777A0
dword_4D98AC: dd 0
	dd aAnalog ; "Analog"
	dd sub_477850
	dd sub_4778F0
	dd aButton ; "Button"
	dd sub_477930
	dd sub_477960
	dd aKey ; "Key"
	dd sub_477820
	dd 0
	dd aIntface ; "Intface"
	dd sub_4777B0
	times 4 dd 0
dword_4D98EC: dd 0
dword_4D98F0: dd 0
dword_4D98F4: dd 1
dword_4D98F8: dd 0
dword_4D98FC: dd 0
dword_4D9900: dd 0
dword_4D9904: dd 1
dword_4D9908: dd 0
dword_4D990C: dd 0
dword_4D9910: dd 0
dword_4D9914: dd 0
dword_4D9918: dd 0
word_4D991C: dw 0
word_4D991E: dw 0
dword_4D9920: dd 0
byte_4D9924: db 64h
	times 3 db 0
dword_4D9928: dd 0
dword_4D992C: dd 0
dword_4D9930: dd 0
dword_4D9934: dd 0
dword_4D9938: dd 0
dword_4D993C: dd 0
dword_4D9940: dd 0
dword_4D9944: dd 0
dword_4D9948: dd 2Fh
dword_4D994C: dd 0D9h
dword_4D9950: dd 0D2h
dword_4D9954: dd 28h
dword_4D9958: dd 0D8h
dword_4D995C: dd 1B5h
	dd 0C7h, 0B9h, 39h, 1Fh, 152h, 1B5h, 8Eh, 0B8h, 39h, 20h
	dd 152h, 1B5h, 0Fh, 0E1h, 20h, 1Fh, 115h, 1B5h, 6Eh, 0B8h
	times 2 dd 20h
	dd 115h, 1B6h, 4, 0F5h
	times 2 dd 0Bh
	dd 100h, 1C0h
	dd 0
	dd 0E8h, 0Fh, 0Eh, 13Ch, 1BEh, 0
	dd 0F5h
	times 2 dd 2
	dd 0FFFFFFFFh, 0
	dd 8Bh, 81h
	times 2 dd 13h
	dd 0F9h, 1BCh, 0A9h, 15h, 13h, 15h
	dd 0FCh, 1BBh, 4Eh, 0B9h
	times 2 dd 20h
	dd 114h, 1B5h, 0BBh
	dd 15h, 14h, 12h, 11Ah, 1BDh, 2Eh, 0B9h
	times 2 dd 20h
	dd 114h
	dd 1B5h, 0CFh, 15h
	times 2 dd 12h
	dd 11Bh, 1BDh, 0Eh, 0C1h
	times 2 dd 20h
	dd 114h, 1B5h, 0E1h, 15h, 0Fh, 10h, 11Dh, 1BDh
	dd 20h, 74h, 1Fh, 20h, 114h, 1B5h, 0F0h, 15h
	times 2 dd 10h
	dd 11Ch, 1BDh, 65h, 5Fh, 8, 11h, 174h, 1BDh, 6Dh, 5Fh
	dd 13h, 11h, 16Fh, 1BDh, 80h, 5Fh, 12h, 11h, 170h, 1BDh
	dd 92h, 5Fh, 16h, 11h, 16Eh, 1BDh, 0A8h, 5Fh, 13h, 11h
	dd 171h, 1BDh, 0BBh, 5Fh, 13h, 11h, 170h, 1BDh, 0CEh, 5Fh
	dd 13h, 11h, 170h, 1BDh, 0E1h, 5Fh, 13h, 11h, 16Fh, 1BDh
	dd 65h, 70h, 13h, 11h, 16Fh, 1BDh, 78h, 70h, 8, 11h, 174h
	dd 1BDh, 80h, 70h, 13h, 11h, 16Fh, 1BDh, 93h, 70h, 12h
	dd 11h, 170h, 1BDh, 0A5h, 70h, 16h, 11h, 16Eh, 1BDh, 0BBh
	dd 70h, 13h, 11h, 171h, 1BDh, 0CEh, 70h, 13h, 11h, 170h
	dd 1BDh, 0E1h, 70h, 13h, 11h, 170h, 1BDh, 65h, 81h, 13h
	dd 11h, 16Fh, 1BDh, 78h, 81h, 13h, 11h, 16Fh, 1BDh, 9
	dd 0E3h, 6, 4, 0FBh, 1D6h
	db 0
dword_4D9CC1: dd 81000000h
	times 2 db 81h
	db 0
	dd 4030201h, 8070605h
dword_4D9CD0: dd 0C818109h
	dd 0C0C0905h
	times 2 dd 0C0C0C0Ch
	times 2 db 5
byte_4D9CE2: db 0
	db 1
	dd 5040302h
	times 2 dd 5050505h
	db 5
byte_4D9CF1: db 6
	dw 606h
	dd 9080706h, 0D0C0B0Ah, 0D0D0D0Dh
byte_4D9D00: db 0Eh
	times 3 db 0Eh
	dd 0E0E0E0Eh, 100F0E0Eh, 131211h
dword_4D9D10: dd 0
	times 7Fh dd 0
dword_4D9F10: dd 0
	times 7Fh dd 0
dword_4DA110: dd 0
dword_4DA114: dd 1000100h
dword_4DA118: dd 0FFFF0000h
dword_4DA11C: dd 0
	dd 0
dword_4DA124: dd 0
flt_4DA128: dd 0.0
	dd 0
	dd 3F800000h, 0FFFAFA32h
	times 2 dd 0
	dd 3F800000h
dword_4DA144: dd 0
flt_4DA148: dd 0.0
	dd 0
	dd 3F800000h, 0FFFAFA32h
	times 3 dd 0
dword_4DA164: dd 0
flt_4DA168: dd 0.0
	dd 0
	dd 3F800000h, 0FF323011h, 1
	times 2 dd 0
dword_4DA184: dd 0
flt_4DA188: dd 0.0
	dd 0
	dd 3F800000h, 0FF323011h, 1, 3F800000h, 0
dword_4DA1A4: dd 0
	dd 1, 2, 3
dword_4DA1B4: dd 0
dword_4DA1B8: dd 0
dword_4DA1BC: dd 0FFFFFFFh
dword_4DA1C0: dd 0
dword_4DA1C4: dd 0
dword_4DA1C8: dd 0
dword_4DA1CC: dd 0
word_4DA1D0: dw 0
	dw 0
dword_4DA1D4: dd 0
dword_4DA1D8: dd 0
dword_4DA1DC: dd 0
dword_4DA1E0: dd 7DBB3D21h, 11D15C35h, 0A00087AFh, 2977D124h
dword_4DA1F0: dd 0F784E080h, 11D0575Dh, 0A000569Eh, 0B32BCE24h
off_4DA200: dd dword_562AD8
	times 2 dd 0
	times 2 dd 1
	dd 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Ch, 0Dh, 0Eh
	dd 10h, 11h, 12h, 14h, 15h, 17h, 18h, 1Ah, 1Ch, 1Dh, 1Fh
	dd 20h, 22h, 24h, 26h, 27h, 29h, 2Bh, 2Dh, 2Fh, 31h, 32h
	dd 34h, 36h, 38h, 3Ah, 3Ch, 3Eh, 40h, 42h, 44h, 47h, 49h
	dd 4Bh, 4Dh, 4Fh, 51h, 53h, 56h, 58h, 5Ah, 5Ch, 5Fh, 61h
	dd 63h, 66h, 68h, 6Ah, 0
	dd 3, 6, 9, 0Ch, 10h, 13h, 16h, 19h, 1Ch, 1Fh, 22h, 25h
	dd 28h, 2Bh, 2Fh, 32h, 35h, 38h, 3Bh, 3Eh, 41h, 44h, 47h
	dd 4Bh, 4Eh, 51h, 54h, 57h, 5Ah, 5Dh, 60h, 63h, 66h, 6Ah
	dd 6Dh, 70h, 73h, 76h, 79h, 7Ch, 7Fh, 82h, 86h, 89h, 8Ch
	dd 8Fh, 92h, 95h, 98h, 9Bh, 9Eh, 0A1h, 0A5h, 0A8h, 0ABh
	dd 0AEh, 0B1h, 0B4h, 0B7h, 0BAh, 0BDh, 0C1h, 0C4h, 0
	times 2 dd 1
	times 2 dd 2
	times 2 dd 3
	times 2 dd 4
	times 2 dd 5
	times 2 dd 6
	times 2 dd 7
	times 2 dd 8
	times 2 dd 9
	times 2 dd 0Ah
	times 2 dd 0Bh
	times 2 dd 0Ch
	times 2 dd 0Dh
	times 2 dd 0Eh
	times 2 dd 0Fh
	times 2 dd 10h
	times 2 dd 11h
	times 2 dd 12h
	times 2 dd 13h
	times 2 dd 14h
	times 2 dd 15h
	times 2 dd 16h
	times 2 dd 17h
	times 2 dd 18h
	times 2 dd 19h
	times 2 dd 1Ah
	times 2 dd 1Bh
	times 2 dd 1Ch
	times 2 dd 1Dh
	times 2 dd 1Eh
	times 2 dd 1Fh
	dd 20h, 0
	dd 1, 3, 5, 7, 0Ah, 0Dh, 10h, 14h, 17h, 1Bh, 1Fh, 22h
	dd 27h, 2Bh, 2Fh, 34h, 38h, 3Dh, 42h, 46h, 4Bh, 51h, 56h
	dd 5Bh, 60h, 66h, 6Bh, 71h, 77h, 7Ch, 82h, 88h, 8Eh, 94h
	dd 9Ah, 0A0h, 0A7h, 0ADh, 0B3h, 0BAh, 0C0h, 0C7h, 0CEh
	dd 0D4h, 0DBh, 0E2h, 0E9h, 0F0h, 0F7h, 0FEh, 105h, 10Ch
	dd 114h, 11Bh, 122h, 12Ah, 131h, 139h, 140h, 148h, 150h
	dd 157h, 15Fh, 0
	dd 0FFFFFFFFh
	times 2 dd 0FFFFFFFEh
	dd 0FFFFFFFDh, 0FFFFFFFCh
	dd 0FFFFFFFBh, 0FFFFFFFAh
	times 2 dd 0FFFFFFF9h
	dd 0FFFFFFF8h
	dd 0FFFFFFF7h, 0FFFFFFF6h, 0FFFFFFF5h
	times 2 dd 0FFFFFFF4h
	dd 0FFFFFFF3h, 0FFFFFFF2h, 0FFFFFFF1h
	times 2 dd 0FFFFFFF0h
	dd 0FFFFFFEFh, 0FFFFFFEEh, 0FFFFFFEDh, 0FFFFFFECh
	times 2 dd 0FFFFFFEBh
	dd 0FFFFFFEAh, 0FFFFFFE9h, 0FFFFFFE8h, 0FFFFFFE7h
	times 2 dd 0FFFFFFE6h
	dd 0FFFFFFE5h, 0FFFFFFE4h, 0FFFFFFE3h, 0FFFFFFE2h
	times 2 dd 0FFFFFFE1h
	dd 0FFFFFFE0h, 0FFFFFFDFh, 0FFFFFFDEh
	times 2 dd 0FFFFFFDDh
	dd 0FFFFFFDCh, 0FFFFFFDBh, 0FFFFFFDAh, 0FFFFFFD9h
	times 2 dd 0FFFFFFD8h
	dd 0FFFFFFD7h, 0FFFFFFD6h, 0FFFFFFD5h, 0FFFFFFD4h
	times 2 dd 0FFFFFFD3h
	dd 0FFFFFFD2h, 0FFFFFFD1h, 0FFFFFFD0h
	times 2 dd 0FFFFFFCFh
	dd 0FFFFFFCEh, 0FFFFFFCDh, 0FFFFFFCCh, 0
	dd 0FFFFFFFEh, 0FFFFFFFCh, 0FFFFFFFAh, 0FFFFFFF8h, 0FFFFFFF6h
	dd 0FFFFFFF4h, 0FFFFFFF2h, 0FFFFFFF0h, 0FFFFFFEFh, 0FFFFFFEDh
	dd 0FFFFFFEBh, 0FFFFFFE9h, 0FFFFFFE7h, 0FFFFFFE5h, 0FFFFFFE3h
	dd 0FFFFFFE1h, 0FFFFFFDFh, 0FFFFFFDDh, 0FFFFFFDBh, 0FFFFFFD9h
	dd 0FFFFFFD7h, 0FFFFFFD5h, 0FFFFFFD3h, 0FFFFFFD1h, 0FFFFFFCFh
	dd 0FFFFFFCEh, 0FFFFFFCCh, 0FFFFFFCAh, 0FFFFFFC8h, 0FFFFFFC6h
	dd 0FFFFFFC4h, 0FFFFFFC2h, 0FFFFFFC0h, 0FFFFFFBEh, 0FFFFFFBCh
	dd 0FFFFFFBAh, 0FFFFFFB8h, 0FFFFFFB6h, 0FFFFFFB4h, 0FFFFFFB2h
	dd 0FFFFFFB0h, 0FFFFFFAFh, 0FFFFFFADh, 0FFFFFFABh, 0FFFFFFA9h
	dd 0FFFFFFA7h, 0FFFFFFA5h, 0FFFFFFA3h, 0FFFFFFA1h, 0FFFFFF9Fh
	dd 0FFFFFF9Dh, 0FFFFFF9Bh, 0FFFFFF99h, 0FFFFFF97h, 0FFFFFF95h
	dd 0FFFFFF93h, 0FFFFFF91h, 0FFFFFF8Fh, 0FFFFFF8Eh, 0FFFFFF8Ch
	dd 0FFFFFF8Ah, 0FFFFFF88h, 0FFFFFF86h
	times 3 dd 0
	times 3 dd 1
	times 3 dd 2
	times 2 dd 3
	times 2 dd 4
	times 2 dd 5
	times 2 dd 6
	times 2 dd 7
	dd 8
	times 2 dd 9
	dd 0Ah
	times 2 dd 0Bh
	dd 0Ch
	times 2 dd 0Dh
	dd 0Eh
	times 2 dd 0Fh
	dd 10h, 11h
	times 2 dd 12h
	dd 13h, 14h
	times 2 dd 15h
	dd 16h, 17h, 18h
	times 2 dd 19h
	dd 1Ah, 1Bh, 1Ch, 1Dh
	times 2 dd 1Eh
	dd 1Fh, 20h, 21h, 22h, 23h, 24h, 25h, 26h, 27h
	times 2 dd 28h
	dd 29h, 2Ah, 2Bh, 0
	dd 0FFFFFFFEh, 0FFFFFFFBh, 0FFFFFFF9h, 0FFFFFFF7h, 0FFFFFFF5h
	dd 0FFFFFFF2h, 0FFFFFFF0h, 0FFFFFFEEh, 0FFFFFFEBh, 0FFFFFFE9h
	dd 0FFFFFFE7h, 0FFFFFFE5h, 0FFFFFFE2h, 0FFFFFFE0h, 0FFFFFFDEh
	dd 0FFFFFFDCh, 0FFFFFFD9h, 0FFFFFFD7h, 0FFFFFFD5h, 0FFFFFFD2h
	dd 0FFFFFFD0h, 0FFFFFFCEh, 0FFFFFFCCh, 0FFFFFFC9h, 0FFFFFFC7h
	dd 0FFFFFFC5h, 0FFFFFFC2h, 0FFFFFFC0h, 0FFFFFFBEh, 0FFFFFFBCh
	dd 0FFFFFFB9h, 0FFFFFFB7h, 0FFFFFFB5h, 0FFFFFFB2h, 0FFFFFFB0h
	dd 0FFFFFFAEh, 0FFFFFFACh, 0FFFFFFA9h, 0FFFFFFA7h, 0FFFFFFA5h
	dd 0FFFFFFA3h, 0FFFFFFA0h, 0FFFFFF9Eh, 0FFFFFF9Ch, 0FFFFFF99h
	dd 0FFFFFF97h, 0FFFFFF95h, 0FFFFFF93h, 0FFFFFF90h, 0FFFFFF8Eh
	dd 0FFFFFF8Ch, 0FFFFFF89h, 0FFFFFF87h, 0FFFFFF85h, 0FFFFFF83h
	dd 0FFFFFF80h, 0FFFFFF7Eh, 0FFFFFF7Ch, 0FFFFFF79h, 0FFFFFF77h
	dd 0FFFFFF75h, 0FFFFFF73h, 0FFFFFF70h, 0
	dd 1, 3, 4, 6, 7, 9, 0Ah, 0Ch, 0Dh, 0Eh, 10h, 11h, 13h
	dd 14h, 16h, 17h, 18h, 1Ah, 1Bh, 1Dh, 1Eh, 20h, 21h, 23h
	dd 24h, 25h, 27h, 28h, 2Ah, 2Bh, 2Dh, 2Eh, 2Fh, 31h, 32h
	dd 34h, 35h, 37h, 38h, 3Ah, 3Bh, 3Ch, 3Eh, 3Fh, 41h, 42h
	dd 44h, 45h, 46h, 48h, 49h, 4Bh, 4Ch, 4Eh, 4Fh, 51h, 52h
	dd 53h, 55h, 56h, 58h, 59h, 5Bh
dword_4DAB04: dd 0
dword_4DAB08: dd 0
dword_4DAB10: dd 0
dword_4DAB14: dd 0
dword_4DAB18: dd 0
	times 3 dd 0 ;?
dword_4DAB38: dd 0
dword_4DAB40: dd 0
	times 5 dd 0
dword_4DAB5C: dd 0
dword_4DAB60: dd 0
dword_4DAB7C: dd 0
dword_4DAB80: dd 0
dword_4DAB84: dd 0
dword_4DAB88: dd 45h
dword_4DAB8C: dd 2
dword_4DAB94: dd 0
dword_4DAB98: dd 0
dword_4DAB9C: dd 140h
dword_4DABA0: dd 0C8h
dword_4DABA4: dd 0
dword_4DABA8: dd 0
dword_4DABAC: dd 0
dword_4DABB0: dd 0
dword_4DABB4: dd 0
dword_4DABB8: dd 0
dword_4DABBC: dd 0
dword_4DABC0: dd 0
	dd 0Ah, 0F0h
dword_4DABCC: dd 64h
	dd 2E9Ch
dword_4DABD4: dd 0
dword_4DABD8: dd 0
dword_4DABDC: dd 0
dword_4DABE0: dd 9C40h
dword_4DABE4: dd 0
dword_4DABE8: dd 0
dword_4DABEC: dd 0
dword_4DABFC: dd 1
dword_4DAC04: dd 0
dword_4DAC08: dd 0
dword_4DAC0C: dd 0A0h
dword_4DAC10: dd 64h
dword_4DAC14: dd 0
dword_4DAC18: dd 0
dword_4DAC1C: dd 0A0h
dword_4DAC20: dd 64h
dword_4DAC24: dd 0
dword_4DAC28: dd 0
dword_4DAC30: dd 0
dword_4DAC34: dd 0
dword_4DAC38: dd 10000h
off_4DAC3C: dd sub_4A1080
off_4DAC40: dd sub_4A1080
off_4DAC44: dd sub_4A1080
off_4DAC48: dd sub_4A1080
off_4DAC4C: dd sub_4A1080
	dd sub_4A1080
	dd sub_4A1080
	dd sub_4A1080
	dd sub_4A1080
dword_4DAC60: dd 0
byte_4DAC64: db 1
	times 3 db 1
	times 3Eh dd 1010101h
	dd 101h
off_4DAD64: dd nullsub_63
	dd sub_48283C
	dd sub_482938
	dd sub_4829E4
	dd sub_482A88
	dd sub_482B2C
dword_4DAD7C: dd 0
	dd 3
dword_4DAD84: dd 7Dh
off_4DAD88: dd nullsub_63
	dd sub_482ED4
	dd sub_482FD4
	dd sub_483070
	dd sub_483100
	dd sub_4831A8
dword_4DADA0: dd 0
	dd 3
dword_4DADA8: dd 7Dh
dword_4DADAC: dd 0
dword_4DADB0: dd 0
off_4DADB4: dd sub_483430
	dd sub_4A14D4
	dd sub_483438
	dd sub_483438
	dd sub_483440
	dd sub_483458
	dd 0, 2, 0
dword_4DB1B0: dd 0
	times 2 dd 0
dword_4DB1C0: dd 0
dword_4DB1C4: dd 0
dword_4DB1D8: dd 0
dword_4DB1DC: dd 0
dword_4DB1E0: dd 0
dword_4DB1E4: dd 0
dword_4DB1E8: dd 0
off_4DB1EC: dd dword_563D80
	dd 0
dword_4DB1F4: dd 0
dword_4DB1F8: dd 0
	dd 0
dword_4DB200: dd 0
dword_4DB204: dd 1
dword_4DB208: dd 0
	dd sub_4A1080 ;?
off_4DB210: dd sub_4A1080
off_4DB214: dd sub_4A1080
	dd sub_4A1080
off_4DB21C: dd sub_485050
	dd bcopy_
	dd sub_485070
	dd sub_485070
	dd sub_485080
	dd sub_48509C
	times 3 dd 0
dword_4DB240: dd 444E4957h
dword_4DB244: dd 280h
dword_4DB248: dd 1E0h
dword_4DB24C: dd 0
dword_4DB250: dd 0
dword_4DB254: dd 280h
dword_4DB258: dd 1E0h
byte_4DB25C: db 8
byte_4DB25D: db 7Bh
byte_4DB25E: db 0
	db 0
dword_4DB260: dd 0A0000h
	dd 0
dword_4DB268: dd 280h
dword_4DB26C: dd 0
dword_4DB270: dd 0
dword_4DB274: dd 0
dword_4DB278: dd 444E4957h, 280h, 1E0h
	times 2 dd 0
	dd 280h, 1E0h
byte_4DB294: db 8
byte_4DB295: db 7Bh
byte_4DB296: db 0
	db 0
	dd 0A0000h, 0
	dd 280h
dword_4DB2A4: dd 0
dword_4DB2A8: dd 0
	dd 0
dword_4DB2B0: dd 444E4957h, 280h, 1E0h
	times 2 dd 0
	dd 280h, 1E0h, 7B08h, 0A0000h, 0
	dd 280h
dword_4DB2DC: dd 0
dword_4DB2E0: dd 0
	dd 0
dword_4DB2E8: dd 1
dword_4DB2EC: dd 1
dword_4DB2F0: dd 0
;	char byte_4DB2F4[]
byte_4DB2F4: db 0
byte_4DB2F5: db 0
	dw 0
	times 6 dd 0
	db 0
byte_4DB311: db 0
	dw 0
	times 2 db 0
byte_4DB316: db 0
	db 0
	dd 0
	times 2 db 0
byte_4DB31E: db 0
	db 0
	times 2 db 0
byte_4DB322: db 0
	db 0
byte_4DB324: db 0, 0
	dw 0
	times 2 db 0
byte_4DB32A: db 0
byte_4DB32B: db 0
	times 48 db 0
byte_4DB374: db 0, 1Bh, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h
	db 30h, 2Dh, 3Dh, 8, 9, 71h, 77h, 65h, 72h, 74h, 79h, 75h
	db 69h, 6Fh, 70h, 5Bh, 5Dh, 0Dh, 0, 61h, 73h, 64h, 66h
	db 67h, 68h, 6Ah, 6Bh, 6Ch, 3Bh, 27h, 60h, 0, 5Ch, 7Ah
	db 78h, 63h, 76h, 62h, 6Eh, 6Dh, 2Ch, 2Eh, 2Fh, 0, 2Ah
	db 0, 20h, 0, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
	db 0C2h, 0C3h, 0C4h
	times 2 db 0
	db 0C7h, 0C8h, 0C9h, 2Dh, 0CBh
	db 0CCh, 0CDh, 2Bh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
	times 3 db 0
	db 87h, 88h
	times 2 db 0
byte_4DB3CF: db 0, 1Bh, 21h, 40h, 23h, 24h, 25h, 5Eh, 26h, 2Ah, 28h
	db 29h, 5Fh, 2Bh, 8, 8Fh, 51h, 57h, 45h, 52h, 54h, 59h
	db 55h, 49h, 4Fh, 50h, 7Bh, 7Dh, 0Dh, 0, 41h, 53h, 44h
	db 46h, 47h, 48h, 4Ah, 4Bh, 4Ch, 3Ah, 22h, 7Eh, 0, 7Ch
	db 5Ah, 58h, 43h, 56h, 42h, 4Eh, 4Dh, 3Ch, 3Eh, 3Fh
	times 3 db 0
	db 20h, 0, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh
	db 0DCh, 0DDh
	times 2 db 0
	db 0C7h, 0C8h, 0C9h, 2Dh, 0CBh, 0CCh
	db 0CDh, 2Bh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
	times 3 db 0
	db 89h
	db 8Ah
	times 2 db 0
byte_4DB42A: db 0, 1Bh, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h
	db 30h, 2Dh, 3Dh, 8, 8Fh, 51h, 57h, 45h, 52h, 54h, 59h
	db 55h, 49h, 4Fh, 50h, 5Bh, 5Dh, 0Dh, 0, 41h, 53h, 44h
	db 46h, 47h, 48h, 4Ah, 4Bh, 4Ch, 3Bh, 27h, 60h, 0, 5Ch
	db 5Ah, 58h, 43h, 56h, 42h, 4Eh, 4Dh, 2Ch, 2Eh, 2Fh
	times 3 db 0
	db 20h, 0, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh
	db 0DCh, 0DDh
	times 2 db 0
	db 0C7h, 0C8h, 0C9h, 2Dh, 0CBh, 0CCh
	db 0CDh, 2Bh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
	times 3 db 0
	db 89h
	db 8Ah
	times 2 db 0
byte_4DB485: db 0, 1Bh, 21h, 0, 23h, 24h, 25h, 1Eh, 26h, 2Ah, 28h, 29h
	db 1Fh, 0B3h, 7Fh, 9, 11h, 17h, 5, 12h, 14h, 19h, 15h
	db 9, 0Fh, 10h, 1Bh, 1Dh, 0Dh, 0, 1, 13h, 4, 6, 7, 8, 0Ah
	db 0Bh, 0Ch, 3Bh, 2Ch, 60h, 0, 1Ch, 1Ah, 18h, 3, 16h, 2
	db 0Eh, 0B2h, 3Ch, 3Eh, 3Fh
	times 3 db 0
	db 20h, 0, 0DEh, 0DFh
	db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
	times 2 db 0
	db 0C7h, 0C8h, 0C9h, 2Dh, 0CBh, 0CCh, 0CDh, 2Bh, 0CFh
	db 0D0h, 0D1h, 0D2h, 0D3h
	times 3 db 0
	db 8Bh, 8Ch
	times 2 db 0
dword_4DB540: dd 0
dword_4DB544: dd 0
	dd 0
off_4DB54C: dd sub_486B40
	dd sub_486BB0
	dd sub_486BC8
	dd sub_486BC8
	dd sub_486BEC
	dd sub_486C38
dword_4DB564: dd 0
	dd 0
dword_4DB56C: dd 0
off_4DB570: dd sub_486E44
byte_4DB574: db 0, 0
	dw 0
	times 1Fh dd 0
dword_4DB5F4: dd 0
dword_4DB5F8: dd 0
dword_4DB5FC: dd 0
dword_4DB600: dd 0
byte_4DB604: db 0
	times 0Bh db 0
byte_4DB610: db 0
	times 3 db 0
dword_4DB614: dd 0
dword_4DB618: dd 0
dword_4DB61C: dd 0
	dq 0.0 ;?
off_4DB628: dd a_fsh
dword_4DB62C: dd 0F22D0E56h
dword_4DB630: dd 883126E9h
dword_4DB634: dd 0C624DD2Fh
dword_4DB638: dd 702C49Ch
dword_4DB63C: dd 9E353F7Dh
dword_4DB640: dd 6FDF3B64h
;	HANDLE hFindFile
hFindFile: dd 0FFFFFFFFh
off_4DB648: dd sub_4885B0
	dd sub_4885C4
	dd sub_4885D4
	dd sub_4885D4
	dd sub_4885E8
	dd sub_48860C
	times 3 dd 0
byte_4DB66C: db 0
byte_4DB66D: db 0
byte_4DB66E: db 0
byte_4DB66F: db 0
dword_4DB670: dd 0
dword_4DB674: dd 0
dword_4DB678: dd 0
dword_4DB67C: dd 0
dword_4DB6A0: dd 0
dword_4DB6A4: dd 20h
dword_4DB6A8: dd 0
	dd 0, 0
dword_4DB6B4: dd 0
	dd 192h, 324h, 4B6h, 648h, 7DAh, 96Ch, 0AFEh, 0C8Fh, 0E21h
	dd 0FB2h, 1144h, 12D5h, 1466h, 15F6h, 1787h, 1917h, 1AA7h
	dd 1C37h, 1DC7h, 1F56h, 20E5h, 2273h, 2402h, 2590h, 271Dh
	dd 28AAh, 2A37h, 2BC4h, 2D50h, 2EDBh, 3066h, 31F1h, 337Bh
	dd 3505h, 368Eh, 3817h, 399Fh, 3B26h, 3CADh, 3E33h, 3FB9h
	dd 413Eh, 42C3h, 4447h, 45CAh, 474Dh, 48CEh, 4A50h, 4BD0h
	dd 4D50h, 4ECFh, 504Dh, 51CAh, 5347h, 54C3h, 563Eh, 57B8h
	dd 5931h, 5AAAh, 5C22h, 5D98h, 5F0Eh, 6083h, 61F7h, 636Ah
	dd 64DCh, 664Dh, 67BDh, 692Dh, 6A9Bh, 6C08h, 6D74h, 6EDFh
	dd 7049h, 71B1h, 7319h, 7480h, 75E5h, 774Ah, 78ADh, 7A0Fh
	dd 7B70h, 7CD0h, 7E2Eh, 7F8Bh, 80E7h, 8242h, 839Ch, 84F4h
	dd 864Bh, 87A1h, 88F5h, 8A48h, 8B9Ah, 8CEAh, 8E39h, 8F87h
	dd 90D3h, 921Eh, 9368h, 94B0h, 95F6h, 973Ch, 987Fh, 99C1h
	dd 9B02h, 9C42h, 9D7Fh, 9EBCh, 9FF6h, 0A12Fh, 0A267h, 0A39Dh
	dd 0A4D2h, 0A605h, 0A736h, 0A866h, 0A994h, 0AAC0h, 0ABEBh
	dd 0AD14h, 0AE3Bh, 0AF61h, 0B085h, 0B1A8h, 0B2C8h, 0B3E7h
	dd 0B504h, 0B620h, 0B73Ah, 0B852h, 0B968h, 0BA7Ch, 0BB8Fh
	dd 0BCA0h, 0BDAEh, 0BEBCh, 0BFC7h, 0C0D0h, 0C1D8h, 0C2DEh
	dd 0C3E1h, 0C4E3h, 0C5E3h, 0C6E2h, 0C7DEh, 0C8D8h, 0C9D1h
	dd 0CAC7h, 0CBBBh, 0CCAEh, 0CD9Fh, 0CE8Dh, 0CF7Ah, 0D064h
	dd 0D14Dh, 0D233h, 0D318h, 0D3FAh, 0D4DBh, 0D5B9h, 0D695h
	dd 0D770h, 0D848h, 0D91Eh, 0D9F2h, 0DAC4h, 0DB94h, 0DC61h
	dd 0DD2Dh, 0DDF6h, 0DEBEh, 0DF83h, 0E046h, 0E106h, 0E1C5h
	dd 0E282h, 0E33Ch, 0E3F4h, 0E4AAh, 0E55Eh, 0E60Fh, 0E6BEh
	dd 0E76Bh, 0E816h, 0E8BFh, 0E965h, 0EA09h, 0EAABh, 0EB4Bh
	dd 0EBE8h, 0EC83h, 0ED1Ch, 0EDB2h, 0EE46h, 0EED8h, 0EF68h
	dd 0EFF5h, 0F080h, 0F109h, 0F18Fh, 0F213h, 0F294h, 0F314h
	dd 0F391h, 0F40Bh, 0F484h, 0F4FAh, 0F56Dh, 0F5DEh, 0F64Dh
	dd 0F6BAh, 0F724h, 0F78Bh, 0F7F1h, 0F853h, 0F8B4h, 0F912h
	dd 0F96Eh, 0F9C7h, 0FA1Eh, 0FA72h, 0FAC5h, 0FB14h, 0FB61h
	dd 0FBACh, 0FBF5h, 0FC3Bh, 0FC7Eh, 0FCBFh, 0FCFEh, 0FD3Ah
	dd 0FD74h, 0FDABh, 0FDE0h, 0FE13h, 0FE43h, 0FE70h, 0FE9Bh
	dd 0FEC4h, 0FEEAh, 0FF0Eh, 0FF2Fh, 0FF4Eh, 0FF6Ah, 0FF84h
	dd 0FF9Ch, 0FFB1h, 0FFC3h, 0FFD3h, 0FFE1h, 0FFECh, 0FFF4h
	dd 0FFFBh, 0FFFEh, 10000h
dword_4DBAB8: dd 0
dword_4DBABC: dd 190h
dword_4DBAC0: dd 0
dword_4DBAC4: dd 0
	dd 0
dword_4DBACC: dd 1C2h
dword_4DBAD0: dd 64h
dword_4DBAD4: dd 0
dword_4DBAD8: dd 0
dword_4DBADC: dd 0
dword_4DBAE0: dd 0
dword_4DBAE4: dd 0
dword_4DBAE8: dd 0
dword_4DBAEC: dd 0
byte_4DBAF0: db 3Ah
	times 3 db 0
dword_4DBAF4: dd 1
dword_4DBAF8: dd 0
dword_4DBAFC: dd 0
dword_4DBB00: times 2 dd 0
	dd sub_48D188
	dd sub_48D21C
	dd sub_48D2AC
	dd sub_48D380
	dd sub_48D474
	dd sub_48D514
	dd sub_48D658
	dd sub_48D680
	dd sub_48D6D4
	dd sub_48D78C
	dd sub_48D8B0
	dd sub_48DB90
	dd sub_48DC0C
off_4DBB3C: dd sub_48DC84
	dd sub_48DD00
	dd sub_48DD7C
	dd sub_48DDC4
	dd sub_48DDE0
	dd sub_48DDF0
	dd sub_48DEF4
word_4DBB58: dw 102h
	dw 1B0h
off_4DBB5C: dd aEac_ea_com
dword_4DBB60: dd 3E80h
dword_4DBB64: dd 0
dword_4DBB68: dd 0
dword_4DBB6C: dd 1
	dd sub_48E2C0
	dd sub_48E2C8
	dd sub_48E350
	dd sub_48E394
	dd sub_48E438
	dd sub_48E50C
	dd sub_48E5A0
	dd sub_48E6D0
	dd sub_48E75C
	dd sub_48E7F0
	dd sub_48E844
	dd sub_48E8B4
	dd sub_48EB44
	dd sub_48EBB8
dword_4DBBA8: dd 0
word_4DBBAC: dw 0
	dw 0C0C1h
	dd 140C181h, 3C0C301h, 0C2410280h, 6C0C601h, 0C7410780h
	dd 0C5C10500h, 440C481h, 0CC0CC01h, 0CD410D80h, 0CFC10F00h
	dd 0E40CE81h, 0CAC10A00h, 0B40CB81h, 9C0C901h, 0C8410880h
	dd 18C0D801h, 0D9411980h, 0DBC11B00h, 1A40DA81h, 0DEC11E00h
	dd 1F40DF81h, 1DC0DD01h, 0DC411C80h, 0D4C11400h, 1540D581h
	dd 17C0D701h, 0D6411680h, 12C0D201h, 0D3411380h, 0D1C11100h
	dd 1040D081h, 30C0F001h, 0F1413180h, 0F3C13300h, 3240F281h
	dd 0F6C13600h, 3740F781h, 35C0F501h, 0F4413480h, 0FCC13C00h
	dd 3D40FD81h, 3FC0FF01h, 0FE413E80h, 3AC0FA01h, 0FB413B80h
	dd 0F9C13900h, 3840F881h, 0E8C12800h, 2940E981h, 2BC0EB01h
	dd 0EA412A80h, 2EC0EE01h, 0EF412F80h, 0EDC12D00h, 2C40EC81h
	dd 24C0E401h, 0E5412580h, 0E7C12700h, 2640E681h, 0E2C12200h
	dd 2340E381h, 21C0E101h, 0E0412080h, 60C0A001h, 0A1416180h
	dd 0A3C16300h, 6240A281h, 0A6C16600h, 6740A781h, 65C0A501h
	dd 0A4416480h, 0ACC16C00h, 6D40AD81h, 6FC0AF01h, 0AE416E80h
	dd 6AC0AA01h, 0AB416B80h, 0A9C16900h, 6840A881h, 0B8C17800h
	dd 7940B981h, 7BC0BB01h, 0BA417A80h, 7EC0BE01h, 0BF417F80h
	dd 0BDC17D00h, 7C40BC81h, 74C0B401h, 0B5417580h, 0B7C17700h
	dd 7640B681h, 0B2C17200h, 7340B381h, 71C0B101h, 0B0417080h
	dd 90C15000h, 51409181h, 53C09301h, 92415280h, 56C09601h
	dd 97415780h, 95C15500h, 54409481h, 5CC09C01h, 9D415D80h
	dd 9FC15F00h, 5E409E81h, 9AC15A00h, 5B409B81h, 59C09901h
	dd 98415880h, 48C08801h, 89414980h, 8BC14B00h, 4A408A81h
	dd 8EC14E00h, 4F408F81h, 4DC08D01h, 8C414C80h, 84C14400h
	dd 45408581h, 47C08701h, 86414680h, 42C08201h, 83414380h
	dd 81C14100h, 40408081h
dword_4DBDAC: dd 0
dword_4DBDB0: dd 2
	dd 0
dword_4DBDB8: dd 0B0000h
dword_4DBDBC: dd 780h
byte_4DBDC0: db 0
byte_4DBDC1: db 7
byte_4DBDC2: db 8
	dd 0
dword_4DBDC8: dd 0
off_4DBDCC: dd aAte1
off_4DBDD0: dd aOk
	dd a_0_ ; "_0_"
off_4DBDD8: dd a0_0
	dd aConnect ; "CONNECT"
	dd a_1_ ; "_1_"
	dd a1_0 ; "1"
	dd aRing ; "RING"
	dd a_2_ ; "_2_"
	dd a2_0 ; "2"
	dd aNoCarrier ; "NO CARRIER"
	dd a_3_ ; "_3_"
	dd a3 ; "3"
	dd aError ; "ERROR"
	dd a_4_ ; "_4_"
	dd a4 ; "4"
	dd aConnect1200 ; "CONNECT 1200"
	dd a_5_ ; "_5_"
	dd a5 ; "5"
	dd aNoDialtone ; "NO DIALTONE"
	dd a_6_ ; "_6_"
	dd a6 ; "6"
	dd aNoDialTone2 ; "NO DIAL TONE"
	dd a_6_ ; "_6_"
	dd a6 ; "6"
	dd aBusy_0 ; "BUSY"
	dd a_7_ ; "_7_"
	dd a7 ; "7"
	dd aNoAnswer ; "NO ANSWER"
	dd a_8_ ; "_8_"
	dd a8 ; "8"
	dd aConnect2400 ; "CONNECT 2400"
	dd a_10_ ; "_10_"
	dd a10 ; "10"
	dd aConnect9600 ; "CONNECT 9600"
	dd a_13_ ; "_13_"
	dd a13 ; "13"
	dd aConnect9600Arq ; "CONNECT 9600/ARQ"
	dd a_17_ ; "_17_"
	dd a17 ; "17"
	dd aConnect9600Hst ; "CONNECT 9600/HST"
	dd a_23_ ; "_23_"
	dd a23 ; "23"
	dd aConnect9600A_0 ; "CONNECT 9600/ARQ/HST"
	dd a_27_ ; "_27_"
	dd a27 ; "27"
	dd aConnect14400 ; "CONNECT 14400"
	dd a_25_ ; "_25_"
	dd a25 ; "25"
	dd aConnect14400Ar ; "CONNECT 14400/ARQ"
	dd a_26_ ; "_26_"
	dd a26 ; "26"
	dd aConnect14400Hs ; "CONNECT 14400/HST"
	dd a_35_ ; "_35_"
	dd a35 ; "35"
	dd aConnect14400_0 ; "CONNECT 14400/ARQ/HST"
	dd a_36_ ; "_36_"
	dd a36 ; "36"
	dd aConnect28800 ; "CONNECT 28800"
	dd a_107_ ; "_107_"
	dd a107 ; "107"
dword_4DBEC0: dd 0
dword_4DBEC4: dd 0
dword_4DBEC8: dd 14h
dword_4DBECC: dd 0
dword_4DBED0: dd 0
dword_4DBED4: dd 0
dword_4DBED8: dd 0
dword_4DBEDC: dd 12Ch
	dd 258h, 4B0h, 708h, 7D0h, 960h, 0E10h, 12C0h, 1C20h, 2580h
	dd 3840h, 4B00h, 7080h, 0E100h, 1C200h, 38400h, 0
dword_4DBF28: dd 0
dword_4DBF2C: dd 0
dword_4DBF30: dd 1
dword_4DBF34: dd 0
word_4DBF38: dw 2
	dw 0
word_4DBF3C: dw 0FE00h
	dw 0
	dd 1
dword_4DBF44: dd 8000h
	dd 3
	times 2 dd 1
	dd 0C000h, 3, 3FFh, 0
	dd 0E000h, 4, 401h, 1, 6000h, 4, 7FFh, 0
	dd 7000h, 5, 2, 1, 4000h, 5, 3FEh, 0
	dd 4800h, 5, 801h, 0
	dd 5000h, 5, 0BFFh, 0
	dd 5800h, 6, 3, 1, 2800h, 6, 3FDh, 0
	dd 2C00h, 6, 0C01h, 0
	dd 3800h, 6, 0FFFh, 0
	dd 3C00h, 6, 1001h, 0
	dd 3000h, 6, 13FFh, 0
	dd 3400h, 7, 402h, 1, 1800h, 7, 7FEh, 0
	dd 1A00h, 7, 1401h, 0
	dd 1C00h, 7, 17FFh, 0
	dd 1E00h, 7, 1801h, 0
	dd 1400h, 7, 1BFFh, 0
	dd 1600h, 7, 1C01h, 0
	dd 1000h, 7, 1FFFh, 0
	dd 1200h, 6, 7C1Fh, 1, 400h, 8, 4, 1, 0C00h, 8, 3FCh, 0
	dd 0D00h, 8, 802h, 0
	dd 800h, 8, 0BFEh, 0
	dd 900h, 8, 2001h, 0
	dd 0E00h, 8, 23FFh, 0
	dd 0F00h, 8, 2401h, 0
	dd 0A00h, 8, 27FFh, 0
	dd 0B00h, 9, 5, 1, 2600h, 9, 3FBh, 0
	dd 2680h, 9, 6, 0
	dd 2100h, 9, 3FAh, 0
	dd 2180h, 9, 403h, 0
	dd 2500h, 9, 7FDh, 0
	dd 2580h, 9, 0C02h, 0
	dd 2400h, 9, 0FFEh, 0
	dd 2480h, 9, 2801h, 0
	dd 2700h, 9, 2BFFh, 0
	dd 2780h, 9, 2C01h, 0
	dd 2300h, 9, 2FFFh, 0
	dd 2380h, 9, 3001h, 0
	dd 2200h, 9, 33FFh, 0
	dd 2280h, 9, 3401h, 0
	dd 2000h, 9, 37FFh, 0
	dd 2080h, 0Bh, 7, 1, 280h, 0Bh, 3F9h, 0
	dd 2A0h, 0Bh, 404h, 0
	dd 300h, 0Bh, 7FCh, 0
	dd 320h, 0Bh, 803h, 0
	dd 2C0h, 0Bh, 0BFDh, 0
	dd 2E0h, 0Bh, 1002h, 0
	dd 3C0h, 0Bh, 13FEh, 0
	dd 3E0h, 0Bh, 1402h, 0
	dd 240h, 0Bh, 17FEh, 0
	dd 260h, 0Bh, 3801h, 0
	dd 380h, 0Bh, 3BFFh, 0
	dd 3A0h, 0Bh, 3C01h, 0
	dd 340h, 0Bh, 3FFFh, 0
	dd 360h, 0Bh, 4001h, 0
	dd 200h, 0Bh, 43FFh, 0
	dd 220h, 0Dh, 8, 1, 1D0h, 0Dh, 3F8h, 0
	dd 1D8h, 0Dh, 9, 0
	dd 180h, 0Dh, 3F7h, 0
	dd 188h, 0Dh, 0Ah, 0
	dd 130h, 0Dh, 3F6h, 0
	dd 138h, 0Dh, 0Bh, 0
	dd 100h, 0Dh, 3F5h, 0
	dd 108h, 0Dh, 405h, 0
	dd 1B0h, 0Dh, 7FBh, 0
	dd 1B8h, 0Dh, 804h, 0
	dd 140h, 0Dh, 0BFCh, 0
	dd 148h, 0Dh, 0C03h, 0
	dd 1C0h, 0Dh, 0FFDh, 0
	dd 1C8h, 0Dh, 1003h, 0
	dd 120h, 0Dh, 13FDh, 0
	dd 128h, 0Dh, 1802h, 0
	dd 1E0h, 0Dh, 1BFEh, 0
	dd 1E8h, 0Dh, 1C02h, 0
	dd 150h, 0Dh, 1FFEh, 0
	dd 158h, 0Dh, 2002h, 0
	dd 110h, 0Dh, 23FEh, 0
	dd 118h, 0Dh, 4401h, 0
	dd 1F0h, 0Dh, 47FFh, 0
	dd 1F8h, 0Dh, 4801h, 0
	dd 1A0h, 0Dh, 4BFFh, 0
	dd 1A8h, 0Dh, 4C01h, 0
	dd 190h, 0Dh, 4FFFh, 0
	dd 198h, 0Dh, 5001h, 0
	dd 170h, 0Dh, 53FFh, 0
	dd 178h, 0Dh, 5401h, 0
	dd 160h, 0Dh, 57FFh, 0
	dd 168h
word_4DC538: dw 6
	dw 0
word_4DC53C: dw 0Ch
	dw 0
	dd 1
dword_4DC544: dd 0D000h
	dd 6, 3F4h, 0
	dd 0D400h, 6, 0Dh, 0
	dd 0C800h, 6, 3F3h, 0
	dd 0CC00h, 6, 0Eh, 0
	dd 0C000h, 6, 3F2h, 0
	dd 0C400h, 6, 0Fh, 0
	dd 0B800h, 6, 3F1h, 0
	dd 0BC00h, 6, 406h, 0
	dd 0B000h, 6, 7FAh, 0
	dd 0B400h, 6, 407h, 0
	dd 0A800h, 6, 7F9h, 0
	dd 0AC00h, 6, 805h, 0
	dd 0A000h, 6, 0BFBh, 0
	dd 0A400h, 6, 0C04h, 0
	dd 9800h, 6, 0FFCh, 0
	dd 9C00h, 6, 1403h, 0
	dd 9000h, 6, 17FDh, 0
	dd 9400h, 6, 2402h, 0
	dd 8800h, 6, 27FEh, 0
	dd 8C00h, 6, 2802h, 0
	dd 8000h, 6, 2BFEh, 0
	dd 8400h, 6, 5801h, 0
	dd 0F800h, 6, 5BFFh, 0
	dd 0FC00h, 6, 5C01h, 0
	dd 0F000h, 6, 5FFFh, 0
	dd 0F400h, 6, 6001h, 0
	dd 0E800h, 6, 63FFh, 0
	dd 0EC00h, 6, 6401h, 0
	dd 0E000h, 6, 67FFh, 0
	dd 0E400h, 6, 6801h, 0
	dd 0D800h, 6, 6BFFh, 0
	dd 0DC00h, 7, 10h, 1, 7C00h, 7, 3F0h, 0
	dd 7E00h, 7, 11h, 0
	dd 7800h, 7, 3EFh, 0
	dd 7A00h, 7, 12h, 0
	dd 7400h, 7, 3EEh, 0
	dd 7600h, 7, 13h, 0
	dd 7000h, 7, 3EDh, 0
	dd 7200h, 7, 14h, 0
	dd 6C00h, 7, 3ECh, 0
	dd 6E00h, 7, 15h, 0
	dd 6800h, 7, 3EBh, 0
	dd 6A00h, 7, 16h, 0
	dd 6400h, 7, 3EAh, 0
	dd 6600h, 7, 17h, 0
	dd 6000h, 7, 3E9h, 0
	dd 6200h, 7, 18h, 0
	dd 5C00h, 7, 3E8h, 0
	dd 5E00h, 7, 19h, 0
	dd 5800h, 7, 3E7h, 0
	dd 5A00h, 7, 1Ah, 0
	dd 5400h, 7, 3E6h, 0
	dd 5600h, 7, 1Bh, 0
	dd 5000h, 7, 3E5h, 0
	dd 5200h, 7, 1Ch, 0
	dd 4C00h, 7, 3E4h, 0
	dd 4E00h, 7, 1Dh, 0
	dd 4800h, 7, 3E3h, 0
	dd 4A00h, 7, 1Eh, 0
	dd 4400h, 7, 3E2h, 0
	dd 4600h, 7, 1Fh, 0
	dd 4000h, 7, 3E1h, 0
	dd 4200h, 8, 20h, 1, 3000h, 8, 3E0h, 0
	dd 3100h, 8, 21h, 0
	dd 2E00h, 8, 3DFh, 0
	dd 2F00h, 8, 22h, 0
	dd 2C00h, 8, 3DEh, 0
	dd 2D00h, 8, 23h, 0
	dd 2A00h, 8, 3DDh, 0
	dd 2B00h, 8, 24h, 0
	dd 2800h, 8, 3DCh, 0
	dd 2900h, 8, 25h, 0
	dd 2600h, 8, 3DBh, 0
	dd 2700h, 8, 26h, 0
	dd 2400h, 8, 3DAh, 0
	dd 2500h, 8, 27h, 0
	dd 2200h, 8, 3D9h, 0
	dd 2300h, 8, 28h, 0
	dd 2000h, 8, 3D8h, 0
	dd 2100h, 8, 408h, 0
	dd 3E00h, 8, 7F8h, 0
	dd 3F00h, 8, 409h, 0
	dd 3C00h, 8, 7F7h, 0
	dd 3D00h, 8, 40Ah, 0
	dd 3A00h, 8, 7F6h, 0
	dd 3B00h, 8, 40Bh, 0
	dd 3800h, 8, 7F5h, 0
	dd 3900h, 8, 40Ch, 0
	dd 3600h, 8, 7F4h, 0
	dd 3700h, 8, 40Dh, 0
	dd 3400h, 8, 7F3h, 0
	dd 3500h, 8, 40Eh, 0
	dd 3200h, 8, 7F2h, 0
	dd 3300h, 9, 40Fh, 1, 1300h, 9, 7F1h, 0
	dd 1380h, 9, 410h, 0
	dd 1200h, 9, 7F0h, 0
	dd 1280h, 9, 411h, 0
	dd 1100h, 9, 7EFh, 0
	dd 1180h, 9, 412h, 0
	dd 1000h, 9, 7EEh, 0
	dd 1080h, 9, 1803h, 0
	dd 1400h, 9, 1BFDh, 0
	dd 1480h, 9, 2C02h, 0
	dd 1A00h, 9, 2FFEh, 0
	dd 1A80h, 9, 3002h, 0
	dd 1900h, 9, 33FEh, 0
	dd 1980h, 9, 3402h, 0
	dd 1800h, 9, 37FEh, 0
	dd 1880h, 9, 3802h, 0
	dd 1700h, 9, 3BFEh, 0
	dd 1780h, 9, 3C02h, 0
	dd 1600h, 9, 3FFEh, 0
	dd 1680h, 9, 4002h, 0
	dd 1500h, 9, 43FEh, 0
	dd 1580h, 9, 6C01h, 0
	dd 1F00h, 9, 6FFFh, 0
	dd 1F80h, 9, 7001h, 0
	dd 1E00h, 9, 73FFh, 0
	dd 1E80h, 9, 7401h, 0
	dd 1D00h, 9, 77FFh, 0
	dd 1D80h, 9, 7801h, 0
	dd 1C00h, 9, 7BFFh, 0
	dd 1C80h, 9, 7C01h, 0
	dd 1B00h, 9, 7FFFh, 0
	dd 1B80h
dword_4DCD38: dd 10h
	dd 10h, 13h, 16h, 1Ah, 1Bh, 1Dh, 22h
	times 2 dd 10h
	dd 16h
	dd 18h, 1Bh, 1Dh, 22h, 25h, 13h, 16h, 1Ah, 1Bh, 1Dh
	times 2 dd 22h
	dd 26h
	times 2 dd 16h
	dd 1Ah, 1Bh, 1Dh, 22h, 25h, 28h, 16h
	dd 1Ah, 1Bh, 1Dh, 20h, 23h, 28h, 30h, 1Ah, 1Bh, 1Dh, 20h
	dd 23h, 28h, 30h, 3Ah, 1Ah, 1Bh, 1Dh, 22h, 26h, 2Eh, 38h
	dd 45h, 1Bh, 1Dh, 23h, 26h, 2Eh, 38h, 45h, 53h
dword_4DCE38: dd 8
dword_4DCE3C: dd 0DAh
dword_4DCE40: dd 12Ch
	times 2 dd 0
dword_4DCE4C: dd 0
dword_4DCE50: dd 0
dword_4DCE54: dd 0
dword_4DCE58: dd 0
dword_4DCE5C: dd 0
dword_4DCE60: dd 0
dword_4DCE64: dd 0
dword_4DCE68: dd 0
dword_4DCE6C: dd 0
dword_4DCE70: dd 0
dword_4DCE74: dd 0
dword_4DCE78: dd 0
dword_4DCE7C: times 17h dd 0
byte_4DCED8: db 0
byte_4DCED9: db 0
byte_4DCEDA: db 0
byte_4DCEDB: db 0
byte_4DCEDC: db 0
byte_4DCEDD: db 0
byte_4DCEDE: db 0
byte_4DCEDF: db 0
byte_4DCEE0: db 0
byte_4DCEE1: db 0
word_4DCEE2: dw 0
byte_4DCEE4: db 0
byte_4DCEE5: db 0
byte_4DCEE6: db 0
byte_4DCEE7: db 0
byte_4DCEE8: db 0
byte_4DCEE9: db 0
byte_4DCEEA: db 0
byte_4DCEEB: db 0
dword_4DCEEC: dd 0
dword_4DCEF0: dd 0
dword_4DCEF4: dd 0
dword_4DCEF8: dd 0
	times 13h dd 0
dword_4DCF48: dd 0
dword_4DCF4C: times 2 dd 0
dword_4DCF54: times 2 dd 0
byte_4DCF5C: db 0, 0
	dw 0
	times 1Eh dd 0
	times 3 db 0
byte_4DCFDB: db 0
dword_4DCFDC: dd 0
dword_4DCFE0: dd 0
dword_4DCFE4: dd 0
dword_4DCFE8: dd 0
dword_4DCFEC: dd 0FFFFh
dword_4DCFF0: dd 0
dword_4DCFF4: dd 1
dword_4DCFF8: dd 0
byte_4DD000: db 0
	db 7, 8, 0
	dd 4030201h, 0A090605h
	db 0Bh
byte_4DD00D: db 8
	dw 607h
	dd 2030405h, 5060001h
	db 4
byte_4DD019: db 3
	dw 102h
	db 0
byte_4DD01D: db 0
	dw 500h
	dd 0A0Bh, 0E040Ch
dword_4DD028: dd 0
flt_4DD02C: dd 255.0
flt_4DD030: dd 65536.0
flt_4DD034: dd 786432.0
	dd 0
dword_4DD03C: dd 0
	dd 1
off_4DD044: dd dword_570E60
off_4DD048: dd sub_499540
	dd sub_4995A4
	dd sub_4A6C05
	dd sub_4A6C05
	dd sub_4995A4
	dd sub_4995A4
	dd sub_4995A4
	dd sub_4A6C05
	dd sub_49954C
	dd sub_48A980
	dd sub_4A6AA0
	dd sub_4A6AA0
	dd sub_499900
	dd sub_4A6A7E
	dd sub_4A6A7E
	dd sub_4A6AA0
	dd sub_4A6A03
	dd sub_4A6A03
	dd sub_499770
	dd sub_4A6A03
	dd sub_4A6A03
	dd sub_499A18
	dd sub_499A18
	dd sub_4A6B94
	dd sub_4995EC
	dd sub_4995EC
	dd sub_4A6988
	dd sub_499770
	dd sub_499948
	dd sub_499A88
	dd sub_499A88
	dd sub_4A6988
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_4999B0
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499798
	dd sub_499798
	dd sub_4996BC
	dd sub_499798
	dd sub_4999C8
	dd sub_499C48
	dd sub_499844
	dd sub_4996BC
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499770
	dd sub_499B00
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_499770
off_4DD148: dd sub_499540
	dd sub_4995A4
	dd sub_4A6C05
	dd sub_4A6C05
	dd sub_4995A4
	dd sub_4995A4
	dd sub_4995A4
	dd sub_4A6C05
	dd sub_49954C
	dd sub_48A980
	dd sub_4A6AA0
	dd sub_4A6AA0
	dd sub_499900
	dd sub_4A6A7E
	dd sub_4A6A7E
	dd sub_4A6AA0
	dd sub_4A6A03
	dd sub_4A6A03
	dd sub_499770
	dd sub_4A6A03
	dd sub_4A6A03
	dd sub_499A18
	dd sub_499A18
	dd sub_4A6B94
	dd sub_4995EC
	dd sub_4995EC
	dd sub_4A6988
	dd sub_499770
	dd sub_499948
	dd sub_499A88
	dd sub_499A88
	dd sub_4A6988
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_4999B0
	dd sub_499BFC
	dd sub_499BFC
	dd sub_499BFC
	dd sub_4997F8
	dd sub_4997F8
	dd sub_49971C
	dd sub_4997F8
	dd sub_4999C8
	dd sub_499C48
	dd sub_499844
	dd sub_49971C
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499B00
	dd sub_499770
	dd sub_499B00
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_4A6B94
	dd sub_499770
byte_4DD248: db 7Ah
	db 7Bh, 7Eh, 78h
	dd 7E7B7B7Bh, 787E7B7Ah, 7E7D7D7Fh, 787E7878h, 427D7D78h
	dd 787E7B7Bh, 7E7D7D7Fh, 7D7D7D7Dh, 7D7D7D7Fh, 787E7878h
	dd 7E6D7D7Fh, 7D7D7D7Dh, 7D6D7D7Dh, 7E7E7E7Eh, 427E7E7Eh
dword_4DD288: dd 0
dword_4DD28C: dd 0
dword_4DD310: dd 3800h
dword_4DD314: dd 0
dword_4DD394: dd 0
dword_4DD3A8: dd 0
dword_4DD3AC: dd 0
dword_4DD3B0: dd 1
word_4DD3B4: dw 0
word_4DD3B6: dw 0
word_4DD3B8: dw 0
byte_4DD3BA: db 0
	db 0
dword_4DD3BC: dd 0
dword_4DD3C0: dd 0
dword_4DD3C4: dd 0
dword_4DD3C8: times 1Fh dd 0
word_4DD444: dw 0
word_4DD446: dw 0
dword_4DD448: dd 0
dword_4DD44C: dd 0
dword_4DD450: dd 0
dword_4DD454: dd 0
dword_4DD458: dd 0
dword_4DD45C: dd 0
dword_4DD460: dd 10000h
	times 3 dd 0
	dd 10000h
	times 3 dd 0
	dd 10000h
dword_4DD484: dd 4000h
	dd 0FFFFE000h, 1800h, 0FFFFEC00h, 1180h, 0FFFFF040h, 0E70h
	dd 0FFFFF298h, 0C92h, 0FFFFF421h
dword_4DD4AC: dd 6A09E6h
	dd 4AFB0Dh, 3504F3h, 257D86h, 1A827Ah, 12BEC3h, 0D413Dh
	dd 95F62h, 6A09Eh, 4AFB1h, 3504Fh, 257D8h, 1A828h, 12BECh
	dd 0D414h, 95F6h, 6A0Ah, 4AFBh, 3505h, 257Eh, 1A82h, 12BFh
	dd 0D41h, 95Fh, 6A1h, 4B0h, 350h, 258h, 1A8h, 12Ch, 0D4h
	dd 96h, 6Ah
dword_4DD530: dd 98h
	dd 0D7h, 130h, 1AEh, 260h, 35Ch, 4C1h, 6B9h, 981h, 0D71h
	dd 1303h, 1AE3h, 2606h, 35C5h, 4C0Bh, 6B8Bh, 9816h, 0D715h
	dd 1302Ch, 1AE2Ah, 26058h, 35C54h, 4C0B0h, 6B8A8h, 98161h
	dd 0D7151h, 1302C2h, 1AE2A2h, 260583h, 35C544h, 4C0B06h
	dd 6B8A88h, 98160Ch
off_4DD5B8: dd sub_49FB70
	dd sub_49FBF0
	dd sub_49FC00
	dd sub_49FC34
	dd sub_49FC3C
	dd sub_49FC44
	dd sub_49FC68
	times 5 dd 0
byte_4DD5E8: db 0
	db 1, 2, 3
	dd 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h, 17161514h
	dd 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h, 2B2A2928h
	dd 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h, 3F3E3D3Ch
	dd 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch, 53525150h
	dd 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h, 67666564h
	dd 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h, 7B7A7978h
	dd 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h, 8F8E8D8Ch
	dd 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch, 0A3A2A1A0h
	dd 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h, 0B7B6B5B4h
	dd 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h, 0CBCAC9C8h
	dd 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h, 0DFDEDDDCh
	dd 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh, 0F3F2F1F0h
	dd 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh
dword_4DD6E8: dd 0
dword_4DD6EC: dd 0
dword_4DD6F0: dd 0
dword_4DD6F4: dd 0
dword_4DD6F8: dd 0
dword_4DD6FC: dd 0
dword_4DD700: dd 0
dword_4DD704: dd 0
dword_4DD708: dd 0
dword_4DD70C: dd 0
dword_4DD710: dd 0
dword_4DD714: dd 0
dword_4DD718: dd 0
dword_4DD71C: times 10h dd 0
dword_4DD75C: dd 0
dword_4DD760: dd 0
dword_4DD764: dd 0
dword_4DD768: dd 0
dword_4DD76C: dd 0
dword_4DD770: dd 0
dword_4DD774: dd 0
dword_4DD778: dd 0
dword_4DD77C: dd 0
dword_4DD780: dd 0
dword_4DD784: dd 0
dword_4DD788: dd 0
dword_4DD78C: dd 0
dword_4DD790: dd 0
dword_4DD794: dd 0
dword_4DD798: dd 0
byte_4DD7B0: db 0
	db 0
	dw 0
	times 7 dd 0
	dd 180000h, 18h, 201000h, 200F20h
	times 4 dd 0
	dd 180F0804h, 1
	times 9 dd 0
	dd 1000h
	times 2 dd 0
	dd 8040110h, 180F2000h
dword_4DDA70: dd 0
byte_4DDA74: db 0
	db 10h
	times 2 db 0
dword_4DDA78: dd 0
dword_4DDA7C: dd 0
dword_4DDA80: dd 0
dword_4DDA84: dd 0
dword_4DDA8C: dd 0
dword_4DDA90: dd 0
dword_4DDA94: dd 0
dword_4DDA98: dd 0
dword_4DDA9C: dd 0
dword_4DDAA0: dd 0
dword_4DDAA4: dd 0
dword_4DDAA8: dd 0
	times 2 dd 0
dword_4DDAB4: dd 0
dword_4DDAB8: dd 0
dword_4DDABC: dd 0
	dd 0
dword_4DDAEC: dd 0
dword_4DDAF0: dd 0
byte_4DDB44: times 80h db 0
byte_4DDBC4: times 86 db 0
dword_4DDC4A: dd 1
dword_4DDC4E: times 31h dd 0
	dw 0
word_4DDD14: times 1Eh dw 0
dword_4DDD50: dd 0
	dd 81498140h, 81948167h, 81938190h, 81668195h, 816A8169h
	dd 817B8196h, 817C8143h, 815E8144h, 8250824Fh, 82528251h
	dd 82548253h, 82568255h, 82588257h, 81478146h, 81818183h
	dd 81488184h, 82608197h, 82628261h, 82648263h, 82668265h
	dd 82688267h, 826A8269h, 826C826Bh, 826E826Dh, 8270826Fh
	dd 82728271h, 82748273h, 82768275h, 82788277h, 816D8279h
	dd 816E815Fh, 815181AAh, 82818165h, 82838282h, 82858284h
	dd 82878286h, 82898288h, 828B828Ah, 828D828Ch, 828F828Eh
	dd 82918290h, 82938292h, 82958294h, 82978296h, 82998298h
	dd 816F829Ah, 81708162h, 81A68160h
dword_4DDE14: dd 0
dword_4DDE18: dd 0
dword_4DDE1C: dd 0
dword_4DDE20: dd 0
dword_4DDE24: dd 0
dword_4DDE28: dd 0
dword_4DDE2C: dd 0
dword_4DDE30: dd 0
dword_4DDE34: dd 0
dword_4DDE38: dd 0
dword_4DDE3C: dd 0
dword_4DDE40: dd 0
dword_4DDE44: dd 0
dword_4DDE48: dd 0
dword_4DDE4C: dd 0
dword_4DDE50: dd 0
dword_4DDE54: dd 0
dword_4DDE58: dd 0
	times 6 dd 0
dword_4DDE74: dd 0
	times 2 dd 0
dword_4DDE80: dd 0
	dd 0
dword_4DDE88: dd 0
off_4DDE8C: dd sub_4B4FB8
off_4DDE90: dd sub_4B5370
off_4DDE94: dd sub_4B4FB8
off_4DDE98: dd sub_4B5370
off_4DDE9C: dd sub_4B5730
off_4DDEA0: dd sub_4B587C
off_4DDEA4: dd sub_4B5730
off_4DDEA8: dd sub_4B587C
off_4DDEAC: dd sub_4B5CF4
off_4DDEB0: dd sub_4B60B0
off_4DDEB4: dd sub_4B5CF4
off_4DDEB8: dd sub_4B60B0
off_4DDEBC: dd sub_4B60F0
off_4DDEC0: dd sub_4B6170
off_4DDEC4: dd sub_4B61F0
off_4DDEC8: dd sub_4B6270
off_4DDECC: dd sub_4B62E4
off_4DDED0: dd nullsub_50
off_4DDED4: dd dword_59C61C
off_4DDED8: dd dword_59D634
off_4DDEDC: dd dword_59CE24
dword_4DDEE0: dd 1
dword_4DDEE4: dd 0
dword_4DDEE8: times 100h dd 0
dword_4DE2E8: times 201h dd 0
flt_4DEAEC: dd 0.0
	dd 0
flt_4DEAF4: dd 0.0
	dd 0
flt_4DEAFC: dd 0.75
	dd 0
flt_4DEB04: dd 0.75
	dd 0
flt_4DEB0C: dd 0.0
	dd 0
flt_4DEB14: dd 0.0
flt_4DEB18: dd 0.5
flt_4DEB1C: dd 0.5
flt_4DEB20: dd 0.60000002
flt_4DEB24: dd 0.60000002
dword_4DEB28: dd 7FFFFFFFh, 7Fh
byte_4DEB30: db 0
	times 3 db 0
dword_4DEB38: dd 0
dword_4DEB3C: dd 0
off_4DED58: dd sub_4A9CF0
byte_4DEF20: db 0
	db 3Fh, 37h, 3Eh
	dd 272F363Dh, 3B3C352Eh, 1F262D34h, 2C251E17h, 32393A33h
	dd 161D242Bh, 150E070Fh, 312A231Ch, 22293038h, 60D141Bh
	dd 1A130C05h, 19202821h, 3040B12h, 1018110Ah, 8010209h
_IsTable: db 0, 1, 1, 1, 1, 1, 1, 1
	db 1, 1, 3, 3, 3, 3, 3, 1
	db 1, 1, 1, 1, 1, 1, 1, 1
	db 1, 1, 1, 1, 1, 1, 1, 1
	db 1, 0Ah, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
	db 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
	db 0Ch, 38h, 38h, 38h, 38h, 38h, 38h, 38h
	db 38h, 38h, 38h, 0Ch, 0Ch, 0Ch, 0Ch, 0Ch
	db 0Ch, 0Ch, 58h, 58h, 58h, 58h, 58h, 58h
	db 48h, 48h, 48h, 48h, 48h, 48h, 48h, 48h
	db 48h, 48h, 48h, 48h, 48h, 48h, 48h, 48h
	db 48h, 48h, 48h, 48h, 0Ch, 0Ch, 0Ch, 0Ch
	db 0Ch, 0Ch, 98h, 98h, 98h, 98h, 98h, 98h
	db 88h, 88h, 88h, 88h, 88h, 88h, 88h, 88h
	db 88h, 88h, 88h, 88h, 88h, 88h, 88h, 88h
	db 88h, 88h, 88h, 88h, 0Ch, 0Ch, 0Ch, 0Ch
	db 1, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	db 0, 0, 0, 0, 0, 0, 0, 0
	dd 0
dword_4DF07C: dd 0
	dd 0A800A800h, 0A8A80000h, 0A80000A8h, 54A8A800h, 0A8A8A800h
	dd 54545454h, 0FC54FC54h, 0FCFC5454h, 0FC5454FCh
	times 2 dd 0FCFCFC54h
	dd 0DCFCFCFCh, 0CCCCDCDCh, 0C0C0C0CCh, 0A4B0B0B0h, 9898A4A4h
	dd 88888898h, 707C7C7Ch, 60607070h, 54545460h, 38484848h
	dd 2C2C3838h, 2020202Ch, 0FCD8D8FCh, 9CFCB8B8h, 7C7CFC9Ch
	dd 0FC5C5CFCh, 20FC4040h, 0FC20h, 0CC0000E4h, 0B40000h
	dd 9C00h, 70000084h, 580000h, 4000h, 0FCD8E8FCh, 0D4FCC0DCh
	dd 94C8FCACh, 0FC80C0FCh, 0ACFC68B8h, 3CA4FC54h, 0E0289CFCh
	dd 78C42088h, 1464A81Ch, 74105490h, 30580840h, 204004h
	dd 0FCD8FCFCh, 0FCFCB8FCh, 7CFCFC9Ch, 0FC5CF8FCh, 0F4FC40F4h
	dd 0F4FC20h, 0CC00D8E4h, 0A4B400C0h, 8C9C00h, 6C007484h
	dd 40540058h, 284000h, 0F4D8FCF8h, 0FCE8B8FCh, 7CFCE09Ch
	dd 0C45CFCD0h, 0FCB440FCh, 0FCA020h, 8000E490h, 0B47400CCh
	dd 9C6000h, 44008450h, 58340070h, 402800h, 9CD8FCD8h, 0EC909CFCh
	dd 84E08490h, 7078D078h, 0B8646CC4h, 58A85864h, 444C9C50h
	dd 80384090h, 2C742C34h, 18206824h, 4C0C1458h, 400408h
	dd 0B8FCFCD8h, 0FC9CFCFCh, 0F8FC7CFCh, 40FCFC5Ch, 0FC20FCFCh
	dd 0FCFC00FCh, 0E4E400h, 0B400CCCCh, 9C9C00B4h, 848400h
	dd 58007070h, 40400058h, 0B8FCECD8h, 0D49CFCE0h, 0FCC87CFCh
	dd 40FCBC5Ch, 9C00FCB0h, 0E48C00FCh, 0D08000h, 6400BC74h
	dd 905800A8h, 7C4C00h, 3000683Ch, 40240054h, 0B8FCD8D8h
	dd 9C9CFCBCh, 0FC807CFCh, 40FC605Ch, 400FC40h, 0E40000FCh
	dd 0D00000h, 0BC00h, 900000A8h, 7C0000h, 6800h, 40000054h
	dd 0E4FCD8F0h, 9CD8FCB8h, 0FC7CD0FCh, 0BCFC5CC8h, 20B4FC40h
	dd 0FC00A8FCh, 80E40098h, 74CC00h, 9C0060B4h, 44840050h
	dd 347000h, 40002858h, 0FCFCD8FCh, 9CFCFCB8h, 0FC7CFCFCh
	dd 0FCFC5CFCh, 20FCFC40h, 0E400E0FCh, 0B8CC00CCh, 0A4B800h
	dd 900090A4h, 687C007Ch, 546800h, 40004054h, 0F0DCE8FCh
	dd 0C4E4C4D4h, 98B4D8ACh, 0C080A0CCh, 80B46C90h, 4070AC54h
	dd 8C38649Ch, 5480345Ch, 284C702Ch, 54204060h, 30441C38h
	dd 10283814h, 0F8CCD8FCh, 0C0F4B8CCh, 94B4F0A8h, 0E884A8ECh
	dd 94E4749Ch, 588CE064h, 0D44C80D8h, 6CC84078h, 2C60C034h
	dd 0A82454B4h, 3C9C1C48h, 0C309414h, 8000000h, 10100808h
	dd 18181810h, 28202020h, 30302828h, 38383830h, 48404040h
	dd 50504848h, 58585850h, 68606060h, 70706868h, 78787870h
	dd 88808080h, 90908888h, 98989890h, 0A8A0A0A0h, 0B0B0A8A8h
	dd 0B8B8B8B0h, 0C8C0C0C0h, 0D0D0C8C8h, 0D8D8D8D0h, 0E8E0E0E0h
	dd 0F0F0E8E8h, 0FFFFFFF0h
dword_4DF37C: dd 0
dword_4DF380: db 'FNTF'
	dd 86Dh
	dd 6F0064h
	dd 0
	dd 0A000000h, 20h, 0
	dd 4E8h, 8080020h, 0
	dd 21000008h, 8080800h, 8000000h, 220000h, 100808h, 80000h
	dd 8002300h, 1808h, 800h, 8080024h, 20h, 25000008h, 28080800h
	dd 8000000h, 260000h, 300808h, 80000h, 8002700h, 3808h
	dd 800h, 8080028h, 40h, 29000008h, 48080800h, 8000000h
	dd 2A0000h, 500808h, 80000h, 8002B00h, 5808h, 800h, 808002Ch
	dd 60h, 2D000008h, 68080800h, 8000000h, 2E0000h, 700808h
	dd 80000h, 8002F00h, 7808h, 800h, 8080030h, 80h, 31000008h
	dd 88080800h, 8000000h, 320000h, 900808h, 80000h, 8003300h
	dd 9808h, 800h, 8080034h, 0A0h, 35000008h, 0A8080800h
	dd 8000000h, 360000h, 0B00808h, 80000h, 8003700h, 0B808h
	dd 800h, 8080038h, 0C0h, 39000008h, 0C8080800h, 8000000h
	dd 3A0000h, 0D00808h, 80000h, 8003B00h, 0D808h, 800h, 808003Ch
	dd 0E0h, 3D000008h, 0E8080800h, 8000000h, 3E0000h, 0F00808h
	dd 80000h, 8003F00h, 0F808h, 800h, 8080040h, 100h, 41000008h
	dd 8080800h, 8000001h, 420000h, 1100808h, 80000h, 8004300h
	dd 11808h, 800h, 8080044h, 120h, 45000008h, 28080800h
	dd 8000001h, 460000h, 1300808h, 80000h, 8004700h, 13808h
	dd 800h, 8080048h, 140h, 49000008h, 48080800h, 8000001h
	dd 4A0000h, 1500808h, 80000h, 8004B00h, 15808h, 800h, 808004Ch
	dd 160h, 4D000008h, 68080800h, 8000001h, 4E0000h, 1700808h
	dd 80000h, 8004F00h, 17808h, 800h, 8080050h, 180h, 51000008h
	dd 88080800h, 8000001h, 520000h, 1900808h, 80000h, 8005300h
	dd 19808h, 800h, 8080054h, 1A0h, 55000008h, 0A8080800h
	dd 8000001h, 560000h, 1B00808h, 80000h, 8005700h, 1B808h
	dd 800h, 8080058h, 1C0h, 59000008h, 0C8080800h, 8000001h
	dd 5A0000h, 1D00808h, 80000h, 8005B00h, 1D808h, 800h, 808005Ch
	dd 1E0h, 5D000008h, 0E8080800h, 8000001h, 5E0000h, 1F00808h
	dd 80000h, 8005F00h, 1F808h, 800h, 8080060h, 200h, 61000008h
	dd 8080800h, 8000002h, 620000h, 2100808h, 80000h, 8006300h
	dd 21808h, 800h, 8080064h, 220h, 65000008h, 28080800h
	dd 8000002h, 660000h, 2300808h, 80000h, 8006700h, 23808h
	dd 800h, 8080068h, 240h, 69000008h, 48080800h, 8000002h
	dd 6A0000h, 2500808h, 80000h, 8006B00h, 25808h, 800h, 808006Ch
	dd 260h, 6D000008h, 68080800h, 8000002h, 6E0000h, 2700808h
	dd 80000h, 8006F00h, 27808h, 800h, 8080070h, 280h, 71000008h
	dd 88080800h, 8000002h, 720000h, 2900808h, 80000h, 8007300h
	dd 29808h, 800h, 8080074h, 2A0h, 75000008h, 0A8080800h
	dd 8000002h, 760000h, 2B00808h, 80000h, 8007700h, 2B808h
	dd 800h, 8080078h, 2C0h, 79000008h, 0C8080800h, 8000002h
	dd 7A0000h, 2D00808h, 80000h, 8007B00h, 2D808h, 800h, 808007Ch
	dd 2E0h, 7D000008h, 0E8080800h, 8000002h, 7E0000h, 2F00808h
	dd 80000h, 8007F00h, 2F808h, 800h, 8080080h, 300h, 81000008h
	dd 8080800h, 8000003h, 820000h, 3100808h, 80000h, 8008300h
	dd 31808h, 800h, 8080084h, 320h, 85000008h, 28080800h
	dd 8000003h, 860000h, 3300808h, 80000h, 8008700h, 33808h
	dd 800h, 8080088h, 340h, 89000008h, 48080800h, 8000003h
	dd 8A0000h, 3500808h, 80000h, 8008B00h, 35808h, 800h, 808008Ch
	dd 360h, 8D000008h, 68080800h, 8000003h, 8E0000h, 3700808h
	dd 80000h, 0ADADAD00h, 79h, 80378h
	times 2 dd 0
	dd 6C6C3000h, 60380030h, 6018h, 6000000h, 7878307Ch, 0FC38FC1Ch
	dd 7878h, 78600018h, 3CFC307Ch, 3CFEFEF8h, 0E61E78CCh
	dd 38C6C6F0h, 78FC78FCh, 0C6CCCCFCh, 78FECCC6h, 1078C0h
	dd 0E00030h, 38001Ch, 0E00C30E0h, 70h, 0
	dd 10h, 1C000000h, 76E018h, 10301800h, 8100010h, 7Ch, 300080h
	dd 7C6C6C78h, 30606CC6h, 306630h, 0C60C0000h, 3CCCCC70h
	dd 0CCCC60C0h, 303030CCh, 0C6CC3000h, 6C666678h, 0CC666262h
	dd 60660C30h, 666CE6EEh, 0B4CC66CCh, 0C6C6CCCCh, 6060C6CCh
	dd 30003818h, 0C006000h, 60006C00h, 30600000h, 0
	dd 30000000h, 0
	dd 18300000h, 210DC30h, 10381830h, 0C6241000h, 0C0002002h
	dd 780048F0h, 0CCC0FE6Ch, 1860C038h, 303Ch, 30C61800h
	dd 0F86C0C0Ch, 0CCCC0CC0h, 0FC603030h, 0CCDE0C18h, 6866C066h
	dd 30CCC068h, 0FE606C0Ch, 0CC66C6F6h, 0CC30E066h, 0CC6CC6CCh
	dd 1830608Ch, 7818006Ch, 780C7860h, 706C7660h, 0CC30660Ch
	dd 76DC78F8h, 0CC7C7CDCh, 0CCC6C6CCh, 301830FCh, 60043800h
	dd 107C0Ch, 4929210h, 88E00060h, 300048h, 7618786Ch, 0FF186000h
	dd 0FC00FCh, 3830C630h, 0F80CCC38h, 7C7818h, 0C00C000h
	dd 7CCCDE18h, 787866C0h, 0C30FCC0h, 0DEFE6078h, 7CCC7CC6h
	dd 0CCCC3070h, 187838D6h, 0C6181860h, 7C0C0000h, 0F0CC7CCCh
	dd 0C3076CCh, 0CCFE306Ch, 76CC66CCh, 0CCCC30C0h, 98CC6CD6h
	dd 1C00E0h, 0FEFE486Ch, 10FFD6D6h, 0FE489292h, 0FC84F000h
	dd 0FE003000h, 0DC300Ch, 303C1860h, 60000000h, 0C6030C6h
	dd 30CC0CFEh, 0CCCh, 30180060h, 0C066FCDEh, 0CE686866h
	dd 6CCC30CCh, 0C6CED662h, 1C6CDC60h, 0FECCCC30h, 60323038h
	dd 180Ch, 0C0667C00h, 0CC60FCCCh, 780C3066h, 0CCCCFE30h
	dd 7866CC66h, 0FECCCC30h, 3030CC38h, 0C6003018h, 100C6050h
	dd 2410007Ch, 0FE50C6h, 0FC84E0h, 0F86C0000h, 3000CC66h
	dd 30306630h, 0C6C03000h, 0CCCCC30h, 0CC30CCCCh, 30303018h
	dd 0C00030FCh, 6C6666CCh, 0CC666062h, 6666CC30h, 606CC6C6h
	dd 30CC6678h, 6CEE78CCh, 6606630h, 18h, 0CCCC66CCh, 667C60C0h
	dd 306CCC30h, 7CCCCCD6h, 340C607Ch, 6CFE78CCh, 1830647Ch
	dd 20C60030h, 38101830h, 7C081000h, 0C0006020h, 3000FC84h
	dd 0C6306C00h, 60180076h, 300000h, 0FC7C8030h, 781E78FCh
	dd 70783078h, 183030h, 0CC783060h, 0FEF83CFCh, 78CC3EF0h
	dd 0C6FEE678h, 1CF038C6h, 0FC7878E6h, 78C6C630h, 780278FEh
	dd 76000000h, 787678DCh, 78E60CF0h, 0C678E6CCh, 0C6078CCh
	dd 7618F8F0h, 0CC66C30h, 0E0181CFCh, 1800FE00h, 101030h
	dd 10h, 7C800020h, 0FCh
	times 2 dd 0
	dd 6000h
	times 3 dd 0
	dd 60h
	times 8 dd 0
	dd 0FFh, 0
	dd 780000F8h, 0
	dd 1EF000h, 0
	dd 0F80000h
	times 2 dd 0
	dd 10000000h, 0
	dd 0FFh
dword_4DFBF0: dd 4030201h, 8070605h, 0C0B0A09h, 0F0E2B00h, 13121110h
	dd 17161514h, 1A291918h, 201F1E1Ch, 24232221h, 28272625h
	dd 2E2D2C1Bh, 3231302Fh, 353433h, 49510039h, 4B485352h
	dd 4F47504Dh, 4847464Ah, 4C4B3749h, 504F4E4Dh, 520051h
	dd 58570053h
	times 3 dd 0
	dd 3C3B0000h, 403F3E3Dh, 44434241h, 0
	dd 38003A2Ah, 1Dh
	times 2 dd 0
dword_4DFC70: dd 0Ch
dword_4DFC74: dd 0
byte_4DFC78: db 0
	times 2 db 1
	db 2
	dd 4040303h, 7060605h, 0A090808h, 0C0B0B0Ah, 0F0E0D0Dh
	dd 1110100Fh, 14131212h, 16161514h, 19181717h, 1B1B1A19h
	dd 1E1D1C1Ch, 201F1F1Eh, 22222121h, 25242423h, 27272626h
	dd 2A292928h, 2C2C2B2Ah, 2E2E2D2Dh, 3130302Fh, 33333231h
	dd 35353434h, 38373736h, 3A393938h, 3C3C3B3Ah, 3E3E3D3Dh
	dd 41403F3Fh, 43424241h, 45444443h, 47464645h, 49484847h
	dd 4B4B4A4Ah, 4D4D4C4Ch, 4F4F4E4Eh, 51515050h, 53535252h
	dd 55545454h, 57565655h, 59585857h, 5B5A5A59h, 5C5C5B5Bh
	dd 5E5E5D5Dh, 60605F5Fh, 62616160h, 63636362h, 65656464h
	dd 67666666h, 68686867h, 6A6A6969h, 6C6B6B6Ah, 6D6D6C6Ch
	dd 6F6E6E6Eh, 7070706Fh, 72717171h, 73737372h, 75747474h
	dd 76767675h, 78777777h, 79797878h, 7A7A7A79h, 7C7B7B7Bh
	dd 7D7D7C7Ch, 7E7E7E7Dh, 807F7F7Fh, 80h
dword_4DFD7C: dd 0
dword_4DFD80: dd 29h
	dd 51h, 7Ah, 0A3h, 0CCh, 0F4h, 11Dh, 146h, 16Fh, 197h
	dd 1C0h, 1E9h, 211h, 23Ah, 262h, 28Bh, 2B4h, 2DCh, 305h
	dd 32Dh, 356h, 37Eh, 3A7h, 3CFh, 3F7h, 420h, 448h, 470h
	dd 499h, 4C1h, 4E9h, 511h, 539h, 561h, 589h, 5B1h, 5D9h
	dd 601h, 629h, 651h, 678h, 6A0h, 6C8h, 6EFh, 717h, 73Eh
	dd 766h, 78Dh, 7B5h, 7DCh, 803h, 82Ah, 851h, 878h, 89Fh
	dd 8C6h, 8EDh, 914h, 93Bh, 961h, 988h, 9AEh, 9D5h, 9FBh
	dd 0A22h, 0A48h, 0A6Eh, 0A94h, 0ABAh, 0AE0h, 0B06h, 0B2Ch
	dd 0B51h, 0B77h, 0B9Dh, 0BC2h, 0BE7h, 0C0Dh, 0C32h, 0C57h
	dd 0C7Ch, 0CA1h, 0CC6h, 0CEBh, 0D10h, 0D34h, 0D59h, 0D7Dh
	dd 0DA2h, 0DC6h, 0DEAh, 0E0Fh, 0E33h, 0E56h, 0E7Ah, 0E9Eh
	dd 0EC2h, 0EE5h, 0F09h, 0F2Ch, 0F50h, 0F73h, 0F96h, 0FB9h
	dd 0FDCh, 0FFFh, 1021h, 1044h, 1067h, 1089h, 10ABh, 10CEh
	dd 10F0h, 1112h, 1134h, 1156h, 1177h, 1199h, 11BBh, 11DCh
	dd 11FDh, 121Fh, 1240h, 1261h, 1282h, 12A3h, 12C3h, 12E4h
	dd 1305h, 1325h, 1345h, 1366h, 1386h, 13A6h, 13C6h, 13E6h
	dd 1405h, 1425h, 1444h, 1464h, 1483h, 14A2h, 14C1h, 14E0h
	dd 14FFh, 151Eh, 153Dh, 155Bh, 157Ah, 1598h, 15B7h, 15D5h
	dd 15F3h, 1611h, 162Fh, 164Ch, 166Ah, 1688h, 16A5h, 16C2h
	dd 16E0h, 16FDh, 171Ah, 1737h, 1754h, 1770h, 178Dh, 17AAh
	dd 17C6h, 17E2h, 17FEh, 181Bh, 1837h, 1853h, 186Eh, 188Ah
	dd 18A6h, 18C1h, 18DDh, 18F8h, 1913h, 192Eh, 1949h, 1964h
	dd 197Fh, 199Ah, 19B4h, 19CFh, 19E9h, 1A04h, 1A1Eh, 1A38h
	dd 1A52h, 1A6Ch, 1A86h, 1A9Fh, 1AB9h, 1AD3h, 1AECh, 1B05h
	dd 1B1Fh, 1B38h, 1B51h, 1B6Ah, 1B83h, 1B9Ch, 1BB4h, 1BCDh
	dd 1BE5h, 1BFEh, 1C16h, 1C2Eh, 1C46h, 1C5Eh, 1C76h, 1C8Eh
	dd 1CA6h, 1CBEh, 1CD5h, 1CEDh, 1D04h, 1D1Bh, 1D33h, 1D4Ah
	dd 1D61h, 1D78h, 1D8Eh, 1DA5h, 1DBCh, 1DD3h, 1DE9h, 1DFFh
	dd 1E16h, 1E2Ch, 1E42h, 1E58h, 1E6Eh, 1E84h, 1E9Ah, 1EB0h
	dd 1EC5h, 1EDBh, 1EF0h, 1F06h, 1F1Bh, 1F30h, 1F45h, 1F5Ah
	dd 1F6Fh, 1F84h, 1F99h, 1FAEh, 1FC3h, 1FD7h, 1FECh
	times 2 dd 2000h
byte_4E01A4: db 0
byte_4E01A5: db 0
	dw 101h
	dd 2020201h, 4030303h, 5040404h, 6060505h, 7070706h, 9080808h
	dd 0A0A0909h, 0B0B0B0Ah, 0C0C0C0Bh, 0E0D0D0Dh, 0F0F0E0Eh
	dd 1010100Fh, 12111111h, 13131212h, 14141313h, 15151514h
	dd 17161616h, 18181717h, 19191918h, 1B1A1A1Ah, 1C1C1B1Bh
	dd 1D1D1C1Ch, 1E1E1E1Dh, 201F1F1Fh, 21212020h, 22222221h
	dd 24232323h, 25252424h, 26262625h, 28272727h, 29292828h
	dd 2A2A2A29h, 2B2B2B2Ah, 2D2C2C2Ch, 2E2E2D2Dh, 2F2F2F2Eh
	dd 31303030h, 32323131h, 33333332h, 35343434h, 36363535h
	dd 37373736h, 39393838h, 3A3A3A39h, 3C3B3B3Bh, 3D3D3C3Ch
	dd 3E3E3E3Dh, 403F3F3Fh, 41414040h, 42424241h, 44434343h
	dd 45454544h, 47464646h, 48484747h, 49494948h, 4B4B4A4Ah
	dd 4C4C4C4Bh, 4E4D4D4Dh, 4F4F4E4Eh, 51505050h, 52525151h
	dd 54535352h, 55555454h, 56565655h, 58585757h, 59595958h
	dd 5B5B5A5Ah, 5C5C5C5Bh, 5E5E5D5Dh, 5F5F5F5Eh, 61616060h
	dd 63626261h, 64646363h, 66656564h, 67676666h, 69686868h
	dd 6A6A6A69h, 6C6C6B6Bh, 6E6D6D6Ch, 6F6F6E6Eh, 71707070h
	dd 73727271h, 74747373h, 76767575h, 78777776h, 79797878h
	dd 7B7B7A7Ah, 7D7C7C7Ch, 7F7E7E7Dh, 8080807Fh, 82828181h
	dd 84848383h, 86858585h, 88878786h, 8A898988h, 8C8B8B8Ah
	dd 8E8D8D8Ch, 908F8F8Eh, 92919190h, 94939392h, 96959594h
	dd 98979796h, 9A999998h, 9C9C9B9Bh, 9E9E9D9Dh, 0A1A0A09Fh
	dd 0A3A2A2A1h, 0A5A5A4A4h, 0A8A7A7A6h, 0AAAAA9A9h, 0ADACACABh
	dd 0B0AFAEAEh, 0B2B2B1B0h, 0B5B4B4B3h, 0B8B7B7B6h, 0BBBABAB9h
	dd 0BEBEBDBCh, 0C2C1C0BFh, 0C5C4C3C3h, 0C9C8C7C6h, 0CDCCCBCAh
	dd 0D1D0CFCEh, 0D6D5D3D2h, 0DBDAD8D7h, 0E1E0DEDDh, 0E9E7E5E3h
	db 0ECh, 0EEh, 0F2h
byte_4E03A3: db 0F6h
	dd 0
flt_4E0518: dd 0.0078740148
flt_4E051C: dd 0.0078740148
dword_4E0520: dd 0
dword_4E0524: dd 0
dword_4E0528: dd 0
dword_4E052C: dd 0
byte_4E0530: times 8 db 80h
flt_4E0538: dd 0.0
	dd 0.9375
	dd 1.796875
	dd 1.53125
flt_4E0548: dd 0.0
	dd 0.0
	dd -0.8125
	dd -0.859375
dword_4E0558: dd 0
	dd 0F00000h, 1CCFF30h, 188FF24h
dword_4E0568: dd 0
	dd 0F0h, 0FF3001CCh, 0FF240188h
flt_4E0578: dd 1.000578
	dd 1.001156
	dd 1.002313
	dd 1.004632
	dd 1.009285
	dd 1.018656
	dd 1.03766
	dd 1.076738
	dd 1.159364
	dd 1.344124
	dd 1.80667
	dd 3.2640581
	dd 10.654074
dword_4E0950: dd 0F4h
flt_4E09D4: dd 1.0
flt_4E09D8: dd 0.000015258
dword_4E09DC: dd 0E90020h
	dd 0
flt_4E09E4: dd 1.0
flt_4E09E8: dd 0.000015258
dword_4E09EC: dd 0E90020h
	dd 0
dword_4E0AFC: dd 0
	dd 0F0h, 1CCh, 188h
dword_4E0B0C: dd 0
	dd 0
	dd 0FFFFFF30h, 0FFFFFF24h
dword_4E0B1C: dd 0
dword_4E0B20: dd 0
dword_4E0B24: dd 0
dword_4E0B28: dd 0
dword_4E0B2C: dd 0
dword_4E0B30: dd 0
dword_4E0B34: dd 0
	dd 1, 3, 7, 0Fh, 1Fh, 3Fh, 7Fh, 0FFh
flt_4E0B58: dd 0.0
	dd 0BF7F2CB6h, 0BF7D8612h, 0BF7BDF7Fh, 0BF7A38EBh, 0BF789247h
	dd 0BF76EBB3h, 0BF75450Fh, 0BF739E7Ch, 0BF6E45E5h, 0BF67AB75h
	dd 0BF611117h, 0BF5A76A7h, 0BF53DC38h, 0BF4D41D9h, 0BF46A769h
flt_4E0B98: dd -0.75019801
	dd 0BF39729Bh, 0BF32D82Ch, 0BF2BAEBCh, 0BF1E79EEh, 0BF11450Fh
	dd 0BF041041h, 0BEEDB6E5h, 0BED34D27h, 0BEB8E38Ah, 0BE9E79EEh
	dd 0BE841052h, 0BE534D27h, 0BE1E79EEh, 0BDD34D6Ah, 0BD534CE4h
	dd 0
	dd 3D534CE4h, 3DD34D6Ah, 3E1E79EEh, 3E534D27h, 3E841052h
	dd 3E9E79EEh, 3EB8E38Ah, 3ED34D27h, 3EEDB6E5h, 3F041041h
	dd 3F11450Fh, 3F1E79EEh, 3F2BAEBCh, 3F32D82Ch, 3F39729Bh
	dd 3F400CFAh, 3F46A769h, 3F4D41D9h, 3F53DC38h, 3F5A76A7h
	dd 3F611117h, 3F67AB75h, 3F6E45E5h, 3F739E7Ch, 3F75450Fh
	dd 3F76EBB3h, 3F789247h, 3F7A38EBh, 3F7BDF7Fh, 3F7D8612h
	dd 3F7F2CB6h
byte_4E0C58: db 4
	db 6, 5, 9
	dd 0D050604h, 0A050604h, 11050604h, 9050604h, 0E050604h
	dd 0A050604h, 15050604h, 9050604h, 0D050604h, 0A050604h
	dd 12050604h, 9050604h, 0E050604h, 0A050604h, 19050604h
	dd 9050604h, 0D050604h, 0A050604h, 11050604h, 9050604h
	dd 0E050604h, 0A050604h, 16050604h, 9050604h, 0D050604h
	dd 0A050604h, 12050604h, 9050604h, 0E050604h, 0A050604h
	dd 50604h, 9050604h, 0D050604h, 0A050604h, 11050604h, 9050604h
	dd 0E050604h, 0A050604h, 15050604h, 9050604h, 0D050604h
	dd 0A050604h, 12050604h, 9050604h, 0E050604h, 0A050604h
	dd 1A050604h, 9050604h, 0D050604h, 0A050604h, 11050604h
	dd 9050604h, 0E050604h, 0A050604h, 16050604h, 9050604h
	dd 0D050604h, 0A050604h, 12050604h, 9050604h, 0E050604h
	dd 0A050604h, 2050604h, 0F070B04h, 13080C04h, 10070B04h
	dd 17080C04h, 0F070B04h, 14080C04h, 10070B04h, 1B080C04h
	dd 0F070B04h, 13080C04h, 10070B04h, 18080C04h, 0F070B04h
	dd 14080C04h, 10070B04h, 1080C04h, 0F070B04h, 13080C04h
	dd 10070B04h, 17080C04h, 0F070B04h, 14080C04h, 10070B04h
	dd 1C080C04h, 0F070B04h, 13080C04h, 10070B04h, 18080C04h
	dd 0F070B04h, 14080C04h, 10070B04h, 3080C04h, 0F070B04h
	dd 13080C04h, 10070B04h, 17080C04h, 0F070B04h, 14080C04h
	dd 10070B04h, 1B080C04h, 0F070B04h, 13080C04h, 10070B04h
	dd 18080C04h, 0F070B04h, 14080C04h, 10070B04h, 1080C04h
	dd 0F070B04h, 13080C04h, 10070B04h, 17080C04h, 0F070B04h
	dd 14080C04h, 10070B04h, 1C080C04h, 0F070B04h, 13080C04h
	dd 10070B04h, 18080C04h, 0F070B04h, 14080C04h, 10070B04h
	dd 3080C04h
dword_4E0E58: dd 1
dword_4E0E5C: dd 8
dword_4E0E60: dd 0
	dd 1, 7
	times 2 dd 0
	dd 8
	times 2 dd 0
	dd 7
	times 2 dd 0
	dd 2
	times 2 dd 0
	dd 2, 0BF800000h, 0
	dd 2, 3F800000h, 0
	dd 3, 0BF800000h, 0
	dd 3, 3F800000h, 1, 4, 0C0000000h, 1, 4, 40000000h, 1
	dd 3, 0C0000000h, 1, 3, 40000000h, 1, 5, 0C0400000h, 1
	dd 5, 40400000h, 1, 4, 0C0400000h, 1, 4, 40400000h, 1
	dd 6, 0C0800000h, 1, 6, 40800000h, 1, 5, 0C0800000h, 1
	dd 5, 40800000h, 1, 7, 0C0A00000h, 1, 7, 40A00000h, 1
	dd 6, 0C0A00000h, 1, 6, 40A00000h, 1, 8, 0C0C00000h, 1
	dd 8, 40C00000h, 1, 7, 0C0C00000h, 1, 7, 40C00000h
;<GUID>
;ForceFeedback
dword_4E2718: dd 13541C20h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2728: dd 13541C21h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2738: dd 13541C2Bh, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2748: dd 13541C22h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2758: dd 13541C23h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2768: dd 13541C24h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2778: dd 13541C25h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2788: dd 13541C26h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E2798: dd 13541C27h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E27A8: dd 13541C28h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E27B8: dd 13541C29h, 11D08E33h, 0A000D09Ah, 356EA0C9h
dword_4E27C8: dd 13541C2Ah, 11D08E33h, 0A000D09Ah, 356EA0C9h
;InputDevices
dword_4E27D8: dd 6F1D2B60h, 11CFD5A0h, 4544C7BFh, 5453h
dword_4E27E8: dd 5944E682h, 11CFC92Eh, 4544C7BFh, 5453h
;ObjectTypes
dword_4E2818: dd 0A36D02E2h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2828: dd 0A36D02E1h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2838: dd 0A36D02E0h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2848: dd 0A36D02F2h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2858: dd 0A36D02E4h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2868: dd 0A36D02E3h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2878: dd 0A36D02F5h, 11CFC9F3h, 4544C7BFh, 5453h
dword_4E2888: dd 0A36D02F4h, 11CFC9F3h, 4544C7BFh, 5453h ; GUID_RxAxis
;</GUID>
	times 2 dd 0
dword_4E28A0: dd 0
dword_4E28A4: dd 0
dbl_4E28A8: dq 0.0
dbl_4E28B0: dq 0.0
dword_4E28B8: dd 5A82799Ah
flt_4E28BC: dd 0.54119611
flt_4E28C0: dd 1.306563
flt_4E28C4: dd 0.38268343
flt_4E28C8: dd 6.7553994e15
dword_4E28CC: dd 0
dword_4E28D0: dd 0
dword_4E28D4: dd 0
dword_4E28D8: dd 0
dword_4E28DC: dd 0
dword_4E28E0: dd 0
dword_4E28E4: dd 0
dword_4E28E8: times 2 dd 0
dword_4E28F0: times 9 dd 0
dword_4E2914: times 9 dd 0
dword_4E2938: times 9 dd 0
dword_4E295C: times 9 dd 0
dword_4E2980: times 9 dd 0
dword_4E29A4: times 9 dd 0
dword_4E29C8: times 9 dd 0
dword_4E29EC: dd 0
	times 7 dd 0
dword_4E2A0C: times 8 dd 0
dword_4E2A2C: times 8 dd 0
dword_4E2A4C: times 8 dd 0
dword_4E2A6C: times 8 dd 0
dword_4E2A8C: times 8 dd 0
dword_4E2AAC: times 8 dd 0
dword_4E2ACC: times 8 dd 0
dword_4E2AEC: dd 2000h
	dd 1712h, 187Eh, 1B37h, 2000h, 28BAh, 3B21h, 73FCh, 1712h
	dd 10A2h, 11A8h, 139Fh, 1712h, 1D5Dh, 2AA1h, 539Fh, 187Eh
	dd 11A8h, 12BFh, 14D4h, 187Eh, 1F2Ch, 2D41h, 58C5h, 1B37h
	dd 139Fh, 14D4h, 1725h, 1B37h, 22A3h, 3249h, 62A3h, 2000h
	dd 1712h, 187Eh, 1B37h, 2000h, 28BAh, 3B21h, 73FCh, 28BAh
	dd 1D5Dh, 1F2Ch, 22A3h, 28BAh, 33D6h, 4B42h, 939Fh, 3B21h
	dd 2AA1h, 2D41h, 3249h, 3B21h, 4B42h, 6D41h, 0D650h, 73FCh
	dd 539Fh, 58C5h, 62A3h, 73FCh, 939Fh, 0D650h, 1A463h, 0
timerIsRunning: dd 0
%ifdef SWAP_WINDOW_AND_GL_THREAD
canRunWindowThread: db 0
%endif

section .bss

dword_4E5010: dd ?
dword_4E5014: times 0Eh dd ?
dword_4E504C: times 0Ah dd ?
dword_4E5074: dd ?
dword_4E5078: dd ?
dword_4E507C: dd ?
dword_4E5080: dd ?
byte_4E5084: db ?
byte_4E5085: db ?
byte_4E5086: db ?
	db ?
dword_4E5088: dd ?
dword_4E508C: dd ?
dword_4E5090: dd ?
dword_4E5094: dd ?
dword_4E5098: dd ?
dword_4E509C: dd ?
dword_4E50A0: dd ?
	times 0Bh dd ?
dword_4E50D0: times 11h dd ?
dword_4E5114: dd ?
dword_4E5118: dd ?
dword_4E511C: dd ?
dword_4E5120: times 2Dh dd ?
dword_4E51D4: times 2Dh dd ?
dword_4E5288: times 2Dh dd ?
dword_4E533C: times 2Dh dd ?
dword_4E53F0: times 2Dh dd ?
dword_4E54A4: dd ?
dword_4E54A8: dd ?
dword_4E54AC: dd ?
	dd ?
dword_4E54B4: dd ?
	times 10h dd ?
dword_4E54F8: dd ?
dword_4E54FC: dd ?
dword_4E5500: dd ?
dword_4E5504: dd ?
dword_4E5508: dd ?
dword_4E550C: dd ?
dword_4E5510: dd ?
dword_4E5514: dd ?
byte_4E5518: db ?
byte_4E5519: db ?
byte_4E551A: db ?
	db ?
	times 3 dd ?
dword_4E5528: dd ?
	times 0F9h dd ?
dword_4E5910: dd ?
dword_4E5914: dd ?
	times 3 dd ?
dword_4E5924: dd ?
dword_4E5928: dd ?
dword_4E592C: dd ?
dword_4E5930: dd ?
word_4E5934: dw ?
word_4E5936: dw ?
word_4E5938: dw ?
word_4E593A: dw ?
word_4E593C: dw ?
word_4E593E: dw ?
dword_4E5940: dd ?
dword_4E5944: dd ?
byte_4E5948: db ?
	times 5 db ?
	dd ?
byte_4E5952: db ?
byte_4E5953: db ?
byte_4E5954: db ?
byte_4E5955: db ?
byte_4E5956: db ?
byte_4E5957: db ?
byte_4E5958: db ?
byte_4E5959: db ?
byte_4E595A: db ?
byte_4E595B: db ?
byte_4E595C: db ?
	times 3 db ?
	times 38h dd ?
byte_4E5A40: db ?
	times 3 db ?
dword_4E5A44: dd ?
byte_4E5A48: db ?
byte_4E5A49: times 3 db ?
	dd ?
	times 2 db ?
byte_4E5A52: db ?
byte_4E5A53: db ?
byte_4E5A54: db ?
byte_4E5A55: db ?
byte_4E5A56: db ?
byte_4E5A57: db ?
byte_4E5A58: db ?
byte_4E5A59: db ?
byte_4E5A5A: db ?
byte_4E5A5B: db ?
byte_4E5A5C: db ?
	times 3 db ?
byte_4E5A60: db ?
byte_4E5A61: db ?
byte_4E5A62: db ?
byte_4E5A63: db ?
byte_4E5A64: db ?
byte_4E5A65: db ?
byte_4E5A66: db ?
byte_4E5A67: db ?
byte_4E5A68: db ?
byte_4E5A69: db ?
word_4E5A6A: dw ?
dword_4E5A6C: dd ?
dword_4E5A70: times 2 dd ?
	times 2 db ?
byte_4E5A7A: db ?
	db ?
	times 0A8h dd ?
dword_4E5D1C: times 2 dd ?
	times 2 db ?
byte_4E5D26: db ?
	db ?
	times 0A8h dd ?
byte_4E5FC8: db ?
	times 3 db ?
	times 4 dd ?
dword_4E5FDC: dd ?
dword_4E5FE0: dd ?
	times 3 dd ?
dword_4E5FF0: times 2 dd ?
dword_4E5FF8: dd ?
dword_4E5FFC: dd ?
	times 0Ch dd ?
;	struct WSAData dword_4E6030
dword_4E6030: times 62h dd ?
word_4E61B8: times 4 dd ?

dword_4E61C0: times 8 dd ?
dword_4E61E0: dd ?
	times 3 dd ?
dword_4E732C: dd ?
dword_4E7330: dd ?
byte_4E7334: db ?
byte_4E7335: db ?
	times 0Ah db ?
dword_4E7340: dd ?
dword_4E7344: dd ?
dword_4E7348: dd ?
	times 0Fh dd ?
dword_4E7388: dd ?
dword_4E738C: dd ?
byte_4E7390: db ?
byte_4E7391: db ?
	times 2 db ?
	times 13h dd ?
byte_4E73E0: db ?
	times 3 db ?
	times 158h dd ?
dword_4E7944: dd ?
dword_4E7948: dd ?
dword_4E794C: dd ?
dword_4E7950: dd ?
dword_4E7954: dd ?
dword_4E7958: dd ?
dword_4E795C: dd ?
dword_4E7960: dd ?
dword_4E7964: dd ?
dword_4E7968: dd ?
dword_4E796C: dd ?
dword_4E7970: dd ?
dword_4E7974: dd ?
dword_4E7978: dd ?
	times 0Dh dd ?
dword_4E79B0: dd ?
dword_4E79B4: dd ?
dword_4E79B8: dd ?
dword_4E79BC: dd ?
dword_4E79C0: dd ?
dword_4E79C4: dd ?
dword_4E79C8: dd ?
	times 388h dd ?
dword_4E87EC: dd ?
	times 5 dd ?
dword_4E8804: dd ?
	dd ?
dword_4E880C: dd ?
	times 5 dd ?
dword_4E8824: dd ?
	times 25h dd ?
dword_4E88BC: dd ?
dword_4E88C0: dd ?
	times 1Dh dd ?
dword_4E8938: dd ?
dword_4E893C: dd ?
dword_4E8940: dd ?
dword_4E8944: dd ?
mousePositionX: dd ?
mousePositionY: dd ?
dword_4E8950: dd ?
	times 3 dd ?
dword_4E8960: dd ?
dword_4E8964: dd ?
word_4E8968: dw ?
	dw ?
	times 12h dd ?
	times 2 db ?
dword_4E89B6: dd ?
	times 13h dd ?
dword_4E8A06: dd ?
	times 13h dd ?
dword_4E8A56: dd ?
	times 13h dd ?
dword_4E8AA6: dd ?
	dw ?
	times 13h dd ?
dword_4E8AF8: dd ?
dword_4E8AFC: dd ?
dword_4E8B00: dd ?
dword_4E8B04: dd ?
dword_4E8B08: dd ?
dword_4E8B0C: times 3Eh dd ?
byte_4E8C04: times 2 db ?
word_4E8C06: dw ?
	dd ?
dword_4E8C0C: dd ?
	times 2Fh dd ?
dword_4E8CCC: dd ?
dword_4E8CD0: dd ?
dword_4E8CD4: dd ?
dword_4E8CD8: dd ?
dword_4E8CDC: dd ?
dword_4E8CE0: dd ?
dword_4E8CE4: dd ?
dword_4E8CE8: dd ?
dword_4E8CEC: dd ?
dword_4E8CF0: dd ?
dword_4E8CF4: dd ?
dword_4E8CF8: dd ?
dword_4E8CFC: dd ?
dword_4E8D00: dd ?
dword_4E8D04: dd ?
dword_4E8D08: dd ?
dword_4E8D0C: dd ?
dword_4E8D10: dd ?
dword_4E8D14: dd ?
dword_4E8D18: dd ?
dword_4E8D1C: dd ?
dword_4E8D20: dd ?
dword_4E8D24: dd ?
dword_4E8D28: dd ?
dword_4E8D2C: dd ?
dword_4E8D30: dd ?
dword_4E8D34: dd ?
dword_4E8D38: dd ?
dword_4E8D3C: dd ?
dword_4E8D40: dd ?
dword_4E8D44: dd ?
dword_4E8D48: dd ?
dword_4E8D4C: times 0A00h dd ?
dword_4EB54C: dd ?
dword_4EB550: dd ?
dword_4EB554: dd ?
dword_4EB558: dd ?
dword_4EB55C: dd ?
dword_4EB560: dd ?
dword_4EB564: dd ?
dword_4EB568: dd ?
dword_4EB56C: dd ?
dword_4EB570: dd ?
dword_4EB574: dd ?
dword_4EB578: dd ?
dword_4EB57C: dd ?
dword_4EB580: dd ?
dword_4EB584: dd ?
dword_4EB588: dd ?
dword_4EB58C: dd ?
	times 3 dd ?
dword_4EB59C: dd ?
dword_4EB5A0: dd ?
dword_4EB5A4: dd ?
	times 4 dd ?
dword_4EB5B8: dd ?
dword_4EB5BC: dd ?
	times 30h dd ?
dword_4EB680: dd ?
dword_4EB684: dd ?
	times 30h dd ?
dword_4EB748: dd ?
dword_4EB74C: dd ?
	times 12Ah dd ?
dword_4EBBF8: dd ?
	times 12Ch dd ?
dword_4EC0AC: dd ?
dword_4EC0B0: dd ?
dword_4EC0B4: dd ?
byte_4EC0B8: db ?
	times 3 db ?
	times 3Eh dd ?
byte_4EC1B4: db ?
	times 3 db ?
	times 3Eh dd ?
byte_4EC2B0: db ?
	times 3 db ?
	times 3Eh dd ?
byte_4EC3AC: db ?
	times 3 db ?
	times 3Eh dd ?
dword_4EC4A8: dd ?
dword_4EC4AC: dd ?
dword_4EC4B0: dd ?
dword_4EC4B4: dd ?
dword_4EC4B8: dd ?
dword_4EC4BC: dd ?
dword_4EC4C0: dd ?
dword_4EC4C4: dd ?
	times 0Eh dd ?
dword_4EC500: dd ?
dword_4EC504: dd ?
dword_4EC508: dd ?
dword_4EC50C: dd ?
dword_4EC510: dd ?
dword_4EC514: dd ?
dword_4EC518: dd ?
dword_4EC51C: dd ?
dword_4EC520: dd ?
dword_4EC524: dd ?
dword_4EC528: dd ?
dword_4EC52C: dd ?
dword_4EC530: dd ?
dword_4EC534: dd ?
dword_4EC538: dd ?
dword_4EC53C: dd ?
	dd ?
dword_4EC544: dd ?
dword_4EC548: dd ?
dword_4EC54C: dd ?
dword_4EC550: dd ?
dword_4EC554: dd ?
dword_4EC558: dd ?
dword_4EC55C: dd ?
dword_4EC560: dd ?
dword_4EC564: dd ?
dword_4EC568: dd ?
dword_4EC56C: dd ?
dword_4EC570: dd ?
dword_4EC574: dd ?
dword_4EC578: dd ?
dword_4EC57C: dd ?
dword_4EC580: dd ?
dword_4EC584: dd ?
word_4EC588: dw ?
word_4EC58A: dw ?
word_4EC58C: dw ?
word_4EC58E: dw ?
	times 6 dd ?
word_4EC5A8: dw ?
word_4EC5AA: dw ?
word_4EC5AC: dw ?
word_4EC5AE: dw ?
	times 0Eh dd ?
byte_4EC5E8: db ?
	times 3 db ?
	times 3 dd ?
dword_4EC5F8: dd ?
	times 0Fh dd ?
dword_4EC638: dd ?
dword_4EC63C: dd ?
dword_4EC640: dd ?
dword_4EC644: dd ?
dword_4EC648: dd ?
dword_4EC64C: dd ?
dword_4EC650: dd ?
dword_4EC654: dd ?
dword_4EC658: dd ?
dword_4EC65C: dd ?
dword_4EC660: dd ?
dword_4EC664: dd ?
dword_4EC668: dd ?
byte_4EC66C: db ?
byte_4EC66D: db ?
	times 2 db ?
dword_4EC670: times 0A4h dd ?
dword_4EC900: times 9Ch dd ?
dword_4ECB70: times 9Ch dd ?
dword_4ECDE0: times 750h dd ?
dword_4EEB20: dd ?
	times 7 dd ?
dword_4EEB40: dd ?
dword_4EEB44: dd ?
dword_4EEB48: dd ?
dword_4EEB4C: dd ?
dword_4EEB50: dd ?
	times 3 dd ?
flt_4EEB60: dd ?
	dd ?
flt_4EEB68: dd ?
	times 0Ah dd ?
dword_4EEB94: dd ?
dword_4EEB98: times 11h dd ?
dword_4EEBDC: dd ?
dword_4EEBE0: dd ?
dword_4EEBE4: dd ?
dword_4EEBE8: dd ?
dword_4EEBEC: dd ?
dword_4EEBF0: dd ?
byte_4EEBF4: db ?
byte_4EEBF5: db ?
byte_4EEBF6: db ?
	db ?
byte_4EEBF8: db ?
byte_4EEBF9: db ?
byte_4EEBFA: db ?
	db ?
dword_4EEBFC: times 1E8h dd ?
dword_4EF39C: times 13h dd ?
dword_4EF3E8: dd ?
byte_4EF3EC: db ?
byte_4EF3ED: db ?
byte_4EF3EE: db ?
byte_4EF3EF: db ?
byte_4EF3F0: db ?
byte_4EF3F1: db ?
byte_4EF3F2: db ?
	db ?
byte_4EF3F4: db ?
byte_4EF3F5: db ?
byte_4EF3F6: db ?
	db ?
dword_4EF3F8: dd ?
	times 0Eh dd ?
dword_4EF434: dd ?
dword_4EF438: times 27h dd ?
dword_4EF4D4: times 1D4h dd ?
dword_4EFC24: times 7 dd ?
byte_4EFC40: times 2 db ?
byte_4EFC42: db ?
byte_4EFC43: db ?
byte_4EFC44: db ?
byte_4EFC45: db ?
byte_4EFC46: db ?
byte_4EFC47: db ?
byte_4EFC48: db ?
	times 3 db ?
dword_4EFC4C: times 2 dd ?
dword_4EFC54: dd ?
dword_4EFC58: dd ?
dword_4EFC5C: dd ?
dword_4EFC60: dd ?
dword_4EFC64: dd ?
dword_4EFC68: dd ?
dword_4EFC6C: dd ?
dword_4EFC70: dd ?
dword_4EFC74: times 7 dd ?
dword_4EFC90: times 2 dd ?
dword_4EFC98: dd ?
dword_4EFC9C: dd ?
dword_4EFCA0: dd ?
dword_4EFCA4: dd ?
dword_4EFCA8: dd ?
dword_4EFCAC: dd ?
dword_4EFCB0: dd ?
dword_4EFCB4: dd ?
byte_4EFCB8: db ?
byte_4EFCB9: db ?
byte_4EFCBA: db ?
byte_4EFCBB: db ?
	dd ?
dword_4EFCC8: times 5 dd ?
dword_4EFCF0: times 3 dd ?

flt_4EFCFC: dd ?
flt_4EFD00: dd ?
dword_4EFD04: dd ?
flt_4EFD08: dd ?
dword_4EFD0C: dd ?
	dd ?
flt_4EFD14: dd ?
flt_4EFD18: dd ?
	times 638h dd ?
dword_4F15FC: times 32h dd ?
dword_4F16C4: times 0C7h dd ?
dword_4F19E0: dd ?
dword_4F19E4: dd ?
	times 0FFh dd ?
dword_4F1DE4: dd ?
dword_4F1DE8: dd ?
dword_4F1DEC: dd ?
dword_4F1DF0: dd ?
dword_4F1DF4: dd ?
dword_4F1DF8: dd ?
dword_4F1DFC: dd ?
dword_4F1E00: dd ?
dword_4F1E04: dd ?
dword_4F1E08: dd ?
dword_4F1E0C: dd ?
dword_4F1E10: dd ?
dword_4F1E14: dd ?
dword_4F1E18: dd ?
dword_4F1E1C: times 5 dd ?
dword_4F1E30: dd ?
	times 2 dd ?
dword_4F1E3C: times 5 dd ?
dword_4F1E50: dd ?
	times 2 dd ?
dword_4F1E5C: times 5 dd ?
dword_4F1E70: dd ?
	times 2 dd ?
dword_4F1E7C: times 5 dd ?
dword_4F1E90: dd ?
	times 2 dd ?
dword_4F1E9C: times 5 dd ?
dword_4F1EB0: dd ?
	times 2 dd ?
dword_4F1EBC: times 5 dd ?
dword_4F1ED0: dd ?
	times 2 dd ?
dword_4F1EDC: times 38h dd ?
dword_4F1FBC: times 38h dd ?
dword_4F209C: times 38h dd ?
dword_4F217C: times 15h dd ?
dword_4F21D0: times 15h dd ?
dword_4F2224: dd ?
dword_4F2228: times 15h dd ?
dword_4F227C: dd ?
dword_4F2280: dd ?
byte_4F2284: db ?
byte_4F2285: db ?
	times 0Ah db ?
dword_4F2290: times 375Ch dd ?
dword_500000: times 33Bh dd ?
dword_500CEC: dd ?
dword_500CF0: dd ?
dword_500CF4: dd ?
	times 6 dd ?
dword_500D10: dd ?
dword_500D14: dd ?
dword_500D18: dd ?
dword_500D1C: dd ?
dword_500D20: dd ?
	dd ?
dword_500D28: dd ?
dword_500D2C: times 6 dd ?
dword_500D44: dd ?
	times 31h dd ?
dword_500E0C: times 7 dd ?
dword_500E28: times 7 dd ?
dword_500E44: times 7 dd ?
dword_500E60: times 7 dd ?
dword_500E7C: times 7 dd ?
dword_500E98: times 2Ah dd ?
dword_500F40: dd ?
	times 4 dd ?
dword_500F54: dd ?
	dd ?
dword_500F5C: dd ?
dword_500F60: times 2 dd ?
dword_500F68: dd ?
byte_500F6C: db ?
	times 3 db ?
dword_500F70: dd ?
	times 5Ch dd ?
dword_5010E4: dd ?
	times 63h dd ?
dword_501274: dd ?
dword_501278: dd ?
byte_50127C: db ?
byte_50127D: db ?
	times 2 db ?
dword_501280: dd ?
dword_501284: dd ?
dword_501288: dd ?
dword_50128C: dd ?
dword_501290: dd ?
byte_501294: db ?
byte_501295: db ?
	times 2 db ?
	times 12B6h dd ?
dword_505D70: dd ?
dword_505D74: dd ?
dword_505D78: dd ?
byte_505D7C: db ?
byte_505D7D: db ?
	times 2 db ?
dword_505D80: dd ?
dword_505D84: dd ?
	times 12BEh dd ?
dword_50A880: dd ?
dword_50A884: dd ?
dword_50A888: times 7 dd ?
dword_50A8A4: dd ?
dword_50A8A8: dd ?
dword_50A8AC: dd ?
dword_50A8B0: dd ?
dword_50A8B4: dd ?
word_50A8B8: dw ?
	dw ?
dword_50A8BC: dd ?
dword_50A8C0: dd ?
dword_50A8C4: dd ?
dword_50A8C8: dd ?
dword_50A8CC: dd ?
dword_50A8D0: dd ?
dword_50A8D4: dd ?
dword_50A8D8: dd ?
dword_50A8DC: dd ?
dword_50A8E0: dd ?
dword_50A8E4: dd ?
dword_50A8E8: dd ?
dword_50A8EC: dd ?
dword_50A8F0: dd ?
dword_50A8F4: dd ?
dword_50A8F8: dd ?
dword_50A8FC: dd ?
dword_50A900: times 7 dd ?
dword_50A91C: dd ?
	times 4 dd ?
dword_50A950: dd ?
dword_50A954: dd ?
dword_50A958: dd ?
dword_50A95C: dd ?
dword_50A960: dd ?
dword_50A964: dd ?
dword_50A968: dd ?
dword_50A96C: dd ?
dword_50A970: dd ?
dword_50A974: dd ?
dword_50A978: dd ?
dword_50A97C: dd ?
dword_50A980: dd ?
dword_50A984: dd ?
dword_50A988: dd ?
dword_50A98C: dd ?
	times 0Fh dd ?
dword_50A9CC: dd ?
dword_50A9D0: dd ?
dword_50A9D4: dd ?
dword_50A9D8: dd ?
	times 0Eh dd ?
dword_50AA14: dd ?
dword_50AA18: dd ?
	times 4Fh dd ?
dword_50AB58: dd ?
dword_50AB5C: dd ?
dword_50AB60: dd ?
dword_50AB64: dd ?
	times 3 dd ?
dword_50AB74: dd ?
dword_50AB78: dd ?
dword_50AB7C: dd ?
dword_50AB80: dd ?
dword_50AB84: dd ?
dword_50AB88: dd ?
	times 2 dd ?
dword_50AB94: dd ?
	times 2 dd ?
dword_50ABA0: dd ?
	times 2 dd ?
dword_50ABAC: dd ?
	times 2 dd ?
dword_50ABB8: dd ?
dword_50ABBC: dd ?
dword_50ABC0: dd ?
	times 2 db ?
word_50ABC6: dw ?
	times 2 db ?
word_50ABCA: dw ?
	times 2 db ?
word_50ABCE: dw ?
dword_50ABD0: dd ?
dword_50ABD4: dd ?
dword_50ABD8: dd ?
dword_50ABDC: dd ?
dword_50ABE0: dd ?
dword_50ABE4: dd ?
dword_50ABE8: dd ?
dword_50ABEC: dd ?
dword_50ABF0: dd ?
dword_50ABF4: dd ?
dword_50ABF8: dd ?
	times 2 dd ?
dword_50AC04: dd ?
dword_50AC08: dd ?
dword_50AC0C: dd ?
dword_50AC10: dd ?
dword_50AC14: dd ?
dword_50AC18: dd ?
	dd ?
dword_50AC20: dd ?
byte_50AC24: times 2 db ?
word_50AC26: dw ?
byte_50AC28: times 2 db ?
word_50AC2A: dw ?
byte_50AC2C: times 2 db ?
word_50AC2E: dw ?
	times 2 db ?
word_50AC32: dw ?
	times 2 db ?
word_50AC36: dw ?
	times 2 db ?
word_50AC3A: dw ?
dword_50AC3C: dd ?
dword_50AC40: dd ?
dword_50AC44: dd ?
dword_50AC48: dd ?
	dd ?
dword_50AC50: dd ?
	dd ?
dword_50AC58: dd ?
	dd ?
dword_50AC60: dd ?
dword_50AC64: dd ?
dword_50AC68: dd ?
dword_50AC6C: dd ?
dword_50AC70: dd ?
dword_50AC74: dd ?
dword_50AC78: dd ?
dword_50AC7C: dd ?
dword_50AC80: dd ?
dword_50AC84: dd ?
dword_50AC88: dd ?
dword_50AC8C: dd ?
dword_50AC90: dd ?
dword_50AC94: dd ?
dword_50AC98: dd ?
dword_50AC9C: dd ?
dword_50ACA0: dd ?
dword_50ACA4: dd ?
dword_50ACA8: dd ?
dword_50ACAC: dd ?
dword_50ACB0: dd ?
dword_50ACB4: dd ?
	dd ?
dword_50ACBC: dd ?
dword_50ACC0: dd ?
dword_50ACC4: dd ?
	dd ?
dword_50ACCC: dd ?
dword_50ACD0: dd ?
dword_50ACD4: dd ?
dword_50ACD8: dd ?
dword_50ACDC: dd ?
dword_50ACE0: dd ?
	dd ?
dword_50ACE8: dd ?
dword_50ACEC: dd ?
dword_50ACF0: dd ?
	dd ?
dword_50ACF8: dd ?
dword_50ACFC: dd ?
dword_50AD00: dd ?
dword_50AD04: dd ?
dword_50AD08: dd ?
dword_50AD0C: dd ?
dword_50AD10: dd ?
dword_50AD14: dd ?
dword_50AD18: dd ?
dword_50AD1C: dd ?
dword_50AD20: dd ?
dword_50AD24: dd ?
dword_50AD28: dd ?
dword_50AD2C: dd ?
dword_50AD30: dd ?
	times 7 dd ?
dword_50AD50: times 7 dd ?
dword_50AD6C: times 7 dd ?
dword_50AD88: times 7 dd ?
dword_50ADA4: times 7 dd ?
dword_50ADC0: times 7 dd ?
dword_50ADDC: times 7 dd ?
dword_50ADF8: dd ?
dword_50ADFC: dd ?
dword_50AE00: dd ?
dword_50AE04: dd ?
	times 3 dd ?
dword_50AE14: dd ?
dword_50AE18: dd ?
dword_50AE1C: dd ?
dword_50AE20: dd ?
dword_50AE24: dd ?
dword_50AE28: dd ?
	times 0B9h dd ?
dword_50B110: dd ?
dword_50B114: dd ?
	times 6 dd ?
dword_50B130: times 3Ch dd ?
dword_50B220: dd ?
dword_50B224: dd ?
dword_50B228: dd ?
dword_50B22C: dd ?
dword_50B230: dd ?
dword_50B234: dd ?
dword_50B238: dd ?
dword_50B23C: dd ?
dword_50B240: dd ?
dword_50B244: dd ?
dword_50B248: dd ?
dword_50B24C: dd ?
dword_50B250: dd ?
	times 0Ch dd ?
dword_50B284: dd ?
dword_50B288: dd ?
dword_50B28C: dd ?
dword_50B290: dd ?
	times 18h dd ?
dword_50B2F4: dd ?
	times 6 dd ?
	times 3 db ?
byte_50B313: db ?
byte_50B314: db ?
	times 3 db ?
	dd ?
dword_50B31C: dd ?
	times 7 dd ?
dword_50B33C: dd ?
	times 6 dd ?
	times 3 db ?
byte_50B35B: db ?
byte_50B35C: db ?
	times 3 db ?
dword_50B360: dd ?
dword_50B364: dd ?
	times 6 dd ?
	times 3 db ?
byte_50B383: db ?
byte_50B384: db ?
	times 3 db ?
	dd ?
byte_50B38C: db ?
	times 3 db ?
	dd ?
dword_50B394: dd ?
	times 6 dd ?
	times 3 db ?
byte_50B3B3: db ?
byte_50B3B4: db ?
	times 3 db ?
dword_50B3B8: dd ?
dword_50B3BC: dd ?
	times 6 dd ?
dword_50B3D8: dd ?
dword_50B3DC: dd ?
	times 7 dd ?
dword_50B3FC: times 3 dd ?
dword_50B408: dd ?
dword_50B40C: dd ?
dword_50B410: dd ?
	dd ?
dword_50B418: dd ?
dword_50B41C: dd ?
	times 2 dd ?
dword_50B428: dd ?
	times 2 dd ?
dword_50B434: dd ?
	times 2 dd ?
dword_50B440: dd ?
	times 2 dd ?
dword_50B44C: dd ?
	times 2 dd ?
dword_50B458: dd ?
	times 2 dd ?
dword_50B464: dd ?
	times 2 dd ?
dword_50B470: dd ?
	times 2 dd ?
dword_50B47C: dd ?
byte_50B480: db ?
	times 3 db ?
dword_50B484: dd ?
	times 0Ah dd ?
dword_50B4B0: dd ?
	times 79h dd ?
dword_50B698: dd ?
	dd ?
dword_50B6A0: dd ?
dword_50B6A4: dd ?
dword_50B6A8: dd ?
dword_50B6AC: dd ?
dword_50B6B0: dd ?
	dd ?
dword_50B6B8: dd ?
	times 575h dd ?
word_50CC90: dw ?
word_50CC92: dw ?
word_50CC94: dw ?
	dw ?
	times 492h dd ?
dword_50DEE0: dd ?
	times 1Bh dd ?
dword_50DF50: times 9 dd ?
dword_50DF74: times 9 dd ?
dword_50DF98: dd ?
dword_50DF9C: dd ?
dword_50DFA0: times 4 dd ?
dword_50DFB0: dd ?
	times 25h dd ?
dword_50E048: dd ?
dword_50E04C: dd ?
dword_50E050: dd ?
	times 2Dh dd ?
dword_50E108: dd ?
dword_50E10C: dd ?
dword_50E110: dd ?
	times 63h dd ?
dword_50E2A0: times 640h dd ?
dword_50FBA0: times 63Fh dd ?
	db ?
byte_51149D: db ?
byte_51149E: db ?
byte_51149F: db ?
byte_5114A0: db ?
	times 3 db ?
	times 0BFh dd ?
dword_5117A0: dd ?
dword_5117A4: dd ?
dword_5117A8: dd ?
dword_5117AC: dd ?
dword_5117B0: dd ?
dword_5117B4: dd ?
dword_5117B8: dd ?
dword_5117BC: dd ?
dword_5117C0: dd ?
dword_5117C4: dd ?
dword_5117C8: dd ?
dword_5117CC: dd ?
dword_5117D0: dd ?
dword_5117D4: dd ?
dword_5117D8: times 2 dd ?
dword_5117E0: dd ?
dword_5117E4: dd ?
dword_5117E8: dd ?
dword_5117EC: dd ?
dword_5117F0: dd ?
	times 2 dd ?
dword_5117FC: dd ?
dword_511800: dd ?
dword_511804: dd ?
dword_511808: dd ?
dword_51180C: dd ?
dword_511810: times 10h dd ?
dword_511850: times 10h dd ?
dword_511890: dd ?
dword_511894: dd ?
dword_511898: dd ?
dword_51189C: dd ?
dword_5118A0: dd ?
dword_5118A4: dd ?
	dd ?
dword_5118AC: dd ?
dword_5118B0: dd ?
flt_5118B4: dd ?
flt_5118B8: dd ?
dword_5118BC: dd ?
dword_5118C0: dd ?
flt_5118C4: dd ?
byte_5118C8: times 3 db ?
byte_5118CB: db ?
byte_5118CC: db ?
	times 3 db ?
	times 2 dd ?
byte_5118D8: db ?
byte_5118D9: db ?
	times 2 db ?
	times 2 dd ?
dword_5118E4: dd ?
dword_5118E8: dd ?
	times 37h dd ?
dword_5119C8: dd ?
	times 2Eh dd ?
dword_511A84: dd ?
dword_511A88: dd ?
dword_511A8C: dd ?
dword_511A90: dd ?
	times 0Ch dd ?
dword_511AC4: dd ?
dword_511AC8: dd ?
dword_511ACC: dd ?
dword_511AD0: dd ?
	times 0Dh dd ?
dword_511B08: dd ?
	times 0Eh dd ?
dword_511B44: dd ?
dword_511B48: dd ?
	times 0Fh dd ?
dword_511B88: dd ?
	times 0Fh dd ?
dword_511BC8: dd ?
	times 0Fh dd ?
dword_511C08: dd ?
	times 0Fh dd ?
dword_511C48: dd ?
	times 0Fh dd ?
dword_511C88: dd ?
	times 0Fh dd ?
dword_511CC8: dd ?
	times 0Fh dd ?
dword_511D08: dd ?
	times 0Fh dd ?
dword_511D48: dd ?
dword_511D4C: dd ?
dword_511D50: dd ?
dword_511D54: dd ?
dword_511D58: dd ?
dword_511D5C: dd ?
dword_511D60: dd ?
dword_511D64: dd ?
dword_511D68: dd ?
dword_511D6C: dd ?
dword_511D70: dd ?
dword_511D74: dd ?
dword_511D78: dd ?
dword_511D7C: dd ?
dword_511D80: dd ?
dword_511D84: dd ?
dword_511D88: dd ?
dword_511D8C: dd ?
dword_511D90: dd ?
dword_511D94: dd ?
dword_511D98: dd ?
dword_511D9C: dd ?
dword_511DA0: dd ?
dword_511DA4: dd ?
dword_511DA8: dd ?
dword_511DAC: dd ?
dword_511DB0: dd ?
dword_511DB4: dd ?
dword_511DB8: dd ?
	times 1Dh dd ?
dword_511E30: dd ?
dword_511E34: dd ?
dword_511E38: dd ?
dword_511E3C: dd ?
dword_511E40: dd ?
dword_511E44: dd ?
dword_511E48: dd ?
dword_511E4C: dd ?
dword_511E50: dd ?
dword_511E54: dd ?
dword_511E58: dd ?
dword_511E5C: dd ?
dword_511E60: dd ?
dword_511E64: dd ?
	times 13h dd ?
dword_511EB4: dd ?
dword_511EB8: dd ?
dword_511EBC: dd ?
dword_511EC0: dd ?
dword_511EC4: dd ?
dword_511EC8: dd ?
dword_511ECC: dd ?
dword_511ED0: dd ?
dword_511ED4: dd ?
dword_511ED8: dd ?
dword_511EDC: dd ?
dword_511EE0: dd ?
dword_511EE4: dd ?
dword_511EE8: dd ?
dword_511EEC: dd ?
dword_511EF0: dd ?
dword_511EF4: dd ?
dword_511EF8: dd ?
dword_511EFC: dd ?
dword_511F00: dd ?
dword_511F04: dd ?
dword_511F08: dd ?
dword_511F0C: dd ?
dword_511F10: dd ?
dword_511F14: dd ?
dword_511F18: dd ?
dword_511F1C: dd ?
dword_511F20: dd ?
dword_511F24: dd ?
dword_511F28: dd ?
dword_511F2C: dd ?
dword_511F30: dd ?
dword_511F34: dd ?
dword_511F38: dd ?
dword_511F3C: dd ?
dword_511F40: dd ?
dword_511F44: dd ?
dword_511F48: dd ?
dword_511F4C: dd ?
dword_511F50: dd ?
dword_511F54: dd ?
dword_511F58: times 2 dd ?
	times 3 db ?
byte_511F63: db ?
byte_511F64: db ?
	times 3 db ?
	times 16h dd ?
dword_511FC0: dd ?
dword_511FC4: dd ?
dword_511FC8: dd ?
dword_511FCC: dd ?
dword_511FD0: dd ?
dword_511FD4: dd ?
	times 2 dd ?
dword_511FE0: dd ?
dword_511FE4: dd ?
	dd ?
dword_511FEC: dd ?
dword_511FF0: dd ?
dword_511FF4: dd ?
byte_511FF8: db ?
	times 3 db ?
	times 2 dd ?
dword_512004: dd ?
dword_512008: dd ?
dword_51200C: dd ?
dword_512010: dd ?
dword_512014: dd ?
dword_512018: dd ?
dword_51201C: dd ?
dword_512020: dd ?
dword_512024: dd ?
dword_512028: dd ?
dword_51202C: dd ?
dword_512030: dd ?
dword_512034: dd ?
dword_512038: dd ?
dword_51203C: dd ?
dword_512040: dd ?
dword_512044: dd ?
dword_512048: dd ?
dword_51204C: dd ?
	dd ?
dword_512054: dd ?
	dd ?
dword_51205C: dd ?
dword_512060: dd ?
dword_512064: dd ?
dword_512068: dd ?
dword_51206C: dd ?
dword_512070: dd ?
	times 3Bh dd ?
dword_512160: dd ?
	times 1Fh dd ?
dword_5121E0: times 5 dd ?
dword_5121F4: dd ?
dword_5121F8: dd ?
dword_5121FC: dd ?
dword_512200: dd ?
dword_512204: dd ?
dword_512208: dd ?
dword_51220C: dd ?
dword_512210: dd ?
dword_512214: dd ?
byte_512218: db ?
byte_512219: db ?
	times 2 db ?
dword_51221C: dd ?
dword_512220: dd ?
dword_512224: dd ?
dword_512228: dd ?
dword_51222C: dd ?
dword_512230: dd ?
dword_512234: dd ?
dword_512238: dd ?
dword_51223C: dd ?
dword_512240: dd ?
dword_512244: dd ?
dword_512248: dd ?
dword_51224C: dd ?
dword_512250: dd ?
dword_512254: dd ?
dword_512258: dd ?
dword_51225C: dd ?
dword_512260: dd ?
dword_512264: dd ?
dword_512268: dd ?
dword_51226C: dd ?
dword_512270: dd ?
dword_512274: dd ?
dword_512278: dd ?
dword_51227C: dd ?
dword_512280: dd ?
dword_512284: dd ?
dword_512288: dd ?
dword_51228C: dd ?
dword_512290: dd ?
dword_512294: dd ?
dword_512298: dd ?
dword_51229C: dd ?
dword_5122A0: dd ?
	times 3 dd ?
dword_5122B0: dd ?
	times 0EFh dd ?
dword_512670: dd ?
	times 0Fh dd ?
dword_5126B0: dd ?
	times 0Fh dd ?
dword_5126F0: dd ?
dword_5126F4: times 4 dd ?
dword_512704: times 4 dd ?
	times 2 db ?
word_512716: dw ?
	times 24h dd ?
dword_5127A8: dd ?
dword_5127AC: dd ?
dword_5127B0: dd ?
dword_5127B4: dd ?
dword_5127B8: dd ?
byte_5127BC: times 3 db ?
byte_5127BF: db ?
byte_5127C0: db ?
	times 3 db ?
dword_5127C4: dd ?
dword_5127C8: dd ?
	times 1Eh dd ?
dword_512844: dd ?
dword_512848: dd ?
	times 1Fh dd ?
dword_5128C8: dd ?
dword_5128CC: dd ?
dword_5128D0: dd ?
	times 17h dd ?
dword_512930: dd ?
dword_512934: dd ?
dword_512938: dd ?
dword_51293C: dd ?
dword_512940: dd ?
dword_512944: dd ?
dword_512948: dd ?
dword_51294C: dd ?
dword_512950: dd ?
dword_512954: dd ?
dword_512958: dd ?
dword_51295C: dd ?
	dd ?
dword_512964: dd ?
dword_512968: dd ?
	times 2 dd ?
dword_512974: dd ?
dword_512978: dd ?
dword_51297C: dd ?
	dd ?
dword_512984: dd ?
dword_512988: dd ?
dword_51298C: dd ?
	dd ?
dword_512994: dd ?
	times 26h dd ?
dword_512A30: dd ?
byte_512A34: db ?
dword_512A35: dd ?
byte_512A39: db ?
byte_512A3A: db ?
byte_512A3B: db ?
dword_512A3C: dd ?
dword_512A40: dd ?
dword_512A44: dd ?
dword_512A48: dd ?
	times 12h dd ?
dword_512A94: dd ?
dword_512A98: dd ?
dword_512A9C: dd ?
dword_512AA0: dd ?
dword_512AA4: dd ?
dword_512AA8: dd ?
dword_512AAC: dd ?
dword_512AB0: dd ?
dword_512AB4: dd ?
dword_512AB8: dd ?
dword_512ABC: dd ?
dword_512AC0: dd ?
	times 2 dd ?
	times 3 db ?
byte_512ACF: db ?
byte_512AD0: db ?
byte_512AD1: db ?
	times 6 db ?
dword_512AD8: times 0B1h dd ?
	times 2 db ?
dword_512D9E: dd ?
	times 2 db ?
dword_512DA4: dd ?
byte_512DA8: db ?
byte_512DA9: db ?
byte_512DAA: db ?
byte_512DAB: db ?
byte_512DAC: db ?
byte_512DAD: db ?
byte_512DAE: db ?
byte_512DAF: db ?
byte_512DB0: db ?
	times 3 db ?
dword_512DB4: dd ?
byte_512DB8: db ?
byte_512DB9: db ?
byte_512DBA: db ?
byte_512DBB: db ?
byte_512DBC: db ?
byte_512DBD: db ?
byte_512DBE: db ?
byte_512DBF: db ?
byte_512DC0: db ?
byte_512DC1: db ?
	times 0Eh db ?
byte_512DD0: db ?
byte_512DD1: db ?
byte_512DD2: db ?
byte_512DD3: db ?
byte_512DD4: db ?
byte_512DD5: db ?
byte_512DD6: db ?
byte_512DD7: db ?
byte_512DD8: db ?
byte_512DD9: db ?
byte_512DDA: db ?
byte_512DDB: db ?
byte_512DDC: db ?
	times 6 db ?
	times 2 dd ?
byte_512DEB: db ?
byte_512DEC: times 2 db ?
byte_512DEE: db ?
byte_512DEF: db ?
byte_512DF0: db ?
byte_512DF1: db ?
byte_512DF2: db ?
byte_512DF3: db ?
byte_512DF4: db ?
byte_512DF5: db ?
byte_512DF6: db ?
byte_512DF7: db ?
byte_512DF8: db ?
byte_512DF9: db ?
byte_512DFA: db ?
byte_512DFB: db ?
byte_512DFC: db ?
byte_512DFD: db ?
byte_512DFE: db ?
byte_512DFF: db ?
byte_512E00: db ?
	times 3 db ?
	times 2 dd ?
dword_512E0C: dd ?
dword_512E10: dd ?
dword_512E14: dd ?
dword_512E18: dd ?
dword_512E1C: dd ?
dword_512E20: dd ?
dword_512E24: dd ?
dword_512E28: dd ?
dword_512E2C: dd ?
dword_512E30: dd ?
dword_512E34: dd ?
dword_512E38: dd ?
dword_512E3C: dd ?
dword_512E40: dd ?
dword_512E44: dd ?
dword_512E48: dd ?
dword_512E4C: dd ?
dword_512E50: dd ?
dword_512E54: dd ?
dword_512E58: dd ?
dword_512E5C: dd ?
dword_512E60: dd ?
dword_512E64: dd ?
dword_512E68: dd ?
dword_512E6C: dd ?
dword_512E70: dd ?
dword_512E74: dd ?
dword_512E78: dd ?
dword_512E7C: dd ?
dword_512E80: dd ?
byte_512E84: db ?
	times 3 db ?
	dd ?
	db ?
byte_512E8D: db ?
	times 2 db ?
	times 0Fh dd ?
byte_512ECC: db ?
byte_512ECD: db ?
byte_512ECE: db ?
byte_512ECF: db ?
byte_512ED0: db ?
byte_512ED1: db ?
byte_512ED2: db ?
byte_512ED3: db ?
dword_512ED4: dd ?
	times 5 dd ?
dword_512EEC: dd ?
	times 5 dd ?
dword_512F04: dd ?
	times 5 dd ?
dword_512F1C: dd ?
	times 5 dd ?
dword_512F34: dd ?
byte_512F38: times 2 db ?
word_512F3A: dw ?
	times 2 db ?
byte_512F3E: db ?
byte_512F3F: db ?
byte_512F40: db ?
byte_512F41: db ?
byte_512F42: db ?
byte_512F43: db ?
byte_512F44: db ?
byte_512F45: db ?
	times 2 db ?
dword_512F48: dd ?
dword_512F4C: times 2 dd ?
	db ?
byte_512F55: times 3 db ?
	dd ?
	times 2 db ?
byte_512F5E: db ?
	times 9 dd ?
	times 3 db ?
word_512F86: dw ?
	times 4 dd ?
dword_512F98: dd ?
	times 3 dd ?
dword_512FA8: dd ?
	times 3 dd ?
dword_512FB8: dd ?
	times 3 dd ?
dword_512FC8: dd ?
	times 3 dd ?
dword_512FD8: dd ?
	times 3 dd ?
dword_512FE8: dd ?
	times 3 dd ?
dword_512FF8: dd ?
	times 3 dd ?
dword_513008: dd ?
	times 3 dd ?
dword_513018: dd ?
	times 3 dd ?
dword_513028: dd ?
	times 2 dd ?
	times 2 db ?
dword_513036: dd ?
word_51303A: dw ?
	times 4 dd ?
dword_51304C: dd ?
	times 2 dd ?
dword_513058: times 2 dd ?
	times 2 db ?
word_513062: dw ?
	times 3 dd ?
	times 3 db ?
byte_513073: db ?
byte_513074: db ?
	times 0Bh db ?
dword_513080: dd ?
	times 7 dd ?
dword_5130A0: dd ?
dword_5130A4: dd ?
	times 2 dd ?
dword_5130B0: dd ?
	times 4 dd ?
dword_5130C4: dd ?
dword_5130C8: dd ?
dword_5130CC: dd ?
	dd ?
dword_5130D4: dd ?
dword_5130D8: dd ?
dword_5130DC: dd ?
dword_5130E0: dd ?
dword_5130E4: dd ?
dword_5130E8: dd ?
	times 5 dd ?
dword_513100: dd ?
dword_513104: dd ?
	times 9Ch dd ?
dword_513378: times 12h dd ?
byte_5133C0: db ?
byte_5133C1: times 3 db ?
	times 11h dd ?
dword_513408: dd ?
dword_51340C: dd ?
	times 3 dd ?
	times 2 db ?
byte_51341E: db ?
	db ?
byte_513420: times 2 db ?
word_513422: dw ?
word_513424: dw ?
word_513426: dw ?
dword_513428: dd ?
	dd ?
word_513430: dw ?
	dw ?
word_513434: dw ?
dword_513436: dd ?
word_51343A: dw ?
	times 2 dd ?
	times 2 db ?
word_513446: dw ?
word_513448: dw ?
	dw ?
	times 2 dd ?
	times 2 db ?
word_513456: dw ?
word_513458: dw ?
word_51345A: dw ?
word_51345C: dw ?
byte_51345E: db ?
byte_51345F: db ?
dword_513460: dd ?
dword_513464: dd ?
dword_513468: dd ?
dword_51346C: dd ?
dword_513470: dd ?
	times 3 dd ?
dword_513480: dd ?
dword_513484: dd ?
dword_513488: dd ?
dword_51348C: dd ?
	dd ?
dword_513494: dd ?
dword_513498: dd ?
dword_51349C: dd ?
dword_5134A0: dd ?
dword_5134A4: dd ?
	times 3 dd ?
dword_5134B4: dd ?
dword_5134B8: dd ?
dword_5134BC: dd ?
dword_5134C0: dd ?
dword_5134C4: dd ?
dword_5134C8: dd ?
dword_5134CC: dd ?
dword_5134D0: dd ?
dword_5134D4: dd ?
dword_5134D8: dd ?
dword_5134DC: times 10 dd ?
dword_513504: dd ?
dword_513508: dd ?
dword_51350C: dd ?
dword_513510: dd ?
dword_513514: dd ?
dword_513518: dd ?
dword_51351C: dd ?
dword_513520: dd ?
dword_513524: dd ?
dword_513528: times 38h dd ?
dword_513608: times 10h dd ?
dword_513648: dd ?
dword_51364C: dd ?
dword_513650: dd ?
dword_513654: dd ?
dword_513658: dd ?
dword_51365C: dd ?
dword_513660: dd ?
dword_513664: times 79h dd ?
dword_513848: dd ?
dword_51384C: dd ?
dword_513850: times 3A96h dd ?
dword_5222A8: dd ?
dword_5222AC: dd ?
dword_5222B0: dd ?
dword_5222B4: dd ?
dword_5222B8: dd ?
dword_5222BC: dd ?
dword_5222C0: dd ?
dword_5222C4: dd ?
dword_5222C8: dd ?
dword_5222CC: dd ?
dword_5222D0: dd ?
dword_5222D4: dd ?
dword_5222D8: dd ?
dword_5222DC: dd ?
dword_5222E0: dd ?
dword_5222E4: times 18h dd ?
dword_522344: dd ?
dword_522348: dd ?
dword_52234C: dd ?
dword_522350: times 7 dd ?
dword_52236C: dd ?
dword_522370: dd ?
	times 7 dd ?
byte_522390: db ?
	times 3 db ?
	times 7 dd ?
byte_5223B0: db ?
	times 3 db ?
	times 7 dd ?
byte_5223D0: db ?
	times 3 db ?
	times 7 dd ?
byte_5223F0: db ?
	times 3 db ?
	times 0E7h dd ?
dword_522790: dd ?
dword_522794: dd ?
dword_522798: dd ?
dword_52279C: dd ?
dword_5227A0: dd ?
dword_5227A4: dd ?
dword_5227A8: dd ?
dword_5227AC: dd ?
dword_5227B0: dd ?
dword_5227B4: dd ?
	dd ?
dword_5227BC: dd ?
dword_5227C0: dd ?
	times 5 dd ?
dword_5227D8: times 7 dd ?
dword_5227F4: dd ?
	times 164h dd ?
dword_522D88: dd ?
byte_522D8C: db ?
	times 3 db ?
	times 34A3h dd ?
	times 3 db ?
	db ?
	times 3FFDh dd ?
	times 35Eh dd ?
dword_540D8C: dd ?
dword_540D90: dd ?
dword_540D94: dd ?
byte_540D98: db ?
	times 3 db ?
	times 8 dd ?
dword_540DBC: dd ?
	times 12h dd ?
dword_540E08: dd ?
	times 14h dd ?
dword_540E5C: dd ?
	times 13h dd ?
dword_540EAC: dd ?
	times 13h dd ?
dword_540EFC: dd ?
dword_540F00: dd ?
dword_540F04: dd ?
dword_540F08: dd ?
dword_540F0C: times 5 dd ?
dword_540F20: dd ?
dword_540F24: dd ?
dword_540F28: dd ?
dword_540F2C: dd ?
dword_540F30: dd ?
dword_540F34: dd ?
dword_540F38: dd ?
dword_540F3C: dd ?
dword_540F40: dd ?
dword_540F44: dd ?
dword_540F48: dd ?
dword_540F4C: dd ?
dword_540F50: dd ?
dword_540F54: dd ?
dword_540F58: dd ?
dword_540F5C: dd ?
dword_540F60: dd ?
dword_540F64: dd ?
dword_540F68: dd ?
dword_540F6C: dd ?
dword_540F70: dd ?
dword_540F74: dd ?
byte_540F78: db ?
byte_540F79: db ?
word_540F7A: dw ?
	dd ?
dword_540F80: times 8 dd ?
byte_540FA0: db ?
byte_540FA1: db ?
byte_540FA2: db ?
byte_540FA3: db ?
byte_540FA4: times 3 db ?
byte_540FA7: db ?
	times 3DFh dd ?
byte_541F24: db ?
	times 3 db ?
	times 1Fh dd ?
byte_541FA4: db ?
	times 3 db ?
	times 0FFh dd ?
dword_5423A4: dd ?
dword_5423A8: dd ?
dword_5423AC: dd ?
	times 6 dd ?
dword_5423C8: dd ?
dword_5423CC: dd ?
byte_5423D0: db ?
	times 3 db ?
	times 7 dd ?
dword_5423F0: dd ?
dword_5423F4: dd ?
dword_5423F8: dd ?
dword_5423FC: dd ?
	times 0Ch dd ?
dword_542430: dd ?
dword_542434: dd ?
dword_542438: dd ?
dword_54243C: dd ?
dword_542440: dd ?
	times 54h dd ?
dword_542594: times 10h dd ?
byte_5425D4: db ?
	times 3 db ?
dword_5425D8: dd ?
	times 0AC1h dd ?
dword_5450E0: dd ?
	times 3 dd ?
dword_5450F0: dd ?
dword_5450F4: dd ?
dword_5450F8: dd ?
dword_5450FC: dd ?
dword_545100: dd ?
dword_545104: dd ?
dword_545108: dd ?
dword_54510C: dd ?
dword_545110: dd ?
dword_545114: dd ?
dword_545118: dd ?
dword_54511C: dd ?
dword_545120: dd ?
dword_545124: dd ?
dword_545128: dd ?
dword_54512C: dd ?
	times 24h dd ?
dword_5451C0: dd ?
dword_5451C4: dd ?
dword_5451C8: dd ?
dword_5451CC: dd ?
	times 2 dd ?
dword_5451D8: dd ?
dword_5451DC: dd ?
dword_5451E0: dd ?
dword_5451E4: dd ?
	times 0Fh dd ?
dword_545224: dd ?
dword_545228: dd ?
dword_54522C: dd ?
dword_545230: dd ?
	times 3Eh dd ?
dword_54532C: times 0BFh dd ?
dword_545628: dd ?
dword_54562C: dd ?
	times 3Eh dd ?
dword_545728: dd ?
dword_54572C: dd ?
	times 3Eh dd ?
dword_545828: dd ?
dword_54582C: dd ?
	times 3Fh dd ?
dword_54592C: dd ?
dword_545930: dd ?
	times 3 dd ?
dword_545940: dd ?
dword_545944: times 16CAh dd ?
dword_54B46C: times 3025h dd ?
dword_557500: dd ?
	times 2 dd ?
dword_55750C: dd ?
dword_557510: dd ?
byte_557514: db ?
	times 3 db ?
byte_557518: db ?
	times 7 db ?
dword_557520: dd ?
	times 6 dd ?
dword_55753C: dd ?
dword_557540: dd ?
	times 6 dd ?
dword_55755C: dd ?
	times 0EFh dd ?
dword_55791C: dd ?
dword_557920: dd ?
	times 0Fh dd ?
dword_557960: dd ?
dword_557964: dd ?
dword_557968: dd ?
byte_55796C: db ?
	db ?
	times 4 dd ?
dword_55797E: dd ?
dword_557982: dd ?
	dw ?
	times 17h dd ?
dword_5579E4: dd ?
byte_5579E8: db ?
	times 2 db ?
	times 3 dd ?
byte_5579F7: db ?
	times 6Ch dd ?
dword_557BA8: times 0Ah dd ?
dword_557BD0: dd ?
dword_557BD4: dd ?
	times 6 dd ?
dword_557BF0: dd ?
dword_557BF4: dd ?
	times 2 dd ?
dword_557C00: dd ?
dword_557C04: dd ?
dword_557C08: dd ?
dword_557C0C: dd ?
dword_557C10: dd ?
dword_557C14: dd ?
dword_557C18: times 0Ah dd ?
dword_557C40: dd ?
dword_557C44: dd ?
	times 6 dd ?
dword_557C60: dd ?
	times 3 dd ?
dword_557C70: dd ?
dword_557C74: dd ?
dword_557C78: dd ?
dword_557C7C: dd ?
dword_557C80: dd ?
dword_557C84: dd ?
dword_557C88: times 0Ah dd ?
dword_557CB0: dd ?
dword_557CB4: dd ?
	times 6 dd ?
dword_557CD0: dd ?
	times 3 dd ?
dword_557CE0: dd ?
dword_557CE4: dd ?
dword_557CE8: dd ?
dword_557CEC: dd ?
dword_557CF0: dd ?
dword_557CF4: dd ?
dword_557CF8: dd ?
dword_557CFC: dd ?
dword_557D00: times 5 dd ?
dword_557D14: times 5 dd ?
dword_557D28: dd ?
dword_557D2C: dd ?
dword_557D30: dd ?
	times 2BBh dd ?
dword_558820: times 18h dd ?
dword_558880: dd ?
	times 11h dd ?
dword_5588C8: times 0Eh dd ?
dword_558900: times 0E0h dd ?
dword_558C80: dd ?
dword_558C84: dd ?
dword_558C88: times 2 dd ?
dword_558C90: times 2 dd ?
dword_558C98: dd ?
dword_558C9C: dd ?
dword_558CA0: dd ?
dword_558CA4: dd ?
dword_558CA8: dd ?
dword_558CAC: dd ?
dword_558CB0: dd ?
dword_558CB4: dd ?
dword_558CB8: dd ?
dword_558CBC: dd ?
byte_558CC0: db ?
byte_558CC1: db ?
byte_558CC2: db ?
byte_558CC3: db ?
byte_558CC4: db ?
byte_558CC5: db ?
byte_558CC6: db ?
byte_558CC7: db ?
byte_558CC8: db ?
byte_558CC9: db ?
byte_558CCA: db ?
byte_558CCB: db ?
byte_558CCC: db ?
byte_558CCD: db ?
byte_558CCE: db ?
byte_558CCF: db ?
dword_558CD0: dd ?
dword_558CD4: dd ?
	times 770h dd ?
dword_55AA98: dd ?
dword_55AA9C: dd ?
dword_55AAA0: dd ?
dword_55AAA4: dd ?
dword_55AAA8: dd ?
dword_55AAAC: dd ?
dword_55AAB0: dd ?
dword_55AAB4: dd ?
dword_55AAB8: dd ?
dword_55AABC: dd ?
byte_55AAC0: db ?
byte_55AAC1: db ?
byte_55AAC2: db ?
byte_55AAC3: db ?
	times 51Dh dd ?
dword_55BF38: times 2 dd ?
dword_55BF40: times 2 dd ?
dword_55BF48: times 2 dd ?
dword_55BF50: times 2 dd ?
dword_55BF58: times 2 dd ?
dword_55BF60: dd ?
dword_55BF64: dd ?
dword_55BF68: dd ?
dword_55BF6C: dd ?
dword_55BF70: dd ?
dword_55BF74: dd ?
dword_55BF78: dd ?
dword_55BF7C: dd ?
dword_55BF80: dd ?
dword_55BF84: dd ?
	times 4A6h dd ?
dword_55D220: dd ?
dword_55D224: dd ?
dword_55D228: dd ?
dword_55D22C: dd ?
dword_55D230: dd ?
dword_55D234: dd ?
dword_55D238: dd ?
dword_55D23C: dd ?
dword_55D240: dd ?
	times 42Fh dd ?
dword_55E300: dd ?
dword_55E304: dd ?
	times 2Dh dd ?
dword_55E3BC: dd ?
dword_55E3C0: dd ?
dword_55E3C4: dd ?
	times 19h dd ?
dword_55E42C: dd ?
dword_55E430: dd ?
dword_55E434: dd ?
dword_55E438: dd ?
dword_55E43C: dd ?
dword_55E440: dd ?
dword_55E444: dd ?
dword_55E448: dd ?
dword_55E44C: dd ?
	times 9FAh dd ?
dword_560C38: dd ?
	times 4 dd ?
dword_560C4C: dd ?
	times 4 dd ?
dword_560C60: dd ?
dword_560C64: dd ?
dword_560C68: dd ?
dword_560C6C: dd ?
	times 58h dd ?
dword_560DD0: dd ?
dword_560DD4: dd ?
dword_560DD8: dd ?
dword_560DDC: dd ?
	times 545h dd ?
dword_5622F4: times 13Fh dd ?
dword_5627F0: dd ?
dword_5627F4: dd ?
	times 6 dd ?
dword_562810: times 23h dd ?
dword_56289C: times 7 dd ?
dword_5628B8: times 22h dd ?
dword_562940: dd ?
	dd ?
dword_562948: times 0Ch dd ?
dword_562978: dd ?
dword_56297C: dd ?
dword_562980: dd ?
dword_562984: dd ?
dword_562988: times 3Ah dd ?
dword_562A70: dd ?
dword_562A74: dd ?
dword_562A78: times 18h dd ?
dword_562AD8: times 0C0h dd ?
dword_562DD8: times 0C0h dd ?
dword_5630D8: dd ?
dword_5630DC: dd ?
dword_5630E0: dd ?
dword_5630E4: dd ?
dword_5630E8: dd ?
	times 3 dd ?
dword_5630F8: dd ?
dword_5630FC: dd ?
dword_563100: dd ?
dword_563104: dd ?
dword_563108: dd ?
dword_56310C: dd ?
	times 6 dd ?
	times 2 db ?
dword_56312A: dd ?
	dw ?
dword_563130: dd ?
	times 1Fh dd ?
dword_5631B0: dd ?
dword_5631B4: dd ?
	times 0FEh dd ?
	times 5 dd ? ;?
dword_5635C4: dd ?
dword_5635C8: dd ?
dword_5635CC: dd ?
dword_5635D0: dd ?
dword_5635D4: dd ?
dword_5635D8: dd ?
dword_5635DC: dd ?
byte_5635E0: db ?
	times 2 db ?
byte_5635E3: db ?
byte_5635E4: db ?
	times 3 db ?
	times 3Fh dd ?
dword_5636E4: dd ?
dword_5636E8: dd ?
dword_5636EC: dd ?
dword_56377C: dd ?
dword_563780: dd ?
	times 6 dd ?
dword_56379C: dd ?
dword_5637A0: dd ?
;	UINT uResolution
uResolution: dd ?
dword_5637AC: dd ?
dword_5637B0: times 5 dd ?
dword_5637CC: dd ?
dword_5637D0: dd ?
dword_5637D4: dd ?
dword_5637D8: dd ?
dword_5637DC: times 5 dd ?
dword_5637F0: dd ?
dword_5637F4: dd ?
dword_5637F8: dd ?
dword_5637FC: dd ?
dword_563800: dd ?
dword_563804: dd ?
	times 3Eh dd ?
dword_563900: times 4 dd ?
dword_563910: dd ?
	times 110h dd ?
dword_563D54: dd ? ; HWND
	dd ?
	db ?
byte_563D5D: db ?
	times 3 dd ?
dword_563D74: dd ?
dword_563D80: dd ?
dword_563D84: dd ?
	times 50h dd ? ;?
dword_563F00: dd ?
dword_563F04: dd ?
	dd ?
dword_563F0C: dd ?
dword_563F10: dd ?
dword_563F14: times 5 dd ?
dword_563F28: dd ?
	dd ?
dword_563F30: dd ?
;	const CHAR byte_563F34
byte_563F34: db ?
	times 41h dd ?
;	const CHAR FileName
FileName: db ?
	times 2 db ?
	times 41h dd ?
dword_564140: dd ?
	times 3 dd ?
word_564150: dw ?
byte_564152: db ?
byte_564153: db ?
byte_564154: db ?
dword_564155: dd ?
byte_564159: db ?
word_56415A: dw ?
dword_56415C: dd ?
	times 3Ch dd ?
dword_564250: dd ?
dword_564254: dd ?
	times 2 dd ?
;	HANDLE TargetHandle
TargetHandle: dd ?
dword_564264: dd ?
dword_564268: dd ?
dword_56426C: dd ?
dword_564270: times 7 dd ?
dword_56428C: times 9 dd ?
dword_5642B0: times 5 dd ?
dword_5642C4: dd ?
dword_5642C8: dd ?
;	SOCKET s
dword_5642CC: dd ?
dword_5642D0: dd ?
dword_5642D4: times 3 dd ?
	times 2 db ?
;	char buf[2]
buf: times 2 db ?
byte_5642E4: times 2 db ?
word_5642E6: dw ?
	times 0Bh dd ?
	times 2 db ?
word_564316: dw ?
	times 2 dd ?
	times 2 db ?
word_564322: dw ?
dword_564324: dd ?
	times 7 dd ?
dword_564344: dd ?
	times 7 dd ?
dword_564364: times 6 dd ?
dword_56437C: dd ?
dword_564380: dd ?
dword_564384: dd ?
dword_564388: dd ?
dword_56438C: dd ?
dword_564390: dd ?
dword_564394: dd ?
	times 3 dd ?
dword_5643A4: dd ?
	times 2 dd ?
dword_5643B0: dd ?
	times 2 dd ?
dword_5643C0: times 6 dd ?
dword_5643D8: dd ?
	dd ?
dword_5643E0: dd ?
dword_5643E4: dd ?
dword_5643E8: dd ?
	dd ?
dword_5643F0: dd ?
dword_5643F4: dd ?
dword_5643F8: times 5 dd ?
dword_56440C: dd ?
dword_564410: times 3 dd ?
dword_56441C: times 11h dd ?
dword_564460: dd ?
	times 5 dd ?
dword_564478: dd ?
	times 9 dd ?
byte_5644A0: db ?
	times 3 db ?
	times 0Eh dd ?
dword_5644DC: dd ?
dword_5644E0: dd ?
	times 0Eh dd ?
dword_56451C: dd ?
dword_564520: times 8 dd ?
dword_56455C: times 8 dd ?
dword_56457C: times 8 dd ?
dword_56459C: times 8 dd ?
dword_5645BC: times 8 dd ?
dword_5645DC: times 8 dd ?
dword_5645FC: times 8 dd ?
dword_56461C: times 8 dd ?
dword_56463C: times 8 dd ?
dword_56465C: times 3Fh dd ?
dword_564758: dd ?
dword_56475C: dd ?
	times 1FFEh dd ?
dword_56C758: dd ?
dword_56C75C: dd ?
	times 1FEh dd ?
dword_56CF58: dd ?
dword_56CF5C: dd ?
	times 3Fh dd ?
byte_56D05C: db ?
	times 3 db ?
	times 3Fh dd ?
dword_56D15C: times 8 dd ?
dword_56D17C: times 8 dd ?
dword_56D19C: times 10h dd ?
dword_56D1DC: times 10h dd ?
dword_56D21C: times 10h dd ?
dword_56D25C: times 10h dd ?
dword_56D29C: times 10h dd ?
dword_56D2DC: times 10h dd ?
dword_56D31C: times 10h dd ?
dword_56D35C: times 8 dd ?
dword_56D37C: times 8 dd ?
dword_56D39C: times 10h dd ?
dword_56D3DC: times 10h dd ?
dword_56D41C: times 10h dd ?
dword_56D45C: times 10h dd ?
dword_56D49C: times 10h dd ?
dword_56D4DC: times 10h dd ?
dword_56D51C: times 10h dd ?
dword_56D55C: dd ?
dword_56D560: dd ?
	times 0AFh dd ?
dword_56D820: dd ?
	times 0B1h dd ?
dword_56DAE8: dd ?
	times 81h dd ?
dword_56DCF0: dd ?
	times 83h dd ?
dword_56DF00: dd ?
	times 98h dd ?
dword_56E164: dd ?
	times 98h dd ?
dword_56E3C8: dd ?
	times 7Fh dd ?
dword_56E5C8: dd ?
	times 7Eh dd ?
dword_56E7C4: dd ?
dword_56E7C8: dd ?
	times 7Fh dd ?
dword_56E9C8: dd ?
dword_56E9CC: dd ?
dword_56E9D0: dd ?
	times 2 dd ?
flt_56E9DC: dd ?
dword_56E9E0: dd ?
	times 0FFh dd ?
dword_56EEA4: dd ?
	times 24h dd ?
dword_56EF38: dd ?
word_56EF3C: dw ?
	dw ?
	times 100h dd ?
dword_56F340: dd ?
dword_56F344: dd ?
dword_56F348: dd ?
	times 8 dd ?
	times 3 db ?
	times 282h dd ?
dword_56FD7C: dd ?
dword_56FD80: dd ?
	times 401h dd ?
dword_570D88: times 2 dd ?
dword_570E38: dd ?

dword_570E60: dd ?
	times 0FFh dd ?
dword_571260: dd ?
dword_571264: dd ?

dword_59BF5C: dd ?
dword_59BF60: dd ?
	times 6 dd ?
dword_59BF7C: dd ?
dword_59BF80: times 5 dd ?
dword_59BF94: dd ?
dword_59BF98: dd ?
	dd ?
dword_59BFA0: dd ?
dword_59BFA4: dd ?
	times 2 dd ?
dword_59BFB0: dd ?
	dd ?
	times 3 db ?
byte_59BFBB: db ?
dword_59BFBC: dd ?
	times 7 dd ?
	times 2 db ?
dword_59BFDE: dd ?
	dd ?
dword_59BFE6: dd ?
	db ?
byte_59BFEB: db ?
	times 2 dd ?
byte_59BFF4: db ?
	times 3 db ?
	times 16Ch dd ?
dword_59C5A8: dd ?
dword_59C5AC: dd ?
dword_59C5B0: dd ?
dword_59C5B4: dd ?
	times 12h dd ?
dword_59C600: dd ?
dword_59C604: dd ?
dword_59C608: dd ?
	db ?
byte_59C60D: db ?
	times 2 db ?
dword_59C610: dd ?
dword_59C614: dd ?
byte_59C618: db ?
	times 3 db ?
dword_59C61C: times 202h dd ?
dword_59CE24: times 204h dd ?
dword_59D634: times 0A73h dd ?
dword_5A0000: times 26Eh dd ?
byte_5A09B8: db ?
	times 3 db ?
	times 378h dd ?
dword_5A179C: times 3790h dd ?
dword_5AF5DC: dd ?
dword_5AF5E0: dd ?
dword_5AF5E4: dd ?
dword_5AF5E8: dd ?
dword_5AF5EC: dd ?
dword_5AF5F0: dd ?
dword_5AF5F4: dd ?
dword_5AF5F8: dd ?
dword_5AF5FC: dd ?
dword_5AF600: times 1643h dd ?
dword_5B4F0C: dd ?
dword_5B4F10: dd ?
dword_5B4F14: dd ?
dword_5B4F18: dd ?
dword_5B4F1C: dd ?
dword_5B4F20: dd ?
dword_5B4F24: dd ?
dword_5B4F28: dd ?
dword_5B4F2C: dd ?
	times 3 dd ?
dword_5B4F3C: dd ?
flt_5B4F40: dd ?
flt_5B4F44: dd ?
flt_5B4F48: dd ?
dword_5B4F4C: dd ?
dword_5B4F50: dd ?
dword_5B4F54: dd ?
dword_5B4F58: dd ?
dword_5B4F5C: dd ?
dword_5B4F60: dd ?
dword_5B4F64: times 610h dd ?
lpTlsValue: dd ?
dword_5B9440: dd ?
dword_5B9444: dd ?
dword_5B9448: dd ?
dword_5B944C: dd ?
dword_5B9450: dd ?
flt_5B9460: dd ?
flt_5B9464: dd ?
	times 0FEh dd ?
dword_5B9860: dd ?
dword_5B9864: dd ?
	times 0FFh dd ?
dword_5B9D94: dd ?
	times 2 dd ?
dword_5BA4E4: dd ?
	times 0FFh dd ?
